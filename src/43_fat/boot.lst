     1                                  ;************************************************************************
     2                                  ;	BIOSでロードされる最初のセクタ
     3                                  ;	
     4                                  ;	プログラム全体を通して、セグメントの値は0x0000とする。
     5                                  ;	(DS==ES==0)
     6                                  ;	
     7                                  ;************************************************************************
     8                                  
     9                                  ;************************************************************************
    10                                  ;	マクロ
    11                                  ;************************************************************************
    12                                  %include	"../include/define.s"
    13                              <1> ;************************************************************************
    14                              <1> ;	メモリイメージ
    15                              <1> ;************************************************************************
    16                              <1> 
    17                              <1> 		;---------------------------------------
    18                              <1> 		;           |            | 
    19                              <1> 		;           |____________| 
    20                              <1> 		; 0000_7A00 |            | ( 512) スタック
    21                              <1> 		;           |____________| 
    22                              <1> 		; 0000_7C00 |            | (  8K) ブート
    23                              <1> 		;           =            = 
    24                              <1> 		;           |____________| 
    25                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    26                              <1> 		;           =            = 
    27                              <1> 		;           |____________| 
    28                              <1> 		; 0000_BC00 |////////////| 
    29                              <1> 		;           =            = 
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    32                              <1> 		;           |____________| 
    33                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    34                              <1> 		;           |____________| 
    35                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    36                              <1> 		;           |            | 
    37                              <1> 		;           =            = 
    38                              <1> 		;           |____________| 
    39                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    40                              <1> 		;           |            | （各タスク1K）
    41                              <1> 		;           =            = 
    42                              <1> 		;           |____________| 
    43                              <1> 		; 0010_5000 |            | Dir
    44                              <1> 		;      6000 |____________| Page
    45                              <1> 		; 0010_7000 |            | Dir
    46                              <1> 		;      8000 |____________| Page
    47                              <1> 		; 0010_9000 |////////////| 
    48                              <1> 		;           |            | 
    49                              <1> 
    50                              <1> 
    51                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    52                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    53                              <1> 
    54                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    55                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    56                              <1> 
    57                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    58                              <1> 
    59                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    60                              <1> 
    61                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    62                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    63                              <1> 
    64                              <1> 		E820_RECORD_SIZE	equ		20
    65                              <1> 
    66                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    67                              <1> 
    68                              <1> 
    69                              <1> 		STACK_BASE			equ		0x0010_3000		; タスク用スタックエリア
    70                              <1> 		STACK_SIZE			equ		1024			; スタックサイズ
    71                              <1> 
    72                              <1> 		SP_TASK_0			equ		STACK_BASE + (STACK_SIZE * 1)
    73                              <1> 		SP_TASK_1			equ		STACK_BASE + (STACK_SIZE * 2)
    74                              <1> 		SP_TASK_2			equ		STACK_BASE + (STACK_SIZE * 3)
    75                              <1> 		SP_TASK_3			equ		STACK_BASE + (STACK_SIZE * 4)
    76                              <1> 		SP_TASK_4			equ		STACK_BASE + (STACK_SIZE * 5)
    77                              <1> 		SP_TASK_5			equ		STACK_BASE + (STACK_SIZE * 6)
    78                              <1> 		SP_TASK_6			equ		STACK_BASE + (STACK_SIZE * 7)
    79                              <1> 
    80                              <1> 		CR3_BASE			equ		0x0010_5000		; ページ変換テーブル：タスク3用
    81                              <1> 
    82                              <1> 		PARAM_TASK_4		equ		0x0010_8000		; 描画パラメータ：タスク4用
    83                              <1> 		PARAM_TASK_5		equ		0x0010_9000		; 描画パラメータ：タスク5用
    84                              <1> 		PARAM_TASK_6		equ		0x0010_A000		; 描画パラメータ：タスク6用
    85                              <1> 
    86                              <1> 		CR3_TASK_4			equ		0x0020_0000		; ページ変換テーブル：タスク4用
    87                              <1> 		CR3_TASK_5			equ		0x0020_2000		; ページ変換テーブル：タスク5用
    88                              <1> 		CR3_TASK_6			equ		0x0020_4000		; ページ変換テーブル：タスク6用
    89                              <1> 
    13                                  %include	"../include/macro.s"
    14                              <1> ;************************************************************************
    15                              <1> ; 関数呼び出し用マクロ
    16                              <1> ;
    17                              <1> ; 使い方：
    18                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    19                              <1> ;
    20                              <1> ;************************************************************************
    21                              <1> %macro  cdecl 1-*.nolist
    22                              <1> 
    23                              <1> 	%rep  %0 - 1
    24                              <1> 		push	%{-1:-1}
    25                              <1> 		%rotate -1
    26                              <1> 	%endrep 
    27                              <1> 	%rotate -1
    28                              <1> 
    29                              <1> 		call	%1
    30                              <1> 
    31                              <1> 	%if 1 < %0
    32                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    33                              <1> 	%endif
    34                              <1> 
    35                              <1> %endmacro
    36                              <1> 
    37                              <1> ;************************************************************************
    38                              <1> ; 割り込みベクタ設定用
    39                              <1> ;
    40                              <1> ; 使い方：
    41                              <1> ;	set_vect	ベクタ番号, 割り込み処理 [, フラグ]
    42                              <1> ;
    43                              <1> ;************************************************************************
    44                              <1> %macro  set_vect 1-*.nolist
    45                              <1> 		push	eax
    46                              <1> 		push	edi
    47                              <1> 
    48                              <1> 		mov		edi, VECT_BASE + (%1 * 8)		; ベクタアドレス;
    49                              <1> 		mov		eax, %2
    50                              <1> 
    51                              <1> 	%if 3 == %0
    52                              <1> 		mov		[edi + 4], %3					; フラグ
    53                              <1> 	%endif
    54                              <1> 
    55                              <1> 		mov		[edi + 0], ax					; 例外アドレス[15: 0]
    56                              <1> 		shr		eax, 16							; 
    57                              <1> 		mov		[edi + 6], ax					; 例外アドレス[31:16]
    58                              <1> 
    59                              <1> 		pop		edi
    60                              <1> 		pop		eax
    61                              <1> %endmacro
    62                              <1> 
    63                              <1> ;************************************************************************
    64                              <1> ; ポート出力用
    65                              <1> ;
    66                              <1> ; 使い方：
    67                              <1> ;	outp	ポート番号, 出力値
    68                              <1> ;
    69                              <1> ;************************************************************************
    70                              <1> %macro  outp 2
    71                              <1> 		mov		al, %2
    72                              <1> 		out		%1, al
    73                              <1> %endmacro
    74                              <1> 
    75                              <1> ;************************************************************************
    76                              <1> ; ディスクリプタの情報を設定
    77                              <1> ;
    78                              <1> ; 使い方：
    79                              <1> ;	set_desc	ディスクリプタ, ベース
    80                              <1> ;
    81                              <1> ;************************************************************************
    82                              <1> %macro  set_desc 2-* 
    83                              <1> 		push	eax
    84                              <1> 		push	edi
    85                              <1> 
    86                              <1> 		mov		edi, %1							; ディスクリプタアドレス
    87                              <1> 		mov		eax, %2							; ベースアドレス
    88                              <1> 
    89                              <1> 	%if 3 == %0
    90                              <1> 		mov		[edi + 0], %3					; リミット
    91                              <1> 	%endif
    92                              <1> 
    93                              <1> 		mov		[edi + 2], ax					; ベース（[15: 0]）
    94                              <1> 		shr		eax, 16							; 
    95                              <1> 		mov		[edi + 4], al					; ベース（[23:16]）
    96                              <1> 		mov		[edi + 7], ah					; ベース（[31:24]）
    97                              <1> 
    98                              <1> 		pop		edi
    99                              <1> 		pop		eax
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> ;************************************************************************
   103                              <1> ; ゲートディスクリプタのオフセットを設定
   104                              <1> ;
   105                              <1> ; 使い方：
   106                              <1> ;	set_gate	ディスクリプタ, オフセット
   107                              <1> ;
   108                              <1> ;************************************************************************
   109                              <1> %macro  set_gate 2-* 
   110                              <1> 		push	eax
   111                              <1> 		push	edi
   112                              <1> 
   113                              <1> 		mov		edi, %1							; ディスクリプタアドレス
   114                              <1> 		mov		eax, %2							; ベースアドレス
   115                              <1> 
   116                              <1> 		mov		[edi + 0], ax					; ベース（[15: 0]）
   117                              <1> 		shr		eax, 16							; 
   118                              <1> 		mov		[edi + 6], ax					; ベース（[31:16]）
   119                              <1> 
   120                              <1> 		pop		edi
   121                              <1> 		pop		eax
   122                              <1> %endmacro
   123                              <1> 
   124                              <1> ;************************************************************************
   125                              <1> ;	構造体
   126                              <1> ;************************************************************************
   127                              <1> 
   128                              <1> ;-----------------------------------------------
   129                              <1> ;	ドライブパラメータ
   130                              <1> ;-----------------------------------------------
   131                              <1> struc drive
   132 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
   133 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
   134 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
   135 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
   136                              <1> endstruc
   137                              <1> 
   138                              <1> ;-----------------------------------------------
   139                              <1> ;	リングバッファ
   140                              <1> ;-----------------------------------------------
   141                              <1> %define		RING_ITEM_SIZE		(1 << 4)
   142                              <1> %define		RING_INDEX_MASK		(RING_ITEM_SIZE - 1)
   143                              <1> 
   144                              <1> struc ring_buff
   145 00000000 ????????            <1> 		.rp				resd	1				; RP:書き込み位置
   146 00000004 ????????            <1> 		.wp				resd	1				; WP:読み込み位置
   147 00000008 <res 10h>           <1> 		.item			resb	RING_ITEM_SIZE	; バッファ
   148                              <1> endstruc
   149                              <1> 
   150                              <1> ;-----------------------------------------------
   151                              <1> ;	バラ曲線描画パラメータ
   152                              <1> ;-----------------------------------------------
   153                              <1> struc rose
   154 00000000 ????????            <1> 		.x0				resd	1				; 左上座標：X0
   155 00000004 ????????            <1> 		.y0				resd	1				; 左上座標：Y0
   156 00000008 ????????            <1> 		.x1				resd	1				; 右下座標：X1
   157 0000000C ????????            <1> 		.y1				resd	1				; 右下座標：Y1
   158                              <1> 
   159 00000010 ????????            <1> 		.n				resd	1				; 変数：n
   160 00000014 ????????            <1> 		.d				resd	1				; 変数：d
   161                              <1> 
   162 00000018 ????????            <1> 		.color_x		resd	1				; 描画色：X軸
   163 0000001C ????????            <1> 		.color_y		resd	1				; 描画色：Y軸
   164 00000020 ????????            <1> 		.color_z		resd	1				; 描画色：枠
   165 00000024 ????????            <1> 		.color_s		resd	1				; 描画色：文字
   166 00000028 ????????            <1> 		.color_f		resd	1				; 描画色：グラフ描画色
   167 0000002C ????????            <1> 		.color_b		resd	1				; 描画色：グラフ消去色
   168                              <1> 
   169 00000030 <res 10h>           <1> 		.title			resb	16				; タイトル
   170                              <1> endstruc
   171                              <1> 
    14                                  
    15                                  		ORG		BOOT_LOAD						; ロードアドレスをアセンブラに指示
    16                                  
    17                                  ;************************************************************************
    18                                  ;	エントリポイント
    19                                  ;************************************************************************
    20                                  entry:
    21                                  		;---------------------------------------
    22                                  		; BPB(BIOS Parameter Block)
    23                                  		;---------------------------------------
    24 00000000 EB3C                    		jmp		ipl								; 0x00( 3) ブートコードへのジャンプ命令
    25 00000002 90                      		times	3 - ($ - $$) db 0x90			; 
    26 00000003 4F454D2D4E414D45        		db		'OEM-NAME'						; 0x03( 8) OEM名
    27                                  												; -------- --------------------------------
    28 0000000B 0002                    		dw		512								; 0x0B( 2) セクタのバイト数
    29 0000000D 01                      		db		1								; 0x0D( 1) クラスタのセクタ数
    30 0000000E 2000                    		dw		32								; 0x0E( 2) 予約セクタ数
    31 00000010 02                      		db		2								; 0x10( 1) FAT数
    32 00000011 0002                    		dw		512								; 0x11( 2) ルートエントリ数
    33 00000013 F0FF                    		dw		0xFFF0							; 0x13( 2) 総セクタ数16
    34 00000015 F8                      		db		0xF8							; 0x15( 1) メディアタイプ
    35 00000016 0001                    		dw		256								; 0x16( 2) FATのセクタ数
    36 00000018 1000                    		dw		0x10							; 0x18( 2) トラックのセクタ数
    37 0000001A 0200                    		dw		2								; 0x1A( 2) ヘッド数
    38 0000001C 00000000                		dd		0								; 0x1C( 4) 隠されたセクタ数
    39                                  												; -------- --------------------------------
    40 00000020 00000000                		dd		0								; 0x20( 4) 総セクタ数32
    41 00000024 80                      		db		0x80							; 0x24( 1) ドライブ番号
    42 00000025 00                      		db		0								; 0x25( 1) （予約）
    43 00000026 29                      		db		0x29							; 0x26( 1) ブートフラグ
    44 00000027 EFBE0000                		dd		0xbeef							; 0x27( 4) シリアルナンバー
    45 0000002B 424F4F5441424C4520-     		db		'BOOTABLE   '					; 0x2B(11) ボリュームラベル
    45 00000034 2020               
    46 00000036 4641543136202020        		db		'FAT16   '						; 0x36( 8) FATタイプ
    47                                  
    48                                  		;---------------------------------------
    49                                  		; IPL(Initial Program Loader)
    50                                  		;---------------------------------------
    51                                  ipl:
    52 0000003E FA                      		cli										; // 割り込み禁止
    53                                  
    54 0000003F B80000                  		mov		ax, 0x0000						; AX = 0x0000;
    55 00000042 8ED8                    		mov		ds, ax							; DS = 0x0000;
    56 00000044 8EC0                    		mov		es, ax							; ES = 0x0000;
    57 00000046 8ED0                    		mov		ss, ax							; SS = 0x0000;
    58 00000048 BC007C                  		mov		sp, BOOT_LOAD					; SP = 0x7C00;
    59                                  
    60 0000004B FB                      		sti										; // 割り込み許可
    61                                  
    62 0000004C 8816[9C00]              		mov		[BOOT + drive.no], dl			; ブートドライブを保存
    63                                  
    64                                  		;---------------------------------------
    65                                  		; 文字列を表示
    66                                  		;---------------------------------------
    67 00000050 68[7D00]E84E0083C4-     		cdecl	puts, .s0						; puts(.s0);
    67 00000058 02                 
    68                                  
    69                                  		;---------------------------------------
    70                                  		; 残りのセクタを全て読み込む
    71                                  		;---------------------------------------
    72 00000059 BB0F00                  		mov		bx, BOOT_SECT - 1				; BX = 残りのブートセクタ数;
    73 0000005C B9007E                  		mov		cx, BOOT_LOAD + SECT_SIZE		; CX = 次のロードアドレス;
    74                                  
    75 0000005F 515368[9C00]E89B00-     		cdecl	read_chs, BOOT, bx, cx			; AX = read_chs(.chs, bx, cx);
    75 00000067 83C406             
    76                                  
    77 0000006A 39D8                    		cmp		ax, bx							; if (AX != 残りのセクタ数)
    78 0000006C 740C                    .10Q:	jz		.10E							; {
    79 0000006E 68[8A00]E8300083C4-     .10T:	cdecl	puts, .e0						;   puts(.e0);
    79 00000076 02                 
    80 00000077 E84900                  		call	reboot							;   reboot(); // 再起動
    81                                  .10E:											; }
    82                                  
    83                                  		;---------------------------------------
    84                                  		; 次のステージへ移行
    85                                  		;---------------------------------------
    86 0000007A E9F105                  		jmp		stage_2							; ブート処理の第2ステージ
    87                                  
    88                                  		;---------------------------------------
    89                                  		; データ
    90                                  		;---------------------------------------
    91 0000007D 426F6F74696E672E2E-     .s0		db	"Booting...", 0x0A, 0x0D, 0
    91 00000086 2E0A0D00           
    92 0000008A 4572726F723A736563-     .e0		db	"Error:sector read", 0
    92 00000093 746F72207265616400 
    93                                  
    94                                  ;************************************************************************
    95                                  ;	ブートドライブに関する情報
    96                                  ;************************************************************************
    97                                  ALIGN 2, db 0
    98                                  BOOT:											; ブートドライブに関する情報
    99                                  	istruc	drive
   100 0000009C 0000                    		at	drive.no,		dw	0				; ドライブ番号
   101 0000009E 0000                    		at	drive.cyln,		dw	0				; C:シリンダ
   102 000000A0 0000                    		at	drive.head,		dw	0				; H:ヘッド
   103 000000A2 0200                    		at	drive.sect,		dw	2				; S:セクタ
   104                                  	iend
   105                                  
   106                                  ;************************************************************************
   107                                  ;	モジュール
   108                                  ;************************************************************************
   109                                  %include	"../modules/real/puts.s"
   110                              <1> ;************************************************************************
   111                              <1> ;	文字列表示
   112                              <1> ;------------------------------------------------------------------------
   113                              <1> ;	BIOS を使用
   114                              <1> ;========================================================================
   115                              <1> ;■書式		: void puts(str);
   116                              <1> ;
   117                              <1> ;■引数
   118                              <1> ;	str		: 文字列のアドレス
   119                              <1> ;
   120                              <1> ;■戻り値	: 無し
   121                              <1> ;************************************************************************
   122                              <1> puts:
   123                              <1> 		;---------------------------------------
   124                              <1> 		; 【スタックフレームの構築】
   125                              <1> 		;---------------------------------------
   126                              <1> 												; ------|--------
   127                              <1> 												;    + 4| 文字列のアドレス
   128                              <1> 												;    + 2| IP（戻り番地）
   129 000000A4 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   130 000000A5 89E5                <1> 		mov		bp, sp							; ------+--------
   131                              <1> 
   132                              <1> 		;---------------------------------------
   133                              <1> 		; 【レジスタの保存】
   134                              <1> 		;---------------------------------------
   135 000000A7 50                  <1> 		push	ax
   136 000000A8 53                  <1> 		push	bx
   137 000000A9 56                  <1> 		push	si
   138                              <1> 
   139                              <1> 		;---------------------------------------
   140                              <1> 		; 引数を取得
   141                              <1> 		;---------------------------------------
   142 000000AA 8B7604              <1> 		mov		si, [bp + 4]					; SI = 文字列のアドレス;
   143                              <1> 
   144                              <1> 		;---------------------------------------
   145                              <1> 		; 【処理の開始】
   146                              <1> 		;---------------------------------------
   147 000000AD B40E                <1> 		mov		ah, 0x0E						; // テレタイプ式1文字出力
   148 000000AF BB0000              <1> 		mov		bx, 0x0000						; // ページ番号と文字色を0に設定
   149 000000B2 FC                  <1> 		cld										; DF = 0; // アドレス加算
   150                              <1> .10L:											; do
   151                              <1> 												; {
   152 000000B3 AC                  <1> 		lodsb									;   AL = *SI++;
   153                              <1> 												;   
   154 000000B4 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   155 000000B6 7404                <1> 		je		.10E							;     break;
   156                              <1> 												;   
   157 000000B8 CD10                <1> 		int		0x10							;   Int10(0x0E, AL); // 文字出力
   158 000000BA EBF7                <1> 		jmp		.10L							;   
   159                              <1> .10E:											; } while (1);
   160                              <1> 
   161                              <1> 		;---------------------------------------
   162                              <1> 		; 【レジスタの復帰】
   163                              <1> 		;---------------------------------------
   164 000000BC 5E                  <1> 		pop		si
   165 000000BD 5B                  <1> 		pop		bx
   166 000000BE 58                  <1> 		pop		ax
   167                              <1> 
   168                              <1> 		;---------------------------------------
   169                              <1> 		; 【スタックフレームの破棄】
   170                              <1> 		;---------------------------------------
   171 000000BF 89EC                <1> 		mov		sp, bp
   172 000000C1 5D                  <1> 		pop		bp
   173                              <1> 
   174 000000C2 C3                  <1> 		ret
   175                              <1> 
   110                                  %include	"../modules/real/reboot.s"
   111                              <1> ;************************************************************************
   112                              <1> ;	メッセージを表示して再起動を行う
   113                              <1> ;========================================================================
   114                              <1> ;■書式		: void reboot(void);
   115                              <1> ;
   116                              <1> ;■引数		: 無し
   117                              <1> ;
   118                              <1> ;■戻り値;	: 無し
   119                              <1> ;************************************************************************
   120                              <1> reboot:
   121                              <1> 		;---------------------------------------
   122                              <1> 		; メッセージを表示
   123                              <1> 		;---------------------------------------
   124 000000C3 68[DF00]E8DBFF83C4- <1> 		cdecl	puts, .s0						; // 再起動メッセージを表示
   124 000000CB 02                  <1>
   125                              <1> 
   126                              <1> 		;---------------------------------------
   127                              <1> 		; キー入力待ち
   128                              <1> 		;---------------------------------------
   129                              <1> .10L:											; do
   130                              <1> 												; {
   131 000000CC B410                <1> 		mov		ah, 0x10						;   // キー入力待ち
   132 000000CE CD16                <1> 		int		0x16							;   AL = BIOS(0x16, 0x10);
   133                              <1> 												;   
   134 000000D0 3C20                <1> 		cmp		al, ' '							;   ZF = AL == ' ';
   135 000000D2 75F8                <1> 		jne		.10L							; } while (!ZF);
   136                              <1> 
   137                              <1> 		;---------------------------------------
   138                              <1> 		; 改行を出力
   139                              <1> 		;---------------------------------------
   140 000000D4 68[FD00]E8CAFF83C4- <1> 		cdecl	puts, .s1						; 改行
   140 000000DC 02                  <1>
   141                              <1> 
   142                              <1> 		;---------------------------------------
   143                              <1> 		; 再起動
   144                              <1> 		;---------------------------------------
   145 000000DD CD19                <1> 		int		0x19							; BIOS(0x19);       // reboot();
   146                              <1> 
   147                              <1> 		;---------------------------------------
   148                              <1> 		; 文字列データ
   149                              <1> 		;---------------------------------------
   150 000000DF 0A0D50757368205350- <1> .s0		db	0x0A, 0x0D, "Push SPACE key to reboot...", 0
   150 000000E8 414345206B65792074- <1>
   150 000000F1 6F207265626F6F742E- <1>
   150 000000FA 2E2E00              <1>
   151 000000FD 0A0D0A0D00          <1> .s1		db	0x0A, 0x0D, 0x0A, 0x0D, 0
   152                              <1> 
   111                                  %include	"../modules/real/read_chs.s"
   112                              <1> ;************************************************************************
   113                              <1> ;	セクタ読み込み（CHS指定）
   114                              <1> ;------------------------------------------------------------------------
   115                              <1> ;	BIOSコール（INT13 AH=0x02）を使ったセクタ読み出し
   116                              <1> ;========================================================================
   117                              <1> ;■書式		: WORD read_chs(drive, sect, dst);
   118                              <1> ;
   119                              <1> ;■引数
   120                              <1> ;	drive	: drive構造体のアドレス
   121                              <1> ;	sect	: 読み出しセクタ数
   122                              <1> ;	dst		: 読み出し先アドレス
   123                              <1> ;
   124                              <1> ;■戻り値	: 読み込んだセクタ数
   125                              <1> ;************************************************************************
   126                              <1> read_chs:
   127                              <1> 		;---------------------------------------
   128                              <1> 		; 【スタックフレームの構築】
   129                              <1> 		;---------------------------------------
   130                              <1> 												; ------|--------
   131                              <1> 												;    + 8| コピー先
   132                              <1> 												;    + 6| セクタ数
   133                              <1> 												;    + 4| パラメータバッファ
   134                              <1> 												; ------+----------------
   135                              <1> 												;    + 2| IP（戻り番地）
   136 00000102 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   137 00000103 89E5                <1> 		mov		bp, sp							; ------+--------
   138 00000105 6A03                <1> 		push	3								;    - 2| retry = 3; // リトライ回数
   139 00000107 6A00                <1> 		push	0								;    - 4| sect  = 0; // 読み込みセクタ数
   140                              <1> 
   141                              <1> 		;---------------------------------------
   142                              <1> 		; 【レジスタの保存】
   143                              <1> 		;---------------------------------------
   144 00000109 53                  <1> 		push	bx
   145 0000010A 51                  <1> 		push	cx
   146 0000010B 52                  <1> 		push	dx
   147 0000010C 06                  <1> 		push	es
   148 0000010D 56                  <1> 		push	si
   149                              <1> 
   150                              <1> 		;---------------------------------------
   151                              <1> 		; 【処理の開始】
   152                              <1> 		;---------------------------------------
   153 0000010E 8B7604              <1> 		mov		si, [bp + 4]					; SI = SRCバッファ;
   154                              <1> 
   155                              <1> 		;---------------------------------------
   156                              <1> 		; CXレジスタの設定
   157                              <1> 		;（BIOSコールの呼び出しに適した形に変換）
   158                              <1> 		;---------------------------------------
   159 00000111 8A6C02              <1> 		mov		ch, [si + drive.cyln + 0]		; CH   = シリンダ番号（下位バイト）
   160 00000114 8A4C03              <1> 		mov		cl, [si + drive.cyln + 1]		; CL   = シリンダ番号（上位バイト）
   161 00000117 C0E106              <1> 		shl		cl, 6							; CL <<= 6; // 最上位2ビットにシフト
   162 0000011A 0A4C06              <1> 		or		cl, [si + drive.sect]			; CL  |= セクタ番号;
   163                              <1> 
   164                              <1> 		;---------------------------------------
   165                              <1> 		; セクタ読み込み
   166                              <1> 		;---------------------------------------
   167 0000011D 8A7404              <1> 		mov		dh, [si + drive.head]			; DH = ヘッド番号;
   168 00000120 8A14                <1> 		mov		dl, [si + 0]					; DL = ドライブ番号;
   169 00000122 B80000              <1> 		mov		ax, 0x0000						; AX = 0x0000;
   170 00000125 8EC0                <1> 		mov		es, ax							; ES = セグメント
   171 00000127 8B5E08              <1> 		mov		bx, [bp + 8]					; BX = コピー先;
   172                              <1> .10L:											; do
   173                              <1> 												; {
   174 0000012A B402                <1> 		mov		ah, 0x02						;   AH = セクタ読み込み
   175 0000012C 8A4606              <1> 		mov		al, [bp + 6]					;   AL = セクタ数
   176                              <1> 												;   
   177 0000012F CD13                <1> 		int		0x13							;   CF = BIOS(0x13, 0x02);
   178 00000131 7304                <1> 		jnc		.11E							;   if (CF)
   179                              <1> 												;   {
   180 00000133 B000                <1> 		mov		al, 0							;     AL = 0;
   181 00000135 EB0C                <1> 		jmp		.10E							;     break;
   182                              <1> .11E:											;   }
   183                              <1> 												;   
   184 00000137 3C00                <1> 		cmp		al, 0							;   if (読み込んだセクタがあれば)
   185 00000139 7508                <1> 		jne		.10E							;     break;
   186                              <1> 												;   
   187 0000013B B80000              <1> 		mov		ax, 0							;   ret = 0; // 戻り値を設定
   188 0000013E FF4EFE              <1> 		dec		word [bp - 2]					; }
   189 00000141 75E7                <1> 		jnz		.10L							; while (--retry);
   190                              <1> .10E:
   191 00000143 B400                <1> 		mov		ah, 0							; AH = 0; // ステータス情報は破棄
   192                              <1> 
   193                              <1> 		;---------------------------------------
   194                              <1> 		; 【レジスタの復帰】
   195                              <1> 		;---------------------------------------
   196 00000145 5E                  <1> 		pop		si
   197 00000146 07                  <1> 		pop		es
   198 00000147 5A                  <1> 		pop		dx
   199 00000148 59                  <1> 		pop		cx
   200 00000149 5B                  <1> 		pop		bx
   201                              <1> 
   202                              <1> 		;---------------------------------------
   203                              <1> 		; 【スタックフレームの破棄】
   204                              <1> 		;---------------------------------------
   205 0000014A 89EC                <1> 		mov		sp, bp
   206 0000014C 5D                  <1> 		pop		bp
   207                              <1> 
   208 0000014D C3                  <1> 		ret
   209                              <1> 
   112                                  
   113                                  ;************************************************************************
   114                                  ;	ブートフラグ（先頭512バイトの終了）
   115                                  ;************************************************************************
   116 0000014E 00<rep B0h>             		times	510 - ($ - $$) db 0x00
   117 000001FE 55AA                    		db	0x55, 0xAA
   118                                  
   119                                  ;************************************************************************
   120                                  ;	リアルモード時に取得した情報
   121                                  ;************************************************************************
   122                                  FONT:											; フォント
   123 00000200 0000                    .seg:	dw	0
   124 00000202 0000                    .off:	dw	0
   125                                  ACPI_DATA:										; ACPI data
   126 00000204 00000000                .adr:	dd	0									; ACPI data address
   127 00000208 00000000                .len:	dd	0									; ACPI data length
   128                                  
   129                                  ;************************************************************************
   130                                  ;	モジュール（先頭512バイト以降に配置）
   131                                  ;************************************************************************
   132                                  %include	"../modules/real/itoa.s"
   133                              <1> ;************************************************************************
   134                              <1> ;	数値を文字に変換
   135                              <1> ;========================================================================
   136                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
   137                              <1> ;
   138                              <1> ;■引数
   139                              <1> ;	num		: 変換する数値
   140                              <1> ;	buff	: 保存先バッファアドレス
   141                              <1> ;	size	: 保存先バッファサイズ
   142                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
   143                              <1> ;	flags	: フラグ
   144                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
   145                              <1> ;			:      : 0=空白を' '（スペース）で埋める
   146                              <1> ;			:   B1 : 1=＋/-符号を表示する
   147                              <1> ;			:      : 0=＋/-符号を表示しない
   148                              <1> ;			:   B0 : 1=符号付き正数として扱う
   149                              <1> ;			:      : 0=符号無し正数として扱う
   150                              <1> ;
   151                              <1> ;■戻り値	: 無し
   152                              <1> ;************************************************************************
   153                              <1> itoa:
   154                              <1> 		;---------------------------------------
   155                              <1> 		; 【スタックフレームの構築】
   156                              <1> 		;---------------------------------------
   157                              <1> 												; ------|--------
   158                              <1> 												;    +12| フラグ
   159                              <1> 												;    +10| 基数
   160                              <1> 												;    + 8| バッファサイズ
   161                              <1> 												;    + 6| バッファアドレス
   162                              <1> 												;    + 4| 数値
   163                              <1> 												; ------|--------
   164                              <1> 												;    + 2| IP（戻り番地）
   165 0000020C 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   166 0000020D 89E5                <1> 		mov		bp, sp							; ------+--------
   167                              <1> 
   168                              <1> 		;---------------------------------------
   169                              <1> 		; 【レジスタの保存】
   170                              <1> 		;---------------------------------------
   171 0000020F 50                  <1> 		push	ax
   172 00000210 53                  <1> 		push	bx
   173 00000211 51                  <1> 		push	cx
   174 00000212 52                  <1> 		push	dx
   175 00000213 56                  <1> 		push	si
   176 00000214 57                  <1> 		push	di
   177                              <1> 
   178                              <1> 		;---------------------------------------
   179                              <1> 		; 引数を取得
   180                              <1> 		;---------------------------------------
   181 00000215 8B4604              <1> 		mov		ax, [bp + 4]					; val  = 数値;
   182 00000218 8B7606              <1> 		mov		si, [bp + 6]					; dst  = バッファアドレス;
   183 0000021B 8B4E08              <1> 		mov		cx, [bp + 8]					; size = 残りバッファサイズ;
   184                              <1> 
   185 0000021E 89F7                <1> 		mov		di, si							; // バッファの最後尾
   186 00000220 01CF                <1> 		add		di, cx							; dst  = &dst[size - 1];
   187 00000222 4F                  <1> 		dec		di								; 
   188                              <1> 
   189 00000223 8B5E0C              <1> 		mov		bx, [bp +12]					; flags = オプション;
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 符号付き判定
   193                              <1> 		;---------------------------------------
   194 00000226 F7C30100            <1> 		test	bx, 0b0001						; if (flags & 0x01)// 符号付き
   195 0000022A 7408                <1> .10Q:	je		.10E							; {
   196 0000022C 83F800              <1> 		cmp		ax, 0							;   if (val < 0)
   197 0000022F 7D03                <1> .12Q:	jge		.12E							;   {
   198 00000231 83CB02              <1> 		or		bx, 0b0010						;     flags |=  2; // 符号表示
   199                              <1> .12E:											;   }
   200                              <1> .10E:											; }
   201                              <1> 
   202                              <1> 		;---------------------------------------
   203                              <1> 		; 符号出力判定
   204                              <1> 		;---------------------------------------
   205 00000234 F7C30200            <1> 		test	bx, 0b0010						; if (flags & 0x02)// 符号出力判定
   206 00000238 7410                <1> .20Q:	je		.20E							; {
   207 0000023A 83F800              <1> 		cmp		ax, 0							;   if (val < 0)
   208 0000023D 7D07                <1> .22Q:	jge		.22F							;   {
   209 0000023F F7D8                <1> 		neg		ax								;     val *= -1;   // 符号反転
   210 00000241 C6042D              <1> 		mov		[si], byte '-'					;     *dst = '-';  // 符号表示
   211 00000244 EB03                <1> 		jmp		.22E							;   }
   212                              <1> .22F:											;   else
   213                              <1> 												;   {
   214 00000246 C6042B              <1> 		mov		[si], byte '+'					;     *dst = '+';  // 符号表示
   215                              <1> .22E:											;   }
   216 00000249 49                  <1> 		dec		cx								;   size--;        // 残りバッファサイズの減算
   217                              <1> .20E:											; }
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; ASCII変換
   221                              <1> 		;---------------------------------------
   222 0000024A 8B5E0A              <1> 		mov		bx, [bp +10]					; BX = 基数;
   223                              <1> .30L:											; do
   224                              <1> 												; {
   225 0000024D BA0000              <1> 		mov		dx, 0							;   
   226 00000250 F7F3                <1> 		div		bx								;   DX = DX:AX % 基数;
   227                              <1> 												;   AX = DX:AX / 基数;
   228                              <1> 												;   
   229 00000252 89D6                <1> 		mov		si, dx							;   // テーブル参照
   230 00000254 8A94[7C02]          <1> 		mov		dl, byte [.ascii + si]			;   DL = ASCII[DX];
   231                              <1> 												;   
   232 00000258 8815                <1> 		mov		[di], dl						;   *dst = DL;
   233 0000025A 4F                  <1> 		dec		di								;   dst--;
   234                              <1> 												;   
   235 0000025B 83F800              <1> 		cmp		ax, 0							;   
   236 0000025E E0ED                <1> 		loopnz	.30L							; } while (AX);
   237                              <1> .30E:
   238                              <1> 
   239                              <1> 		;---------------------------------------
   240                              <1> 		; 空欄を埋める
   241                              <1> 		;---------------------------------------
   242 00000260 83F900              <1> 		cmp		cx, 0							; if (size)
   243 00000263 740D                <1> .40Q:	je		.40E							; {
   244 00000265 B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   245 00000267 837E0C04            <1> 		cmp		[bp +12], word 0b0100			;   if (flags & 0x04)
   246 0000026B 7502                <1> .42Q:	jne		.42E							;   {
   247 0000026D B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   248                              <1> .42E:											;   }
   249 0000026F FD                  <1> 		std										;   // DF = 1（-方向）
   250 00000270 F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   251                              <1> .40E:											; }
   252                              <1> 
   253                              <1> 		;---------------------------------------
   254                              <1> 		; 【レジスタの復帰】
   255                              <1> 		;---------------------------------------
   256 00000272 5F                  <1> 		pop		di
   257 00000273 5E                  <1> 		pop		si
   258 00000274 5A                  <1> 		pop		dx
   259 00000275 59                  <1> 		pop		cx
   260 00000276 5B                  <1> 		pop		bx
   261 00000277 58                  <1> 		pop		ax
   262                              <1> 
   263                              <1> 		;---------------------------------------
   264                              <1> 		; 【スタックフレームの破棄】
   265                              <1> 		;---------------------------------------
   266 00000278 89EC                <1> 		mov		sp, bp
   267 0000027A 5D                  <1> 		pop		bp
   268                              <1> 
   269 0000027B C3                  <1> 		ret
   270                              <1> 
   271 0000027C 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   271 00000285 39414243444546      <1>
   272                              <1> 
   133                                  %include	"../modules/real/get_drive_param.s"
   134                              <1> ;************************************************************************
   135                              <1> ;	ドライブ情報の取得(LBA変換に必要な情報)
   136                              <1> ;------------------------------------------------------------------------
   137                              <1> ;	アクセス可能な最大セクタをdrive構造体に設定する
   138                              <1> ;	注）ドライブ番号（drive.no）を設定後に呼び出す事
   139                              <1> ;========================================================================
   140                              <1> ;■書式		: WORD get_drive_param(drive);
   141                              <1> ;
   142                              <1> ;■引数
   143                              <1> ;	drive	: drive構造体のアドレス
   144                              <1> ;
   145                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   146                              <1> ;************************************************************************
   147                              <1> get_drive_param:
   148                              <1> 		;---------------------------------------
   149                              <1> 		; 【スタックフレームの構築】
   150                              <1> 		;---------------------------------------
   151                              <1> 												; ------|--------
   152                              <1> 												;    + 4| パラメータバッファ
   153                              <1> 												;    + 2| IP（戻り番地）
   154 0000028C 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   155 0000028D 89E5                <1> 		mov		bp, sp							; ------+--------
   156                              <1> 
   157                              <1> 		;---------------------------------------
   158                              <1> 		; 【レジスタの保存】
   159                              <1> 		;---------------------------------------
   160 0000028F 53                  <1> 		push	bx
   161 00000290 51                  <1> 		push	cx
   162 00000291 06                  <1> 		push	es
   163 00000292 56                  <1> 		push	si
   164 00000293 57                  <1> 		push	di
   165                              <1> 
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 【処理の開始】
   168                              <1> 		;---------------------------------------
   169 00000294 8B7604              <1> 		mov		si, [bp + 4]					; SI = バッファ
   170                              <1> 
   171 00000297 B80000              <1> 		mov		ax, 0							; Disk Base Table Pointerの初期化
   172 0000029A 8EC0                <1> 		mov		es, ax							; ES = 0;
   173 0000029C 89C7                <1> 		mov		di, ax							; DI = 0;
   174                              <1> 
   175 0000029E B408                <1> 		mov		ah, 0x08						; // get drive parameters 
   176 000002A0 8A14                <1> 		mov		dl, [si + drive.no]				; DL = ドライブ番号
   177 000002A2 CD13                <1> 		int		0x13							; CF = BIOS(0x13, 0x08);
   178 000002A4 721B                <1> .10Q:	jc		.10F							; if (0 == CF)
   179                              <1> .10T:											; {
   180 000002A6 88C8                <1> 		mov		al, cl							;   AX = セクタ数
   181 000002A8 83E03F              <1> 		and		ax, 0x3F						;   // 下位6ビットのみ有効
   182                              <1> 
   183 000002AB C0E906              <1> 		shr		cl, 6							;   CX = シリンダ数
   184 000002AE C1C908              <1> 		ror		cx, 8							;   
   185 000002B1 41                  <1> 		inc		cx								;   
   186                              <1> 
   187 000002B2 0FB6DE              <1> 		movzx	bx, dh							;   BX = ヘッド数（1ベース）
   188 000002B5 43                  <1> 		inc		bx								;   
   189                              <1> 
   190 000002B6 894C02              <1> 		mov		[si + drive.cyln], cx			;   drive.syln = CX; // C:シリンダ数
   191 000002B9 895C04              <1> 		mov		[si + drive.head], bx			;   drive.head = BX; // H:ヘッド数
   192 000002BC 894406              <1> 		mov		[si + drive.sect], ax			;   drive.sect = AX; // S:セクタ数
   193                              <1> 
   194 000002BF EB03                <1> 		jmp		.10E							; }
   195                              <1> .10F:											; else
   196                              <1> 												; {
   197 000002C1 B80000              <1> 		mov		ax, 0							;   AX = 0; // 失敗
   198                              <1> .10E:											; }
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 【レジスタの復帰】
   202                              <1> 		;---------------------------------------
   203 000002C4 5F                  <1> 		pop		di
   204 000002C5 5E                  <1> 		pop		si
   205 000002C6 07                  <1> 		pop		es
   206 000002C7 59                  <1> 		pop		cx
   207 000002C8 5B                  <1> 		pop		bx
   208                              <1> 
   209                              <1> 		;---------------------------------------
   210                              <1> 		; 【スタックフレームの破棄】
   211                              <1> 		;---------------------------------------
   212 000002C9 89EC                <1> 		mov		sp, bp
   213 000002CB 5D                  <1> 		pop		bp
   214                              <1> 
   215 000002CC C3                  <1> 		ret
   216                              <1> 
   134                                  %include	"../modules/real/get_font_adr.s"
   135                              <1> ;************************************************************************
   136                              <1> ;	BIOSフォントアドレスを取得
   137                              <1> ;------------------------------------------------------------------------
   138                              <1> ;	フォント8x16ドットのフォントアドレスを取得
   139                              <1> ;========================================================================
   140                              <1> ;■書式		: void get_font_adr(adr);
   141                              <1> ;
   142                              <1> ;■引数
   143                              <1> ;	adr		: フォントアドレス格納位置
   144                              <1> ;
   145                              <1> ;■戻り値;	: 無し
   146                              <1> ;************************************************************************
   147                              <1> get_font_adr:
   148                              <1> 		;---------------------------------------
   149                              <1> 		; 【スタックフレームの構築】
   150                              <1> 		;---------------------------------------
   151                              <1> 												; ------|--------
   152                              <1> 												;    + 4| パラメータバッファ
   153                              <1> 												;    + 2| IP（戻り番地）
   154 000002CD 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   155 000002CE 89E5                <1> 		mov		bp, sp							; ------+--------
   156                              <1> 
   157                              <1> 		;---------------------------------------
   158                              <1> 		; 【レジスタの保存】
   159                              <1> 		;---------------------------------------
   160 000002D0 50                  <1> 		push	ax
   161 000002D1 53                  <1> 		push	bx
   162 000002D2 56                  <1> 		push	si
   163 000002D3 06                  <1> 		push	es
   164 000002D4 55                  <1> 		push	bp
   165                              <1> 
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 引数を取得
   168                              <1> 		;---------------------------------------
   169 000002D5 8B7604              <1> 		mov		si, [bp + 4]					; dst  =FONTアドレスの保存先;
   170                              <1> 
   171                              <1> 		;---------------------------------------
   172                              <1> 		; フォントアドレスの取得
   173                              <1> 		;---------------------------------------
   174 000002D8 B83011              <1> 		mov		ax, 0x1130						; // フォントアドレスの取得
   175 000002DB B706                <1> 		mov		bh, 0x06						; 8x16 font (vga/mcga) 
   176 000002DD CD10                <1> 		int		10h								; ES:BP=FONT ADDRESS
   177                              <1> 
   178                              <1> 		;---------------------------------------
   179                              <1> 		; FONTアドレスを保存
   180                              <1> 		;---------------------------------------
   181 000002DF 8C04                <1> 		mov		[si + 0], es					; dst[0] = セグメント;
   182 000002E1 896C02              <1> 		mov		[si + 2], bp					; dst[1] = オフセット;
   183                              <1> 
   184                              <1> 		;---------------------------------------
   185                              <1> 		; 【レジスタの復帰】
   186                              <1> 		;---------------------------------------
   187 000002E4 5D                  <1> 		pop		bp
   188 000002E5 07                  <1> 		pop		es
   189 000002E6 5E                  <1> 		pop		si
   190 000002E7 5B                  <1> 		pop		bx
   191 000002E8 58                  <1> 		pop		ax
   192                              <1> 
   193                              <1> 		;---------------------------------------
   194                              <1> 		; 【スタックフレームの破棄】
   195                              <1> 		;---------------------------------------
   196 000002E9 89EC                <1> 		mov		sp, bp
   197 000002EB 5D                  <1> 		pop		bp
   198                              <1> 
   199 000002EC C3                  <1> 		ret
   200                              <1> 
   135                                  %include	"../modules/real/get_mem_info.s"
   136                              <1> ;************************************************************************
   137                              <1> ;	メモリ情報の表示
   138                              <1> ;------------------------------------------------------------------------
   139                              <1> ;	ACPIデータのアドレスと長さをグローバル変数に保存する
   140                              <1> ;========================================================================
   141                              <1> ;■書式		: void get_mem_info(void);
   142                              <1> ;
   143                              <1> ;■引数		: 無し
   144                              <1> ;
   145                              <1> ;■戻り値;	: 無し
   146                              <1> ;************************************************************************
   147                              <1> get_mem_info:
   148                              <1> 		;---------------------------------------
   149                              <1> 		; 【レジスタの保存】
   150                              <1> 		;---------------------------------------
   151 000002ED 6650                <1> 		push	eax
   152 000002EF 6653                <1> 		push	ebx
   153 000002F1 6651                <1> 		push	ecx
   154 000002F3 6652                <1> 		push	edx
   155 000002F5 56                  <1> 		push	si
   156 000002F6 57                  <1> 		push	di
   157 000002F7 55                  <1> 		push	bp
   158                              <1> 
   159                              <1> 		;---------------------------------------
   160                              <1> 		; 【処理の開始】
   161                              <1> 		;---------------------------------------
   162 000002F8 68[8C03]E8A6FD83C4- <1> 		cdecl	puts, .s0						; // ヘッダを表示
   162 00000300 02                  <1>
   163                              <1> 
   164 00000301 BD0000              <1> 		mov		bp, 0							; lines = 0; // 行数
   165 00000304 66BB00000000        <1> 		mov		ebx, 0							; index = 0; // インデックスを初期化
   166                              <1> .10L:											; do
   167                              <1> 												; {
   168 0000030A 66B820E80000        <1> 		mov		eax, 0x0000E820					;   EAX   = 0xE820
   169                              <1> 												;   EBX   = インデックス
   170 00000310 66B914000000        <1> 		mov		ecx, E820_RECORD_SIZE			;   ECX   = 要求バイト数
   171 00000316 66BA50414D53        <1> 		mov 	edx, 'PAMS'						;   EDX   = 'SMAP';
   172 0000031C BF[1804]            <1> 		mov		di, .b0							;   ES:DI = バッファ
   173 0000031F CD15                <1> 		int		0x15							;   BIOS(0x15, 0xE820);
   174                              <1> 
   175                              <1> 		; コマンドに対応か？
   176 00000321 663D50414D53        <1> 		cmp		eax, 'PAMS'						;   if ('SMAP' != EAX)
   177 00000327 7402                <1> 		je		.12E							;   {
   178 00000329 EB4C                <1> 		jmp		.10E							;     break; // コマンド未対応
   179                              <1> .12E:											;   }
   180                              <1> 
   181                              <1> 		; エラー無し？							;   if (CF)
   182 0000032B 7302                <1> 		jnc		.14E							;   {
   183 0000032D EB48                <1> 		jmp		.10E							;     break; // エラー発生
   184                              <1> .14E:											;   }
   185                              <1> 
   186                              <1> 		; 1レコード分のメモリ情報を表示
   187 0000032F 57E8F90083C402      <1> 		cdecl	put_mem_info, di				;   1レコード分のメモリ情報を表示
   188                              <1> 
   189                              <1> 		; ACPI dataのアドレスを取得
   190 00000336 668B4510            <1> 		mov		eax, [di + 16]					;   EAX = レコードタイプ;
   191 0000033A 6683F803            <1> 		cmp		eax, 3							;   if (3 == EAX) // ACPI data
   192 0000033E 750F                <1> 		jne		.15E							;   {
   193                              <1> 												;     
   194 00000340 668B05              <1> 		mov		eax, [di +  0]					;     EAX   = BASEアドレス;
   195 00000343 66A3[0402]          <1> 		mov		[ACPI_DATA.adr], eax			;     ACPI_DATA.adr = EAX;
   196                              <1> 												;     
   197 00000347 668B4508            <1> 		mov		eax, [di +  8]					;     EAX   = Length;
   198 0000034B 66A3[0802]          <1> 		mov		[ACPI_DATA.len], eax			;     ACPI_DATA.len = EAX;
   199                              <1> .15E:											;   }
   200                              <1> 
   201 0000034F 6683FB00            <1> 		cmp		ebx, 0							;   if (0 != EBX)
   202 00000353 741C                <1> 		jz		.16E							;   {
   203                              <1> 												;     
   204 00000355 45                  <1> 		inc		bp								;     lines++;
   205 00000356 83E507              <1> 		and		bp, 0x07						;     lines &= 0x07;
   206 00000359 7516                <1> 		jnz		.16E							;     if (0 == lines)
   207                              <1> 												;     {
   208 0000035B 68[FF03]E843FD83C4- <1> 		cdecl	puts, .s2						;       // 中断メッセージを表示
   208 00000363 02                  <1>
   209                              <1> 												;       
   210 00000364 B410                <1> 		mov		ah, 0x10						;       // キー入力待ち
   211 00000366 CD16                <1> 		int		0x16							;       AL = BIOS(0x16, 0x10);
   212                              <1> 												;       
   213 00000368 68[0A04]E836FD83C4- <1> 		cdecl	puts, .s3						;       // 中断メッセージを消去
   213 00000370 02                  <1>
   214                              <1> 												;     }
   215                              <1> .16E:											;   }
   216                              <1> 												;   
   217 00000371 6683FB00            <1> 		cmp		ebx, 0							;   
   218 00000375 7593                <1> 		jne		.10L							; }
   219                              <1> .10E:											; while (0 != EBX);
   220                              <1> 
   221 00000377 68[CF03]E827FD83C4- <1> 		cdecl	puts, .s1						; // フッダを表示
   221 0000037F 02                  <1>
   222                              <1> 
   223                              <1> 		;---------------------------------------
   224                              <1> 		; 【レジスタの復帰】
   225                              <1> 		;---------------------------------------
   226 00000380 5D                  <1> 		pop		bp
   227 00000381 5F                  <1> 		pop		di
   228 00000382 5E                  <1> 		pop		si
   229 00000383 665A                <1> 		pop		edx
   230 00000385 6659                <1> 		pop		ecx
   231 00000387 665B                <1> 		pop		ebx
   232 00000389 6658                <1> 		pop		eax
   233                              <1> 
   234 0000038B C3                  <1> 		ret
   235                              <1> 
   236 0000038C 2045383230204D656D- <1> .s0:	db " E820 Memory Map:", 0x0A, 0x0D
   236 00000395 6F7279204D61703A0A- <1>
   236 0000039E 0D                  <1>
   237 0000039F 20426173655F5F5F5F- <1> 		db " Base_____________ Length___________ Type____", 0x0A, 0x0D, 0
   237 000003A8 5F5F5F5F5F5F5F5F5F- <1>
   237 000003B1 204C656E6774685F5F- <1>
   237 000003BA 5F5F5F5F5F5F5F5F5F- <1>
   237 000003C3 20547970655F5F5F5F- <1>
   237 000003CC 0A0D00              <1>
   238 000003CF 202D2D2D2D2D2D2D2D- <1> .s1:	db " ----------------- ----------------- --------", 0x0A, 0x0D, 0
   238 000003D8 2D2D2D2D2D2D2D2D2D- <1>
   238 000003E1 202D2D2D2D2D2D2D2D- <1>
   238 000003EA 2D2D2D2D2D2D2D2D2D- <1>
   238 000003F3 202D2D2D2D2D2D2D2D- <1>
   238 000003FC 0A0D00              <1>
   239 000003FF 203C6D6F72652E2E2E- <1> .s2:	db " <more...>", 0
   239 00000408 3E00                <1>
   240 0000040A 0D2020202020202020- <1> .s3:	db 0x0D, "          ", 0x0D, 0
   240 00000413 20200D00            <1>
   241                              <1> 
   242 00000417 00                  <1> ALIGN 4, db 0
   243 00000418 00<rep 14h>         <1> .b0:	times E820_RECORD_SIZE db 0
   244                              <1> 
   245                              <1> ;************************************************************************
   246                              <1> ;	メモリ情報の表示
   247                              <1> ;========================================================================
   248                              <1> ;■書式		: void put_mem_info(adr);
   249                              <1> ;
   250                              <1> ;■引数
   251                              <1> ;	adr		: メモリ情報を参照するアドレス
   252                              <1> ;
   253                              <1> ;■戻り値;	: 無し
   254                              <1> ;************************************************************************
   255                              <1> put_mem_info:
   256                              <1> 		;---------------------------------------
   257                              <1> 		; 【スタックフレームの構築】
   258                              <1> 		;---------------------------------------
   259                              <1> 												;    + 4| バッファアドレス
   260                              <1> 												;    + 2| IP（戻り番地）
   261 0000042C 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   262 0000042D 89E5                <1> 		mov		bp, sp							; ------+--------
   263                              <1> 
   264                              <1> 		;---------------------------------------
   265                              <1> 		; 【レジスタの保存】
   266                              <1> 		;---------------------------------------
   267 0000042F 53                  <1> 		push	bx
   268 00000430 56                  <1> 		push	si
   269                              <1> 
   270                              <1> 		;---------------------------------------
   271                              <1> 		; 引数を取得
   272                              <1> 		;---------------------------------------
   273 00000431 8B7604              <1> 		mov		si, [bp + 4]					; SI = バッファアドレス;
   274                              <1> 
   275                              <1> 		;---------------------------------------
   276                              <1> 		; レコードの表示
   277                              <1> 		;---------------------------------------
   278                              <1> 
   279                              <1> 		; Base(64bit)
   280 00000434 6A046A106A0468-     <1> 		cdecl	itoa, word [si + 6], .p2 + 0, 4, 16, 0b0100
   280 0000043B [0B05]FF7406E8C9FD- <1>
   280 00000443 83C40A              <1>
   281 00000446 6A046A106A0468-     <1> 		cdecl	itoa, word [si + 4], .p2 + 4, 4, 16, 0b0100
   281 0000044D [0F05]FF7404E8B7FD- <1>
   281 00000455 83C40A              <1>
   282 00000458 6A046A106A0468-     <1> 		cdecl	itoa, word [si + 2], .p3 + 0, 4, 16, 0b0100
   282 0000045F [1405]FF7402E8A5FD- <1>
   282 00000467 83C40A              <1>
   283 0000046A 6A046A106A0468-     <1> 		cdecl	itoa, word [si + 0], .p3 + 4, 4, 16, 0b0100
   283 00000471 [1805]FF34E894FD83- <1>
   283 00000479 C40A                <1>
   284                              <1> 
   285                              <1> 		; Length(64bit)
   286 0000047B 6A046A106A0468-     <1> 		cdecl	itoa, word [si +14], .p4 + 0, 4, 16, 0b0100
   286 00000482 [1D05]FF740EE882FD- <1>
   286 0000048A 83C40A              <1>
   287 0000048D 6A046A106A0468-     <1> 		cdecl	itoa, word [si +12], .p4 + 4, 4, 16, 0b0100
   287 00000494 [2105]FF740CE870FD- <1>
   287 0000049C 83C40A              <1>
   288 0000049F 6A046A106A0468-     <1> 		cdecl	itoa, word [si +10], .p5 + 0, 4, 16, 0b0100
   288 000004A6 [2605]FF740AE85EFD- <1>
   288 000004AE 83C40A              <1>
   289 000004B1 6A046A106A0468-     <1> 		cdecl	itoa, word [si + 8], .p5 + 4, 4, 16, 0b0100
   289 000004B8 [2A05]FF7408E84CFD- <1>
   289 000004C0 83C40A              <1>
   290                              <1> 
   291                              <1> 		; Type(32bit)
   292 000004C3 6A046A106A0468-     <1> 		cdecl	itoa, word [si +18], .p6 + 0, 4, 16, 0b0100
   292 000004CA [2F05]FF7412E83AFD- <1>
   292 000004D2 83C40A              <1>
   293 000004D5 6A046A106A0468-     <1> 		cdecl	itoa, word [si +16], .p6 + 4, 4, 16, 0b0100
   293 000004DC [3305]FF7410E828FD- <1>
   293 000004E4 83C40A              <1>
   294                              <1> 
   295 000004E7 68[0A05]E8B7FB83C4- <1> 		cdecl	puts, .s1						;   // レコード情報を表示
   295 000004EF 02                  <1>
   296                              <1> 
   297 000004F0 8B5C10              <1> 		mov		bx, [si +16]					;   // タイプを文字列で表示
   298 000004F3 83E307              <1> 		and		bx, 0x07						;   BX  = Type(0～5)
   299 000004F6 D1E3                <1> 		shl		bx, 1							;   BX *= 2;   // 要素サイズに変換
   300 000004F8 81C3[8C05]          <1> 		add		bx, .t0							;   BX += .t0; // テーブルの先頭アドレスを加算
   301 000004FC FF37E8A3FB83C402    <1> 		cdecl	puts, word [bx]					;   puts(*BX);
   302                              <1> 
   303                              <1> 		;---------------------------------------
   304                              <1> 		; 【レジスタの復帰】
   305                              <1> 		;---------------------------------------
   306 00000504 5E                  <1> 		pop		si
   307 00000505 5B                  <1> 		pop		bx
   308                              <1> 
   309                              <1> 		;---------------------------------------
   310                              <1> 		; 【スタックフレームの破棄】
   311                              <1> 		;---------------------------------------
   312 00000506 89EC                <1> 		mov		sp, bp
   313 00000508 5D                  <1> 		pop		bp
   314                              <1> 
   315 00000509 C3                  <1> 		ret;
   316                              <1> 
   317 0000050A 20                  <1> .s1:	db " "
   318 0000050B 5A5A5A5A5A5A5A5A5F  <1> .p2:	db "ZZZZZZZZ_"
   319 00000514 5A5A5A5A5A5A5A5A20  <1> .p3:	db "ZZZZZZZZ "
   320 0000051D 5A5A5A5A5A5A5A5A5F  <1> .p4:	db "ZZZZZZZZ_"
   321 00000526 5A5A5A5A5A5A5A5A20  <1> .p5:	db "ZZZZZZZZ "
   322 0000052F 5A5A5A5A5A5A5A5A00  <1> .p6:	db "ZZZZZZZZ", 0
   323                              <1> 
   324 00000538 2028556E6B6E6F776E- <1> .s4:	db " (Unknown)", 0x0A, 0x0D, 0
   324 00000541 290A0D00            <1>
   325 00000545 2028757361626C6529- <1> .s5:	db " (usable)", 0x0A, 0x0D, 0
   325 0000054E 0A0D00              <1>
   326 00000551 202872657365727665- <1> .s6:	db " (reserved)", 0x0A, 0x0D, 0
   326 0000055A 64290A0D00          <1>
   327 0000055F 202841435049206461- <1> .s7:	db " (ACPI data)", 0x0A, 0x0D, 0
   327 00000568 7461290A0D00        <1>
   328 0000056E 202841435049204E56- <1> .s8:	db " (ACPI NVS)", 0x0A, 0x0D, 0
   328 00000577 53290A0D00          <1>
   329 0000057C 2028626164206D656D- <1> .s9:	db " (bad memory)", 0x0A, 0x0D, 0
   329 00000585 6F7279290A0D00      <1>
   330                              <1> 
   331 0000058C [3805][4505][5105]- <1> .t0:	dw .s4, .s5, .s6, .s7, .s8, .s9, .s4, .s4
   331 00000592 [5F05][6E05][7C05]- <1>
   331 00000598 [3805][3805]        <1>
   332                              <1> 
   136                                  %include	"../modules/real/kbc.s"
   137                              <1> ;************************************************************************
   138                              <1> ;	KBCの出力バッファに書き込む
   139                              <1> ;========================================================================
   140                              <1> ;■書式		: WORD KBC_Data_Write(data);
   141                              <1> ;
   142                              <1> ;■引数
   143                              <1> ;	data	: 書き込みデータ
   144                              <1> ;
   145                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   146                              <1> ;************************************************************************
   147                              <1> KBC_Data_Write:
   148                              <1>                 ;---------------------------------------
   149                              <1>                 ; 【スタックフレームの構築】
   150                              <1>                 ;---------------------------------------
   151                              <1>                                                         
   152                              <1>                                                         ;    + 4| データ
   153                              <1>                                                         ;    + 2| IP（戻り番地）
   154 0000059C 55                  <1>                 push	bp								;  BP+ 0| BP（元の値）
   155 0000059D 89E5                <1>                 mov		bp, sp							; ------+--------
   156                              <1> 
   157                              <1>                 ;---------------------------------------
   158                              <1>                 ; 【レジスタの保存】
   159                              <1>                 ;---------------------------------------
   160 0000059F 51                  <1>                 push	cx
   161                              <1> 
   162                              <1>                 ;---------------------------------------
   163                              <1>                 ; データ書き込み
   164                              <1>                 ;---------------------------------------
   165 000005A0 B90000              <1>                 mov		cx, 0							; CX = 0; // 最大カウント値
   166                              <1>         .10L:											; do
   167                              <1>                                                         ; {
   168 000005A3 E464                <1>                 in		al, 0x64						;   AL = inp(0x64); // KBCステータス
   169 000005A5 A802                <1>                 test    al, 0x02						;   ZF = AL & 0x02; // 書き込み可能？
   170 000005A7 E0FA                <1>                 loopnz	.10L							; } while (--CX && !ZF);
   171                              <1>                                                         ; 
   172 000005A9 83F900              <1>                 cmp		cx, 0							; if (CX) // 未タイムアウト
   173 000005AC 7405                <1>                 jz		.20E							; {
   174                              <1>                                                         ;   
   175 000005AE 8A4604              <1>                 mov		al, [bp + 4]					;   AL = データ;
   176 000005B1 E660                <1>                 out    	0x60, al						;   outp(0x60, AL);
   177                              <1>         .20E:											; }
   178                              <1>                                                         ; 
   179 000005B3 89C8                <1>                 mov		ax, cx							; return CX;
   180                              <1> 
   181                              <1>                 ;---------------------------------------
   182                              <1>                 ; 【レジスタの復帰】
   183                              <1>                 ;---------------------------------------
   184 000005B5 59                  <1>                 pop		cx
   185                              <1> 
   186                              <1>                 ;---------------------------------------
   187                              <1>                 ; 【スタックフレームの破棄】
   188                              <1>                 ;---------------------------------------
   189 000005B6 89EC                <1>                 mov		sp, bp
   190 000005B8 5D                  <1>                 pop		bp
   191                              <1> 
   192 000005B9 C3                  <1>                 ret
   193                              <1> 
   194                              <1> 
   195                              <1> ;************************************************************************
   196                              <1> ;	KBCの出力バッファを読み込む
   197                              <1> ;========================================================================
   198                              <1> ;■書式		: WORD KBC_Data_Read(data);
   199                              <1> ;
   200                              <1> ;■引数
   201                              <1> ;	data	: 読み込みデータ格納アドレス
   202                              <1> ;
   203                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   204                              <1> ;************************************************************************
   205                              <1> KBC_Data_Read:
   206                              <1> 
   207                              <1>                 ;---------------------------------------
   208                              <1>                 ; 【スタックフレームの構築】
   209                              <1>                 ;---------------------------------------
   210                              <1>                                                         ;    + 4| 格納アドレス
   211                              <1>                                                         ;    + 2| IP（戻り番地）
   212 000005BA 55                  <1>                 push	bp								;  BP+ 0| BP（元の値）
   213 000005BB 89E5                <1>                 mov		bp, sp							; ------+--------
   214                              <1> 
   215                              <1>                 ;---------------------------------------
   216                              <1>                 ; 【レジスタの保存】
   217                              <1>                 ;---------------------------------------
   218 000005BD 51                  <1>                 push	cx
   219 000005BE 57                  <1>                 push	di
   220                              <1> 
   221                              <1>                 ;---------------------------------------
   222                              <1>                 ; データ読み込み
   223                              <1>                 ;---------------------------------------
   224 000005BF B90000              <1>                 mov		cx, 0							; CX = 0; // 最大カウント値
   225                              <1>         .10L:											; do
   226                              <1>                                                         ; {
   227 000005C2 E464                <1>                 in		al, 0x64						;   AL = inp(0x64); // KBCステータス
   228 000005C4 A801                <1>                 test    al, 0x01						;   ZF = AL & 0x01; // 読み込み可能？
   229 000005C6 E1FA                <1>                 loopz	.10L							; } while (--CX && ZF);
   230                              <1>                                                         ;   
   231 000005C8 83F900              <1>                 cmp		cx, 0							; if (CX) // 未タイムアウト
   232 000005CB 7409                <1>                 jz		.20E							; {
   233                              <1>                                                         ;   
   234 000005CD B400                <1>                 mov		ah, 0x00						;   AH = 0x00;
   235 000005CF E460                <1>                 in     	al, 0x60						;   AL = inp(0x60); // データ取得
   236                              <1>                                                         ;   
   237 000005D1 8B7E04              <1>                 mov		di, [bp + 4]					;   DI    = adr;
   238 000005D4 8905                <1>                 mov		[di + 0], ax					;   DI[0] = AX;
   239                              <1>         .20E:											; }
   240                              <1>                                                         ; 
   241 000005D6 89C8                <1>                 mov		ax, cx		                    ;  return CX;
   242                              <1> 
   243                              <1>                 ;---------------------------------------
   244                              <1>                 ; 【レジスタの復帰】
   245                              <1>                 ;---------------------------------------
   246 000005D8 5F                  <1>                 pop		di
   247 000005D9 59                  <1>                 pop		cx
   248                              <1> 
   249                              <1>                 ;---------------------------------------
   250                              <1>                 ; 【スタックフレームの破棄】
   251                              <1>                 ;---------------------------------------
   252 000005DA 89EC                <1>                 mov		sp, bp
   253 000005DC 5D                  <1>                 pop		bp
   254                              <1> 
   255 000005DD C3                  <1>                 ret
   256                              <1> 
   257                              <1> 
   258                              <1> ;************************************************************************
   259                              <1> ;	KBCにコマンドを出力
   260                              <1> ;========================================================================
   261                              <1> ;■書式		: WORD KBC_Cmd_Write(cmd);
   262                              <1> ;
   263                              <1> ;■引数
   264                              <1> ;	cmd		: コマンド
   265                              <1> ;
   266                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   267                              <1> ;************************************************************************
   268                              <1> KBC_Cmd_Write:
   269                              <1>                 ;---------------------------------------
   270                              <1>                 ; 【スタックフレームの構築】
   271                              <1>                 ;---------------------------------------
   272                              <1>                                                         ;    + 4| コマンド
   273                              <1>                                                         ;    + 2| IP（戻り番地）
   274 000005DE 55                  <1>                 push	bp								;  BP+ 0| BP（元の値）
   275 000005DF 89E5                <1>                 mov		bp, sp							; ------+--------
   276                              <1> 
   277                              <1>                 ;---------------------------------------
   278                              <1>                 ; 【レジスタの保存】
   279                              <1>                 ;---------------------------------------
   280 000005E1 51                  <1>                 push	cx
   281                              <1> 
   282                              <1>                 ;---------------------------------------
   283                              <1>                 ; コマンド書き込み
   284                              <1>                 ;---------------------------------------
   285 000005E2 B90000              <1>                 mov		cx, 0							; CX = 0; // 最大カウント値
   286                              <1>         .10L:											; do
   287                              <1>                                                         ; {
   288 000005E5 E464                <1>                 in		al, 0x64						;   AL = inp(0x64); // KBCステータス
   289 000005E7 A802                <1>                 test    al, 0x02						;   ZF = AL & 0x02; // 書き込み可能？
   290 000005E9 E0FA                <1>                 loopnz	.10L							; } while (--CX && !ZF);
   291                              <1>                                                         ; 
   292 000005EB 83F900              <1>                 cmp		cx, 0							; if (CX) // 未タイムアウト
   293 000005EE 7405                <1>                 jz		.20E							; {
   294                              <1>                                                         ;   
   295 000005F0 8A4604              <1>                 mov		al, [bp + 4]					;   AL = コマンド;
   296 000005F3 E664                <1>                 out    	0x64, al						;   outp(0x64, AL);
   297                              <1>         .20E:											; }
   298                              <1> 
   299 000005F5 89C8                <1>                 mov		ax, cx							; return CX;
   300                              <1> 
   301                              <1>                 ;---------------------------------------
   302                              <1>                 ; 【レジスタの復帰】
   303                              <1>                 ;---------------------------------------
   304 000005F7 59                  <1>                 pop		cx
   305                              <1> 
   306                              <1>                 ;---------------------------------------
   307                              <1>                 ; 【スタックフレームの破棄】
   308                              <1>                 ;---------------------------------------
   309 000005F8 89EC                <1>                 mov		sp, bp
   310 000005FA 5D                  <1>                 pop		bp
   311                              <1> 
   312 000005FB C3                  <1>                 ret
   137                                  %include	"../modules/real/lba_chs.s"
   138                              <1> ;************************************************************************
   139                              <1> ;	LBAをCHSに変換
   140                              <1> ;------------------------------------------------------------------------
   141                              <1> ;	事前にデバイスパラメータを取得しておく
   142                              <1> ;========================================================================
   143                              <1> ;■書式		: void lba_chs(drive, drv_chs, lba);
   144                              <1> ;
   145                              <1> ;■引数
   146                              <1> ;	drive	: drive構造体のアドレス
   147                              <1> ;			:（ドライブパラメータが格納されている）
   148                              <1> ;	drv_chs	: drive構造体のアドレス
   149                              <1> ;			:（変換後のシリンダ番号、ヘッド番号そしてセクタ番号を保存する）
   150                              <1> ;	lba		: LBA
   151                              <1> ;
   152                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   153                              <1> ;************************************************************************
   154                              <1> lba_chs:
   155                              <1> 		;---------------------------------------
   156                              <1> 		; 【スタックフレームの構築】
   157                              <1> 		;---------------------------------------
   158                              <1> 												; ------|--------
   159                              <1> 												;    + 8| LBA（2バイト）
   160                              <1> 												;    + 6| drv_chsドライブ情報
   161                              <1> 												;    + 4| driveドライブ情報
   162                              <1> 												; ------+--------
   163                              <1> 												;    + 2| IP（戻り番地）
   164 000005FC 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   165 000005FD 89E5                <1> 		mov		bp, sp							; ------+--------
   166                              <1> 
   167                              <1> 		;---------------------------------------
   168                              <1> 		; 【レジスタの保存】
   169                              <1> 		;---------------------------------------
   170 000005FF 50                  <1> 		push	ax
   171 00000600 53                  <1> 		push	bx
   172 00000601 52                  <1> 		push	dx
   173 00000602 56                  <1> 		push	si
   174 00000603 57                  <1> 		push	di
   175                              <1> 
   176                              <1>         ;---------------------------------------
   177                              <1> 		; 【処理の開始】
   178                              <1> 		;---------------------------------------
   179 00000604 8B7604              <1> 		mov		si, [bp + 4]					; SI  = driveバッファ;
   180 00000607 8B7E06              <1> 		mov		di, [bp + 6]					; DI  = drv_chsバッファ;
   181                              <1> 
   182                              <1> 		; シリンダあたりのセクタ数を計算（ヘッド数×セクタ数）
   183 0000060A 8A4404              <1> 		mov		al,  [si + drive.head]			; AL = 最大ヘッド数;
   184 0000060D F66406              <1> 		mul		byte [si + drive.sect]			; AX = 最大ヘッド数 * 最大セクタ数;
   185 00000610 89C3                <1> 		mov		bx, ax							; BX = シリンダあたりのセクタ数;
   186                              <1> 
   187                              <1> 		; シリンダ番号を取得するために
   188                              <1> 		; LBAをシリンダあたりのセクタ数で除算
   189 00000612 BA0000              <1> 		mov		dx, 0							; DX = LBA（上位2バイト）
   190 00000615 8B4608              <1> 		mov		ax,  [bp + 8]					; AX = LBA（下位2バイト）
   191 00000618 F7F3                <1> 		div		bx								; DX = DX:AX % BX; // 残り
   192                              <1> 												; AX = DX:AX / BX; // シリンダ番号
   193                              <1> 
   194 0000061A 894502              <1> 		mov		[di + drive.cyln], ax			; drv_chs.cyln = シリンダ番号;
   195                              <1> 
   196                              <1> 		; ヘッド位置を取得するために
   197                              <1> 		; あまりをトラックあたりのセクタ数で除算
   198 0000061D 89D0                <1> 		mov		ax, dx							; AX = 残り
   199 0000061F F67406              <1> 		div		byte [si + drive.sect]			; AH = AX % 最大セクタ数; // セクタ番号
   200                              <1> 												; AL = AX / 最大セクタ数; // ヘッド番号
   201                              <1> 
   202 00000622 0FB6D4              <1> 		movzx	dx, ah							; DX = セクタ番号
   203 00000625 42                  <1> 		inc		dx								; （セクタは1始まりなので+1）
   204                              <1> 
   205 00000626 B400                <1> 		mov		ah, 0x00						; AX = ヘッド位置
   206                              <1> 
   207 00000628 894504              <1> 		mov		[di + drive.head], ax			; drv_chs.head = ヘッド番号;
   208 0000062B 895506              <1> 		mov		[di + drive.sect], dx			; drv_chs.sect = セクタ番号;
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 【レジスタの復帰】
   212                              <1> 		;---------------------------------------
   213 0000062E 5F                  <1> 		pop		di
   214 0000062F 5E                  <1> 		pop		si
   215 00000630 5A                  <1> 		pop		dx
   216 00000631 5B                  <1> 		pop		bx
   217 00000632 58                  <1> 		pop		ax
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 【スタックフレームの破棄】
   221                              <1> 		;---------------------------------------
   222 00000633 89EC                <1> 		mov		sp, bp
   223 00000635 5D                  <1> 		pop		bp
   224                              <1> 
   225 00000636 C3                  <1> 		ret
   226                              <1> 
   138                                  %include	"../modules/real/read_lba.s"
   139                              <1> ;************************************************************************
   140                              <1> ;	セクタ読み込み(LBA指定)
   141                              <1> ;------------------------------------------------------------------------
   142                              <1> ;	事前にドライブパラメータを取得しておく
   143                              <1> ;========================================================================
   144                              <1> ;■書式		: WORD read_lba(drive, lba, sect, dst);
   145                              <1> ;
   146                              <1> ;■引数
   147                              <1> ;	drive	: drive構造体のアドレス
   148                              <1> ;			:（ドライブパラメータが格納されている）
   149                              <1> ;	lba		: LBA
   150                              <1> ;	sect	: 読み出しセクタ数
   151                              <1> ;	dst		: 読み出し先アドレス
   152                              <1> ;
   153                              <1> ;■戻り値	: 読み込んだセクタ数
   154                              <1> ;************************************************************************
   155                              <1> read_lba:
   156                              <1> 		;---------------------------------------
   157                              <1> 		; 【スタックフレームの構築】
   158                              <1> 		;---------------------------------------
   159                              <1> 												; ------|--------
   160                              <1> 												;    +10| コピー先
   161                              <1> 												;    + 8| セクタ数
   162                              <1> 												;    + 6| LBA（2バイト）
   163                              <1> 												;    + 4| ドライブ情報
   164                              <1> 												; ------+--------
   165                              <1> 												;    + 2| IP（戻り番地）
   166 00000637 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   167 00000638 89E5                <1> 		mov		bp, sp							; ------+--------
   168                              <1> 
   169                              <1>         ;---------------------------------------
   170                              <1> 		; 【レジスタの保存】
   171                              <1> 		;---------------------------------------
   172 0000063A 56                  <1> 		push	si
   173                              <1> 
   174                              <1> 		;---------------------------------------
   175                              <1> 		; 【処理の開始】
   176                              <1> 		;---------------------------------------
   177 0000063B 8B7604              <1> 		mov		si, [bp + 4]					; SI = ドライブ情報;
   178                              <1> 
   179                              <1> 		;---------------------------------------
   180                              <1> 		; LBA→CHS変換
   181                              <1> 		;---------------------------------------
   182 0000063E 8B4606              <1> 		mov		ax, [bp + 6]					; AX = LBA;
   183 00000641 5068[6606]56E8B3FF- <1> 		cdecl	lba_chs, si, .chs, ax			; lba_chs(drive, .chs, AX);
   183 00000649 83C406              <1>
   184                              <1> 
   185                              <1> 		;---------------------------------------
   186                              <1> 		; ドライブ番号のコピー
   187                              <1> 		;---------------------------------------
   188 0000064C 8A04                <1> 		mov		al, [si + drive.no]				; 
   189 0000064E A2[6606]            <1> 		mov		[.chs + drive.no], al			; ドライブ番号
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; セクタの読み込み
   193                              <1> 		;---------------------------------------
   194 00000651 FF760AFF760868-     <1> 		cdecl	read_chs, .chs, word [bp + 8], word [bp +10]
   194 00000658 [6606]E8A5FA83C406  <1>
   195                              <1> 												; AX = read_chs(.chs, セクタ数, ofs);
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; 【レジスタの復帰】
   199                              <1> 		;---------------------------------------
   200 00000660 5E                  <1> 		pop		si
   201                              <1> 
   202                              <1> 		;---------------------------------------
   203                              <1> 		; 【スタックフレームの破棄】
   204                              <1> 		;---------------------------------------
   205 00000661 89EC                <1> 		mov		sp, bp
   206 00000663 5D                  <1> 		pop		bp
   207                              <1> 
   208 00000664 C3                  <1> 		ret
   209                              <1> 
   210 00000665 90                  <1> ALIGN 2
   211 00000666 00<rep 8h>          <1> .chs:	times drive_size	db	0				; 読み込みセクタに関する情報
   139                                  
   140                                  ;************************************************************************
   141                                  ;	ブート処理の第2ステージ
   142                                  ;************************************************************************
   143                                  stage_2:
   144                                  		;---------------------------------------
   145                                  		; 文字列を表示
   146                                  		;---------------------------------------
   147 0000066E 68[E806]E830FA83C4-     		cdecl	puts, .s0						; puts(.s0);
   147 00000676 02                 
   148                                  
   149                                  		;---------------------------------------
   150                                  		; ドライブ情報を取得
   151                                  		;---------------------------------------
   152 00000677 68[9C00]E80FFC83C4-     		cdecl	get_drive_param, BOOT			; get_drive_param(DX, BOOT.CYLN);
   152 0000067F 02                 
   153 00000680 83F800                  		cmp		ax, 0							; if (0 == AX)
   154 00000683 750C                    .10Q:	jne		.10E							; {
   155 00000685 68[1F07]E819FA83C4-     .10T:	cdecl	puts, .e0						;   puts(.e0);
   155 0000068D 02                 
   156 0000068E E832FA                  		call	reboot							;   reboot(); // 再起動
   157                                  .10E:											; }
   158                                  
   159                                  		;---------------------------------------
   160                                  		; ドライブ情報を表示
   161                                  		;---------------------------------------
   162 00000691 A1[9C00]                		mov		ax, [BOOT + drive.no]			; AX = ブートドライブ;
   163 00000694 6A046A106A0268-         		cdecl	itoa, ax, .p1, 2, 16, 0b0100	; 
   163 0000069B [0007]50E86BFB83C4-
   163 000006A3 0A                 
   164 000006A4 A1[9E00]                		mov		ax, [BOOT + drive.cyln]			; 
   165 000006A7 6A046A106A0468-         		cdecl	itoa, ax, .p2, 4, 16, 0b0100	; 
   165 000006AE [0807]50E858FB83C4-
   165 000006B6 0A                 
   166 000006B7 A1[A000]                		mov		ax, [BOOT + drive.head]			; AX = ヘッド数;
   167 000006BA 6A046A106A0268-         		cdecl	itoa, ax, .p3, 2, 16, 0b0100	; 
   167 000006C1 [1207]50E845FB83C4-
   167 000006C9 0A                 
   168 000006CA A1[A200]                		mov		ax, [BOOT + drive.sect]			; AX = トラックあたりのセクタ数;
   169 000006CD 6A046A106A0268-         		cdecl	itoa, ax, .p4, 2, 16, 0b0100	; 
   169 000006D4 [1A07]50E832FB83C4-
   169 000006DC 0A                 
   170 000006DD 68[F706]E8C1F983C4-     		cdecl	puts, .s1
   170 000006E5 02                 
   171                                  
   172                                  		;---------------------------------------
   173                                  		; 次のステージへ移行
   174                                  		;---------------------------------------
   175 000006E6 EB52                    		jmp		stage_3rd						; 次のステージへ移行
   176                                  
   177                                  		;---------------------------------------
   178                                  		; データ
   179                                  		;---------------------------------------
   180 000006E8 326E64207374616765-     .s0		db	"2nd stage...", 0x0A, 0x0D, 0
   180 000006F1 2E2E2E0A0D00       
   181                                  
   182 000006F7 2044726976653A3078      .s1		db	" Drive:0x"
   183 00000700 20202C20433A3078        .p1		db	"  , C:0x"
   184 00000708 202020202C20483A30-     .p2		db	"    , H:0x"
   184 00000711 78                 
   185 00000712 20202C20533A3078        .p3		db	"  , S:0x"
   186 0000071A 20200A0D00              .p4		db	"  ", 0x0A, 0x0D, 0
   187                                  
   188 0000071F 43616E277420676574-     .e0		db	"Can't get drive parameter.", 0
   188 00000728 206472697665207061-
   188 00000731 72616D657465722E00 
   189                                  
   190                                  ;************************************************************************
   191                                  ;	ブート処理の第3ステージ
   192                                  ;************************************************************************
   193                                  stage_3rd:
   194                                  		;---------------------------------------
   195                                  		; 文字列を表示
   196                                  		;---------------------------------------
   197 0000073A 68[B707]E864F983C4-     		cdecl	puts, .s0
   197 00000742 02                 
   198                                  
   199                                  		;---------------------------------------
   200                                  		; プロテクトモードで使用するフォントは、
   201                                  		; BIOSに内蔵されたものを流用する
   202                                  		;---------------------------------------
   203 00000743 68[0002]E884FB83C4-     		cdecl	get_font_adr, FONT				; // BIOSのフォントアドレスを取得
   203 0000074B 02                 
   204                                  
   205                                  		;---------------------------------------
   206                                  		; フォントアドレスの表示
   207                                  		;---------------------------------------
   208 0000074C 6A046A106A0468-         		cdecl	itoa, word [FONT.seg], .p1, 4, 16, 0b0100
   208 00000753 [D407]FF36[0002]E8-
   208 0000075A B0FA83C40A         
   209 0000075F 6A046A106A0468-         		cdecl	itoa, word [FONT.off], .p2, 4, 16, 0b0100
   209 00000766 [D907]FF36[0202]E8-
   209 0000076D 9DFA83C40A         
   210 00000772 68[C607]E82CF983C4-     		cdecl	puts, .s1
   210 0000077A 02                 
   211                                  
   212                                  		;---------------------------------------
   213                                  		; メモリ情報の取得と表示
   214                                  		;---------------------------------------
   215 0000077B E86FFB                  		cdecl	get_mem_info					; get_mem_info();
   216                                  
   217 0000077E 66A1[0402]              		mov		eax, [ACPI_DATA.adr]			; EAX = ACPI_DATA.adr;
   218 00000782 6683F800                		cmp		eax, 0							; if (EAX)
   219 00000786 742D                    		je		.10E							; {
   220                                  
   221 00000788 6A046A106A0468-         		cdecl	itoa, ax, .p4, 4, 16, 0b0100	;   itoa(AX); // 下位アドレスを変換
   221 0000078F [F207]50E877FA83C4-
   221 00000797 0A                 
   222 00000798 66C1E810                		shr		eax, 16							;   EAX >>= 16;
   223 0000079C 6A046A106A0468-         		cdecl	itoa, ax, .p3, 4, 16, 0b0100	;   itoa(AX); // 上位アドレスを変換
   223 000007A3 [EE07]50E863FA83C4-
   223 000007AB 0A                 
   224                                  
   225 000007AC 68[E307]E8F2F883C4-     		cdecl	puts, .s2						;   puts(.s2); // アドレスを表示
   225 000007B4 02                 
   226                                  .10E:											; }
   227                                  
   228                                  		;---------------------------------------
   229                                  		; 次のステージへ移行
   230                                  		;---------------------------------------
   231 000007B5 EB42                    		jmp		stage_4							; 次のステージへ移行
   232                                  
   233                                  		;---------------------------------------
   234                                  		; データ
   235                                  		;---------------------------------------
   236 000007B7 337264207374616765-     .s0:	db	"3rd stage...", 0x0A, 0x0D, 0
   236 000007C0 2E2E2E0A0D00       
   237                                  
   238 000007C6 20466F6E7420416464-     .s1:	db	" Font Address="
   238 000007CF 726573733D         
   239 000007D4 5A5A5A5A3A              .p1:	db	"ZZZZ:"
   240 000007D9 5A5A5A5A0A0D00          .p2:	db	"ZZZZ", 0x0A, 0x0D, 0
   241 000007E0 0A0D00                  		db	0x0A, 0x0D, 0
   242                                  
   243 000007E3 204143504920646174-     .s2:	db	" ACPI data="
   243 000007EC 613D               
   244 000007EE 5A5A5A5A                .p3:	db	"ZZZZ"
   245 000007F2 5A5A5A5A0A0D00          .p4:	db	"ZZZZ", 0x0A, 0x0D, 0
   246                                  
   247                                  ;************************************************************************
   248                                  ;	ブート処理の第4ステージ
   249                                  ;************************************************************************
   250                                  stage_4:
   251                                  		;---------------------------------------
   252                                  		; 文字列を表示
   253                                  		;---------------------------------------
   254 000007F9 68[BB08]E8A5F883C4-     		cdecl	puts, .s0
   254 00000801 02                 
   255                                  
   256                                  		;---------------------------------------
   257                                  		; A20ゲートの有効化
   258                                  		;---------------------------------------
   259 00000802 FA                      		cli										;   // 割り込み禁止
   260                                  												;   
   261 00000803 68AD00E8D5FD83C402      		cdecl	KBC_Cmd_Write, 0xAD				;   // キーボード無効化
   262                                  												;   
   263 0000080C 68D000E8CCFD83C402      		cdecl	KBC_Cmd_Write, 0xD0				;   // 出力ポート読み出しコマンド
   264 00000815 68[E408]E89FFD83C4-     		cdecl	KBC_Data_Read, .key				;   // 出力ポートデータ
   264 0000081D 02                 
   265                                  												;   
   266 0000081E 8A1E[E408]              		mov		bl, [.key]						;   BL  = key;
   267 00000822 80CB02                  		or		bl, 0x02						;   BL |= 0x02; // A20ゲート有効化
   268                                  												;   
   269 00000825 68D100E8B3FD83C402      		cdecl	KBC_Cmd_Write, 0xD1				;   // 出力ポート書き込みコマンド
   270 0000082E 53E86AFD83C402          		cdecl	KBC_Data_Write, bx				;   // 出力ポートデータ
   271                                  												;   
   272 00000835 68AE00E8A3FD83C402      		cdecl	KBC_Cmd_Write, 0xAE				;   // キーボード有効化
   273                                  												;   
   274 0000083E FB                      		sti										;   // 割り込み許可
   275                                  
   276                                  		;---------------------------------------
   277                                  		; キーボードLEDのテスト
   278                                  		;---------------------------------------
   279 0000083F BB0000                  		mov		bx, 0							; CX = LEDの初期値;
   280                                  .10L:											; do
   281                                  												; {
   282 00000842 B400                    		mov		ah, 0x00						;   // キー入力待ち
   283 00000844 CD16                    		int		0x16							;   AL = BIOS(0x16, 0x00);
   284                                  												;   
   285 00000846 3C31                    		cmp		al, '1'							;   if (AL < '1')
   286 00000848 7266                    		jb		.10E							;     break;
   287                                  												;   
   288 0000084A 3C33                    		cmp		al, '3'							;   if ('3' < AL)
   289 0000084C 7762                    		ja		.10E							;     break;
   290                                  												;   
   291 0000084E 88C1                    		mov		cl, al							;   CL   = キー入力;
   292 00000850 FEC9                    		dec		cl								;   CL  -= 1;       // 1減算
   293 00000852 80E103                  		and		cl, 0x03						;   CL  &= 0x03;    // 0～2に制限
   294 00000855 B80100                  		mov		ax, 0x0001						;   AX   = 0x0001;  // ビット変換用
   295 00000858 D3E0                    		shl		ax, cl							;   AX <<= CL;      // 0～2ビット左シフト
   296 0000085A 31C3                    		xor		bx, ax							;   BX  ^= AX;      // ビット反転
   297                                  
   298                                  		;---------------------------------------
   299                                  		; LEDコマンドの送信
   300                                  		;---------------------------------------
   301 0000085C FA                      		cli										;   // 割り込み禁止
   302                                  												;   
   303 0000085D 68AD00E87BFD83C402      		cdecl	KBC_Cmd_Write, 0xAD				;   // キーボード無効化
   304                                  												;   
   305 00000866 68ED00E830FD83C402      		cdecl	KBC_Data_Write, 0xED			;   // LEDコマンド
   306 0000086F 68[E408]E845FD83C4-     		cdecl	KBC_Data_Read, .key				;   // 受信応答
   306 00000877 02                 
   307                                  												;   
   308 00000878 803E[E408]FA            		cmp		[.key], byte 0xFA				;   if (0xFA == key)
   309 0000087D 7509                    		jne		.11F							;   {
   310                                  												;     
   311 0000087F 53E819FD83C402          		cdecl	KBC_Data_Write, bx				;     // LEDデータ出力
   312                                  												;   }
   313 00000886 EB1C                    		jmp		.11E							;   else
   314                                  .11F:											;   {
   315 00000888 6A046A106A0268-         		cdecl	itoa, word [.key], .e1, 2, 16, 0b0100
   315 0000088F [E008]FF36[E408]E8-
   315 00000896 74F983C40A         
   316 0000089B 68[DF08]E803F883C4-     		cdecl	puts, .e0						;     // 受信コードを表示
   316 000008A3 02                 
   317                                  .11E:											;   }
   318                                  												;   
   319 000008A4 68AE00E834FD83C402      		cdecl	KBC_Cmd_Write, 0xAE				;   // キーボード有効化
   320                                  												;   
   321 000008AD FB                      		sti										;   // 割り込み許可
   322                                  												;   
   323 000008AE EB92                    		jmp		.10L							; } while (1);
   324                                  .10E:
   325                                  
   326                                  		;---------------------------------------
   327                                  		; 文字列を表示
   328                                  		;---------------------------------------
   329 000008B0 68[CA08]E8EEF783C4-     		cdecl	puts, .s1
   329 000008B8 02                 
   330                                  
   331                                  		;---------------------------------------
   332                                  		; 次のステージへ移行
   333                                  		;---------------------------------------
   334 000008B9 EB2B                    		jmp		stage_5							; 次のステージへ移行
   335                                  
   336 000008BB 347468207374616765-     .s0:	db	"4th stage...", 0x0A, 0x0D, 0
   336 000008C4 2E2E2E0A0D00       
   337 000008CA 204132302047617465-     .s1:	db	" A20 Gate Enabled.", 0x0A, 0x0D, 0
   337 000008D3 20456E61626C65642E-
   337 000008DC 0A0D00             
   338 000008DF 5B                      .e0:	db	"["
   339 000008E0 5A5A5D00                .e1:	db	"ZZ]", 0
   340                                  
   341 000008E4 0000                    .key:	dw	0
   342                                  
   343                                  ;************************************************************************
   344                                  ;	ブート処理の第5ステージ
   345                                  ;************************************************************************
   346                                  stage_5:
   347                                  		;---------------------------------------
   348                                  		; 文字列を表示
   349                                  		;---------------------------------------
   350 000008E6 68[1209]E8B8F783C4-     		cdecl	puts, .s0
   350 000008EE 02                 
   351                                  
   352                                  		;---------------------------------------
   353                                  		; カーネルを読み込む
   354                                  		;---------------------------------------
   355 000008EF 68009C6A106A1068-       		cdecl	read_lba, BOOT, BOOT_SECT, KERNEL_SECT, BOOT_END
   355 000008F7 [9C00]E83BFD83C408 
   356                                  												; AX = read_lba(.lba, ...);
   357 000008FF 83F810                  		cmp		ax, KERNEL_SECT					; if (AX != CX)
   358 00000902 740C                    .10Q:	jz		.10E							; {
   359 00000904 68[2109]E89AF783C4-     .10T:	cdecl	puts, .e0						;   puts(.e0);
   359 0000090C 02                 
   360 0000090D E8B3F7                  		call	reboot							;   reboot(); // 再起動
   361                                  .10E:											; }
   362                                  												; 
   363                                  
   364                                  		;---------------------------------------
   365                                  		; 次のステージへ移行
   366                                  		;---------------------------------------
   367 00000910 EB29                    		jmp		stage_6							; 次のステージへ移行
   368                                  
   369 00000912 357468207374616765-     .s0		db	"5th stage...", 0x0A, 0x0D, 0
   369 0000091B 2E2E2E0A0D00       
   370 00000921 204661696C75726520-     .e0		db	" Failure load kernel...", 0x0A, 0x0D, 0
   370 0000092A 6C6F6164206B65726E-
   370 00000933 656C2E2E2E0A0D00   
   371                                  
   372                                  ;************************************************************************
   373                                  ;	ブート処理の第6ステージ
   374                                  ;************************************************************************
   375                                  stage_6:
   376                                  		;---------------------------------------
   377                                  		; 文字列を表示
   378                                  		;---------------------------------------
   379 0000093B 68[5309]E863F783C4-     		cdecl	puts, .s0
   379 00000943 02                 
   380                                  
   381                                  		;---------------------------------------
   382                                  		; ユーザーからの入力待ち
   383                                  		;---------------------------------------
   384                                  .10L:											; do
   385                                  												; {
   386 00000944 B400                    		mov		ah, 0x00						;   // キー入力待ち
   387 00000946 CD16                    		int		0x16							;   AL = BIOS(0x16, 0x00);
   388 00000948 3C20                    		cmp		al, ' '							;   ZF = AL == ' ';
   389 0000094A 75F8                    		jne		.10L							; } while (!ZF);
   390                                  												; 
   391                                  
   392                                  		;---------------------------------------
   393                                  		; ビデオモードの設定
   394                                  		;---------------------------------------
   395 0000094C B81200                  		mov		ax, 0x0012						; VGA 640x480
   396 0000094F CD10                    		int		0x10							; BIOS(0x10, 0x12); // ビデオモードの設定
   397                                  
   398                                  		;---------------------------------------
   399                                  		; 次のステージへ移行
   400                                  		;---------------------------------------
   401 00000951 EB5D                    		jmp		stage_7							; 次のステージへ移行
   402                                  
   403 00000953 367468207374616765-     .s0		db	"6th stage...", 0x0A, 0x0D, 0x0A, 0x0D
   403 0000095C 2E2E2E0A0D0A0D     
   404 00000963 205B50757368205350-     		db	" [Push SPACE key to protect mode...]", 0x0A, 0x0D, 0
   404 0000096C 414345206B65792074-
   404 00000975 6F2070726F74656374-
   404 0000097E 206D6F64652E2E2E5D-
   404 00000987 0A0D00             
   405                                  
   406                                  ;************************************************************************
   407                                  ;	GLOBAL DESCRIPTOR TABLE
   408                                  ;	(セグメントディスクリプタの配列)
   409                                  ;************************************************************************
   410                                  ;
   411                                  ;   セグメントディスクリプタ
   412                                  ;
   413                                  ;        +--------+-----------------: Base (0xBBbbbbbb)
   414                                  ;        |   +----|--------+--------: Limit(0x000Lllll)
   415                                  ;        |   |    |        |
   416                                  ;       +--+--+--+--+--+--+--+--+
   417                                  ;       |B |FL|f |b       |l    |
   418                                  ;       +--+--+--+--+--+--+--+--+
   419                                  ;           |  |                         76543210
   420                                  ;           |  +--------------------: f:PDDSTTTA
   421                                  ;           |                          P:Exist
   422                                  ;           |                          D:DPL(特権)
   423                                  ;           |                          S:(DT)0=システムorゲート, 1=データセグメント
   424                                  ;           |                          T:Type
   425                                  ;           |                            000(0)=R/- DATA
   426                                  ;           |                            001(1)=R/W DATA
   427                                  ;           |                            010(2)=R/- STACK
   428                                  ;           |                            011(3)=R/W STACK
   429                                  ;           |                            100(4)=R/- CODE
   430                                  ;           |                            101(5)=R/W CODE
   431                                  ;           |                            110(6)=R/- CONFORM
   432                                  ;           |                            111(7)=R/W CONFORM
   433                                  ;           |                          A:Accessed
   434                                  ;           |                       
   435                                  ;           +-----------------------: F:GD0ALLLL
   436                                  ;                                      G:Limit Scale(0=1, 1=4K)
   437                                  ;                                      D:Data/BandDown(0=16, 1=32Bit セグメント)
   438                                  ;                                      A:any
   439                                  ;                                      L:Limit[19:16]
   440 0000098A 00<rep 2h>              ALIGN 4, db 0
   441                                  ;					  B_ F L f T b_____ l___
   442 0000098C 0000000000000000        GDT:			dq	0x00_0_0_0_0_000000_0000	; NULL
   443 00000994 FFFF0000009ACF00        .cs:			dq	0x00_C_F_9_A_000000_FFFF	; CODE 4G
   444 0000099C FFFF00000092CF00        .ds:			dq	0x00_C_F_9_2_000000_FFFF	; DATA 4G
   445                                  .gdt_end:
   446                                  
   447                                  ;===============================================
   448                                  ;	セレクタ
   449                                  ;===============================================
   450                                  SEL_CODE	equ	.cs - GDT						; コード用セレクタ
   451                                  SEL_DATA	equ	.ds - GDT						; データ用セレクタ
   452                                  
   453                                  ;===============================================
   454                                  ;	GDT
   455                                  ;===============================================
   456 000009A4 1700                    GDTR:	dw 		GDT.gdt_end - GDT - 1			; ディスクリプタテーブルのリミット
   457 000009A6 [8C090000]              		dd 		GDT								; ディスクリプタテーブルのアドレス
   458                                  
   459                                  ;===============================================
   460                                  ;	IDT（疑似：割り込み禁止にする為）
   461                                  ;===============================================
   462 000009AA 0000                    IDTR:	dw 		0								; idt_limit
   463 000009AC 00000000                		dd 		0								; idt location
   464                                  
   465                                  ;************************************************************************
   466                                  ;	ブート処理の第7ステージ
   467                                  ;************************************************************************
   468                                  stage_7:
   469 000009B0 FA                      		cli										; // 割り込み禁止
   470                                  
   471                                  		;---------------------------------------
   472                                  		; GDTロード
   473                                  		;---------------------------------------
   474 000009B1 0F0116[A409]            		lgdt	[GDTR]							; // グローバルディスクリプタテーブルをロード
   475 000009B6 0F011E[AA09]            		lidt	[IDTR]							; // 割り込みディスクリプタテーブルをロード
   476                                  
   477                                  		;---------------------------------------
   478                                  		; プロテクトモードへ移行
   479                                  		;---------------------------------------
   480 000009BB 0F20C0                  		mov		eax,cr0							; // PEビットをセット
   481 000009BE 83C801                  		or		ax, 1							; CR0 |= 1;
   482 000009C1 0F22C0                  		mov		cr0,eax							; 
   483                                  
   484 000009C4 EB00                    		jmp		$ + 2							; 先読みをクリア
   485                                  
   486                                  		;---------------------------------------
   487                                  		; セグメント間ジャンプ
   488                                  		;---------------------------------------
   489                                  [BITS 32]
   490 000009C6 66                      		DB		0x66							; オペランドサイズオーバーライドプレフィックス
   491 000009C7 EA[CE090000]0800        		jmp		SEL_CODE:CODE_32
   492                                  
   493                                  ;************************************************************************
   494                                  ;	32ビットコード開始
   495                                  ;************************************************************************
   496                                  CODE_32:
   497                                  
   498                                  		;---------------------------------------
   499                                  		; セレクタを初期化
   500                                  		;---------------------------------------
   501 000009CE 66B81000                		mov		ax, SEL_DATA					;
   502 000009D2 8ED8                    		mov		ds, ax							;
   503 000009D4 8EC0                    		mov		es, ax							;
   504 000009D6 8EE0                    		mov		fs, ax							;
   505 000009D8 8EE8                    		mov		gs, ax							;
   506 000009DA 8ED0                     		mov		ss, ax							;
   507                                  
   508                                  		;---------------------------------------
   509                                  		; カーネル部をコピー
   510                                  		;---------------------------------------
   511 000009DC B900080000              		mov		ecx, (KERNEL_SIZE) / 4			; ECX = 4バイト単位でコピー;
   512 000009E1 BE009C0000              		mov		esi, BOOT_END					; ESI = 0x0000_9C00; // カーネル部
   513 000009E6 BF00101000              		mov		edi, KERNEL_LOAD				; EDI = 0x0010_1000; // 上位メモリ
   514 000009EB FC                      		cld										; // DFクリア（+方向）
   515 000009EC F3A5                    		rep movsd								; while (--ECX) *EDI++ = *ESI++;
   516                                  
   517                                  		;---------------------------------------
   518                                  		; カーネル処理に移行
   519                                  		;---------------------------------------
   520 000009EE E9(00101000)            		jmp		KERNEL_LOAD						; カーネルの先頭にジャンプ
   521                                  
   522                                  
   523                                  ;************************************************************************
   524                                  ;	パディング
   525                                  ;************************************************************************
   526 000009F3 00<rep 160Dh>           		times BOOT_SIZE - ($ - $$)		db	0	; パディング
   527                                  
