     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  ;************************************************************************
     8                                  ;	マクロ
     9                                  ;************************************************************************
    10                                  %include	"../include/define.s"
    11                              <1> ;************************************************************************
    12                              <1> ;	メモリイメージ
    13                              <1> ;************************************************************************
    14                              <1> 
    15                              <1> 		;---------------------------------------
    16                              <1> 		;           |            | 
    17                              <1> 		;           |____________| 
    18                              <1> 		; 0000_7A00 |            | ( 512) スタック
    19                              <1> 		;           |____________| 
    20                              <1> 		; 0000_7C00 |            | (  8K) ブート
    21                              <1> 		;           =            = 
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    24                              <1> 		;           =            = 
    25                              <1> 		;           |____________| 
    26                              <1> 		; 0000_BC00 |////////////| 
    27                              <1> 		;           =            = 
    28                              <1> 		;           |____________| 
    29                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    32                              <1> 		;           |____________| 
    33                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    34                              <1> 		;           |            | 
    35                              <1> 		;           =            = 
    36                              <1> 		;           |____________| 
    37                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    38                              <1> 		;           |            | （各タスク1K）
    39                              <1> 		;           =            = 
    40                              <1> 		;           |____________| 
    41                              <1> 		; 0010_5000 |            | Dir
    42                              <1> 		;      6000 |____________| Page
    43                              <1> 		; 0010_7000 |            | Dir
    44                              <1> 		;      8000 |____________| Page
    45                              <1> 		; 0010_9000 |////////////| 
    46                              <1> 		;           |            | 
    47                              <1> 
    48                              <1> 
    49                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    50                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    51                              <1> 
    52                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    53                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    54                              <1> 
    55                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    56                              <1> 
    57                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    58                              <1> 
    59                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    60                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    61                              <1> 
    62                              <1> 		E820_RECORD_SIZE	equ		20
    63                              <1> 
    64                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    65                              <1> 
    66                              <1> 		STACK_BASE			equ		0x0010_3000		; タスク用スタックエリア
    67                              <1> 		STACK_SIZE			equ		1024			; スタックサイズ
    68                              <1> 
    69                              <1> 		SP_TASK_0			equ		STACK_BASE + (STACK_SIZE * 1)
    70                              <1> 		SP_TASK_1			equ		STACK_BASE + (STACK_SIZE * 2)
    11                                  %include	"../include/macro.s"
    12                              <1> ;************************************************************************
    13                              <1> ; 関数呼び出し用マクロ
    14                              <1> ;
    15                              <1> ; 使い方：
    16                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    17                              <1> ;
    18                              <1> ;************************************************************************
    19                              <1> %macro  cdecl 1-*.nolist
    20                              <1> 
    21                              <1> 	%rep  %0 - 1
    22                              <1> 		push	%{-1:-1}
    23                              <1> 		%rotate -1
    24                              <1> 	%endrep 
    25                              <1> 	%rotate -1
    26                              <1> 
    27                              <1> 		call	%1
    28                              <1> 
    29                              <1> 	%if 1 < %0
    30                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    31                              <1> 	%endif
    32                              <1> 
    33                              <1> %endmacro
    34                              <1> 
    35                              <1> ;************************************************************************
    36                              <1> ; 割り込みベクタ設定用
    37                              <1> ;
    38                              <1> ; 使い方：
    39                              <1> ;	set_vect	ベクタ番号, 割り込み処理 [, フラグ]
    40                              <1> ;
    41                              <1> ;************************************************************************
    42                              <1> %macro  set_vect 1-*.nolist
    43                              <1> 		push	eax
    44                              <1> 		push	edi
    45                              <1> 
    46                              <1> 		mov		edi, VECT_BASE + (%1 * 8)		; ベクタアドレス;
    47                              <1> 		mov		eax, %2
    48                              <1> 
    49                              <1> 	%if 3 == %0
    50                              <1> 		mov		[edi + 4], %3					; フラグ
    51                              <1> 	%endif
    52                              <1> 
    53                              <1> 		mov		[edi + 0], ax					; 例外アドレス[15: 0]
    54                              <1> 		shr		eax, 16							; 
    55                              <1> 		mov		[edi + 6], ax					; 例外アドレス[31:16]
    56                              <1> 
    57                              <1> 		pop		edi
    58                              <1> 		pop		eax
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> ;************************************************************************
    62                              <1> ; ポート出力用
    63                              <1> ;
    64                              <1> ; 使い方：
    65                              <1> ;	outp	ポート番号, 出力値
    66                              <1> ;
    67                              <1> ;************************************************************************
    68                              <1> %macro  outp 2
    69                              <1> 		mov		al, %2
    70                              <1> 		out		%1, al
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> ;************************************************************************
    74                              <1> ; ディスクリプタの情報を設定
    75                              <1> ;
    76                              <1> ; 使い方：
    77                              <1> ;	set_desc	ディスクリプタ, ベース
    78                              <1> ;
    79                              <1> ;************************************************************************
    80                              <1> %macro  set_desc 2-* 
    81                              <1> 		push	eax
    82                              <1> 		push	edi
    83                              <1> 
    84                              <1> 		mov		edi, %1							; ディスクリプタアドレス
    85                              <1> 		mov		eax, %2							; ベースアドレス
    86                              <1> 
    87                              <1> 	%if 3 == %0
    88                              <1> 		mov		[edi + 0], %3					; リミット
    89                              <1> 	%endif
    90                              <1> 
    91                              <1> 		mov		[edi + 2], ax					; ベース（[15: 0]）
    92                              <1> 		shr		eax, 16							; 
    93                              <1> 		mov		[edi + 4], al					; ベース（[23:16]）
    94                              <1> 		mov		[edi + 7], ah					; ベース（[31:24]）
    95                              <1> 
    96                              <1> 		pop		edi
    97                              <1> 		pop		eax
    98                              <1> %endmacro
    99                              <1> 
   100                              <1> ;************************************************************************
   101                              <1> ; ゲートディスクリプタのオフセットを設定
   102                              <1> ;
   103                              <1> ; 使い方：
   104                              <1> ;	set_gate	ディスクリプタ, オフセット
   105                              <1> ;
   106                              <1> ;************************************************************************
   107                              <1> %macro  set_gate 2-* 
   108                              <1> 		push	eax
   109                              <1> 		push	edi
   110                              <1> 
   111                              <1> 		mov		edi, %1							; ディスクリプタアドレス
   112                              <1> 		mov		eax, %2							; ベースアドレス
   113                              <1> 
   114                              <1> 		mov		[edi + 0], ax					; ベース（[15: 0]）
   115                              <1> 		shr		eax, 16							; 
   116                              <1> 		mov		[edi + 6], ax					; ベース（[31:16]）
   117                              <1> 
   118                              <1> 		pop		edi
   119                              <1> 		pop		eax
   120                              <1> %endmacro
   121                              <1> 
   122                              <1> ;************************************************************************
   123                              <1> ;	構造体
   124                              <1> ;************************************************************************
   125                              <1> 
   126                              <1> ;-----------------------------------------------
   127                              <1> ;	ドライブパラメータ
   128                              <1> ;-----------------------------------------------
   129                              <1> struc drive
   130 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
   131 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
   132 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
   133 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
   134                              <1> endstruc
   135                              <1> 
   136                              <1> ;-----------------------------------------------
   137                              <1> ;	リングバッファ
   138                              <1> ;-----------------------------------------------
   139                              <1> %define		RING_ITEM_SIZE		(1 << 4)
   140                              <1> %define		RING_INDEX_MASK		(RING_ITEM_SIZE - 1)
   141                              <1> 
   142                              <1> struc ring_buff
   143 00000000 ????????            <1> 		.rp				resd	1				; RP:書き込み位置
   144 00000004 ????????            <1> 		.wp				resd	1				; WP:読み込み位置
   145 00000008 <res 10h>           <1> 		.item			resb	RING_ITEM_SIZE	; バッファ
   146                              <1> endstruc
   147                              <1> 
   148                              <1> ;-----------------------------------------------
   149                              <1> ;	バラ曲線描画パラメータ
   150                              <1> ;-----------------------------------------------
   151                              <1> struc rose
   152 00000000 ????????            <1> 		.x0				resd	1				; 左上座標：X0
   153 00000004 ????????            <1> 		.y0				resd	1				; 左上座標：Y0
   154 00000008 ????????            <1> 		.x1				resd	1				; 右下座標：X1
   155 0000000C ????????            <1> 		.y1				resd	1				; 右下座標：Y1
   156                              <1> 
   157 00000010 ????????            <1> 		.n				resd	1				; 変数：n
   158 00000014 ????????            <1> 		.d				resd	1				; 変数：d
   159                              <1> 
   160 00000018 ????????            <1> 		.color_x		resd	1				; 描画色：X軸
   161 0000001C ????????            <1> 		.color_y		resd	1				; 描画色：Y軸
   162 00000020 ????????            <1> 		.color_z		resd	1				; 描画色：枠
   163 00000024 ????????            <1> 		.color_s		resd	1				; 描画色：文字
   164 00000028 ????????            <1> 		.color_f		resd	1				; 描画色：グラフ描画色
   165 0000002C ????????            <1> 		.color_b		resd	1				; 描画色：グラフ消去色
   166                              <1> 
   167 00000030 <res 10h>           <1> 		.title			resb	16				; タイトル
   168                              <1> endstruc
   169                              <1> 
    12                                  
    13                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    14                                  
    15                                  [BITS 32]
    16                                  ;************************************************************************
    17                                  ;	エントリポイント
    18                                  ;************************************************************************
    19                                  kernel:
    20                                  		;---------------------------------------
    21                                  		; フォントアドレスを取得
    22                                  		;---------------------------------------
    23 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    24 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    25 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    26 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    27 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    28 00000011 A3[94010000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    29                                  
    30                                  		;---------------------------------------
    31                                  		; TSSディスクリプタの設定
    32                                  		;---------------------------------------
    33                                  		set_desc	GDT.tss_0, TSS_0			; // タスク0用TSSの設定
    81 00000016 50                  <1>  push eax
    82 00000017 57                  <1>  push edi
    83                              <1> 
    84 00000018 BF[8C020000]        <1>  mov edi, %1
    85 0000001D B8[9C010000]        <1>  mov eax, %2
    86                              <1> 
    87                              <1>  %if 3 == %0
    88                              <1>  mov [edi + 0], %3
    89                              <1>  %endif
    90                              <1> 
    91 00000022 66894702            <1>  mov [edi + 2], ax
    92 00000026 C1E810              <1>  shr eax, 16
    93 00000029 884704              <1>  mov [edi + 4], al
    94 0000002C 886707              <1>  mov [edi + 7], ah
    95                              <1> 
    96 0000002F 5F                  <1>  pop edi
    97 00000030 58                  <1>  pop eax
    34                                  		set_desc	GDT.tss_1, TSS_1			; // タスク1用TSSの設定
    81 00000031 50                  <1>  push eax
    82 00000032 57                  <1>  push edi
    83                              <1> 
    84 00000033 BF[94020000]        <1>  mov edi, %1
    85 00000038 B8[04020000]        <1>  mov eax, %2
    86                              <1> 
    87                              <1>  %if 3 == %0
    88                              <1>  mov [edi + 0], %3
    89                              <1>  %endif
    90                              <1> 
    91 0000003D 66894702            <1>  mov [edi + 2], ax
    92 00000041 C1E810              <1>  shr eax, 16
    93 00000044 884704              <1>  mov [edi + 4], al
    94 00000047 886707              <1>  mov [edi + 7], ah
    95                              <1> 
    96 0000004A 5F                  <1>  pop edi
    97 0000004B 58                  <1>  pop eax
    35                                  
    36                                  		;---------------------------------------
    37                                  		; コールゲートの設定
    38                                  		;---------------------------------------
    39                                  		set_gate	GDT.call_gate, call_gate	; // コールゲートの設定
   108 0000004C 50                  <1>  push eax
   109 0000004D 57                  <1>  push edi
   110                              <1> 
   111 0000004E BF[9C020000]        <1>  mov edi, %1
   112 00000053 B8[180C0000]        <1>  mov eax, %2
   113                              <1> 
   114 00000058 668907              <1>  mov [edi + 0], ax
   115 0000005B C1E810              <1>  shr eax, 16
   116 0000005E 66894706            <1>  mov [edi + 6], ax
   117                              <1> 
   118 00000062 5F                  <1>  pop edi
   119 00000063 58                  <1>  pop eax
    40                                  
    41                                  		;---------------------------------------
    42                                  		; LDTの設定
    43                                  		;---------------------------------------
    44                                  		set_desc	GDT.ldt, LDT, word LDT_LIMIT
    81 00000064 50                  <1>  push eax
    82 00000065 57                  <1>  push edi
    83                              <1> 
    84 00000066 BF[84020000]        <1>  mov edi, %1
    85 0000006B B8[AA020000]        <1>  mov eax, %2
    86                              <1> 
    87                              <1>  %if 3 == %0
    88 00000070 66C7072700          <1>  mov [edi + 0], %3
    89                              <1>  %endif
    90                              <1> 
    91 00000075 66894702            <1>  mov [edi + 2], ax
    92 00000079 C1E810              <1>  shr eax, 16
    93 0000007C 884704              <1>  mov [edi + 4], al
    94 0000007F 886707              <1>  mov [edi + 7], ah
    95                              <1> 
    96 00000082 5F                  <1>  pop edi
    97 00000083 58                  <1>  pop eax
    45                                  
    46                                  		;---------------------------------------
    47                                  		; GDTをロード（再設定）
    48                                  		;---------------------------------------
    49 00000084 0F0115[A4020000]        		lgdt	[GDTR]							; // グローバルディスクリプタテーブルをロード
    50                                  
    51                                  		;---------------------------------------
    52                                  		; スタックの設定
    53                                  		;---------------------------------------
    54 0000008B BC00341000              		mov		esp, SP_TASK_0					; // タスク0用のスタックを設定
    55                                  
    56                                  		;---------------------------------------
    57                                  		; タスクレジスタの初期化
    58                                  		;---------------------------------------
    59 00000090 66B82000                		mov		ax, SS_TASK_0
    60 00000094 0F00D8                  		ltr		ax								; // タスクレジスタの設定
    61                                  
    62                                  		;---------------------------------------
    63                                  		; 初期化
    64                                  		;---------------------------------------
    65 00000097 E852080000              		cdecl	init_int						; // 割り込みベクタの初期化
    66 0000009C E8D3090000              		cdecl	init_pic						; // 割り込みコントローラの初期化
    67                                  
    68 000000A1 5057BF00001000B8-       		set_vect	0x00, int_zero_div			; // 割り込み処理の登録：0除算
    68 000000A9 [560A0000]668907C1-
    68 000000B1 E810668947065F58   
    69 000000B9 5057BF00011000B8-       		set_vect	0x20, int_timer				; // 割り込み処理の登録：タイマー
    69 000000C1 [D2020000]668907C1-
    69 000000C9 E810668947065F58   
    70 000000D1 5057BF08011000B8-       		set_vect	0x21, int_keyboard			; // 割り込み処理の登録：KBC
    70 000000D9 [DE0A0000]668907C1-
    70 000000E1 E810668947065F58   
    71 000000E9 5057BF40011000B8-       		set_vect	0x28, int_rtc				; // 割り込み処理の登録：RTC
    71 000000F1 [B30A0000]668907C1-
    71 000000F9 E810668947065F58   
    72                                  
    73                                  		;---------------------------------------
    74                                  		; デバイスの割り込み許可
    75                                  		;---------------------------------------
    76 00000101 6A10E8970900006683-     		cdecl	rtc_int_en, 0x10				; rtc_int_en(UIE); // 更新サイクル終了割り込み許可
    76 0000010A C404               
    77 0000010C E8BF0A0000              		cdecl	int_en_timer0					; // タイマー（カウンタ0）割り込み許可
    78                                  
    79                                  		;---------------------------------------
    80                                  		; IMR(割り込みマスクレジスタ)の設定
    81                                  		;---------------------------------------
    82                                  		outp	0x21, 0b_1111_1000				; // 割り込み有効：スレーブPIC/KBC/タイマー
    69 00000111 B0F8                <1>  mov al, %2
    70 00000113 E621                <1>  out %1, al
    83                                  		outp	0xA1, 0b_1111_1110				; // 割り込み有効：RTC
    69 00000115 B0FE                <1>  mov al, %2
    70 00000117 E6A1                <1>  out %1, al
    84                                  
    85                                  		;---------------------------------------
    86                                  		; CPUの割り込み許可
    87                                  		;---------------------------------------
    88 00000119 FB                      		sti										; // 割り込み許可
    89                                  
    90                                  		;---------------------------------------
    91                                  		; フォントの一覧表示
    92                                  		;---------------------------------------
    93 0000011A 6A0D6A3FE87F030000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
    93 00000123 6683C408           
    94 00000127 6A046A3FE800040000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
    94 00000130 6683C408           
    95                                  
    96                                  		;---------------------------------------
    97                                  		; 文字列の表示
    98                                  		;---------------------------------------
    99 00000134 68[7C010000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
    99 0000013C 00006A0E6A19E8A003-
    99 00000145 00006683C410       
   100                                  
   101                                  .10L:											; while (;;)
   102                                  												; {
   103                                  		;---------------------------------------
   104                                  		; 回転する棒を表示
   105                                  		;---------------------------------------
   106 0000014B E88F0A0000              		cdecl	draw_rotation_bar				;   // 回転する棒を表示
   107                                  
   108                                  		;---------------------------------------
   109                                  		; キーコードの取得
   110                                  		;---------------------------------------
   111 00000150 68[90010000]68-         		cdecl	ring_rd, _KEY_BUFF, .int_key	;   EAX = ring_rd(buff, &int_key);
   111 00000156 [040B0000]E8BD0900-
   111 0000015E 006683C408         
   112 00000163 83F800                  		cmp		eax, 0							;   if (EAX == 0)
   113 00000166 7412                    		je		.10E							;   {
   114                                  												;   
   115                                  		;---------------------------------------
   116                                  		; キーコードの表示
   117                                  		;---------------------------------------
   118 00000168 68[040B0000]6A1D6A-     		cdecl	draw_key, 2, 29, _KEY_BUFF		;     ring_show(key_buff); // 全要素を表示
   118 00000170 02E8070A00006683C4-
   118 00000179 0C                 
   119                                  .10E:											;   }
   120 0000017A EBCF                    		jmp		.10L							; }
   121                                  
   122 0000017C 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
   122 00000185 65726E656C212000   
   123                                  
   124 0000018D 00<rep 3h>              ALIGN 4, db 0
   125 00000190 00000000                .int_key:	dd	0
   126                                  
   127                                  ALIGN 4, db 0
   128 00000194 00000000                FONT_ADR:	dd	0
   129 00000198 00000000                RTC_TIME:	dd	0
   130                                  
   131                                  ;************************************************************************
   132                                  ;	タスク
   133                                  ;************************************************************************
   134                                  %include	"descriptor.s"
   135                              <1> ;************************************************************************
   136                              <1> ;	TSS
   137                              <1> ;************************************************************************
   138                              <1> TSS_0:
   139 0000019C 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   140 000001A0 00321000            <1> .esp0:			dd	SP_TASK_0 - 512				;*  4:ESP0
   141 000001A4 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   142 000001A8 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   143 000001AC 00000000            <1> .ss1:			dd	0							;* 16:
   144 000001B0 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   145 000001B4 00000000            <1> .ss2:			dd	0							;* 24:
   146 000001B8 00000000            <1> .cr3:			dd	0							;  28:CR3(PDBR)
   147 000001BC 00000000            <1> .eip:			dd	0							;  32:EIP
   148 000001C0 00000000            <1> .eflags:		dd	0							;  36:EFLAGS
   149 000001C4 00000000            <1> .eax:			dd	0							;  40:EAX
   150 000001C8 00000000            <1> .ecx:			dd	0							;  44:ECX
   151 000001CC 00000000            <1> .edx:			dd	0							;  48:EDX
   152 000001D0 00000000            <1> .ebx:			dd	0							;  52:EBX
   153 000001D4 00000000            <1> .esp:			dd	0							;  56:ESP
   154 000001D8 00000000            <1> .ebp:			dd	0							;  60:EBP
   155 000001DC 00000000            <1> .esi:			dd	0							;  64:ESI
   156 000001E0 00000000            <1> .edi:			dd	0							;  68:EDI
   157 000001E4 00000000            <1> .es:			dd	0							;  72:ES
   158 000001E8 00000000            <1> .cs:			dd	0							;  76:CS
   159 000001EC 00000000            <1> .ss:			dd	0							;  80:SS
   160 000001F0 00000000            <1> .ds:			dd	0							;  84:DS
   161 000001F4 00000000            <1> .fs:			dd	0							;  88:FS
   162 000001F8 00000000            <1> .gs:			dd	0							;  92:GS
   163 000001FC 00000000            <1> .ldt:			dd	0							;* 96:LDTセグメントセレクタ
   164 00000200 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   165                              <1> 
   166                              <1> TSS_1:
   167 00000204 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   168 00000208 00361000            <1> .esp0:			dd	SP_TASK_1 - 512				;*  4:ESP0
   169 0000020C 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   170 00000210 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   171 00000214 00000000            <1> .ss1:			dd	0							;* 16:
   172 00000218 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   173 0000021C 00000000            <1> .ss2:			dd	0							;* 24:
   174 00000220 00000000            <1> .cr3:			dd	0							;  28:CR3(PDBR)
   175 00000224 [0C030000]          <1> .eip:			dd	task_1						;  32:EIP
   176 00000228 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   177 0000022C 00000000            <1> .eax:			dd	0							;  40:EAX
   178 00000230 00000000            <1> .ecx:			dd	0							;  44:ECX
   179 00000234 00000000            <1> .edx:			dd	0							;  48:EDX
   180 00000238 00000000            <1> .ebx:			dd	0							;  52:EBX
   181 0000023C 00381000            <1> .esp:			dd	SP_TASK_1					;  56:ESP
   182 00000240 00000000            <1> .ebp:			dd	0							;  60:EBP
   183 00000244 00000000            <1> .esi:			dd	0							;  64:ESI
   184 00000248 00000000            <1> .edi:			dd	0							;  68:EDI
   185 0000024C 27000000            <1> .es:			dd	DS_TASK_1					;  72:ES
   186 00000250 1F000000            <1> .cs:			dd	CS_TASK_1					;  76:CS
   187 00000254 27000000            <1> .ss:			dd	DS_TASK_1					;  80:SS
   188 00000258 27000000            <1> .ds:			dd	DS_TASK_1					;  84:DS
   189 0000025C 27000000            <1> .fs:			dd	DS_TASK_1					;  88:FS
   190 00000260 27000000            <1> .gs:			dd	DS_TASK_1					;  92:GS
   191 00000264 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   192 00000268 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   193                              <1> 
   194                              <1> 
   195                              <1> ;************************************************************************
   196                              <1> ;	グローバルディスクリプタテーブル
   197                              <1> ;************************************************************************
   198 0000026C 0000000000000000    <1> GDT:			dq	0x0000000000000000			; NULL
   199 00000274 FFFF0000009ACF00    <1> .cs_kernel:		dq	0x00CF9A000000FFFF			; CODE 4G
   200 0000027C FFFF00000092CF00    <1> .ds_kernel:		dq	0x00CF92000000FFFF			; DATA 4G
   201 00000284 0000000000820000    <1> .ldt			dq	0x0000820000000000			; LDTディスクリプタ
   202 0000028C 6700000000890000    <1> .tss_0:			dq	0x0000890000000067			; TSSディスクリプタ
   203 00000294 6700000000890000    <1> .tss_1:			dq	0x0000890000000067			; TSSディスクリプタ
   204 0000029C 0000080004EC0000    <1> .call_gate:		dq	0x0000EC0400080000			; 386コールゲート(DPL=3, count=4, SEL=8)
   205                              <1> .end:
   206                              <1> 
   207                              <1> CS_KERNEL		equ	.cs_kernel	- GDT
   208                              <1> DS_KERNEL		equ	.ds_kernel	- GDT
   209                              <1> SS_LDT			equ	.ldt		- GDT
   210                              <1> SS_TASK_0		equ	.tss_0		- GDT
   211                              <1> SS_TASK_1		equ	.tss_1		- GDT
   212                              <1> SS_GATE_0		equ	.call_gate	- GDT
   213                              <1> 
   214 000002A4 3700                <1> GDTR:	dw 		GDT.end - GDT - 1
   215 000002A6 [6C020000]          <1> 		dd 		GDT
   216                              <1> 
   217                              <1> 
   218                              <1> ;************************************************************************
   219                              <1> ;	ローカルディスクリプタテーブル
   220                              <1> ;************************************************************************
   221 000002AA 0000000000000000    <1> LDT:			dq	0x0000000000000000			; NULL
   222 000002B2 FFFF0000009ACF00    <1> .cs_task_0:		dq	0x00CF9A000000FFFF			; CODE 4G
   223 000002BA FFFF00000092CF00    <1> .ds_task_0:		dq	0x00CF92000000FFFF			; DATA 4G
   224 000002C2 FFFF000000FACF00    <1> .cs_task_1:		dq	0x00CFFA000000FFFF			; CODE 4G
   225 000002CA FFFF000000F2CF00    <1> .ds_task_1:		dq	0x00CFF2000000FFFF			; DATA 4G
   226                              <1> .end:
   227                              <1> 
   228                              <1> CS_TASK_0		equ	(.cs_task_0 - LDT) | 4		; タスク0用CSセレクタ
   229                              <1> DS_TASK_0		equ	(.ds_task_0 - LDT) | 4		; タスク0用DSセレクタ
   230                              <1> CS_TASK_1		equ	(.cs_task_1 - LDT) | 4 | 3	; タスク1用CSセレクタ
   231                              <1> DS_TASK_1		equ	(.ds_task_1 - LDT) | 4 | 3	; タスク1用DSセレクタ
   232                              <1> 
   233                              <1> LDT_LIMIT		equ	.end		- LDT - 1
   234                              <1> 
   235                              <1> 
   135                                  %include	"modules/int_timer.s"
   136                              <1> ;************************************************************************
   137                              <1> ;	例外:タイマー
   138                              <1> ;************************************************************************
   139                              <1> int_timer:
   140                              <1> 		;---------------------------------------
   141                              <1> 		; 【レジスタの保存】
   142                              <1> 		;---------------------------------------
   143 000002D2 60                  <1> 		pusha
   144 000002D3 1E                  <1> 		push	ds
   145 000002D4 06                  <1> 		push	es
   146                              <1> 
   147                              <1> 		;---------------------------------------
   148                              <1> 		; データ用セグメントの設定
   149                              <1> 		;---------------------------------------
   150 000002D5 66B81000            <1> 		mov		ax, 0x0010						; 
   151 000002D9 8ED8                <1> 		mov		ds, ax							; 
   152 000002DB 8EC0                <1> 		mov		es, ax							; 
   153                              <1> 
   154                              <1> 		;---------------------------------------
   155                              <1> 		; TICK
   156                              <1> 		;---------------------------------------
   157 000002DD FF05[08030000]      <1> 		inc		dword [TIMER_COUNT]				; TIMER_COUNT++; // 割り込み回数の更新
   158                              <1> 
   159                              <1> 		;---------------------------------------
   160                              <1> 		; 割り込みフラグをクリア(EOI)
   161                              <1> 		;---------------------------------------
   162                              <1> 		outp	0x20, 0x20						; // マスタPIC:EOIコマンド
    69 000002E3 B020                <2>  mov al, %2
    70 000002E5 E620                <2>  out %1, al
   163                              <1> 
   164                              <1> 		;---------------------------------------
   165                              <1> 		; タスクの切り替え
   166                              <1> 		;---------------------------------------
   167 000002E7 660F00C8            <1> 		str		ax								; AX = TR; // 現在のタスクレジスタ
   168 000002EB 6683F820            <1> 		cmp		ax, SS_TASK_0					; case (AX)
   169 000002EF 7409                <1> 		je		.11L							; {
   170                              <1> 												;   default:
   171 000002F1 EA000000002000      <1> 		jmp		SS_TASK_0:0						;     // タスク0に切り替え
   172 000002F8 EB09                <1> 		jmp		.10E							;     break;
   173                              <1> 												;     
   174                              <1> .11L:											;   case SS_TASK_0:
   175 000002FA EA000000002800      <1> 		jmp		SS_TASK_1:0						;     // タスク1に切り替え
   176 00000301 EB00                <1> 		jmp		.10E							;     break;
   177                              <1> .10E:											; }
   178                              <1> 
   179                              <1> 		;---------------------------------------
   180                              <1> 		; 【レジスタの復帰】
   181                              <1> 		;---------------------------------------
   182 00000303 07                  <1> 		pop		es								; 
   183 00000304 1F                  <1> 		pop		ds								; 
   184 00000305 61                  <1> 		popa
   185                              <1> 
   186 00000306 CF                  <1> 		iret
   187                              <1> 
   188 00000307 00                  <1> ALIGN 4, db 0
   189 00000308 00000000            <1> TIMER_COUNT:	dd	0
   190                              <1> 
   136                                  %include	"tasks/task_1.s"
   137                              <1> ;************************************************************************
   138                              <1> ;	TASK-1
   139                              <1> ;************************************************************************
   140                              <1> task_1:
   141                              <1> 		;---------------------------------------
   142                              <1> 		; 文字列の表示
   143                              <1> 		;---------------------------------------
   144 0000030C 68[24030000]6A076A- <1> 		cdecl	SS_GATE_0:0, 63, 0, 0x07, .s0	; draw_str();
   144 00000314 006A3F9A0000000030- <1>
   144 0000031D 006683C410          <1>
   145                              <1> 
   146                              <1> .10L:											; while (;;)
   147                              <1> 												; {
   148                              <1> 		;---------------------------------------
   149                              <1> 		; 時刻の表示
   150                              <1> 		;---------------------------------------
   151                              <1> ;		mov		eax, [RTC_TIME]					;   // 時刻の取得
   152                              <1> ;		cdecl	draw_time, 72, 0, 0x0700, eax	;   // 時刻の表示
   153                              <1> 
   154 00000322 EBFE                <1> 		jmp		.10L							; }
   155                              <1> 
   156                              <1> 		;---------------------------------------
   157                              <1> 		; データ
   158                              <1> 		;---------------------------------------
   159 00000324 5461736B2D3100      <1> .s0		db	"Task-1", 0
   160                              <1> 
   137                                  
   138                                  ;************************************************************************
   139                                  ;	モジュール
   140                                  ;************************************************************************
   141                                  %include	"../modules/protect/vga.s"
   142                              <1> ;************************************************************************
   143                              <1> ;	読み込みプレーンの選択
   144                              <1> ;========================================================================
   145                              <1> ;■書式		: void vga_set_read_plane(plane);
   146                              <1> ;
   147                              <1> ;■引数
   148                              <1> ;	plane	: 読み込みプレーン
   149                              <1> ;
   150                              <1> ;■戻り値	: 無し
   151                              <1> ;************************************************************************
   152                              <1> vga_set_read_plane:
   153                              <1> 		;---------------------------------------
   154                              <1> 		; 【スタックフレームの構築】
   155                              <1> 		;---------------------------------------
   156                              <1> 												; EBP+ 8| プレーン（インデックス）
   157                              <1> 												; ------+----------------
   158 0000032B 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   159 0000032C 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   160                              <1> 												; ------+----------------
   161                              <1> 
   162                              <1> 		;---------------------------------------
   163                              <1> 		; 【レジスタの保存】
   164                              <1> 		;---------------------------------------
   165 0000032E 50                  <1> 		push	eax
   166 0000032F 52                  <1> 		push	edx
   167                              <1> 
   168                              <1> 		;---------------------------------------
   169                              <1> 		; 読み込みプレーンの選択
   170                              <1> 		;---------------------------------------
   171 00000330 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
   172 00000333 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
   173 00000336 B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
   174 00000338 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
   175 0000033C 66EF                <1> 		out		dx, ax							; // ポート出力
   176                              <1> 
   177                              <1> 		;---------------------------------------
   178                              <1> 		; 【レジスタの復帰】
   179                              <1> 		;---------------------------------------
   180 0000033E 5A                  <1> 		pop		edx
   181 0000033F 58                  <1> 		pop		eax
   182                              <1> 
   183                              <1> 		;---------------------------------------
   184                              <1> 		; 【スタックフレームの破棄】
   185                              <1> 		;---------------------------------------
   186 00000340 89EC                <1> 		mov		esp, ebp
   187 00000342 5D                  <1> 		pop		ebp
   188                              <1> 
   189 00000343 C3                  <1> 		ret
   190                              <1> 
   191                              <1> 
   192                              <1> ;************************************************************************
   193                              <1> ;	書き込みプレーンを選択
   194                              <1> ;========================================================================
   195                              <1> ;■書式		: void vga_set_write_plane(plane);
   196                              <1> ;
   197                              <1> ;■引数
   198                              <1> ;	plane	: 書き込みプレーン
   199                              <1> ;
   200                              <1> ;■戻り値	: 無し
   201                              <1> ;************************************************************************
   202                              <1> vga_set_write_plane:
   203                              <1> 		;---------------------------------------
   204                              <1> 		; 【スタックフレームの構築】
   205                              <1> 		;---------------------------------------
   206                              <1> 												; EBP+ 8| プレーン（ビット指定）
   207                              <1> 												; ------+----------------
   208 00000344 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   209 00000345 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   210                              <1> 												; ------+----------------
   211                              <1> 
   212                              <1> 		;---------------------------------------
   213                              <1> 		; 【レジスタの保存】
   214                              <1> 		;---------------------------------------
   215 00000347 50                  <1> 		push	eax
   216 00000348 52                  <1> 		push	edx
   217                              <1> 
   218                              <1> 		;---------------------------------------
   219                              <1> 		; 書き込みプレーンの選択
   220                              <1> 		;---------------------------------------
   221 00000349 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
   222 0000034C 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
   223 0000034F B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
   224 00000351 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
   225 00000355 66EF                <1> 		out		dx, ax							; // ポート出力
   226                              <1> 
   227                              <1> 		;---------------------------------------
   228                              <1> 		; 【レジスタの復帰】
   229                              <1> 		;---------------------------------------
   230 00000357 5A                  <1> 		pop		edx
   231 00000358 58                  <1> 		pop		eax
   232                              <1> 
   233                              <1> 		;---------------------------------------
   234                              <1> 		; 【スタックフレームの破棄】
   235                              <1> 		;---------------------------------------
   236 00000359 89EC                <1> 		mov		esp, ebp
   237 0000035B 5D                  <1> 		pop		ebp
   238                              <1> 
   239 0000035C C3                  <1> 		ret
   240                              <1> 
   241                              <1> 
   242                              <1> ;************************************************************************
   243                              <1> ;	フォントの書き込み
   244                              <1> ;========================================================================
   245                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   246                              <1> ;
   247                              <1> ;■引数
   248                              <1> ;	font	: FONTアドレス
   249                              <1> ;	vram	: VRAMアドレス
   250                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   251                              <1> ;	color	: 描画色
   252                              <1> ;
   253                              <1> ;■戻り値	: 無し
   254                              <1> ;************************************************************************
   255                              <1> vram_font_copy:
   256                              <1> 		;---------------------------------------
   257                              <1> 		; 【スタックフレームの構築】
   258                              <1> 		;---------------------------------------
   259                              <1> 												; EBP+20| 色（背景/前景色）
   260                              <1> 												; EBP+16| プレーン（ビット指定）
   261                              <1> 												; EBP+12| VRAMアドレス
   262                              <1> 												; EBP+ 8| FONTアドレス
   263                              <1> 												; ------+----------------
   264 0000035D 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   265 0000035E 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   266                              <1> 												; ------+----------------
   267                              <1> 
   268                              <1> 		;---------------------------------------
   269                              <1> 		; 【レジスタの保存】
   270                              <1> 		;---------------------------------------
   271 00000360 50                  <1> 		push	eax
   272 00000361 53                  <1> 		push	ebx
   273 00000362 51                  <1> 		push	ecx
   274 00000363 52                  <1> 		push	edx
   275 00000364 56                  <1> 		push	esi
   276 00000365 57                  <1> 		push	edi
   277                              <1> 
   278                              <1> 		;---------------------------------------
   279                              <1> 		; 【処理の開始】
   280                              <1> 		;---------------------------------------
   281 00000366 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   282 00000369 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   283 0000036C 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   284 00000370 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   285                              <1> 
   286 00000374 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   287 00000376 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   288 00000379 FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   289                              <1> 
   290 0000037B 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   291 0000037D 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   292 00000380 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   293                              <1> 
   294                              <1> 		;---------------------------------------
   295                              <1> 		; 16ドットフォントのコピー
   296                              <1> 		;---------------------------------------
   297 00000382 FC                  <1> 		cld										; DF  = 0; // アドレス加算
   298                              <1> 
   299 00000383 B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   300                              <1> .10L:											; do
   301                              <1> 												; {
   302                              <1> 		;---------------------------------------
   303                              <1> 		; フォントマスクの作成
   304                              <1> 		;---------------------------------------
   305 00000388 AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   306 00000389 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   307 0000038B F6D4                <1> 		not		ah								;   
   308                              <1> 
   309                              <1> 		;---------------------------------------
   310                              <1> 		; 前景色
   311                              <1> 		;---------------------------------------
   312 0000038D 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   313                              <1> 
   314                              <1> 		;---------------------------------------
   315                              <1> 		; 背景色
   316                              <1> 		;---------------------------------------
   317 0000038F F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   318 00000395 7404                <1> 		jz		.11F							;   {
   319 00000397 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   320 00000399 EB02                <1> 		jmp		.11E							;   }
   321                              <1> .11F:											;   else
   322                              <1> 												;   {
   323 0000039B 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   324                              <1> .11E:											;   }
   325                              <1> 
   326                              <1> 		;---------------------------------------
   327                              <1> 		; 前景色と背景色を合成
   328                              <1> 		;---------------------------------------
   329 0000039D 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   330                              <1> 
   331                              <1> 		;---------------------------------------
   332                              <1> 		; 新しい値を出力
   333                              <1> 		;---------------------------------------
   334 0000039F 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   335                              <1> 
   336 000003A1 83C750              <1> 		add		edi, 80							;   EDI += 80;
   337 000003A4 E2E2                <1> 		loop	.10L							; } while (--ECX);
   338                              <1> .10E:											; 
   339                              <1> 
   340                              <1> 		;---------------------------------------
   341                              <1> 		; 【レジスタの復帰】
   342                              <1> 		;---------------------------------------
   343 000003A6 5F                  <1> 		pop		edi
   344 000003A7 5E                  <1> 		pop		esi
   345 000003A8 5A                  <1> 		pop		edx
   346 000003A9 59                  <1> 		pop		ecx
   347 000003AA 5B                  <1> 		pop		ebx
   348 000003AB 58                  <1> 		pop		eax
   349                              <1> 
   350                              <1> 		;---------------------------------------
   351                              <1> 		; 【スタックフレームの破棄】
   352                              <1> 		;---------------------------------------
   353 000003AC 89EC                <1> 		mov		esp, ebp
   354 000003AE 5D                  <1> 		pop		ebp
   355                              <1> 
   356 000003AF C3                  <1> 		ret
   357                              <1> 
   358                              <1> 
   359                              <1> ;************************************************************************
   360                              <1> ;	ビットパターンの書き込み
   361                              <1> ;========================================================================
   362                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   363                              <1> ;
   364                              <1> ;■引数
   365                              <1> ;	bit		: 出力ビットパターン
   366                              <1> ;	vram	: VRAMアドレス
   367                              <1> ;	flag	: 1:セット, 0:クリア
   368                              <1> ;
   369                              <1> ;■戻り値	: 無し
   370                              <1> ;************************************************************************
   371                              <1> vram_bit_copy:
   372                              <1> 		;---------------------------------------
   373                              <1> 		; 【スタックフレームの構築】
   374                              <1> 		;---------------------------------------
   375                              <1> 												; EBP+20| 色（背景/前景色）
   376                              <1> 												; EBP+16| プレーン（ビット指定）
   377                              <1> 												; EBP+12| VRAMアドレス
   378                              <1> 												; EBP+ 8| 出力ビットパターン
   379                              <1> 												; ------+----------------
   380 000003B0 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   381 000003B1 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   382                              <1> 												; ------+----------------
   383                              <1> 
   384                              <1> 		;---------------------------------------
   385                              <1> 		; 【レジスタの保存】
   386                              <1> 		;---------------------------------------
   387 000003B3 50                  <1> 		push	eax
   388 000003B4 53                  <1> 		push	ebx
   389 000003B5 57                  <1> 		push	edi
   390                              <1> 
   391                              <1> 		;---------------------------------------
   392                              <1> 		; 【処理の開始】
   393                              <1> 		;---------------------------------------
   394 000003B6 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   395 000003B9 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   396 000003BD 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   397                              <1> 
   398 000003C1 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   399 000003C3 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   400 000003C6 FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   401                              <1> 
   402                              <1> 		;---------------------------------------
   403                              <1> 		; マスクデータの作成
   404                              <1> 		;---------------------------------------
   405 000003C8 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   406 000003CB 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   407 000003CD F6D4                <1> 		not		ah								; 
   408                              <1> 
   409                              <1> 		;---------------------------------------
   410                              <1> 		; 現在値の出力を取得
   411                              <1> 		;---------------------------------------
   412 000003CF 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   413 000003D1 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   414 000003D3 08E0                <1> 		or		al, ah							; AL |= AH;
   415                              <1> 
   416                              <1> 		;---------------------------------------
   417                              <1> 		; 新しい値を出力
   418                              <1> 		;---------------------------------------
   419 000003D5 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   420                              <1> 
   421                              <1> 		;---------------------------------------
   422                              <1> 		; 【レジスタの復帰】
   423                              <1> 		;---------------------------------------
   424 000003D7 5F                  <1> 		pop		edi
   425 000003D8 5B                  <1> 		pop		ebx
   426 000003D9 58                  <1> 		pop		eax
   427                              <1> 
   428                              <1> 		;---------------------------------------
   429                              <1> 		; 【スタックフレームの破棄】
   430                              <1> 		;---------------------------------------
   431 000003DA 89EC                <1> 		mov		esp, ebp
   432 000003DC 5D                  <1> 		pop		ebp
   433                              <1> 
   434 000003DD C3                  <1> 		ret
   142                                  %include	"../modules/protect/draw_char.s"
   143                              <1> ;************************************************************************
   144                              <1> ;	文字の表示
   145                              <1> ;------------------------------------------------------------------------
   146                              <1> ;	グラフィックスモードでテキストを表示
   147                              <1> ;========================================================================
   148                              <1> ;■書式		: void draw_char(col, row, color, ch);
   149                              <1> ;
   150                              <1> ;■引数
   151                              <1> ;	col		: 列（0～79）
   152                              <1> ;	row		: 行（0～29）
   153                              <1> ;	color	: 描画色
   154                              <1> ;	ch		: 文字
   155                              <1> ;
   156                              <1> ;■戻り値	: 無し
   157                              <1> ;************************************************************************
   158                              <1> draw_char:
   159                              <1> 		;---------------------------------------
   160                              <1> 		; 【スタックフレームの構築】
   161                              <1> 		;---------------------------------------
   162                              <1> 												; ------|--------
   163                              <1> 												; EBP+20| 文字
   164                              <1> 												; EBP+16| 色
   165                              <1> 												; EBP+12| Y（行）
   166                              <1> 												; EBP+ 8| X（列）
   167                              <1> 												; ------+----------------
   168 000003DE 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   169 000003DF 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   170                              <1> 												; ------+----------------
   171                              <1> 
   172                              <1> 		;---------------------------------------
   173                              <1> 		; 【レジスタの保存】
   174                              <1> 		;---------------------------------------
   175 000003E1 50                  <1> 		push	eax
   176 000003E2 53                  <1> 		push	ebx
   177 000003E3 51                  <1> 		push	ecx
   178 000003E4 52                  <1> 		push	edx
   179 000003E5 56                  <1> 		push	esi
   180 000003E6 57                  <1> 		push	edi
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; テストアンドセット
   184                              <1> 		;---------------------------------------
   185                              <1> %ifdef	USE_TEST_AND_SET
   186                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   187                              <1> %endif
   188                              <1> 
   189                              <1> 		;---------------------------------------
   190                              <1> 		; コピー元フォントアドレスを設定
   191                              <1> 		;---------------------------------------
   192 000003E7 0FB67514            <1> 		movzx	esi, byte [ebp +20]				; CL  = 文字コード;
   193 000003EB C1E604              <1> 		shl		esi, 4							; CL *= 16; // 1文字16バイト
   194 000003EE 0335[94010000]      <1> 		add		esi, [FONT_ADR]					; ESI = フォントアドレス;
   195                              <1> 
   196                              <1> 		;---------------------------------------
   197                              <1> 		; コピー先アドレスを取得
   198                              <1> 		; Adr = 0xA0000 + (640 / 8 * 16) * y + x
   199                              <1> 		;---------------------------------------
   200 000003F4 8B7D0C              <1> 		mov		edi, [ebp +12]					; Y（行）
   201 000003F7 C1E708              <1> 		shl		edi, 8							; EDI = Y * 256;
   202 000003FA 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA0000]	; EDI = Y *   4 + Y;
   203 00000401 037D08              <1> 		add		edi, [ebp + 8]					; X（列）
   204                              <1> 
   205                              <1> 		;---------------------------------------
   206                              <1> 		; 1文字分のフォントを出力
   207                              <1> 		;---------------------------------------
   208 00000404 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
   209                              <1> 
   210 00000408 6A03E81CFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
   210 00000411 C404                <1>
   211 00000413 6A08E82AFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
   211 0000041C C404                <1>
   212 0000041E 536A085756E835FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
   212 00000427 FF6683C410          <1>
   213                              <1> 
   214 0000042C 6A02E8F8FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
   214 00000435 C404                <1>
   215 00000437 6A04E806FFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
   215 00000440 C404                <1>
   216 00000442 536A045756E811FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
   216 0000044B FF6683C410          <1>
   217                              <1> 
   218 00000450 6A01E8D4FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
   218 00000459 C404                <1>
   219 0000045B 6A02E8E2FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
   219 00000464 C404                <1>
   220 00000466 536A025756E8EDFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
   220 0000046F FF6683C410          <1>
   221                              <1> 
   222 00000474 6A00E8B0FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
   222 0000047D C404                <1>
   223 0000047F 6A01E8BEFEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
   223 00000488 C404                <1>
   224 0000048A 536A015756E8C9FEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
   224 00000493 FF6683C410          <1>
   225                              <1> 
   226                              <1> %ifdef	USE_TEST_AND_SET
   227                              <1> 		;---------------------------------------
   228                              <1> 		; テストアンドセット
   229                              <1> 		;---------------------------------------
   230                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   231                              <1> %endif
   232                              <1> 
   233                              <1> 		;---------------------------------------
   234                              <1> 		; 【レジスタの復帰】
   235                              <1> 		;---------------------------------------
   236 00000498 5F                  <1> 		pop		edi
   237 00000499 5E                  <1> 		pop		esi
   238 0000049A 5A                  <1> 		pop		edx
   239 0000049B 59                  <1> 		pop		ecx
   240 0000049C 5B                  <1> 		pop		ebx
   241 0000049D 58                  <1> 		pop		eax
   242                              <1> 
   243                              <1> 		;---------------------------------------
   244                              <1> 		; 【スタックフレームの破棄】
   245                              <1> 		;---------------------------------------
   246 0000049E 89EC                <1> 		mov		esp, ebp
   247 000004A0 5D                  <1> 		pop		ebp
   248                              <1> 
   249 000004A1 C3                  <1> 		ret
   250                              <1> 
   251                              <1> %ifdef USE_TEST_AND_SET
   252                              <1> ALIGN 4, db 0
   253                              <1> IN_USE:	dd	0
   254                              <1> %endif
   255                              <1> 
   143                                  %include	"../modules/protect/draw_font.s"
   144                              <1> ;************************************************************************
   145                              <1> ;	フォント一覧を表示
   146                              <1> ;========================================================================
   147                              <1> ;■書式		: void draw_font(col, row);
   148                              <1> ;
   149                              <1> ;■引数
   150                              <1> ;	col		: 列
   151                              <1> ;	row		: 行
   152                              <1> ;
   153                              <1> ;■戻り値	: 無し
   154                              <1> ;************************************************************************
   155                              <1> draw_font:
   156                              <1> 		;---------------------------------------
   157                              <1> 		; 【スタックフレームの構築】
   158                              <1> 		;---------------------------------------
   159                              <1> 												; ------|--------
   160                              <1> 												; EBP+12| Y（行）
   161                              <1> 												; EBP+ 8| X（列）
   162                              <1> 												; ---------------
   163 000004A2 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   164 000004A3 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   165                              <1> 												; ---------------
   166                              <1> 
   167                              <1> 		;---------------------------------------
   168                              <1> 		; 【レジスタの保存】
   169                              <1> 		;---------------------------------------
   170 000004A5 50                  <1> 		push	eax
   171 000004A6 53                  <1> 		push	ebx
   172 000004A7 51                  <1> 		push	ecx
   173 000004A8 52                  <1> 		push	edx
   174 000004A9 56                  <1> 		push	esi
   175 000004AA 57                  <1> 		push	edi
   176                              <1> 
   177                              <1> 		;---------------------------------------
   178                              <1> 		; 表示位置
   179                              <1> 		;---------------------------------------
   180 000004AB 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   181 000004AE 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   182                              <1> 
   183                              <1> 		;---------------------------------------
   184                              <1> 		; フォント一覧を表示
   185                              <1> 		;---------------------------------------
   186 000004B1 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   187 000004B6 81F900010000        <1> .10L:	cmp		ecx, 256						;      ECX < 256;
   188 000004BC 731F                <1> 		jae		.10E							; 
   189                              <1> 												;      ECX++)
   190                              <1> 												; {
   191                              <1> 												;   // 桁位置の計算
   192 000004BE 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   193 000004C0 83E00F              <1> 		and		eax, 0x0F						;   EAX &= 0x0F
   194 000004C3 01F0                <1> 		add		eax, esi						;   EAX += X;
   195                              <1> 												;   
   196                              <1> 												;   // 行位置の計算
   197 000004C5 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   198 000004C7 C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
   199 000004CA 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   200                              <1> 
   201 000004CC 516A075350E808FFFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
   201 000004D5 FF6683C410          <1>
   202                              <1> 
   203 000004DA 41                  <1> 		inc		ecx								;   // for (... ECX++)
   204 000004DB EBD9                <1> 		jmp		.10L							; 
   205                              <1> .10E:											; }
   206                              <1> 
   207                              <1> 		;---------------------------------------
   208                              <1> 		; 【レジスタの復帰】
   209                              <1> 		;---------------------------------------
   210 000004DD 5F                  <1> 		pop		edi
   211 000004DE 5E                  <1> 		pop		esi
   212 000004DF 5A                  <1> 		pop		edx
   213 000004E0 59                  <1> 		pop		ecx
   214 000004E1 5B                  <1> 		pop		ebx
   215 000004E2 58                  <1> 		pop		eax
   216                              <1> 
   217                              <1> 		;---------------------------------------
   218                              <1> 		; 【スタックフレームの破棄】
   219                              <1> 		;---------------------------------------
   220 000004E3 89EC                <1> 		mov		esp, ebp
   221 000004E5 5D                  <1> 		pop		ebp
   222                              <1> 
   223 000004E6 C3                  <1> 		ret
   224                              <1> 
   144                                  %include	"../modules/protect/draw_str.s"
   145                              <1> ;************************************************************************
   146                              <1> ;	文字列の表示
   147                              <1> ;========================================================================
   148                              <1> ;■書式		: void draw_str(col, row, color, p);
   149                              <1> ;
   150                              <1> ;■引数
   151                              <1> ;	col		: 列
   152                              <1> ;	row		: 行
   153                              <1> ;	color	: 描画色
   154                              <1> ;	p		: 文字列のアドレス
   155                              <1> ;
   156                              <1> ;■戻り値	: 無し
   157                              <1> ;************************************************************************
   158                              <1> draw_str:
   159                              <1> 		;---------------------------------------
   160                              <1> 		; 【スタックフレームの構築】
   161                              <1> 		;---------------------------------------
   162                              <1> 												; ------|--------
   163                              <1> 												; EBP+20| *p（文字列のアドレス）
   164                              <1> 												; EBP+16| color（色）
   165                              <1> 												; EBP+12| row（行）
   166                              <1> 												; EBP+ 8| col（列）
   167                              <1> 												; ---------------
   168 000004E7 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   169 000004E8 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   170                              <1> 												; ---------------
   171                              <1> 
   172                              <1> 		;---------------------------------------
   173                              <1> 		; 【レジスタの保存】
   174                              <1> 		;---------------------------------------
   175 000004EA 50                  <1> 		push	eax
   176 000004EB 53                  <1> 		push	ebx
   177 000004EC 51                  <1> 		push	ecx
   178 000004ED 52                  <1> 		push	edx
   179 000004EE 56                  <1> 		push	esi
   180                              <1> 
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 文字列の表示
   183                              <1> 		;---------------------------------------
   184 000004EF 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
   185 000004F2 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
   186 000004F5 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
   187 000004F9 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
   188                              <1> 
   189 000004FC FC                  <1> 		cld										; DF = 0; // アドレス加算
   190                              <1> .10L:											; do
   191                              <1> 												; {
   192 000004FD AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
   193 000004FE 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   194 00000500 7425                <1> 		je		.10E							;     break;
   195                              <1> 
   196                              <1> 		;---------------------------------------
   197                              <1> 		; 1文字表示
   198                              <1> 		;---------------------------------------
   199                              <1> %ifdef	USE_SYSTEM_CALL
   200                              <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
   201                              <1> %else
   202 00000502 50535251E8D3FEFFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
   202 0000050B 6683C410            <1>
   203                              <1> %endif
   204                              <1> 
   205                              <1> 		; 次の文字の位置を調整
   206 0000050F 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
   207 00000510 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
   208 00000513 7C10                <1> 		jl		.12E							;   {
   209 00000515 B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
   210 0000051A 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
   211 0000051B 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
   212 0000051E 7C05                <1> 		jl		.12E							;     {
   213 00000520 BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
   214                              <1> 												;     }
   215                              <1> .12E:											;   }
   216 00000525 EBD6                <1> 		jmp		.10L							;   
   217                              <1> .10E:											; } while (1);
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 【レジスタの復帰】
   221                              <1> 		;---------------------------------------
   222 00000527 5E                  <1> 		pop		esi
   223 00000528 5A                  <1> 		pop		edx
   224 00000529 59                  <1> 		pop		ecx
   225 0000052A 5B                  <1> 		pop		ebx
   226 0000052B 58                  <1> 		pop		eax
   227                              <1> 
   228                              <1> 		;---------------------------------------
   229                              <1> 		; 【スタックフレームの破棄】
   230                              <1> 		;---------------------------------------
   231 0000052C 89EC                <1> 		mov		esp, ebp
   232 0000052E 5D                  <1> 		pop		ebp
   233                              <1> 
   234 0000052F C3                  <1> 		ret
   235                              <1> 
   145                                  %include	"../modules/protect/draw_color_bar.s"
   146                              <1> ;************************************************************************
   147                              <1> ;	カラーバーの表示
   148                              <1> ;========================================================================
   149                              <1> ;■書式		: void draw_color_bar(col, row);
   150                              <1> ;
   151                              <1> ;■引数
   152                              <1> ;	col		: 列
   153                              <1> ;	row		: 行
   154                              <1> ;
   155                              <1> ;■戻り値	: 無し
   156                              <1> ;************************************************************************
   157                              <1> draw_color_bar:
   158                              <1> 		;---------------------------------------
   159                              <1> 		; 【スタックフレームの構築】
   160                              <1> 		;---------------------------------------
   161                              <1> 												; ------|--------
   162                              <1> 												; EBP+ 8| X（列）
   163                              <1> 												; EBP+12| Y（行）
   164                              <1> 												; ---------------
   165 00000530 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   166 00000531 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   167                              <1> 												; ---------------
   168                              <1> 		;---------------------------------------
   169                              <1> 		; 【レジスタの保存】
   170                              <1> 		;---------------------------------------
   171 00000533 50                  <1> 		push	eax
   172 00000534 53                  <1> 		push	ebx
   173 00000535 51                  <1> 		push	ecx
   174 00000536 52                  <1> 		push	edx
   175 00000537 56                  <1> 		push	esi
   176 00000538 57                  <1> 		push	edi
   177                              <1> 
   178                              <1> 		;---------------------------------------
   179                              <1> 		; 表示位置
   180                              <1> 		;---------------------------------------
   181 00000539 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   182 0000053C 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   183                              <1> 
   184                              <1> 		;---------------------------------------
   185                              <1> 		; カラーバーを表示
   186                              <1> 		;---------------------------------------
   187 0000053F B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   188 00000544 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
   189 00000547 732E                <1> 		jae		.10E							; 
   190                              <1> 												;      ECX++)
   191                              <1> 												; {
   192                              <1> 												;   // 桁位置の計算
   193 00000549 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   194 0000054B 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
   195 0000054E C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
   196 00000551 01F0                <1> 		add		eax, esi						;   EAX += X;
   197                              <1> 												;   
   198                              <1> 												;   // 行位置の計算
   199 00000553 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   200 00000555 D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
   201 00000557 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   202                              <1> 												;   
   203                              <1> 												;   // 表示色の取得
   204 00000559 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
   205 0000055B D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
   206 0000055D 8B92[8A050000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
   207                              <1> 
   208 00000563 68[81050000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
   208 0000056B E877FFFFFF6683C410  <1>
   209                              <1> 
   210 00000574 41                  <1> 		inc		ecx								;   // for (... ECX++)
   211 00000575 EBCD                <1> 		jmp		.10L							; 
   212                              <1> .10E:											; }
   213                              <1> 
   214                              <1> 		;---------------------------------------
   215                              <1> 		; 【レジスタの復帰】
   216                              <1> 		;---------------------------------------
   217 00000577 5F                  <1> 		pop		edi
   218 00000578 5E                  <1> 		pop		esi
   219 00000579 5A                  <1> 		pop		edx
   220 0000057A 59                  <1> 		pop		ecx
   221 0000057B 5B                  <1> 		pop		ebx
   222 0000057C 58                  <1> 		pop		eax
   223                              <1> 
   224                              <1> 		;---------------------------------------
   225                              <1> 		; 【スタックフレームの破棄】
   226                              <1> 		;---------------------------------------
   227 0000057D 89EC                <1> 		mov		esp, ebp
   228 0000057F 5D                  <1> 		pop		ebp
   229                              <1> 
   230 00000580 C3                  <1> 		ret
   231                              <1> 
   232 00000581 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
   233                              <1> 
   234 0000058A 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
   235 0000058E 00010009            <1> 		dw	0x0100, 0x0900
   236 00000592 0002000A            <1> 		dw	0x0200, 0x0A00
   237 00000596 0003000B            <1> 		dw	0x0300, 0x0B00
   238 0000059A 0004000C            <1> 		dw	0x0400, 0x0C00
   239 0000059E 0005000D            <1> 		dw	0x0500, 0x0D00
   240 000005A2 0006000E            <1> 		dw	0x0600, 0x0E00
   241 000005A6 0007000F            <1> 		dw	0x0700, 0x0F00
   242                              <1> 
   146                                  %include	"../modules/protect/draw_pixel.s"
   147                              <1> ;************************************************************************
   148                              <1> ;	ピクセルの描画
   149                              <1> ;========================================================================
   150                              <1> ;■書式		: void draw_pixel(X, Y, color);
   151                              <1> ;
   152                              <1> ;■引数
   153                              <1> ;	X		: X座標
   154                              <1> ;	Y		: Y座標
   155                              <1> ;	color	: 描画色
   156                              <1> ;
   157                              <1> ;■戻り値	: 無し
   158                              <1> ;************************************************************************
   159                              <1> draw_pixel:
   160                              <1> 		;---------------------------------------
   161                              <1> 		; 【スタックフレームの構築】
   162                              <1> 		;---------------------------------------
   163                              <1> 												; ------|--------
   164                              <1> 												; EBP+16| 色
   165                              <1> 												; EBP+12| Y
   166                              <1> 												; EBP+ 8| X
   167                              <1> 												; ------|--------
   168 000005AA 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   169 000005AB 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   170                              <1> 												; ------+--------
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 【レジスタの保存】
   173                              <1> 		;---------------------------------------
   174 000005AD 50                  <1> 		push	eax
   175 000005AE 53                  <1> 		push	ebx
   176 000005AF 51                  <1> 		push	ecx
   177 000005B0 57                  <1> 		push	edi
   178                              <1> 
   179                              <1> 		;---------------------------------------
   180                              <1> 		; Y座標を80倍する（640/8）
   181                              <1> 		;---------------------------------------
   182 000005B1 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI  = Y座標
   183 000005B4 C1E704              <1> 		shl		edi, 4							; EDI *= 16;
   184 000005B7 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA_0000]	; EDI  = 0xA00000[EDI * 4 + EDI];
   185                              <1> 
   186                              <1> 		;---------------------------------------
   187                              <1> 		; X座標を1/8して加算
   188                              <1> 		;---------------------------------------
   189 000005BE 8B5D08              <1> 		mov		ebx, [ebp + 8]					; EBX  = X座標;
   190 000005C1 89D9                <1> 		mov		ecx, ebx						; ECX  = X座標;（一時保存）
   191 000005C3 C1EB03              <1> 		shr		ebx, 3							; EBX /= 8;
   192 000005C6 01DF                <1> 		add		edi, ebx						; EDI += EBX;
   193                              <1> 
   194                              <1> 		;---------------------------------------
   195                              <1> 		; X座標を8で割った余りからビット位置を計算
   196                              <1> 		; (0=0x80, 1=0x40,... 7=0x01)
   197                              <1> 		;---------------------------------------
   198 000005C8 83E107              <1> 		and		ecx, 0x07						; ECX = X & 0x07;
   199 000005CB BB80000000          <1> 		mov		ebx, 0x80						; EBX = 0x80;
   200 000005D0 D3EB                <1> 		shr		ebx, cl							; EBX >>= ECX;
   201                              <1> 
   202                              <1> 		;---------------------------------------
   203                              <1> 		; 色指定
   204                              <1> 		;---------------------------------------
   205 000005D2 8B4D10              <1> 		mov		ecx, [ebp +16]					; // 表示色
   206                              <1> 
   207                              <1> %ifdef	USE_TEST_AND_SET
   208                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   209                              <1> %endif
   210                              <1> 
   211                              <1> 		;---------------------------------------
   212                              <1> 		; プレーン毎に出力
   213                              <1> 		;---------------------------------------
   214 000005D5 6A03E84FFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 輝度(I)プレーンを選択
   214 000005DE C404                <1>
   215 000005E0 6A08E85DFDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 輝度(I)プレーンを選択
   215 000005E9 C404                <1>
   216 000005EB 516A085753E8BBFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
   216 000005F4 FF6683C410          <1>
   217                              <1> 
   218 000005F9 6A02E82BFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 赤(R)プレーンを選択
   218 00000602 C404                <1>
   219 00000604 6A04E839FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 赤(R)プレーンを選択
   219 0000060D C404                <1>
   220 0000060F 516A045753E897FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
   220 00000618 FF6683C410          <1>
   221                              <1> 
   222 0000061D 6A01E807FDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 緑(G)プレーンを選択
   222 00000626 C404                <1>
   223 00000628 6A02E815FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 緑(G)プレーンを選択
   223 00000631 C404                <1>
   224 00000633 516A025753E873FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
   224 0000063C FF6683C410          <1>
   225                              <1> 
   226 00000641 6A00E8E3FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 青(B)プレーンを選択
   226 0000064A C404                <1>
   227 0000064C 6A01E8F1FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 青(B)プレーンを選択
   227 00000655 C404                <1>
   228 00000657 516A015753E84FFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
   228 00000660 FF6683C410          <1>
   229                              <1> 
   230                              <1> 
   231                              <1> %ifdef	USE_TEST_AND_SET
   232                              <1> 		;---------------------------------------
   233                              <1> 		; テストアンドセット
   234                              <1> 		;---------------------------------------
   235                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   236                              <1> %endif
   237                              <1> 
   238                              <1> 		;---------------------------------------
   239                              <1> 		; 【レジスタの復帰】
   240                              <1> 		;---------------------------------------
   241 00000665 5F                  <1> 		pop		edi
   242 00000666 59                  <1> 		pop		ecx
   243 00000667 5B                  <1> 		pop		ebx
   244 00000668 58                  <1> 		pop		eax
   245                              <1> 
   246                              <1> 		;---------------------------------------
   247                              <1> 		; 【スタックフレームの破棄】
   248                              <1> 		;---------------------------------------
   249 00000669 89EC                <1> 		mov		esp, ebp
   250 0000066B 5D                  <1> 		pop		ebp
   251                              <1> 
   252 0000066C C3                  <1> 		ret
   253                              <1> 
   147                                  %include	"../modules/protect/draw_line.s"
   148                              <1> ;************************************************************************
   149                              <1> ;	直線の描画
   150                              <1> ;========================================================================
   151                              <1> ;■書式		: void draw_line(X0, Y0, X1, Y1, color);
   152                              <1> ;
   153                              <1> ;■引数
   154                              <1> ;	X0		: 始点のX座標
   155                              <1> ;	Y0		: 始点のY座標
   156                              <1> ;	X1		: 終点のX座標
   157                              <1> ;	Y1		: 終点のY座標
   158                              <1> ;	color	: 描画色
   159                              <1> ;
   160                              <1> ;■戻り値	: 無し
   161                              <1> ;************************************************************************
   162                              <1> draw_line:
   163                              <1> 		;---------------------------------------
   164                              <1> 		; 【スタックフレームの構築】
   165                              <1> 		;---------------------------------------
   166                              <1> 												; ---------------
   167                              <1> 												;    +24| 色
   168                              <1> 												;    +20| Y1
   169                              <1> 												;    +16| X1
   170                              <1> 												;    +12| Y0
   171                              <1> 												;    + 8| X0
   172                              <1> 												; ---------------
   173 0000066D 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   174 0000066E 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   175                              <1> 												; ---------------
   176 00000670 6A00                <1> 		push	dword 0							;    - 4| sum   = 0; // 相対軸の積算値
   177 00000672 6A00                <1> 		push	dword 0							;    - 8| x0    = 0; // X座標
   178 00000674 6A00                <1> 		push	dword 0							;    -12| dx    = 0; // X増分
   179 00000676 6A00                <1> 		push	dword 0							;    -16| inc_x = 0; // X座標増分(1 or -1)
   180 00000678 6A00                <1> 		push	dword 0							;    -20| y0    = 0; // Y座標
   181 0000067A 6A00                <1> 		push	dword 0							;    -24| dy    = 0; // Y増分
   182 0000067C 6A00                <1> 		push	dword 0							;    -28| inc_y = 0; // Y座標増分(1 or -1)
   183                              <1> 												; ------|--------
   184                              <1> 
   185                              <1> 		;---------------------------------------
   186                              <1> 		; 【レジスタの保存】
   187                              <1> 		;---------------------------------------
   188 0000067E 50                  <1> 		push	eax
   189 0000067F 53                  <1> 		push	ebx
   190 00000680 51                  <1> 		push	ecx
   191 00000681 52                  <1> 		push	edx
   192 00000682 56                  <1> 		push	esi
   193 00000683 57                  <1> 		push	edi
   194                              <1> 
   195                              <1> 		;---------------------------------------
   196                              <1> 		; 幅を計算（X軸）
   197                              <1> 		;---------------------------------------
   198 00000684 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   199 00000687 8B5D10              <1> 		mov		ebx, [ebp +16]					; EBX = X1;
   200 0000068A 29C3                <1> 		sub		ebx, eax						; EBX = X1 - X0; // 幅
   201 0000068C 7D09                <1> 		jge		.10F							; if (幅 < 0)
   202                              <1> 												; {
   203 0000068E F7DB                <1> 		neg		ebx								;   幅   *= -1;
   204 00000690 BEFFFFFFFF          <1> 		mov		esi, -1							;   // X座標の増分
   205 00000695 EB05                <1> 		jmp		.10E							; }
   206                              <1> .10F:											; else
   207                              <1> 												; {
   208 00000697 BE01000000          <1> 		mov		esi, 1							;   // X座標の増分
   209                              <1> .10E:											; }
   210                              <1> 
   211                              <1> 		;---------------------------------------
   212                              <1> 		; 高さを計算（Y軸）
   213                              <1> 		;---------------------------------------
   214 0000069C 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX = Y0
   215 0000069F 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1
   216 000006A2 29CA                <1> 		sub		edx, ecx						; EDX = Y1 - Y0; // 高さ
   217 000006A4 7D09                <1> 		jge		.20F							; if (高さ < 0)
   218                              <1> 												; {
   219 000006A6 F7DA                <1> 		neg		edx								;   高さ *= -1;
   220 000006A8 BFFFFFFFFF          <1> 		mov		edi, -1							;   // Y座標の増分
   221 000006AD EB05                <1> 		jmp		.20E							; }
   222                              <1> .20F:											; else
   223                              <1> 												; {
   224 000006AF BF01000000          <1> 		mov		edi, 1							;   // Y座標の増分
   225                              <1> .20E:											; }
   226                              <1> 
   227                              <1> 		;---------------------------------------
   228                              <1> 		; X軸
   229                              <1> 		;---------------------------------------
   230 000006B4 8945F8              <1> 		mov		[ebp - 8], eax					;   // X軸:開始座標
   231 000006B7 895DF4              <1> 		mov		[ebp -12], ebx					;   // X軸:描画幅
   232 000006BA 8975F0              <1> 		mov		[ebp -16], esi					;   // X軸:増分(基準軸：1 or -1)
   233                              <1> 
   234                              <1> 		;---------------------------------------
   235                              <1> 		; Y軸
   236                              <1> 		;---------------------------------------
   237 000006BD 894DEC              <1> 		mov		[ebp -20], ecx					;   // Y軸:開始座標
   238 000006C0 8955E8              <1> 		mov		[ebp -24], edx					;   // Y軸:描画幅
   239 000006C3 897DE4              <1> 		mov		[ebp -28], edi					;   // Y軸:増分(基準軸：1 or -1)
   240                              <1> 
   241                              <1> 		;---------------------------------------
   242                              <1> 		; 基準軸を決める
   243                              <1> 		;---------------------------------------
   244 000006C6 39D3                <1> 		cmp		ebx, edx						; if (幅 <= 高さ)
   245 000006C8 7F08                <1> 		jg		.22F							; {
   246                              <1> 												;   
   247 000006CA 8D75EC              <1> 		lea		esi, [ebp -20]					;   // Y軸が基準軸
   248 000006CD 8D7DF8              <1> 		lea		edi, [ebp - 8]					;   // X軸が相対軸
   249                              <1> 												;   
   250 000006D0 EB06                <1> 		jmp		.22E							; }
   251                              <1> .22F:											; else
   252                              <1> 												; {
   253 000006D2 8D75F8              <1> 		lea		esi, [ebp - 8]					;   // X軸が基準軸
   254 000006D5 8D7DEC              <1> 		lea		edi, [ebp -20]					;   // Y軸が相対軸
   255                              <1> .22E:											; }
   256                              <1> 
   257                              <1> 		;---------------------------------------
   258                              <1> 		; 繰り返し回数(基準軸のドット数)
   259                              <1> 		;---------------------------------------
   260 000006D8 8B4EFC              <1> 		mov		ecx, [esi - 4]					; ECX = 基準軸描画幅;
   261 000006DB 83F900              <1> 		cmp		ecx, 0							; if (0 == ECX)
   262 000006DE 7505                <1> 		jnz		.30E							; {
   263 000006E0 B901000000          <1> 		mov		ecx, 1							;   ECX = 1;
   264                              <1> .30E:											; }
   265                              <1> 
   266                              <1> 		;---------------------------------------
   267                              <1> 		; 線を描画
   268                              <1> 		;---------------------------------------
   269                              <1> .50L:											; do
   270                              <1> 												; {
   271                              <1> %ifdef	USE_SYSTEM_CALL
   272                              <1> 		mov		eax, ecx						;   // 繰り返し回数を保存
   273                              <1> 
   274                              <1> 		mov		ebx, [ebp +24]					;   EBX = 表示色;
   275                              <1> 		mov		ecx, [ebp - 8]					;   ECX = X座標;
   276                              <1> 		mov		edx, [ebp -20]					;   EDX = Y座標;
   277                              <1> 		int		0x82							;   sys_call(1, X, Y, 色, 文字); BX(C), CX(X), DX(Y)
   278                              <1> 
   279                              <1> 		mov		ecx, eax
   280                              <1> %else
   281 000006E5 FF7518FF75ECFF75F8- <1> 		cdecl	draw_pixel, dword [ebp - 8], 							dword [ebp -20], 							dword [ebp +24]		;   // 点の描画
   281 000006EE E8B7FEFFFF6683C40C  <1>
   284                              <1> %endif
   285                              <1> 												;   // 基準軸を更新(1ドット分)
   286 000006F7 8B46F8              <1> 		mov		eax, [esi - 8]					;   EAX = 基準軸増分(1 or -1);
   287 000006FA 0106                <1> 		add		[esi - 0], eax					;   
   288                              <1> 
   289                              <1> 												;   // 相対軸を更新
   290 000006FC 8B45FC              <1> 		mov		eax, [ebp - 4]					;   EAX  = sum; // 相対軸の積算値;
   291 000006FF 0347FC              <1> 		add		eax, [edi - 4]					;   EAX += dy;  // 増分(相対軸の描画幅)
   292 00000702 8B5EFC              <1> 		mov		ebx, [esi - 4]					;   EBX  = dx;  // 増分(基準軸の描画幅)
   293                              <1> 
   294 00000705 39D8                <1> 		cmp		eax, ebx						;   if (積算値 <= 相対軸の増分)
   295 00000707 7C07                <1> 		jl		.52E							;   {
   296 00000709 29D8                <1> 		sub		eax, ebx						;     EAX -= EBX; // 積算値から相対軸の増分を減算
   297                              <1> 												;     
   298                              <1> 												;     // 相対軸の座標を更新(1ドット分)
   299 0000070B 8B5FF8              <1> 		mov		ebx, [edi - 8]					;     EBX =  相対軸増分;
   300 0000070E 011F                <1> 		add		[edi - 0], ebx					;     
   301                              <1> .52E:											;   }
   302 00000710 8945FC              <1> 		mov		[ebp - 4], eax					;   // 積算値を更新
   303                              <1> 												;   
   304 00000713 E2D0                <1> 		loop	.50L							;   
   305                              <1> .50E:											; } while (ループ回数--);
   306                              <1> 
   307                              <1> 		;---------------------------------------
   308                              <1> 		; 【レジスタの復帰】
   309                              <1> 		;---------------------------------------
   310 00000715 5F                  <1> 		pop		edi
   311 00000716 5E                  <1> 		pop		esi
   312 00000717 5A                  <1> 		pop		edx
   313 00000718 59                  <1> 		pop		ecx
   314 00000719 5B                  <1> 		pop		ebx
   315 0000071A 58                  <1> 		pop		eax
   316                              <1> 
   317                              <1> 		;---------------------------------------
   318                              <1> 		; 【スタックフレームの破棄】
   319                              <1> 		;---------------------------------------
   320 0000071B 89EC                <1> 		mov		esp, ebp
   321 0000071D 5D                  <1> 		pop		ebp
   322                              <1> 
   323 0000071E C3                  <1> 		ret
   324                              <1> 
   148                                  %include	"../modules/protect/draw_rect.s"
   149                              <1> ;************************************************************************
   150                              <1> ;	矩形の描画
   151                              <1> ;========================================================================
   152                              <1> ;■書式		: void draw_rect(X0, Y0, X1, Y1, color);
   153                              <1> ;
   154                              <1> ;■引数
   155                              <1> ;	X0		: 始点のX座標
   156                              <1> ;	Y0		: 始点のY座標
   157                              <1> ;	X1		: 終点のX座標
   158                              <1> ;	Y1		: 終点のY座標
   159                              <1> ;	color	: 描画色
   160                              <1> ;
   161                              <1> ;■戻り値	: 無し
   162                              <1> ;************************************************************************
   163                              <1> draw_rect:
   164                              <1> 		;---------------------------------------
   165                              <1> 		; 【スタックフレームの構築】
   166                              <1> 		;---------------------------------------
   167                              <1> 												; ------|--------
   168                              <1> 												; EBP+24| 色
   169                              <1> 												; EBP+20| Y1
   170                              <1> 												; EBP+16| X1
   171                              <1> 												; EBP+12| Y0
   172                              <1> 												; EBP+ 8| X0
   173                              <1> 												; ---------------
   174 0000071F 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   175 00000720 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   176                              <1> 												; ------|--------
   177                              <1> 
   178                              <1> 		;---------------------------------------
   179                              <1> 		; 【レジスタの保存】
   180                              <1> 		;---------------------------------------
   181 00000722 50                  <1> 		push		eax
   182 00000723 53                  <1> 		push		ebx
   183 00000724 51                  <1> 		push		ecx
   184 00000725 52                  <1> 		push		edx
   185 00000726 56                  <1> 		push		esi
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 矩形を描画
   189                              <1> 		;---------------------------------------
   190 00000727 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   191 0000072A 8B5D0C              <1> 		mov		ebx, [ebp +12]					; EBX = Y0;
   192 0000072D 8B4D10              <1> 		mov		ecx, [ebp +16]					; ECX = X1;
   193 00000730 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1;
   194 00000733 8B7518              <1> 		mov		esi, [ebp +24]					; ESI = 色;
   195                              <1> 
   196                              <1> 		;---------------------------------------
   197                              <1> 		; 座標軸の大小を確定
   198                              <1> 		;---------------------------------------
   199 00000736 39C8                <1> 		cmp		eax, ecx						; if (X1 < X0)
   200 00000738 7C01                <1> 		jl		.10E							; {
   201 0000073A 91                  <1> 		xchg	eax, ecx						;   X0とX1を入れ替える;
   202                              <1> .10E:											; }
   203                              <1> 
   204 0000073B 39D3                <1> 		cmp		ebx, edx						; if (Y1 < Y0)
   205 0000073D 7C02                <1> 		jl		.20E							; {
   206 0000073F 87DA                <1> 		xchg	ebx, edx						;   Y0とY1を入れ替える;
   207                              <1> .20E:											; }
   208                              <1> 
   209                              <1> 		;---------------------------------------
   210                              <1> 		; 矩形を描画
   211                              <1> 		;---------------------------------------
   212 00000741 5653515350E822FFFF- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, esi	; 上線
   212 0000074A FF6683C414          <1>
   213 0000074F 5652505350E814FFFF- <1> 		cdecl	draw_line, eax, ebx, eax, edx, esi	; 左線
   213 00000758 FF6683C414          <1>
   214                              <1> 
   215 0000075D 4A                  <1> 		dec		edx									; EDX--; // 下線は1ドット上げる
   216 0000075E 5652515250E805FFFF- <1> 		cdecl	draw_line, eax, edx, ecx, edx, esi	; 下線
   216 00000767 FF6683C414          <1>
   217 0000076C 42                  <1> 		inc		edx
   218                              <1> 
   219 0000076D 49                  <1> 		dec		ecx									; ECX--; // 右線は1ドット左に移動
   220 0000076E 5652515351E8F5FEFF- <1> 		cdecl	draw_line, ecx, ebx, ecx, edx, esi	; 右線
   220 00000777 FF6683C414          <1>
   221                              <1> 
   222                              <1> 		;---------------------------------------
   223                              <1> 		; 【レジスタの復帰】
   224                              <1> 		;---------------------------------------
   225 0000077C 5E                  <1> 		pop		esi
   226 0000077D 5A                  <1> 		pop		edx
   227 0000077E 59                  <1> 		pop		ecx
   228 0000077F 5B                  <1> 		pop		ebx
   229 00000780 58                  <1> 		pop		eax
   230                              <1> 
   231                              <1> 		;---------------------------------------
   232                              <1> 		; 【スタックフレームの破棄】
   233                              <1> 		;---------------------------------------
   234 00000781 89EC                <1> 		mov		esp, ebp
   235 00000783 5D                  <1> 		pop		ebp
   236                              <1> 
   237 00000784 C3                  <1> 		ret
   149                                  %include	"../modules/protect/itoa.s"
   150                              <1> ;************************************************************************
   151                              <1> ;	数値を文字に変換
   152                              <1> ;========================================================================
   153                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
   154                              <1> ;
   155                              <1> ;■引数
   156                              <1> ;	num		: 変換する数値
   157                              <1> ;	buff	: 保存先バッファアドレス
   158                              <1> ;	size	: 保存先バッファサイズ
   159                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
   160                              <1> ;	flags	: フラグ
   161                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
   162                              <1> ;			:      : 0=空白を' '（スペース）で埋める
   163                              <1> ;			:   B1 : 1=＋/-符号を表示する
   164                              <1> ;			:      : 0=＋/-符号を表示しない
   165                              <1> ;			:   B0 : 1=符号付き正数として扱う
   166                              <1> ;			:      : 0=符号無し正数として扱う
   167                              <1> ;
   168                              <1> ;■戻り値	: 無し
   169                              <1> ;************************************************************************
   170                              <1> itoa:
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 【スタックフレームの構築】
   173                              <1> 		;---------------------------------------
   174                              <1> 												; ------|--------
   175                              <1> 												;    +24| フラグ
   176                              <1> 												;    +20| 基数
   177                              <1> 												;    +16| バッファサイズ
   178                              <1> 												;    +12| バッファアドレス
   179                              <1> 												;    + 8| 数値
   180                              <1> 												; ------|--------
   181                              <1> 												;    + 4| EIP（戻り番地）
   182 00000785 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   183 00000786 89E5                <1> 		mov		ebp, esp						; ------+--------
   184                              <1> 
   185                              <1> 		;---------------------------------------
   186                              <1> 		; 【レジスタの保存】
   187                              <1> 		;---------------------------------------
   188 00000788 50                  <1> 		push	eax
   189 00000789 53                  <1> 		push	ebx
   190 0000078A 51                  <1> 		push	ecx
   191 0000078B 52                  <1> 		push	edx
   192 0000078C 56                  <1> 		push	esi
   193 0000078D 57                  <1> 		push	edi
   194                              <1> 
   195                              <1> 		;---------------------------------------
   196                              <1> 		; 引数を取得
   197                              <1> 		;---------------------------------------
   198 0000078E 8B4508              <1> 		mov		eax, [ebp + 8]					; val  = 数値;
   199 00000791 8B750C              <1> 		mov		esi, [ebp +12]					; dst  = バッファアドレス;
   200 00000794 8B4D10              <1> 		mov		ecx, [ebp +16]					; size = 残りバッファサイズ;
   201                              <1> 
   202 00000797 89F7                <1> 		mov		edi, esi						; // バッファの最後尾
   203 00000799 01CF                <1> 		add		edi, ecx						; dst  = &dst[size - 1];
   204 0000079B 4F                  <1> 		dec		edi								; 
   205                              <1> 
   206 0000079C 8B5D18              <1> 		mov		ebx, [ebp +24]					; flags = オプション;
   207                              <1> 
   208                              <1> 		;---------------------------------------
   209                              <1> 		; 符号付き判定
   210                              <1> 		;---------------------------------------
   211 0000079F F7C301000000        <1> 		test	ebx, 0b0001						; if (flags & 0x01)// 符号付き
   212 000007A5 7408                <1> .10Q:	je		.10E							; {
   213 000007A7 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   214 000007AA 7D03                <1> .12Q:	jge		.12E							;   {
   215 000007AC 83CB02              <1> 		or		ebx, 0b0010						;     flags |=  2; // 符号表示
   216                              <1> .12E:											;   }
   217                              <1> .10E:											; }
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 符号出力判定
   221                              <1> 		;---------------------------------------
   222 000007AF F7C302000000        <1> 		test	ebx, 0b0010						; if (flags & 0x02)// 符号出力判定
   223 000007B5 7410                <1> .20Q:	je		.20E							; {
   224 000007B7 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   225 000007BA 7D07                <1> .22Q:	jge		.22F							;   {
   226 000007BC F7D8                <1> 		neg		eax								;     val *= -1;   // 符号反転
   227 000007BE C6062D              <1> 		mov		[esi], byte '-'					;     *dst = '-';  // 符号表示
   228 000007C1 EB03                <1> 		jmp		.22E							;   }
   229                              <1> .22F:											;   else
   230                              <1> 												;   {
   231 000007C3 C6062B              <1> 		mov		[esi], byte '+'					;     *dst = '+';  // 符号表示
   232                              <1> .22E:											;   }
   233 000007C6 49                  <1> 		dec		ecx								;   size--;        // 残りバッファサイズの減算
   234                              <1> .20E:											; }
   235                              <1> 
   236                              <1> 		;---------------------------------------
   237                              <1> 		; ASCII変換
   238                              <1> 		;---------------------------------------
   239 000007C7 8B5D14              <1> 		mov		ebx, [ebp +20]					; BX = 基数;
   240                              <1> .30L:											; do
   241                              <1> 												; {
   242 000007CA BA00000000          <1> 		mov		edx, 0							;   
   243 000007CF F7F3                <1> 		div		ebx								;   DX = DX:AX % 基数;
   244                              <1> 												;   AX = DX:AX / 基数;
   245                              <1> 												;   
   246 000007D1 89D6                <1> 		mov		esi, edx						;   // テーブル参照
   247 000007D3 8A96[FE070000]      <1> 		mov		dl, byte [.ascii + esi]			;   DL = ASCII[DX];
   248                              <1> 												;   
   249 000007D9 8817                <1> 		mov		[edi], dl						;   *dst = DL;
   250 000007DB 4F                  <1> 		dec		edi								;   dst--;
   251                              <1> 												;   
   252 000007DC 83F800              <1> 		cmp		eax, 0							;   
   253 000007DF E0E9                <1> 		loopnz	.30L							; } while (AX);
   254                              <1> .30E:
   255                              <1> 
   256                              <1> 		;---------------------------------------
   257                              <1> 		; 空欄を埋める
   258                              <1> 		;---------------------------------------
   259 000007E1 83F900              <1> 		cmp		ecx, 0							; if (size)
   260 000007E4 740E                <1> .40Q:	je		.40E							; {
   261 000007E6 B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   262 000007E8 66837D1804          <1> 		cmp		[ebp +24], word 0b0100			;   if (flags & 0x04)
   263 000007ED 7502                <1> .42Q:	jne		.42E							;   {
   264 000007EF B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   265                              <1> .42E:											;   }
   266 000007F1 FD                  <1> 		std										;   // DF = 1（-方向）
   267 000007F2 F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   268                              <1> .40E:											; }
   269                              <1> 
   270                              <1> 		;---------------------------------------
   271                              <1> 		; 【レジスタの復帰】
   272                              <1> 		;---------------------------------------
   273 000007F4 5F                  <1> 		pop		edi
   274 000007F5 5E                  <1> 		pop		esi
   275 000007F6 5A                  <1> 		pop		edx
   276 000007F7 59                  <1> 		pop		ecx
   277 000007F8 5B                  <1> 		pop		ebx
   278 000007F9 58                  <1> 		pop		eax
   279                              <1> 
   280                              <1> 		;---------------------------------------
   281                              <1> 		; 【スタックフレームの破棄】
   282                              <1> 		;---------------------------------------
   283 000007FA 89EC                <1> 		mov		esp, ebp
   284 000007FC 5D                  <1> 		pop		ebp
   285                              <1> 
   286 000007FD C3                  <1> 		ret
   287                              <1> 
   288 000007FE 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   288 00000807 39414243444546      <1>
   289                              <1> 
   150                                  %include	"../modules/protect/rtc.s"
   151                              <1> ;************************************************************************
   152                              <1> ;	RTCから時刻データを取得する
   153                              <1> ;========================================================================
   154                              <1> ;■書式		: DWORD rtc_get_time(dst);
   155                              <1> ;
   156                              <1> ;■引数
   157                              <1> ;	dst		: 保存先アドレス
   158                              <1> ;
   159                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   160                              <1> ;************************************************************************
   161                              <1> rtc_get_time:
   162                              <1> 		;---------------------------------------
   163                              <1> 		; 【スタックフレームの構築】
   164                              <1> 		;---------------------------------------
   165                              <1> 												; ------|--------
   166                              <1> 												; EBP+ 8| 保存先アドレス
   167                              <1> 												; ---------------
   168 0000080E 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   169 0000080F 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   170                              <1> 												; ---------------
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 【レジスタの保存】
   173                              <1> 		;---------------------------------------
   174 00000811 53                  <1> 		push	ebx
   175                              <1> 
   176                              <1> 		;---------------------------------------
   177                              <1> 		; RTCから時刻を取得
   178                              <1> 		;---------------------------------------
   179 00000812 B00A                <1> 		mov		al, 0x0A						; // レジスタA
   180 00000814 E670                <1> 		out		0x70, al						; outp(0x70, AL);
   181 00000816 E471                <1> 		in		al, 0x71						; AL = レジスタA;
   182 00000818 A880                <1> 		test	al, 0x80						; if (DM & UIP) // 更新中
   183 0000081A 7407                <1> 		je		.10F							; {
   184 0000081C B801000000          <1> 		mov		eax, 1							;   ret = 1; // データ更新中
   185 00000821 EB27                <1> 		jmp		.10E							; }
   186                              <1> .10F:											; else
   187                              <1> 												; {
   188                              <1> 												;   // RAM[0x04]:時
   189 00000823 B004                <1> 		mov		al, 0x04						;   AL = 0x04;
   190 00000825 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   191 00000827 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 時データ
   192                              <1> 												;   
   193 00000829 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   194                              <1> 												;   
   195                              <1> 												;   // RAM[0x02]:分
   196 0000082C B002                <1> 		mov		al, 0x02						;   AL = 0x02;
   197 0000082E E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   198 00000830 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 分データ
   199                              <1> 												;   
   200 00000832 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   201                              <1> 												;   
   202                              <1> 												;   // RAM[0x00]:秒
   203 00000835 B000                <1> 		mov		al, 0x00						;   AL = 0x00;
   204 00000837 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   205 00000839 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 秒データ
   206                              <1> 												;   
   207 0000083B 25FFFFFF00          <1> 		and		eax, 0x00_FF_FF_FF				;   // 下位3バイトのみ有効
   208                              <1> 												;   
   209 00000840 8B5D08              <1> 		mov		ebx, [ebp + 8]					;   dst = 保存先;
   210 00000843 8903                <1> 		mov		[ebx], eax						;   [dst] = 時刻;
   211                              <1> 												;   
   212 00000845 B800000000          <1> 		mov		eax, 0							;   ret = 0; // 正常終了
   213                              <1> .10E:											; }
   214                              <1> 
   215                              <1> 		;---------------------------------------
   216                              <1> 		; 【レジスタの復帰】
   217                              <1> 		;---------------------------------------
   218 0000084A 5B                  <1> 		pop		ebx
   219                              <1> 
   220                              <1> 		;---------------------------------------
   221                              <1> 		; 【スタックフレームの破棄】
   222                              <1> 		;---------------------------------------
   223 0000084B 89EC                <1> 		mov		esp, ebp
   224 0000084D 5D                  <1> 		pop		ebp
   225                              <1> 
   226 0000084E C3                  <1> 		ret
   227                              <1> 
   151                                  %include	"../modules/protect/draw_time.s"
   152                              <1> ;************************************************************************
   153                              <1> ;	時刻の表示
   154                              <1> ;========================================================================
   155                              <1> ;■書式		: void draw_time(col, row, color, time);
   156                              <1> ;
   157                              <1> ;■引数
   158                              <1> ;	col		: 列
   159                              <1> ;	row		: 行
   160                              <1> ;	color	: 描画色
   161                              <1> ;	time	: 時刻データ
   162                              <1> ;
   163                              <1> ;■戻り値	: 無し
   164                              <1> ;************************************************************************
   165                              <1> draw_time:
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 【スタックフレームの構築】
   168                              <1> 		;---------------------------------------
   169                              <1> 												; ------|--------
   170                              <1> 												; EBP+20| 時刻データ
   171                              <1> 												; EBP+16| 色
   172                              <1> 												; EBP+12| Y（行）
   173                              <1> 												; EBP+ 8| X（列）
   174                              <1> 												; ---------------
   175 0000084F 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   176 00000850 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   177                              <1> 												; ---------------
   178                              <1> 		;---------------------------------------
   179                              <1> 		; 【レジスタの保存】
   180                              <1> 		;---------------------------------------
   181 00000852 50                  <1> 		push	eax
   182 00000853 53                  <1> 		push	ebx
   183                              <1> 
   184                              <1> 		;---------------------------------------
   185                              <1> 		; 
   186                              <1> 		;---------------------------------------
   187 00000854 8B4514              <1> 		mov		eax, [ebp +20]					; EAX = 時刻データ;
   188 00000857 3B05[D4080000]      <1> 		cmp		eax, [.last]					; if (今回 != 前回)
   189 0000085D 7467                <1> 		je		.10E							; {
   190                              <1> 												;   
   191 0000085F A3[D4080000]        <1> 		mov		[.last], eax					;   // 前回の時刻値を更新
   192                              <1> 												;   
   193 00000864 BB00000000          <1> 		mov		ebx, 0							;   EBX = 0;
   194 00000869 88C3                <1> 		mov		bl, al							;   EBX = 秒;
   195 0000086B 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .sec, 2, 16, 0b0100	;   // 時刻を文字列に変換
   195 00000872 [E2080000]53E809FF- <1>
   195 0000087A FFFF6683C414        <1>
   196                              <1> 
   197 00000880 88E3                <1> 		mov		bl, ah							;   EBX = 分;
   198 00000882 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .min, 2, 16, 0b0100	;   // 時刻を文字列に変換
   198 00000889 [DF080000]53E8F2FE- <1>
   198 00000891 FFFF6683C414        <1>
   199                              <1> 
   200 00000897 C1E810              <1> 		shr		eax, 16							;   EBX = 時;
   201 0000089A 6A046A106A0268-     <1> 		cdecl	itoa, eax, .hour, 2, 16, 0b0100	;   // 時刻を文字列に変換
   201 000008A1 [DC080000]50E8DAFE- <1>
   201 000008A9 FFFF6683C414        <1>
   202                              <1> 
   203                              <1> 												;   // 時刻を表示
   204 000008AF 68[DC080000]FF7510- <1> 		cdecl	draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
   204 000008B7 FF750CFF7508E825FC- <1>
   204 000008C0 FFFF6683C410        <1>
   205                              <1> 												;     
   206                              <1> 												;   }
   207                              <1> .10E:											; }
   208                              <1> 
   209                              <1> 		;---------------------------------------
   210                              <1> 		; 【レジスタの復帰】
   211                              <1> 		;---------------------------------------
   212 000008C6 5B                  <1> 		pop		ebx
   213 000008C7 58                  <1> 		pop		eax
   214                              <1> 
   215                              <1> 		;---------------------------------------
   216                              <1> 		; 【スタックフレームの破棄】
   217                              <1> 		;---------------------------------------
   218 000008C8 89EC                <1> 		mov		esp, ebp
   219 000008CA 5D                  <1> 		pop		ebp
   220                              <1> 
   221 000008CB C3                  <1> 		ret
   222                              <1> 
   223                              <1> ALIGN 2, db 0
   224 000008CC 0000000000000000    <1> .temp:	dq	0
   225 000008D4 0000000000000000    <1> .last:	dq	0
   226 000008DC 5A5A3A              <1> .hour:	db	"ZZ:"
   227 000008DF 5A5A3A              <1> .min:	db	"ZZ:"
   228 000008E2 5A5A00              <1> .sec:	db	"ZZ", 0
   229                              <1> 
   152                                  %include	"../modules/protect/interrupt.s"
   153                              <1> ;************************************************************************
   154                              <1> ;	割り込みベクタの初期化
   155                              <1> ;************************************************************************
   156 000008E5 90<rep 3h>          <1> ALIGN 4
   157 000008E8 FF07                <1> IDTR:	dw 		8 * 256 - 1					; idt_limit
   158 000008EA 00001000            <1> 		dd 		VECT_BASE					; idt location
   159                              <1> 
   160                              <1> ;************************************************************************
   161                              <1> ;	割り込みテーブルを初期化
   162                              <1> ;------------------------------------------------------------------------
   163                              <1> ;	
   164                              <1> ;	まず、全ての割り込みアドレスにデフォルト処理を設定すし、その後、
   165                              <1> ;	必要な割り込みだけ設定しなおす。
   166                              <1> ;	
   167                              <1> ;	割り込みアドレスは、VECT_BASEで指定され、256の割り込みがあるので
   168                              <1> ;	0x0800バイト占有することになる。
   169                              <1> ;	
   170                              <1> ;	           |____________| _V___
   171                              <1> ;	  VECT_BASE| IntDefault |  |   
   172                              <1> ;	           | IntDefault |  | 8 * 256
   173                              <1> ;	           |      :     |  |   
   174                              <1> ;	           |____________| _|___
   175                              <1> ;	      +0800|////////////|
   176                              <1> ;	           |            |
   177                              <1> ;	
   178                              <1> ;	一つの割り込み設定は8バイトで構成される。
   179                              <1> ;	
   180                              <1> ;	           |____________|____________| 
   181                              <1> ;	        [0]| Address Lo[15: 0]       | 
   182                              <1> ;	        [2]| Selector                | 
   183                              <1> ;	        [4]| Flags                   | 
   184                              <1> ;	        [6]|_Address Lo[32:16]_______| 
   185                              <1> ;	           |/////////////////////////| 
   186                              <1> ;	           |            |            | 
   187                              <1> ;	
   188                              <1> ;========================================================================
   189                              <1> ;■書式		: void init_int(void);
   190                              <1> ;
   191                              <1> ;■引数		: 無し
   192                              <1> ;
   193                              <1> ;■戻り値	: 無し
   194                              <1> ;************************************************************************
   195                              <1> init_int:
   196                              <1> 		;---------------------------------------
   197                              <1> 		; 【レジスタの保存】
   198                              <1> 		;---------------------------------------
   199 000008EE 50                  <1> 		push	eax
   200 000008EF 53                  <1> 		push	ebx
   201 000008F0 51                  <1> 		push	ecx
   202 000008F1 57                  <1> 		push	edi
   203                              <1> 
   204                              <1> 		;---------------------------------------
   205                              <1> 		; 全ての割り込みにデフォルト処理を設定
   206                              <1> 		;---------------------------------------
   207 000008F2 8D05[380A0000]      <1> 		lea		eax, [int_default]				; EAX   = 割り込み処理アドレス;
   208 000008F8 BB008E0800          <1> 		mov		ebx, 0x0008_8E00				; EBX   = セグメントセレクタ;
   209 000008FD 6693                <1> 		xchg	ax, bx							; // 下位ワードを交換
   210                              <1> 
   211 000008FF B900010000          <1> 		mov		ecx, 256						; ECX   = 割り込みベクタ数
   212 00000904 BF00001000          <1> 		mov		edi, VECT_BASE					; EDI   = 割り込みベクタテーブル
   213                              <1> 
   214                              <1> .10L:											; do
   215                              <1> 												; {
   216 00000909 891F                <1> 		mov		[edi + 0], ebx					;   [EDI + 0] = 割り込みディスクリプタ（下位）
   217 0000090B 894704              <1> 		mov		[edi + 4], eax					;   [EDI + 4] = 割り込みディスクリプタ（上位）
   218 0000090E 83C708              <1> 		add		edi, 8							;   EDI += 8;
   219 00000911 E2F6                <1> 		loop	.10L							; } while (ECX--);
   220                              <1> 
   221                              <1> 		;---------------------------------------
   222                              <1> 		; 割り込みディスクリプタの設定
   223                              <1> 		;---------------------------------------
   224 00000913 0F011D[E8080000]    <1> 		lidt	[IDTR]							; // 割り込みディスクリプタテーブルをロード
   225                              <1> 
   226                              <1> 		;---------------------------------------
   227                              <1> 		; 【レジスタの復帰】
   228                              <1> 		;---------------------------------------
   229 0000091A 5F                  <1> 		pop		edi
   230 0000091B 59                  <1> 		pop		ecx
   231 0000091C 5B                  <1> 		pop		ebx
   232 0000091D 58                  <1> 		pop		eax
   233                              <1> 
   234 0000091E C3                  <1> 		ret
   235                              <1> 
   236                              <1> ;************************************************************************
   237                              <1> ;	スタックの内容を表示して無限ループを実行
   238                              <1> ;************************************************************************
   239                              <1> int_stop:
   240 0000091F FB                  <1> 		sti										; // 割り込み許可
   241                              <1> 
   242                              <1> 		;---------------------------------------
   243                              <1> 		; EAXで示される文字列を表示
   244                              <1> 		;---------------------------------------
   245 00000920 50680F0600006A0F6A- <1> 		cdecl	draw_str, 25, 15, 0x060F, eax	; draw_str(EAX);
   245 00000929 19E8B8FBFFFF6683C4- <1>
   245 00000932 10                  <1>
   246                              <1> 
   247                              <1> 		;---------------------------------------
   248                              <1> 		; スタックのデータを文字列に変換
   249                              <1> 		;---------------------------------------
   250 00000933 8B0424              <1> 		mov		eax, [esp + 0]					; EAX = ESP[ 0];
   251 00000936 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p1, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   251 0000093D [FB090000]50E83EFE- <1>
   251 00000945 FFFF6683C414        <1>
   252                              <1> 
   253 0000094B 8B442404            <1> 		mov		eax, [esp + 4]					; EAX = ESP[ 4];
   254 0000094F 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p2, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   254 00000956 [0C0A0000]50E825FE- <1>
   254 0000095E FFFF6683C414        <1>
   255                              <1> 
   256 00000964 8B442408            <1> 		mov		eax, [esp + 8]					; EAX = ESP[ 8];
   257 00000968 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p3, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   257 0000096F [1D0A0000]50E80CFE- <1>
   257 00000977 FFFF6683C414        <1>
   258                              <1> 
   259 0000097D 8B44240C            <1> 		mov		eax, [esp +12]					; EAX = ESP[12];
   260 00000981 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p4, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   260 00000988 [2E0A0000]50E8F3FD- <1>
   260 00000990 FFFF6683C414        <1>
   261                              <1> 
   262                              <1> 		;---------------------------------------
   263                              <1> 		; 文字列の表示
   264                              <1> 		;---------------------------------------
   265 00000996 68[F4090000]68040F- <1> 		cdecl	draw_str, 25, 16, 0x0F04, .s1	; draw_str("ESP+ 0:-------- ");
   265 0000099E 00006A106A19E83EFB- <1>
   265 000009A7 FFFF6683C410        <1>
   266 000009AD 68[050A0000]68040F- <1> 		cdecl	draw_str, 25, 17, 0x0F04, .s2	; draw_str("   + 4:-------- ");
   266 000009B5 00006A116A19E827FB- <1>
   266 000009BE FFFF6683C410        <1>
   267 000009C4 68[160A0000]68040F- <1> 		cdecl	draw_str, 25, 18, 0x0F04, .s3	; draw_str("   + 8:-------- ");
   267 000009CC 00006A126A19E810FB- <1>
   267 000009D5 FFFF6683C410        <1>
   268 000009DB 68[270A0000]68040F- <1> 		cdecl	draw_str, 25, 19, 0x0F04, .s4	; draw_str("   +12:-------- ");
   268 000009E3 00006A136A19E8F9FA- <1>
   268 000009EC FFFF6683C410        <1>
   269                              <1> 
   270                              <1> 		;---------------------------------------
   271                              <1> 		; 無限ループ
   272                              <1> 		;---------------------------------------
   273 000009F2 EBFE                <1> 		jmp		$								; while (1) ; // 無限ループ
   274                              <1> 
   275 000009F4 4553502B20303A      <1> .s1		db	"ESP+ 0:"
   276 000009FB 5F5F5F5F5F5F5F5F20- <1> .p1		db	"________ ", 0
   276 00000A04 00                  <1>
   277 00000A05 2020202B20343A      <1> .s2		db	"   + 4:"
   278 00000A0C 5F5F5F5F5F5F5F5F20- <1> .p2		db	"________ ", 0
   278 00000A15 00                  <1>
   279 00000A16 2020202B20383A      <1> .s3		db	"   + 8:"
   280 00000A1D 5F5F5F5F5F5F5F5F20- <1> .p3		db	"________ ", 0
   280 00000A26 00                  <1>
   281 00000A27 2020202B31323A      <1> .s4		db	"   +12:"
   282 00000A2E 5F5F5F5F5F5F5F5F20- <1> .p4		db	"________ ", 0
   282 00000A37 00                  <1>
   283                              <1> 
   284                              <1> ;************************************************************************
   285                              <1> ;	割り込み処理：デフォルトの処理
   286                              <1> ;************************************************************************
   287                              <1> int_default:
   288 00000A38 9C                  <1> 		pushf									; // EFLAGS(IF==0)
   289 00000A39 0E                  <1> 		push	cs								; // CS
   290 00000A3A 68[1F090000]        <1> 		push	int_stop						; // スタック表示処理
   291                              <1> 
   292 00000A3F B8[450A0000]        <1> 		mov		eax, .s0						; // 割り込み種別
   293 00000A44 CF                  <1> 		iret
   294                              <1> 
   295 00000A45 203C2020202053544F- <1> .s0		db	" <    STOP    > ", 0
   295 00000A4E 50202020203E2000    <1>
   296                              <1> 
   297                              <1> ;************************************************************************
   298                              <1> ;	割り込み処理：ゼロ除算
   299                              <1> ;************************************************************************
   300                              <1> int_zero_div:
   301 00000A56 9C                  <1> 		pushf									; // EFLAGS
   302 00000A57 0E                  <1> 		push	cs								; // CS
   303 00000A58 68[1F090000]        <1> 		push	int_stop						; // スタック表示処理
   304                              <1> 
   305 00000A5D B8[630A0000]        <1> 		mov		eax, .s0						; // 割り込み種別
   306 00000A62 CF                  <1> 		iret
   307                              <1> 
   308 00000A63 203C20205A45524F20- <1> .s0		db	" <  ZERO DIV  > ", 0
   308 00000A6C 44495620203E2000    <1>
   309                              <1> 
   153                                  %include	"../modules/protect/pic.s"
   154                              <1> ;************************************************************************
   155                              <1> ;	割り込みコントローラの初期化
   156                              <1> ;========================================================================
   157                              <1> ;■書式		: void init_pic(void);
   158                              <1> ;
   159                              <1> ;■引数		: 無し
   160                              <1> ;
   161                              <1> ;■戻り値	: 無し
   162                              <1> ;************************************************************************
   163                              <1> init_pic:
   164                              <1> 		;---------------------------------------
   165                              <1> 		; 【レジスタの保存】
   166                              <1> 		;---------------------------------------
   167 00000A74 50                  <1> 		push	eax
   168                              <1> 
   169                              <1> 		;---------------------------------------
   170                              <1> 		; マスタPICの設定
   171                              <1> 		;---------------------------------------
   172                              <1> 		outp	0x20, 0x11						; // MASTER.ICW1 = 0x11;
    69 00000A75 B011                <2>  mov al, %2
    70 00000A77 E620                <2>  out %1, al
   173                              <1> 		outp	0x21, 0x20						; // MASTER.ICW2 = 0x20;
    69 00000A79 B020                <2>  mov al, %2
    70 00000A7B E621                <2>  out %1, al
   174                              <1> 		outp	0x21, 0x04						; // MASTER.ICW3 = 0x04;
    69 00000A7D B004                <2>  mov al, %2
    70 00000A7F E621                <2>  out %1, al
   175                              <1> 		outp	0x21, 0x01						; // MASTER.ICW4 = 0x01;
    69 00000A81 B001                <2>  mov al, %2
    70 00000A83 E621                <2>  out %1, al
   176                              <1> 		outp	0x21, 0xFF						; // マスタ割り込みマスク
    69 00000A85 B0FF                <2>  mov al, %2
    70 00000A87 E621                <2>  out %1, al
   177                              <1> 
   178                              <1> 		;---------------------------------------
   179                              <1> 		; スレーブPICの設定
   180                              <1> 		;---------------------------------------
   181                              <1> 		outp	0xA0, 0x11						; // SLAVE.ICW1  = 0x11;
    69 00000A89 B011                <2>  mov al, %2
    70 00000A8B E6A0                <2>  out %1, al
   182                              <1> 		outp	0xA1, 0x28						; // SLAVE.ICW2  = 0x28;
    69 00000A8D B028                <2>  mov al, %2
    70 00000A8F E6A1                <2>  out %1, al
   183                              <1> 		outp	0xA1, 0x02						; // SLAVE.ICW3  = 0x02;
    69 00000A91 B002                <2>  mov al, %2
    70 00000A93 E6A1                <2>  out %1, al
   184                              <1> 		outp	0xA1, 0x01						; // SLAVE.ICW4  = 0x01;
    69 00000A95 B001                <2>  mov al, %2
    70 00000A97 E6A1                <2>  out %1, al
   185                              <1> 		outp	0xA1, 0xFF						; // スレーブ割り込みマスク
    69 00000A99 B0FF                <2>  mov al, %2
    70 00000A9B E6A1                <2>  out %1, al
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 【レジスタの復帰】
   189                              <1> 		;---------------------------------------
   190 00000A9D 58                  <1> 		pop		eax
   191                              <1> 
   192 00000A9E C3                  <1> 		ret
   193                              <1> 
   154                                  %include	"../modules/protect/int_rtc.s"
   155                              <1> ;************************************************************************
   156                              <1> ;	RTCの割り込み許可設定
   157                              <1> ;========================================================================
   158                              <1> ;■書式		: void rtc_int_en(bit);
   159                              <1> ;
   160                              <1> ;■引数
   161                              <1> ;	bit		: 割り込みを許可するビット
   162                              <1> ;
   163                              <1> ;■戻り値	: 無し
   164                              <1> ;************************************************************************
   165                              <1> rtc_int_en:
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 【スタックフレームの構築】
   168                              <1> 		;---------------------------------------
   169                              <1> 												; ------|--------
   170                              <1> 												;    + 8| ビット
   171                              <1> 												; ------|--------
   172                              <1> 												;    + 4| EIP（戻り番地）
   173 00000A9F 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   174 00000AA0 89E5                <1> 		mov		ebp, esp						; ------+--------
   175                              <1> 
   176                              <1> 		;---------------------------------------
   177                              <1> 		; 【レジスタの保存】
   178                              <1> 		;---------------------------------------
   179 00000AA2 50                  <1> 		push	eax
   180                              <1> 
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 割り込み許可設定
   183                              <1> 		;---------------------------------------
   184                              <1> 		outp	0x70, 0x0B						; outp(0x70, AL);   // レジスタBを選択
    69 00000AA3 B00B                <2>  mov al, %2
    70 00000AA5 E670                <2>  out %1, al
   185                              <1> 
   186 00000AA7 E471                <1> 		in		al, 0x71						; AL  = port(0x71); // レジスタBの
   187 00000AA9 0A4508              <1> 		or		al, [ebp + 8]					; AL |= ビット;     // 指定されたビットをセット
   188                              <1> 
   189 00000AAC E671                <1> 		out		0x71, al						; outp(0x71, AL);   // レジスタBに書き込み
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 【レジスタの復帰】
   193                              <1> 		;---------------------------------------
   194 00000AAE 58                  <1> 		pop		eax
   195                              <1> 
   196                              <1> 		;---------------------------------------
   197                              <1> 		; 【スタックフレームの破棄】
   198                              <1> 		;---------------------------------------
   199 00000AAF 89EC                <1> 		mov		esp, ebp
   200 00000AB1 5D                  <1> 		pop		ebp
   201                              <1> 
   202 00000AB2 C3                  <1> 		ret
   203                              <1> 
   204                              <1> 
   205                              <1> ;************************************************************************
   206                              <1> ;	割り込み処理：RTC
   207                              <1> ;************************************************************************
   208                              <1> int_rtc:
   209                              <1> 		;---------------------------------------
   210                              <1> 		; 【レジスタの保存】
   211                              <1> 		;---------------------------------------
   212 00000AB3 60                  <1> 		pusha
   213 00000AB4 1E                  <1> 		push	ds
   214 00000AB5 06                  <1> 		push	es
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; データ用セグメントセレクタの設定
   218                              <1> 		;---------------------------------------
   219 00000AB6 66B81000            <1> 		mov		ax, 0x0010						; 
   220 00000ABA 8ED8                <1> 		mov		ds, ax							; 
   221 00000ABC 8EC0                <1> 		mov		es, ax							; 
   222                              <1> 
   223                              <1> 		;---------------------------------------
   224                              <1> 		; RTCから時刻を取得
   225                              <1> 		;---------------------------------------
   226 00000ABE 68[98010000]E846FD- <1> 		cdecl	rtc_get_time, RTC_TIME			; EAX = get_time(&RTC_TIME);
   226 00000AC6 FFFF6683C404        <1>
   227                              <1> 												; 
   228                              <1> 		;---------------------------------------
   229                              <1> 		; RTCの割り込み要因を取得
   230                              <1> 		;---------------------------------------
   231                              <1> 		outp	0x70, 0x0C						; outp(0x70, 0x0C); // レジスタCを選択
    69 00000ACC B00C                <2>  mov al, %2
    70 00000ACE E670                <2>  out %1, al
   232 00000AD0 E471                <1> 		in		al, 0x71						; AL = inp();
   233                              <1> 
   234                              <1> 		;---------------------------------------
   235                              <1> 		; 割り込みフラグをクリア(EOI)
   236                              <1> 		;---------------------------------------
   237                              <1> 		outp	0xA0, 0x20						; outp(0xA0, EOI); // スレーブPIC
    69 00000AD2 B020                <2>  mov al, %2
    70 00000AD4 E6A0                <2>  out %1, al
   238                              <1> 		outp	0x20, 0x20						; outp(0x20, EOI); // マスタPIC
    69 00000AD6 B020                <2>  mov al, %2
    70 00000AD8 E620                <2>  out %1, al
   239                              <1> 
   240                              <1> 		;---------------------------------------
   241                              <1> 		; 【レジスタの復帰】
   242                              <1> 		;---------------------------------------
   243 00000ADA 07                  <1> 		pop		es								; 
   244 00000ADB 1F                  <1> 		pop		ds								; 
   245 00000ADC 61                  <1> 		popa									; 
   246                              <1> 
   247 00000ADD CF                  <1> 		iret									; 割り込み処理の終了
   248                              <1> 
   155                                  %include	"../modules/protect/int_keyboard.s"
   156                              <1> ;************************************************************************
   157                              <1> ;	割り込み処理：キーボード
   158                              <1> ;------------------------------------------------------------------------
   159                              <1> ;	KBC（キーボードコントローラ）からキーコードを取得して、
   160                              <1> ;	専用のリングバッファに保存する。
   161                              <1> ;************************************************************************
   162                              <1> int_keyboard:
   163                              <1> 		;---------------------------------------
   164                              <1> 		; 【レジスタの保存】
   165                              <1> 		;---------------------------------------
   166 00000ADE 60                  <1> 		pusha
   167 00000ADF 1E                  <1> 		push	ds
   168 00000AE0 06                  <1> 		push	es
   169                              <1> 
   170                              <1> 		;---------------------------------------
   171                              <1> 		; データ用セグメントの設定
   172                              <1> 		;---------------------------------------
   173 00000AE1 66B81000            <1> 		mov		ax, 0x0010						; 
   174 00000AE5 8ED8                <1> 		mov		ds, ax							; 
   175 00000AE7 8EC0                <1> 		mov		es, ax							; 
   176                              <1> 
   177                              <1> 		;---------------------------------------
   178                              <1> 		; KBCのバッファ読み取り
   179                              <1> 		;---------------------------------------
   180 00000AE9 E460                <1> 		in		al, 0x60						; AL = キーコードの取得
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; キーコードの保存
   184                              <1> 		;---------------------------------------
   185 00000AEB 5068[040B0000]E856- <1> 		cdecl	ring_wr, _KEY_BUFF, eax			; ring_wr(_KEY_BUFF, EAX); // キーコードの保存
   185 00000AF3 0000006683C408      <1>
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 割り込み終了コマンド送信
   189                              <1> 		;---------------------------------------
   190                              <1> 		outp	0x20, 0x20						; outp(); // マスタPIC:EOIコマンド
    69 00000AFA B020                <2>  mov al, %2
    70 00000AFC E620                <2>  out %1, al
   191                              <1> 
   192                              <1> 		;---------------------------------------
   193                              <1> 		; 【レジスタの復帰】
   194                              <1> 		;---------------------------------------
   195 00000AFE 07                  <1> 		pop		es								; 
   196 00000AFF 1F                  <1> 		pop		ds								; 
   197 00000B00 61                  <1> 		popa
   198                              <1> 
   199 00000B01 CF                  <1> 		iret									; 割り込みからの復帰
   200                              <1> 
   201 00000B02 00<rep 2h>          <1> ALIGN 4, db 0
   202 00000B04 00<rep 18h>         <1> _KEY_BUFF:	times ring_buff_size db 0
   203                              <1> 
   156                                  %include	"../modules/protect/ring_buff.s"
   157                              <1> ;************************************************************************
   158                              <1> ;	リングバッファからデータを取得
   159                              <1> ;========================================================================
   160                              <1> ;■書式		: DWORD ring_rd(buff, data);
   161                              <1> ;
   162                              <1> ;■引数
   163                              <1> ;	buff	: リングバッファ
   164                              <1> ;	data	: 読み込んだデータの保存先アドレス
   165                              <1> ;
   166                              <1> ;■戻り値	: データあり(0以外)、データ無し(0)
   167                              <1> ;************************************************************************
   168                              <1> ring_rd:
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 【スタックフレームの構築】
   171                              <1> 		;---------------------------------------
   172                              <1> 												; ------|--------
   173                              <1> 												;    +12| リングデータ
   174                              <1> 												;    + 8| データアドレス
   175                              <1> 												; ------|--------
   176                              <1> 												;    + 4| EIP（戻り番地）
   177 00000B1C 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   178 00000B1D 89E5                <1> 		mov		ebp, esp						; ------+--------
   179                              <1> 
   180                              <1> 		;---------------------------------------
   181                              <1> 		; 【レジスタの保存】
   182                              <1> 		;---------------------------------------
   183 00000B1F 53                  <1> 		push	ebx
   184 00000B20 56                  <1> 		push	esi
   185 00000B21 57                  <1> 		push	edi
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 引数を取得
   189                              <1> 		;---------------------------------------
   190 00000B22 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   191 00000B25 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = データアドレス;
   192                              <1> 
   193                              <1> 		;---------------------------------------
   194                              <1> 		; 読み込み位置を確認
   195                              <1> 		;---------------------------------------
   196 00000B28 B800000000          <1> 		mov		eax, 0							; EAX = 0;          // データ無し
   197 00000B2D 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;         // 読み込み位置
   198 00000B2F 3B5E04              <1> 		cmp		ebx, [esi + ring_buff.wp]		; if (EBX != wp)    // 書き込み位置と異なる
   199 00000B32 7411                <1> 		je		.10E							; {
   200                              <1> 												;   
   201 00000B34 8A441E08            <1> 		mov		al, [esi + ring_buff.item + ebx] ;   AL = BUFF[rp]; // キーコードを保存
   202                              <1> 												;   
   203 00000B38 8807                <1> 		mov		[edi], al						;   [EDI] = AL;     // データを保存
   204                              <1> 												;   
   205 00000B3A 43                  <1> 		inc		ebx								;   EBX++;          // 次の読み込み位置
   206 00000B3B 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= 0x0F     // サイズの制限
   207 00000B3E 891E                <1> 		mov		[esi + ring_buff.rp], ebx		;   rp = EBX;       // 読み込み位置を保存
   208                              <1> 												;   
   209 00000B40 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // データあり
   210                              <1> .10E:											; }
   211                              <1> 
   212                              <1> 		;---------------------------------------
   213                              <1> 		; 【レジスタの復帰】
   214                              <1> 		;---------------------------------------
   215 00000B45 5F                  <1> 		pop		edi
   216 00000B46 5E                  <1> 		pop		esi
   217 00000B47 5B                  <1> 		pop		ebx
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 【スタックフレームの破棄】
   221                              <1> 		;---------------------------------------
   222 00000B48 89EC                <1> 		mov		esp, ebp
   223 00000B4A 5D                  <1> 		pop		ebp
   224                              <1> 
   225 00000B4B C3                  <1> 		ret
   226                              <1> 
   227                              <1> ;************************************************************************
   228                              <1> ;	リングバッファにデータを格納
   229                              <1> ;========================================================================
   230                              <1> ;■書式		: DWORD ring_wr(buff, data);
   231                              <1> ;
   232                              <1> ;■引数
   233                              <1> ;	buff	: リングバッファ
   234                              <1> ;	data	: 書き込むデータ
   235                              <1> ;
   236                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   237                              <1> ;************************************************************************
   238                              <1> ring_wr:
   239                              <1> 		;---------------------------------------
   240                              <1> 		; 【スタックフレームの構築】
   241                              <1> 		;---------------------------------------
   242                              <1> 												; ------|--------
   243                              <1> 												;    +12| リングデータ
   244                              <1> 												;    + 8| データ
   245                              <1> 												; ------|--------
   246                              <1> 												;    + 4| EIP（戻り番地）
   247 00000B4C 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   248 00000B4D 89E5                <1> 		mov		ebp, esp						; ------+--------
   249                              <1> 
   250                              <1> 		;---------------------------------------
   251                              <1> 		; 【レジスタの保存】
   252                              <1> 		;---------------------------------------
   253 00000B4F 53                  <1> 		push	ebx
   254 00000B50 51                  <1> 		push	ecx
   255 00000B51 56                  <1> 		push	esi
   256                              <1> 
   257                              <1> 		;---------------------------------------
   258                              <1> 		; 引数を取得
   259                              <1> 		;---------------------------------------
   260 00000B52 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   261                              <1> 
   262                              <1> 		;---------------------------------------
   263                              <1> 		; 書き込み位置を確認
   264                              <1> 		;---------------------------------------
   265 00000B55 B800000000          <1> 		mov		eax, 0							; EAX  = 0;         // 失敗
   266 00000B5A 8B5E04              <1> 		mov		ebx, [esi + ring_buff.wp]		; EBX  = wp;        // 書き込み位置
   267 00000B5D 89D9                <1> 		mov		ecx, ebx						; ECX  = EBX;
   268 00000B5F 41                  <1> 		inc		ecx								; ECX++;            // 次の書き込み位置
   269 00000B60 83E10F              <1> 		and		ecx, RING_INDEX_MASK			; ECX &= 0x0F       // サイズの制限
   270                              <1> 												; 
   271 00000B63 3B0E                <1> 		cmp		ecx, [esi + ring_buff.rp]		; if (ECX != rp)    // 読み込み位置と異なる
   272 00000B65 740F                <1> 		je		.10E							; {
   273                              <1> 												; 
   274 00000B67 8A450C              <1> 		mov		al, [ebp +12]					;   AL = データ;
   275                              <1> 												; 
   276 00000B6A 88441E08            <1> 		mov		[esi + ring_buff.item + ebx], al ;   BUFF[wp] = AL; // キーコードを保存
   277 00000B6E 894E04              <1> 		mov		[esi + ring_buff.wp], ecx		;   wp = ECX;       // 書き込み位置を保存
   278 00000B71 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // 成功
   279                              <1> .10E:											; }
   280                              <1> 
   281                              <1> 		;---------------------------------------
   282                              <1> 		; 【レジスタの復帰】
   283                              <1> 		;---------------------------------------
   284 00000B76 5E                  <1> 		pop		esi
   285 00000B77 59                  <1> 		pop		ecx
   286 00000B78 5B                  <1> 		pop		ebx
   287                              <1> 
   288                              <1> 		;---------------------------------------
   289                              <1> 		; 【スタックフレームの破棄】
   290                              <1> 		;---------------------------------------
   291 00000B79 89EC                <1> 		mov		esp, ebp
   292 00000B7B 5D                  <1> 		pop		ebp
   293                              <1> 
   294 00000B7C C3                  <1> 		ret
   295                              <1> 
   296                              <1> ;************************************************************************
   297                              <1> ;	リングバッファ内要素の表示
   298                              <1> ;========================================================================
   299                              <1> ;■書式		: void ring_show(col, row, buff);
   300                              <1> ;
   301                              <1> ;■引数
   302                              <1> ;	col		: 列
   303                              <1> ;	row		: 行
   304                              <1> ;	buff	: リングバッファ
   305                              <1> ;
   306                              <1> ;■戻り値	: 無し
   307                              <1> ;************************************************************************
   308                              <1> draw_key:
   309                              <1> 		;---------------------------------------
   310                              <1> 		; 【スタックフレームの構築】
   311                              <1> 		;---------------------------------------
   312                              <1> 												; ------|--------
   313                              <1> 												; EBP+16| リングバッファ
   314                              <1> 												; EBP+12| Y（行）
   315                              <1> 												; EBP+ 8| X（列）
   316                              <1> 												; ------|--------
   317 00000B7D 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   318 00000B7E 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   319                              <1> 												; ------|--------
   320                              <1> 
   321                              <1> 		;---------------------------------------
   322                              <1> 		; 【レジスタの保存】
   323                              <1> 		;---------------------------------------
   324 00000B80 60                  <1> 		pusha
   325                              <1> 
   326                              <1> 		;---------------------------------------
   327                              <1> 		; 引数を取得
   328                              <1> 		;---------------------------------------
   329 00000B81 8B5508              <1> 		mov		edx, [ebp + 8]					; EDX = X（列）;
   330 00000B84 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）;
   331 00000B87 8B7510              <1> 		mov		esi, [ebp +16]					; ESI = リングバッファ;
   332                              <1> 
   333                              <1> 		;---------------------------------------
   334                              <1> 		; リングバッファの情報を取得
   335                              <1> 		;---------------------------------------
   336 00000B8A 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;             // 読み込み位置
   337 00000B8C 8D7608              <1> 		lea		esi, [esi + ring_buff.item]		; ESI = &KEY_BUFF[EBX];
   338 00000B8F B910000000          <1> 		mov		ecx, RING_ITEM_SIZE				; ECX = RING_ITEM_SIZE; // 要素数
   339                              <1> 
   340                              <1> 		;---------------------------------------
   341                              <1> 		; 文字に変換しながら表示
   342                              <1> 		;---------------------------------------
   343                              <1> .10L:											; do
   344                              <1> 												; {
   345 00000B94 4B                  <1> 		dec		ebx								;   EBX--; // 読み込み位置
   346 00000B95 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= RING_INDEX_MASK;
   347 00000B98 8A041E              <1> 		mov		al, [esi + ebx]					;   EAX  = KEY_BUFF[EBX];
   348                              <1> 												;   
   349 00000B9B 6A046A106A0268-     <1> 		cdecl	itoa, eax, .tmp, 2, 16, 0b0100	;   // キーコードを文字列に変換
   349 00000BA2 [CC0B0000]50E8D9FB- <1>
   349 00000BAA FFFF6683C414        <1>
   350 00000BB0 68[CC0B0000]6A0257- <1> 		cdecl	draw_str, edx, edi, 0x02, .tmp	;   // 変換した文字列を表示
   350 00000BB8 52E829F9FFFF6683C4- <1>
   350 00000BC1 10                  <1>
   351                              <1> 												;   
   352 00000BC2 83C203              <1> 		add		edx, 3							;   // 表示位置を更新（3文字分）
   353                              <1> 												;   
   354 00000BC5 E2CD                <1> 		loop	.10L							;   
   355                              <1> .10E:											; } while (ECX--);
   356                              <1> 
   357                              <1> 		;---------------------------------------
   358                              <1> 		; 【レジスタの復帰】
   359                              <1> 		;---------------------------------------
   360 00000BC7 61                  <1> 		popa
   361                              <1> 
   362                              <1> 		;---------------------------------------
   363                              <1> 		; 【スタックフレームの破棄】
   364                              <1> 		;---------------------------------------
   365 00000BC8 89EC                <1> 		mov		esp, ebp
   366 00000BCA 5D                  <1> 		pop		ebp
   367                              <1> 
   368 00000BCB C3                  <1> 		ret
   369                              <1> 
   370 00000BCC 2D2D2000            <1> .tmp	db "-- ", 0
   157                                  %include	"../modules/protect/timer.s"
   158                              <1> ;************************************************************************
   159                              <1> ;	タイマーの設定
   160                              <1> ;------------------------------------------------------------------------
   161                              <1> ;	タイマー（カウンタ0）割り込み許可
   162                              <1> ;========================================================================
   163                              <1> ;■書式		: void int_en_timer0(void);
   164                              <1> ;
   165                              <1> ;■引数		: 無し
   166                              <1> ;
   167                              <1> ;■戻り値	: 無し
   168                              <1> ;************************************************************************
   169                              <1> int_en_timer0:
   170                              <1> 		;---------------------------------------
   171                              <1> 		; 【レジスタの保存】
   172                              <1> 		;---------------------------------------
   173 00000BD0 50                  <1> 		push	eax
   174                              <1> 
   175                              <1> 		;---------------------------------------
   176                              <1> 		;	8254 Timer
   177                              <1> 		;	0x2e9c(11932)=10[ms] @ CLK=1,193,182[Hz]
   178                              <1> 		;---------------------------------------
   179                              <1> 		 outp	 0x43, 0b_00_11_010_0			; // カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    69 00000BD1 B034                <2>  mov al, %2
    70 00000BD3 E643                <2>  out %1, al
   180                              <1> 		 outp	 0x40, 0x9C						; // 下位バイト
    69 00000BD5 B09C                <2>  mov al, %2
    70 00000BD7 E640                <2>  out %1, al
   181                              <1> 		 outp	 0x40, 0x2E						; // 上位バイト
    69 00000BD9 B02E                <2>  mov al, %2
    70 00000BDB E640                <2>  out %1, al
   182                              <1> 
   183                              <1> 		;---------------------------------------
   184                              <1> 		; 【レジスタの復帰】
   185                              <1> 		;---------------------------------------
   186 00000BDD 58                  <1> 		pop		eax
   187                              <1> 
   188 00000BDE C3                  <1> 		ret
   189                              <1> 
   158                                  %include	"../modules/protect/draw_rotation_bar.s"
   159                              <1> ;************************************************************************
   160                              <1> ;	画面左下に、回転する棒を表示
   161                              <1> ;========================================================================
   162                              <1> ;■書式		: void draw_rotation_bar(void);
   163                              <1> ;
   164                              <1> ;■引数		: 無し
   165                              <1> ;
   166                              <1> ;■戻り値	: 無し
   167                              <1> ;************************************************************************
   168                              <1> draw_rotation_bar:
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 【レジスタの保存】
   171                              <1> 		;---------------------------------------
   172 00000BDF 50                  <1> 		push	eax
   173                              <1> 
   174                              <1> 		;---------------------------------------
   175                              <1> 		; タイマー割り込みカウンタを確認
   176                              <1> 		;---------------------------------------
   177 00000BE0 A1[08030000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX  = タイマー割り込みカウンタ
   178 00000BE5 C1E804              <1> 		shr		eax, 4							; EAX /= 4;    // 16で除算
   179 00000BE8 3B05[100C0000]      <1> 		cmp		eax, [.index]					; if (EAX != 前回値)
   180 00000BEE 741E                <1> 		je		.10E							; {
   181                              <1> 												;   
   182 00000BF0 A3[100C0000]        <1> 		mov		[.index], eax					;   前回値 = EAX;
   183 00000BF5 83E003              <1> 		and		eax, 0x03						;   EAX &= 0x03; // 0～3に限定
   184                              <1> 												;   
   185 00000BF8 8A80[140C0000]      <1> 		mov		al, [.table + eax]				;   AL = table[index];
   186 00000BFE 506A0F6A1D6A00E8D4- <1> 		cdecl	draw_char, 0, 29, 0x000F, eax	;   draw_char(); // 文字を表示
   186 00000C07 F7FFFF6683C410      <1>
   187                              <1> 												;   
   188                              <1> .10E:											; }
   189                              <1> 
   190                              <1> 		;---------------------------------------
   191                              <1> 		; 【レジスタの復帰】
   192                              <1> 		;---------------------------------------
   193 00000C0E 58                  <1> 		pop		eax
   194                              <1> 
   195 00000C0F C3                  <1> 		ret
   196                              <1> 
   197                              <1> ALIGN 4, db 0
   198 00000C10 00000000            <1> .index:		dd 0								; 前回値
   199 00000C14 7C2F2D5C            <1> .table:		db	"|/-\"							; 表示キャラクタ
   200                              <1> 
   159                                  %include	"../modules/protect/call_gate.s"
   160                              <1> ;************************************************************************
   161                              <1> ;	コールゲート関数
   162                              <1> ;************************************************************************
   163                              <1> call_gate:
   164                              <1> 		;---------------------------------------
   165                              <1> 		; 【スタックフレームの構築】
   166                              <1> 		;---------------------------------------
   167                              <1> 												; ------|--------
   168                              <1> 												; EBP+12| X（列）
   169                              <1> 												; EBP+16| Y（行）
   170                              <1> 												; EBP+20| 色
   171                              <1> 												; EBP+24| 文字
   172                              <1> 												; ---------------
   173                              <1> 												; EBP+ 8| CS（コードセグメント）
   174 00000C18 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   175 00000C19 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   176                              <1> 												; ---------------
   177                              <1> 		;---------------------------------------
   178                              <1> 		; 【レジスタの保存】
   179                              <1> 		;---------------------------------------
   180 00000C1B 60                  <1> 		pusha
   181 00000C1C 1E                  <1> 		push	ds
   182 00000C1D 06                  <1> 		push	es
   183                              <1> 
   184                              <1> 		;---------------------------------------
   185                              <1> 		; データ用セグメントの設定
   186                              <1> 		;---------------------------------------
   187 00000C1E 66B81000            <1> 		mov		ax, 0x0010						; 
   188 00000C22 8ED8                <1> 		mov		ds, ax							; 
   189 00000C24 8EC0                <1> 		mov		es, ax							; 
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 文字を表示
   193                              <1> 		;---------------------------------------
   194 00000C26 8B450C              <1> 		mov		eax, dword [ebp +12]			; EAX = X（列）;
   195 00000C29 8B5D10              <1> 		mov		ebx, dword [ebp +16]			; EBX = Y（行）;
   196 00000C2C 8B4D14              <1> 		mov		ecx, dword [ebp +20]			; ECX = 色;
   197 00000C2F 8B5518              <1> 		mov		edx, dword [ebp +24]			; EDX = 文字;
   198 00000C32 52515350E8ACF8FFFF- <1> 		cdecl	draw_str, eax, ebx , ecx, edx	; draw_str();
   198 00000C3B 6683C410            <1>
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 【レジスタの復帰】
   202                              <1> 		;---------------------------------------
   203 00000C3F 07                  <1> 		pop		es								; 
   204 00000C40 1F                  <1> 		pop		ds								; 
   205 00000C41 61                  <1> 		popa									; 
   206                              <1> 
   207                              <1> 		;---------------------------------------
   208                              <1> 		; 【スタックフレームの破棄】
   209                              <1> 		;---------------------------------------
   210 00000C42 89EC                <1> 		mov		esp, ebp
   211 00000C44 5D                  <1> 		pop		ebp
   212                              <1> 
   213 00000C45 CA1000              <1> 		retf	4 * 4
   214                              <1> 
   160                                  
   161                                  ;************************************************************************
   162                                  ;	パディング
   163                                  ;************************************************************************
   164 00000C48 00<rep 13B8h>           		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
   165                                  
