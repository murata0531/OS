     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  ;************************************************************************
     8                                  ;	マクロ
     9                                  ;************************************************************************
    10                                  %include	"../include/define.s"
    11                              <1> ;************************************************************************
    12                              <1> ;	メモリイメージ
    13                              <1> ;************************************************************************
    14                              <1> 
    15                              <1> 		;---------------------------------------
    16                              <1> 		;           |            | 
    17                              <1> 		;           |____________| 
    18                              <1> 		; 0000_7A00 |            | ( 512) スタック
    19                              <1> 		;           |____________| 
    20                              <1> 		; 0000_7C00 |            | (  8K) ブート
    21                              <1> 		;           =            = 
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    24                              <1> 		;           =            = 
    25                              <1> 		;           |____________| 
    26                              <1> 		; 0000_BC00 |////////////| 
    27                              <1> 		;           =            = 
    28                              <1> 		;           |____________| 
    29                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    32                              <1> 		;           |____________| 
    33                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    34                              <1> 		;           |            | 
    35                              <1> 		;           =            = 
    36                              <1> 		;           |____________| 
    37                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    38                              <1> 		;           |            | （各タスク1K）
    39                              <1> 		;           =            = 
    40                              <1> 		;           |____________| 
    41                              <1> 		; 0010_5000 |            | Dir
    42                              <1> 		;      6000 |____________| Page
    43                              <1> 		; 0010_7000 |            | Dir
    44                              <1> 		;      8000 |____________| Page
    45                              <1> 		; 0010_9000 |////////////| 
    46                              <1> 		;           |            | 
    47                              <1> 
    48                              <1> 
    49                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    50                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    51                              <1> 
    52                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    53                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    54                              <1> 
    55                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    56                              <1> 
    57                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    58                              <1> 
    59                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    60                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    61                              <1> 
    62                              <1> 		E820_RECORD_SIZE	equ		20
    63                              <1> 
    64                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    11                                  %include	"../include/macro.s"
    12                              <1> ;************************************************************************
    13                              <1> ; 関数呼び出し用マクロ
    14                              <1> ;
    15                              <1> ; 使い方：
    16                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    17                              <1> ;
    18                              <1> ;************************************************************************
    19                              <1> %macro  cdecl 1-*.nolist
    20                              <1> 
    21                              <1> 	%rep  %0 - 1
    22                              <1> 		push	%{-1:-1}
    23                              <1> 		%rotate -1
    24                              <1> 	%endrep 
    25                              <1> 	%rotate -1
    26                              <1> 
    27                              <1> 		call	%1
    28                              <1> 
    29                              <1> 	%if 1 < %0
    30                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    31                              <1> 	%endif
    32                              <1> 
    33                              <1> %endmacro
    34                              <1> 
    35                              <1> ;************************************************************************
    36                              <1> ; 割り込みベクタ設定用
    37                              <1> ;
    38                              <1> ; 使い方：
    39                              <1> ;	set_vect	ベクタ番号, 割り込み処理 [, フラグ]
    40                              <1> ;
    41                              <1> ;************************************************************************
    42                              <1> %macro  set_vect 1-*.nolist
    43                              <1> 		push	eax
    44                              <1> 		push	edi
    45                              <1> 
    46                              <1> 		mov		edi, VECT_BASE + (%1 * 8)		; ベクタアドレス;
    47                              <1> 		mov		eax, %2
    48                              <1> 
    49                              <1> 	%if 3 == %0
    50                              <1> 		mov		[edi + 4], %3					; フラグ
    51                              <1> 	%endif
    52                              <1> 
    53                              <1> 		mov		[edi + 0], ax					; 例外アドレス[15: 0]
    54                              <1> 		shr		eax, 16							; 
    55                              <1> 		mov		[edi + 6], ax					; 例外アドレス[31:16]
    56                              <1> 
    57                              <1> 		pop		edi
    58                              <1> 		pop		eax
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> ;************************************************************************
    62                              <1> ; ポート出力用
    63                              <1> ;
    64                              <1> ; 使い方：
    65                              <1> ;	outp	ポート番号, 出力値
    66                              <1> ;
    67                              <1> ;************************************************************************
    68                              <1> %macro  outp 2
    69                              <1> 		mov		al, %2
    70                              <1> 		out		%1, al
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> ;************************************************************************
    74                              <1> ; ディスクリプタの情報を設定
    75                              <1> ;
    76                              <1> ; 使い方：
    77                              <1> ;	set_desc	ディスクリプタ, ベース
    78                              <1> ;
    79                              <1> ;************************************************************************
    80                              <1> %macro  set_desc 2-* 
    81                              <1> 		push	eax
    82                              <1> 		push	edi
    83                              <1> 
    84                              <1> 		mov		edi, %1							; ディスクリプタアドレス
    85                              <1> 		mov		eax, %2							; ベースアドレス
    86                              <1> 
    87                              <1> 	%if 3 == %0
    88                              <1> 		mov		[edi + 0], %3					; リミット
    89                              <1> 	%endif
    90                              <1> 
    91                              <1> 		mov		[edi + 2], ax					; ベース（[15: 0]）
    92                              <1> 		shr		eax, 16							; 
    93                              <1> 		mov		[edi + 4], al					; ベース（[23:16]）
    94                              <1> 		mov		[edi + 7], ah					; ベース（[31:24]）
    95                              <1> 
    96                              <1> 		pop		edi
    97                              <1> 		pop		eax
    98                              <1> %endmacro
    99                              <1> 
   100                              <1> ;************************************************************************
   101                              <1> ; ゲートディスクリプタのオフセットを設定
   102                              <1> ;
   103                              <1> ; 使い方：
   104                              <1> ;	set_gate	ディスクリプタ, オフセット
   105                              <1> ;
   106                              <1> ;************************************************************************
   107                              <1> %macro  set_gate 2-* 
   108                              <1> 		push	eax
   109                              <1> 		push	edi
   110                              <1> 
   111                              <1> 		mov		edi, %1							; ディスクリプタアドレス
   112                              <1> 		mov		eax, %2							; ベースアドレス
   113                              <1> 
   114                              <1> 		mov		[edi + 0], ax					; ベース（[15: 0]）
   115                              <1> 		shr		eax, 16							; 
   116                              <1> 		mov		[edi + 6], ax					; ベース（[31:16]）
   117                              <1> 
   118                              <1> 		pop		edi
   119                              <1> 		pop		eax
   120                              <1> %endmacro
   121                              <1> 
   122                              <1> ;************************************************************************
   123                              <1> ;	構造体
   124                              <1> ;************************************************************************
   125                              <1> 
   126                              <1> ;-----------------------------------------------
   127                              <1> ;	ドライブパラメータ
   128                              <1> ;-----------------------------------------------
   129                              <1> struc drive
   130 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
   131 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
   132 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
   133 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
   134                              <1> endstruc
   135                              <1> 
   136                              <1> ;-----------------------------------------------
   137                              <1> ;	リングバッファ
   138                              <1> ;-----------------------------------------------
   139                              <1> %define		RING_ITEM_SIZE		(1 << 4)
   140                              <1> %define		RING_INDEX_MASK		(RING_ITEM_SIZE - 1)
   141                              <1> 
   142                              <1> struc ring_buff
   143 00000000 ????????            <1> 		.rp				resd	1				; RP:書き込み位置
   144 00000004 ????????            <1> 		.wp				resd	1				; WP:読み込み位置
   145 00000008 <res 10h>           <1> 		.item			resb	RING_ITEM_SIZE	; バッファ
   146                              <1> endstruc
   147                              <1> 
   148                              <1> ;-----------------------------------------------
   149                              <1> ;	バラ曲線描画パラメータ
   150                              <1> ;-----------------------------------------------
   151                              <1> struc rose
   152 00000000 ????????            <1> 		.x0				resd	1				; 左上座標：X0
   153 00000004 ????????            <1> 		.y0				resd	1				; 左上座標：Y0
   154 00000008 ????????            <1> 		.x1				resd	1				; 右下座標：X1
   155 0000000C ????????            <1> 		.y1				resd	1				; 右下座標：Y1
   156                              <1> 
   157 00000010 ????????            <1> 		.n				resd	1				; 変数：n
   158 00000014 ????????            <1> 		.d				resd	1				; 変数：d
   159                              <1> 
   160 00000018 ????????            <1> 		.color_x		resd	1				; 描画色：X軸
   161 0000001C ????????            <1> 		.color_y		resd	1				; 描画色：Y軸
   162 00000020 ????????            <1> 		.color_z		resd	1				; 描画色：枠
   163 00000024 ????????            <1> 		.color_s		resd	1				; 描画色：文字
   164 00000028 ????????            <1> 		.color_f		resd	1				; 描画色：グラフ描画色
   165 0000002C ????????            <1> 		.color_b		resd	1				; 描画色：グラフ消去色
   166                              <1> 
   167 00000030 <res 10h>           <1> 		.title			resb	16				; タイトル
   168                              <1> endstruc
   169                              <1> 
    12                                  
    13                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    14                                  
    15                                  [BITS 32]
    16                                  ;************************************************************************
    17                                  ;	エントリポイント
    18                                  ;************************************************************************
    19                                  kernel:
    20                                  		;---------------------------------------
    21                                  		; フォントアドレスを取得
    22                                  		;---------------------------------------
    23 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    24 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    25 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    26 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    27 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    28 00000011 A3[C4000000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    29                                  
    30                                  		;---------------------------------------
    31                                  		; 初期化
    32                                  		;---------------------------------------
    33 00000016 E873060000              		cdecl	init_int						; // 割り込みベクタの初期化
    34 0000001B E8F4070000              		cdecl	init_pic						; // 割り込みコントローラの初期化
    35                                  
    36 00000020 5057BF00001000B8-       		set_vect	0x00, int_zero_div			; // 割り込み処理の登録：0除算
    36 00000028 [F6070000]668907C1-
    36 00000030 E810668947065F58   
    37 00000038 5057BF40011000B8-       		set_vect	0x28, int_rtc				; // 割り込み処理の登録：RTC
    37 00000040 [53080000]668907C1-
    37 00000048 E810668947065F58   
    38                                  
    39                                  		;---------------------------------------
    40                                  		; デバイスの割り込み許可
    41                                  		;---------------------------------------
    42 00000050 6A10E8E80700006683-     		cdecl	rtc_int_en, 0x10				; rtc_int_en(UIE); // 更新サイクル終了割り込み許可
    42 00000059 C404               
    43                                  
    44                                  		;---------------------------------------
    45                                  		; IMR(割り込みマスクレジスタ)の設定
    46                                  		;---------------------------------------
    47                                  		outp	0x21, 0b_1111_1011				; // 割り込み有効：スレーブPIC
    69 0000005B B0FB                <1>  mov al, %2
    70 0000005D E621                <1>  out %1, al
    48                                  		outp	0xA1, 0b_1111_1110				; // 割り込み有効：RTC
    69 0000005F B0FE                <1>  mov al, %2
    70 00000061 E6A1                <1>  out %1, al
    49                                  
    50                                  		;---------------------------------------
    51                                  		; CPUの割り込み許可
    52                                  		;---------------------------------------
    53 00000063 FB                      		sti										; // 割り込み許可
    54                                  
    55                                  		;---------------------------------------
    56                                  		; フォントの一覧表示
    57                                  		;---------------------------------------
    58 00000064 6A0D6A3FE8D6010000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
    58 0000006D 6683C408           
    59 00000071 6A046A3FE857020000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
    59 0000007A 6683C408           
    60                                  
    61                                  		;---------------------------------------
    62                                  		; 文字列の表示
    63                                  		;---------------------------------------
    64 0000007E 68[B1000000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
    64 00000086 00006A0E6A19E8F701-
    64 0000008F 00006683C410       
    65                                  
    66                                  		;---------------------------------------
    67                                  		; 時刻の表示
    68                                  		;---------------------------------------
    69                                  .10L:											; do
    70                                  												; {
    71 00000095 A1[C8000000]            		mov		eax, [RTC_TIME]					;   // 時刻の取得
    72 0000009A 5068000700006A006A-     		cdecl	draw_time, 72, 0, 0x0700, eax	;   // 時刻の表示
    72 000000A3 48E8470500006683C4-
    72 000000AC 10                 
    73                                  												;   
    74 000000AD EBE6                    		jmp		.10L							; } while (1);
    75                                  
    76                                  		;---------------------------------------
    77                                  		; 処理の終了
    78                                  		;---------------------------------------
    79 000000AF EBFE                    		jmp		$								; while (1) ; // 無限ループ
    80                                  
    81 000000B1 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
    81 000000BA 65726E656C212000   
    82                                  
    83 000000C2 00<rep 2h>              ALIGN 4, db 0
    84 000000C4 00000000                FONT_ADR:	dd	0
    85 000000C8 00000000                RTC_TIME:	dd	0
    86                                  
    87                                  ;************************************************************************
    88                                  ;	モジュール
    89                                  ;************************************************************************
    90                                  %include	"../modules/protect/vga.s"
    91                              <1> ;************************************************************************
    92                              <1> ;	読み込みプレーンの選択
    93                              <1> ;========================================================================
    94                              <1> ;■書式		: void vga_set_read_plane(plane);
    95                              <1> ;
    96                              <1> ;■引数
    97                              <1> ;	plane	: 読み込みプレーン
    98                              <1> ;
    99                              <1> ;■戻り値	: 無し
   100                              <1> ;************************************************************************
   101                              <1> vga_set_read_plane:
   102                              <1> 		;---------------------------------------
   103                              <1> 		; 【スタックフレームの構築】
   104                              <1> 		;---------------------------------------
   105                              <1> 												; EBP+ 8| プレーン（インデックス）
   106                              <1> 												; ------+----------------
   107 000000CC 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   108 000000CD 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   109                              <1> 												; ------+----------------
   110                              <1> 
   111                              <1> 		;---------------------------------------
   112                              <1> 		; 【レジスタの保存】
   113                              <1> 		;---------------------------------------
   114 000000CF 50                  <1> 		push	eax
   115 000000D0 52                  <1> 		push	edx
   116                              <1> 
   117                              <1> 		;---------------------------------------
   118                              <1> 		; 読み込みプレーンの選択
   119                              <1> 		;---------------------------------------
   120 000000D1 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
   121 000000D4 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
   122 000000D7 B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
   123 000000D9 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
   124 000000DD 66EF                <1> 		out		dx, ax							; // ポート出力
   125                              <1> 
   126                              <1> 		;---------------------------------------
   127                              <1> 		; 【レジスタの復帰】
   128                              <1> 		;---------------------------------------
   129 000000DF 5A                  <1> 		pop		edx
   130 000000E0 58                  <1> 		pop		eax
   131                              <1> 
   132                              <1> 		;---------------------------------------
   133                              <1> 		; 【スタックフレームの破棄】
   134                              <1> 		;---------------------------------------
   135 000000E1 89EC                <1> 		mov		esp, ebp
   136 000000E3 5D                  <1> 		pop		ebp
   137                              <1> 
   138 000000E4 C3                  <1> 		ret
   139                              <1> 
   140                              <1> 
   141                              <1> ;************************************************************************
   142                              <1> ;	書き込みプレーンを選択
   143                              <1> ;========================================================================
   144                              <1> ;■書式		: void vga_set_write_plane(plane);
   145                              <1> ;
   146                              <1> ;■引数
   147                              <1> ;	plane	: 書き込みプレーン
   148                              <1> ;
   149                              <1> ;■戻り値	: 無し
   150                              <1> ;************************************************************************
   151                              <1> vga_set_write_plane:
   152                              <1> 		;---------------------------------------
   153                              <1> 		; 【スタックフレームの構築】
   154                              <1> 		;---------------------------------------
   155                              <1> 												; EBP+ 8| プレーン（ビット指定）
   156                              <1> 												; ------+----------------
   157 000000E5 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   158 000000E6 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   159                              <1> 												; ------+----------------
   160                              <1> 
   161                              <1> 		;---------------------------------------
   162                              <1> 		; 【レジスタの保存】
   163                              <1> 		;---------------------------------------
   164 000000E8 50                  <1> 		push	eax
   165 000000E9 52                  <1> 		push	edx
   166                              <1> 
   167                              <1> 		;---------------------------------------
   168                              <1> 		; 書き込みプレーンの選択
   169                              <1> 		;---------------------------------------
   170 000000EA 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
   171 000000ED 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
   172 000000F0 B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
   173 000000F2 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
   174 000000F6 66EF                <1> 		out		dx, ax							; // ポート出力
   175                              <1> 
   176                              <1> 		;---------------------------------------
   177                              <1> 		; 【レジスタの復帰】
   178                              <1> 		;---------------------------------------
   179 000000F8 5A                  <1> 		pop		edx
   180 000000F9 58                  <1> 		pop		eax
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; 【スタックフレームの破棄】
   184                              <1> 		;---------------------------------------
   185 000000FA 89EC                <1> 		mov		esp, ebp
   186 000000FC 5D                  <1> 		pop		ebp
   187                              <1> 
   188 000000FD C3                  <1> 		ret
   189                              <1> 
   190                              <1> 
   191                              <1> ;************************************************************************
   192                              <1> ;	フォントの書き込み
   193                              <1> ;========================================================================
   194                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   195                              <1> ;
   196                              <1> ;■引数
   197                              <1> ;	font	: FONTアドレス
   198                              <1> ;	vram	: VRAMアドレス
   199                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   200                              <1> ;	color	: 描画色
   201                              <1> ;
   202                              <1> ;■戻り値	: 無し
   203                              <1> ;************************************************************************
   204                              <1> vram_font_copy:
   205                              <1> 		;---------------------------------------
   206                              <1> 		; 【スタックフレームの構築】
   207                              <1> 		;---------------------------------------
   208                              <1> 												; EBP+20| 色（背景/前景色）
   209                              <1> 												; EBP+16| プレーン（ビット指定）
   210                              <1> 												; EBP+12| VRAMアドレス
   211                              <1> 												; EBP+ 8| FONTアドレス
   212                              <1> 												; ------+----------------
   213 000000FE 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   214 000000FF 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   215                              <1> 												; ------+----------------
   216                              <1> 
   217                              <1> 		;---------------------------------------
   218                              <1> 		; 【レジスタの保存】
   219                              <1> 		;---------------------------------------
   220 00000101 50                  <1> 		push	eax
   221 00000102 53                  <1> 		push	ebx
   222 00000103 51                  <1> 		push	ecx
   223 00000104 52                  <1> 		push	edx
   224 00000105 56                  <1> 		push	esi
   225 00000106 57                  <1> 		push	edi
   226                              <1> 
   227                              <1> 		;---------------------------------------
   228                              <1> 		; 【処理の開始】
   229                              <1> 		;---------------------------------------
   230 00000107 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   231 0000010A 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   232 0000010D 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   233 00000111 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   234                              <1> 
   235 00000115 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   236 00000117 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   237 0000011A FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   238                              <1> 
   239 0000011C 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   240 0000011E 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   241 00000121 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   242                              <1> 
   243                              <1> 		;---------------------------------------
   244                              <1> 		; 16ドットフォントのコピー
   245                              <1> 		;---------------------------------------
   246 00000123 FC                  <1> 		cld										; DF  = 0; // アドレス加算
   247                              <1> 
   248 00000124 B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   249                              <1> .10L:											; do
   250                              <1> 												; {
   251                              <1> 		;---------------------------------------
   252                              <1> 		; フォントマスクの作成
   253                              <1> 		;---------------------------------------
   254 00000129 AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   255 0000012A 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   256 0000012C F6D4                <1> 		not		ah								;   
   257                              <1> 
   258                              <1> 		;---------------------------------------
   259                              <1> 		; 前景色
   260                              <1> 		;---------------------------------------
   261 0000012E 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   262                              <1> 
   263                              <1> 		;---------------------------------------
   264                              <1> 		; 背景色
   265                              <1> 		;---------------------------------------
   266 00000130 F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   267 00000136 7404                <1> 		jz		.11F							;   {
   268 00000138 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   269 0000013A EB02                <1> 		jmp		.11E							;   }
   270                              <1> .11F:											;   else
   271                              <1> 												;   {
   272 0000013C 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   273                              <1> .11E:											;   }
   274                              <1> 
   275                              <1> 		;---------------------------------------
   276                              <1> 		; 前景色と背景色を合成
   277                              <1> 		;---------------------------------------
   278 0000013E 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   279                              <1> 
   280                              <1> 		;---------------------------------------
   281                              <1> 		; 新しい値を出力
   282                              <1> 		;---------------------------------------
   283 00000140 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   284                              <1> 
   285 00000142 83C750              <1> 		add		edi, 80							;   EDI += 80;
   286 00000145 E2E2                <1> 		loop	.10L							; } while (--ECX);
   287                              <1> .10E:											; 
   288                              <1> 
   289                              <1> 		;---------------------------------------
   290                              <1> 		; 【レジスタの復帰】
   291                              <1> 		;---------------------------------------
   292 00000147 5F                  <1> 		pop		edi
   293 00000148 5E                  <1> 		pop		esi
   294 00000149 5A                  <1> 		pop		edx
   295 0000014A 59                  <1> 		pop		ecx
   296 0000014B 5B                  <1> 		pop		ebx
   297 0000014C 58                  <1> 		pop		eax
   298                              <1> 
   299                              <1> 		;---------------------------------------
   300                              <1> 		; 【スタックフレームの破棄】
   301                              <1> 		;---------------------------------------
   302 0000014D 89EC                <1> 		mov		esp, ebp
   303 0000014F 5D                  <1> 		pop		ebp
   304                              <1> 
   305 00000150 C3                  <1> 		ret
   306                              <1> 
   307                              <1> 
   308                              <1> ;************************************************************************
   309                              <1> ;	ビットパターンの書き込み
   310                              <1> ;========================================================================
   311                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   312                              <1> ;
   313                              <1> ;■引数
   314                              <1> ;	bit		: 出力ビットパターン
   315                              <1> ;	vram	: VRAMアドレス
   316                              <1> ;	flag	: 1:セット, 0:クリア
   317                              <1> ;
   318                              <1> ;■戻り値	: 無し
   319                              <1> ;************************************************************************
   320                              <1> vram_bit_copy:
   321                              <1> 		;---------------------------------------
   322                              <1> 		; 【スタックフレームの構築】
   323                              <1> 		;---------------------------------------
   324                              <1> 												; EBP+20| 色（背景/前景色）
   325                              <1> 												; EBP+16| プレーン（ビット指定）
   326                              <1> 												; EBP+12| VRAMアドレス
   327                              <1> 												; EBP+ 8| 出力ビットパターン
   328                              <1> 												; ------+----------------
   329 00000151 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   330 00000152 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   331                              <1> 												; ------+----------------
   332                              <1> 
   333                              <1> 		;---------------------------------------
   334                              <1> 		; 【レジスタの保存】
   335                              <1> 		;---------------------------------------
   336 00000154 50                  <1> 		push	eax
   337 00000155 53                  <1> 		push	ebx
   338 00000156 57                  <1> 		push	edi
   339                              <1> 
   340                              <1> 		;---------------------------------------
   341                              <1> 		; 【処理の開始】
   342                              <1> 		;---------------------------------------
   343 00000157 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   344 0000015A 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   345 0000015E 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   346                              <1> 
   347 00000162 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   348 00000164 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   349 00000167 FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   350                              <1> 
   351                              <1> 		;---------------------------------------
   352                              <1> 		; マスクデータの作成
   353                              <1> 		;---------------------------------------
   354 00000169 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   355 0000016C 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   356 0000016E F6D4                <1> 		not		ah								; 
   357                              <1> 
   358                              <1> 		;---------------------------------------
   359                              <1> 		; 現在値の出力を取得
   360                              <1> 		;---------------------------------------
   361 00000170 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   362 00000172 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   363 00000174 08E0                <1> 		or		al, ah							; AL |= AH;
   364                              <1> 
   365                              <1> 		;---------------------------------------
   366                              <1> 		; 新しい値を出力
   367                              <1> 		;---------------------------------------
   368 00000176 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   369                              <1> 
   370                              <1> 		;---------------------------------------
   371                              <1> 		; 【レジスタの復帰】
   372                              <1> 		;---------------------------------------
   373 00000178 5F                  <1> 		pop		edi
   374 00000179 5B                  <1> 		pop		ebx
   375 0000017A 58                  <1> 		pop		eax
   376                              <1> 
   377                              <1> 		;---------------------------------------
   378                              <1> 		; 【スタックフレームの破棄】
   379                              <1> 		;---------------------------------------
   380 0000017B 89EC                <1> 		mov		esp, ebp
   381 0000017D 5D                  <1> 		pop		ebp
   382                              <1> 
   383 0000017E C3                  <1> 		ret
    91                                  %include	"../modules/protect/draw_char.s"
    92                              <1> ;************************************************************************
    93                              <1> ;	文字の表示
    94                              <1> ;------------------------------------------------------------------------
    95                              <1> ;	グラフィックスモードでテキストを表示
    96                              <1> ;========================================================================
    97                              <1> ;■書式		: void draw_char(col, row, color, ch);
    98                              <1> ;
    99                              <1> ;■引数
   100                              <1> ;	col		: 列（0～79）
   101                              <1> ;	row		: 行（0～29）
   102                              <1> ;	color	: 描画色
   103                              <1> ;	ch		: 文字
   104                              <1> ;
   105                              <1> ;■戻り値	: 無し
   106                              <1> ;************************************************************************
   107                              <1> draw_char:
   108                              <1> 		;---------------------------------------
   109                              <1> 		; 【スタックフレームの構築】
   110                              <1> 		;---------------------------------------
   111                              <1> 												; ------|--------
   112                              <1> 												; EBP+20| 文字
   113                              <1> 												; EBP+16| 色
   114                              <1> 												; EBP+12| Y（行）
   115                              <1> 												; EBP+ 8| X（列）
   116                              <1> 												; ------+----------------
   117 0000017F 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   118 00000180 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   119                              <1> 												; ------+----------------
   120                              <1> 
   121                              <1> 		;---------------------------------------
   122                              <1> 		; 【レジスタの保存】
   123                              <1> 		;---------------------------------------
   124 00000182 50                  <1> 		push	eax
   125 00000183 53                  <1> 		push	ebx
   126 00000184 51                  <1> 		push	ecx
   127 00000185 52                  <1> 		push	edx
   128 00000186 56                  <1> 		push	esi
   129 00000187 57                  <1> 		push	edi
   130                              <1> 
   131                              <1> 		;---------------------------------------
   132                              <1> 		; テストアンドセット
   133                              <1> 		;---------------------------------------
   134                              <1> %ifdef	USE_TEST_AND_SET
   135                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   136                              <1> %endif
   137                              <1> 
   138                              <1> 		;---------------------------------------
   139                              <1> 		; コピー元フォントアドレスを設定
   140                              <1> 		;---------------------------------------
   141 00000188 0FB67514            <1> 		movzx	esi, byte [ebp +20]				; CL  = 文字コード;
   142 0000018C C1E604              <1> 		shl		esi, 4							; CL *= 16; // 1文字16バイト
   143 0000018F 0335[C4000000]      <1> 		add		esi, [FONT_ADR]					; ESI = フォントアドレス;
   144                              <1> 
   145                              <1> 		;---------------------------------------
   146                              <1> 		; コピー先アドレスを取得
   147                              <1> 		; Adr = 0xA0000 + (640 / 8 * 16) * y + x
   148                              <1> 		;---------------------------------------
   149 00000195 8B7D0C              <1> 		mov		edi, [ebp +12]					; Y（行）
   150 00000198 C1E708              <1> 		shl		edi, 8							; EDI = Y * 256;
   151 0000019B 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA0000]	; EDI = Y *   4 + Y;
   152 000001A2 037D08              <1> 		add		edi, [ebp + 8]					; X（列）
   153                              <1> 
   154                              <1> 		;---------------------------------------
   155                              <1> 		; 1文字分のフォントを出力
   156                              <1> 		;---------------------------------------
   157 000001A5 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
   158                              <1> 
   159 000001A9 6A03E81CFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
   159 000001B2 C404                <1>
   160 000001B4 6A08E82AFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
   160 000001BD C404                <1>
   161 000001BF 536A085756E835FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
   161 000001C8 FF6683C410          <1>
   162                              <1> 
   163 000001CD 6A02E8F8FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
   163 000001D6 C404                <1>
   164 000001D8 6A04E806FFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
   164 000001E1 C404                <1>
   165 000001E3 536A045756E811FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
   165 000001EC FF6683C410          <1>
   166                              <1> 
   167 000001F1 6A01E8D4FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
   167 000001FA C404                <1>
   168 000001FC 6A02E8E2FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
   168 00000205 C404                <1>
   169 00000207 536A025756E8EDFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
   169 00000210 FF6683C410          <1>
   170                              <1> 
   171 00000215 6A00E8B0FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
   171 0000021E C404                <1>
   172 00000220 6A01E8BEFEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
   172 00000229 C404                <1>
   173 0000022B 536A015756E8C9FEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
   173 00000234 FF6683C410          <1>
   174                              <1> 
   175                              <1> %ifdef	USE_TEST_AND_SET
   176                              <1> 		;---------------------------------------
   177                              <1> 		; テストアンドセット
   178                              <1> 		;---------------------------------------
   179                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   180                              <1> %endif
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; 【レジスタの復帰】
   184                              <1> 		;---------------------------------------
   185 00000239 5F                  <1> 		pop		edi
   186 0000023A 5E                  <1> 		pop		esi
   187 0000023B 5A                  <1> 		pop		edx
   188 0000023C 59                  <1> 		pop		ecx
   189 0000023D 5B                  <1> 		pop		ebx
   190 0000023E 58                  <1> 		pop		eax
   191                              <1> 
   192                              <1> 		;---------------------------------------
   193                              <1> 		; 【スタックフレームの破棄】
   194                              <1> 		;---------------------------------------
   195 0000023F 89EC                <1> 		mov		esp, ebp
   196 00000241 5D                  <1> 		pop		ebp
   197                              <1> 
   198 00000242 C3                  <1> 		ret
   199                              <1> 
   200                              <1> %ifdef USE_TEST_AND_SET
   201                              <1> ALIGN 4, db 0
   202                              <1> IN_USE:	dd	0
   203                              <1> %endif
   204                              <1> 
    92                                  %include	"../modules/protect/draw_font.s"
    93                              <1> ;************************************************************************
    94                              <1> ;	フォント一覧を表示
    95                              <1> ;========================================================================
    96                              <1> ;■書式		: void draw_font(col, row);
    97                              <1> ;
    98                              <1> ;■引数
    99                              <1> ;	col		: 列
   100                              <1> ;	row		: 行
   101                              <1> ;
   102                              <1> ;■戻り値	: 無し
   103                              <1> ;************************************************************************
   104                              <1> draw_font:
   105                              <1> 		;---------------------------------------
   106                              <1> 		; 【スタックフレームの構築】
   107                              <1> 		;---------------------------------------
   108                              <1> 												; ------|--------
   109                              <1> 												; EBP+12| Y（行）
   110                              <1> 												; EBP+ 8| X（列）
   111                              <1> 												; ---------------
   112 00000243 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   113 00000244 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   114                              <1> 												; ---------------
   115                              <1> 
   116                              <1> 		;---------------------------------------
   117                              <1> 		; 【レジスタの保存】
   118                              <1> 		;---------------------------------------
   119 00000246 50                  <1> 		push	eax
   120 00000247 53                  <1> 		push	ebx
   121 00000248 51                  <1> 		push	ecx
   122 00000249 52                  <1> 		push	edx
   123 0000024A 56                  <1> 		push	esi
   124 0000024B 57                  <1> 		push	edi
   125                              <1> 
   126                              <1> 		;---------------------------------------
   127                              <1> 		; 表示位置
   128                              <1> 		;---------------------------------------
   129 0000024C 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   130 0000024F 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   131                              <1> 
   132                              <1> 		;---------------------------------------
   133                              <1> 		; フォント一覧を表示
   134                              <1> 		;---------------------------------------
   135 00000252 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   136 00000257 81F900010000        <1> .10L:	cmp		ecx, 256						;      ECX < 256;
   137 0000025D 731F                <1> 		jae		.10E							; 
   138                              <1> 												;      ECX++)
   139                              <1> 												; {
   140                              <1> 												;   // 桁位置の計算
   141 0000025F 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   142 00000261 83E00F              <1> 		and		eax, 0x0F						;   EAX &= 0x0F
   143 00000264 01F0                <1> 		add		eax, esi						;   EAX += X;
   144                              <1> 												;   
   145                              <1> 												;   // 行位置の計算
   146 00000266 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   147 00000268 C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
   148 0000026B 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   149                              <1> 
   150 0000026D 516A075350E808FFFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
   150 00000276 FF6683C410          <1>
   151                              <1> 
   152 0000027B 41                  <1> 		inc		ecx								;   // for (... ECX++)
   153 0000027C EBD9                <1> 		jmp		.10L							; 
   154                              <1> .10E:											; }
   155                              <1> 
   156                              <1> 		;---------------------------------------
   157                              <1> 		; 【レジスタの復帰】
   158                              <1> 		;---------------------------------------
   159 0000027E 5F                  <1> 		pop		edi
   160 0000027F 5E                  <1> 		pop		esi
   161 00000280 5A                  <1> 		pop		edx
   162 00000281 59                  <1> 		pop		ecx
   163 00000282 5B                  <1> 		pop		ebx
   164 00000283 58                  <1> 		pop		eax
   165                              <1> 
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 【スタックフレームの破棄】
   168                              <1> 		;---------------------------------------
   169 00000284 89EC                <1> 		mov		esp, ebp
   170 00000286 5D                  <1> 		pop		ebp
   171                              <1> 
   172 00000287 C3                  <1> 		ret
   173                              <1> 
    93                                  %include	"../modules/protect/draw_str.s"
    94                              <1> ;************************************************************************
    95                              <1> ;	文字列の表示
    96                              <1> ;========================================================================
    97                              <1> ;■書式		: void draw_str(col, row, color, p);
    98                              <1> ;
    99                              <1> ;■引数
   100                              <1> ;	col		: 列
   101                              <1> ;	row		: 行
   102                              <1> ;	color	: 描画色
   103                              <1> ;	p		: 文字列のアドレス
   104                              <1> ;
   105                              <1> ;■戻り値	: 無し
   106                              <1> ;************************************************************************
   107                              <1> draw_str:
   108                              <1> 		;---------------------------------------
   109                              <1> 		; 【スタックフレームの構築】
   110                              <1> 		;---------------------------------------
   111                              <1> 												; ------|--------
   112                              <1> 												; EBP+20| *p（文字列のアドレス）
   113                              <1> 												; EBP+16| color（色）
   114                              <1> 												; EBP+12| row（行）
   115                              <1> 												; EBP+ 8| col（列）
   116                              <1> 												; ---------------
   117 00000288 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   118 00000289 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   119                              <1> 												; ---------------
   120                              <1> 
   121                              <1> 		;---------------------------------------
   122                              <1> 		; 【レジスタの保存】
   123                              <1> 		;---------------------------------------
   124 0000028B 50                  <1> 		push	eax
   125 0000028C 53                  <1> 		push	ebx
   126 0000028D 51                  <1> 		push	ecx
   127 0000028E 52                  <1> 		push	edx
   128 0000028F 56                  <1> 		push	esi
   129                              <1> 
   130                              <1> 		;---------------------------------------
   131                              <1> 		; 文字列の表示
   132                              <1> 		;---------------------------------------
   133 00000290 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
   134 00000293 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
   135 00000296 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
   136 0000029A 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
   137                              <1> 
   138 0000029D FC                  <1> 		cld										; DF = 0; // アドレス加算
   139                              <1> .10L:											; do
   140                              <1> 												; {
   141 0000029E AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
   142 0000029F 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   143 000002A1 7425                <1> 		je		.10E							;     break;
   144                              <1> 
   145                              <1> 		;---------------------------------------
   146                              <1> 		; 1文字表示
   147                              <1> 		;---------------------------------------
   148                              <1> %ifdef	USE_SYSTEM_CALL
   149                              <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
   150                              <1> %else
   151 000002A3 50535251E8D3FEFFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
   151 000002AC 6683C410            <1>
   152                              <1> %endif
   153                              <1> 
   154                              <1> 		; 次の文字の位置を調整
   155 000002B0 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
   156 000002B1 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
   157 000002B4 7C10                <1> 		jl		.12E							;   {
   158 000002B6 B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
   159 000002BB 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
   160 000002BC 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
   161 000002BF 7C05                <1> 		jl		.12E							;     {
   162 000002C1 BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
   163                              <1> 												;     }
   164                              <1> .12E:											;   }
   165 000002C6 EBD6                <1> 		jmp		.10L							;   
   166                              <1> .10E:											; } while (1);
   167                              <1> 
   168                              <1> 		;---------------------------------------
   169                              <1> 		; 【レジスタの復帰】
   170                              <1> 		;---------------------------------------
   171 000002C8 5E                  <1> 		pop		esi
   172 000002C9 5A                  <1> 		pop		edx
   173 000002CA 59                  <1> 		pop		ecx
   174 000002CB 5B                  <1> 		pop		ebx
   175 000002CC 58                  <1> 		pop		eax
   176                              <1> 
   177                              <1> 		;---------------------------------------
   178                              <1> 		; 【スタックフレームの破棄】
   179                              <1> 		;---------------------------------------
   180 000002CD 89EC                <1> 		mov		esp, ebp
   181 000002CF 5D                  <1> 		pop		ebp
   182                              <1> 
   183 000002D0 C3                  <1> 		ret
   184                              <1> 
    94                                  %include	"../modules/protect/draw_color_bar.s"
    95                              <1> ;************************************************************************
    96                              <1> ;	カラーバーの表示
    97                              <1> ;========================================================================
    98                              <1> ;■書式		: void draw_color_bar(col, row);
    99                              <1> ;
   100                              <1> ;■引数
   101                              <1> ;	col		: 列
   102                              <1> ;	row		: 行
   103                              <1> ;
   104                              <1> ;■戻り値	: 無し
   105                              <1> ;************************************************************************
   106                              <1> draw_color_bar:
   107                              <1> 		;---------------------------------------
   108                              <1> 		; 【スタックフレームの構築】
   109                              <1> 		;---------------------------------------
   110                              <1> 												; ------|--------
   111                              <1> 												; EBP+ 8| X（列）
   112                              <1> 												; EBP+12| Y（行）
   113                              <1> 												; ---------------
   114 000002D1 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   115 000002D2 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   116                              <1> 												; ---------------
   117                              <1> 		;---------------------------------------
   118                              <1> 		; 【レジスタの保存】
   119                              <1> 		;---------------------------------------
   120 000002D4 50                  <1> 		push	eax
   121 000002D5 53                  <1> 		push	ebx
   122 000002D6 51                  <1> 		push	ecx
   123 000002D7 52                  <1> 		push	edx
   124 000002D8 56                  <1> 		push	esi
   125 000002D9 57                  <1> 		push	edi
   126                              <1> 
   127                              <1> 		;---------------------------------------
   128                              <1> 		; 表示位置
   129                              <1> 		;---------------------------------------
   130 000002DA 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   131 000002DD 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   132                              <1> 
   133                              <1> 		;---------------------------------------
   134                              <1> 		; カラーバーを表示
   135                              <1> 		;---------------------------------------
   136 000002E0 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   137 000002E5 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
   138 000002E8 732E                <1> 		jae		.10E							; 
   139                              <1> 												;      ECX++)
   140                              <1> 												; {
   141                              <1> 												;   // 桁位置の計算
   142 000002EA 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   143 000002EC 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
   144 000002EF C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
   145 000002F2 01F0                <1> 		add		eax, esi						;   EAX += X;
   146                              <1> 												;   
   147                              <1> 												;   // 行位置の計算
   148 000002F4 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   149 000002F6 D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
   150 000002F8 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   151                              <1> 												;   
   152                              <1> 												;   // 表示色の取得
   153 000002FA 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
   154 000002FC D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
   155 000002FE 8B92[2B030000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
   156                              <1> 
   157 00000304 68[22030000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
   157 0000030C E877FFFFFF6683C410  <1>
   158                              <1> 
   159 00000315 41                  <1> 		inc		ecx								;   // for (... ECX++)
   160 00000316 EBCD                <1> 		jmp		.10L							; 
   161                              <1> .10E:											; }
   162                              <1> 
   163                              <1> 		;---------------------------------------
   164                              <1> 		; 【レジスタの復帰】
   165                              <1> 		;---------------------------------------
   166 00000318 5F                  <1> 		pop		edi
   167 00000319 5E                  <1> 		pop		esi
   168 0000031A 5A                  <1> 		pop		edx
   169 0000031B 59                  <1> 		pop		ecx
   170 0000031C 5B                  <1> 		pop		ebx
   171 0000031D 58                  <1> 		pop		eax
   172                              <1> 
   173                              <1> 		;---------------------------------------
   174                              <1> 		; 【スタックフレームの破棄】
   175                              <1> 		;---------------------------------------
   176 0000031E 89EC                <1> 		mov		esp, ebp
   177 00000320 5D                  <1> 		pop		ebp
   178                              <1> 
   179 00000321 C3                  <1> 		ret
   180                              <1> 
   181 00000322 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
   182                              <1> 
   183 0000032B 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
   184 0000032F 00010009            <1> 		dw	0x0100, 0x0900
   185 00000333 0002000A            <1> 		dw	0x0200, 0x0A00
   186 00000337 0003000B            <1> 		dw	0x0300, 0x0B00
   187 0000033B 0004000C            <1> 		dw	0x0400, 0x0C00
   188 0000033F 0005000D            <1> 		dw	0x0500, 0x0D00
   189 00000343 0006000E            <1> 		dw	0x0600, 0x0E00
   190 00000347 0007000F            <1> 		dw	0x0700, 0x0F00
   191                              <1> 
    95                                  %include	"../modules/protect/draw_pixel.s"
    96                              <1> ;************************************************************************
    97                              <1> ;	ピクセルの描画
    98                              <1> ;========================================================================
    99                              <1> ;■書式		: void draw_pixel(X, Y, color);
   100                              <1> ;
   101                              <1> ;■引数
   102                              <1> ;	X		: X座標
   103                              <1> ;	Y		: Y座標
   104                              <1> ;	color	: 描画色
   105                              <1> ;
   106                              <1> ;■戻り値	: 無し
   107                              <1> ;************************************************************************
   108                              <1> draw_pixel:
   109                              <1> 		;---------------------------------------
   110                              <1> 		; 【スタックフレームの構築】
   111                              <1> 		;---------------------------------------
   112                              <1> 												; ------|--------
   113                              <1> 												; EBP+16| 色
   114                              <1> 												; EBP+12| Y
   115                              <1> 												; EBP+ 8| X
   116                              <1> 												; ------|--------
   117 0000034B 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   118 0000034C 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   119                              <1> 												; ------+--------
   120                              <1> 		;---------------------------------------
   121                              <1> 		; 【レジスタの保存】
   122                              <1> 		;---------------------------------------
   123 0000034E 50                  <1> 		push	eax
   124 0000034F 53                  <1> 		push	ebx
   125 00000350 51                  <1> 		push	ecx
   126 00000351 57                  <1> 		push	edi
   127                              <1> 
   128                              <1> 		;---------------------------------------
   129                              <1> 		; Y座標を80倍する（640/8）
   130                              <1> 		;---------------------------------------
   131 00000352 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI  = Y座標
   132 00000355 C1E704              <1> 		shl		edi, 4							; EDI *= 16;
   133 00000358 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA_0000]	; EDI  = 0xA00000[EDI * 4 + EDI];
   134                              <1> 
   135                              <1> 		;---------------------------------------
   136                              <1> 		; X座標を1/8して加算
   137                              <1> 		;---------------------------------------
   138 0000035F 8B5D08              <1> 		mov		ebx, [ebp + 8]					; EBX  = X座標;
   139 00000362 89D9                <1> 		mov		ecx, ebx						; ECX  = X座標;（一時保存）
   140 00000364 C1EB03              <1> 		shr		ebx, 3							; EBX /= 8;
   141 00000367 01DF                <1> 		add		edi, ebx						; EDI += EBX;
   142                              <1> 
   143                              <1> 		;---------------------------------------
   144                              <1> 		; X座標を8で割った余りからビット位置を計算
   145                              <1> 		; (0=0x80, 1=0x40,... 7=0x01)
   146                              <1> 		;---------------------------------------
   147 00000369 83E107              <1> 		and		ecx, 0x07						; ECX = X & 0x07;
   148 0000036C BB80000000          <1> 		mov		ebx, 0x80						; EBX = 0x80;
   149 00000371 D3EB                <1> 		shr		ebx, cl							; EBX >>= ECX;
   150                              <1> 
   151                              <1> 		;---------------------------------------
   152                              <1> 		; 色指定
   153                              <1> 		;---------------------------------------
   154 00000373 8B4D10              <1> 		mov		ecx, [ebp +16]					; // 表示色
   155                              <1> 
   156                              <1> %ifdef	USE_TEST_AND_SET
   157                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   158                              <1> %endif
   159                              <1> 
   160                              <1> 		;---------------------------------------
   161                              <1> 		; プレーン毎に出力
   162                              <1> 		;---------------------------------------
   163 00000376 6A03E84FFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 輝度(I)プレーンを選択
   163 0000037F C404                <1>
   164 00000381 6A08E85DFDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 輝度(I)プレーンを選択
   164 0000038A C404                <1>
   165 0000038C 516A085753E8BBFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
   165 00000395 FF6683C410          <1>
   166                              <1> 
   167 0000039A 6A02E82BFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 赤(R)プレーンを選択
   167 000003A3 C404                <1>
   168 000003A5 6A04E839FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 赤(R)プレーンを選択
   168 000003AE C404                <1>
   169 000003B0 516A045753E897FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
   169 000003B9 FF6683C410          <1>
   170                              <1> 
   171 000003BE 6A01E807FDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 緑(G)プレーンを選択
   171 000003C7 C404                <1>
   172 000003C9 6A02E815FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 緑(G)プレーンを選択
   172 000003D2 C404                <1>
   173 000003D4 516A025753E873FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
   173 000003DD FF6683C410          <1>
   174                              <1> 
   175 000003E2 6A00E8E3FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 青(B)プレーンを選択
   175 000003EB C404                <1>
   176 000003ED 6A01E8F1FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 青(B)プレーンを選択
   176 000003F6 C404                <1>
   177 000003F8 516A015753E84FFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
   177 00000401 FF6683C410          <1>
   178                              <1> 
   179                              <1> 
   180                              <1> %ifdef	USE_TEST_AND_SET
   181                              <1> 		;---------------------------------------
   182                              <1> 		; テストアンドセット
   183                              <1> 		;---------------------------------------
   184                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   185                              <1> %endif
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 【レジスタの復帰】
   189                              <1> 		;---------------------------------------
   190 00000406 5F                  <1> 		pop		edi
   191 00000407 59                  <1> 		pop		ecx
   192 00000408 5B                  <1> 		pop		ebx
   193 00000409 58                  <1> 		pop		eax
   194                              <1> 
   195                              <1> 		;---------------------------------------
   196                              <1> 		; 【スタックフレームの破棄】
   197                              <1> 		;---------------------------------------
   198 0000040A 89EC                <1> 		mov		esp, ebp
   199 0000040C 5D                  <1> 		pop		ebp
   200                              <1> 
   201 0000040D C3                  <1> 		ret
   202                              <1> 
    96                                  %include	"../modules/protect/draw_line.s"
    97                              <1> ;************************************************************************
    98                              <1> ;	直線の描画
    99                              <1> ;========================================================================
   100                              <1> ;■書式		: void draw_line(X0, Y0, X1, Y1, color);
   101                              <1> ;
   102                              <1> ;■引数
   103                              <1> ;	X0		: 始点のX座標
   104                              <1> ;	Y0		: 始点のY座標
   105                              <1> ;	X1		: 終点のX座標
   106                              <1> ;	Y1		: 終点のY座標
   107                              <1> ;	color	: 描画色
   108                              <1> ;
   109                              <1> ;■戻り値	: 無し
   110                              <1> ;************************************************************************
   111                              <1> draw_line:
   112                              <1> 		;---------------------------------------
   113                              <1> 		; 【スタックフレームの構築】
   114                              <1> 		;---------------------------------------
   115                              <1> 												; ---------------
   116                              <1> 												;    +24| 色
   117                              <1> 												;    +20| Y1
   118                              <1> 												;    +16| X1
   119                              <1> 												;    +12| Y0
   120                              <1> 												;    + 8| X0
   121                              <1> 												; ---------------
   122 0000040E 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   123 0000040F 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   124                              <1> 												; ---------------
   125 00000411 6A00                <1> 		push	dword 0							;    - 4| sum   = 0; // 相対軸の積算値
   126 00000413 6A00                <1> 		push	dword 0							;    - 8| x0    = 0; // X座標
   127 00000415 6A00                <1> 		push	dword 0							;    -12| dx    = 0; // X増分
   128 00000417 6A00                <1> 		push	dword 0							;    -16| inc_x = 0; // X座標増分(1 or -1)
   129 00000419 6A00                <1> 		push	dword 0							;    -20| y0    = 0; // Y座標
   130 0000041B 6A00                <1> 		push	dword 0							;    -24| dy    = 0; // Y増分
   131 0000041D 6A00                <1> 		push	dword 0							;    -28| inc_y = 0; // Y座標増分(1 or -1)
   132                              <1> 												; ------|--------
   133                              <1> 
   134                              <1> 		;---------------------------------------
   135                              <1> 		; 【レジスタの保存】
   136                              <1> 		;---------------------------------------
   137 0000041F 50                  <1> 		push	eax
   138 00000420 53                  <1> 		push	ebx
   139 00000421 51                  <1> 		push	ecx
   140 00000422 52                  <1> 		push	edx
   141 00000423 56                  <1> 		push	esi
   142 00000424 57                  <1> 		push	edi
   143                              <1> 
   144                              <1> 		;---------------------------------------
   145                              <1> 		; 幅を計算（X軸）
   146                              <1> 		;---------------------------------------
   147 00000425 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   148 00000428 8B5D10              <1> 		mov		ebx, [ebp +16]					; EBX = X1;
   149 0000042B 29C3                <1> 		sub		ebx, eax						; EBX = X1 - X0; // 幅
   150 0000042D 7D09                <1> 		jge		.10F							; if (幅 < 0)
   151                              <1> 												; {
   152 0000042F F7DB                <1> 		neg		ebx								;   幅   *= -1;
   153 00000431 BEFFFFFFFF          <1> 		mov		esi, -1							;   // X座標の増分
   154 00000436 EB05                <1> 		jmp		.10E							; }
   155                              <1> .10F:											; else
   156                              <1> 												; {
   157 00000438 BE01000000          <1> 		mov		esi, 1							;   // X座標の増分
   158                              <1> .10E:											; }
   159                              <1> 
   160                              <1> 		;---------------------------------------
   161                              <1> 		; 高さを計算（Y軸）
   162                              <1> 		;---------------------------------------
   163 0000043D 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX = Y0
   164 00000440 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1
   165 00000443 29CA                <1> 		sub		edx, ecx						; EDX = Y1 - Y0; // 高さ
   166 00000445 7D09                <1> 		jge		.20F							; if (高さ < 0)
   167                              <1> 												; {
   168 00000447 F7DA                <1> 		neg		edx								;   高さ *= -1;
   169 00000449 BFFFFFFFFF          <1> 		mov		edi, -1							;   // Y座標の増分
   170 0000044E EB05                <1> 		jmp		.20E							; }
   171                              <1> .20F:											; else
   172                              <1> 												; {
   173 00000450 BF01000000          <1> 		mov		edi, 1							;   // Y座標の増分
   174                              <1> .20E:											; }
   175                              <1> 
   176                              <1> 		;---------------------------------------
   177                              <1> 		; X軸
   178                              <1> 		;---------------------------------------
   179 00000455 8945F8              <1> 		mov		[ebp - 8], eax					;   // X軸:開始座標
   180 00000458 895DF4              <1> 		mov		[ebp -12], ebx					;   // X軸:描画幅
   181 0000045B 8975F0              <1> 		mov		[ebp -16], esi					;   // X軸:増分(基準軸：1 or -1)
   182                              <1> 
   183                              <1> 		;---------------------------------------
   184                              <1> 		; Y軸
   185                              <1> 		;---------------------------------------
   186 0000045E 894DEC              <1> 		mov		[ebp -20], ecx					;   // Y軸:開始座標
   187 00000461 8955E8              <1> 		mov		[ebp -24], edx					;   // Y軸:描画幅
   188 00000464 897DE4              <1> 		mov		[ebp -28], edi					;   // Y軸:増分(基準軸：1 or -1)
   189                              <1> 
   190                              <1> 		;---------------------------------------
   191                              <1> 		; 基準軸を決める
   192                              <1> 		;---------------------------------------
   193 00000467 39D3                <1> 		cmp		ebx, edx						; if (幅 <= 高さ)
   194 00000469 7F08                <1> 		jg		.22F							; {
   195                              <1> 												;   
   196 0000046B 8D75EC              <1> 		lea		esi, [ebp -20]					;   // Y軸が基準軸
   197 0000046E 8D7DF8              <1> 		lea		edi, [ebp - 8]					;   // X軸が相対軸
   198                              <1> 												;   
   199 00000471 EB06                <1> 		jmp		.22E							; }
   200                              <1> .22F:											; else
   201                              <1> 												; {
   202 00000473 8D75F8              <1> 		lea		esi, [ebp - 8]					;   // X軸が基準軸
   203 00000476 8D7DEC              <1> 		lea		edi, [ebp -20]					;   // Y軸が相対軸
   204                              <1> .22E:											; }
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; 繰り返し回数(基準軸のドット数)
   208                              <1> 		;---------------------------------------
   209 00000479 8B4EFC              <1> 		mov		ecx, [esi - 4]					; ECX = 基準軸描画幅;
   210 0000047C 83F900              <1> 		cmp		ecx, 0							; if (0 == ECX)
   211 0000047F 7505                <1> 		jnz		.30E							; {
   212 00000481 B901000000          <1> 		mov		ecx, 1							;   ECX = 1;
   213                              <1> .30E:											; }
   214                              <1> 
   215                              <1> 		;---------------------------------------
   216                              <1> 		; 線を描画
   217                              <1> 		;---------------------------------------
   218                              <1> .50L:											; do
   219                              <1> 												; {
   220                              <1> %ifdef	USE_SYSTEM_CALL
   221                              <1> 		mov		eax, ecx						;   // 繰り返し回数を保存
   222                              <1> 
   223                              <1> 		mov		ebx, [ebp +24]					;   EBX = 表示色;
   224                              <1> 		mov		ecx, [ebp - 8]					;   ECX = X座標;
   225                              <1> 		mov		edx, [ebp -20]					;   EDX = Y座標;
   226                              <1> 		int		0x82							;   sys_call(1, X, Y, 色, 文字); BX(C), CX(X), DX(Y)
   227                              <1> 
   228                              <1> 		mov		ecx, eax
   229                              <1> %else
   230 00000486 FF7518FF75ECFF75F8- <1> 		cdecl	draw_pixel, dword [ebp - 8], 							dword [ebp -20], 							dword [ebp +24]		;   // 点の描画
   230 0000048F E8B7FEFFFF6683C40C  <1>
   233                              <1> %endif
   234                              <1> 												;   // 基準軸を更新(1ドット分)
   235 00000498 8B46F8              <1> 		mov		eax, [esi - 8]					;   EAX = 基準軸増分(1 or -1);
   236 0000049B 0106                <1> 		add		[esi - 0], eax					;   
   237                              <1> 
   238                              <1> 												;   // 相対軸を更新
   239 0000049D 8B45FC              <1> 		mov		eax, [ebp - 4]					;   EAX  = sum; // 相対軸の積算値;
   240 000004A0 0347FC              <1> 		add		eax, [edi - 4]					;   EAX += dy;  // 増分(相対軸の描画幅)
   241 000004A3 8B5EFC              <1> 		mov		ebx, [esi - 4]					;   EBX  = dx;  // 増分(基準軸の描画幅)
   242                              <1> 
   243 000004A6 39D8                <1> 		cmp		eax, ebx						;   if (積算値 <= 相対軸の増分)
   244 000004A8 7C07                <1> 		jl		.52E							;   {
   245 000004AA 29D8                <1> 		sub		eax, ebx						;     EAX -= EBX; // 積算値から相対軸の増分を減算
   246                              <1> 												;     
   247                              <1> 												;     // 相対軸の座標を更新(1ドット分)
   248 000004AC 8B5FF8              <1> 		mov		ebx, [edi - 8]					;     EBX =  相対軸増分;
   249 000004AF 011F                <1> 		add		[edi - 0], ebx					;     
   250                              <1> .52E:											;   }
   251 000004B1 8945FC              <1> 		mov		[ebp - 4], eax					;   // 積算値を更新
   252                              <1> 												;   
   253 000004B4 E2D0                <1> 		loop	.50L							;   
   254                              <1> .50E:											; } while (ループ回数--);
   255                              <1> 
   256                              <1> 		;---------------------------------------
   257                              <1> 		; 【レジスタの復帰】
   258                              <1> 		;---------------------------------------
   259 000004B6 5F                  <1> 		pop		edi
   260 000004B7 5E                  <1> 		pop		esi
   261 000004B8 5A                  <1> 		pop		edx
   262 000004B9 59                  <1> 		pop		ecx
   263 000004BA 5B                  <1> 		pop		ebx
   264 000004BB 58                  <1> 		pop		eax
   265                              <1> 
   266                              <1> 		;---------------------------------------
   267                              <1> 		; 【スタックフレームの破棄】
   268                              <1> 		;---------------------------------------
   269 000004BC 89EC                <1> 		mov		esp, ebp
   270 000004BE 5D                  <1> 		pop		ebp
   271                              <1> 
   272 000004BF C3                  <1> 		ret
   273                              <1> 
    97                                  %include	"../modules/protect/draw_rect.s"
    98                              <1> ;************************************************************************
    99                              <1> ;	矩形の描画
   100                              <1> ;========================================================================
   101                              <1> ;■書式		: void draw_rect(X0, Y0, X1, Y1, color);
   102                              <1> ;
   103                              <1> ;■引数
   104                              <1> ;	X0		: 始点のX座標
   105                              <1> ;	Y0		: 始点のY座標
   106                              <1> ;	X1		: 終点のX座標
   107                              <1> ;	Y1		: 終点のY座標
   108                              <1> ;	color	: 描画色
   109                              <1> ;
   110                              <1> ;■戻り値	: 無し
   111                              <1> ;************************************************************************
   112                              <1> draw_rect:
   113                              <1> 		;---------------------------------------
   114                              <1> 		; 【スタックフレームの構築】
   115                              <1> 		;---------------------------------------
   116                              <1> 												; ------|--------
   117                              <1> 												; EBP+24| 色
   118                              <1> 												; EBP+20| Y1
   119                              <1> 												; EBP+16| X1
   120                              <1> 												; EBP+12| Y0
   121                              <1> 												; EBP+ 8| X0
   122                              <1> 												; ---------------
   123 000004C0 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   124 000004C1 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   125                              <1> 												; ------|--------
   126                              <1> 
   127                              <1> 		;---------------------------------------
   128                              <1> 		; 【レジスタの保存】
   129                              <1> 		;---------------------------------------
   130 000004C3 50                  <1> 		push		eax
   131 000004C4 53                  <1> 		push		ebx
   132 000004C5 51                  <1> 		push		ecx
   133 000004C6 52                  <1> 		push		edx
   134 000004C7 56                  <1> 		push		esi
   135                              <1> 
   136                              <1> 		;---------------------------------------
   137                              <1> 		; 矩形を描画
   138                              <1> 		;---------------------------------------
   139 000004C8 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   140 000004CB 8B5D0C              <1> 		mov		ebx, [ebp +12]					; EBX = Y0;
   141 000004CE 8B4D10              <1> 		mov		ecx, [ebp +16]					; ECX = X1;
   142 000004D1 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1;
   143 000004D4 8B7518              <1> 		mov		esi, [ebp +24]					; ESI = 色;
   144                              <1> 
   145                              <1> 		;---------------------------------------
   146                              <1> 		; 座標軸の大小を確定
   147                              <1> 		;---------------------------------------
   148 000004D7 39C8                <1> 		cmp		eax, ecx						; if (X1 < X0)
   149 000004D9 7C01                <1> 		jl		.10E							; {
   150 000004DB 91                  <1> 		xchg	eax, ecx						;   X0とX1を入れ替える;
   151                              <1> .10E:											; }
   152                              <1> 
   153 000004DC 39D3                <1> 		cmp		ebx, edx						; if (Y1 < Y0)
   154 000004DE 7C02                <1> 		jl		.20E							; {
   155 000004E0 87DA                <1> 		xchg	ebx, edx						;   Y0とY1を入れ替える;
   156                              <1> .20E:											; }
   157                              <1> 
   158                              <1> 		;---------------------------------------
   159                              <1> 		; 矩形を描画
   160                              <1> 		;---------------------------------------
   161 000004E2 5653515350E822FFFF- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, esi	; 上線
   161 000004EB FF6683C414          <1>
   162 000004F0 5652505350E814FFFF- <1> 		cdecl	draw_line, eax, ebx, eax, edx, esi	; 左線
   162 000004F9 FF6683C414          <1>
   163                              <1> 
   164 000004FE 4A                  <1> 		dec		edx									; EDX--; // 下線は1ドット上げる
   165 000004FF 5652515250E805FFFF- <1> 		cdecl	draw_line, eax, edx, ecx, edx, esi	; 下線
   165 00000508 FF6683C414          <1>
   166 0000050D 42                  <1> 		inc		edx
   167                              <1> 
   168 0000050E 49                  <1> 		dec		ecx									; ECX--; // 右線は1ドット左に移動
   169 0000050F 5652515351E8F5FEFF- <1> 		cdecl	draw_line, ecx, ebx, ecx, edx, esi	; 右線
   169 00000518 FF6683C414          <1>
   170                              <1> 
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 【レジスタの復帰】
   173                              <1> 		;---------------------------------------
   174 0000051D 5E                  <1> 		pop		esi
   175 0000051E 5A                  <1> 		pop		edx
   176 0000051F 59                  <1> 		pop		ecx
   177 00000520 5B                  <1> 		pop		ebx
   178 00000521 58                  <1> 		pop		eax
   179                              <1> 
   180                              <1> 		;---------------------------------------
   181                              <1> 		; 【スタックフレームの破棄】
   182                              <1> 		;---------------------------------------
   183 00000522 89EC                <1> 		mov		esp, ebp
   184 00000524 5D                  <1> 		pop		ebp
   185                              <1> 
   186 00000525 C3                  <1> 		ret
    98                                  %include	"../modules/protect/itoa.s"
    99                              <1> ;************************************************************************
   100                              <1> ;	数値を文字に変換
   101                              <1> ;========================================================================
   102                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
   103                              <1> ;
   104                              <1> ;■引数
   105                              <1> ;	num		: 変換する数値
   106                              <1> ;	buff	: 保存先バッファアドレス
   107                              <1> ;	size	: 保存先バッファサイズ
   108                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
   109                              <1> ;	flags	: フラグ
   110                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
   111                              <1> ;			:      : 0=空白を' '（スペース）で埋める
   112                              <1> ;			:   B1 : 1=＋/-符号を表示する
   113                              <1> ;			:      : 0=＋/-符号を表示しない
   114                              <1> ;			:   B0 : 1=符号付き正数として扱う
   115                              <1> ;			:      : 0=符号無し正数として扱う
   116                              <1> ;
   117                              <1> ;■戻り値	: 無し
   118                              <1> ;************************************************************************
   119                              <1> itoa:
   120                              <1> 		;---------------------------------------
   121                              <1> 		; 【スタックフレームの構築】
   122                              <1> 		;---------------------------------------
   123                              <1> 												; ------|--------
   124                              <1> 												;    +24| フラグ
   125                              <1> 												;    +20| 基数
   126                              <1> 												;    +16| バッファサイズ
   127                              <1> 												;    +12| バッファアドレス
   128                              <1> 												;    + 8| 数値
   129                              <1> 												; ------|--------
   130                              <1> 												;    + 4| EIP（戻り番地）
   131 00000526 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   132 00000527 89E5                <1> 		mov		ebp, esp						; ------+--------
   133                              <1> 
   134                              <1> 		;---------------------------------------
   135                              <1> 		; 【レジスタの保存】
   136                              <1> 		;---------------------------------------
   137 00000529 50                  <1> 		push	eax
   138 0000052A 53                  <1> 		push	ebx
   139 0000052B 51                  <1> 		push	ecx
   140 0000052C 52                  <1> 		push	edx
   141 0000052D 56                  <1> 		push	esi
   142 0000052E 57                  <1> 		push	edi
   143                              <1> 
   144                              <1> 		;---------------------------------------
   145                              <1> 		; 引数を取得
   146                              <1> 		;---------------------------------------
   147 0000052F 8B4508              <1> 		mov		eax, [ebp + 8]					; val  = 数値;
   148 00000532 8B750C              <1> 		mov		esi, [ebp +12]					; dst  = バッファアドレス;
   149 00000535 8B4D10              <1> 		mov		ecx, [ebp +16]					; size = 残りバッファサイズ;
   150                              <1> 
   151 00000538 89F7                <1> 		mov		edi, esi						; // バッファの最後尾
   152 0000053A 01CF                <1> 		add		edi, ecx						; dst  = &dst[size - 1];
   153 0000053C 4F                  <1> 		dec		edi								; 
   154                              <1> 
   155 0000053D 8B5D18              <1> 		mov		ebx, [ebp +24]					; flags = オプション;
   156                              <1> 
   157                              <1> 		;---------------------------------------
   158                              <1> 		; 符号付き判定
   159                              <1> 		;---------------------------------------
   160 00000540 F7C301000000        <1> 		test	ebx, 0b0001						; if (flags & 0x01)// 符号付き
   161 00000546 7408                <1> .10Q:	je		.10E							; {
   162 00000548 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   163 0000054B 7D03                <1> .12Q:	jge		.12E							;   {
   164 0000054D 83CB02              <1> 		or		ebx, 0b0010						;     flags |=  2; // 符号表示
   165                              <1> .12E:											;   }
   166                              <1> .10E:											; }
   167                              <1> 
   168                              <1> 		;---------------------------------------
   169                              <1> 		; 符号出力判定
   170                              <1> 		;---------------------------------------
   171 00000550 F7C302000000        <1> 		test	ebx, 0b0010						; if (flags & 0x02)// 符号出力判定
   172 00000556 7410                <1> .20Q:	je		.20E							; {
   173 00000558 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   174 0000055B 7D07                <1> .22Q:	jge		.22F							;   {
   175 0000055D F7D8                <1> 		neg		eax								;     val *= -1;   // 符号反転
   176 0000055F C6062D              <1> 		mov		[esi], byte '-'					;     *dst = '-';  // 符号表示
   177 00000562 EB03                <1> 		jmp		.22E							;   }
   178                              <1> .22F:											;   else
   179                              <1> 												;   {
   180 00000564 C6062B              <1> 		mov		[esi], byte '+'					;     *dst = '+';  // 符号表示
   181                              <1> .22E:											;   }
   182 00000567 49                  <1> 		dec		ecx								;   size--;        // 残りバッファサイズの減算
   183                              <1> .20E:											; }
   184                              <1> 
   185                              <1> 		;---------------------------------------
   186                              <1> 		; ASCII変換
   187                              <1> 		;---------------------------------------
   188 00000568 8B5D14              <1> 		mov		ebx, [ebp +20]					; BX = 基数;
   189                              <1> .30L:											; do
   190                              <1> 												; {
   191 0000056B BA00000000          <1> 		mov		edx, 0							;   
   192 00000570 F7F3                <1> 		div		ebx								;   DX = DX:AX % 基数;
   193                              <1> 												;   AX = DX:AX / 基数;
   194                              <1> 												;   
   195 00000572 89D6                <1> 		mov		esi, edx						;   // テーブル参照
   196 00000574 8A96[9F050000]      <1> 		mov		dl, byte [.ascii + esi]			;   DL = ASCII[DX];
   197                              <1> 												;   
   198 0000057A 8817                <1> 		mov		[edi], dl						;   *dst = DL;
   199 0000057C 4F                  <1> 		dec		edi								;   dst--;
   200                              <1> 												;   
   201 0000057D 83F800              <1> 		cmp		eax, 0							;   
   202 00000580 E0E9                <1> 		loopnz	.30L							; } while (AX);
   203                              <1> .30E:
   204                              <1> 
   205                              <1> 		;---------------------------------------
   206                              <1> 		; 空欄を埋める
   207                              <1> 		;---------------------------------------
   208 00000582 83F900              <1> 		cmp		ecx, 0							; if (size)
   209 00000585 740E                <1> .40Q:	je		.40E							; {
   210 00000587 B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   211 00000589 66837D1804          <1> 		cmp		[ebp +24], word 0b0100			;   if (flags & 0x04)
   212 0000058E 7502                <1> .42Q:	jne		.42E							;   {
   213 00000590 B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   214                              <1> .42E:											;   }
   215 00000592 FD                  <1> 		std										;   // DF = 1（-方向）
   216 00000593 F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   217                              <1> .40E:											; }
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 【レジスタの復帰】
   221                              <1> 		;---------------------------------------
   222 00000595 5F                  <1> 		pop		edi
   223 00000596 5E                  <1> 		pop		esi
   224 00000597 5A                  <1> 		pop		edx
   225 00000598 59                  <1> 		pop		ecx
   226 00000599 5B                  <1> 		pop		ebx
   227 0000059A 58                  <1> 		pop		eax
   228                              <1> 
   229                              <1> 		;---------------------------------------
   230                              <1> 		; 【スタックフレームの破棄】
   231                              <1> 		;---------------------------------------
   232 0000059B 89EC                <1> 		mov		esp, ebp
   233 0000059D 5D                  <1> 		pop		ebp
   234                              <1> 
   235 0000059E C3                  <1> 		ret
   236                              <1> 
   237 0000059F 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   237 000005A8 39414243444546      <1>
   238                              <1> 
    99                                  %include	"../modules/protect/rtc.s"
   100                              <1> ;************************************************************************
   101                              <1> ;	RTCから時刻データを取得する
   102                              <1> ;========================================================================
   103                              <1> ;■書式		: DWORD rtc_get_time(dst);
   104                              <1> ;
   105                              <1> ;■引数
   106                              <1> ;	dst		: 保存先アドレス
   107                              <1> ;
   108                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   109                              <1> ;************************************************************************
   110                              <1> rtc_get_time:
   111                              <1> 		;---------------------------------------
   112                              <1> 		; 【スタックフレームの構築】
   113                              <1> 		;---------------------------------------
   114                              <1> 												; ------|--------
   115                              <1> 												; EBP+ 8| 保存先アドレス
   116                              <1> 												; ---------------
   117 000005AF 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   118 000005B0 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   119                              <1> 												; ---------------
   120                              <1> 		;---------------------------------------
   121                              <1> 		; 【レジスタの保存】
   122                              <1> 		;---------------------------------------
   123 000005B2 53                  <1> 		push	ebx
   124                              <1> 
   125                              <1> 		;---------------------------------------
   126                              <1> 		; RTCから時刻を取得
   127                              <1> 		;---------------------------------------
   128 000005B3 B00A                <1> 		mov		al, 0x0A						; // レジスタA
   129 000005B5 E670                <1> 		out		0x70, al						; outp(0x70, AL);
   130 000005B7 E471                <1> 		in		al, 0x71						; AL = レジスタA;
   131 000005B9 A880                <1> 		test	al, 0x80						; if (DM & UIP) // 更新中
   132 000005BB 7407                <1> 		je		.10F							; {
   133 000005BD B801000000          <1> 		mov		eax, 1							;   ret = 1; // データ更新中
   134 000005C2 EB27                <1> 		jmp		.10E							; }
   135                              <1> .10F:											; else
   136                              <1> 												; {
   137                              <1> 												;   // RAM[0x04]:時
   138 000005C4 B004                <1> 		mov		al, 0x04						;   AL = 0x04;
   139 000005C6 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   140 000005C8 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 時データ
   141                              <1> 												;   
   142 000005CA C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   143                              <1> 												;   
   144                              <1> 												;   // RAM[0x02]:分
   145 000005CD B002                <1> 		mov		al, 0x02						;   AL = 0x02;
   146 000005CF E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   147 000005D1 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 分データ
   148                              <1> 												;   
   149 000005D3 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   150                              <1> 												;   
   151                              <1> 												;   // RAM[0x00]:秒
   152 000005D6 B000                <1> 		mov		al, 0x00						;   AL = 0x00;
   153 000005D8 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   154 000005DA E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 秒データ
   155                              <1> 												;   
   156 000005DC 25FFFFFF00          <1> 		and		eax, 0x00_FF_FF_FF				;   // 下位3バイトのみ有効
   157                              <1> 												;   
   158 000005E1 8B5D08              <1> 		mov		ebx, [ebp + 8]					;   dst = 保存先;
   159 000005E4 8903                <1> 		mov		[ebx], eax						;   [dst] = 時刻;
   160                              <1> 												;   
   161 000005E6 B800000000          <1> 		mov		eax, 0							;   ret = 0; // 正常終了
   162                              <1> .10E:											; }
   163                              <1> 
   164                              <1> 		;---------------------------------------
   165                              <1> 		; 【レジスタの復帰】
   166                              <1> 		;---------------------------------------
   167 000005EB 5B                  <1> 		pop		ebx
   168                              <1> 
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 【スタックフレームの破棄】
   171                              <1> 		;---------------------------------------
   172 000005EC 89EC                <1> 		mov		esp, ebp
   173 000005EE 5D                  <1> 		pop		ebp
   174                              <1> 
   175 000005EF C3                  <1> 		ret
   176                              <1> 
   100                                  %include	"../modules/protect/draw_time.s"
   101                              <1> ;************************************************************************
   102                              <1> ;	時刻の表示
   103                              <1> ;========================================================================
   104                              <1> ;■書式		: void draw_time(col, row, color, time);
   105                              <1> ;
   106                              <1> ;■引数
   107                              <1> ;	col		: 列
   108                              <1> ;	row		: 行
   109                              <1> ;	color	: 描画色
   110                              <1> ;	time	: 時刻データ
   111                              <1> ;
   112                              <1> ;■戻り値	: 無し
   113                              <1> ;************************************************************************
   114                              <1> draw_time:
   115                              <1> 		;---------------------------------------
   116                              <1> 		; 【スタックフレームの構築】
   117                              <1> 		;---------------------------------------
   118                              <1> 												; ------|--------
   119                              <1> 												; EBP+20| 時刻データ
   120                              <1> 												; EBP+16| 色
   121                              <1> 												; EBP+12| Y（行）
   122                              <1> 												; EBP+ 8| X（列）
   123                              <1> 												; ---------------
   124 000005F0 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   125 000005F1 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   126                              <1> 												; ---------------
   127                              <1> 		;---------------------------------------
   128                              <1> 		; 【レジスタの保存】
   129                              <1> 		;---------------------------------------
   130 000005F3 50                  <1> 		push	eax
   131 000005F4 53                  <1> 		push	ebx
   132                              <1> 
   133                              <1> 		;---------------------------------------
   134                              <1> 		; 
   135                              <1> 		;---------------------------------------
   136 000005F5 8B4514              <1> 		mov		eax, [ebp +20]					; EAX = 時刻データ;
   137 000005F8 3B05[76060000]      <1> 		cmp		eax, [.last]					; if (今回 != 前回)
   138 000005FE 7467                <1> 		je		.10E							; {
   139                              <1> 												;   
   140 00000600 A3[76060000]        <1> 		mov		[.last], eax					;   // 前回の時刻値を更新
   141                              <1> 												;   
   142 00000605 BB00000000          <1> 		mov		ebx, 0							;   EBX = 0;
   143 0000060A 88C3                <1> 		mov		bl, al							;   EBX = 秒;
   144 0000060C 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .sec, 2, 16, 0b0100	;   // 時刻を文字列に変換
   144 00000613 [84060000]53E809FF- <1>
   144 0000061B FFFF6683C414        <1>
   145                              <1> 
   146 00000621 88E3                <1> 		mov		bl, ah							;   EBX = 分;
   147 00000623 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .min, 2, 16, 0b0100	;   // 時刻を文字列に変換
   147 0000062A [81060000]53E8F2FE- <1>
   147 00000632 FFFF6683C414        <1>
   148                              <1> 
   149 00000638 C1E810              <1> 		shr		eax, 16							;   EBX = 時;
   150 0000063B 6A046A106A0268-     <1> 		cdecl	itoa, eax, .hour, 2, 16, 0b0100	;   // 時刻を文字列に変換
   150 00000642 [7E060000]50E8DAFE- <1>
   150 0000064A FFFF6683C414        <1>
   151                              <1> 
   152                              <1> 												;   // 時刻を表示
   153 00000650 68[7E060000]FF7510- <1> 		cdecl	draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
   153 00000658 FF750CFF7508E825FC- <1>
   153 00000661 FFFF6683C410        <1>
   154                              <1> 												;     
   155                              <1> 												;   }
   156                              <1> .10E:											; }
   157                              <1> 
   158                              <1> 		;---------------------------------------
   159                              <1> 		; 【レジスタの復帰】
   160                              <1> 		;---------------------------------------
   161 00000667 5B                  <1> 		pop		ebx
   162 00000668 58                  <1> 		pop		eax
   163                              <1> 
   164                              <1> 		;---------------------------------------
   165                              <1> 		; 【スタックフレームの破棄】
   166                              <1> 		;---------------------------------------
   167 00000669 89EC                <1> 		mov		esp, ebp
   168 0000066B 5D                  <1> 		pop		ebp
   169                              <1> 
   170 0000066C C3                  <1> 		ret
   171                              <1> 
   172 0000066D 00                  <1> ALIGN 2, db 0
   173 0000066E 0000000000000000    <1> .temp:	dq	0
   174 00000676 0000000000000000    <1> .last:	dq	0
   175 0000067E 5A5A3A              <1> .hour:	db	"ZZ:"
   176 00000681 5A5A3A              <1> .min:	db	"ZZ:"
   177 00000684 5A5A00              <1> .sec:	db	"ZZ", 0
   178                              <1> 
   101                                  %include	"../modules/protect/interrupt.s"
   102                              <1> ;************************************************************************
   103                              <1> ;	割り込みベクタの初期化
   104                              <1> ;************************************************************************
   105 00000687 90                  <1> ALIGN 4
   106 00000688 FF07                <1> IDTR:	dw 		8 * 256 - 1					; idt_limit
   107 0000068A 00001000            <1> 		dd 		VECT_BASE					; idt location
   108                              <1> 
   109                              <1> ;************************************************************************
   110                              <1> ;	割り込みテーブルを初期化
   111                              <1> ;------------------------------------------------------------------------
   112                              <1> ;	
   113                              <1> ;	まず、全ての割り込みアドレスにデフォルト処理を設定すし、その後、
   114                              <1> ;	必要な割り込みだけ設定しなおす。
   115                              <1> ;	
   116                              <1> ;	割り込みアドレスは、VECT_BASEで指定され、256の割り込みがあるので
   117                              <1> ;	0x0800バイト占有することになる。
   118                              <1> ;	
   119                              <1> ;	           |____________| _V___
   120                              <1> ;	  VECT_BASE| IntDefault |  |   
   121                              <1> ;	           | IntDefault |  | 8 * 256
   122                              <1> ;	           |      :     |  |   
   123                              <1> ;	           |____________| _|___
   124                              <1> ;	      +0800|////////////|
   125                              <1> ;	           |            |
   126                              <1> ;	
   127                              <1> ;	一つの割り込み設定は8バイトで構成される。
   128                              <1> ;	
   129                              <1> ;	           |____________|____________| 
   130                              <1> ;	        [0]| Address Lo[15: 0]       | 
   131                              <1> ;	        [2]| Selector                | 
   132                              <1> ;	        [4]| Flags                   | 
   133                              <1> ;	        [6]|_Address Lo[32:16]_______| 
   134                              <1> ;	           |/////////////////////////| 
   135                              <1> ;	           |            |            | 
   136                              <1> ;	
   137                              <1> ;========================================================================
   138                              <1> ;■書式		: void init_int(void);
   139                              <1> ;
   140                              <1> ;■引数		: 無し
   141                              <1> ;
   142                              <1> ;■戻り値	: 無し
   143                              <1> ;************************************************************************
   144                              <1> init_int:
   145                              <1> 		;---------------------------------------
   146                              <1> 		; 【レジスタの保存】
   147                              <1> 		;---------------------------------------
   148 0000068E 50                  <1> 		push	eax
   149 0000068F 53                  <1> 		push	ebx
   150 00000690 51                  <1> 		push	ecx
   151 00000691 57                  <1> 		push	edi
   152                              <1> 
   153                              <1> 		;---------------------------------------
   154                              <1> 		; 全ての割り込みにデフォルト処理を設定
   155                              <1> 		;---------------------------------------
   156 00000692 8D05[D8070000]      <1> 		lea		eax, [int_default]				; EAX   = 割り込み処理アドレス;
   157 00000698 BB008E0800          <1> 		mov		ebx, 0x0008_8E00				; EBX   = セグメントセレクタ;
   158 0000069D 6693                <1> 		xchg	ax, bx							; // 下位ワードを交換
   159                              <1> 
   160 0000069F B900010000          <1> 		mov		ecx, 256						; ECX   = 割り込みベクタ数
   161 000006A4 BF00001000          <1> 		mov		edi, VECT_BASE					; EDI   = 割り込みベクタテーブル
   162                              <1> 
   163                              <1> .10L:											; do
   164                              <1> 												; {
   165 000006A9 891F                <1> 		mov		[edi + 0], ebx					;   [EDI + 0] = 割り込みディスクリプタ（下位）
   166 000006AB 894704              <1> 		mov		[edi + 4], eax					;   [EDI + 4] = 割り込みディスクリプタ（上位）
   167 000006AE 83C708              <1> 		add		edi, 8							;   EDI += 8;
   168 000006B1 E2F6                <1> 		loop	.10L							; } while (ECX--);
   169                              <1> 
   170                              <1> 		;---------------------------------------
   171                              <1> 		; 割り込みディスクリプタの設定
   172                              <1> 		;---------------------------------------
   173 000006B3 0F011D[88060000]    <1> 		lidt	[IDTR]							; // 割り込みディスクリプタテーブルをロード
   174                              <1> 
   175                              <1> 		;---------------------------------------
   176                              <1> 		; 【レジスタの復帰】
   177                              <1> 		;---------------------------------------
   178 000006BA 5F                  <1> 		pop		edi
   179 000006BB 59                  <1> 		pop		ecx
   180 000006BC 5B                  <1> 		pop		ebx
   181 000006BD 58                  <1> 		pop		eax
   182                              <1> 
   183 000006BE C3                  <1> 		ret
   184                              <1> 
   185                              <1> ;************************************************************************
   186                              <1> ;	スタックの内容を表示して無限ループを実行
   187                              <1> ;************************************************************************
   188                              <1> int_stop:
   189 000006BF FB                  <1> 		sti										; // 割り込み許可
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; EAXで示される文字列を表示
   193                              <1> 		;---------------------------------------
   194 000006C0 50680F0600006A0F6A- <1> 		cdecl	draw_str, 25, 15, 0x060F, eax	; draw_str(EAX);
   194 000006C9 19E8B9FBFFFF6683C4- <1>
   194 000006D2 10                  <1>
   195                              <1> 
   196                              <1> 		;---------------------------------------
   197                              <1> 		; スタックのデータを文字列に変換
   198                              <1> 		;---------------------------------------
   199 000006D3 8B0424              <1> 		mov		eax, [esp + 0]					; EAX = ESP[ 0];
   200 000006D6 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p1, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   200 000006DD [9B070000]50E83FFE- <1>
   200 000006E5 FFFF6683C414        <1>
   201                              <1> 
   202 000006EB 8B442404            <1> 		mov		eax, [esp + 4]					; EAX = ESP[ 4];
   203 000006EF 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p2, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   203 000006F6 [AC070000]50E826FE- <1>
   203 000006FE FFFF6683C414        <1>
   204                              <1> 
   205 00000704 8B442408            <1> 		mov		eax, [esp + 8]					; EAX = ESP[ 8];
   206 00000708 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p3, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   206 0000070F [BD070000]50E80DFE- <1>
   206 00000717 FFFF6683C414        <1>
   207                              <1> 
   208 0000071D 8B44240C            <1> 		mov		eax, [esp +12]					; EAX = ESP[12];
   209 00000721 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p4, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   209 00000728 [CE070000]50E8F4FD- <1>
   209 00000730 FFFF6683C414        <1>
   210                              <1> 
   211                              <1> 		;---------------------------------------
   212                              <1> 		; 文字列の表示
   213                              <1> 		;---------------------------------------
   214 00000736 68[94070000]68040F- <1> 		cdecl	draw_str, 25, 16, 0x0F04, .s1	; draw_str("ESP+ 0:-------- ");
   214 0000073E 00006A106A19E83FFB- <1>
   214 00000747 FFFF6683C410        <1>
   215 0000074D 68[A5070000]68040F- <1> 		cdecl	draw_str, 25, 17, 0x0F04, .s2	; draw_str("   + 4:-------- ");
   215 00000755 00006A116A19E828FB- <1>
   215 0000075E FFFF6683C410        <1>
   216 00000764 68[B6070000]68040F- <1> 		cdecl	draw_str, 25, 18, 0x0F04, .s3	; draw_str("   + 8:-------- ");
   216 0000076C 00006A126A19E811FB- <1>
   216 00000775 FFFF6683C410        <1>
   217 0000077B 68[C7070000]68040F- <1> 		cdecl	draw_str, 25, 19, 0x0F04, .s4	; draw_str("   +12:-------- ");
   217 00000783 00006A136A19E8FAFA- <1>
   217 0000078C FFFF6683C410        <1>
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 無限ループ
   221                              <1> 		;---------------------------------------
   222 00000792 EBFE                <1> 		jmp		$								; while (1) ; // 無限ループ
   223                              <1> 
   224 00000794 4553502B20303A      <1> .s1		db	"ESP+ 0:"
   225 0000079B 5F5F5F5F5F5F5F5F20- <1> .p1		db	"________ ", 0
   225 000007A4 00                  <1>
   226 000007A5 2020202B20343A      <1> .s2		db	"   + 4:"
   227 000007AC 5F5F5F5F5F5F5F5F20- <1> .p2		db	"________ ", 0
   227 000007B5 00                  <1>
   228 000007B6 2020202B20383A      <1> .s3		db	"   + 8:"
   229 000007BD 5F5F5F5F5F5F5F5F20- <1> .p3		db	"________ ", 0
   229 000007C6 00                  <1>
   230 000007C7 2020202B31323A      <1> .s4		db	"   +12:"
   231 000007CE 5F5F5F5F5F5F5F5F20- <1> .p4		db	"________ ", 0
   231 000007D7 00                  <1>
   232                              <1> 
   233                              <1> ;************************************************************************
   234                              <1> ;	割り込み処理：デフォルトの処理
   235                              <1> ;************************************************************************
   236                              <1> int_default:
   237 000007D8 9C                  <1> 		pushf									; // EFLAGS(IF==0)
   238 000007D9 0E                  <1> 		push	cs								; // CS
   239 000007DA 68[BF060000]        <1> 		push	int_stop						; // スタック表示処理
   240                              <1> 
   241 000007DF B8[E5070000]        <1> 		mov		eax, .s0						; // 割り込み種別
   242 000007E4 CF                  <1> 		iret
   243                              <1> 
   244 000007E5 203C2020202053544F- <1> .s0		db	" <    STOP    > ", 0
   244 000007EE 50202020203E2000    <1>
   245                              <1> 
   246                              <1> ;************************************************************************
   247                              <1> ;	割り込み処理：ゼロ除算
   248                              <1> ;************************************************************************
   249                              <1> int_zero_div:
   250 000007F6 9C                  <1> 		pushf									; // EFLAGS
   251 000007F7 0E                  <1> 		push	cs								; // CS
   252 000007F8 68[BF060000]        <1> 		push	int_stop						; // スタック表示処理
   253                              <1> 
   254 000007FD B8[03080000]        <1> 		mov		eax, .s0						; // 割り込み種別
   255 00000802 CF                  <1> 		iret
   256                              <1> 
   257 00000803 203C20205A45524F20- <1> .s0		db	" <  ZERO DIV  > ", 0
   257 0000080C 44495620203E2000    <1>
   258                              <1> 
   102                                  %include	"../modules/protect/pic.s"
   103                              <1> ;************************************************************************
   104                              <1> ;	割り込みコントローラの初期化
   105                              <1> ;========================================================================
   106                              <1> ;■書式		: void init_pic(void);
   107                              <1> ;
   108                              <1> ;■引数		: 無し
   109                              <1> ;
   110                              <1> ;■戻り値	: 無し
   111                              <1> ;************************************************************************
   112                              <1> init_pic:
   113                              <1> 		;---------------------------------------
   114                              <1> 		; 【レジスタの保存】
   115                              <1> 		;---------------------------------------
   116 00000814 50                  <1> 		push	eax
   117                              <1> 
   118                              <1> 		;---------------------------------------
   119                              <1> 		; マスタPICの設定
   120                              <1> 		;---------------------------------------
   121                              <1> 		outp	0x20, 0x11						; // MASTER.ICW1 = 0x11;
    69 00000815 B011                <2>  mov al, %2
    70 00000817 E620                <2>  out %1, al
   122                              <1> 		outp	0x21, 0x20						; // MASTER.ICW2 = 0x20;
    69 00000819 B020                <2>  mov al, %2
    70 0000081B E621                <2>  out %1, al
   123                              <1> 		outp	0x21, 0x04						; // MASTER.ICW3 = 0x04;
    69 0000081D B004                <2>  mov al, %2
    70 0000081F E621                <2>  out %1, al
   124                              <1> 		outp	0x21, 0x01						; // MASTER.ICW4 = 0x01;
    69 00000821 B001                <2>  mov al, %2
    70 00000823 E621                <2>  out %1, al
   125                              <1> 		outp	0x21, 0xFF						; // マスタ割り込みマスク
    69 00000825 B0FF                <2>  mov al, %2
    70 00000827 E621                <2>  out %1, al
   126                              <1> 
   127                              <1> 		;---------------------------------------
   128                              <1> 		; スレーブPICの設定
   129                              <1> 		;---------------------------------------
   130                              <1> 		outp	0xA0, 0x11						; // SLAVE.ICW1  = 0x11;
    69 00000829 B011                <2>  mov al, %2
    70 0000082B E6A0                <2>  out %1, al
   131                              <1> 		outp	0xA1, 0x28						; // SLAVE.ICW2  = 0x28;
    69 0000082D B028                <2>  mov al, %2
    70 0000082F E6A1                <2>  out %1, al
   132                              <1> 		outp	0xA1, 0x02						; // SLAVE.ICW3  = 0x02;
    69 00000831 B002                <2>  mov al, %2
    70 00000833 E6A1                <2>  out %1, al
   133                              <1> 		outp	0xA1, 0x01						; // SLAVE.ICW4  = 0x01;
    69 00000835 B001                <2>  mov al, %2
    70 00000837 E6A1                <2>  out %1, al
   134                              <1> 		outp	0xA1, 0xFF						; // スレーブ割り込みマスク
    69 00000839 B0FF                <2>  mov al, %2
    70 0000083B E6A1                <2>  out %1, al
   135                              <1> 
   136                              <1> 		;---------------------------------------
   137                              <1> 		; 【レジスタの復帰】
   138                              <1> 		;---------------------------------------
   139 0000083D 58                  <1> 		pop		eax
   140                              <1> 
   141 0000083E C3                  <1> 		ret
   142                              <1> 
   103                                  %include	"../modules/protect/int_rtc.s"
   104                              <1> ;************************************************************************
   105                              <1> ;	RTCの割り込み許可設定
   106                              <1> ;========================================================================
   107                              <1> ;■書式		: void rtc_int_en(bit);
   108                              <1> ;
   109                              <1> ;■引数
   110                              <1> ;	bit		: 割り込みを許可するビット
   111                              <1> ;
   112                              <1> ;■戻り値	: 無し
   113                              <1> ;************************************************************************
   114                              <1> rtc_int_en:
   115                              <1> 		;---------------------------------------
   116                              <1> 		; 【スタックフレームの構築】
   117                              <1> 		;---------------------------------------
   118                              <1> 												; ------|--------
   119                              <1> 												;    + 8| ビット
   120                              <1> 												; ------|--------
   121                              <1> 												;    + 4| EIP（戻り番地）
   122 0000083F 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   123 00000840 89E5                <1> 		mov		ebp, esp						; ------+--------
   124                              <1> 
   125                              <1> 		;---------------------------------------
   126                              <1> 		; 【レジスタの保存】
   127                              <1> 		;---------------------------------------
   128 00000842 50                  <1> 		push	eax
   129                              <1> 
   130                              <1> 		;---------------------------------------
   131                              <1> 		; 割り込み許可設定
   132                              <1> 		;---------------------------------------
   133                              <1> 		outp	0x70, 0x0B						; outp(0x70, AL);   // レジスタBを選択
    69 00000843 B00B                <2>  mov al, %2
    70 00000845 E670                <2>  out %1, al
   134                              <1> 
   135 00000847 E471                <1> 		in		al, 0x71						; AL  = port(0x71); // レジスタBの
   136 00000849 0A4508              <1> 		or		al, [ebp + 8]					; AL |= ビット;     // 指定されたビットをセット
   137                              <1> 
   138 0000084C E671                <1> 		out		0x71, al						; outp(0x71, AL);   // レジスタBに書き込み
   139                              <1> 
   140                              <1> 		;---------------------------------------
   141                              <1> 		; 【レジスタの復帰】
   142                              <1> 		;---------------------------------------
   143 0000084E 58                  <1> 		pop		eax
   144                              <1> 
   145                              <1> 		;---------------------------------------
   146                              <1> 		; 【スタックフレームの破棄】
   147                              <1> 		;---------------------------------------
   148 0000084F 89EC                <1> 		mov		esp, ebp
   149 00000851 5D                  <1> 		pop		ebp
   150                              <1> 
   151 00000852 C3                  <1> 		ret
   152                              <1> 
   153                              <1> 
   154                              <1> ;************************************************************************
   155                              <1> ;	割り込み処理：RTC
   156                              <1> ;************************************************************************
   157                              <1> int_rtc:
   158                              <1> 		;---------------------------------------
   159                              <1> 		; 【レジスタの保存】
   160                              <1> 		;---------------------------------------
   161 00000853 60                  <1> 		pusha
   162 00000854 1E                  <1> 		push	ds
   163 00000855 06                  <1> 		push	es
   164                              <1> 
   165                              <1> 		;---------------------------------------
   166                              <1> 		; データ用セグメントセレクタの設定
   167                              <1> 		;---------------------------------------
   168 00000856 66B81000            <1> 		mov		ax, 0x0010						; 
   169 0000085A 8ED8                <1> 		mov		ds, ax							; 
   170 0000085C 8EC0                <1> 		mov		es, ax							; 
   171                              <1> 
   172                              <1> 		;---------------------------------------
   173                              <1> 		; RTCから時刻を取得
   174                              <1> 		;---------------------------------------
   175 0000085E 68[C8000000]E847FD- <1> 		cdecl	rtc_get_time, RTC_TIME			; EAX = get_time(&RTC_TIME);
   175 00000866 FFFF6683C404        <1>
   176                              <1> 												; 
   177                              <1> 		;---------------------------------------
   178                              <1> 		; RTCの割り込み要因を取得
   179                              <1> 		;---------------------------------------
   180                              <1> 		outp	0x70, 0x0C						; outp(0x70, 0x0C); // レジスタCを選択
    69 0000086C B00C                <2>  mov al, %2
    70 0000086E E670                <2>  out %1, al
   181 00000870 E471                <1> 		in		al, 0x71						; AL = inp();
   182                              <1> 
   183                              <1> 		;---------------------------------------
   184                              <1> 		; 割り込みフラグをクリア(EOI)
   185                              <1> 		;---------------------------------------
   186                              <1> 		outp	0xA0, 0x20						; outp(0xA0, EOI); // スレーブPIC
    69 00000872 B020                <2>  mov al, %2
    70 00000874 E6A0                <2>  out %1, al
   187                              <1> 		outp	0x20, 0x20						; outp(0x20, EOI); // マスタPIC
    69 00000876 B020                <2>  mov al, %2
    70 00000878 E620                <2>  out %1, al
   188                              <1> 
   189                              <1> 		;---------------------------------------
   190                              <1> 		; 【レジスタの復帰】
   191                              <1> 		;---------------------------------------
   192 0000087A 07                  <1> 		pop		es								; 
   193 0000087B 1F                  <1> 		pop		ds								; 
   194 0000087C 61                  <1> 		popa									; 
   195                              <1> 
   196 0000087D CF                  <1> 		iret									; 割り込み処理の終了
   197                              <1> 
   104                                  
   105                                  ;************************************************************************
   106                                  ;	パディング
   107                                  ;************************************************************************
   108 0000087E 00<rep 1782h>           		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
   109                                  
