     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  ;************************************************************************
     8                                  ;	マクロ
     9                                  ;************************************************************************
    10                                  %include	"../include/define.s"
    11                              <1> ;************************************************************************
    12                              <1> ;	メモリイメージ
    13                              <1> ;************************************************************************
    14                              <1> 
    15                              <1> 		;---------------------------------------
    16                              <1> 		;           |            | 
    17                              <1> 		;           |____________| 
    18                              <1> 		; 0000_7A00 |            | ( 512) スタック
    19                              <1> 		;           |____________| 
    20                              <1> 		; 0000_7C00 |            | (  8K) ブート
    21                              <1> 		;           =            = 
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    24                              <1> 		;           =            = 
    25                              <1> 		;           |____________| 
    26                              <1> 		; 0000_BC00 |////////////| 
    27                              <1> 		;           =            = 
    28                              <1> 		;           |____________| 
    29                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    32                              <1> 		;           |____________| 
    33                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    34                              <1> 		;           |            | 
    35                              <1> 		;           =            = 
    36                              <1> 		;           |____________| 
    37                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    38                              <1> 		;           |            | （各タスク1K）
    39                              <1> 		;           =            = 
    40                              <1> 		;           |____________| 
    41                              <1> 		; 0010_5000 |            | Dir
    42                              <1> 		;      6000 |____________| Page
    43                              <1> 		; 0010_7000 |            | Dir
    44                              <1> 		;      8000 |____________| Page
    45                              <1> 		; 0010_9000 |////////////| 
    46                              <1> 		;           |            | 
    47                              <1> 
    48                              <1> 
    49                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    50                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    51                              <1> 
    52                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    53                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    54                              <1> 
    55                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    56                              <1> 
    57                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    58                              <1> 
    59                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    60                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    61                              <1> 
    62                              <1> 		E820_RECORD_SIZE	equ		20
    63                              <1> 
    64                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    11                                  %include	"../include/macro.s"
    12                              <1> ;************************************************************************
    13                              <1> ; 関数呼び出し用マクロ
    14                              <1> ;
    15                              <1> ; 使い方：
    16                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    17                              <1> ;
    18                              <1> ;************************************************************************
    19                              <1> %macro  cdecl 1-*.nolist
    20                              <1> 
    21                              <1> 	%rep  %0 - 1
    22                              <1> 		push	%{-1:-1}
    23                              <1> 		%rotate -1
    24                              <1> 	%endrep 
    25                              <1> 	%rotate -1
    26                              <1> 
    27                              <1> 		call	%1
    28                              <1> 
    29                              <1> 	%if 1 < %0
    30                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    31                              <1> 	%endif
    32                              <1> 
    33                              <1> %endmacro
    34                              <1> 
    35                              <1> ;************************************************************************
    36                              <1> ; 割り込みベクタ設定用
    37                              <1> ;
    38                              <1> ; 使い方：
    39                              <1> ;	set_vect	ベクタ番号, 割り込み処理 [, フラグ]
    40                              <1> ;
    41                              <1> ;************************************************************************
    42                              <1> %macro  set_vect 1-*.nolist
    43                              <1> 		push	eax
    44                              <1> 		push	edi
    45                              <1> 
    46                              <1> 		mov		edi, VECT_BASE + (%1 * 8)		; ベクタアドレス;
    47                              <1> 		mov		eax, %2
    48                              <1> 
    49                              <1> 	%if 3 == %0
    50                              <1> 		mov		[edi + 4], %3					; フラグ
    51                              <1> 	%endif
    52                              <1> 
    53                              <1> 		mov		[edi + 0], ax					; 例外アドレス[15: 0]
    54                              <1> 		shr		eax, 16							; 
    55                              <1> 		mov		[edi + 6], ax					; 例外アドレス[31:16]
    56                              <1> 
    57                              <1> 		pop		edi
    58                              <1> 		pop		eax
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> ;************************************************************************
    62                              <1> ; ポート出力用
    63                              <1> ;
    64                              <1> ; 使い方：
    65                              <1> ;	outp	ポート番号, 出力値
    66                              <1> ;
    67                              <1> ;************************************************************************
    68                              <1> %macro  outp 2
    69                              <1> 		mov		al, %2
    70                              <1> 		out		%1, al
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> ;************************************************************************
    74                              <1> ; ディスクリプタの情報を設定
    75                              <1> ;
    76                              <1> ; 使い方：
    77                              <1> ;	set_desc	ディスクリプタ, ベース
    78                              <1> ;
    79                              <1> ;************************************************************************
    80                              <1> %macro  set_desc 2-* 
    81                              <1> 		push	eax
    82                              <1> 		push	edi
    83                              <1> 
    84                              <1> 		mov		edi, %1							; ディスクリプタアドレス
    85                              <1> 		mov		eax, %2							; ベースアドレス
    86                              <1> 
    87                              <1> 	%if 3 == %0
    88                              <1> 		mov		[edi + 0], %3					; リミット
    89                              <1> 	%endif
    90                              <1> 
    91                              <1> 		mov		[edi + 2], ax					; ベース（[15: 0]）
    92                              <1> 		shr		eax, 16							; 
    93                              <1> 		mov		[edi + 4], al					; ベース（[23:16]）
    94                              <1> 		mov		[edi + 7], ah					; ベース（[31:24]）
    95                              <1> 
    96                              <1> 		pop		edi
    97                              <1> 		pop		eax
    98                              <1> %endmacro
    99                              <1> 
   100                              <1> ;************************************************************************
   101                              <1> ; ゲートディスクリプタのオフセットを設定
   102                              <1> ;
   103                              <1> ; 使い方：
   104                              <1> ;	set_gate	ディスクリプタ, オフセット
   105                              <1> ;
   106                              <1> ;************************************************************************
   107                              <1> %macro  set_gate 2-* 
   108                              <1> 		push	eax
   109                              <1> 		push	edi
   110                              <1> 
   111                              <1> 		mov		edi, %1							; ディスクリプタアドレス
   112                              <1> 		mov		eax, %2							; ベースアドレス
   113                              <1> 
   114                              <1> 		mov		[edi + 0], ax					; ベース（[15: 0]）
   115                              <1> 		shr		eax, 16							; 
   116                              <1> 		mov		[edi + 6], ax					; ベース（[31:16]）
   117                              <1> 
   118                              <1> 		pop		edi
   119                              <1> 		pop		eax
   120                              <1> %endmacro
   121                              <1> 
   122                              <1> ;************************************************************************
   123                              <1> ;	構造体
   124                              <1> ;************************************************************************
   125                              <1> 
   126                              <1> ;-----------------------------------------------
   127                              <1> ;	ドライブパラメータ
   128                              <1> ;-----------------------------------------------
   129                              <1> struc drive
   130 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
   131 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
   132 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
   133 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
   134                              <1> endstruc
   135                              <1> 
   136                              <1> ;-----------------------------------------------
   137                              <1> ;	リングバッファ
   138                              <1> ;-----------------------------------------------
   139                              <1> %define		RING_ITEM_SIZE		(1 << 4)
   140                              <1> %define		RING_INDEX_MASK		(RING_ITEM_SIZE - 1)
   141                              <1> 
   142                              <1> struc ring_buff
   143 00000000 ????????            <1> 		.rp				resd	1				; RP:書き込み位置
   144 00000004 ????????            <1> 		.wp				resd	1				; WP:読み込み位置
   145 00000008 <res 10h>           <1> 		.item			resb	RING_ITEM_SIZE	; バッファ
   146                              <1> endstruc
   147                              <1> 
   148                              <1> ;-----------------------------------------------
   149                              <1> ;	バラ曲線描画パラメータ
   150                              <1> ;-----------------------------------------------
   151                              <1> struc rose
   152 00000000 ????????            <1> 		.x0				resd	1				; 左上座標：X0
   153 00000004 ????????            <1> 		.y0				resd	1				; 左上座標：Y0
   154 00000008 ????????            <1> 		.x1				resd	1				; 右下座標：X1
   155 0000000C ????????            <1> 		.y1				resd	1				; 右下座標：Y1
   156                              <1> 
   157 00000010 ????????            <1> 		.n				resd	1				; 変数：n
   158 00000014 ????????            <1> 		.d				resd	1				; 変数：d
   159                              <1> 
   160 00000018 ????????            <1> 		.color_x		resd	1				; 描画色：X軸
   161 0000001C ????????            <1> 		.color_y		resd	1				; 描画色：Y軸
   162 00000020 ????????            <1> 		.color_z		resd	1				; 描画色：枠
   163 00000024 ????????            <1> 		.color_s		resd	1				; 描画色：文字
   164 00000028 ????????            <1> 		.color_f		resd	1				; 描画色：グラフ描画色
   165 0000002C ????????            <1> 		.color_b		resd	1				; 描画色：グラフ消去色
   166                              <1> 
   167 00000030 <res 10h>           <1> 		.title			resb	16				; タイトル
   168                              <1> endstruc
   169                              <1> 
    12                                  
    13                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    14                                  
    15                                  [BITS 32]
    16                                  ;************************************************************************
    17                                  ;	エントリポイント
    18                                  ;************************************************************************
    19                                  kernel:
    20                                  		;---------------------------------------
    21                                  		; フォントアドレスを取得
    22                                  		;---------------------------------------
    23 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    24 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    25 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    26 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    27 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    28 00000011 A3[A4000000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    29                                  
    30                                  		;---------------------------------------
    31                                  		; 初期化
    32                                  		;---------------------------------------
    33 00000016 E853060000              		cdecl	init_int						; // 割り込みベクタの初期化
    34                                  
    35 0000001B 5057BF00001000B8-       		set_vect	0x00, int_zero_div			; // 割り込み処理の登録：0除算
    35 00000023 [D5070000]668907C1-
    35 0000002B E810668947065F58   
    36                                  
    37                                  		;---------------------------------------
    38                                  		; フォントの一覧表示
    39                                  		;---------------------------------------
    40 00000033 6A0D6A3FE8E7010000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
    40 0000003C 6683C408           
    41 00000040 6A046A3FE868020000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
    41 00000049 6683C408           
    42                                  
    43                                  		;---------------------------------------
    44                                  		; 文字列の表示
    45                                  		;---------------------------------------
    46 0000004D 68[92000000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
    46 00000055 00006A0E6A19E80802-
    46 0000005E 00006683C410       
    47                                  
    48                                  		;---------------------------------------
    49                                  		; 0除算による割り込みを呼び出し
    50                                  		;---------------------------------------
    51                                  ;		int		0								; // 割り込み処理の呼び出し
    52                                  
    53                                  		;---------------------------------------
    54                                  		; 0除算による割り込みを生成
    55                                  		;---------------------------------------
    56 00000064 B000                    		mov		al, 0							; AL = 0;
    57 00000066 F6F0                    		div		al								; ** 0除算 **
    58                                  
    59                                  		;---------------------------------------
    60                                  		; 時刻の表示
    61                                  		;---------------------------------------
    62                                  .10L:											; do
    63                                  												; {
    64 00000068 68[A8000000]E81D05-     		cdecl	rtc_get_time, RTC_TIME			;   EAX = get_time(&RTC_TIME);
    64 00000070 00006683C404       
    65 00000076 FF35[A8000000]6800-     		cdecl	draw_time, 72, 0, 0x0700,									dword [RTC_TIME]
    65 0000007E 0700006A006A48E846-
    65 00000087 0500006683C410     
    67 0000008E EBD8                    		jmp		.10L							; } while (1);
    68                                  
    69                                  		;---------------------------------------
    70                                  		; 処理の終了
    71                                  		;---------------------------------------
    72 00000090 EBFE                    		jmp		$								; while (1) ; // 無限ループ
    73                                  
    74 00000092 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
    74 0000009B 65726E656C212000   
    75                                  
    76 000000A3 00                      ALIGN 4, db 0
    77 000000A4 00000000                FONT_ADR:	dd	0
    78 000000A8 00000000                RTC_TIME:	dd	0
    79                                  
    80                                  ;************************************************************************
    81                                  ;	モジュール
    82                                  ;************************************************************************
    83                                  %include	"../modules/protect/vga.s"
    84                              <1> ;************************************************************************
    85                              <1> ;	読み込みプレーンの選択
    86                              <1> ;========================================================================
    87                              <1> ;■書式		: void vga_set_read_plane(plane);
    88                              <1> ;
    89                              <1> ;■引数
    90                              <1> ;	plane	: 読み込みプレーン
    91                              <1> ;
    92                              <1> ;■戻り値	: 無し
    93                              <1> ;************************************************************************
    94                              <1> vga_set_read_plane:
    95                              <1> 		;---------------------------------------
    96                              <1> 		; 【スタックフレームの構築】
    97                              <1> 		;---------------------------------------
    98                              <1> 												; EBP+ 8| プレーン（インデックス）
    99                              <1> 												; ------+----------------
   100 000000AC 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   101 000000AD 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   102                              <1> 												; ------+----------------
   103                              <1> 
   104                              <1> 		;---------------------------------------
   105                              <1> 		; 【レジスタの保存】
   106                              <1> 		;---------------------------------------
   107 000000AF 50                  <1> 		push	eax
   108 000000B0 52                  <1> 		push	edx
   109                              <1> 
   110                              <1> 		;---------------------------------------
   111                              <1> 		; 読み込みプレーンの選択
   112                              <1> 		;---------------------------------------
   113 000000B1 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
   114 000000B4 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
   115 000000B7 B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
   116 000000B9 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
   117 000000BD 66EF                <1> 		out		dx, ax							; // ポート出力
   118                              <1> 
   119                              <1> 		;---------------------------------------
   120                              <1> 		; 【レジスタの復帰】
   121                              <1> 		;---------------------------------------
   122 000000BF 5A                  <1> 		pop		edx
   123 000000C0 58                  <1> 		pop		eax
   124                              <1> 
   125                              <1> 		;---------------------------------------
   126                              <1> 		; 【スタックフレームの破棄】
   127                              <1> 		;---------------------------------------
   128 000000C1 89EC                <1> 		mov		esp, ebp
   129 000000C3 5D                  <1> 		pop		ebp
   130                              <1> 
   131 000000C4 C3                  <1> 		ret
   132                              <1> 
   133                              <1> 
   134                              <1> ;************************************************************************
   135                              <1> ;	書き込みプレーンを選択
   136                              <1> ;========================================================================
   137                              <1> ;■書式		: void vga_set_write_plane(plane);
   138                              <1> ;
   139                              <1> ;■引数
   140                              <1> ;	plane	: 書き込みプレーン
   141                              <1> ;
   142                              <1> ;■戻り値	: 無し
   143                              <1> ;************************************************************************
   144                              <1> vga_set_write_plane:
   145                              <1> 		;---------------------------------------
   146                              <1> 		; 【スタックフレームの構築】
   147                              <1> 		;---------------------------------------
   148                              <1> 												; EBP+ 8| プレーン（ビット指定）
   149                              <1> 												; ------+----------------
   150 000000C5 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   151 000000C6 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   152                              <1> 												; ------+----------------
   153                              <1> 
   154                              <1> 		;---------------------------------------
   155                              <1> 		; 【レジスタの保存】
   156                              <1> 		;---------------------------------------
   157 000000C8 50                  <1> 		push	eax
   158 000000C9 52                  <1> 		push	edx
   159                              <1> 
   160                              <1> 		;---------------------------------------
   161                              <1> 		; 書き込みプレーンの選択
   162                              <1> 		;---------------------------------------
   163 000000CA 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
   164 000000CD 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
   165 000000D0 B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
   166 000000D2 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
   167 000000D6 66EF                <1> 		out		dx, ax							; // ポート出力
   168                              <1> 
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 【レジスタの復帰】
   171                              <1> 		;---------------------------------------
   172 000000D8 5A                  <1> 		pop		edx
   173 000000D9 58                  <1> 		pop		eax
   174                              <1> 
   175                              <1> 		;---------------------------------------
   176                              <1> 		; 【スタックフレームの破棄】
   177                              <1> 		;---------------------------------------
   178 000000DA 89EC                <1> 		mov		esp, ebp
   179 000000DC 5D                  <1> 		pop		ebp
   180                              <1> 
   181 000000DD C3                  <1> 		ret
   182                              <1> 
   183                              <1> 
   184                              <1> ;************************************************************************
   185                              <1> ;	フォントの書き込み
   186                              <1> ;========================================================================
   187                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   188                              <1> ;
   189                              <1> ;■引数
   190                              <1> ;	font	: FONTアドレス
   191                              <1> ;	vram	: VRAMアドレス
   192                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   193                              <1> ;	color	: 描画色
   194                              <1> ;
   195                              <1> ;■戻り値	: 無し
   196                              <1> ;************************************************************************
   197                              <1> vram_font_copy:
   198                              <1> 		;---------------------------------------
   199                              <1> 		; 【スタックフレームの構築】
   200                              <1> 		;---------------------------------------
   201                              <1> 												; EBP+20| 色（背景/前景色）
   202                              <1> 												; EBP+16| プレーン（ビット指定）
   203                              <1> 												; EBP+12| VRAMアドレス
   204                              <1> 												; EBP+ 8| FONTアドレス
   205                              <1> 												; ------+----------------
   206 000000DE 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   207 000000DF 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   208                              <1> 												; ------+----------------
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 【レジスタの保存】
   212                              <1> 		;---------------------------------------
   213 000000E1 50                  <1> 		push	eax
   214 000000E2 53                  <1> 		push	ebx
   215 000000E3 51                  <1> 		push	ecx
   216 000000E4 52                  <1> 		push	edx
   217 000000E5 56                  <1> 		push	esi
   218 000000E6 57                  <1> 		push	edi
   219                              <1> 
   220                              <1> 		;---------------------------------------
   221                              <1> 		; 【処理の開始】
   222                              <1> 		;---------------------------------------
   223 000000E7 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   224 000000EA 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   225 000000ED 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   226 000000F1 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   227                              <1> 
   228 000000F5 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   229 000000F7 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   230 000000FA FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   231                              <1> 
   232 000000FC 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   233 000000FE 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   234 00000101 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   235                              <1> 
   236                              <1> 		;---------------------------------------
   237                              <1> 		; 16ドットフォントのコピー
   238                              <1> 		;---------------------------------------
   239 00000103 FC                  <1> 		cld										; DF  = 0; // アドレス加算
   240                              <1> 
   241 00000104 B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   242                              <1> .10L:											; do
   243                              <1> 												; {
   244                              <1> 		;---------------------------------------
   245                              <1> 		; フォントマスクの作成
   246                              <1> 		;---------------------------------------
   247 00000109 AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   248 0000010A 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   249 0000010C F6D4                <1> 		not		ah								;   
   250                              <1> 
   251                              <1> 		;---------------------------------------
   252                              <1> 		; 前景色
   253                              <1> 		;---------------------------------------
   254 0000010E 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   255                              <1> 
   256                              <1> 		;---------------------------------------
   257                              <1> 		; 背景色
   258                              <1> 		;---------------------------------------
   259 00000110 F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   260 00000116 7404                <1> 		jz		.11F							;   {
   261 00000118 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   262 0000011A EB02                <1> 		jmp		.11E							;   }
   263                              <1> .11F:											;   else
   264                              <1> 												;   {
   265 0000011C 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   266                              <1> .11E:											;   }
   267                              <1> 
   268                              <1> 		;---------------------------------------
   269                              <1> 		; 前景色と背景色を合成
   270                              <1> 		;---------------------------------------
   271 0000011E 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   272                              <1> 
   273                              <1> 		;---------------------------------------
   274                              <1> 		; 新しい値を出力
   275                              <1> 		;---------------------------------------
   276 00000120 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   277                              <1> 
   278 00000122 83C750              <1> 		add		edi, 80							;   EDI += 80;
   279 00000125 E2E2                <1> 		loop	.10L							; } while (--ECX);
   280                              <1> .10E:											; 
   281                              <1> 
   282                              <1> 		;---------------------------------------
   283                              <1> 		; 【レジスタの復帰】
   284                              <1> 		;---------------------------------------
   285 00000127 5F                  <1> 		pop		edi
   286 00000128 5E                  <1> 		pop		esi
   287 00000129 5A                  <1> 		pop		edx
   288 0000012A 59                  <1> 		pop		ecx
   289 0000012B 5B                  <1> 		pop		ebx
   290 0000012C 58                  <1> 		pop		eax
   291                              <1> 
   292                              <1> 		;---------------------------------------
   293                              <1> 		; 【スタックフレームの破棄】
   294                              <1> 		;---------------------------------------
   295 0000012D 89EC                <1> 		mov		esp, ebp
   296 0000012F 5D                  <1> 		pop		ebp
   297                              <1> 
   298 00000130 C3                  <1> 		ret
   299                              <1> 
   300                              <1> 
   301                              <1> ;************************************************************************
   302                              <1> ;	ビットパターンの書き込み
   303                              <1> ;========================================================================
   304                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   305                              <1> ;
   306                              <1> ;■引数
   307                              <1> ;	bit		: 出力ビットパターン
   308                              <1> ;	vram	: VRAMアドレス
   309                              <1> ;	flag	: 1:セット, 0:クリア
   310                              <1> ;
   311                              <1> ;■戻り値	: 無し
   312                              <1> ;************************************************************************
   313                              <1> vram_bit_copy:
   314                              <1> 		;---------------------------------------
   315                              <1> 		; 【スタックフレームの構築】
   316                              <1> 		;---------------------------------------
   317                              <1> 												; EBP+20| 色（背景/前景色）
   318                              <1> 												; EBP+16| プレーン（ビット指定）
   319                              <1> 												; EBP+12| VRAMアドレス
   320                              <1> 												; EBP+ 8| 出力ビットパターン
   321                              <1> 												; ------+----------------
   322 00000131 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   323 00000132 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   324                              <1> 												; ------+----------------
   325                              <1> 
   326                              <1> 		;---------------------------------------
   327                              <1> 		; 【レジスタの保存】
   328                              <1> 		;---------------------------------------
   329 00000134 50                  <1> 		push	eax
   330 00000135 53                  <1> 		push	ebx
   331 00000136 57                  <1> 		push	edi
   332                              <1> 
   333                              <1> 		;---------------------------------------
   334                              <1> 		; 【処理の開始】
   335                              <1> 		;---------------------------------------
   336 00000137 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   337 0000013A 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   338 0000013E 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   339                              <1> 
   340 00000142 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   341 00000144 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   342 00000147 FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   343                              <1> 
   344                              <1> 		;---------------------------------------
   345                              <1> 		; マスクデータの作成
   346                              <1> 		;---------------------------------------
   347 00000149 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   348 0000014C 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   349 0000014E F6D4                <1> 		not		ah								; 
   350                              <1> 
   351                              <1> 		;---------------------------------------
   352                              <1> 		; 現在値の出力を取得
   353                              <1> 		;---------------------------------------
   354 00000150 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   355 00000152 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   356 00000154 08E0                <1> 		or		al, ah							; AL |= AH;
   357                              <1> 
   358                              <1> 		;---------------------------------------
   359                              <1> 		; 新しい値を出力
   360                              <1> 		;---------------------------------------
   361 00000156 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   362                              <1> 
   363                              <1> 		;---------------------------------------
   364                              <1> 		; 【レジスタの復帰】
   365                              <1> 		;---------------------------------------
   366 00000158 5F                  <1> 		pop		edi
   367 00000159 5B                  <1> 		pop		ebx
   368 0000015A 58                  <1> 		pop		eax
   369                              <1> 
   370                              <1> 		;---------------------------------------
   371                              <1> 		; 【スタックフレームの破棄】
   372                              <1> 		;---------------------------------------
   373 0000015B 89EC                <1> 		mov		esp, ebp
   374 0000015D 5D                  <1> 		pop		ebp
   375                              <1> 
   376 0000015E C3                  <1> 		ret
    84                                  %include	"../modules/protect/draw_char.s"
    85                              <1> ;************************************************************************
    86                              <1> ;	文字の表示
    87                              <1> ;------------------------------------------------------------------------
    88                              <1> ;	グラフィックスモードでテキストを表示
    89                              <1> ;========================================================================
    90                              <1> ;■書式		: void draw_char(col, row, color, ch);
    91                              <1> ;
    92                              <1> ;■引数
    93                              <1> ;	col		: 列（0～79）
    94                              <1> ;	row		: 行（0～29）
    95                              <1> ;	color	: 描画色
    96                              <1> ;	ch		: 文字
    97                              <1> ;
    98                              <1> ;■戻り値	: 無し
    99                              <1> ;************************************************************************
   100                              <1> draw_char:
   101                              <1> 		;---------------------------------------
   102                              <1> 		; 【スタックフレームの構築】
   103                              <1> 		;---------------------------------------
   104                              <1> 												; ------|--------
   105                              <1> 												; EBP+20| 文字
   106                              <1> 												; EBP+16| 色
   107                              <1> 												; EBP+12| Y（行）
   108                              <1> 												; EBP+ 8| X（列）
   109                              <1> 												; ------+----------------
   110 0000015F 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   111 00000160 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   112                              <1> 												; ------+----------------
   113                              <1> 
   114                              <1> 		;---------------------------------------
   115                              <1> 		; 【レジスタの保存】
   116                              <1> 		;---------------------------------------
   117 00000162 50                  <1> 		push	eax
   118 00000163 53                  <1> 		push	ebx
   119 00000164 51                  <1> 		push	ecx
   120 00000165 52                  <1> 		push	edx
   121 00000166 56                  <1> 		push	esi
   122 00000167 57                  <1> 		push	edi
   123                              <1> 
   124                              <1> 		;---------------------------------------
   125                              <1> 		; テストアンドセット
   126                              <1> 		;---------------------------------------
   127                              <1> %ifdef	USE_TEST_AND_SET
   128                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   129                              <1> %endif
   130                              <1> 
   131                              <1> 		;---------------------------------------
   132                              <1> 		; コピー元フォントアドレスを設定
   133                              <1> 		;---------------------------------------
   134 00000168 0FB67514            <1> 		movzx	esi, byte [ebp +20]				; CL  = 文字コード;
   135 0000016C C1E604              <1> 		shl		esi, 4							; CL *= 16; // 1文字16バイト
   136 0000016F 0335[A4000000]      <1> 		add		esi, [FONT_ADR]					; ESI = フォントアドレス;
   137                              <1> 
   138                              <1> 		;---------------------------------------
   139                              <1> 		; コピー先アドレスを取得
   140                              <1> 		; Adr = 0xA0000 + (640 / 8 * 16) * y + x
   141                              <1> 		;---------------------------------------
   142 00000175 8B7D0C              <1> 		mov		edi, [ebp +12]					; Y（行）
   143 00000178 C1E708              <1> 		shl		edi, 8							; EDI = Y * 256;
   144 0000017B 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA0000]	; EDI = Y *   4 + Y;
   145 00000182 037D08              <1> 		add		edi, [ebp + 8]					; X（列）
   146                              <1> 
   147                              <1> 		;---------------------------------------
   148                              <1> 		; 1文字分のフォントを出力
   149                              <1> 		;---------------------------------------
   150 00000185 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
   151                              <1> 
   152 00000189 6A03E81CFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
   152 00000192 C404                <1>
   153 00000194 6A08E82AFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
   153 0000019D C404                <1>
   154 0000019F 536A085756E835FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
   154 000001A8 FF6683C410          <1>
   155                              <1> 
   156 000001AD 6A02E8F8FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
   156 000001B6 C404                <1>
   157 000001B8 6A04E806FFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
   157 000001C1 C404                <1>
   158 000001C3 536A045756E811FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
   158 000001CC FF6683C410          <1>
   159                              <1> 
   160 000001D1 6A01E8D4FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
   160 000001DA C404                <1>
   161 000001DC 6A02E8E2FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
   161 000001E5 C404                <1>
   162 000001E7 536A025756E8EDFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
   162 000001F0 FF6683C410          <1>
   163                              <1> 
   164 000001F5 6A00E8B0FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
   164 000001FE C404                <1>
   165 00000200 6A01E8BEFEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
   165 00000209 C404                <1>
   166 0000020B 536A015756E8C9FEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
   166 00000214 FF6683C410          <1>
   167                              <1> 
   168                              <1> %ifdef	USE_TEST_AND_SET
   169                              <1> 		;---------------------------------------
   170                              <1> 		; テストアンドセット
   171                              <1> 		;---------------------------------------
   172                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   173                              <1> %endif
   174                              <1> 
   175                              <1> 		;---------------------------------------
   176                              <1> 		; 【レジスタの復帰】
   177                              <1> 		;---------------------------------------
   178 00000219 5F                  <1> 		pop		edi
   179 0000021A 5E                  <1> 		pop		esi
   180 0000021B 5A                  <1> 		pop		edx
   181 0000021C 59                  <1> 		pop		ecx
   182 0000021D 5B                  <1> 		pop		ebx
   183 0000021E 58                  <1> 		pop		eax
   184                              <1> 
   185                              <1> 		;---------------------------------------
   186                              <1> 		; 【スタックフレームの破棄】
   187                              <1> 		;---------------------------------------
   188 0000021F 89EC                <1> 		mov		esp, ebp
   189 00000221 5D                  <1> 		pop		ebp
   190                              <1> 
   191 00000222 C3                  <1> 		ret
   192                              <1> 
   193                              <1> %ifdef USE_TEST_AND_SET
   194                              <1> ALIGN 4, db 0
   195                              <1> IN_USE:	dd	0
   196                              <1> %endif
   197                              <1> 
    85                                  %include	"../modules/protect/draw_font.s"
    86                              <1> ;************************************************************************
    87                              <1> ;	フォント一覧を表示
    88                              <1> ;========================================================================
    89                              <1> ;■書式		: void draw_font(col, row);
    90                              <1> ;
    91                              <1> ;■引数
    92                              <1> ;	col		: 列
    93                              <1> ;	row		: 行
    94                              <1> ;
    95                              <1> ;■戻り値	: 無し
    96                              <1> ;************************************************************************
    97                              <1> draw_font:
    98                              <1> 		;---------------------------------------
    99                              <1> 		; 【スタックフレームの構築】
   100                              <1> 		;---------------------------------------
   101                              <1> 												; ------|--------
   102                              <1> 												; EBP+12| Y（行）
   103                              <1> 												; EBP+ 8| X（列）
   104                              <1> 												; ---------------
   105 00000223 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   106 00000224 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   107                              <1> 												; ---------------
   108                              <1> 
   109                              <1> 		;---------------------------------------
   110                              <1> 		; 【レジスタの保存】
   111                              <1> 		;---------------------------------------
   112 00000226 50                  <1> 		push	eax
   113 00000227 53                  <1> 		push	ebx
   114 00000228 51                  <1> 		push	ecx
   115 00000229 52                  <1> 		push	edx
   116 0000022A 56                  <1> 		push	esi
   117 0000022B 57                  <1> 		push	edi
   118                              <1> 
   119                              <1> 		;---------------------------------------
   120                              <1> 		; 表示位置
   121                              <1> 		;---------------------------------------
   122 0000022C 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   123 0000022F 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   124                              <1> 
   125                              <1> 		;---------------------------------------
   126                              <1> 		; フォント一覧を表示
   127                              <1> 		;---------------------------------------
   128 00000232 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   129 00000237 81F900010000        <1> .10L:	cmp		ecx, 256						;      ECX < 256;
   130 0000023D 731F                <1> 		jae		.10E							; 
   131                              <1> 												;      ECX++)
   132                              <1> 												; {
   133                              <1> 												;   // 桁位置の計算
   134 0000023F 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   135 00000241 83E00F              <1> 		and		eax, 0x0F						;   EAX &= 0x0F
   136 00000244 01F0                <1> 		add		eax, esi						;   EAX += X;
   137                              <1> 												;   
   138                              <1> 												;   // 行位置の計算
   139 00000246 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   140 00000248 C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
   141 0000024B 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   142                              <1> 
   143 0000024D 516A075350E808FFFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
   143 00000256 FF6683C410          <1>
   144                              <1> 
   145 0000025B 41                  <1> 		inc		ecx								;   // for (... ECX++)
   146 0000025C EBD9                <1> 		jmp		.10L							; 
   147                              <1> .10E:											; }
   148                              <1> 
   149                              <1> 		;---------------------------------------
   150                              <1> 		; 【レジスタの復帰】
   151                              <1> 		;---------------------------------------
   152 0000025E 5F                  <1> 		pop		edi
   153 0000025F 5E                  <1> 		pop		esi
   154 00000260 5A                  <1> 		pop		edx
   155 00000261 59                  <1> 		pop		ecx
   156 00000262 5B                  <1> 		pop		ebx
   157 00000263 58                  <1> 		pop		eax
   158                              <1> 
   159                              <1> 		;---------------------------------------
   160                              <1> 		; 【スタックフレームの破棄】
   161                              <1> 		;---------------------------------------
   162 00000264 89EC                <1> 		mov		esp, ebp
   163 00000266 5D                  <1> 		pop		ebp
   164                              <1> 
   165 00000267 C3                  <1> 		ret
   166                              <1> 
    86                                  %include	"../modules/protect/draw_str.s"
    87                              <1> ;************************************************************************
    88                              <1> ;	文字列の表示
    89                              <1> ;========================================================================
    90                              <1> ;■書式		: void draw_str(col, row, color, p);
    91                              <1> ;
    92                              <1> ;■引数
    93                              <1> ;	col		: 列
    94                              <1> ;	row		: 行
    95                              <1> ;	color	: 描画色
    96                              <1> ;	p		: 文字列のアドレス
    97                              <1> ;
    98                              <1> ;■戻り値	: 無し
    99                              <1> ;************************************************************************
   100                              <1> draw_str:
   101                              <1> 		;---------------------------------------
   102                              <1> 		; 【スタックフレームの構築】
   103                              <1> 		;---------------------------------------
   104                              <1> 												; ------|--------
   105                              <1> 												; EBP+20| *p（文字列のアドレス）
   106                              <1> 												; EBP+16| color（色）
   107                              <1> 												; EBP+12| row（行）
   108                              <1> 												; EBP+ 8| col（列）
   109                              <1> 												; ---------------
   110 00000268 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   111 00000269 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   112                              <1> 												; ---------------
   113                              <1> 
   114                              <1> 		;---------------------------------------
   115                              <1> 		; 【レジスタの保存】
   116                              <1> 		;---------------------------------------
   117 0000026B 50                  <1> 		push	eax
   118 0000026C 53                  <1> 		push	ebx
   119 0000026D 51                  <1> 		push	ecx
   120 0000026E 52                  <1> 		push	edx
   121 0000026F 56                  <1> 		push	esi
   122                              <1> 
   123                              <1> 		;---------------------------------------
   124                              <1> 		; 文字列の表示
   125                              <1> 		;---------------------------------------
   126 00000270 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
   127 00000273 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
   128 00000276 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
   129 0000027A 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
   130                              <1> 
   131 0000027D FC                  <1> 		cld										; DF = 0; // アドレス加算
   132                              <1> .10L:											; do
   133                              <1> 												; {
   134 0000027E AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
   135 0000027F 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   136 00000281 7425                <1> 		je		.10E							;     break;
   137                              <1> 
   138                              <1> 		;---------------------------------------
   139                              <1> 		; 1文字表示
   140                              <1> 		;---------------------------------------
   141                              <1> %ifdef	USE_SYSTEM_CALL
   142                              <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
   143                              <1> %else
   144 00000283 50535251E8D3FEFFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
   144 0000028C 6683C410            <1>
   145                              <1> %endif
   146                              <1> 
   147                              <1> 		; 次の文字の位置を調整
   148 00000290 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
   149 00000291 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
   150 00000294 7C10                <1> 		jl		.12E							;   {
   151 00000296 B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
   152 0000029B 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
   153 0000029C 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
   154 0000029F 7C05                <1> 		jl		.12E							;     {
   155 000002A1 BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
   156                              <1> 												;     }
   157                              <1> .12E:											;   }
   158 000002A6 EBD6                <1> 		jmp		.10L							;   
   159                              <1> .10E:											; } while (1);
   160                              <1> 
   161                              <1> 		;---------------------------------------
   162                              <1> 		; 【レジスタの復帰】
   163                              <1> 		;---------------------------------------
   164 000002A8 5E                  <1> 		pop		esi
   165 000002A9 5A                  <1> 		pop		edx
   166 000002AA 59                  <1> 		pop		ecx
   167 000002AB 5B                  <1> 		pop		ebx
   168 000002AC 58                  <1> 		pop		eax
   169                              <1> 
   170                              <1> 		;---------------------------------------
   171                              <1> 		; 【スタックフレームの破棄】
   172                              <1> 		;---------------------------------------
   173 000002AD 89EC                <1> 		mov		esp, ebp
   174 000002AF 5D                  <1> 		pop		ebp
   175                              <1> 
   176 000002B0 C3                  <1> 		ret
   177                              <1> 
    87                                  %include	"../modules/protect/draw_color_bar.s"
    88                              <1> ;************************************************************************
    89                              <1> ;	カラーバーの表示
    90                              <1> ;========================================================================
    91                              <1> ;■書式		: void draw_color_bar(col, row);
    92                              <1> ;
    93                              <1> ;■引数
    94                              <1> ;	col		: 列
    95                              <1> ;	row		: 行
    96                              <1> ;
    97                              <1> ;■戻り値	: 無し
    98                              <1> ;************************************************************************
    99                              <1> draw_color_bar:
   100                              <1> 		;---------------------------------------
   101                              <1> 		; 【スタックフレームの構築】
   102                              <1> 		;---------------------------------------
   103                              <1> 												; ------|--------
   104                              <1> 												; EBP+ 8| X（列）
   105                              <1> 												; EBP+12| Y（行）
   106                              <1> 												; ---------------
   107 000002B1 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   108 000002B2 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   109                              <1> 												; ---------------
   110                              <1> 		;---------------------------------------
   111                              <1> 		; 【レジスタの保存】
   112                              <1> 		;---------------------------------------
   113 000002B4 50                  <1> 		push	eax
   114 000002B5 53                  <1> 		push	ebx
   115 000002B6 51                  <1> 		push	ecx
   116 000002B7 52                  <1> 		push	edx
   117 000002B8 56                  <1> 		push	esi
   118 000002B9 57                  <1> 		push	edi
   119                              <1> 
   120                              <1> 		;---------------------------------------
   121                              <1> 		; 表示位置
   122                              <1> 		;---------------------------------------
   123 000002BA 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   124 000002BD 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   125                              <1> 
   126                              <1> 		;---------------------------------------
   127                              <1> 		; カラーバーを表示
   128                              <1> 		;---------------------------------------
   129 000002C0 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   130 000002C5 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
   131 000002C8 732E                <1> 		jae		.10E							; 
   132                              <1> 												;      ECX++)
   133                              <1> 												; {
   134                              <1> 												;   // 桁位置の計算
   135 000002CA 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   136 000002CC 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
   137 000002CF C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
   138 000002D2 01F0                <1> 		add		eax, esi						;   EAX += X;
   139                              <1> 												;   
   140                              <1> 												;   // 行位置の計算
   141 000002D4 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   142 000002D6 D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
   143 000002D8 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   144                              <1> 												;   
   145                              <1> 												;   // 表示色の取得
   146 000002DA 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
   147 000002DC D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
   148 000002DE 8B92[0B030000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
   149                              <1> 
   150 000002E4 68[02030000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
   150 000002EC E877FFFFFF6683C410  <1>
   151                              <1> 
   152 000002F5 41                  <1> 		inc		ecx								;   // for (... ECX++)
   153 000002F6 EBCD                <1> 		jmp		.10L							; 
   154                              <1> .10E:											; }
   155                              <1> 
   156                              <1> 		;---------------------------------------
   157                              <1> 		; 【レジスタの復帰】
   158                              <1> 		;---------------------------------------
   159 000002F8 5F                  <1> 		pop		edi
   160 000002F9 5E                  <1> 		pop		esi
   161 000002FA 5A                  <1> 		pop		edx
   162 000002FB 59                  <1> 		pop		ecx
   163 000002FC 5B                  <1> 		pop		ebx
   164 000002FD 58                  <1> 		pop		eax
   165                              <1> 
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 【スタックフレームの破棄】
   168                              <1> 		;---------------------------------------
   169 000002FE 89EC                <1> 		mov		esp, ebp
   170 00000300 5D                  <1> 		pop		ebp
   171                              <1> 
   172 00000301 C3                  <1> 		ret
   173                              <1> 
   174 00000302 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
   175                              <1> 
   176 0000030B 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
   177 0000030F 00010009            <1> 		dw	0x0100, 0x0900
   178 00000313 0002000A            <1> 		dw	0x0200, 0x0A00
   179 00000317 0003000B            <1> 		dw	0x0300, 0x0B00
   180 0000031B 0004000C            <1> 		dw	0x0400, 0x0C00
   181 0000031F 0005000D            <1> 		dw	0x0500, 0x0D00
   182 00000323 0006000E            <1> 		dw	0x0600, 0x0E00
   183 00000327 0007000F            <1> 		dw	0x0700, 0x0F00
   184                              <1> 
    88                                  %include	"../modules/protect/draw_pixel.s"
    89                              <1> ;************************************************************************
    90                              <1> ;	ピクセルの描画
    91                              <1> ;========================================================================
    92                              <1> ;■書式		: void draw_pixel(X, Y, color);
    93                              <1> ;
    94                              <1> ;■引数
    95                              <1> ;	X		: X座標
    96                              <1> ;	Y		: Y座標
    97                              <1> ;	color	: 描画色
    98                              <1> ;
    99                              <1> ;■戻り値	: 無し
   100                              <1> ;************************************************************************
   101                              <1> draw_pixel:
   102                              <1> 		;---------------------------------------
   103                              <1> 		; 【スタックフレームの構築】
   104                              <1> 		;---------------------------------------
   105                              <1> 												; ------|--------
   106                              <1> 												; EBP+16| 色
   107                              <1> 												; EBP+12| Y
   108                              <1> 												; EBP+ 8| X
   109                              <1> 												; ------|--------
   110 0000032B 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   111 0000032C 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   112                              <1> 												; ------+--------
   113                              <1> 		;---------------------------------------
   114                              <1> 		; 【レジスタの保存】
   115                              <1> 		;---------------------------------------
   116 0000032E 50                  <1> 		push	eax
   117 0000032F 53                  <1> 		push	ebx
   118 00000330 51                  <1> 		push	ecx
   119 00000331 57                  <1> 		push	edi
   120                              <1> 
   121                              <1> 		;---------------------------------------
   122                              <1> 		; Y座標を80倍する（640/8）
   123                              <1> 		;---------------------------------------
   124 00000332 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI  = Y座標
   125 00000335 C1E704              <1> 		shl		edi, 4							; EDI *= 16;
   126 00000338 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA_0000]	; EDI  = 0xA00000[EDI * 4 + EDI];
   127                              <1> 
   128                              <1> 		;---------------------------------------
   129                              <1> 		; X座標を1/8して加算
   130                              <1> 		;---------------------------------------
   131 0000033F 8B5D08              <1> 		mov		ebx, [ebp + 8]					; EBX  = X座標;
   132 00000342 89D9                <1> 		mov		ecx, ebx						; ECX  = X座標;（一時保存）
   133 00000344 C1EB03              <1> 		shr		ebx, 3							; EBX /= 8;
   134 00000347 01DF                <1> 		add		edi, ebx						; EDI += EBX;
   135                              <1> 
   136                              <1> 		;---------------------------------------
   137                              <1> 		; X座標を8で割った余りからビット位置を計算
   138                              <1> 		; (0=0x80, 1=0x40,... 7=0x01)
   139                              <1> 		;---------------------------------------
   140 00000349 83E107              <1> 		and		ecx, 0x07						; ECX = X & 0x07;
   141 0000034C BB80000000          <1> 		mov		ebx, 0x80						; EBX = 0x80;
   142 00000351 D3EB                <1> 		shr		ebx, cl							; EBX >>= ECX;
   143                              <1> 
   144                              <1> 		;---------------------------------------
   145                              <1> 		; 色指定
   146                              <1> 		;---------------------------------------
   147 00000353 8B4D10              <1> 		mov		ecx, [ebp +16]					; // 表示色
   148                              <1> 
   149                              <1> %ifdef	USE_TEST_AND_SET
   150                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   151                              <1> %endif
   152                              <1> 
   153                              <1> 		;---------------------------------------
   154                              <1> 		; プレーン毎に出力
   155                              <1> 		;---------------------------------------
   156 00000356 6A03E84FFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 輝度(I)プレーンを選択
   156 0000035F C404                <1>
   157 00000361 6A08E85DFDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 輝度(I)プレーンを選択
   157 0000036A C404                <1>
   158 0000036C 516A085753E8BBFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
   158 00000375 FF6683C410          <1>
   159                              <1> 
   160 0000037A 6A02E82BFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 赤(R)プレーンを選択
   160 00000383 C404                <1>
   161 00000385 6A04E839FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 赤(R)プレーンを選択
   161 0000038E C404                <1>
   162 00000390 516A045753E897FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
   162 00000399 FF6683C410          <1>
   163                              <1> 
   164 0000039E 6A01E807FDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 緑(G)プレーンを選択
   164 000003A7 C404                <1>
   165 000003A9 6A02E815FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 緑(G)プレーンを選択
   165 000003B2 C404                <1>
   166 000003B4 516A025753E873FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
   166 000003BD FF6683C410          <1>
   167                              <1> 
   168 000003C2 6A00E8E3FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 青(B)プレーンを選択
   168 000003CB C404                <1>
   169 000003CD 6A01E8F1FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 青(B)プレーンを選択
   169 000003D6 C404                <1>
   170 000003D8 516A015753E84FFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
   170 000003E1 FF6683C410          <1>
   171                              <1> 
   172                              <1> 
   173                              <1> %ifdef	USE_TEST_AND_SET
   174                              <1> 		;---------------------------------------
   175                              <1> 		; テストアンドセット
   176                              <1> 		;---------------------------------------
   177                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   178                              <1> %endif
   179                              <1> 
   180                              <1> 		;---------------------------------------
   181                              <1> 		; 【レジスタの復帰】
   182                              <1> 		;---------------------------------------
   183 000003E6 5F                  <1> 		pop		edi
   184 000003E7 59                  <1> 		pop		ecx
   185 000003E8 5B                  <1> 		pop		ebx
   186 000003E9 58                  <1> 		pop		eax
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 【スタックフレームの破棄】
   190                              <1> 		;---------------------------------------
   191 000003EA 89EC                <1> 		mov		esp, ebp
   192 000003EC 5D                  <1> 		pop		ebp
   193                              <1> 
   194 000003ED C3                  <1> 		ret
   195                              <1> 
    89                                  %include	"../modules/protect/draw_line.s"
    90                              <1> ;************************************************************************
    91                              <1> ;	直線の描画
    92                              <1> ;========================================================================
    93                              <1> ;■書式		: void draw_line(X0, Y0, X1, Y1, color);
    94                              <1> ;
    95                              <1> ;■引数
    96                              <1> ;	X0		: 始点のX座標
    97                              <1> ;	Y0		: 始点のY座標
    98                              <1> ;	X1		: 終点のX座標
    99                              <1> ;	Y1		: 終点のY座標
   100                              <1> ;	color	: 描画色
   101                              <1> ;
   102                              <1> ;■戻り値	: 無し
   103                              <1> ;************************************************************************
   104                              <1> draw_line:
   105                              <1> 		;---------------------------------------
   106                              <1> 		; 【スタックフレームの構築】
   107                              <1> 		;---------------------------------------
   108                              <1> 												; ---------------
   109                              <1> 												;    +24| 色
   110                              <1> 												;    +20| Y1
   111                              <1> 												;    +16| X1
   112                              <1> 												;    +12| Y0
   113                              <1> 												;    + 8| X0
   114                              <1> 												; ---------------
   115 000003EE 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   116 000003EF 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   117                              <1> 												; ---------------
   118 000003F1 6A00                <1> 		push	dword 0							;    - 4| sum   = 0; // 相対軸の積算値
   119 000003F3 6A00                <1> 		push	dword 0							;    - 8| x0    = 0; // X座標
   120 000003F5 6A00                <1> 		push	dword 0							;    -12| dx    = 0; // X増分
   121 000003F7 6A00                <1> 		push	dword 0							;    -16| inc_x = 0; // X座標増分(1 or -1)
   122 000003F9 6A00                <1> 		push	dword 0							;    -20| y0    = 0; // Y座標
   123 000003FB 6A00                <1> 		push	dword 0							;    -24| dy    = 0; // Y増分
   124 000003FD 6A00                <1> 		push	dword 0							;    -28| inc_y = 0; // Y座標増分(1 or -1)
   125                              <1> 												; ------|--------
   126                              <1> 
   127                              <1> 		;---------------------------------------
   128                              <1> 		; 【レジスタの保存】
   129                              <1> 		;---------------------------------------
   130 000003FF 50                  <1> 		push	eax
   131 00000400 53                  <1> 		push	ebx
   132 00000401 51                  <1> 		push	ecx
   133 00000402 52                  <1> 		push	edx
   134 00000403 56                  <1> 		push	esi
   135 00000404 57                  <1> 		push	edi
   136                              <1> 
   137                              <1> 		;---------------------------------------
   138                              <1> 		; 幅を計算（X軸）
   139                              <1> 		;---------------------------------------
   140 00000405 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   141 00000408 8B5D10              <1> 		mov		ebx, [ebp +16]					; EBX = X1;
   142 0000040B 29C3                <1> 		sub		ebx, eax						; EBX = X1 - X0; // 幅
   143 0000040D 7D09                <1> 		jge		.10F							; if (幅 < 0)
   144                              <1> 												; {
   145 0000040F F7DB                <1> 		neg		ebx								;   幅   *= -1;
   146 00000411 BEFFFFFFFF          <1> 		mov		esi, -1							;   // X座標の増分
   147 00000416 EB05                <1> 		jmp		.10E							; }
   148                              <1> .10F:											; else
   149                              <1> 												; {
   150 00000418 BE01000000          <1> 		mov		esi, 1							;   // X座標の増分
   151                              <1> .10E:											; }
   152                              <1> 
   153                              <1> 		;---------------------------------------
   154                              <1> 		; 高さを計算（Y軸）
   155                              <1> 		;---------------------------------------
   156 0000041D 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX = Y0
   157 00000420 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1
   158 00000423 29CA                <1> 		sub		edx, ecx						; EDX = Y1 - Y0; // 高さ
   159 00000425 7D09                <1> 		jge		.20F							; if (高さ < 0)
   160                              <1> 												; {
   161 00000427 F7DA                <1> 		neg		edx								;   高さ *= -1;
   162 00000429 BFFFFFFFFF          <1> 		mov		edi, -1							;   // Y座標の増分
   163 0000042E EB05                <1> 		jmp		.20E							; }
   164                              <1> .20F:											; else
   165                              <1> 												; {
   166 00000430 BF01000000          <1> 		mov		edi, 1							;   // Y座標の増分
   167                              <1> .20E:											; }
   168                              <1> 
   169                              <1> 		;---------------------------------------
   170                              <1> 		; X軸
   171                              <1> 		;---------------------------------------
   172 00000435 8945F8              <1> 		mov		[ebp - 8], eax					;   // X軸:開始座標
   173 00000438 895DF4              <1> 		mov		[ebp -12], ebx					;   // X軸:描画幅
   174 0000043B 8975F0              <1> 		mov		[ebp -16], esi					;   // X軸:増分(基準軸：1 or -1)
   175                              <1> 
   176                              <1> 		;---------------------------------------
   177                              <1> 		; Y軸
   178                              <1> 		;---------------------------------------
   179 0000043E 894DEC              <1> 		mov		[ebp -20], ecx					;   // Y軸:開始座標
   180 00000441 8955E8              <1> 		mov		[ebp -24], edx					;   // Y軸:描画幅
   181 00000444 897DE4              <1> 		mov		[ebp -28], edi					;   // Y軸:増分(基準軸：1 or -1)
   182                              <1> 
   183                              <1> 		;---------------------------------------
   184                              <1> 		; 基準軸を決める
   185                              <1> 		;---------------------------------------
   186 00000447 39D3                <1> 		cmp		ebx, edx						; if (幅 <= 高さ)
   187 00000449 7F08                <1> 		jg		.22F							; {
   188                              <1> 												;   
   189 0000044B 8D75EC              <1> 		lea		esi, [ebp -20]					;   // Y軸が基準軸
   190 0000044E 8D7DF8              <1> 		lea		edi, [ebp - 8]					;   // X軸が相対軸
   191                              <1> 												;   
   192 00000451 EB06                <1> 		jmp		.22E							; }
   193                              <1> .22F:											; else
   194                              <1> 												; {
   195 00000453 8D75F8              <1> 		lea		esi, [ebp - 8]					;   // X軸が基準軸
   196 00000456 8D7DEC              <1> 		lea		edi, [ebp -20]					;   // Y軸が相対軸
   197                              <1> .22E:											; }
   198                              <1> 
   199                              <1> 		;---------------------------------------
   200                              <1> 		; 繰り返し回数(基準軸のドット数)
   201                              <1> 		;---------------------------------------
   202 00000459 8B4EFC              <1> 		mov		ecx, [esi - 4]					; ECX = 基準軸描画幅;
   203 0000045C 83F900              <1> 		cmp		ecx, 0							; if (0 == ECX)
   204 0000045F 7505                <1> 		jnz		.30E							; {
   205 00000461 B901000000          <1> 		mov		ecx, 1							;   ECX = 1;
   206                              <1> .30E:											; }
   207                              <1> 
   208                              <1> 		;---------------------------------------
   209                              <1> 		; 線を描画
   210                              <1> 		;---------------------------------------
   211                              <1> .50L:											; do
   212                              <1> 												; {
   213                              <1> %ifdef	USE_SYSTEM_CALL
   214                              <1> 		mov		eax, ecx						;   // 繰り返し回数を保存
   215                              <1> 
   216                              <1> 		mov		ebx, [ebp +24]					;   EBX = 表示色;
   217                              <1> 		mov		ecx, [ebp - 8]					;   ECX = X座標;
   218                              <1> 		mov		edx, [ebp -20]					;   EDX = Y座標;
   219                              <1> 		int		0x82							;   sys_call(1, X, Y, 色, 文字); BX(C), CX(X), DX(Y)
   220                              <1> 
   221                              <1> 		mov		ecx, eax
   222                              <1> %else
   223 00000466 FF7518FF75ECFF75F8- <1> 		cdecl	draw_pixel, dword [ebp - 8], 							dword [ebp -20], 							dword [ebp +24]		;   // 点の描画
   223 0000046F E8B7FEFFFF6683C40C  <1>
   226                              <1> %endif
   227                              <1> 												;   // 基準軸を更新(1ドット分)
   228 00000478 8B46F8              <1> 		mov		eax, [esi - 8]					;   EAX = 基準軸増分(1 or -1);
   229 0000047B 0106                <1> 		add		[esi - 0], eax					;   
   230                              <1> 
   231                              <1> 												;   // 相対軸を更新
   232 0000047D 8B45FC              <1> 		mov		eax, [ebp - 4]					;   EAX  = sum; // 相対軸の積算値;
   233 00000480 0347FC              <1> 		add		eax, [edi - 4]					;   EAX += dy;  // 増分(相対軸の描画幅)
   234 00000483 8B5EFC              <1> 		mov		ebx, [esi - 4]					;   EBX  = dx;  // 増分(基準軸の描画幅)
   235                              <1> 
   236 00000486 39D8                <1> 		cmp		eax, ebx						;   if (積算値 <= 相対軸の増分)
   237 00000488 7C07                <1> 		jl		.52E							;   {
   238 0000048A 29D8                <1> 		sub		eax, ebx						;     EAX -= EBX; // 積算値から相対軸の増分を減算
   239                              <1> 												;     
   240                              <1> 												;     // 相対軸の座標を更新(1ドット分)
   241 0000048C 8B5FF8              <1> 		mov		ebx, [edi - 8]					;     EBX =  相対軸増分;
   242 0000048F 011F                <1> 		add		[edi - 0], ebx					;     
   243                              <1> .52E:											;   }
   244 00000491 8945FC              <1> 		mov		[ebp - 4], eax					;   // 積算値を更新
   245                              <1> 												;   
   246 00000494 E2D0                <1> 		loop	.50L							;   
   247                              <1> .50E:											; } while (ループ回数--);
   248                              <1> 
   249                              <1> 		;---------------------------------------
   250                              <1> 		; 【レジスタの復帰】
   251                              <1> 		;---------------------------------------
   252 00000496 5F                  <1> 		pop		edi
   253 00000497 5E                  <1> 		pop		esi
   254 00000498 5A                  <1> 		pop		edx
   255 00000499 59                  <1> 		pop		ecx
   256 0000049A 5B                  <1> 		pop		ebx
   257 0000049B 58                  <1> 		pop		eax
   258                              <1> 
   259                              <1> 		;---------------------------------------
   260                              <1> 		; 【スタックフレームの破棄】
   261                              <1> 		;---------------------------------------
   262 0000049C 89EC                <1> 		mov		esp, ebp
   263 0000049E 5D                  <1> 		pop		ebp
   264                              <1> 
   265 0000049F C3                  <1> 		ret
   266                              <1> 
    90                                  %include	"../modules/protect/draw_rect.s"
    91                              <1> ;************************************************************************
    92                              <1> ;	矩形の描画
    93                              <1> ;========================================================================
    94                              <1> ;■書式		: void draw_rect(X0, Y0, X1, Y1, color);
    95                              <1> ;
    96                              <1> ;■引数
    97                              <1> ;	X0		: 始点のX座標
    98                              <1> ;	Y0		: 始点のY座標
    99                              <1> ;	X1		: 終点のX座標
   100                              <1> ;	Y1		: 終点のY座標
   101                              <1> ;	color	: 描画色
   102                              <1> ;
   103                              <1> ;■戻り値	: 無し
   104                              <1> ;************************************************************************
   105                              <1> draw_rect:
   106                              <1> 		;---------------------------------------
   107                              <1> 		; 【スタックフレームの構築】
   108                              <1> 		;---------------------------------------
   109                              <1> 												; ------|--------
   110                              <1> 												; EBP+24| 色
   111                              <1> 												; EBP+20| Y1
   112                              <1> 												; EBP+16| X1
   113                              <1> 												; EBP+12| Y0
   114                              <1> 												; EBP+ 8| X0
   115                              <1> 												; ---------------
   116 000004A0 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   117 000004A1 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   118                              <1> 												; ------|--------
   119                              <1> 
   120                              <1> 		;---------------------------------------
   121                              <1> 		; 【レジスタの保存】
   122                              <1> 		;---------------------------------------
   123 000004A3 50                  <1> 		push		eax
   124 000004A4 53                  <1> 		push		ebx
   125 000004A5 51                  <1> 		push		ecx
   126 000004A6 52                  <1> 		push		edx
   127 000004A7 56                  <1> 		push		esi
   128                              <1> 
   129                              <1> 		;---------------------------------------
   130                              <1> 		; 矩形を描画
   131                              <1> 		;---------------------------------------
   132 000004A8 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   133 000004AB 8B5D0C              <1> 		mov		ebx, [ebp +12]					; EBX = Y0;
   134 000004AE 8B4D10              <1> 		mov		ecx, [ebp +16]					; ECX = X1;
   135 000004B1 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1;
   136 000004B4 8B7518              <1> 		mov		esi, [ebp +24]					; ESI = 色;
   137                              <1> 
   138                              <1> 		;---------------------------------------
   139                              <1> 		; 座標軸の大小を確定
   140                              <1> 		;---------------------------------------
   141 000004B7 39C8                <1> 		cmp		eax, ecx						; if (X1 < X0)
   142 000004B9 7C01                <1> 		jl		.10E							; {
   143 000004BB 91                  <1> 		xchg	eax, ecx						;   X0とX1を入れ替える;
   144                              <1> .10E:											; }
   145                              <1> 
   146 000004BC 39D3                <1> 		cmp		ebx, edx						; if (Y1 < Y0)
   147 000004BE 7C02                <1> 		jl		.20E							; {
   148 000004C0 87DA                <1> 		xchg	ebx, edx						;   Y0とY1を入れ替える;
   149                              <1> .20E:											; }
   150                              <1> 
   151                              <1> 		;---------------------------------------
   152                              <1> 		; 矩形を描画
   153                              <1> 		;---------------------------------------
   154 000004C2 5653515350E822FFFF- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, esi	; 上線
   154 000004CB FF6683C414          <1>
   155 000004D0 5652505350E814FFFF- <1> 		cdecl	draw_line, eax, ebx, eax, edx, esi	; 左線
   155 000004D9 FF6683C414          <1>
   156                              <1> 
   157 000004DE 4A                  <1> 		dec		edx									; EDX--; // 下線は1ドット上げる
   158 000004DF 5652515250E805FFFF- <1> 		cdecl	draw_line, eax, edx, ecx, edx, esi	; 下線
   158 000004E8 FF6683C414          <1>
   159 000004ED 42                  <1> 		inc		edx
   160                              <1> 
   161 000004EE 49                  <1> 		dec		ecx									; ECX--; // 右線は1ドット左に移動
   162 000004EF 5652515351E8F5FEFF- <1> 		cdecl	draw_line, ecx, ebx, ecx, edx, esi	; 右線
   162 000004F8 FF6683C414          <1>
   163                              <1> 
   164                              <1> 		;---------------------------------------
   165                              <1> 		; 【レジスタの復帰】
   166                              <1> 		;---------------------------------------
   167 000004FD 5E                  <1> 		pop		esi
   168 000004FE 5A                  <1> 		pop		edx
   169 000004FF 59                  <1> 		pop		ecx
   170 00000500 5B                  <1> 		pop		ebx
   171 00000501 58                  <1> 		pop		eax
   172                              <1> 
   173                              <1> 		;---------------------------------------
   174                              <1> 		; 【スタックフレームの破棄】
   175                              <1> 		;---------------------------------------
   176 00000502 89EC                <1> 		mov		esp, ebp
   177 00000504 5D                  <1> 		pop		ebp
   178                              <1> 
   179 00000505 C3                  <1> 		ret
    91                                  %include	"../modules/protect/itoa.s"
    92                              <1> ;************************************************************************
    93                              <1> ;	数値を文字に変換
    94                              <1> ;========================================================================
    95                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
    96                              <1> ;
    97                              <1> ;■引数
    98                              <1> ;	num		: 変換する数値
    99                              <1> ;	buff	: 保存先バッファアドレス
   100                              <1> ;	size	: 保存先バッファサイズ
   101                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
   102                              <1> ;	flags	: フラグ
   103                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
   104                              <1> ;			:      : 0=空白を' '（スペース）で埋める
   105                              <1> ;			:   B1 : 1=＋/-符号を表示する
   106                              <1> ;			:      : 0=＋/-符号を表示しない
   107                              <1> ;			:   B0 : 1=符号付き正数として扱う
   108                              <1> ;			:      : 0=符号無し正数として扱う
   109                              <1> ;
   110                              <1> ;■戻り値	: 無し
   111                              <1> ;************************************************************************
   112                              <1> itoa:
   113                              <1> 		;---------------------------------------
   114                              <1> 		; 【スタックフレームの構築】
   115                              <1> 		;---------------------------------------
   116                              <1> 												; ------|--------
   117                              <1> 												;    +24| フラグ
   118                              <1> 												;    +20| 基数
   119                              <1> 												;    +16| バッファサイズ
   120                              <1> 												;    +12| バッファアドレス
   121                              <1> 												;    + 8| 数値
   122                              <1> 												; ------|--------
   123                              <1> 												;    + 4| EIP（戻り番地）
   124 00000506 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   125 00000507 89E5                <1> 		mov		ebp, esp						; ------+--------
   126                              <1> 
   127                              <1> 		;---------------------------------------
   128                              <1> 		; 【レジスタの保存】
   129                              <1> 		;---------------------------------------
   130 00000509 50                  <1> 		push	eax
   131 0000050A 53                  <1> 		push	ebx
   132 0000050B 51                  <1> 		push	ecx
   133 0000050C 52                  <1> 		push	edx
   134 0000050D 56                  <1> 		push	esi
   135 0000050E 57                  <1> 		push	edi
   136                              <1> 
   137                              <1> 		;---------------------------------------
   138                              <1> 		; 引数を取得
   139                              <1> 		;---------------------------------------
   140 0000050F 8B4508              <1> 		mov		eax, [ebp + 8]					; val  = 数値;
   141 00000512 8B750C              <1> 		mov		esi, [ebp +12]					; dst  = バッファアドレス;
   142 00000515 8B4D10              <1> 		mov		ecx, [ebp +16]					; size = 残りバッファサイズ;
   143                              <1> 
   144 00000518 89F7                <1> 		mov		edi, esi						; // バッファの最後尾
   145 0000051A 01CF                <1> 		add		edi, ecx						; dst  = &dst[size - 1];
   146 0000051C 4F                  <1> 		dec		edi								; 
   147                              <1> 
   148 0000051D 8B5D18              <1> 		mov		ebx, [ebp +24]					; flags = オプション;
   149                              <1> 
   150                              <1> 		;---------------------------------------
   151                              <1> 		; 符号付き判定
   152                              <1> 		;---------------------------------------
   153 00000520 F7C301000000        <1> 		test	ebx, 0b0001						; if (flags & 0x01)// 符号付き
   154 00000526 7408                <1> .10Q:	je		.10E							; {
   155 00000528 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   156 0000052B 7D03                <1> .12Q:	jge		.12E							;   {
   157 0000052D 83CB02              <1> 		or		ebx, 0b0010						;     flags |=  2; // 符号表示
   158                              <1> .12E:											;   }
   159                              <1> .10E:											; }
   160                              <1> 
   161                              <1> 		;---------------------------------------
   162                              <1> 		; 符号出力判定
   163                              <1> 		;---------------------------------------
   164 00000530 F7C302000000        <1> 		test	ebx, 0b0010						; if (flags & 0x02)// 符号出力判定
   165 00000536 7410                <1> .20Q:	je		.20E							; {
   166 00000538 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   167 0000053B 7D07                <1> .22Q:	jge		.22F							;   {
   168 0000053D F7D8                <1> 		neg		eax								;     val *= -1;   // 符号反転
   169 0000053F C6062D              <1> 		mov		[esi], byte '-'					;     *dst = '-';  // 符号表示
   170 00000542 EB03                <1> 		jmp		.22E							;   }
   171                              <1> .22F:											;   else
   172                              <1> 												;   {
   173 00000544 C6062B              <1> 		mov		[esi], byte '+'					;     *dst = '+';  // 符号表示
   174                              <1> .22E:											;   }
   175 00000547 49                  <1> 		dec		ecx								;   size--;        // 残りバッファサイズの減算
   176                              <1> .20E:											; }
   177                              <1> 
   178                              <1> 		;---------------------------------------
   179                              <1> 		; ASCII変換
   180                              <1> 		;---------------------------------------
   181 00000548 8B5D14              <1> 		mov		ebx, [ebp +20]					; BX = 基数;
   182                              <1> .30L:											; do
   183                              <1> 												; {
   184 0000054B BA00000000          <1> 		mov		edx, 0							;   
   185 00000550 F7F3                <1> 		div		ebx								;   DX = DX:AX % 基数;
   186                              <1> 												;   AX = DX:AX / 基数;
   187                              <1> 												;   
   188 00000552 89D6                <1> 		mov		esi, edx						;   // テーブル参照
   189 00000554 8A96[7F050000]      <1> 		mov		dl, byte [.ascii + esi]			;   DL = ASCII[DX];
   190                              <1> 												;   
   191 0000055A 8817                <1> 		mov		[edi], dl						;   *dst = DL;
   192 0000055C 4F                  <1> 		dec		edi								;   dst--;
   193                              <1> 												;   
   194 0000055D 83F800              <1> 		cmp		eax, 0							;   
   195 00000560 E0E9                <1> 		loopnz	.30L							; } while (AX);
   196                              <1> .30E:
   197                              <1> 
   198                              <1> 		;---------------------------------------
   199                              <1> 		; 空欄を埋める
   200                              <1> 		;---------------------------------------
   201 00000562 83F900              <1> 		cmp		ecx, 0							; if (size)
   202 00000565 740E                <1> .40Q:	je		.40E							; {
   203 00000567 B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   204 00000569 66837D1804          <1> 		cmp		[ebp +24], word 0b0100			;   if (flags & 0x04)
   205 0000056E 7502                <1> .42Q:	jne		.42E							;   {
   206 00000570 B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   207                              <1> .42E:											;   }
   208 00000572 FD                  <1> 		std										;   // DF = 1（-方向）
   209 00000573 F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   210                              <1> .40E:											; }
   211                              <1> 
   212                              <1> 		;---------------------------------------
   213                              <1> 		; 【レジスタの復帰】
   214                              <1> 		;---------------------------------------
   215 00000575 5F                  <1> 		pop		edi
   216 00000576 5E                  <1> 		pop		esi
   217 00000577 5A                  <1> 		pop		edx
   218 00000578 59                  <1> 		pop		ecx
   219 00000579 5B                  <1> 		pop		ebx
   220 0000057A 58                  <1> 		pop		eax
   221                              <1> 
   222                              <1> 		;---------------------------------------
   223                              <1> 		; 【スタックフレームの破棄】
   224                              <1> 		;---------------------------------------
   225 0000057B 89EC                <1> 		mov		esp, ebp
   226 0000057D 5D                  <1> 		pop		ebp
   227                              <1> 
   228 0000057E C3                  <1> 		ret
   229                              <1> 
   230 0000057F 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   230 00000588 39414243444546      <1>
   231                              <1> 
    92                                  %include	"../modules/protect/rtc.s"
    93                              <1> ;************************************************************************
    94                              <1> ;	RTCから時刻データを取得する
    95                              <1> ;========================================================================
    96                              <1> ;■書式		: DWORD rtc_get_time(dst);
    97                              <1> ;
    98                              <1> ;■引数
    99                              <1> ;	dst		: 保存先アドレス
   100                              <1> ;
   101                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   102                              <1> ;************************************************************************
   103                              <1> rtc_get_time:
   104                              <1> 		;---------------------------------------
   105                              <1> 		; 【スタックフレームの構築】
   106                              <1> 		;---------------------------------------
   107                              <1> 												; ------|--------
   108                              <1> 												; EBP+ 8| 保存先アドレス
   109                              <1> 												; ---------------
   110 0000058F 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   111 00000590 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   112                              <1> 												; ---------------
   113                              <1> 		;---------------------------------------
   114                              <1> 		; 【レジスタの保存】
   115                              <1> 		;---------------------------------------
   116 00000592 53                  <1> 		push	ebx
   117                              <1> 
   118                              <1> 		;---------------------------------------
   119                              <1> 		; RTCから時刻を取得
   120                              <1> 		;---------------------------------------
   121 00000593 B00A                <1> 		mov		al, 0x0A						; // レジスタA
   122 00000595 E670                <1> 		out		0x70, al						; outp(0x70, AL);
   123 00000597 E471                <1> 		in		al, 0x71						; AL = レジスタA;
   124 00000599 A880                <1> 		test	al, 0x80						; if (DM & UIP) // 更新中
   125 0000059B 7407                <1> 		je		.10F							; {
   126 0000059D B801000000          <1> 		mov		eax, 1							;   ret = 1; // データ更新中
   127 000005A2 EB27                <1> 		jmp		.10E							; }
   128                              <1> .10F:											; else
   129                              <1> 												; {
   130                              <1> 												;   // RAM[0x04]:時
   131 000005A4 B004                <1> 		mov		al, 0x04						;   AL = 0x04;
   132 000005A6 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   133 000005A8 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 時データ
   134                              <1> 												;   
   135 000005AA C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   136                              <1> 												;   
   137                              <1> 												;   // RAM[0x02]:分
   138 000005AD B002                <1> 		mov		al, 0x02						;   AL = 0x02;
   139 000005AF E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   140 000005B1 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 分データ
   141                              <1> 												;   
   142 000005B3 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   143                              <1> 												;   
   144                              <1> 												;   // RAM[0x00]:秒
   145 000005B6 B000                <1> 		mov		al, 0x00						;   AL = 0x00;
   146 000005B8 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   147 000005BA E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 秒データ
   148                              <1> 												;   
   149 000005BC 25FFFFFF00          <1> 		and		eax, 0x00_FF_FF_FF				;   // 下位3バイトのみ有効
   150                              <1> 												;   
   151 000005C1 8B5D08              <1> 		mov		ebx, [ebp + 8]					;   dst = 保存先;
   152 000005C4 8903                <1> 		mov		[ebx], eax						;   [dst] = 時刻;
   153                              <1> 												;   
   154 000005C6 B800000000          <1> 		mov		eax, 0							;   ret = 0; // 正常終了
   155                              <1> .10E:											; }
   156                              <1> 
   157                              <1> 		;---------------------------------------
   158                              <1> 		; 【レジスタの復帰】
   159                              <1> 		;---------------------------------------
   160 000005CB 5B                  <1> 		pop		ebx
   161                              <1> 
   162                              <1> 		;---------------------------------------
   163                              <1> 		; 【スタックフレームの破棄】
   164                              <1> 		;---------------------------------------
   165 000005CC 89EC                <1> 		mov		esp, ebp
   166 000005CE 5D                  <1> 		pop		ebp
   167                              <1> 
   168 000005CF C3                  <1> 		ret
   169                              <1> 
    93                                  %include	"../modules/protect/draw_time.s"
    94                              <1> ;************************************************************************
    95                              <1> ;	時刻の表示
    96                              <1> ;========================================================================
    97                              <1> ;■書式		: void draw_time(col, row, color, time);
    98                              <1> ;
    99                              <1> ;■引数
   100                              <1> ;	col		: 列
   101                              <1> ;	row		: 行
   102                              <1> ;	color	: 描画色
   103                              <1> ;	time	: 時刻データ
   104                              <1> ;
   105                              <1> ;■戻り値	: 無し
   106                              <1> ;************************************************************************
   107                              <1> draw_time:
   108                              <1> 		;---------------------------------------
   109                              <1> 		; 【スタックフレームの構築】
   110                              <1> 		;---------------------------------------
   111                              <1> 												; ------|--------
   112                              <1> 												; EBP+20| 時刻データ
   113                              <1> 												; EBP+16| 色
   114                              <1> 												; EBP+12| Y（行）
   115                              <1> 												; EBP+ 8| X（列）
   116                              <1> 												; ---------------
   117 000005D0 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   118 000005D1 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   119                              <1> 												; ---------------
   120                              <1> 		;---------------------------------------
   121                              <1> 		; 【レジスタの保存】
   122                              <1> 		;---------------------------------------
   123 000005D3 50                  <1> 		push	eax
   124 000005D4 53                  <1> 		push	ebx
   125                              <1> 
   126                              <1> 		;---------------------------------------
   127                              <1> 		; 
   128                              <1> 		;---------------------------------------
   129 000005D5 8B4514              <1> 		mov		eax, [ebp +20]					; EAX = 時刻データ;
   130 000005D8 3B05[56060000]      <1> 		cmp		eax, [.last]					; if (今回 != 前回)
   131 000005DE 7467                <1> 		je		.10E							; {
   132                              <1> 												;   
   133 000005E0 A3[56060000]        <1> 		mov		[.last], eax					;   // 前回の時刻値を更新
   134                              <1> 												;   
   135 000005E5 BB00000000          <1> 		mov		ebx, 0							;   EBX = 0;
   136 000005EA 88C3                <1> 		mov		bl, al							;   EBX = 秒;
   137 000005EC 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .sec, 2, 16, 0b0100	;   // 時刻を文字列に変換
   137 000005F3 [64060000]53E809FF- <1>
   137 000005FB FFFF6683C414        <1>
   138                              <1> 
   139 00000601 88E3                <1> 		mov		bl, ah							;   EBX = 分;
   140 00000603 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .min, 2, 16, 0b0100	;   // 時刻を文字列に変換
   140 0000060A [61060000]53E8F2FE- <1>
   140 00000612 FFFF6683C414        <1>
   141                              <1> 
   142 00000618 C1E810              <1> 		shr		eax, 16							;   EBX = 時;
   143 0000061B 6A046A106A0268-     <1> 		cdecl	itoa, eax, .hour, 2, 16, 0b0100	;   // 時刻を文字列に変換
   143 00000622 [5E060000]50E8DAFE- <1>
   143 0000062A FFFF6683C414        <1>
   144                              <1> 
   145                              <1> 												;   // 時刻を表示
   146 00000630 68[5E060000]FF7510- <1> 		cdecl	draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
   146 00000638 FF750CFF7508E825FC- <1>
   146 00000641 FFFF6683C410        <1>
   147                              <1> 												;     
   148                              <1> 												;   }
   149                              <1> .10E:											; }
   150                              <1> 
   151                              <1> 		;---------------------------------------
   152                              <1> 		; 【レジスタの復帰】
   153                              <1> 		;---------------------------------------
   154 00000647 5B                  <1> 		pop		ebx
   155 00000648 58                  <1> 		pop		eax
   156                              <1> 
   157                              <1> 		;---------------------------------------
   158                              <1> 		; 【スタックフレームの破棄】
   159                              <1> 		;---------------------------------------
   160 00000649 89EC                <1> 		mov		esp, ebp
   161 0000064B 5D                  <1> 		pop		ebp
   162                              <1> 
   163 0000064C C3                  <1> 		ret
   164                              <1> 
   165 0000064D 00                  <1> ALIGN 2, db 0
   166 0000064E 0000000000000000    <1> .temp:	dq	0
   167 00000656 0000000000000000    <1> .last:	dq	0
   168 0000065E 5A5A3A              <1> .hour:	db	"ZZ:"
   169 00000661 5A5A3A              <1> .min:	db	"ZZ:"
   170 00000664 5A5A00              <1> .sec:	db	"ZZ", 0
   171                              <1> 
    94                                  %include	"modules/interrupt.s"
    95                              <1> ;************************************************************************
    96                              <1> ;	割り込みベクタの初期化
    97                              <1> ;************************************************************************
    98 00000667 90                  <1> ALIGN 4
    99 00000668 FF07                <1> IDTR:	dw 		8 * 256 - 1					; idt_limit
   100 0000066A 00001000            <1> 		dd 		VECT_BASE					; idt location
   101                              <1> 
   102                              <1> ;************************************************************************
   103                              <1> ;	割り込みテーブルを初期化
   104                              <1> ;------------------------------------------------------------------------
   105                              <1> ;	
   106                              <1> ;	まず、全ての割り込みアドレスにデフォルト処理を設定すし、その後、
   107                              <1> ;	必要な割り込みだけ設定しなおす。
   108                              <1> ;	
   109                              <1> ;	割り込みアドレスは、VECT_BASEで指定され、256の割り込みがあるので
   110                              <1> ;	0x0800バイト占有することになる。
   111                              <1> ;	
   112                              <1> ;	           |____________| _V___
   113                              <1> ;	  VECT_BASE| IntDefault |  |   
   114                              <1> ;	           | IntDefault |  | 8 * 256
   115                              <1> ;	           |      :     |  |   
   116                              <1> ;	           |____________| _|___
   117                              <1> ;	      +0800|////////////|
   118                              <1> ;	           |            |
   119                              <1> ;	
   120                              <1> ;	一つの割り込み設定は8バイトで構成される。
   121                              <1> ;	
   122                              <1> ;	           |____________|____________| 
   123                              <1> ;	        [0]| Address Lo[15: 0]       | 
   124                              <1> ;	        [2]| Selector                | 
   125                              <1> ;	        [4]| Flags                   | 
   126                              <1> ;	        [6]|_Address Lo[32:16]_______| 
   127                              <1> ;	           |/////////////////////////| 
   128                              <1> ;	           |            |            | 
   129                              <1> ;	
   130                              <1> ;========================================================================
   131                              <1> ;■書式		: void init_int(void);
   132                              <1> ;
   133                              <1> ;■引数		: 無し
   134                              <1> ;
   135                              <1> ;■戻り値	: 無し
   136                              <1> ;************************************************************************
   137                              <1> init_int:
   138                              <1> 		;---------------------------------------
   139                              <1> 		; 【レジスタの保存】
   140                              <1> 		;---------------------------------------
   141 0000066E 50                  <1> 		push	eax
   142 0000066F 53                  <1> 		push	ebx
   143 00000670 51                  <1> 		push	ecx
   144 00000671 57                  <1> 		push	edi
   145                              <1> 
   146                              <1> 		;---------------------------------------
   147                              <1> 		; 全ての割り込みにデフォルト処理を設定
   148                              <1> 		;---------------------------------------
   149 00000672 8D05[B7070000]      <1> 		lea		eax, [int_default]				; EAX   = 割り込み処理アドレス;
   150 00000678 BB008E0800          <1> 		mov		ebx, 0x0008_8E00				; EBX   = セグメントセレクタ;
   151 0000067D 6693                <1> 		xchg	ax, bx							; // 下位ワードを交換
   152                              <1> 
   153 0000067F B900010000          <1> 		mov		ecx, 256						; ECX   = 割り込みベクタ数
   154 00000684 BF00001000          <1> 		mov		edi, VECT_BASE					; EDI   = 割り込みベクタテーブル
   155                              <1> 
   156                              <1> .10L:											; do
   157                              <1> 												; {
   158 00000689 891F                <1> 		mov		[edi + 0], ebx					;   [EDI + 0] = 割り込みディスクリプタ（下位）
   159 0000068B 894704              <1> 		mov		[edi + 4], eax					;   [EDI + 4] = 割り込みディスクリプタ（上位）
   160 0000068E 83C708              <1> 		add		edi, 8							;   EDI += 8;
   161 00000691 E2F6                <1> 		loop	.10L							; } while (ECX--);
   162                              <1> 
   163                              <1> 		;---------------------------------------
   164                              <1> 		; 割り込みディスクリプタの設定
   165                              <1> 		;---------------------------------------
   166 00000693 0F011D[68060000]    <1> 		lidt	[IDTR]							; // 割り込みディスクリプタテーブルをロード
   167                              <1> 
   168                              <1> 		;---------------------------------------
   169                              <1> 		; 【レジスタの復帰】
   170                              <1> 		;---------------------------------------
   171 0000069A 5F                  <1> 		pop		edi
   172 0000069B 59                  <1> 		pop		ecx
   173 0000069C 5B                  <1> 		pop		ebx
   174 0000069D 58                  <1> 		pop		eax
   175                              <1> 
   176 0000069E C3                  <1> 		ret
   177                              <1> 
   178                              <1> ;************************************************************************
   179                              <1> ;	スタックの内容を表示して無限ループを実行
   180                              <1> ;************************************************************************
   181                              <1> int_stop:
   182                              <1> 		;---------------------------------------
   183                              <1> 		; EAXで示される文字列を表示
   184                              <1> 		;---------------------------------------
   185 0000069F 50680F0600006A0F6A- <1> 		cdecl	draw_str, 25, 15, 0x060F, eax	; draw_str(EAX);
   185 000006A8 19E8BAFBFFFF6683C4- <1>
   185 000006B1 10                  <1>
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; スタックのデータを文字列に変換
   189                              <1> 		;---------------------------------------
   190 000006B2 8B0424              <1> 		mov		eax, [esp + 0]					; EAX = ESP[ 0];
   191 000006B5 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p1, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   191 000006BC [7A070000]50E840FE- <1>
   191 000006C4 FFFF6683C414        <1>
   192                              <1> 
   193 000006CA 8B442404            <1> 		mov		eax, [esp + 4]					; EAX = ESP[ 4];
   194 000006CE 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p2, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   194 000006D5 [8B070000]50E827FE- <1>
   194 000006DD FFFF6683C414        <1>
   195                              <1> 
   196 000006E3 8B442408            <1> 		mov		eax, [esp + 8]					; EAX = ESP[ 8];
   197 000006E7 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p3, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   197 000006EE [9C070000]50E80EFE- <1>
   197 000006F6 FFFF6683C414        <1>
   198                              <1> 
   199 000006FC 8B44240C            <1> 		mov		eax, [esp +12]					; EAX = ESP[12];
   200 00000700 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p4, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   200 00000707 [AD070000]50E8F5FD- <1>
   200 0000070F FFFF6683C414        <1>
   201                              <1> 
   202                              <1> 		;---------------------------------------
   203                              <1> 		; 文字列の表示
   204                              <1> 		;---------------------------------------
   205 00000715 68[73070000]68040F- <1> 		cdecl	draw_str, 25, 16, 0x0F04, .s1	; draw_str("ESP+ 0:-------- ");
   205 0000071D 00006A106A19E840FB- <1>
   205 00000726 FFFF6683C410        <1>
   206 0000072C 68[84070000]68040F- <1> 		cdecl	draw_str, 25, 17, 0x0F04, .s2	; draw_str("   + 4:-------- ");
   206 00000734 00006A116A19E829FB- <1>
   206 0000073D FFFF6683C410        <1>
   207 00000743 68[95070000]68040F- <1> 		cdecl	draw_str, 25, 18, 0x0F04, .s3	; draw_str("   + 8:-------- ");
   207 0000074B 00006A126A19E812FB- <1>
   207 00000754 FFFF6683C410        <1>
   208 0000075A 68[A6070000]68040F- <1> 		cdecl	draw_str, 25, 19, 0x0F04, .s4	; draw_str("   +12:-------- ");
   208 00000762 00006A136A19E8FBFA- <1>
   208 0000076B FFFF6683C410        <1>
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 無限ループ
   212                              <1> 		;---------------------------------------
   213 00000771 EBFE                <1> 		jmp		$								; while (1) ; // 無限ループ
   214                              <1> 
   215 00000773 4553502B20303A      <1> .s1		db	"ESP+ 0:"
   216 0000077A 5F5F5F5F5F5F5F5F20- <1> .p1		db	"________ ", 0
   216 00000783 00                  <1>
   217 00000784 2020202B20343A      <1> .s2		db	"   + 4:"
   218 0000078B 5F5F5F5F5F5F5F5F20- <1> .p2		db	"________ ", 0
   218 00000794 00                  <1>
   219 00000795 2020202B20383A      <1> .s3		db	"   + 8:"
   220 0000079C 5F5F5F5F5F5F5F5F20- <1> .p3		db	"________ ", 0
   220 000007A5 00                  <1>
   221 000007A6 2020202B31323A      <1> .s4		db	"   +12:"
   222 000007AD 5F5F5F5F5F5F5F5F20- <1> .p4		db	"________ ", 0
   222 000007B6 00                  <1>
   223                              <1> 
   224                              <1> ;************************************************************************
   225                              <1> ;	割り込み処理：デフォルトの処理
   226                              <1> ;************************************************************************
   227                              <1> int_default:
   228 000007B7 9C                  <1> 		pushf									; // EFLAGS(IF==0)
   229 000007B8 0E                  <1> 		push	cs								; // CS
   230 000007B9 68[9F060000]        <1> 		push	int_stop						; // スタック表示処理
   231                              <1> 
   232 000007BE B8[C4070000]        <1> 		mov		eax, .s0						; // 割り込み種別
   233 000007C3 CF                  <1> 		iret
   234                              <1> 
   235 000007C4 203C2020202053544F- <1> .s0		db	" <    STOP    > ", 0
   235 000007CD 50202020203E2000    <1>
   236                              <1> 
   237                              <1> ;************************************************************************
   238                              <1> ;	割り込み処理：ゼロ除算
   239                              <1> ;************************************************************************
   240                              <1> int_zero_div:
   241 000007D5 9C                  <1> 		pushf									; // EFLAGS
   242 000007D6 0E                  <1> 		push	cs								; // CS
   243 000007D7 68[9F060000]        <1> 		push	int_stop						; // スタック表示処理
   244                              <1> 
   245 000007DC B8[E2070000]        <1> 		mov		eax, .s0						; // 割り込み種別
   246 000007E1 CF                  <1> 		iret
   247                              <1> 
   248 000007E2 203C20205A45524F20- <1> .s0		db	" <  ZERO DIV  > ", 0
   248 000007EB 44495620203E2000    <1>
   249                              <1> 
    95                                  
    96                                  ;************************************************************************
    97                                  ;	パディング
    98                                  ;************************************************************************
    99 000007F3 00<rep 180Dh>           		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
   100                                  
