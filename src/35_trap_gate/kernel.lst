     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  %define	USE_SYSTEM_CALL
     8                                  
     9                                  ;************************************************************************
    10                                  ;	マクロ
    11                                  ;************************************************************************
    12                                  %include	"../include/define.s"
    13                              <1> ;************************************************************************
    14                              <1> ;	メモリイメージ
    15                              <1> ;************************************************************************
    16                              <1> 
    17                              <1> 		;---------------------------------------
    18                              <1> 		;           |            | 
    19                              <1> 		;           |____________| 
    20                              <1> 		; 0000_7A00 |            | ( 512) スタック
    21                              <1> 		;           |____________| 
    22                              <1> 		; 0000_7C00 |            | (  8K) ブート
    23                              <1> 		;           =            = 
    24                              <1> 		;           |____________| 
    25                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    26                              <1> 		;           =            = 
    27                              <1> 		;           |____________| 
    28                              <1> 		; 0000_BC00 |////////////| 
    29                              <1> 		;           =            = 
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    32                              <1> 		;           |____________| 
    33                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    34                              <1> 		;           |____________| 
    35                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    36                              <1> 		;           |            | 
    37                              <1> 		;           =            = 
    38                              <1> 		;           |____________| 
    39                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    40                              <1> 		;           |            | （各タスク1K）
    41                              <1> 		;           =            = 
    42                              <1> 		;           |____________| 
    43                              <1> 		; 0010_5000 |            | Dir
    44                              <1> 		;      6000 |____________| Page
    45                              <1> 		; 0010_7000 |            | Dir
    46                              <1> 		;      8000 |____________| Page
    47                              <1> 		; 0010_9000 |////////////| 
    48                              <1> 		;           |            | 
    49                              <1> 
    50                              <1> 
    51                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    52                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    53                              <1> 
    54                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    55                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    56                              <1> 
    57                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    58                              <1> 
    59                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    60                              <1> 
    61                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    62                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    63                              <1> 
    64                              <1> 		E820_RECORD_SIZE	equ		20
    65                              <1> 
    66                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    67                              <1> 
    68                              <1> 		STACK_BASE			equ		0x0010_3000		; タスク用スタックエリア
    69                              <1> 		STACK_SIZE			equ		1024			; スタックサイズ
    70                              <1> 
    71                              <1> 		SP_TASK_0			equ		STACK_BASE + (STACK_SIZE * 1)
    72                              <1> 		SP_TASK_1			equ		STACK_BASE + (STACK_SIZE * 2)
    13                                  %include	"../include/macro.s"
    14                              <1> ;************************************************************************
    15                              <1> ; 関数呼び出し用マクロ
    16                              <1> ;
    17                              <1> ; 使い方：
    18                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    19                              <1> ;
    20                              <1> ;************************************************************************
    21                              <1> %macro  cdecl 1-*.nolist
    22                              <1> 
    23                              <1> 	%rep  %0 - 1
    24                              <1> 		push	%{-1:-1}
    25                              <1> 		%rotate -1
    26                              <1> 	%endrep 
    27                              <1> 	%rotate -1
    28                              <1> 
    29                              <1> 		call	%1
    30                              <1> 
    31                              <1> 	%if 1 < %0
    32                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    33                              <1> 	%endif
    34                              <1> 
    35                              <1> %endmacro
    36                              <1> 
    37                              <1> ;************************************************************************
    38                              <1> ; 割り込みベクタ設定用
    39                              <1> ;
    40                              <1> ; 使い方：
    41                              <1> ;	set_vect	ベクタ番号, 割り込み処理 [, フラグ]
    42                              <1> ;
    43                              <1> ;************************************************************************
    44                              <1> %macro  set_vect 1-*.nolist
    45                              <1> 		push	eax
    46                              <1> 		push	edi
    47                              <1> 
    48                              <1> 		mov		edi, VECT_BASE + (%1 * 8)		; ベクタアドレス;
    49                              <1> 		mov		eax, %2
    50                              <1> 
    51                              <1> 	%if 3 == %0
    52                              <1> 		mov		[edi + 4], %3					; フラグ
    53                              <1> 	%endif
    54                              <1> 
    55                              <1> 		mov		[edi + 0], ax					; 例外アドレス[15: 0]
    56                              <1> 		shr		eax, 16							; 
    57                              <1> 		mov		[edi + 6], ax					; 例外アドレス[31:16]
    58                              <1> 
    59                              <1> 		pop		edi
    60                              <1> 		pop		eax
    61                              <1> %endmacro
    62                              <1> 
    63                              <1> ;************************************************************************
    64                              <1> ; ポート出力用
    65                              <1> ;
    66                              <1> ; 使い方：
    67                              <1> ;	outp	ポート番号, 出力値
    68                              <1> ;
    69                              <1> ;************************************************************************
    70                              <1> %macro  outp 2
    71                              <1> 		mov		al, %2
    72                              <1> 		out		%1, al
    73                              <1> %endmacro
    74                              <1> 
    75                              <1> ;************************************************************************
    76                              <1> ; ディスクリプタの情報を設定
    77                              <1> ;
    78                              <1> ; 使い方：
    79                              <1> ;	set_desc	ディスクリプタ, ベース
    80                              <1> ;
    81                              <1> ;************************************************************************
    82                              <1> %macro  set_desc 2-* 
    83                              <1> 		push	eax
    84                              <1> 		push	edi
    85                              <1> 
    86                              <1> 		mov		edi, %1							; ディスクリプタアドレス
    87                              <1> 		mov		eax, %2							; ベースアドレス
    88                              <1> 
    89                              <1> 	%if 3 == %0
    90                              <1> 		mov		[edi + 0], %3					; リミット
    91                              <1> 	%endif
    92                              <1> 
    93                              <1> 		mov		[edi + 2], ax					; ベース（[15: 0]）
    94                              <1> 		shr		eax, 16							; 
    95                              <1> 		mov		[edi + 4], al					; ベース（[23:16]）
    96                              <1> 		mov		[edi + 7], ah					; ベース（[31:24]）
    97                              <1> 
    98                              <1> 		pop		edi
    99                              <1> 		pop		eax
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> ;************************************************************************
   103                              <1> ; ゲートディスクリプタのオフセットを設定
   104                              <1> ;
   105                              <1> ; 使い方：
   106                              <1> ;	set_gate	ディスクリプタ, オフセット
   107                              <1> ;
   108                              <1> ;************************************************************************
   109                              <1> %macro  set_gate 2-* 
   110                              <1> 		push	eax
   111                              <1> 		push	edi
   112                              <1> 
   113                              <1> 		mov		edi, %1							; ディスクリプタアドレス
   114                              <1> 		mov		eax, %2							; ベースアドレス
   115                              <1> 
   116                              <1> 		mov		[edi + 0], ax					; ベース（[15: 0]）
   117                              <1> 		shr		eax, 16							; 
   118                              <1> 		mov		[edi + 6], ax					; ベース（[31:16]）
   119                              <1> 
   120                              <1> 		pop		edi
   121                              <1> 		pop		eax
   122                              <1> %endmacro
   123                              <1> 
   124                              <1> ;************************************************************************
   125                              <1> ;	構造体
   126                              <1> ;************************************************************************
   127                              <1> 
   128                              <1> ;-----------------------------------------------
   129                              <1> ;	ドライブパラメータ
   130                              <1> ;-----------------------------------------------
   131                              <1> struc drive
   132 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
   133 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
   134 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
   135 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
   136                              <1> endstruc
   137                              <1> 
   138                              <1> ;-----------------------------------------------
   139                              <1> ;	リングバッファ
   140                              <1> ;-----------------------------------------------
   141                              <1> %define		RING_ITEM_SIZE		(1 << 4)
   142                              <1> %define		RING_INDEX_MASK		(RING_ITEM_SIZE - 1)
   143                              <1> 
   144                              <1> struc ring_buff
   145 00000000 ????????            <1> 		.rp				resd	1				; RP:書き込み位置
   146 00000004 ????????            <1> 		.wp				resd	1				; WP:読み込み位置
   147 00000008 <res 10h>           <1> 		.item			resb	RING_ITEM_SIZE	; バッファ
   148                              <1> endstruc
   149                              <1> 
   150                              <1> ;-----------------------------------------------
   151                              <1> ;	バラ曲線描画パラメータ
   152                              <1> ;-----------------------------------------------
   153                              <1> struc rose
   154 00000000 ????????            <1> 		.x0				resd	1				; 左上座標：X0
   155 00000004 ????????            <1> 		.y0				resd	1				; 左上座標：Y0
   156 00000008 ????????            <1> 		.x1				resd	1				; 右下座標：X1
   157 0000000C ????????            <1> 		.y1				resd	1				; 右下座標：Y1
   158                              <1> 
   159 00000010 ????????            <1> 		.n				resd	1				; 変数：n
   160 00000014 ????????            <1> 		.d				resd	1				; 変数：d
   161                              <1> 
   162 00000018 ????????            <1> 		.color_x		resd	1				; 描画色：X軸
   163 0000001C ????????            <1> 		.color_y		resd	1				; 描画色：Y軸
   164 00000020 ????????            <1> 		.color_z		resd	1				; 描画色：枠
   165 00000024 ????????            <1> 		.color_s		resd	1				; 描画色：文字
   166 00000028 ????????            <1> 		.color_f		resd	1				; 描画色：グラフ描画色
   167 0000002C ????????            <1> 		.color_b		resd	1				; 描画色：グラフ消去色
   168                              <1> 
   169 00000030 <res 10h>           <1> 		.title			resb	16				; タイトル
   170                              <1> endstruc
   171                              <1> 
    14                                  
    15                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    16                                  
    17                                  [BITS 32]
    18                                  ;************************************************************************
    19                                  ;	エントリポイント
    20                                  ;************************************************************************
    21                                  kernel:
    22                                  		;---------------------------------------
    23                                  		; フォントアドレスを取得
    24                                  		;---------------------------------------
    25 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    26 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    27 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    28 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    29 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    30 00000011 A3[D0010000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    31                                  
    32                                  		;---------------------------------------
    33                                  		; TSSディスクリプタの設定
    34                                  		;---------------------------------------
    35                                  		set_desc	GDT.tss_0, TSS_0			; // タスク0用TSSの設定
    83 00000016 50                  <1>  push eax
    84 00000017 57                  <1>  push edi
    85                              <1> 
    86 00000018 BF[C8020000]        <1>  mov edi, %1
    87 0000001D B8[D8010000]        <1>  mov eax, %2
    88                              <1> 
    89                              <1>  %if 3 == %0
    90                              <1>  mov [edi + 0], %3
    91                              <1>  %endif
    92                              <1> 
    93 00000022 66894702            <1>  mov [edi + 2], ax
    94 00000026 C1E810              <1>  shr eax, 16
    95 00000029 884704              <1>  mov [edi + 4], al
    96 0000002C 886707              <1>  mov [edi + 7], ah
    97                              <1> 
    98 0000002F 5F                  <1>  pop edi
    99 00000030 58                  <1>  pop eax
    36                                  		set_desc	GDT.tss_1, TSS_1			; // タスク1用TSSの設定
    83 00000031 50                  <1>  push eax
    84 00000032 57                  <1>  push edi
    85                              <1> 
    86 00000033 BF[D0020000]        <1>  mov edi, %1
    87 00000038 B8[40020000]        <1>  mov eax, %2
    88                              <1> 
    89                              <1>  %if 3 == %0
    90                              <1>  mov [edi + 0], %3
    91                              <1>  %endif
    92                              <1> 
    93 0000003D 66894702            <1>  mov [edi + 2], ax
    94 00000041 C1E810              <1>  shr eax, 16
    95 00000044 884704              <1>  mov [edi + 4], al
    96 00000047 886707              <1>  mov [edi + 7], ah
    97                              <1> 
    98 0000004A 5F                  <1>  pop edi
    99 0000004B 58                  <1>  pop eax
    37                                  
    38                                  		;---------------------------------------
    39                                  		; コールゲートの設定
    40                                  		;---------------------------------------
    41                                  		set_gate	GDT.call_gate, call_gate	; // コールゲートの設定
   110 0000004C 50                  <1>  push eax
   111 0000004D 57                  <1>  push edi
   112                              <1> 
   113 0000004E BF[D8020000]        <1>  mov edi, %1
   114 00000053 B8[5C0C0000]        <1>  mov eax, %2
   115                              <1> 
   116 00000058 668907              <1>  mov [edi + 0], ax
   117 0000005B C1E810              <1>  shr eax, 16
   118 0000005E 66894706            <1>  mov [edi + 6], ax
   119                              <1> 
   120 00000062 5F                  <1>  pop edi
   121 00000063 58                  <1>  pop eax
    42                                  
    43                                  		;---------------------------------------
    44                                  		; LDTの設定
    45                                  		;---------------------------------------
    46                                  		set_desc	GDT.ldt, LDT, word LDT_LIMIT
    83 00000064 50                  <1>  push eax
    84 00000065 57                  <1>  push edi
    85                              <1> 
    86 00000066 BF[C0020000]        <1>  mov edi, %1
    87 0000006B B8[E6020000]        <1>  mov eax, %2
    88                              <1> 
    89                              <1>  %if 3 == %0
    90 00000070 66C7072700          <1>  mov [edi + 0], %3
    91                              <1>  %endif
    92                              <1> 
    93 00000075 66894702            <1>  mov [edi + 2], ax
    94 00000079 C1E810              <1>  shr eax, 16
    95 0000007C 884704              <1>  mov [edi + 4], al
    96 0000007F 886707              <1>  mov [edi + 7], ah
    97                              <1> 
    98 00000082 5F                  <1>  pop edi
    99 00000083 58                  <1>  pop eax
    47                                  
    48                                  		;---------------------------------------
    49                                  		; GDTをロード（再設定）
    50                                  		;---------------------------------------
    51 00000084 0F0115[E0020000]        		lgdt	[GDTR]							; // グローバルディスクリプタテーブルをロード
    52                                  
    53                                  		;---------------------------------------
    54                                  		; スタックの設定
    55                                  		;---------------------------------------
    56 0000008B BC00341000              		mov		esp, SP_TASK_0					; // タスク0用のスタックを設定
    57                                  
    58                                  		;---------------------------------------
    59                                  		; タスクレジスタの初期化
    60                                  		;---------------------------------------
    61 00000090 66B82000                		mov		ax, SS_TASK_0
    62 00000094 0F00D8                  		ltr		ax								; // タスクレジスタの設定
    63                                  
    64                                  		;---------------------------------------
    65                                  		; 初期化
    66                                  		;---------------------------------------
    67 00000097 E896080000              		cdecl	init_int						; // 割り込みベクタの初期化
    68 0000009C E8170A0000              		cdecl	init_pic						; // 割り込みコントローラの初期化
    69                                  
    70 000000A1 5057BF00001000B8-       		set_vect	0x00, int_zero_div			; // 割り込み処理の登録：0除算
    70 000000A9 [9A0A0000]668907C1-
    70 000000B1 E810668947065F58   
    71 000000B9 5057BF00011000B8-       		set_vect	0x20, int_timer				; // 割り込み処理の登録：タイマー
    71 000000C1 [0E030000]668907C1-
    71 000000C9 E810668947065F58   
    72 000000D1 5057BF08011000B8-       		set_vect	0x21, int_keyboard			; // 割り込み処理の登録：KBC
    72 000000D9 [220B0000]668907C1-
    72 000000E1 E810668947065F58   
    73 000000E9 5057BF40011000B8-       		set_vect	0x28, int_rtc				; // 割り込み処理の登録：RTC
    73 000000F1 [F70A0000]668907C1-
    73 000000F9 E810668947065F58   
    74 00000101 5057BF08041000B8-       		set_vect	0x81, trap_gate_81, word 0xEF00	; // トラップゲートの登録：1文字出力
    74 00000109 [8C0C0000]66C74704-
    74 00000111 00EF668907C1E81066-
    74 0000011A 8947065F58         
    75 0000011F 5057BF10041000B8-       		set_vect	0x82, trap_gate_82, word 0xEF00	; // トラップゲートの登録：点の描画
    75 00000127 [9A0C0000]66C74704-
    75 0000012F 00EF668907C1E81066-
    75 00000138 8947065F58         
    76                                  
    77                                  		;---------------------------------------
    78                                  		; デバイスの割り込み許可
    79                                  		;---------------------------------------
    80 0000013D 6A10E89F0900006683-     		cdecl	rtc_int_en, 0x10				; rtc_int_en(UIE); // 更新サイクル終了割り込み許可
    80 00000146 C404               
    81 00000148 E8C70A0000              		cdecl	int_en_timer0					; // タイマー（カウンタ0）割り込み許可
    82                                  
    83                                  		;---------------------------------------
    84                                  		; IMR(割り込みマスクレジスタ)の設定
    85                                  		;---------------------------------------
    86                                  		outp	0x21, 0b_1111_1000				; // 割り込み有効：スレーブPIC/KBC/タイマー
    71 0000014D B0F8                <1>  mov al, %2
    72 0000014F E621                <1>  out %1, al
    87                                  		outp	0xA1, 0b_1111_1110				; // 割り込み有効：RTC
    71 00000151 B0FE                <1>  mov al, %2
    72 00000153 E6A1                <1>  out %1, al
    88                                  
    89                                  		;---------------------------------------
    90                                  		; CPUの割り込み許可
    91                                  		;---------------------------------------
    92 00000155 FB                      		sti										; // 割り込み許可
    93                                  
    94                                  		;---------------------------------------
    95                                  		; フォントの一覧表示
    96                                  		;---------------------------------------
    97 00000156 6A0D6A3FE895030000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
    97 0000015F 6683C408           
    98 00000163 6A046A3FE80B040000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
    98 0000016C 6683C408           
    99                                  
   100                                  		;---------------------------------------
   101                                  		; 文字列の表示
   102                                  		;---------------------------------------
   103 00000170 68[B8010000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
   103 00000178 00006A0E6A19E8B603-
   103 00000181 00006683C410       
   104                                  
   105                                  .10L:											; while (;;)
   106                                  												; {
   107                                  		;---------------------------------------
   108                                  		; 回転する棒を表示
   109                                  		;---------------------------------------
   110 00000187 E8970A0000              		cdecl	draw_rotation_bar				;   // 回転する棒を表示
   111                                  
   112                                  		;---------------------------------------
   113                                  		; キーコードの取得
   114                                  		;---------------------------------------
   115 0000018C 68[CC010000]68-         		cdecl	ring_rd, _KEY_BUFF, .int_key	;   EAX = ring_rd(buff, &int_key);
   115 00000192 [480B0000]E8C50900-
   115 0000019A 006683C408         
   116 0000019F 83F800                  		cmp		eax, 0							;   if (EAX == 0)
   117 000001A2 7412                    		je		.10E							;   {
   118                                  												;   
   119                                  		;---------------------------------------
   120                                  		; キーコードの表示
   121                                  		;---------------------------------------
   122 000001A4 68[480B0000]6A1D6A-     		cdecl	draw_key, 2, 29, _KEY_BUFF		;     ring_show(key_buff); // 全要素を表示
   122 000001AC 02E80F0A00006683C4-
   122 000001B5 0C                 
   123                                  .10E:											;   }
   124 000001B6 EBCF                    		jmp		.10L							; }
   125                                  
   126 000001B8 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
   126 000001C1 65726E656C212000   
   127                                  
   128 000001C9 00<rep 3h>              ALIGN 4, db 0
   129 000001CC 00000000                .int_key:	dd	0
   130                                  
   131                                  ALIGN 4, db 0
   132 000001D0 00000000                FONT_ADR:	dd	0
   133 000001D4 00000000                RTC_TIME:	dd	0
   134                                  
   135                                  ;************************************************************************
   136                                  ;	タスク
   137                                  ;************************************************************************
   138                                  %include	"descriptor.s"
   139                              <1> ;************************************************************************
   140                              <1> ;	TSS
   141                              <1> ;************************************************************************
   142                              <1> TSS_0:
   143 000001D8 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   144 000001DC 00321000            <1> .esp0:			dd	SP_TASK_0 - 512				;*  4:ESP0
   145 000001E0 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   146 000001E4 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   147 000001E8 00000000            <1> .ss1:			dd	0							;* 16:
   148 000001EC 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   149 000001F0 00000000            <1> .ss2:			dd	0							;* 24:
   150 000001F4 00000000            <1> .cr3:			dd	0							;  28:CR3(PDBR)
   151 000001F8 00000000            <1> .eip:			dd	0							;  32:EIP
   152 000001FC 00000000            <1> .eflags:		dd	0							;  36:EFLAGS
   153 00000200 00000000            <1> .eax:			dd	0							;  40:EAX
   154 00000204 00000000            <1> .ecx:			dd	0							;  44:ECX
   155 00000208 00000000            <1> .edx:			dd	0							;  48:EDX
   156 0000020C 00000000            <1> .ebx:			dd	0							;  52:EBX
   157 00000210 00000000            <1> .esp:			dd	0							;  56:ESP
   158 00000214 00000000            <1> .ebp:			dd	0							;  60:EBP
   159 00000218 00000000            <1> .esi:			dd	0							;  64:ESI
   160 0000021C 00000000            <1> .edi:			dd	0							;  68:EDI
   161 00000220 00000000            <1> .es:			dd	0							;  72:ES
   162 00000224 00000000            <1> .cs:			dd	0							;  76:CS
   163 00000228 00000000            <1> .ss:			dd	0							;  80:SS
   164 0000022C 00000000            <1> .ds:			dd	0							;  84:DS
   165 00000230 00000000            <1> .fs:			dd	0							;  88:FS
   166 00000234 00000000            <1> .gs:			dd	0							;  92:GS
   167 00000238 00000000            <1> .ldt:			dd	0							;* 96:LDTセグメントセレクタ
   168 0000023C 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   169                              <1> 
   170                              <1> TSS_1:
   171 00000240 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   172 00000244 00361000            <1> .esp0:			dd	SP_TASK_1 - 512				;*  4:ESP0
   173 00000248 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   174 0000024C 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   175 00000250 00000000            <1> .ss1:			dd	0							;* 16:
   176 00000254 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   177 00000258 00000000            <1> .ss2:			dd	0							;* 24:
   178 0000025C 00000000            <1> .cr3:			dd	0							;  28:CR3(PDBR)
   179 00000260 [48030000]          <1> .eip:			dd	task_1						;  32:EIP
   180 00000264 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   181 00000268 00000000            <1> .eax:			dd	0							;  40:EAX
   182 0000026C 00000000            <1> .ecx:			dd	0							;  44:ECX
   183 00000270 00000000            <1> .edx:			dd	0							;  48:EDX
   184 00000274 00000000            <1> .ebx:			dd	0							;  52:EBX
   185 00000278 00381000            <1> .esp:			dd	SP_TASK_1					;  56:ESP
   186 0000027C 00000000            <1> .ebp:			dd	0							;  60:EBP
   187 00000280 00000000            <1> .esi:			dd	0							;  64:ESI
   188 00000284 00000000            <1> .edi:			dd	0							;  68:EDI
   189 00000288 27000000            <1> .es:			dd	DS_TASK_1					;  72:ES
   190 0000028C 1F000000            <1> .cs:			dd	CS_TASK_1					;  76:CS
   191 00000290 27000000            <1> .ss:			dd	DS_TASK_1					;  80:SS
   192 00000294 27000000            <1> .ds:			dd	DS_TASK_1					;  84:DS
   193 00000298 27000000            <1> .fs:			dd	DS_TASK_1					;  88:FS
   194 0000029C 27000000            <1> .gs:			dd	DS_TASK_1					;  92:GS
   195 000002A0 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   196 000002A4 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   197                              <1> 
   198                              <1> 
   199                              <1> ;************************************************************************
   200                              <1> ;	グローバルディスクリプタテーブル
   201                              <1> ;************************************************************************
   202 000002A8 0000000000000000    <1> GDT:			dq	0x0000000000000000			; NULL
   203 000002B0 FFFF0000009ACF00    <1> .cs_kernel:		dq	0x00CF9A000000FFFF			; CODE 4G
   204 000002B8 FFFF00000092CF00    <1> .ds_kernel:		dq	0x00CF92000000FFFF			; DATA 4G
   205 000002C0 0000000000820000    <1> .ldt			dq	0x0000820000000000			; LDTディスクリプタ
   206 000002C8 6700000000890000    <1> .tss_0:			dq	0x0000890000000067			; TSSディスクリプタ
   207 000002D0 6700000000890000    <1> .tss_1:			dq	0x0000890000000067			; TSSディスクリプタ
   208 000002D8 0000080004EC0000    <1> .call_gate:		dq	0x0000EC0400080000			; 386コールゲート(DPL=3, count=4, SEL=8)
   209                              <1> .end:
   210                              <1> 
   211                              <1> CS_KERNEL		equ	.cs_kernel	- GDT
   212                              <1> DS_KERNEL		equ	.ds_kernel	- GDT
   213                              <1> SS_LDT			equ	.ldt		- GDT
   214                              <1> SS_TASK_0		equ	.tss_0		- GDT
   215                              <1> SS_TASK_1		equ	.tss_1		- GDT
   216                              <1> SS_GATE_0		equ	.call_gate	- GDT
   217                              <1> 
   218 000002E0 3700                <1> GDTR:	dw 		GDT.end - GDT - 1
   219 000002E2 [A8020000]          <1> 		dd 		GDT
   220                              <1> 
   221                              <1> 
   222                              <1> ;************************************************************************
   223                              <1> ;	ローカルディスクリプタテーブル
   224                              <1> ;************************************************************************
   225 000002E6 0000000000000000    <1> LDT:			dq	0x0000000000000000			; NULL
   226 000002EE FFFF0000009ACF00    <1> .cs_task_0:		dq	0x00CF9A000000FFFF			; CODE 4G
   227 000002F6 FFFF00000092CF00    <1> .ds_task_0:		dq	0x00CF92000000FFFF			; DATA 4G
   228 000002FE FFFF000000FACF00    <1> .cs_task_1:		dq	0x00CFFA000000FFFF			; CODE 4G
   229 00000306 FFFF000000F2CF00    <1> .ds_task_1:		dq	0x00CFF2000000FFFF			; DATA 4G
   230                              <1> .end:
   231                              <1> 
   232                              <1> CS_TASK_0		equ	(.cs_task_0 - LDT) | 4		; タスク0用CSセレクタ
   233                              <1> DS_TASK_0		equ	(.ds_task_0 - LDT) | 4		; タスク0用DSセレクタ
   234                              <1> CS_TASK_1		equ	(.cs_task_1 - LDT) | 4 | 3	; タスク1用CSセレクタ
   235                              <1> DS_TASK_1		equ	(.ds_task_1 - LDT) | 4 | 3	; タスク1用DSセレクタ
   236                              <1> 
   237                              <1> LDT_LIMIT		equ	.end		- LDT - 1
   238                              <1> 
   239                              <1> 
   139                                  %include	"modules/int_timer.s"
   140                              <1> ;************************************************************************
   141                              <1> ;	例外:タイマー
   142                              <1> ;************************************************************************
   143                              <1> int_timer:
   144                              <1> 		;---------------------------------------
   145                              <1> 		; 【レジスタの保存】
   146                              <1> 		;---------------------------------------
   147 0000030E 60                  <1> 		pusha
   148 0000030F 1E                  <1> 		push	ds
   149 00000310 06                  <1> 		push	es
   150                              <1> 
   151                              <1> 		;---------------------------------------
   152                              <1> 		; データ用セグメントの設定
   153                              <1> 		;---------------------------------------
   154 00000311 66B81000            <1> 		mov		ax, 0x0010						; 
   155 00000315 8ED8                <1> 		mov		ds, ax							; 
   156 00000317 8EC0                <1> 		mov		es, ax							; 
   157                              <1> 
   158                              <1> 		;---------------------------------------
   159                              <1> 		; TICK
   160                              <1> 		;---------------------------------------
   161 00000319 FF05[44030000]      <1> 		inc		dword [TIMER_COUNT]				; TIMER_COUNT++; // 割り込み回数の更新
   162                              <1> 
   163                              <1> 		;---------------------------------------
   164                              <1> 		; 割り込みフラグをクリア(EOI)
   165                              <1> 		;---------------------------------------
   166                              <1> 		outp	0x20, 0x20						; // マスタPIC:EOIコマンド
    71 0000031F B020                <2>  mov al, %2
    72 00000321 E620                <2>  out %1, al
   167                              <1> 
   168                              <1> 		;---------------------------------------
   169                              <1> 		; タスクの切り替え
   170                              <1> 		;---------------------------------------
   171 00000323 660F00C8            <1> 		str		ax								; AX = TR; // 現在のタスクレジスタ
   172 00000327 6683F820            <1> 		cmp		ax, SS_TASK_0					; case (AX)
   173 0000032B 7409                <1> 		je		.11L							; {
   174                              <1> 												;   default:
   175 0000032D EA000000002000      <1> 		jmp		SS_TASK_0:0						;     // タスク0に切り替え
   176 00000334 EB09                <1> 		jmp		.10E							;     break;
   177                              <1> 												;     
   178                              <1> .11L:											;   case SS_TASK_0:
   179 00000336 EA000000002800      <1> 		jmp		SS_TASK_1:0						;     // タスク1に切り替え
   180 0000033D EB00                <1> 		jmp		.10E							;     break;
   181                              <1> .10E:											; }
   182                              <1> 
   183                              <1> 		;---------------------------------------
   184                              <1> 		; 【レジスタの復帰】
   185                              <1> 		;---------------------------------------
   186 0000033F 07                  <1> 		pop		es								; 
   187 00000340 1F                  <1> 		pop		ds								; 
   188 00000341 61                  <1> 		popa
   189                              <1> 
   190 00000342 CF                  <1> 		iret
   191                              <1> 
   192 00000343 00                  <1> ALIGN 4, db 0
   193 00000344 00000000            <1> TIMER_COUNT:	dd	0
   194                              <1> 
   140                                  %include	"tasks/task_1.s"
   141                              <1> ;************************************************************************
   142                              <1> ;	TASK-1
   143                              <1> ;************************************************************************
   144                              <1> task_1:
   145                              <1> 		;---------------------------------------
   146                              <1> 		; 文字列の表示
   147                              <1> 		;---------------------------------------
   148 00000348 68[76030000]6A076A- <1> 		cdecl	draw_str, 63, 0, 0x07, .s0		; draw_str();
   148 00000350 006A3FE8E101000066- <1>
   148 00000359 83C410              <1>
   149                              <1> 
   150                              <1> .10L:											; while (;;)
   151                              <1> 												; {
   152                              <1> 		;---------------------------------------
   153                              <1> 		; 時刻の表示
   154                              <1> 		;---------------------------------------
   155 0000035C A1[D4010000]        <1> 		mov		eax, [RTC_TIME]					;   // 時刻の取得
   156 00000361 5068000700006A006A- <1> 		cdecl	draw_time, 72, 0, 0x0700, eax	;   // 時刻の表示
   156 0000036A 48E8230500006683C4- <1>
   156 00000373 10                  <1>
   157                              <1> 
   158 00000374 EBE6                <1> 		jmp		.10L							; }
   159                              <1> 
   160                              <1> 		;---------------------------------------
   161                              <1> 		; データ
   162                              <1> 		;---------------------------------------
   163 00000376 5461736B2D3100      <1> .s0		db	"Task-1", 0
   164                              <1> 
   141                                  
   142                                  ;************************************************************************
   143                                  ;	モジュール
   144                                  ;************************************************************************
   145                                  %include	"../modules/protect/vga.s"
   146                              <1> ;************************************************************************
   147                              <1> ;	読み込みプレーンの選択
   148                              <1> ;========================================================================
   149                              <1> ;■書式		: void vga_set_read_plane(plane);
   150                              <1> ;
   151                              <1> ;■引数
   152                              <1> ;	plane	: 読み込みプレーン
   153                              <1> ;
   154                              <1> ;■戻り値	: 無し
   155                              <1> ;************************************************************************
   156                              <1> vga_set_read_plane:
   157                              <1> 		;---------------------------------------
   158                              <1> 		; 【スタックフレームの構築】
   159                              <1> 		;---------------------------------------
   160                              <1> 												; EBP+ 8| プレーン（インデックス）
   161                              <1> 												; ------+----------------
   162 0000037D 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   163 0000037E 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   164                              <1> 												; ------+----------------
   165                              <1> 
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 【レジスタの保存】
   168                              <1> 		;---------------------------------------
   169 00000380 50                  <1> 		push	eax
   170 00000381 52                  <1> 		push	edx
   171                              <1> 
   172                              <1> 		;---------------------------------------
   173                              <1> 		; 読み込みプレーンの選択
   174                              <1> 		;---------------------------------------
   175 00000382 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
   176 00000385 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
   177 00000388 B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
   178 0000038A 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
   179 0000038E 66EF                <1> 		out		dx, ax							; // ポート出力
   180                              <1> 
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 【レジスタの復帰】
   183                              <1> 		;---------------------------------------
   184 00000390 5A                  <1> 		pop		edx
   185 00000391 58                  <1> 		pop		eax
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 【スタックフレームの破棄】
   189                              <1> 		;---------------------------------------
   190 00000392 89EC                <1> 		mov		esp, ebp
   191 00000394 5D                  <1> 		pop		ebp
   192                              <1> 
   193 00000395 C3                  <1> 		ret
   194                              <1> 
   195                              <1> 
   196                              <1> ;************************************************************************
   197                              <1> ;	書き込みプレーンを選択
   198                              <1> ;========================================================================
   199                              <1> ;■書式		: void vga_set_write_plane(plane);
   200                              <1> ;
   201                              <1> ;■引数
   202                              <1> ;	plane	: 書き込みプレーン
   203                              <1> ;
   204                              <1> ;■戻り値	: 無し
   205                              <1> ;************************************************************************
   206                              <1> vga_set_write_plane:
   207                              <1> 		;---------------------------------------
   208                              <1> 		; 【スタックフレームの構築】
   209                              <1> 		;---------------------------------------
   210                              <1> 												; EBP+ 8| プレーン（ビット指定）
   211                              <1> 												; ------+----------------
   212 00000396 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   213 00000397 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   214                              <1> 												; ------+----------------
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; 【レジスタの保存】
   218                              <1> 		;---------------------------------------
   219 00000399 50                  <1> 		push	eax
   220 0000039A 52                  <1> 		push	edx
   221                              <1> 
   222                              <1> 		;---------------------------------------
   223                              <1> 		; 書き込みプレーンの選択
   224                              <1> 		;---------------------------------------
   225 0000039B 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
   226 0000039E 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
   227 000003A1 B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
   228 000003A3 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
   229 000003A7 66EF                <1> 		out		dx, ax							; // ポート出力
   230                              <1> 
   231                              <1> 		;---------------------------------------
   232                              <1> 		; 【レジスタの復帰】
   233                              <1> 		;---------------------------------------
   234 000003A9 5A                  <1> 		pop		edx
   235 000003AA 58                  <1> 		pop		eax
   236                              <1> 
   237                              <1> 		;---------------------------------------
   238                              <1> 		; 【スタックフレームの破棄】
   239                              <1> 		;---------------------------------------
   240 000003AB 89EC                <1> 		mov		esp, ebp
   241 000003AD 5D                  <1> 		pop		ebp
   242                              <1> 
   243 000003AE C3                  <1> 		ret
   244                              <1> 
   245                              <1> 
   246                              <1> ;************************************************************************
   247                              <1> ;	フォントの書き込み
   248                              <1> ;========================================================================
   249                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   250                              <1> ;
   251                              <1> ;■引数
   252                              <1> ;	font	: FONTアドレス
   253                              <1> ;	vram	: VRAMアドレス
   254                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   255                              <1> ;	color	: 描画色
   256                              <1> ;
   257                              <1> ;■戻り値	: 無し
   258                              <1> ;************************************************************************
   259                              <1> vram_font_copy:
   260                              <1> 		;---------------------------------------
   261                              <1> 		; 【スタックフレームの構築】
   262                              <1> 		;---------------------------------------
   263                              <1> 												; EBP+20| 色（背景/前景色）
   264                              <1> 												; EBP+16| プレーン（ビット指定）
   265                              <1> 												; EBP+12| VRAMアドレス
   266                              <1> 												; EBP+ 8| FONTアドレス
   267                              <1> 												; ------+----------------
   268 000003AF 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   269 000003B0 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   270                              <1> 												; ------+----------------
   271                              <1> 
   272                              <1> 		;---------------------------------------
   273                              <1> 		; 【レジスタの保存】
   274                              <1> 		;---------------------------------------
   275 000003B2 50                  <1> 		push	eax
   276 000003B3 53                  <1> 		push	ebx
   277 000003B4 51                  <1> 		push	ecx
   278 000003B5 52                  <1> 		push	edx
   279 000003B6 56                  <1> 		push	esi
   280 000003B7 57                  <1> 		push	edi
   281                              <1> 
   282                              <1> 		;---------------------------------------
   283                              <1> 		; 【処理の開始】
   284                              <1> 		;---------------------------------------
   285 000003B8 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   286 000003BB 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   287 000003BE 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   288 000003C2 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   289                              <1> 
   290 000003C6 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   291 000003C8 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   292 000003CB FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   293                              <1> 
   294 000003CD 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   295 000003CF 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   296 000003D2 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   297                              <1> 
   298                              <1> 		;---------------------------------------
   299                              <1> 		; 16ドットフォントのコピー
   300                              <1> 		;---------------------------------------
   301 000003D4 FC                  <1> 		cld										; DF  = 0; // アドレス加算
   302                              <1> 
   303 000003D5 B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   304                              <1> .10L:											; do
   305                              <1> 												; {
   306                              <1> 		;---------------------------------------
   307                              <1> 		; フォントマスクの作成
   308                              <1> 		;---------------------------------------
   309 000003DA AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   310 000003DB 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   311 000003DD F6D4                <1> 		not		ah								;   
   312                              <1> 
   313                              <1> 		;---------------------------------------
   314                              <1> 		; 前景色
   315                              <1> 		;---------------------------------------
   316 000003DF 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   317                              <1> 
   318                              <1> 		;---------------------------------------
   319                              <1> 		; 背景色
   320                              <1> 		;---------------------------------------
   321 000003E1 F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   322 000003E7 7404                <1> 		jz		.11F							;   {
   323 000003E9 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   324 000003EB EB02                <1> 		jmp		.11E							;   }
   325                              <1> .11F:											;   else
   326                              <1> 												;   {
   327 000003ED 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   328                              <1> .11E:											;   }
   329                              <1> 
   330                              <1> 		;---------------------------------------
   331                              <1> 		; 前景色と背景色を合成
   332                              <1> 		;---------------------------------------
   333 000003EF 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   334                              <1> 
   335                              <1> 		;---------------------------------------
   336                              <1> 		; 新しい値を出力
   337                              <1> 		;---------------------------------------
   338 000003F1 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   339                              <1> 
   340 000003F3 83C750              <1> 		add		edi, 80							;   EDI += 80;
   341 000003F6 E2E2                <1> 		loop	.10L							; } while (--ECX);
   342                              <1> .10E:											; 
   343                              <1> 
   344                              <1> 		;---------------------------------------
   345                              <1> 		; 【レジスタの復帰】
   346                              <1> 		;---------------------------------------
   347 000003F8 5F                  <1> 		pop		edi
   348 000003F9 5E                  <1> 		pop		esi
   349 000003FA 5A                  <1> 		pop		edx
   350 000003FB 59                  <1> 		pop		ecx
   351 000003FC 5B                  <1> 		pop		ebx
   352 000003FD 58                  <1> 		pop		eax
   353                              <1> 
   354                              <1> 		;---------------------------------------
   355                              <1> 		; 【スタックフレームの破棄】
   356                              <1> 		;---------------------------------------
   357 000003FE 89EC                <1> 		mov		esp, ebp
   358 00000400 5D                  <1> 		pop		ebp
   359                              <1> 
   360 00000401 C3                  <1> 		ret
   361                              <1> 
   362                              <1> 
   363                              <1> ;************************************************************************
   364                              <1> ;	ビットパターンの書き込み
   365                              <1> ;========================================================================
   366                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   367                              <1> ;
   368                              <1> ;■引数
   369                              <1> ;	bit		: 出力ビットパターン
   370                              <1> ;	vram	: VRAMアドレス
   371                              <1> ;	flag	: 1:セット, 0:クリア
   372                              <1> ;
   373                              <1> ;■戻り値	: 無し
   374                              <1> ;************************************************************************
   375                              <1> vram_bit_copy:
   376                              <1> 		;---------------------------------------
   377                              <1> 		; 【スタックフレームの構築】
   378                              <1> 		;---------------------------------------
   379                              <1> 												; EBP+20| 色（背景/前景色）
   380                              <1> 												; EBP+16| プレーン（ビット指定）
   381                              <1> 												; EBP+12| VRAMアドレス
   382                              <1> 												; EBP+ 8| 出力ビットパターン
   383                              <1> 												; ------+----------------
   384 00000402 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   385 00000403 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   386                              <1> 												; ------+----------------
   387                              <1> 
   388                              <1> 		;---------------------------------------
   389                              <1> 		; 【レジスタの保存】
   390                              <1> 		;---------------------------------------
   391 00000405 50                  <1> 		push	eax
   392 00000406 53                  <1> 		push	ebx
   393 00000407 57                  <1> 		push	edi
   394                              <1> 
   395                              <1> 		;---------------------------------------
   396                              <1> 		; 【処理の開始】
   397                              <1> 		;---------------------------------------
   398 00000408 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   399 0000040B 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   400 0000040F 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   401                              <1> 
   402 00000413 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   403 00000415 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   404 00000418 FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   405                              <1> 
   406                              <1> 		;---------------------------------------
   407                              <1> 		; マスクデータの作成
   408                              <1> 		;---------------------------------------
   409 0000041A 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   410 0000041D 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   411 0000041F F6D4                <1> 		not		ah								; 
   412                              <1> 
   413                              <1> 		;---------------------------------------
   414                              <1> 		; 現在値の出力を取得
   415                              <1> 		;---------------------------------------
   416 00000421 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   417 00000423 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   418 00000425 08E0                <1> 		or		al, ah							; AL |= AH;
   419                              <1> 
   420                              <1> 		;---------------------------------------
   421                              <1> 		; 新しい値を出力
   422                              <1> 		;---------------------------------------
   423 00000427 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   424                              <1> 
   425                              <1> 		;---------------------------------------
   426                              <1> 		; 【レジスタの復帰】
   427                              <1> 		;---------------------------------------
   428 00000429 5F                  <1> 		pop		edi
   429 0000042A 5B                  <1> 		pop		ebx
   430 0000042B 58                  <1> 		pop		eax
   431                              <1> 
   432                              <1> 		;---------------------------------------
   433                              <1> 		; 【スタックフレームの破棄】
   434                              <1> 		;---------------------------------------
   435 0000042C 89EC                <1> 		mov		esp, ebp
   436 0000042E 5D                  <1> 		pop		ebp
   437                              <1> 
   438 0000042F C3                  <1> 		ret
   146                                  %include	"../modules/protect/draw_char.s"
   147                              <1> ;************************************************************************
   148                              <1> ;	文字の表示
   149                              <1> ;------------------------------------------------------------------------
   150                              <1> ;	グラフィックスモードでテキストを表示
   151                              <1> ;========================================================================
   152                              <1> ;■書式		: void draw_char(col, row, color, ch);
   153                              <1> ;
   154                              <1> ;■引数
   155                              <1> ;	col		: 列（0～79）
   156                              <1> ;	row		: 行（0～29）
   157                              <1> ;	color	: 描画色
   158                              <1> ;	ch		: 文字
   159                              <1> ;
   160                              <1> ;■戻り値	: 無し
   161                              <1> ;************************************************************************
   162                              <1> draw_char:
   163                              <1> 		;---------------------------------------
   164                              <1> 		; 【スタックフレームの構築】
   165                              <1> 		;---------------------------------------
   166                              <1> 												; ------|--------
   167                              <1> 												; EBP+20| 文字
   168                              <1> 												; EBP+16| 色
   169                              <1> 												; EBP+12| Y（行）
   170                              <1> 												; EBP+ 8| X（列）
   171                              <1> 												; ------+----------------
   172 00000430 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   173 00000431 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   174                              <1> 												; ------+----------------
   175                              <1> 
   176                              <1> 		;---------------------------------------
   177                              <1> 		; 【レジスタの保存】
   178                              <1> 		;---------------------------------------
   179 00000433 50                  <1> 		push	eax
   180 00000434 53                  <1> 		push	ebx
   181 00000435 51                  <1> 		push	ecx
   182 00000436 52                  <1> 		push	edx
   183 00000437 56                  <1> 		push	esi
   184 00000438 57                  <1> 		push	edi
   185                              <1> 
   186                              <1> 		;---------------------------------------
   187                              <1> 		; テストアンドセット
   188                              <1> 		;---------------------------------------
   189                              <1> %ifdef	USE_TEST_AND_SET
   190                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   191                              <1> %endif
   192                              <1> 
   193                              <1> 		;---------------------------------------
   194                              <1> 		; コピー元フォントアドレスを設定
   195                              <1> 		;---------------------------------------
   196 00000439 0FB67514            <1> 		movzx	esi, byte [ebp +20]				; CL  = 文字コード;
   197 0000043D C1E604              <1> 		shl		esi, 4							; CL *= 16; // 1文字16バイト
   198 00000440 0335[D0010000]      <1> 		add		esi, [FONT_ADR]					; ESI = フォントアドレス;
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		; コピー先アドレスを取得
   202                              <1> 		; Adr = 0xA0000 + (640 / 8 * 16) * y + x
   203                              <1> 		;---------------------------------------
   204 00000446 8B7D0C              <1> 		mov		edi, [ebp +12]					; Y（行）
   205 00000449 C1E708              <1> 		shl		edi, 8							; EDI = Y * 256;
   206 0000044C 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA0000]	; EDI = Y *   4 + Y;
   207 00000453 037D08              <1> 		add		edi, [ebp + 8]					; X（列）
   208                              <1> 
   209                              <1> 		;---------------------------------------
   210                              <1> 		; 1文字分のフォントを出力
   211                              <1> 		;---------------------------------------
   212 00000456 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
   213                              <1> 
   214 0000045A 6A03E81CFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
   214 00000463 C404                <1>
   215 00000465 6A08E82AFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
   215 0000046E C404                <1>
   216 00000470 536A085756E835FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
   216 00000479 FF6683C410          <1>
   217                              <1> 
   218 0000047E 6A02E8F8FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
   218 00000487 C404                <1>
   219 00000489 6A04E806FFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
   219 00000492 C404                <1>
   220 00000494 536A045756E811FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
   220 0000049D FF6683C410          <1>
   221                              <1> 
   222 000004A2 6A01E8D4FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
   222 000004AB C404                <1>
   223 000004AD 6A02E8E2FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
   223 000004B6 C404                <1>
   224 000004B8 536A025756E8EDFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
   224 000004C1 FF6683C410          <1>
   225                              <1> 
   226 000004C6 6A00E8B0FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
   226 000004CF C404                <1>
   227 000004D1 6A01E8BEFEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
   227 000004DA C404                <1>
   228 000004DC 536A015756E8C9FEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
   228 000004E5 FF6683C410          <1>
   229                              <1> 
   230                              <1> %ifdef	USE_TEST_AND_SET
   231                              <1> 		;---------------------------------------
   232                              <1> 		; テストアンドセット
   233                              <1> 		;---------------------------------------
   234                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   235                              <1> %endif
   236                              <1> 
   237                              <1> 		;---------------------------------------
   238                              <1> 		; 【レジスタの復帰】
   239                              <1> 		;---------------------------------------
   240 000004EA 5F                  <1> 		pop		edi
   241 000004EB 5E                  <1> 		pop		esi
   242 000004EC 5A                  <1> 		pop		edx
   243 000004ED 59                  <1> 		pop		ecx
   244 000004EE 5B                  <1> 		pop		ebx
   245 000004EF 58                  <1> 		pop		eax
   246                              <1> 
   247                              <1> 		;---------------------------------------
   248                              <1> 		; 【スタックフレームの破棄】
   249                              <1> 		;---------------------------------------
   250 000004F0 89EC                <1> 		mov		esp, ebp
   251 000004F2 5D                  <1> 		pop		ebp
   252                              <1> 
   253 000004F3 C3                  <1> 		ret
   254                              <1> 
   255                              <1> %ifdef USE_TEST_AND_SET
   256                              <1> ALIGN 4, db 0
   257                              <1> IN_USE:	dd	0
   258                              <1> %endif
   259                              <1> 
   147                                  %include	"../modules/protect/draw_font.s"
   148                              <1> ;************************************************************************
   149                              <1> ;	フォント一覧を表示
   150                              <1> ;========================================================================
   151                              <1> ;■書式		: void draw_font(col, row);
   152                              <1> ;
   153                              <1> ;■引数
   154                              <1> ;	col		: 列
   155                              <1> ;	row		: 行
   156                              <1> ;
   157                              <1> ;■戻り値	: 無し
   158                              <1> ;************************************************************************
   159                              <1> draw_font:
   160                              <1> 		;---------------------------------------
   161                              <1> 		; 【スタックフレームの構築】
   162                              <1> 		;---------------------------------------
   163                              <1> 												; ------|--------
   164                              <1> 												; EBP+12| Y（行）
   165                              <1> 												; EBP+ 8| X（列）
   166                              <1> 												; ---------------
   167 000004F4 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   168 000004F5 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   169                              <1> 												; ---------------
   170                              <1> 
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 【レジスタの保存】
   173                              <1> 		;---------------------------------------
   174 000004F7 50                  <1> 		push	eax
   175 000004F8 53                  <1> 		push	ebx
   176 000004F9 51                  <1> 		push	ecx
   177 000004FA 52                  <1> 		push	edx
   178 000004FB 56                  <1> 		push	esi
   179 000004FC 57                  <1> 		push	edi
   180                              <1> 
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 表示位置
   183                              <1> 		;---------------------------------------
   184 000004FD 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   185 00000500 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; フォント一覧を表示
   189                              <1> 		;---------------------------------------
   190 00000503 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   191 00000508 81F900010000        <1> .10L:	cmp		ecx, 256						;      ECX < 256;
   192 0000050E 731F                <1> 		jae		.10E							; 
   193                              <1> 												;      ECX++)
   194                              <1> 												; {
   195                              <1> 												;   // 桁位置の計算
   196 00000510 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   197 00000512 83E00F              <1> 		and		eax, 0x0F						;   EAX &= 0x0F
   198 00000515 01F0                <1> 		add		eax, esi						;   EAX += X;
   199                              <1> 												;   
   200                              <1> 												;   // 行位置の計算
   201 00000517 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   202 00000519 C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
   203 0000051C 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   204                              <1> 
   205 0000051E 516A075350E808FFFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
   205 00000527 FF6683C410          <1>
   206                              <1> 
   207 0000052C 41                  <1> 		inc		ecx								;   // for (... ECX++)
   208 0000052D EBD9                <1> 		jmp		.10L							; 
   209                              <1> .10E:											; }
   210                              <1> 
   211                              <1> 		;---------------------------------------
   212                              <1> 		; 【レジスタの復帰】
   213                              <1> 		;---------------------------------------
   214 0000052F 5F                  <1> 		pop		edi
   215 00000530 5E                  <1> 		pop		esi
   216 00000531 5A                  <1> 		pop		edx
   217 00000532 59                  <1> 		pop		ecx
   218 00000533 5B                  <1> 		pop		ebx
   219 00000534 58                  <1> 		pop		eax
   220                              <1> 
   221                              <1> 		;---------------------------------------
   222                              <1> 		; 【スタックフレームの破棄】
   223                              <1> 		;---------------------------------------
   224 00000535 89EC                <1> 		mov		esp, ebp
   225 00000537 5D                  <1> 		pop		ebp
   226                              <1> 
   227 00000538 C3                  <1> 		ret
   228                              <1> 
   148                                  %include	"../modules/protect/draw_str.s"
   149                              <1> ;************************************************************************
   150                              <1> ;	文字列の表示
   151                              <1> ;========================================================================
   152                              <1> ;■書式		: void draw_str(col, row, color, p);
   153                              <1> ;
   154                              <1> ;■引数
   155                              <1> ;	col		: 列
   156                              <1> ;	row		: 行
   157                              <1> ;	color	: 描画色
   158                              <1> ;	p		: 文字列のアドレス
   159                              <1> ;
   160                              <1> ;■戻り値	: 無し
   161                              <1> ;************************************************************************
   162                              <1> draw_str:
   163                              <1> 		;---------------------------------------
   164                              <1> 		; 【スタックフレームの構築】
   165                              <1> 		;---------------------------------------
   166                              <1> 												; ------|--------
   167                              <1> 												; EBP+20| *p（文字列のアドレス）
   168                              <1> 												; EBP+16| color（色）
   169                              <1> 												; EBP+12| row（行）
   170                              <1> 												; EBP+ 8| col（列）
   171                              <1> 												; ---------------
   172 00000539 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   173 0000053A 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   174                              <1> 												; ---------------
   175                              <1> 
   176                              <1> 		;---------------------------------------
   177                              <1> 		; 【レジスタの保存】
   178                              <1> 		;---------------------------------------
   179 0000053C 50                  <1> 		push	eax
   180 0000053D 53                  <1> 		push	ebx
   181 0000053E 51                  <1> 		push	ecx
   182 0000053F 52                  <1> 		push	edx
   183 00000540 56                  <1> 		push	esi
   184                              <1> 
   185                              <1> 		;---------------------------------------
   186                              <1> 		; 文字列の表示
   187                              <1> 		;---------------------------------------
   188 00000541 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
   189 00000544 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
   190 00000547 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
   191 0000054B 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
   192                              <1> 
   193 0000054E FC                  <1> 		cld										; DF = 0; // アドレス加算
   194                              <1> .10L:											; do
   195                              <1> 												; {
   196 0000054F AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
   197 00000550 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   198 00000552 741A                <1> 		je		.10E							;     break;
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 1文字表示
   202                              <1> 		;---------------------------------------
   203                              <1> %ifdef	USE_SYSTEM_CALL
   204 00000554 CD81                <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
   205                              <1> %else
   206                              <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
   207                              <1> %endif
   208                              <1> 
   209                              <1> 		; 次の文字の位置を調整
   210 00000556 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
   211 00000557 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
   212 0000055A 7C10                <1> 		jl		.12E							;   {
   213 0000055C B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
   214 00000561 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
   215 00000562 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
   216 00000565 7C05                <1> 		jl		.12E							;     {
   217 00000567 BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
   218                              <1> 												;     }
   219                              <1> .12E:											;   }
   220 0000056C EBE1                <1> 		jmp		.10L							;   
   221                              <1> .10E:											; } while (1);
   222                              <1> 
   223                              <1> 		;---------------------------------------
   224                              <1> 		; 【レジスタの復帰】
   225                              <1> 		;---------------------------------------
   226 0000056E 5E                  <1> 		pop		esi
   227 0000056F 5A                  <1> 		pop		edx
   228 00000570 59                  <1> 		pop		ecx
   229 00000571 5B                  <1> 		pop		ebx
   230 00000572 58                  <1> 		pop		eax
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; 【スタックフレームの破棄】
   234                              <1> 		;---------------------------------------
   235 00000573 89EC                <1> 		mov		esp, ebp
   236 00000575 5D                  <1> 		pop		ebp
   237                              <1> 
   238 00000576 C3                  <1> 		ret
   239                              <1> 
   149                                  %include	"../modules/protect/draw_color_bar.s"
   150                              <1> ;************************************************************************
   151                              <1> ;	カラーバーの表示
   152                              <1> ;========================================================================
   153                              <1> ;■書式		: void draw_color_bar(col, row);
   154                              <1> ;
   155                              <1> ;■引数
   156                              <1> ;	col		: 列
   157                              <1> ;	row		: 行
   158                              <1> ;
   159                              <1> ;■戻り値	: 無し
   160                              <1> ;************************************************************************
   161                              <1> draw_color_bar:
   162                              <1> 		;---------------------------------------
   163                              <1> 		; 【スタックフレームの構築】
   164                              <1> 		;---------------------------------------
   165                              <1> 												; ------|--------
   166                              <1> 												; EBP+ 8| X（列）
   167                              <1> 												; EBP+12| Y（行）
   168                              <1> 												; ---------------
   169 00000577 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   170 00000578 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   171                              <1> 												; ---------------
   172                              <1> 		;---------------------------------------
   173                              <1> 		; 【レジスタの保存】
   174                              <1> 		;---------------------------------------
   175 0000057A 50                  <1> 		push	eax
   176 0000057B 53                  <1> 		push	ebx
   177 0000057C 51                  <1> 		push	ecx
   178 0000057D 52                  <1> 		push	edx
   179 0000057E 56                  <1> 		push	esi
   180 0000057F 57                  <1> 		push	edi
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; 表示位置
   184                              <1> 		;---------------------------------------
   185 00000580 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   186 00000583 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; カラーバーを表示
   190                              <1> 		;---------------------------------------
   191 00000586 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   192 0000058B 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
   193 0000058E 732E                <1> 		jae		.10E							; 
   194                              <1> 												;      ECX++)
   195                              <1> 												; {
   196                              <1> 												;   // 桁位置の計算
   197 00000590 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   198 00000592 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
   199 00000595 C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
   200 00000598 01F0                <1> 		add		eax, esi						;   EAX += X;
   201                              <1> 												;   
   202                              <1> 												;   // 行位置の計算
   203 0000059A 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   204 0000059C D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
   205 0000059E 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   206                              <1> 												;   
   207                              <1> 												;   // 表示色の取得
   208 000005A0 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
   209 000005A2 D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
   210 000005A4 8B92[D1050000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
   211                              <1> 
   212 000005AA 68[C8050000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
   212 000005B2 E882FFFFFF6683C410  <1>
   213                              <1> 
   214 000005BB 41                  <1> 		inc		ecx								;   // for (... ECX++)
   215 000005BC EBCD                <1> 		jmp		.10L							; 
   216                              <1> .10E:											; }
   217                              <1> 
   218                              <1> 		;---------------------------------------
   219                              <1> 		; 【レジスタの復帰】
   220                              <1> 		;---------------------------------------
   221 000005BE 5F                  <1> 		pop		edi
   222 000005BF 5E                  <1> 		pop		esi
   223 000005C0 5A                  <1> 		pop		edx
   224 000005C1 59                  <1> 		pop		ecx
   225 000005C2 5B                  <1> 		pop		ebx
   226 000005C3 58                  <1> 		pop		eax
   227                              <1> 
   228                              <1> 		;---------------------------------------
   229                              <1> 		; 【スタックフレームの破棄】
   230                              <1> 		;---------------------------------------
   231 000005C4 89EC                <1> 		mov		esp, ebp
   232 000005C6 5D                  <1> 		pop		ebp
   233                              <1> 
   234 000005C7 C3                  <1> 		ret
   235                              <1> 
   236 000005C8 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
   237                              <1> 
   238 000005D1 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
   239 000005D5 00010009            <1> 		dw	0x0100, 0x0900
   240 000005D9 0002000A            <1> 		dw	0x0200, 0x0A00
   241 000005DD 0003000B            <1> 		dw	0x0300, 0x0B00
   242 000005E1 0004000C            <1> 		dw	0x0400, 0x0C00
   243 000005E5 0005000D            <1> 		dw	0x0500, 0x0D00
   244 000005E9 0006000E            <1> 		dw	0x0600, 0x0E00
   245 000005ED 0007000F            <1> 		dw	0x0700, 0x0F00
   246                              <1> 
   150                                  %include	"../modules/protect/draw_pixel.s"
   151                              <1> ;************************************************************************
   152                              <1> ;	ピクセルの描画
   153                              <1> ;========================================================================
   154                              <1> ;■書式		: void draw_pixel(X, Y, color);
   155                              <1> ;
   156                              <1> ;■引数
   157                              <1> ;	X		: X座標
   158                              <1> ;	Y		: Y座標
   159                              <1> ;	color	: 描画色
   160                              <1> ;
   161                              <1> ;■戻り値	: 無し
   162                              <1> ;************************************************************************
   163                              <1> draw_pixel:
   164                              <1> 		;---------------------------------------
   165                              <1> 		; 【スタックフレームの構築】
   166                              <1> 		;---------------------------------------
   167                              <1> 												; ------|--------
   168                              <1> 												; EBP+16| 色
   169                              <1> 												; EBP+12| Y
   170                              <1> 												; EBP+ 8| X
   171                              <1> 												; ------|--------
   172 000005F1 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   173 000005F2 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   174                              <1> 												; ------+--------
   175                              <1> 		;---------------------------------------
   176                              <1> 		; 【レジスタの保存】
   177                              <1> 		;---------------------------------------
   178 000005F4 50                  <1> 		push	eax
   179 000005F5 53                  <1> 		push	ebx
   180 000005F6 51                  <1> 		push	ecx
   181 000005F7 57                  <1> 		push	edi
   182                              <1> 
   183                              <1> 		;---------------------------------------
   184                              <1> 		; Y座標を80倍する（640/8）
   185                              <1> 		;---------------------------------------
   186 000005F8 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI  = Y座標
   187 000005FB C1E704              <1> 		shl		edi, 4							; EDI *= 16;
   188 000005FE 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA_0000]	; EDI  = 0xA00000[EDI * 4 + EDI];
   189                              <1> 
   190                              <1> 		;---------------------------------------
   191                              <1> 		; X座標を1/8して加算
   192                              <1> 		;---------------------------------------
   193 00000605 8B5D08              <1> 		mov		ebx, [ebp + 8]					; EBX  = X座標;
   194 00000608 89D9                <1> 		mov		ecx, ebx						; ECX  = X座標;（一時保存）
   195 0000060A C1EB03              <1> 		shr		ebx, 3							; EBX /= 8;
   196 0000060D 01DF                <1> 		add		edi, ebx						; EDI += EBX;
   197                              <1> 
   198                              <1> 		;---------------------------------------
   199                              <1> 		; X座標を8で割った余りからビット位置を計算
   200                              <1> 		; (0=0x80, 1=0x40,... 7=0x01)
   201                              <1> 		;---------------------------------------
   202 0000060F 83E107              <1> 		and		ecx, 0x07						; ECX = X & 0x07;
   203 00000612 BB80000000          <1> 		mov		ebx, 0x80						; EBX = 0x80;
   204 00000617 D3EB                <1> 		shr		ebx, cl							; EBX >>= ECX;
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; 色指定
   208                              <1> 		;---------------------------------------
   209 00000619 8B4D10              <1> 		mov		ecx, [ebp +16]					; // 表示色
   210                              <1> 
   211                              <1> %ifdef	USE_TEST_AND_SET
   212                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   213                              <1> %endif
   214                              <1> 
   215                              <1> 		;---------------------------------------
   216                              <1> 		; プレーン毎に出力
   217                              <1> 		;---------------------------------------
   218 0000061C 6A03E85AFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 輝度(I)プレーンを選択
   218 00000625 C404                <1>
   219 00000627 6A08E868FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 輝度(I)プレーンを選択
   219 00000630 C404                <1>
   220 00000632 516A085753E8C6FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
   220 0000063B FF6683C410          <1>
   221                              <1> 
   222 00000640 6A02E836FDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 赤(R)プレーンを選択
   222 00000649 C404                <1>
   223 0000064B 6A04E844FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 赤(R)プレーンを選択
   223 00000654 C404                <1>
   224 00000656 516A045753E8A2FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
   224 0000065F FF6683C410          <1>
   225                              <1> 
   226 00000664 6A01E812FDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 緑(G)プレーンを選択
   226 0000066D C404                <1>
   227 0000066F 6A02E820FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 緑(G)プレーンを選択
   227 00000678 C404                <1>
   228 0000067A 516A025753E87EFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
   228 00000683 FF6683C410          <1>
   229                              <1> 
   230 00000688 6A00E8EEFCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 青(B)プレーンを選択
   230 00000691 C404                <1>
   231 00000693 6A01E8FCFCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 青(B)プレーンを選択
   231 0000069C C404                <1>
   232 0000069E 516A015753E85AFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
   232 000006A7 FF6683C410          <1>
   233                              <1> 
   234                              <1> 
   235                              <1> %ifdef	USE_TEST_AND_SET
   236                              <1> 		;---------------------------------------
   237                              <1> 		; テストアンドセット
   238                              <1> 		;---------------------------------------
   239                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   240                              <1> %endif
   241                              <1> 
   242                              <1> 		;---------------------------------------
   243                              <1> 		; 【レジスタの復帰】
   244                              <1> 		;---------------------------------------
   245 000006AC 5F                  <1> 		pop		edi
   246 000006AD 59                  <1> 		pop		ecx
   247 000006AE 5B                  <1> 		pop		ebx
   248 000006AF 58                  <1> 		pop		eax
   249                              <1> 
   250                              <1> 		;---------------------------------------
   251                              <1> 		; 【スタックフレームの破棄】
   252                              <1> 		;---------------------------------------
   253 000006B0 89EC                <1> 		mov		esp, ebp
   254 000006B2 5D                  <1> 		pop		ebp
   255                              <1> 
   256 000006B3 C3                  <1> 		ret
   257                              <1> 
   151                                  %include	"../modules/protect/draw_line.s"
   152                              <1> ;************************************************************************
   153                              <1> ;	直線の描画
   154                              <1> ;========================================================================
   155                              <1> ;■書式		: void draw_line(X0, Y0, X1, Y1, color);
   156                              <1> ;
   157                              <1> ;■引数
   158                              <1> ;	X0		: 始点のX座標
   159                              <1> ;	Y0		: 始点のY座標
   160                              <1> ;	X1		: 終点のX座標
   161                              <1> ;	Y1		: 終点のY座標
   162                              <1> ;	color	: 描画色
   163                              <1> ;
   164                              <1> ;■戻り値	: 無し
   165                              <1> ;************************************************************************
   166                              <1> draw_line:
   167                              <1> 		;---------------------------------------
   168                              <1> 		; 【スタックフレームの構築】
   169                              <1> 		;---------------------------------------
   170                              <1> 												; ---------------
   171                              <1> 												;    +24| 色
   172                              <1> 												;    +20| Y1
   173                              <1> 												;    +16| X1
   174                              <1> 												;    +12| Y0
   175                              <1> 												;    + 8| X0
   176                              <1> 												; ---------------
   177 000006B4 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   178 000006B5 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   179                              <1> 												; ---------------
   180 000006B7 6A00                <1> 		push	dword 0							;    - 4| sum   = 0; // 相対軸の積算値
   181 000006B9 6A00                <1> 		push	dword 0							;    - 8| x0    = 0; // X座標
   182 000006BB 6A00                <1> 		push	dword 0							;    -12| dx    = 0; // X増分
   183 000006BD 6A00                <1> 		push	dword 0							;    -16| inc_x = 0; // X座標増分(1 or -1)
   184 000006BF 6A00                <1> 		push	dword 0							;    -20| y0    = 0; // Y座標
   185 000006C1 6A00                <1> 		push	dword 0							;    -24| dy    = 0; // Y増分
   186 000006C3 6A00                <1> 		push	dword 0							;    -28| inc_y = 0; // Y座標増分(1 or -1)
   187                              <1> 												; ------|--------
   188                              <1> 
   189                              <1> 		;---------------------------------------
   190                              <1> 		; 【レジスタの保存】
   191                              <1> 		;---------------------------------------
   192 000006C5 50                  <1> 		push	eax
   193 000006C6 53                  <1> 		push	ebx
   194 000006C7 51                  <1> 		push	ecx
   195 000006C8 52                  <1> 		push	edx
   196 000006C9 56                  <1> 		push	esi
   197 000006CA 57                  <1> 		push	edi
   198                              <1> 
   199                              <1> 		;---------------------------------------
   200                              <1> 		; 幅を計算（X軸）
   201                              <1> 		;---------------------------------------
   202 000006CB 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   203 000006CE 8B5D10              <1> 		mov		ebx, [ebp +16]					; EBX = X1;
   204 000006D1 29C3                <1> 		sub		ebx, eax						; EBX = X1 - X0; // 幅
   205 000006D3 7D09                <1> 		jge		.10F							; if (幅 < 0)
   206                              <1> 												; {
   207 000006D5 F7DB                <1> 		neg		ebx								;   幅   *= -1;
   208 000006D7 BEFFFFFFFF          <1> 		mov		esi, -1							;   // X座標の増分
   209 000006DC EB05                <1> 		jmp		.10E							; }
   210                              <1> .10F:											; else
   211                              <1> 												; {
   212 000006DE BE01000000          <1> 		mov		esi, 1							;   // X座標の増分
   213                              <1> .10E:											; }
   214                              <1> 
   215                              <1> 		;---------------------------------------
   216                              <1> 		; 高さを計算（Y軸）
   217                              <1> 		;---------------------------------------
   218 000006E3 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX = Y0
   219 000006E6 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1
   220 000006E9 29CA                <1> 		sub		edx, ecx						; EDX = Y1 - Y0; // 高さ
   221 000006EB 7D09                <1> 		jge		.20F							; if (高さ < 0)
   222                              <1> 												; {
   223 000006ED F7DA                <1> 		neg		edx								;   高さ *= -1;
   224 000006EF BFFFFFFFFF          <1> 		mov		edi, -1							;   // Y座標の増分
   225 000006F4 EB05                <1> 		jmp		.20E							; }
   226                              <1> .20F:											; else
   227                              <1> 												; {
   228 000006F6 BF01000000          <1> 		mov		edi, 1							;   // Y座標の増分
   229                              <1> .20E:											; }
   230                              <1> 
   231                              <1> 		;---------------------------------------
   232                              <1> 		; X軸
   233                              <1> 		;---------------------------------------
   234 000006FB 8945F8              <1> 		mov		[ebp - 8], eax					;   // X軸:開始座標
   235 000006FE 895DF4              <1> 		mov		[ebp -12], ebx					;   // X軸:描画幅
   236 00000701 8975F0              <1> 		mov		[ebp -16], esi					;   // X軸:増分(基準軸：1 or -1)
   237                              <1> 
   238                              <1> 		;---------------------------------------
   239                              <1> 		; Y軸
   240                              <1> 		;---------------------------------------
   241 00000704 894DEC              <1> 		mov		[ebp -20], ecx					;   // Y軸:開始座標
   242 00000707 8955E8              <1> 		mov		[ebp -24], edx					;   // Y軸:描画幅
   243 0000070A 897DE4              <1> 		mov		[ebp -28], edi					;   // Y軸:増分(基準軸：1 or -1)
   244                              <1> 
   245                              <1> 		;---------------------------------------
   246                              <1> 		; 基準軸を決める
   247                              <1> 		;---------------------------------------
   248 0000070D 39D3                <1> 		cmp		ebx, edx						; if (幅 <= 高さ)
   249 0000070F 7F08                <1> 		jg		.22F							; {
   250                              <1> 												;   
   251 00000711 8D75EC              <1> 		lea		esi, [ebp -20]					;   // Y軸が基準軸
   252 00000714 8D7DF8              <1> 		lea		edi, [ebp - 8]					;   // X軸が相対軸
   253                              <1> 												;   
   254 00000717 EB06                <1> 		jmp		.22E							; }
   255                              <1> .22F:											; else
   256                              <1> 												; {
   257 00000719 8D75F8              <1> 		lea		esi, [ebp - 8]					;   // X軸が基準軸
   258 0000071C 8D7DEC              <1> 		lea		edi, [ebp -20]					;   // Y軸が相対軸
   259                              <1> .22E:											; }
   260                              <1> 
   261                              <1> 		;---------------------------------------
   262                              <1> 		; 繰り返し回数(基準軸のドット数)
   263                              <1> 		;---------------------------------------
   264 0000071F 8B4EFC              <1> 		mov		ecx, [esi - 4]					; ECX = 基準軸描画幅;
   265 00000722 83F900              <1> 		cmp		ecx, 0							; if (0 == ECX)
   266 00000725 7505                <1> 		jnz		.30E							; {
   267 00000727 B901000000          <1> 		mov		ecx, 1							;   ECX = 1;
   268                              <1> .30E:											; }
   269                              <1> 
   270                              <1> 		;---------------------------------------
   271                              <1> 		; 線を描画
   272                              <1> 		;---------------------------------------
   273                              <1> .50L:											; do
   274                              <1> 												; {
   275                              <1> %ifdef	USE_SYSTEM_CALL
   276 0000072C 89C8                <1> 		mov		eax, ecx						;   // 繰り返し回数を保存
   277                              <1> 
   278 0000072E 8B5D18              <1> 		mov		ebx, [ebp +24]					;   EBX = 表示色;
   279 00000731 8B4DF8              <1> 		mov		ecx, [ebp - 8]					;   ECX = X座標;
   280 00000734 8B55EC              <1> 		mov		edx, [ebp -20]					;   EDX = Y座標;
   281 00000737 CD82                <1> 		int		0x82							;   sys_call(1, X, Y, 色, 文字); BX(C), CX(X), DX(Y)
   282                              <1> 
   283 00000739 89C1                <1> 		mov		ecx, eax
   284                              <1> %else
   285                              <1> 		cdecl	draw_pixel, dword [ebp - 8], 							dword [ebp -20], 							dword [ebp +24]		;   // 点の描画
   288                              <1> %endif
   289                              <1> 												;   // 基準軸を更新(1ドット分)
   290 0000073B 8B46F8              <1> 		mov		eax, [esi - 8]					;   EAX = 基準軸増分(1 or -1);
   291 0000073E 0106                <1> 		add		[esi - 0], eax					;   
   292                              <1> 
   293                              <1> 												;   // 相対軸を更新
   294 00000740 8B45FC              <1> 		mov		eax, [ebp - 4]					;   EAX  = sum; // 相対軸の積算値;
   295 00000743 0347FC              <1> 		add		eax, [edi - 4]					;   EAX += dy;  // 増分(相対軸の描画幅)
   296 00000746 8B5EFC              <1> 		mov		ebx, [esi - 4]					;   EBX  = dx;  // 増分(基準軸の描画幅)
   297                              <1> 
   298 00000749 39D8                <1> 		cmp		eax, ebx						;   if (積算値 <= 相対軸の増分)
   299 0000074B 7C07                <1> 		jl		.52E							;   {
   300 0000074D 29D8                <1> 		sub		eax, ebx						;     EAX -= EBX; // 積算値から相対軸の増分を減算
   301                              <1> 												;     
   302                              <1> 												;     // 相対軸の座標を更新(1ドット分)
   303 0000074F 8B5FF8              <1> 		mov		ebx, [edi - 8]					;     EBX =  相対軸増分;
   304 00000752 011F                <1> 		add		[edi - 0], ebx					;     
   305                              <1> .52E:											;   }
   306 00000754 8945FC              <1> 		mov		[ebp - 4], eax					;   // 積算値を更新
   307                              <1> 												;   
   308 00000757 E2D3                <1> 		loop	.50L							;   
   309                              <1> .50E:											; } while (ループ回数--);
   310                              <1> 
   311                              <1> 		;---------------------------------------
   312                              <1> 		; 【レジスタの復帰】
   313                              <1> 		;---------------------------------------
   314 00000759 5F                  <1> 		pop		edi
   315 0000075A 5E                  <1> 		pop		esi
   316 0000075B 5A                  <1> 		pop		edx
   317 0000075C 59                  <1> 		pop		ecx
   318 0000075D 5B                  <1> 		pop		ebx
   319 0000075E 58                  <1> 		pop		eax
   320                              <1> 
   321                              <1> 		;---------------------------------------
   322                              <1> 		; 【スタックフレームの破棄】
   323                              <1> 		;---------------------------------------
   324 0000075F 89EC                <1> 		mov		esp, ebp
   325 00000761 5D                  <1> 		pop		ebp
   326                              <1> 
   327 00000762 C3                  <1> 		ret
   328                              <1> 
   152                                  %include	"../modules/protect/draw_rect.s"
   153                              <1> ;************************************************************************
   154                              <1> ;	矩形の描画
   155                              <1> ;========================================================================
   156                              <1> ;■書式		: void draw_rect(X0, Y0, X1, Y1, color);
   157                              <1> ;
   158                              <1> ;■引数
   159                              <1> ;	X0		: 始点のX座標
   160                              <1> ;	Y0		: 始点のY座標
   161                              <1> ;	X1		: 終点のX座標
   162                              <1> ;	Y1		: 終点のY座標
   163                              <1> ;	color	: 描画色
   164                              <1> ;
   165                              <1> ;■戻り値	: 無し
   166                              <1> ;************************************************************************
   167                              <1> draw_rect:
   168                              <1> 		;---------------------------------------
   169                              <1> 		; 【スタックフレームの構築】
   170                              <1> 		;---------------------------------------
   171                              <1> 												; ------|--------
   172                              <1> 												; EBP+24| 色
   173                              <1> 												; EBP+20| Y1
   174                              <1> 												; EBP+16| X1
   175                              <1> 												; EBP+12| Y0
   176                              <1> 												; EBP+ 8| X0
   177                              <1> 												; ---------------
   178 00000763 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   179 00000764 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   180                              <1> 												; ------|--------
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; 【レジスタの保存】
   184                              <1> 		;---------------------------------------
   185 00000766 50                  <1> 		push		eax
   186 00000767 53                  <1> 		push		ebx
   187 00000768 51                  <1> 		push		ecx
   188 00000769 52                  <1> 		push		edx
   189 0000076A 56                  <1> 		push		esi
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 矩形を描画
   193                              <1> 		;---------------------------------------
   194 0000076B 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   195 0000076E 8B5D0C              <1> 		mov		ebx, [ebp +12]					; EBX = Y0;
   196 00000771 8B4D10              <1> 		mov		ecx, [ebp +16]					; ECX = X1;
   197 00000774 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1;
   198 00000777 8B7518              <1> 		mov		esi, [ebp +24]					; ESI = 色;
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 座標軸の大小を確定
   202                              <1> 		;---------------------------------------
   203 0000077A 39C8                <1> 		cmp		eax, ecx						; if (X1 < X0)
   204 0000077C 7C01                <1> 		jl		.10E							; {
   205 0000077E 91                  <1> 		xchg	eax, ecx						;   X0とX1を入れ替える;
   206                              <1> .10E:											; }
   207                              <1> 
   208 0000077F 39D3                <1> 		cmp		ebx, edx						; if (Y1 < Y0)
   209 00000781 7C02                <1> 		jl		.20E							; {
   210 00000783 87DA                <1> 		xchg	ebx, edx						;   Y0とY1を入れ替える;
   211                              <1> .20E:											; }
   212                              <1> 
   213                              <1> 		;---------------------------------------
   214                              <1> 		; 矩形を描画
   215                              <1> 		;---------------------------------------
   216 00000785 5653515350E825FFFF- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, esi	; 上線
   216 0000078E FF6683C414          <1>
   217 00000793 5652505350E817FFFF- <1> 		cdecl	draw_line, eax, ebx, eax, edx, esi	; 左線
   217 0000079C FF6683C414          <1>
   218                              <1> 
   219 000007A1 4A                  <1> 		dec		edx									; EDX--; // 下線は1ドット上げる
   220 000007A2 5652515250E808FFFF- <1> 		cdecl	draw_line, eax, edx, ecx, edx, esi	; 下線
   220 000007AB FF6683C414          <1>
   221 000007B0 42                  <1> 		inc		edx
   222                              <1> 
   223 000007B1 49                  <1> 		dec		ecx									; ECX--; // 右線は1ドット左に移動
   224 000007B2 5652515351E8F8FEFF- <1> 		cdecl	draw_line, ecx, ebx, ecx, edx, esi	; 右線
   224 000007BB FF6683C414          <1>
   225                              <1> 
   226                              <1> 		;---------------------------------------
   227                              <1> 		; 【レジスタの復帰】
   228                              <1> 		;---------------------------------------
   229 000007C0 5E                  <1> 		pop		esi
   230 000007C1 5A                  <1> 		pop		edx
   231 000007C2 59                  <1> 		pop		ecx
   232 000007C3 5B                  <1> 		pop		ebx
   233 000007C4 58                  <1> 		pop		eax
   234                              <1> 
   235                              <1> 		;---------------------------------------
   236                              <1> 		; 【スタックフレームの破棄】
   237                              <1> 		;---------------------------------------
   238 000007C5 89EC                <1> 		mov		esp, ebp
   239 000007C7 5D                  <1> 		pop		ebp
   240                              <1> 
   241 000007C8 C3                  <1> 		ret
   153                                  %include	"../modules/protect/itoa.s"
   154                              <1> ;************************************************************************
   155                              <1> ;	数値を文字に変換
   156                              <1> ;========================================================================
   157                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
   158                              <1> ;
   159                              <1> ;■引数
   160                              <1> ;	num		: 変換する数値
   161                              <1> ;	buff	: 保存先バッファアドレス
   162                              <1> ;	size	: 保存先バッファサイズ
   163                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
   164                              <1> ;	flags	: フラグ
   165                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
   166                              <1> ;			:      : 0=空白を' '（スペース）で埋める
   167                              <1> ;			:   B1 : 1=＋/-符号を表示する
   168                              <1> ;			:      : 0=＋/-符号を表示しない
   169                              <1> ;			:   B0 : 1=符号付き正数として扱う
   170                              <1> ;			:      : 0=符号無し正数として扱う
   171                              <1> ;
   172                              <1> ;■戻り値	: 無し
   173                              <1> ;************************************************************************
   174                              <1> itoa:
   175                              <1> 		;---------------------------------------
   176                              <1> 		; 【スタックフレームの構築】
   177                              <1> 		;---------------------------------------
   178                              <1> 												; ------|--------
   179                              <1> 												;    +24| フラグ
   180                              <1> 												;    +20| 基数
   181                              <1> 												;    +16| バッファサイズ
   182                              <1> 												;    +12| バッファアドレス
   183                              <1> 												;    + 8| 数値
   184                              <1> 												; ------|--------
   185                              <1> 												;    + 4| EIP（戻り番地）
   186 000007C9 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   187 000007CA 89E5                <1> 		mov		ebp, esp						; ------+--------
   188                              <1> 
   189                              <1> 		;---------------------------------------
   190                              <1> 		; 【レジスタの保存】
   191                              <1> 		;---------------------------------------
   192 000007CC 50                  <1> 		push	eax
   193 000007CD 53                  <1> 		push	ebx
   194 000007CE 51                  <1> 		push	ecx
   195 000007CF 52                  <1> 		push	edx
   196 000007D0 56                  <1> 		push	esi
   197 000007D1 57                  <1> 		push	edi
   198                              <1> 
   199                              <1> 		;---------------------------------------
   200                              <1> 		; 引数を取得
   201                              <1> 		;---------------------------------------
   202 000007D2 8B4508              <1> 		mov		eax, [ebp + 8]					; val  = 数値;
   203 000007D5 8B750C              <1> 		mov		esi, [ebp +12]					; dst  = バッファアドレス;
   204 000007D8 8B4D10              <1> 		mov		ecx, [ebp +16]					; size = 残りバッファサイズ;
   205                              <1> 
   206 000007DB 89F7                <1> 		mov		edi, esi						; // バッファの最後尾
   207 000007DD 01CF                <1> 		add		edi, ecx						; dst  = &dst[size - 1];
   208 000007DF 4F                  <1> 		dec		edi								; 
   209                              <1> 
   210 000007E0 8B5D18              <1> 		mov		ebx, [ebp +24]					; flags = オプション;
   211                              <1> 
   212                              <1> 		;---------------------------------------
   213                              <1> 		; 符号付き判定
   214                              <1> 		;---------------------------------------
   215 000007E3 F7C301000000        <1> 		test	ebx, 0b0001						; if (flags & 0x01)// 符号付き
   216 000007E9 7408                <1> .10Q:	je		.10E							; {
   217 000007EB 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   218 000007EE 7D03                <1> .12Q:	jge		.12E							;   {
   219 000007F0 83CB02              <1> 		or		ebx, 0b0010						;     flags |=  2; // 符号表示
   220                              <1> .12E:											;   }
   221                              <1> .10E:											; }
   222                              <1> 
   223                              <1> 		;---------------------------------------
   224                              <1> 		; 符号出力判定
   225                              <1> 		;---------------------------------------
   226 000007F3 F7C302000000        <1> 		test	ebx, 0b0010						; if (flags & 0x02)// 符号出力判定
   227 000007F9 7410                <1> .20Q:	je		.20E							; {
   228 000007FB 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   229 000007FE 7D07                <1> .22Q:	jge		.22F							;   {
   230 00000800 F7D8                <1> 		neg		eax								;     val *= -1;   // 符号反転
   231 00000802 C6062D              <1> 		mov		[esi], byte '-'					;     *dst = '-';  // 符号表示
   232 00000805 EB03                <1> 		jmp		.22E							;   }
   233                              <1> .22F:											;   else
   234                              <1> 												;   {
   235 00000807 C6062B              <1> 		mov		[esi], byte '+'					;     *dst = '+';  // 符号表示
   236                              <1> .22E:											;   }
   237 0000080A 49                  <1> 		dec		ecx								;   size--;        // 残りバッファサイズの減算
   238                              <1> .20E:											; }
   239                              <1> 
   240                              <1> 		;---------------------------------------
   241                              <1> 		; ASCII変換
   242                              <1> 		;---------------------------------------
   243 0000080B 8B5D14              <1> 		mov		ebx, [ebp +20]					; BX = 基数;
   244                              <1> .30L:											; do
   245                              <1> 												; {
   246 0000080E BA00000000          <1> 		mov		edx, 0							;   
   247 00000813 F7F3                <1> 		div		ebx								;   DX = DX:AX % 基数;
   248                              <1> 												;   AX = DX:AX / 基数;
   249                              <1> 												;   
   250 00000815 89D6                <1> 		mov		esi, edx						;   // テーブル参照
   251 00000817 8A96[42080000]      <1> 		mov		dl, byte [.ascii + esi]			;   DL = ASCII[DX];
   252                              <1> 												;   
   253 0000081D 8817                <1> 		mov		[edi], dl						;   *dst = DL;
   254 0000081F 4F                  <1> 		dec		edi								;   dst--;
   255                              <1> 												;   
   256 00000820 83F800              <1> 		cmp		eax, 0							;   
   257 00000823 E0E9                <1> 		loopnz	.30L							; } while (AX);
   258                              <1> .30E:
   259                              <1> 
   260                              <1> 		;---------------------------------------
   261                              <1> 		; 空欄を埋める
   262                              <1> 		;---------------------------------------
   263 00000825 83F900              <1> 		cmp		ecx, 0							; if (size)
   264 00000828 740E                <1> .40Q:	je		.40E							; {
   265 0000082A B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   266 0000082C 66837D1804          <1> 		cmp		[ebp +24], word 0b0100			;   if (flags & 0x04)
   267 00000831 7502                <1> .42Q:	jne		.42E							;   {
   268 00000833 B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   269                              <1> .42E:											;   }
   270 00000835 FD                  <1> 		std										;   // DF = 1（-方向）
   271 00000836 F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   272                              <1> .40E:											; }
   273                              <1> 
   274                              <1> 		;---------------------------------------
   275                              <1> 		; 【レジスタの復帰】
   276                              <1> 		;---------------------------------------
   277 00000838 5F                  <1> 		pop		edi
   278 00000839 5E                  <1> 		pop		esi
   279 0000083A 5A                  <1> 		pop		edx
   280 0000083B 59                  <1> 		pop		ecx
   281 0000083C 5B                  <1> 		pop		ebx
   282 0000083D 58                  <1> 		pop		eax
   283                              <1> 
   284                              <1> 		;---------------------------------------
   285                              <1> 		; 【スタックフレームの破棄】
   286                              <1> 		;---------------------------------------
   287 0000083E 89EC                <1> 		mov		esp, ebp
   288 00000840 5D                  <1> 		pop		ebp
   289                              <1> 
   290 00000841 C3                  <1> 		ret
   291                              <1> 
   292 00000842 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   292 0000084B 39414243444546      <1>
   293                              <1> 
   154                                  %include	"../modules/protect/rtc.s"
   155                              <1> ;************************************************************************
   156                              <1> ;	RTCから時刻データを取得する
   157                              <1> ;========================================================================
   158                              <1> ;■書式		: DWORD rtc_get_time(dst);
   159                              <1> ;
   160                              <1> ;■引数
   161                              <1> ;	dst		: 保存先アドレス
   162                              <1> ;
   163                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   164                              <1> ;************************************************************************
   165                              <1> rtc_get_time:
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 【スタックフレームの構築】
   168                              <1> 		;---------------------------------------
   169                              <1> 												; ------|--------
   170                              <1> 												; EBP+ 8| 保存先アドレス
   171                              <1> 												; ---------------
   172 00000852 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   173 00000853 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   174                              <1> 												; ---------------
   175                              <1> 		;---------------------------------------
   176                              <1> 		; 【レジスタの保存】
   177                              <1> 		;---------------------------------------
   178 00000855 53                  <1> 		push	ebx
   179                              <1> 
   180                              <1> 		;---------------------------------------
   181                              <1> 		; RTCから時刻を取得
   182                              <1> 		;---------------------------------------
   183 00000856 B00A                <1> 		mov		al, 0x0A						; // レジスタA
   184 00000858 E670                <1> 		out		0x70, al						; outp(0x70, AL);
   185 0000085A E471                <1> 		in		al, 0x71						; AL = レジスタA;
   186 0000085C A880                <1> 		test	al, 0x80						; if (DM & UIP) // 更新中
   187 0000085E 7407                <1> 		je		.10F							; {
   188 00000860 B801000000          <1> 		mov		eax, 1							;   ret = 1; // データ更新中
   189 00000865 EB27                <1> 		jmp		.10E							; }
   190                              <1> .10F:											; else
   191                              <1> 												; {
   192                              <1> 												;   // RAM[0x04]:時
   193 00000867 B004                <1> 		mov		al, 0x04						;   AL = 0x04;
   194 00000869 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   195 0000086B E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 時データ
   196                              <1> 												;   
   197 0000086D C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   198                              <1> 												;   
   199                              <1> 												;   // RAM[0x02]:分
   200 00000870 B002                <1> 		mov		al, 0x02						;   AL = 0x02;
   201 00000872 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   202 00000874 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 分データ
   203                              <1> 												;   
   204 00000876 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   205                              <1> 												;   
   206                              <1> 												;   // RAM[0x00]:秒
   207 00000879 B000                <1> 		mov		al, 0x00						;   AL = 0x00;
   208 0000087B E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   209 0000087D E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 秒データ
   210                              <1> 												;   
   211 0000087F 25FFFFFF00          <1> 		and		eax, 0x00_FF_FF_FF				;   // 下位3バイトのみ有効
   212                              <1> 												;   
   213 00000884 8B5D08              <1> 		mov		ebx, [ebp + 8]					;   dst = 保存先;
   214 00000887 8903                <1> 		mov		[ebx], eax						;   [dst] = 時刻;
   215                              <1> 												;   
   216 00000889 B800000000          <1> 		mov		eax, 0							;   ret = 0; // 正常終了
   217                              <1> .10E:											; }
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 【レジスタの復帰】
   221                              <1> 		;---------------------------------------
   222 0000088E 5B                  <1> 		pop		ebx
   223                              <1> 
   224                              <1> 		;---------------------------------------
   225                              <1> 		; 【スタックフレームの破棄】
   226                              <1> 		;---------------------------------------
   227 0000088F 89EC                <1> 		mov		esp, ebp
   228 00000891 5D                  <1> 		pop		ebp
   229                              <1> 
   230 00000892 C3                  <1> 		ret
   231                              <1> 
   155                                  %include	"../modules/protect/draw_time.s"
   156                              <1> ;************************************************************************
   157                              <1> ;	時刻の表示
   158                              <1> ;========================================================================
   159                              <1> ;■書式		: void draw_time(col, row, color, time);
   160                              <1> ;
   161                              <1> ;■引数
   162                              <1> ;	col		: 列
   163                              <1> ;	row		: 行
   164                              <1> ;	color	: 描画色
   165                              <1> ;	time	: 時刻データ
   166                              <1> ;
   167                              <1> ;■戻り値	: 無し
   168                              <1> ;************************************************************************
   169                              <1> draw_time:
   170                              <1> 		;---------------------------------------
   171                              <1> 		; 【スタックフレームの構築】
   172                              <1> 		;---------------------------------------
   173                              <1> 												; ------|--------
   174                              <1> 												; EBP+20| 時刻データ
   175                              <1> 												; EBP+16| 色
   176                              <1> 												; EBP+12| Y（行）
   177                              <1> 												; EBP+ 8| X（列）
   178                              <1> 												; ---------------
   179 00000893 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   180 00000894 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   181                              <1> 												; ---------------
   182                              <1> 		;---------------------------------------
   183                              <1> 		; 【レジスタの保存】
   184                              <1> 		;---------------------------------------
   185 00000896 50                  <1> 		push	eax
   186 00000897 53                  <1> 		push	ebx
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 
   190                              <1> 		;---------------------------------------
   191 00000898 8B4514              <1> 		mov		eax, [ebp +20]					; EAX = 時刻データ;
   192 0000089B 3B05[18090000]      <1> 		cmp		eax, [.last]					; if (今回 != 前回)
   193 000008A1 7467                <1> 		je		.10E							; {
   194                              <1> 												;   
   195 000008A3 A3[18090000]        <1> 		mov		[.last], eax					;   // 前回の時刻値を更新
   196                              <1> 												;   
   197 000008A8 BB00000000          <1> 		mov		ebx, 0							;   EBX = 0;
   198 000008AD 88C3                <1> 		mov		bl, al							;   EBX = 秒;
   199 000008AF 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .sec, 2, 16, 0b0100	;   // 時刻を文字列に変換
   199 000008B6 [26090000]53E809FF- <1>
   199 000008BE FFFF6683C414        <1>
   200                              <1> 
   201 000008C4 88E3                <1> 		mov		bl, ah							;   EBX = 分;
   202 000008C6 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .min, 2, 16, 0b0100	;   // 時刻を文字列に変換
   202 000008CD [23090000]53E8F2FE- <1>
   202 000008D5 FFFF6683C414        <1>
   203                              <1> 
   204 000008DB C1E810              <1> 		shr		eax, 16							;   EBX = 時;
   205 000008DE 6A046A106A0268-     <1> 		cdecl	itoa, eax, .hour, 2, 16, 0b0100	;   // 時刻を文字列に変換
   205 000008E5 [20090000]50E8DAFE- <1>
   205 000008ED FFFF6683C414        <1>
   206                              <1> 
   207                              <1> 												;   // 時刻を表示
   208 000008F3 68[20090000]FF7510- <1> 		cdecl	draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
   208 000008FB FF750CFF7508E833FC- <1>
   208 00000904 FFFF6683C410        <1>
   209                              <1> 												;     
   210                              <1> 												;   }
   211                              <1> .10E:											; }
   212                              <1> 
   213                              <1> 		;---------------------------------------
   214                              <1> 		; 【レジスタの復帰】
   215                              <1> 		;---------------------------------------
   216 0000090A 5B                  <1> 		pop		ebx
   217 0000090B 58                  <1> 		pop		eax
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 【スタックフレームの破棄】
   221                              <1> 		;---------------------------------------
   222 0000090C 89EC                <1> 		mov		esp, ebp
   223 0000090E 5D                  <1> 		pop		ebp
   224                              <1> 
   225 0000090F C3                  <1> 		ret
   226                              <1> 
   227                              <1> ALIGN 2, db 0
   228 00000910 0000000000000000    <1> .temp:	dq	0
   229 00000918 0000000000000000    <1> .last:	dq	0
   230 00000920 5A5A3A              <1> .hour:	db	"ZZ:"
   231 00000923 5A5A3A              <1> .min:	db	"ZZ:"
   232 00000926 5A5A00              <1> .sec:	db	"ZZ", 0
   233                              <1> 
   156                                  %include	"../modules/protect/interrupt.s"
   157                              <1> ;************************************************************************
   158                              <1> ;	割り込みベクタの初期化
   159                              <1> ;************************************************************************
   160 00000929 90<rep 3h>          <1> ALIGN 4
   161 0000092C FF07                <1> IDTR:	dw 		8 * 256 - 1					; idt_limit
   162 0000092E 00001000            <1> 		dd 		VECT_BASE					; idt location
   163                              <1> 
   164                              <1> ;************************************************************************
   165                              <1> ;	割り込みテーブルを初期化
   166                              <1> ;------------------------------------------------------------------------
   167                              <1> ;	
   168                              <1> ;	まず、全ての割り込みアドレスにデフォルト処理を設定すし、その後、
   169                              <1> ;	必要な割り込みだけ設定しなおす。
   170                              <1> ;	
   171                              <1> ;	割り込みアドレスは、VECT_BASEで指定され、256の割り込みがあるので
   172                              <1> ;	0x0800バイト占有することになる。
   173                              <1> ;	
   174                              <1> ;	           |____________| _V___
   175                              <1> ;	  VECT_BASE| IntDefault |  |   
   176                              <1> ;	           | IntDefault |  | 8 * 256
   177                              <1> ;	           |      :     |  |   
   178                              <1> ;	           |____________| _|___
   179                              <1> ;	      +0800|////////////|
   180                              <1> ;	           |            |
   181                              <1> ;	
   182                              <1> ;	一つの割り込み設定は8バイトで構成される。
   183                              <1> ;	
   184                              <1> ;	           |____________|____________| 
   185                              <1> ;	        [0]| Address Lo[15: 0]       | 
   186                              <1> ;	        [2]| Selector                | 
   187                              <1> ;	        [4]| Flags                   | 
   188                              <1> ;	        [6]|_Address Lo[32:16]_______| 
   189                              <1> ;	           |/////////////////////////| 
   190                              <1> ;	           |            |            | 
   191                              <1> ;	
   192                              <1> ;========================================================================
   193                              <1> ;■書式		: void init_int(void);
   194                              <1> ;
   195                              <1> ;■引数		: 無し
   196                              <1> ;
   197                              <1> ;■戻り値	: 無し
   198                              <1> ;************************************************************************
   199                              <1> init_int:
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 【レジスタの保存】
   202                              <1> 		;---------------------------------------
   203 00000932 50                  <1> 		push	eax
   204 00000933 53                  <1> 		push	ebx
   205 00000934 51                  <1> 		push	ecx
   206 00000935 57                  <1> 		push	edi
   207                              <1> 
   208                              <1> 		;---------------------------------------
   209                              <1> 		; 全ての割り込みにデフォルト処理を設定
   210                              <1> 		;---------------------------------------
   211 00000936 8D05[7C0A0000]      <1> 		lea		eax, [int_default]				; EAX   = 割り込み処理アドレス;
   212 0000093C BB008E0800          <1> 		mov		ebx, 0x0008_8E00				; EBX   = セグメントセレクタ;
   213 00000941 6693                <1> 		xchg	ax, bx							; // 下位ワードを交換
   214                              <1> 
   215 00000943 B900010000          <1> 		mov		ecx, 256						; ECX   = 割り込みベクタ数
   216 00000948 BF00001000          <1> 		mov		edi, VECT_BASE					; EDI   = 割り込みベクタテーブル
   217                              <1> 
   218                              <1> .10L:											; do
   219                              <1> 												; {
   220 0000094D 891F                <1> 		mov		[edi + 0], ebx					;   [EDI + 0] = 割り込みディスクリプタ（下位）
   221 0000094F 894704              <1> 		mov		[edi + 4], eax					;   [EDI + 4] = 割り込みディスクリプタ（上位）
   222 00000952 83C708              <1> 		add		edi, 8							;   EDI += 8;
   223 00000955 E2F6                <1> 		loop	.10L							; } while (ECX--);
   224                              <1> 
   225                              <1> 		;---------------------------------------
   226                              <1> 		; 割り込みディスクリプタの設定
   227                              <1> 		;---------------------------------------
   228 00000957 0F011D[2C090000]    <1> 		lidt	[IDTR]							; // 割り込みディスクリプタテーブルをロード
   229                              <1> 
   230                              <1> 		;---------------------------------------
   231                              <1> 		; 【レジスタの復帰】
   232                              <1> 		;---------------------------------------
   233 0000095E 5F                  <1> 		pop		edi
   234 0000095F 59                  <1> 		pop		ecx
   235 00000960 5B                  <1> 		pop		ebx
   236 00000961 58                  <1> 		pop		eax
   237                              <1> 
   238 00000962 C3                  <1> 		ret
   239                              <1> 
   240                              <1> ;************************************************************************
   241                              <1> ;	スタックの内容を表示して無限ループを実行
   242                              <1> ;************************************************************************
   243                              <1> int_stop:
   244 00000963 FB                  <1> 		sti										; // 割り込み許可
   245                              <1> 
   246                              <1> 		;---------------------------------------
   247                              <1> 		; EAXで示される文字列を表示
   248                              <1> 		;---------------------------------------
   249 00000964 50680F0600006A0F6A- <1> 		cdecl	draw_str, 25, 15, 0x060F, eax	; draw_str(EAX);
   249 0000096D 19E8C6FBFFFF6683C4- <1>
   249 00000976 10                  <1>
   250                              <1> 
   251                              <1> 		;---------------------------------------
   252                              <1> 		; スタックのデータを文字列に変換
   253                              <1> 		;---------------------------------------
   254 00000977 8B0424              <1> 		mov		eax, [esp + 0]					; EAX = ESP[ 0];
   255 0000097A 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p1, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   255 00000981 [3F0A0000]50E83EFE- <1>
   255 00000989 FFFF6683C414        <1>
   256                              <1> 
   257 0000098F 8B442404            <1> 		mov		eax, [esp + 4]					; EAX = ESP[ 4];
   258 00000993 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p2, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   258 0000099A [500A0000]50E825FE- <1>
   258 000009A2 FFFF6683C414        <1>
   259                              <1> 
   260 000009A8 8B442408            <1> 		mov		eax, [esp + 8]					; EAX = ESP[ 8];
   261 000009AC 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p3, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   261 000009B3 [610A0000]50E80CFE- <1>
   261 000009BB FFFF6683C414        <1>
   262                              <1> 
   263 000009C1 8B44240C            <1> 		mov		eax, [esp +12]					; EAX = ESP[12];
   264 000009C5 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p4, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   264 000009CC [720A0000]50E8F3FD- <1>
   264 000009D4 FFFF6683C414        <1>
   265                              <1> 
   266                              <1> 		;---------------------------------------
   267                              <1> 		; 文字列の表示
   268                              <1> 		;---------------------------------------
   269 000009DA 68[380A0000]68040F- <1> 		cdecl	draw_str, 25, 16, 0x0F04, .s1	; draw_str("ESP+ 0:-------- ");
   269 000009E2 00006A106A19E84CFB- <1>
   269 000009EB FFFF6683C410        <1>
   270 000009F1 68[490A0000]68040F- <1> 		cdecl	draw_str, 25, 17, 0x0F04, .s2	; draw_str("   + 4:-------- ");
   270 000009F9 00006A116A19E835FB- <1>
   270 00000A02 FFFF6683C410        <1>
   271 00000A08 68[5A0A0000]68040F- <1> 		cdecl	draw_str, 25, 18, 0x0F04, .s3	; draw_str("   + 8:-------- ");
   271 00000A10 00006A126A19E81EFB- <1>
   271 00000A19 FFFF6683C410        <1>
   272 00000A1F 68[6B0A0000]68040F- <1> 		cdecl	draw_str, 25, 19, 0x0F04, .s4	; draw_str("   +12:-------- ");
   272 00000A27 00006A136A19E807FB- <1>
   272 00000A30 FFFF6683C410        <1>
   273                              <1> 
   274                              <1> 		;---------------------------------------
   275                              <1> 		; 無限ループ
   276                              <1> 		;---------------------------------------
   277 00000A36 EBFE                <1> 		jmp		$								; while (1) ; // 無限ループ
   278                              <1> 
   279 00000A38 4553502B20303A      <1> .s1		db	"ESP+ 0:"
   280 00000A3F 5F5F5F5F5F5F5F5F20- <1> .p1		db	"________ ", 0
   280 00000A48 00                  <1>
   281 00000A49 2020202B20343A      <1> .s2		db	"   + 4:"
   282 00000A50 5F5F5F5F5F5F5F5F20- <1> .p2		db	"________ ", 0
   282 00000A59 00                  <1>
   283 00000A5A 2020202B20383A      <1> .s3		db	"   + 8:"
   284 00000A61 5F5F5F5F5F5F5F5F20- <1> .p3		db	"________ ", 0
   284 00000A6A 00                  <1>
   285 00000A6B 2020202B31323A      <1> .s4		db	"   +12:"
   286 00000A72 5F5F5F5F5F5F5F5F20- <1> .p4		db	"________ ", 0
   286 00000A7B 00                  <1>
   287                              <1> 
   288                              <1> ;************************************************************************
   289                              <1> ;	割り込み処理：デフォルトの処理
   290                              <1> ;************************************************************************
   291                              <1> int_default:
   292 00000A7C 9C                  <1> 		pushf									; // EFLAGS(IF==0)
   293 00000A7D 0E                  <1> 		push	cs								; // CS
   294 00000A7E 68[63090000]        <1> 		push	int_stop						; // スタック表示処理
   295                              <1> 
   296 00000A83 B8[890A0000]        <1> 		mov		eax, .s0						; // 割り込み種別
   297 00000A88 CF                  <1> 		iret
   298                              <1> 
   299 00000A89 203C2020202053544F- <1> .s0		db	" <    STOP    > ", 0
   299 00000A92 50202020203E2000    <1>
   300                              <1> 
   301                              <1> ;************************************************************************
   302                              <1> ;	割り込み処理：ゼロ除算
   303                              <1> ;************************************************************************
   304                              <1> int_zero_div:
   305 00000A9A 9C                  <1> 		pushf									; // EFLAGS
   306 00000A9B 0E                  <1> 		push	cs								; // CS
   307 00000A9C 68[63090000]        <1> 		push	int_stop						; // スタック表示処理
   308                              <1> 
   309 00000AA1 B8[A70A0000]        <1> 		mov		eax, .s0						; // 割り込み種別
   310 00000AA6 CF                  <1> 		iret
   311                              <1> 
   312 00000AA7 203C20205A45524F20- <1> .s0		db	" <  ZERO DIV  > ", 0
   312 00000AB0 44495620203E2000    <1>
   313                              <1> 
   157                                  %include	"../modules/protect/pic.s"
   158                              <1> ;************************************************************************
   159                              <1> ;	割り込みコントローラの初期化
   160                              <1> ;========================================================================
   161                              <1> ;■書式		: void init_pic(void);
   162                              <1> ;
   163                              <1> ;■引数		: 無し
   164                              <1> ;
   165                              <1> ;■戻り値	: 無し
   166                              <1> ;************************************************************************
   167                              <1> init_pic:
   168                              <1> 		;---------------------------------------
   169                              <1> 		; 【レジスタの保存】
   170                              <1> 		;---------------------------------------
   171 00000AB8 50                  <1> 		push	eax
   172                              <1> 
   173                              <1> 		;---------------------------------------
   174                              <1> 		; マスタPICの設定
   175                              <1> 		;---------------------------------------
   176                              <1> 		outp	0x20, 0x11						; // MASTER.ICW1 = 0x11;
    71 00000AB9 B011                <2>  mov al, %2
    72 00000ABB E620                <2>  out %1, al
   177                              <1> 		outp	0x21, 0x20						; // MASTER.ICW2 = 0x20;
    71 00000ABD B020                <2>  mov al, %2
    72 00000ABF E621                <2>  out %1, al
   178                              <1> 		outp	0x21, 0x04						; // MASTER.ICW3 = 0x04;
    71 00000AC1 B004                <2>  mov al, %2
    72 00000AC3 E621                <2>  out %1, al
   179                              <1> 		outp	0x21, 0x01						; // MASTER.ICW4 = 0x01;
    71 00000AC5 B001                <2>  mov al, %2
    72 00000AC7 E621                <2>  out %1, al
   180                              <1> 		outp	0x21, 0xFF						; // マスタ割り込みマスク
    71 00000AC9 B0FF                <2>  mov al, %2
    72 00000ACB E621                <2>  out %1, al
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; スレーブPICの設定
   184                              <1> 		;---------------------------------------
   185                              <1> 		outp	0xA0, 0x11						; // SLAVE.ICW1  = 0x11;
    71 00000ACD B011                <2>  mov al, %2
    72 00000ACF E6A0                <2>  out %1, al
   186                              <1> 		outp	0xA1, 0x28						; // SLAVE.ICW2  = 0x28;
    71 00000AD1 B028                <2>  mov al, %2
    72 00000AD3 E6A1                <2>  out %1, al
   187                              <1> 		outp	0xA1, 0x02						; // SLAVE.ICW3  = 0x02;
    71 00000AD5 B002                <2>  mov al, %2
    72 00000AD7 E6A1                <2>  out %1, al
   188                              <1> 		outp	0xA1, 0x01						; // SLAVE.ICW4  = 0x01;
    71 00000AD9 B001                <2>  mov al, %2
    72 00000ADB E6A1                <2>  out %1, al
   189                              <1> 		outp	0xA1, 0xFF						; // スレーブ割り込みマスク
    71 00000ADD B0FF                <2>  mov al, %2
    72 00000ADF E6A1                <2>  out %1, al
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 【レジスタの復帰】
   193                              <1> 		;---------------------------------------
   194 00000AE1 58                  <1> 		pop		eax
   195                              <1> 
   196 00000AE2 C3                  <1> 		ret
   197                              <1> 
   158                                  %include	"../modules/protect/int_rtc.s"
   159                              <1> ;************************************************************************
   160                              <1> ;	RTCの割り込み許可設定
   161                              <1> ;========================================================================
   162                              <1> ;■書式		: void rtc_int_en(bit);
   163                              <1> ;
   164                              <1> ;■引数
   165                              <1> ;	bit		: 割り込みを許可するビット
   166                              <1> ;
   167                              <1> ;■戻り値	: 無し
   168                              <1> ;************************************************************************
   169                              <1> rtc_int_en:
   170                              <1> 		;---------------------------------------
   171                              <1> 		; 【スタックフレームの構築】
   172                              <1> 		;---------------------------------------
   173                              <1> 												; ------|--------
   174                              <1> 												;    + 8| ビット
   175                              <1> 												; ------|--------
   176                              <1> 												;    + 4| EIP（戻り番地）
   177 00000AE3 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   178 00000AE4 89E5                <1> 		mov		ebp, esp						; ------+--------
   179                              <1> 
   180                              <1> 		;---------------------------------------
   181                              <1> 		; 【レジスタの保存】
   182                              <1> 		;---------------------------------------
   183 00000AE6 50                  <1> 		push	eax
   184                              <1> 
   185                              <1> 		;---------------------------------------
   186                              <1> 		; 割り込み許可設定
   187                              <1> 		;---------------------------------------
   188                              <1> 		outp	0x70, 0x0B						; outp(0x70, AL);   // レジスタBを選択
    71 00000AE7 B00B                <2>  mov al, %2
    72 00000AE9 E670                <2>  out %1, al
   189                              <1> 
   190 00000AEB E471                <1> 		in		al, 0x71						; AL  = port(0x71); // レジスタBの
   191 00000AED 0A4508              <1> 		or		al, [ebp + 8]					; AL |= ビット;     // 指定されたビットをセット
   192                              <1> 
   193 00000AF0 E671                <1> 		out		0x71, al						; outp(0x71, AL);   // レジスタBに書き込み
   194                              <1> 
   195                              <1> 		;---------------------------------------
   196                              <1> 		; 【レジスタの復帰】
   197                              <1> 		;---------------------------------------
   198 00000AF2 58                  <1> 		pop		eax
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 【スタックフレームの破棄】
   202                              <1> 		;---------------------------------------
   203 00000AF3 89EC                <1> 		mov		esp, ebp
   204 00000AF5 5D                  <1> 		pop		ebp
   205                              <1> 
   206 00000AF6 C3                  <1> 		ret
   207                              <1> 
   208                              <1> 
   209                              <1> ;************************************************************************
   210                              <1> ;	割り込み処理：RTC
   211                              <1> ;************************************************************************
   212                              <1> int_rtc:
   213                              <1> 		;---------------------------------------
   214                              <1> 		; 【レジスタの保存】
   215                              <1> 		;---------------------------------------
   216 00000AF7 60                  <1> 		pusha
   217 00000AF8 1E                  <1> 		push	ds
   218 00000AF9 06                  <1> 		push	es
   219                              <1> 
   220                              <1> 		;---------------------------------------
   221                              <1> 		; データ用セグメントセレクタの設定
   222                              <1> 		;---------------------------------------
   223 00000AFA 66B81000            <1> 		mov		ax, 0x0010						; 
   224 00000AFE 8ED8                <1> 		mov		ds, ax							; 
   225 00000B00 8EC0                <1> 		mov		es, ax							; 
   226                              <1> 
   227                              <1> 		;---------------------------------------
   228                              <1> 		; RTCから時刻を取得
   229                              <1> 		;---------------------------------------
   230 00000B02 68[D4010000]E846FD- <1> 		cdecl	rtc_get_time, RTC_TIME			; EAX = get_time(&RTC_TIME);
   230 00000B0A FFFF6683C404        <1>
   231                              <1> 												; 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; RTCの割り込み要因を取得
   234                              <1> 		;---------------------------------------
   235                              <1> 		outp	0x70, 0x0C						; outp(0x70, 0x0C); // レジスタCを選択
    71 00000B10 B00C                <2>  mov al, %2
    72 00000B12 E670                <2>  out %1, al
   236 00000B14 E471                <1> 		in		al, 0x71						; AL = inp();
   237                              <1> 
   238                              <1> 		;---------------------------------------
   239                              <1> 		; 割り込みフラグをクリア(EOI)
   240                              <1> 		;---------------------------------------
   241                              <1> 		outp	0xA0, 0x20						; outp(0xA0, EOI); // スレーブPIC
    71 00000B16 B020                <2>  mov al, %2
    72 00000B18 E6A0                <2>  out %1, al
   242                              <1> 		outp	0x20, 0x20						; outp(0x20, EOI); // マスタPIC
    71 00000B1A B020                <2>  mov al, %2
    72 00000B1C E620                <2>  out %1, al
   243                              <1> 
   244                              <1> 		;---------------------------------------
   245                              <1> 		; 【レジスタの復帰】
   246                              <1> 		;---------------------------------------
   247 00000B1E 07                  <1> 		pop		es								; 
   248 00000B1F 1F                  <1> 		pop		ds								; 
   249 00000B20 61                  <1> 		popa									; 
   250                              <1> 
   251 00000B21 CF                  <1> 		iret									; 割り込み処理の終了
   252                              <1> 
   159                                  %include	"../modules/protect/int_keyboard.s"
   160                              <1> ;************************************************************************
   161                              <1> ;	割り込み処理：キーボード
   162                              <1> ;------------------------------------------------------------------------
   163                              <1> ;	KBC（キーボードコントローラ）からキーコードを取得して、
   164                              <1> ;	専用のリングバッファに保存する。
   165                              <1> ;************************************************************************
   166                              <1> int_keyboard:
   167                              <1> 		;---------------------------------------
   168                              <1> 		; 【レジスタの保存】
   169                              <1> 		;---------------------------------------
   170 00000B22 60                  <1> 		pusha
   171 00000B23 1E                  <1> 		push	ds
   172 00000B24 06                  <1> 		push	es
   173                              <1> 
   174                              <1> 		;---------------------------------------
   175                              <1> 		; データ用セグメントの設定
   176                              <1> 		;---------------------------------------
   177 00000B25 66B81000            <1> 		mov		ax, 0x0010						; 
   178 00000B29 8ED8                <1> 		mov		ds, ax							; 
   179 00000B2B 8EC0                <1> 		mov		es, ax							; 
   180                              <1> 
   181                              <1> 		;---------------------------------------
   182                              <1> 		; KBCのバッファ読み取り
   183                              <1> 		;---------------------------------------
   184 00000B2D E460                <1> 		in		al, 0x60						; AL = キーコードの取得
   185                              <1> 
   186                              <1> 		;---------------------------------------
   187                              <1> 		; キーコードの保存
   188                              <1> 		;---------------------------------------
   189 00000B2F 5068[480B0000]E856- <1> 		cdecl	ring_wr, _KEY_BUFF, eax			; ring_wr(_KEY_BUFF, EAX); // キーコードの保存
   189 00000B37 0000006683C408      <1>
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 割り込み終了コマンド送信
   193                              <1> 		;---------------------------------------
   194                              <1> 		outp	0x20, 0x20						; outp(); // マスタPIC:EOIコマンド
    71 00000B3E B020                <2>  mov al, %2
    72 00000B40 E620                <2>  out %1, al
   195                              <1> 
   196                              <1> 		;---------------------------------------
   197                              <1> 		; 【レジスタの復帰】
   198                              <1> 		;---------------------------------------
   199 00000B42 07                  <1> 		pop		es								; 
   200 00000B43 1F                  <1> 		pop		ds								; 
   201 00000B44 61                  <1> 		popa
   202                              <1> 
   203 00000B45 CF                  <1> 		iret									; 割り込みからの復帰
   204                              <1> 
   205 00000B46 00<rep 2h>          <1> ALIGN 4, db 0
   206 00000B48 00<rep 18h>         <1> _KEY_BUFF:	times ring_buff_size db 0
   207                              <1> 
   160                                  %include	"../modules/protect/ring_buff.s"
   161                              <1> ;************************************************************************
   162                              <1> ;	リングバッファからデータを取得
   163                              <1> ;========================================================================
   164                              <1> ;■書式		: DWORD ring_rd(buff, data);
   165                              <1> ;
   166                              <1> ;■引数
   167                              <1> ;	buff	: リングバッファ
   168                              <1> ;	data	: 読み込んだデータの保存先アドレス
   169                              <1> ;
   170                              <1> ;■戻り値	: データあり(0以外)、データ無し(0)
   171                              <1> ;************************************************************************
   172                              <1> ring_rd:
   173                              <1> 		;---------------------------------------
   174                              <1> 		; 【スタックフレームの構築】
   175                              <1> 		;---------------------------------------
   176                              <1> 												; ------|--------
   177                              <1> 												;    +12| リングデータ
   178                              <1> 												;    + 8| データアドレス
   179                              <1> 												; ------|--------
   180                              <1> 												;    + 4| EIP（戻り番地）
   181 00000B60 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   182 00000B61 89E5                <1> 		mov		ebp, esp						; ------+--------
   183                              <1> 
   184                              <1> 		;---------------------------------------
   185                              <1> 		; 【レジスタの保存】
   186                              <1> 		;---------------------------------------
   187 00000B63 53                  <1> 		push	ebx
   188 00000B64 56                  <1> 		push	esi
   189 00000B65 57                  <1> 		push	edi
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 引数を取得
   193                              <1> 		;---------------------------------------
   194 00000B66 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   195 00000B69 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = データアドレス;
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; 読み込み位置を確認
   199                              <1> 		;---------------------------------------
   200 00000B6C B800000000          <1> 		mov		eax, 0							; EAX = 0;          // データ無し
   201 00000B71 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;         // 読み込み位置
   202 00000B73 3B5E04              <1> 		cmp		ebx, [esi + ring_buff.wp]		; if (EBX != wp)    // 書き込み位置と異なる
   203 00000B76 7411                <1> 		je		.10E							; {
   204                              <1> 												;   
   205 00000B78 8A441E08            <1> 		mov		al, [esi + ring_buff.item + ebx] ;   AL = BUFF[rp]; // キーコードを保存
   206                              <1> 												;   
   207 00000B7C 8807                <1> 		mov		[edi], al						;   [EDI] = AL;     // データを保存
   208                              <1> 												;   
   209 00000B7E 43                  <1> 		inc		ebx								;   EBX++;          // 次の読み込み位置
   210 00000B7F 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= 0x0F     // サイズの制限
   211 00000B82 891E                <1> 		mov		[esi + ring_buff.rp], ebx		;   rp = EBX;       // 読み込み位置を保存
   212                              <1> 												;   
   213 00000B84 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // データあり
   214                              <1> .10E:											; }
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; 【レジスタの復帰】
   218                              <1> 		;---------------------------------------
   219 00000B89 5F                  <1> 		pop		edi
   220 00000B8A 5E                  <1> 		pop		esi
   221 00000B8B 5B                  <1> 		pop		ebx
   222                              <1> 
   223                              <1> 		;---------------------------------------
   224                              <1> 		; 【スタックフレームの破棄】
   225                              <1> 		;---------------------------------------
   226 00000B8C 89EC                <1> 		mov		esp, ebp
   227 00000B8E 5D                  <1> 		pop		ebp
   228                              <1> 
   229 00000B8F C3                  <1> 		ret
   230                              <1> 
   231                              <1> ;************************************************************************
   232                              <1> ;	リングバッファにデータを格納
   233                              <1> ;========================================================================
   234                              <1> ;■書式		: DWORD ring_wr(buff, data);
   235                              <1> ;
   236                              <1> ;■引数
   237                              <1> ;	buff	: リングバッファ
   238                              <1> ;	data	: 書き込むデータ
   239                              <1> ;
   240                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   241                              <1> ;************************************************************************
   242                              <1> ring_wr:
   243                              <1> 		;---------------------------------------
   244                              <1> 		; 【スタックフレームの構築】
   245                              <1> 		;---------------------------------------
   246                              <1> 												; ------|--------
   247                              <1> 												;    +12| リングデータ
   248                              <1> 												;    + 8| データ
   249                              <1> 												; ------|--------
   250                              <1> 												;    + 4| EIP（戻り番地）
   251 00000B90 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   252 00000B91 89E5                <1> 		mov		ebp, esp						; ------+--------
   253                              <1> 
   254                              <1> 		;---------------------------------------
   255                              <1> 		; 【レジスタの保存】
   256                              <1> 		;---------------------------------------
   257 00000B93 53                  <1> 		push	ebx
   258 00000B94 51                  <1> 		push	ecx
   259 00000B95 56                  <1> 		push	esi
   260                              <1> 
   261                              <1> 		;---------------------------------------
   262                              <1> 		; 引数を取得
   263                              <1> 		;---------------------------------------
   264 00000B96 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   265                              <1> 
   266                              <1> 		;---------------------------------------
   267                              <1> 		; 書き込み位置を確認
   268                              <1> 		;---------------------------------------
   269 00000B99 B800000000          <1> 		mov		eax, 0							; EAX  = 0;         // 失敗
   270 00000B9E 8B5E04              <1> 		mov		ebx, [esi + ring_buff.wp]		; EBX  = wp;        // 書き込み位置
   271 00000BA1 89D9                <1> 		mov		ecx, ebx						; ECX  = EBX;
   272 00000BA3 41                  <1> 		inc		ecx								; ECX++;            // 次の書き込み位置
   273 00000BA4 83E10F              <1> 		and		ecx, RING_INDEX_MASK			; ECX &= 0x0F       // サイズの制限
   274                              <1> 												; 
   275 00000BA7 3B0E                <1> 		cmp		ecx, [esi + ring_buff.rp]		; if (ECX != rp)    // 読み込み位置と異なる
   276 00000BA9 740F                <1> 		je		.10E							; {
   277                              <1> 												; 
   278 00000BAB 8A450C              <1> 		mov		al, [ebp +12]					;   AL = データ;
   279                              <1> 												; 
   280 00000BAE 88441E08            <1> 		mov		[esi + ring_buff.item + ebx], al ;   BUFF[wp] = AL; // キーコードを保存
   281 00000BB2 894E04              <1> 		mov		[esi + ring_buff.wp], ecx		;   wp = ECX;       // 書き込み位置を保存
   282 00000BB5 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // 成功
   283                              <1> .10E:											; }
   284                              <1> 
   285                              <1> 		;---------------------------------------
   286                              <1> 		; 【レジスタの復帰】
   287                              <1> 		;---------------------------------------
   288 00000BBA 5E                  <1> 		pop		esi
   289 00000BBB 59                  <1> 		pop		ecx
   290 00000BBC 5B                  <1> 		pop		ebx
   291                              <1> 
   292                              <1> 		;---------------------------------------
   293                              <1> 		; 【スタックフレームの破棄】
   294                              <1> 		;---------------------------------------
   295 00000BBD 89EC                <1> 		mov		esp, ebp
   296 00000BBF 5D                  <1> 		pop		ebp
   297                              <1> 
   298 00000BC0 C3                  <1> 		ret
   299                              <1> 
   300                              <1> ;************************************************************************
   301                              <1> ;	リングバッファ内要素の表示
   302                              <1> ;========================================================================
   303                              <1> ;■書式		: void ring_show(col, row, buff);
   304                              <1> ;
   305                              <1> ;■引数
   306                              <1> ;	col		: 列
   307                              <1> ;	row		: 行
   308                              <1> ;	buff	: リングバッファ
   309                              <1> ;
   310                              <1> ;■戻り値	: 無し
   311                              <1> ;************************************************************************
   312                              <1> draw_key:
   313                              <1> 		;---------------------------------------
   314                              <1> 		; 【スタックフレームの構築】
   315                              <1> 		;---------------------------------------
   316                              <1> 												; ------|--------
   317                              <1> 												; EBP+16| リングバッファ
   318                              <1> 												; EBP+12| Y（行）
   319                              <1> 												; EBP+ 8| X（列）
   320                              <1> 												; ------|--------
   321 00000BC1 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   322 00000BC2 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   323                              <1> 												; ------|--------
   324                              <1> 
   325                              <1> 		;---------------------------------------
   326                              <1> 		; 【レジスタの保存】
   327                              <1> 		;---------------------------------------
   328 00000BC4 60                  <1> 		pusha
   329                              <1> 
   330                              <1> 		;---------------------------------------
   331                              <1> 		; 引数を取得
   332                              <1> 		;---------------------------------------
   333 00000BC5 8B5508              <1> 		mov		edx, [ebp + 8]					; EDX = X（列）;
   334 00000BC8 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）;
   335 00000BCB 8B7510              <1> 		mov		esi, [ebp +16]					; ESI = リングバッファ;
   336                              <1> 
   337                              <1> 		;---------------------------------------
   338                              <1> 		; リングバッファの情報を取得
   339                              <1> 		;---------------------------------------
   340 00000BCE 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;             // 読み込み位置
   341 00000BD0 8D7608              <1> 		lea		esi, [esi + ring_buff.item]		; ESI = &KEY_BUFF[EBX];
   342 00000BD3 B910000000          <1> 		mov		ecx, RING_ITEM_SIZE				; ECX = RING_ITEM_SIZE; // 要素数
   343                              <1> 
   344                              <1> 		;---------------------------------------
   345                              <1> 		; 文字に変換しながら表示
   346                              <1> 		;---------------------------------------
   347                              <1> .10L:											; do
   348                              <1> 												; {
   349 00000BD8 4B                  <1> 		dec		ebx								;   EBX--; // 読み込み位置
   350 00000BD9 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= RING_INDEX_MASK;
   351 00000BDC 8A041E              <1> 		mov		al, [esi + ebx]					;   EAX  = KEY_BUFF[EBX];
   352                              <1> 												;   
   353 00000BDF 6A046A106A0268-     <1> 		cdecl	itoa, eax, .tmp, 2, 16, 0b0100	;   // キーコードを文字列に変換
   353 00000BE6 [100C0000]50E8D9FB- <1>
   353 00000BEE FFFF6683C414        <1>
   354 00000BF4 68[100C0000]6A0257- <1> 		cdecl	draw_str, edx, edi, 0x02, .tmp	;   // 変換した文字列を表示
   354 00000BFC 52E837F9FFFF6683C4- <1>
   354 00000C05 10                  <1>
   355                              <1> 												;   
   356 00000C06 83C203              <1> 		add		edx, 3							;   // 表示位置を更新（3文字分）
   357                              <1> 												;   
   358 00000C09 E2CD                <1> 		loop	.10L							;   
   359                              <1> .10E:											; } while (ECX--);
   360                              <1> 
   361                              <1> 		;---------------------------------------
   362                              <1> 		; 【レジスタの復帰】
   363                              <1> 		;---------------------------------------
   364 00000C0B 61                  <1> 		popa
   365                              <1> 
   366                              <1> 		;---------------------------------------
   367                              <1> 		; 【スタックフレームの破棄】
   368                              <1> 		;---------------------------------------
   369 00000C0C 89EC                <1> 		mov		esp, ebp
   370 00000C0E 5D                  <1> 		pop		ebp
   371                              <1> 
   372 00000C0F C3                  <1> 		ret
   373                              <1> 
   374 00000C10 2D2D2000            <1> .tmp	db "-- ", 0
   161                                  %include	"../modules/protect/timer.s"
   162                              <1> ;************************************************************************
   163                              <1> ;	タイマーの設定
   164                              <1> ;------------------------------------------------------------------------
   165                              <1> ;	タイマー（カウンタ0）割り込み許可
   166                              <1> ;========================================================================
   167                              <1> ;■書式		: void int_en_timer0(void);
   168                              <1> ;
   169                              <1> ;■引数		: 無し
   170                              <1> ;
   171                              <1> ;■戻り値	: 無し
   172                              <1> ;************************************************************************
   173                              <1> int_en_timer0:
   174                              <1> 		;---------------------------------------
   175                              <1> 		; 【レジスタの保存】
   176                              <1> 		;---------------------------------------
   177 00000C14 50                  <1> 		push	eax
   178                              <1> 
   179                              <1> 		;---------------------------------------
   180                              <1> 		;	8254 Timer
   181                              <1> 		;	0x2e9c(11932)=10[ms] @ CLK=1,193,182[Hz]
   182                              <1> 		;---------------------------------------
   183                              <1> 		 outp	 0x43, 0b_00_11_010_0			; // カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    71 00000C15 B034                <2>  mov al, %2
    72 00000C17 E643                <2>  out %1, al
   184                              <1> 		 outp	 0x40, 0x9C						; // 下位バイト
    71 00000C19 B09C                <2>  mov al, %2
    72 00000C1B E640                <2>  out %1, al
   185                              <1> 		 outp	 0x40, 0x2E						; // 上位バイト
    71 00000C1D B02E                <2>  mov al, %2
    72 00000C1F E640                <2>  out %1, al
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 【レジスタの復帰】
   189                              <1> 		;---------------------------------------
   190 00000C21 58                  <1> 		pop		eax
   191                              <1> 
   192 00000C22 C3                  <1> 		ret
   193                              <1> 
   162                                  %include	"../modules/protect/draw_rotation_bar.s"
   163                              <1> ;************************************************************************
   164                              <1> ;	画面左下に、回転する棒を表示
   165                              <1> ;========================================================================
   166                              <1> ;■書式		: void draw_rotation_bar(void);
   167                              <1> ;
   168                              <1> ;■引数		: 無し
   169                              <1> ;
   170                              <1> ;■戻り値	: 無し
   171                              <1> ;************************************************************************
   172                              <1> draw_rotation_bar:
   173                              <1> 		;---------------------------------------
   174                              <1> 		; 【レジスタの保存】
   175                              <1> 		;---------------------------------------
   176 00000C23 50                  <1> 		push	eax
   177                              <1> 
   178                              <1> 		;---------------------------------------
   179                              <1> 		; タイマー割り込みカウンタを確認
   180                              <1> 		;---------------------------------------
   181 00000C24 A1[44030000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX  = タイマー割り込みカウンタ
   182 00000C29 C1E804              <1> 		shr		eax, 4							; EAX /= 4;    // 16で除算
   183 00000C2C 3B05[540C0000]      <1> 		cmp		eax, [.index]					; if (EAX != 前回値)
   184 00000C32 741E                <1> 		je		.10E							; {
   185                              <1> 												;   
   186 00000C34 A3[540C0000]        <1> 		mov		[.index], eax					;   前回値 = EAX;
   187 00000C39 83E003              <1> 		and		eax, 0x03						;   EAX &= 0x03; // 0～3に限定
   188                              <1> 												;   
   189 00000C3C 8A80[580C0000]      <1> 		mov		al, [.table + eax]				;   AL = table[index];
   190 00000C42 506A0F6A1D6A00E8E2- <1> 		cdecl	draw_char, 0, 29, 0x000F, eax	;   draw_char(); // 文字を表示
   190 00000C4B F7FFFF6683C410      <1>
   191                              <1> 												;   
   192                              <1> .10E:											; }
   193                              <1> 
   194                              <1> 		;---------------------------------------
   195                              <1> 		; 【レジスタの復帰】
   196                              <1> 		;---------------------------------------
   197 00000C52 58                  <1> 		pop		eax
   198                              <1> 
   199 00000C53 C3                  <1> 		ret
   200                              <1> 
   201                              <1> ALIGN 4, db 0
   202 00000C54 00000000            <1> .index:		dd 0								; 前回値
   203 00000C58 7C2F2D5C            <1> .table:		db	"|/-\"							; 表示キャラクタ
   204                              <1> 
   163                                  %include	"../modules/protect/call_gate.s"
   164                              <1> ;************************************************************************
   165                              <1> ;	コールゲート関数
   166                              <1> ;************************************************************************
   167                              <1> call_gate:
   168                              <1> 		;---------------------------------------
   169                              <1> 		; 【スタックフレームの構築】
   170                              <1> 		;---------------------------------------
   171                              <1> 												; ------|--------
   172                              <1> 												; EBP+12| X（列）
   173                              <1> 												; EBP+16| Y（行）
   174                              <1> 												; EBP+20| 色
   175                              <1> 												; EBP+24| 文字
   176                              <1> 												; ---------------
   177                              <1> 												; EBP+ 8| CS（コードセグメント）
   178 00000C5C 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   179 00000C5D 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   180                              <1> 												; ---------------
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 【レジスタの保存】
   183                              <1> 		;---------------------------------------
   184 00000C5F 60                  <1> 		pusha
   185 00000C60 1E                  <1> 		push	ds
   186 00000C61 06                  <1> 		push	es
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; データ用セグメントの設定
   190                              <1> 		;---------------------------------------
   191 00000C62 66B81000            <1> 		mov		ax, 0x0010						; 
   192 00000C66 8ED8                <1> 		mov		ds, ax							; 
   193 00000C68 8EC0                <1> 		mov		es, ax							; 
   194                              <1> 
   195                              <1> 		;---------------------------------------
   196                              <1> 		; 文字を表示
   197                              <1> 		;---------------------------------------
   198 00000C6A 8B450C              <1> 		mov		eax, dword [ebp +12]			; EAX = X（列）;
   199 00000C6D 8B5D10              <1> 		mov		ebx, dword [ebp +16]			; EBX = Y（行）;
   200 00000C70 8B4D14              <1> 		mov		ecx, dword [ebp +20]			; ECX = 色;
   201 00000C73 8B5518              <1> 		mov		edx, dword [ebp +24]			; EDX = 文字;
   202 00000C76 52515350E8BAF8FFFF- <1> 		cdecl	draw_str, eax, ebx , ecx, edx	; draw_str();
   202 00000C7F 6683C410            <1>
   203                              <1> 
   204                              <1> 		;---------------------------------------
   205                              <1> 		; 【レジスタの復帰】
   206                              <1> 		;---------------------------------------
   207 00000C83 07                  <1> 		pop		es								; 
   208 00000C84 1F                  <1> 		pop		ds								; 
   209 00000C85 61                  <1> 		popa									; 
   210                              <1> 
   211                              <1> 		;---------------------------------------
   212                              <1> 		; 【スタックフレームの破棄】
   213                              <1> 		;---------------------------------------
   214 00000C86 89EC                <1> 		mov		esp, ebp
   215 00000C88 5D                  <1> 		pop		ebp
   216                              <1> 
   217 00000C89 CA1000              <1> 		retf	4 * 4
   218                              <1> 
   164                                  %include	"../modules/protect/trap_gate.s"
   165                              <1> ;************************************************************************
   166                              <1> ;	システムコール：1文字出力
   167                              <1> ;************************************************************************
   168                              <1> trap_gate_81:
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 1文字出力
   171                              <1> 		;---------------------------------------
   172 00000C8C 50535251E89BF7FFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	; // 1文字出力
   172 00000C95 6683C410            <1>
   173                              <1> 
   174 00000C99 CF                  <1> 		iret
   175                              <1> 
   176                              <1> ;************************************************************************
   177                              <1> ;	システムコール：点の描画
   178                              <1> ;************************************************************************
   179                              <1> trap_gate_82:
   180                              <1> 		;---------------------------------------
   181                              <1> 		; 点の描画
   182                              <1> 		;---------------------------------------
   183 00000C9A 535251E84FF9FFFF66- <1> 		cdecl	draw_pixel, ecx, edx, ebx		; // 点の描画
   183 00000CA3 83C40C              <1>
   184                              <1> 
   185 00000CA6 CF                  <1> 		iret
   186                              <1> 
   165                                  
   166                                  ;************************************************************************
   167                                  ;	パディング
   168                                  ;************************************************************************
   169 00000CA7 00<rep 1359h>           		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
   170                                  
