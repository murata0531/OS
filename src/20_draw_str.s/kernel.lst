     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  ;************************************************************************
     8                                  ;	マクロ
     9                                  ;************************************************************************
    10                                  %include	"../include/define.s"
    11                              <1> ;************************************************************************
    12                              <1> ;	メモリイメージ
    13                              <1> ;************************************************************************
    14                              <1> 
    15                              <1> 		;---------------------------------------
    16                              <1> 		;           |            | 
    17                              <1> 		;           |____________| 
    18                              <1> 		; 0000_7A00 |            | ( 512) スタック
    19                              <1> 		;           |____________| 
    20                              <1> 		; 0000_7C00 |            | (  8K) ブート
    21                              <1> 		;           =            = 
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    24                              <1> 		;           =            = 
    25                              <1> 		;           |____________| 
    26                              <1> 		; 0000_BC00 |////////////| 
    27                              <1> 		;           =            = 
    28                              <1> 		;           |____________| 
    29                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    32                              <1> 		;           |____________| 
    33                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    34                              <1> 		;           |            | 
    35                              <1> 		;           =            = 
    36                              <1> 		;           |____________| 
    37                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    38                              <1> 		;           |            | （各タスク1K）
    39                              <1> 		;           =            = 
    40                              <1> 		;           |____________| 
    41                              <1> 		; 0010_5000 |            | Dir
    42                              <1> 		;      6000 |____________| Page
    43                              <1> 		; 0010_7000 |            | Dir
    44                              <1> 		;      8000 |____________| Page
    45                              <1> 		; 0010_9000 |////////////| 
    46                              <1> 		;           |            | 
    47                              <1> 
    48                              <1> 
    49                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    50                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    51                              <1> 
    52                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    53                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    54                              <1> 
    55                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    56                              <1> 
    57                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    58                              <1> 
    59                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    60                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    61                              <1> 
    62                              <1> 		E820_RECORD_SIZE	equ		20
    63                              <1> 
    64                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    11                                  %include	"../include/macro.s"
    12                              <1> ;************************************************************************
    13                              <1> ; 関数呼び出し用マクロ
    14                              <1> ;
    15                              <1> ; 使い方：
    16                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    17                              <1> ;
    18                              <1> ;************************************************************************
    19                              <1> 
    20                              <1> %macro cdecl 1-*.nolist
    21                              <1> 
    22                              <1>     %rep %0 - 1
    23                              <1>         push    %{-1:-1}
    24                              <1>         %rotate -1
    25                              <1>     %endrep
    26                              <1>     %rotate -1
    27                              <1> 
    28                              <1>         call    %1
    29                              <1> 
    30                              <1>     %if 1 < %0
    31                              <1>         add     sp,(__BITS__ >> 3) * (%0 - 1)
    32                              <1>     %endif
    33                              <1> 
    34                              <1> %endmacro
    35                              <1> 
    36                              <1> ;************************************************************************
    37                              <1> ;	構造体
    38                              <1> ;************************************************************************
    39                              <1> 
    40                              <1> ;-----------------------------------------------
    41                              <1> ;	ドライブパラメータ
    42                              <1> ;-----------------------------------------------
    43                              <1> struc drive
    44 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
    45 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
    46 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
    47 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
    48                              <1> endstruc
    12                                  
    13                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    14                                  
    15                                  [BITS 32]
    16                                  ;************************************************************************
    17                                  ;	エントリポイント
    18                                  ;************************************************************************
    19                                  kernel:
    20                                  		;---------------------------------------
    21                                  		; フォントアドレスを取得
    22                                  		;---------------------------------------
    23 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    24 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    25 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    26 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    27 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    28 00000011 A3[50000000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    29                                  
    30                                  		;---------------------------------------
    31                                  		; フォントの一覧表示
    32                                  		;---------------------------------------
    33 00000016 6A0D6A3FE8AC010000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
    33 0000001F 6683C408           
    34                                  
    35                                  		;---------------------------------------
    36                                  		; 文字列の表示
    37                                  		;---------------------------------------
    38 00000023 68[3C000000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
    38 0000002B 00006A0E6A19E8DA01-
    38 00000034 00006683C410       
    39                                  
    40                                  		;---------------------------------------
    41                                  		; 処理の終了
    42                                  		;---------------------------------------
    43 0000003A EBFE                    		jmp		$								; while (1) ; // 無限ループ
    44                                  
    45 0000003C 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
    45 00000045 65726E656C212000   
    46                                  
    47 0000004D 00<rep 3h>              ALIGN 4, db 0
    48 00000050 00000000                FONT_ADR:	dd	0
    49                                  
    50                                  ;************************************************************************
    51                                  ;	モジュール
    52                                  ;************************************************************************
    53                                  %include	"../modules/protect/vga.s"
    54                              <1> ;************************************************************************
    55                              <1> ;	読み込みプレーンの選択
    56                              <1> ;========================================================================
    57                              <1> ;■書式		: void vga_set_read_plane(plane);
    58                              <1> ;
    59                              <1> ;■引数
    60                              <1> ;	plane	: 読み込みプレーン
    61                              <1> ;
    62                              <1> ;■戻り値	: 無し
    63                              <1> ;************************************************************************
    64                              <1> vga_set_read_plane:
    65                              <1> 		;---------------------------------------
    66                              <1> 		; 【スタックフレームの構築】
    67                              <1> 		;---------------------------------------
    68                              <1> 												; EBP+ 8| プレーン（インデックス）
    69                              <1> 												; ------+----------------
    70 00000054 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    71 00000055 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    72                              <1> 												; ------+----------------
    73                              <1> 
    74                              <1> 		;---------------------------------------
    75                              <1> 		; 【レジスタの保存】
    76                              <1> 		;---------------------------------------
    77 00000057 50                  <1> 		push	eax
    78 00000058 52                  <1> 		push	edx
    79                              <1> 
    80                              <1> 		;---------------------------------------
    81                              <1> 		; 読み込みプレーンの選択
    82                              <1> 		;---------------------------------------
    83 00000059 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
    84 0000005C 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
    85 0000005F B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
    86 00000061 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
    87 00000065 66EF                <1> 		out		dx, ax							; // ポート出力
    88                              <1> 
    89                              <1> 		;---------------------------------------
    90                              <1> 		; 【レジスタの復帰】
    91                              <1> 		;---------------------------------------
    92 00000067 5A                  <1> 		pop		edx
    93 00000068 58                  <1> 		pop		eax
    94                              <1> 
    95                              <1> 		;---------------------------------------
    96                              <1> 		; 【スタックフレームの破棄】
    97                              <1> 		;---------------------------------------
    98 00000069 89EC                <1> 		mov		esp, ebp
    99 0000006B 5D                  <1> 		pop		ebp
   100                              <1> 
   101 0000006C C3                  <1> 		ret
   102                              <1> 
   103                              <1> 
   104                              <1> ;************************************************************************
   105                              <1> ;	書き込みプレーンを選択
   106                              <1> ;========================================================================
   107                              <1> ;■書式		: void vga_set_write_plane(plane);
   108                              <1> ;
   109                              <1> ;■引数
   110                              <1> ;	plane	: 書き込みプレーン
   111                              <1> ;
   112                              <1> ;■戻り値	: 無し
   113                              <1> ;************************************************************************
   114                              <1> vga_set_write_plane:
   115                              <1> 		;---------------------------------------
   116                              <1> 		; 【スタックフレームの構築】
   117                              <1> 		;---------------------------------------
   118                              <1> 												; EBP+ 8| プレーン（ビット指定）
   119                              <1> 												; ------+----------------
   120 0000006D 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   121 0000006E 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   122                              <1> 												; ------+----------------
   123                              <1> 
   124                              <1> 		;---------------------------------------
   125                              <1> 		; 【レジスタの保存】
   126                              <1> 		;---------------------------------------
   127 00000070 50                  <1> 		push	eax
   128 00000071 52                  <1> 		push	edx
   129                              <1> 
   130                              <1> 		;---------------------------------------
   131                              <1> 		; 書き込みプレーンの選択
   132                              <1> 		;---------------------------------------
   133 00000072 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
   134 00000075 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
   135 00000078 B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
   136 0000007A 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
   137 0000007E 66EF                <1> 		out		dx, ax							; // ポート出力
   138                              <1> 
   139                              <1> 		;---------------------------------------
   140                              <1> 		; 【レジスタの復帰】
   141                              <1> 		;---------------------------------------
   142 00000080 5A                  <1> 		pop		edx
   143 00000081 58                  <1> 		pop		eax
   144                              <1> 
   145                              <1> 		;---------------------------------------
   146                              <1> 		; 【スタックフレームの破棄】
   147                              <1> 		;---------------------------------------
   148 00000082 89EC                <1> 		mov		esp, ebp
   149 00000084 5D                  <1> 		pop		ebp
   150                              <1> 
   151 00000085 C3                  <1> 		ret
   152                              <1> 
   153                              <1> 
   154                              <1> ;************************************************************************
   155                              <1> ;	フォントの書き込み
   156                              <1> ;========================================================================
   157                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   158                              <1> ;
   159                              <1> ;■引数
   160                              <1> ;	font	: FONTアドレス
   161                              <1> ;	vram	: VRAMアドレス
   162                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   163                              <1> ;	color	: 描画色
   164                              <1> ;
   165                              <1> ;■戻り値	: 無し
   166                              <1> ;************************************************************************
   167                              <1> vram_font_copy:
   168                              <1> 		;---------------------------------------
   169                              <1> 		; 【スタックフレームの構築】
   170                              <1> 		;---------------------------------------
   171                              <1> 												; EBP+20| 色（背景/前景色）
   172                              <1> 												; EBP+16| プレーン（ビット指定）
   173                              <1> 												; EBP+12| VRAMアドレス
   174                              <1> 												; EBP+ 8| FONTアドレス
   175                              <1> 												; ------+----------------
   176 00000086 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   177 00000087 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   178                              <1> 												; ------+----------------
   179                              <1> 
   180                              <1> 		;---------------------------------------
   181                              <1> 		; 【レジスタの保存】
   182                              <1> 		;---------------------------------------
   183 00000089 50                  <1> 		push	eax
   184 0000008A 53                  <1> 		push	ebx
   185 0000008B 51                  <1> 		push	ecx
   186 0000008C 52                  <1> 		push	edx
   187 0000008D 56                  <1> 		push	esi
   188 0000008E 57                  <1> 		push	edi
   189                              <1> 
   190                              <1> 		;---------------------------------------
   191                              <1> 		; 【処理の開始】
   192                              <1> 		;---------------------------------------
   193 0000008F 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   194 00000092 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   195 00000095 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   196 00000099 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   197                              <1> 
   198 0000009D 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   199 0000009F 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   200 000000A2 FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   201                              <1> 
   202 000000A4 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   203 000000A6 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   204 000000A9 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; 16ドットフォントのコピー
   208                              <1> 		;---------------------------------------
   209 000000AB FC                  <1> 		cld										; DF  = 0; // アドレス加算
   210                              <1> 
   211 000000AC B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   212                              <1> .10L:											; do
   213                              <1> 												; {
   214                              <1> 		;---------------------------------------
   215                              <1> 		; フォントマスクの作成
   216                              <1> 		;---------------------------------------
   217 000000B1 AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   218 000000B2 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   219 000000B4 F6D4                <1> 		not		ah								;   
   220                              <1> 
   221                              <1> 		;---------------------------------------
   222                              <1> 		; 前景色
   223                              <1> 		;---------------------------------------
   224 000000B6 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   225                              <1> 
   226                              <1> 		;---------------------------------------
   227                              <1> 		; 背景色
   228                              <1> 		;---------------------------------------
   229 000000B8 F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   230 000000BE 7404                <1> 		jz		.11F							;   {
   231 000000C0 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   232 000000C2 EB02                <1> 		jmp		.11E							;   }
   233                              <1> .11F:											;   else
   234                              <1> 												;   {
   235 000000C4 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   236                              <1> .11E:											;   }
   237                              <1> 
   238                              <1> 		;---------------------------------------
   239                              <1> 		; 前景色と背景色を合成
   240                              <1> 		;---------------------------------------
   241 000000C6 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   242                              <1> 
   243                              <1> 		;---------------------------------------
   244                              <1> 		; 新しい値を出力
   245                              <1> 		;---------------------------------------
   246 000000C8 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   247                              <1> 
   248 000000CA 83C750              <1> 		add		edi, 80							;   EDI += 80;
   249 000000CD E2E2                <1> 		loop	.10L							; } while (--ECX);
   250                              <1> .10E:											; 
   251                              <1> 
   252                              <1> 		;---------------------------------------
   253                              <1> 		; 【レジスタの復帰】
   254                              <1> 		;---------------------------------------
   255 000000CF 5F                  <1> 		pop		edi
   256 000000D0 5E                  <1> 		pop		esi
   257 000000D1 5A                  <1> 		pop		edx
   258 000000D2 59                  <1> 		pop		ecx
   259 000000D3 5B                  <1> 		pop		ebx
   260 000000D4 58                  <1> 		pop		eax
   261                              <1> 
   262                              <1> 		;---------------------------------------
   263                              <1> 		; 【スタックフレームの破棄】
   264                              <1> 		;---------------------------------------
   265 000000D5 89EC                <1> 		mov		esp, ebp
   266 000000D7 5D                  <1> 		pop		ebp
   267                              <1> 
   268 000000D8 C3                  <1> 		ret
   269                              <1> 
   270                              <1> 
   271                              <1> ;************************************************************************
   272                              <1> ;	ビットパターンの書き込み
   273                              <1> ;========================================================================
   274                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   275                              <1> ;
   276                              <1> ;■引数
   277                              <1> ;	bit		: 出力ビットパターン
   278                              <1> ;	vram	: VRAMアドレス
   279                              <1> ;	flag	: 1:セット, 0:クリア
   280                              <1> ;
   281                              <1> ;■戻り値	: 無し
   282                              <1> ;************************************************************************
   283                              <1> vram_bit_copy:
   284                              <1> 		;---------------------------------------
   285                              <1> 		; 【スタックフレームの構築】
   286                              <1> 		;---------------------------------------
   287                              <1> 												; EBP+20| 色（背景/前景色）
   288                              <1> 												; EBP+16| プレーン（ビット指定）
   289                              <1> 												; EBP+12| VRAMアドレス
   290                              <1> 												; EBP+ 8| 出力ビットパターン
   291                              <1> 												; ------+----------------
   292 000000D9 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   293 000000DA 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   294                              <1> 												; ------+----------------
   295                              <1> 
   296                              <1> 		;---------------------------------------
   297                              <1> 		; 【レジスタの保存】
   298                              <1> 		;---------------------------------------
   299 000000DC 50                  <1> 		push	eax
   300 000000DD 53                  <1> 		push	ebx
   301 000000DE 57                  <1> 		push	edi
   302                              <1> 
   303                              <1> 		;---------------------------------------
   304                              <1> 		; 【処理の開始】
   305                              <1> 		;---------------------------------------
   306 000000DF 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   307 000000E2 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   308 000000E6 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   309                              <1> 
   310 000000EA 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   311 000000EC 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   312 000000EF FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   313                              <1> 
   314                              <1> 		;---------------------------------------
   315                              <1> 		; マスクデータの作成
   316                              <1> 		;---------------------------------------
   317 000000F1 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   318 000000F4 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   319 000000F6 F6D4                <1> 		not		ah								; 
   320                              <1> 
   321                              <1> 		;---------------------------------------
   322                              <1> 		; 現在値の出力を取得
   323                              <1> 		;---------------------------------------
   324 000000F8 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   325 000000FA 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   326 000000FC 08E0                <1> 		or		al, ah							; AL |= AH;
   327                              <1> 
   328                              <1> 		;---------------------------------------
   329                              <1> 		; 新しい値を出力
   330                              <1> 		;---------------------------------------
   331 000000FE 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   332                              <1> 
   333                              <1> 		;---------------------------------------
   334                              <1> 		; 【レジスタの復帰】
   335                              <1> 		;---------------------------------------
   336 00000100 5F                  <1> 		pop		edi
   337 00000101 5B                  <1> 		pop		ebx
   338 00000102 58                  <1> 		pop		eax
   339                              <1> 
   340                              <1> 		;---------------------------------------
   341                              <1> 		; 【スタックフレームの破棄】
   342                              <1> 		;---------------------------------------
   343 00000103 89EC                <1> 		mov		esp, ebp
   344 00000105 5D                  <1> 		pop		ebp
   345                              <1> 
   346 00000106 C3                  <1> 		ret
    54                                  %include	"../modules/protect/draw_char.s"
    55                              <1> ;************************************************************************
    56                              <1> ;	文字の表示
    57                              <1> ;------------------------------------------------------------------------
    58                              <1> ;	グラフィックスモードでテキストを表示
    59                              <1> ;========================================================================
    60                              <1> ;■書式		: void draw_char(col, row, color, ch);
    61                              <1> ;
    62                              <1> ;■引数
    63                              <1> ;	col		: 列（0～79）
    64                              <1> ;	row		: 行（0～29）
    65                              <1> ;	color	: 描画色
    66                              <1> ;	ch		: 文字
    67                              <1> ;
    68                              <1> ;■戻り値	: 無し
    69                              <1> ;************************************************************************
    70                              <1> draw_char:
    71                              <1> 		;---------------------------------------
    72                              <1> 		; 【スタックフレームの構築】
    73                              <1> 		;---------------------------------------
    74                              <1> 												; ------|--------
    75                              <1> 												; EBP+20| 文字
    76                              <1> 												; EBP+16| 色
    77                              <1> 												; EBP+12| Y（行）
    78                              <1> 												; EBP+ 8| X（列）
    79                              <1> 												; ------+----------------
    80 00000107 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    81 00000108 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    82                              <1> 												; ------+----------------
    83                              <1> 
    84                              <1> 		;---------------------------------------
    85                              <1> 		; 【レジスタの保存】
    86                              <1> 		;---------------------------------------
    87 0000010A 50                  <1> 		push	eax
    88 0000010B 53                  <1> 		push	ebx
    89 0000010C 51                  <1> 		push	ecx
    90 0000010D 52                  <1> 		push	edx
    91 0000010E 56                  <1> 		push	esi
    92 0000010F 57                  <1> 		push	edi
    93                              <1> 
    94                              <1> 		;---------------------------------------
    95                              <1> 		; テストアンドセット
    96                              <1> 		;---------------------------------------
    97                              <1> %ifdef	USE_TEST_AND_SET
    98                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
    99                              <1> %endif
   100                              <1> 
   101                              <1> 		;---------------------------------------
   102                              <1> 		; コピー元フォントアドレスを設定
   103                              <1> 		;---------------------------------------
   104 00000110 0FB67514            <1> 		movzx	esi, byte [ebp +20]				; CL  = 文字コード;
   105 00000114 C1E604              <1> 		shl		esi, 4							; CL *= 16; // 1文字16バイト
   106 00000117 0335[50000000]      <1> 		add		esi, [FONT_ADR]					; ESI = フォントアドレス;
   107                              <1> 
   108                              <1> 		;---------------------------------------
   109                              <1> 		; コピー先アドレスを取得
   110                              <1> 		; Adr = 0xA0000 + (640 / 8 * 16) * y + x
   111                              <1> 		;---------------------------------------
   112 0000011D 8B7D0C              <1> 		mov		edi, [ebp +12]					; Y（行）
   113 00000120 C1E708              <1> 		shl		edi, 8							; EDI = Y * 256;
   114 00000123 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA0000]	; EDI = Y *   4 + Y;
   115 0000012A 037D08              <1> 		add		edi, [ebp + 8]					; X（列）
   116                              <1> 
   117                              <1> 		;---------------------------------------
   118                              <1> 		; 1文字分のフォントを出力
   119                              <1> 		;---------------------------------------
   120 0000012D 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
   121                              <1> 
   122 00000131 6A03E81CFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
   122 0000013A C404                <1>
   123 0000013C 6A08E82AFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
   123 00000145 C404                <1>
   124 00000147 536A085756E835FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
   124 00000150 FF6683C410          <1>
   125                              <1> 
   126 00000155 6A02E8F8FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
   126 0000015E C404                <1>
   127 00000160 6A04E806FFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
   127 00000169 C404                <1>
   128 0000016B 536A045756E811FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
   128 00000174 FF6683C410          <1>
   129                              <1> 
   130 00000179 6A01E8D4FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
   130 00000182 C404                <1>
   131 00000184 6A02E8E2FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
   131 0000018D C404                <1>
   132 0000018F 536A025756E8EDFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
   132 00000198 FF6683C410          <1>
   133                              <1> 
   134 0000019D 6A00E8B0FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
   134 000001A6 C404                <1>
   135 000001A8 6A01E8BEFEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
   135 000001B1 C404                <1>
   136 000001B3 536A015756E8C9FEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
   136 000001BC FF6683C410          <1>
   137                              <1> 
   138                              <1> %ifdef	USE_TEST_AND_SET
   139                              <1> 		;---------------------------------------
   140                              <1> 		; テストアンドセット
   141                              <1> 		;---------------------------------------
   142                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   143                              <1> %endif
   144                              <1> 
   145                              <1> 		;---------------------------------------
   146                              <1> 		; 【レジスタの復帰】
   147                              <1> 		;---------------------------------------
   148 000001C1 5F                  <1> 		pop		edi
   149 000001C2 5E                  <1> 		pop		esi
   150 000001C3 5A                  <1> 		pop		edx
   151 000001C4 59                  <1> 		pop		ecx
   152 000001C5 5B                  <1> 		pop		ebx
   153 000001C6 58                  <1> 		pop		eax
   154                              <1> 
   155                              <1> 		;---------------------------------------
   156                              <1> 		; 【スタックフレームの破棄】
   157                              <1> 		;---------------------------------------
   158 000001C7 89EC                <1> 		mov		esp, ebp
   159 000001C9 5D                  <1> 		pop		ebp
   160                              <1> 
   161 000001CA C3                  <1> 		ret
   162                              <1> 
   163                              <1> %ifdef USE_TEST_AND_SET
   164                              <1> ALIGN 4, db 0
   165                              <1> IN_USE:	dd	0
   166                              <1> %endif
   167                              <1> 
    55                                  %include	"../modules/protect/draw_font.s"
    56                              <1> ;************************************************************************
    57                              <1> ;	フォント一覧を表示
    58                              <1> ;========================================================================
    59                              <1> ;■書式		: void draw_font(col, row);
    60                              <1> ;
    61                              <1> ;■引数
    62                              <1> ;	col		: 列
    63                              <1> ;	row		: 行
    64                              <1> ;
    65                              <1> ;■戻り値	: 無し
    66                              <1> ;************************************************************************
    67                              <1> draw_font:
    68                              <1> 		;---------------------------------------
    69                              <1> 		; 【スタックフレームの構築】
    70                              <1> 		;---------------------------------------
    71                              <1> 												; ------|--------
    72                              <1> 												; EBP+12| Y（行）
    73                              <1> 												; EBP+ 8| X（列）
    74                              <1> 												; ---------------
    75 000001CB 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    76 000001CC 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    77                              <1> 												; ---------------
    78                              <1> 
    79                              <1> 		;---------------------------------------
    80                              <1> 		; 【レジスタの保存】
    81                              <1> 		;---------------------------------------
    82 000001CE 50                  <1> 		push	eax
    83 000001CF 53                  <1> 		push	ebx
    84 000001D0 51                  <1> 		push	ecx
    85 000001D1 52                  <1> 		push	edx
    86 000001D2 56                  <1> 		push	esi
    87 000001D3 57                  <1> 		push	edi
    88                              <1> 
    89                              <1> 		;---------------------------------------
    90                              <1> 		; 表示位置
    91                              <1> 		;---------------------------------------
    92 000001D4 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
    93 000001D7 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
    94                              <1> 
    95                              <1> 		;---------------------------------------
    96                              <1> 		; フォント一覧を表示
    97                              <1> 		;---------------------------------------
    98 000001DA B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
    99 000001DF 81F900010000        <1> .10L:	cmp		ecx, 256						;      ECX < 256;
   100 000001E5 731F                <1> 		jae		.10E							; 
   101                              <1> 												;      ECX++)
   102                              <1> 												; {
   103                              <1> 												;   // 桁位置の計算
   104 000001E7 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   105 000001E9 83E00F              <1> 		and		eax, 0x0F						;   EAX &= 0x0F
   106 000001EC 01F0                <1> 		add		eax, esi						;   EAX += X;
   107                              <1> 												;   
   108                              <1> 												;   // 行位置の計算
   109 000001EE 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   110 000001F0 C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
   111 000001F3 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   112                              <1> 
   113 000001F5 516A075350E808FFFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
   113 000001FE FF6683C410          <1>
   114                              <1> 
   115 00000203 41                  <1> 		inc		ecx								;   // for (... ECX++)
   116 00000204 EBD9                <1> 		jmp		.10L							; 
   117                              <1> .10E:											; }
   118                              <1> 
   119                              <1> 		;---------------------------------------
   120                              <1> 		; 【レジスタの復帰】
   121                              <1> 		;---------------------------------------
   122 00000206 5F                  <1> 		pop		edi
   123 00000207 5E                  <1> 		pop		esi
   124 00000208 5A                  <1> 		pop		edx
   125 00000209 59                  <1> 		pop		ecx
   126 0000020A 5B                  <1> 		pop		ebx
   127 0000020B 58                  <1> 		pop		eax
   128                              <1> 
   129                              <1> 		;---------------------------------------
   130                              <1> 		; 【スタックフレームの破棄】
   131                              <1> 		;---------------------------------------
   132 0000020C 89EC                <1> 		mov		esp, ebp
   133 0000020E 5D                  <1> 		pop		ebp
   134                              <1> 
   135 0000020F C3                  <1> 		ret
   136                              <1> 
    56                                  %include	"../modules/protect/draw_str.s"
    57                              <1> ;************************************************************************
    58                              <1> ;	文字列の表示
    59                              <1> ;========================================================================
    60                              <1> ;■書式		: void draw_str(col, row, color, p);
    61                              <1> ;
    62                              <1> ;■引数
    63                              <1> ;	col		: 列
    64                              <1> ;	row		: 行
    65                              <1> ;	color	: 描画色
    66                              <1> ;	p		: 文字列のアドレス
    67                              <1> ;
    68                              <1> ;■戻り値	: 無し
    69                              <1> ;************************************************************************
    70                              <1> draw_str:
    71                              <1> 		;---------------------------------------
    72                              <1> 		; 【スタックフレームの構築】
    73                              <1> 		;---------------------------------------
    74                              <1> 												; ------|--------
    75                              <1> 												; EBP+20| *p（文字列のアドレス）
    76                              <1> 												; EBP+16| color（色）
    77                              <1> 												; EBP+12| row（行）
    78                              <1> 												; EBP+ 8| col（列）
    79                              <1> 												; ---------------
    80 00000210 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    81 00000211 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    82                              <1> 												; ---------------
    83                              <1> 
    84                              <1> 		;---------------------------------------
    85                              <1> 		; 【レジスタの保存】
    86                              <1> 		;---------------------------------------
    87 00000213 50                  <1> 		push	eax
    88 00000214 53                  <1> 		push	ebx
    89 00000215 51                  <1> 		push	ecx
    90 00000216 52                  <1> 		push	edx
    91 00000217 56                  <1> 		push	esi
    92                              <1> 
    93                              <1> 		;---------------------------------------
    94                              <1> 		; 文字列の表示
    95                              <1> 		;---------------------------------------
    96 00000218 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
    97 0000021B 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
    98 0000021E 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
    99 00000222 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
   100                              <1> 
   101 00000225 FC                  <1> 		cld										; DF = 0; // アドレス加算
   102                              <1> .10L:											; do
   103                              <1> 												; {
   104 00000226 AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
   105 00000227 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   106 00000229 7425                <1> 		je		.10E							;     break;
   107                              <1> 
   108                              <1> 		;---------------------------------------
   109                              <1> 		; 1文字表示
   110                              <1> 		;---------------------------------------
   111                              <1> %ifdef	USE_SYSTEM_CALL
   112                              <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
   113                              <1> %else
   114 0000022B 50535251E8D3FEFFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
   114 00000234 6683C410            <1>
   115                              <1> %endif
   116                              <1> 
   117                              <1> 		; 次の文字の位置を調整
   118 00000238 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
   119 00000239 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
   120 0000023C 7C10                <1> 		jl		.12E							;   {
   121 0000023E B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
   122 00000243 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
   123 00000244 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
   124 00000247 7C05                <1> 		jl		.12E							;     {
   125 00000249 BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
   126                              <1> 												;     }
   127                              <1> .12E:											;   }
   128 0000024E EBD6                <1> 		jmp		.10L							;   
   129                              <1> .10E:											; } while (1);
   130                              <1> 
   131                              <1> 		;---------------------------------------
   132                              <1> 		; 【レジスタの復帰】
   133                              <1> 		;---------------------------------------
   134 00000250 5E                  <1> 		pop		esi
   135 00000251 5A                  <1> 		pop		edx
   136 00000252 59                  <1> 		pop		ecx
   137 00000253 5B                  <1> 		pop		ebx
   138 00000254 58                  <1> 		pop		eax
   139                              <1> 
   140                              <1> 		;---------------------------------------
   141                              <1> 		; 【スタックフレームの破棄】
   142                              <1> 		;---------------------------------------
   143 00000255 89EC                <1> 		mov		esp, ebp
   144 00000257 5D                  <1> 		pop		ebp
   145                              <1> 
   146 00000258 C3                  <1> 		ret
   147                              <1> 
    57                                  
    58                                  ;************************************************************************
    59                                  ;	パディング
    60                                  ;************************************************************************
    61 00000259 00<rep 1DA7h>           		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
    62                                  
