     1                                  ;************************************************************************
     2                                  ;	BIOSでロードされる最初のセクタ
     3                                  ;	
     4                                  ;	プログラム全体を通して、セグメントの値は0x0000とする。
     5                                  ;	(DS==ES==0)
     6                                  ;	
     7                                  ;************************************************************************
     8                                  
     9                                  ;************************************************************************
    10                                  ;	マクロ
    11                                  ;************************************************************************
    12                                  %include	"../include/define.s"
    13                              <1> ;************************************************************************
    14                              <1> ;	メモリイメージ
    15                              <1> ;************************************************************************
    16                              <1> 
    17                              <1> 		;---------------------------------------
    18                              <1> 		;           |            | 
    19                              <1> 		;           |____________| 
    20                              <1> 		; 0000_7A00 |            | ( 512) スタック
    21                              <1> 		;           |____________| 
    22                              <1> 		; 0000_7C00 |            | (  8K) ブート
    23                              <1> 		;           =            = 
    24                              <1> 		;           |____________| 
    25                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    26                              <1> 		;           =            = 
    27                              <1> 		;           |____________| 
    28                              <1> 		; 0000_BC00 |////////////| 
    29                              <1> 		;           =            = 
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    32                              <1> 		;           |____________| 
    33                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    34                              <1> 		;           |____________| 
    35                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    36                              <1> 		;           |            | 
    37                              <1> 		;           =            = 
    38                              <1> 		;           |____________| 
    39                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    40                              <1> 		;           |            | （各タスク1K）
    41                              <1> 		;           =            = 
    42                              <1> 		;           |____________| 
    43                              <1> 		; 0010_5000 |            | Dir
    44                              <1> 		;      6000 |____________| Page
    45                              <1> 		; 0010_7000 |            | Dir
    46                              <1> 		;      8000 |____________| Page
    47                              <1> 		; 0010_9000 |////////////| 
    48                              <1> 		;           |            | 
    49                              <1> 
    50                              <1> 
    51                              <1>         BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    52                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    53                              <1>         SECT_SIZE			equ		(512)			; セクタサイズ
    54                              <1>         BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    55                              <1> 
    56                              <1>         E820_RECORD_SIZE	equ		20
    13                                  %include	"../include/macro.s"
    14                              <1> ;************************************************************************
    15                              <1> ; 関数呼び出し用マクロ
    16                              <1> ;
    17                              <1> ; 使い方：
    18                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    19                              <1> ;
    20                              <1> ;************************************************************************
    21                              <1> 
    22                              <1> %macro cdecl 1-*.nolist
    23                              <1> 
    24                              <1>     %rep %0 - 1
    25                              <1>         push    %{-1:-1}
    26                              <1>         %rotate -1
    27                              <1>     %endrep
    28                              <1>     %rotate -1
    29                              <1> 
    30                              <1>         call    %1
    31                              <1> 
    32                              <1>     %if 1 < %0
    33                              <1>         add     sp,(__BITS__ >> 3) * (%0 - 1)
    34                              <1>     %endif
    35                              <1> 
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> ;************************************************************************
    39                              <1> ;	構造体
    40                              <1> ;************************************************************************
    41                              <1> 
    42                              <1> ;-----------------------------------------------
    43                              <1> ;	ドライブパラメータ
    44                              <1> ;-----------------------------------------------
    45                              <1> struc drive
    46 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
    47 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
    48 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
    49 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
    50                              <1> endstruc
    14                                  
    15                                  		ORG		BOOT_LOAD						; ロードアドレスをアセンブラに指示
    16                                  
    17                                  ;************************************************************************
    18                                  ;	エントリポイント
    19                                  ;************************************************************************
    20                                  entry:
    21                                  		;---------------------------------------
    22                                  		; BPB(BIOS Parameter Block)
    23                                  		;---------------------------------------
    24 00000000 EB58                    		jmp		ipl								; IPLへジャンプ
    25 00000002 90<rep 58h>             		times	90 - ($ - $$) db 0x90			; 
    26                                  
    27                                  		;---------------------------------------
    28                                  		; IPL(Initial Program Loader)
    29                                  		;---------------------------------------
    30                                  ipl:
    31 0000005A FA                      		cli										; // 割り込み禁止
    32                                  
    33 0000005B B80000                  		mov		ax, 0x0000						; AX = 0x0000;
    34 0000005E 8ED8                    		mov		ds, ax							; DS = 0x0000;
    35 00000060 8EC0                    		mov		es, ax							; ES = 0x0000;
    36 00000062 8ED0                    		mov		ss, ax							; SS = 0x0000;
    37 00000064 BC007C                  		mov		sp, BOOT_LOAD					; SP = 0x7C00;
    38                                  
    39 00000067 FB                      		sti										; // 割り込み許可
    40                                  
    41 00000068 8816[B800]              		mov		[BOOT + drive.no], dl			; ブートドライブを保存
    42                                  
    43                                          ;---------------------------------------
    44                                  		; 文字列を表示
    45                                  		;---------------------------------------
    46 0000006C 68[9900]E84E0083C4-     		cdecl	puts, .s0						; puts(.s0);
    46 00000074 02                 
    47                                  
    48                                  		;---------------------------------------
    49                                  		; 残りのセクタを全て読み込む
    50                                  		;---------------------------------------
    51 00000075 BB0F00                  		mov		bx, BOOT_SECT - 1				; BX = 残りのブートセクタ数;
    52 00000078 B9007E                  		mov		cx, BOOT_LOAD + SECT_SIZE		; CX = 次のロードアドレス;
    53                                  
    54 0000007B 515368[B800]E89B00-     		cdecl	read_chs, BOOT, bx, cx			; AX = read_chs(.chs, bx, cx);
    54 00000083 83C406             
    55                                  
    56 00000086 39D8                    		cmp		ax, bx							; if (AX != 残りのセクタ数)
    57 00000088 740C                    .10Q:	jz		.10E							; {
    58 0000008A 68[A600]E8300083C4-     .10T:	cdecl	puts, .e0						;   puts(.e0);
    58 00000092 02                 
    59 00000093 E84900                  		call	reboot							;   reboot(); // 再起動
    60                                  .10E:											; }
    61                                  
    62                                  		;---------------------------------------
    63                                  		; 次のステージへ移行
    64                                  		;---------------------------------------
    65 00000096 E9BF02                  		jmp		stage_2							; ブート処理の第2ステージ
    66                                  
    67                                  		;---------------------------------------
    68                                  		; データ
    69                                  		;---------------------------------------
    70 00000099 426F6F74696E672E2E-     .s0		db	"Booting...", 0x0A, 0x0D, 0
    70 000000A2 2E0A0D00           
    71 000000A6 4572726F723A736563-     .e0		db	"Error:sector read", 0
    71 000000AF 746F72207265616400 
    72                                  
    73                                  ;************************************************************************
    74                                  ;	ブートドライブに関する情報
    75                                  ;************************************************************************
    76                                  ALIGN 2, db 0
    77                                  BOOT:											; ブートドライブに関する情報
    78                                  	istruc	drive
    79 000000B8 0000                    		at	drive.no,		dw	0				; ドライブ番号
    80 000000BA 0000                    		at	drive.cyln,		dw	0				; C:シリンダ
    81 000000BC 0000                    		at	drive.head,		dw	0				; H:ヘッド
    82 000000BE 0200                    		at	drive.sect,		dw	2				; S:セクタ
    83                                  	iend
    84                                  
    85                                  ;************************************************************************
    86                                  ;	モジュール
    87                                  ;************************************************************************
    88                                  %include	"../modules/real/puts.s"
    89                              <1> ;************************************************************************
    90                              <1> ;	文字列表示
    91                              <1> ;------------------------------------------------------------------------
    92                              <1> ;	BIOS を使用
    93                              <1> ;========================================================================
    94                              <1> ;■書式		: void puts(str);
    95                              <1> ;
    96                              <1> ;■引数
    97                              <1> ;	str		: 文字列のアドレス
    98                              <1> ;
    99                              <1> ;■戻り値	: 無し
   100                              <1> ;************************************************************************
   101                              <1> puts:
   102                              <1> 		;---------------------------------------
   103                              <1> 		; 【スタックフレームの構築】
   104                              <1> 		;---------------------------------------
   105                              <1> 												; ------|--------
   106                              <1> 												;    + 4| 文字列のアドレス
   107                              <1> 												;    + 2| IP（戻り番地）
   108 000000C0 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   109 000000C1 89E5                <1> 		mov		bp, sp							; ------+--------
   110                              <1> 
   111                              <1> 		;---------------------------------------
   112                              <1> 		; 【レジスタの保存】
   113                              <1> 		;---------------------------------------
   114 000000C3 50                  <1> 		push	ax
   115 000000C4 53                  <1> 		push	bx
   116 000000C5 56                  <1> 		push	si
   117                              <1> 
   118                              <1> 		;---------------------------------------
   119                              <1> 		; 引数を取得
   120                              <1> 		;---------------------------------------
   121 000000C6 8B7604              <1> 		mov		si, [bp + 4]					; SI = 文字列のアドレス;
   122                              <1> 
   123                              <1> 		;---------------------------------------
   124                              <1> 		; 【処理の開始】
   125                              <1> 		;---------------------------------------
   126 000000C9 B40E                <1> 		mov		ah, 0x0E						; // テレタイプ式1文字出力
   127 000000CB BB0000              <1> 		mov		bx, 0x0000						; // ページ番号と文字色を0に設定
   128 000000CE FC                  <1> 		cld										; DF = 0; // アドレス加算
   129                              <1> .10L:											; do
   130                              <1> 												; {
   131 000000CF AC                  <1> 		lodsb									;   AL = *SI++;
   132                              <1> 												;   
   133 000000D0 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   134 000000D2 7404                <1> 		je		.10E							;     break;
   135                              <1> 												;   
   136 000000D4 CD10                <1> 		int		0x10							;   Int10(0x0E, AL); // 文字出力
   137 000000D6 EBF7                <1> 		jmp		.10L							;   
   138                              <1> .10E:											; } while (1);
   139                              <1> 
   140                              <1> 		;---------------------------------------
   141                              <1> 		; 【レジスタの復帰】
   142                              <1> 		;---------------------------------------
   143 000000D8 5E                  <1> 		pop		si
   144 000000D9 5B                  <1> 		pop		bx
   145 000000DA 58                  <1> 		pop		ax
   146                              <1> 
   147                              <1> 		;---------------------------------------
   148                              <1> 		; 【スタックフレームの破棄】
   149                              <1> 		;---------------------------------------
   150 000000DB 89EC                <1> 		mov		sp, bp
   151 000000DD 5D                  <1> 		pop		bp
   152                              <1> 
   153 000000DE C3                  <1> 		ret
   154                              <1> 
    89                                  %include	"../modules/real/reboot.s"
    90                              <1> ;************************************************************************
    91                              <1> ;	メッセージを表示して再起動を行う
    92                              <1> ;========================================================================
    93                              <1> ;■書式		: void reboot(void);
    94                              <1> ;
    95                              <1> ;■引数		: 無し
    96                              <1> ;
    97                              <1> ;■戻り値;	: 無し
    98                              <1> ;************************************************************************
    99                              <1> reboot:
   100                              <1> 		;---------------------------------------
   101                              <1> 		; メッセージを表示
   102                              <1> 		;---------------------------------------
   103 000000DF 68[FB00]E8DBFF83C4- <1> 		cdecl	puts, .s0						; // 再起動メッセージを表示
   103 000000E7 02                  <1>
   104                              <1> 
   105                              <1> 		;---------------------------------------
   106                              <1> 		; キー入力待ち
   107                              <1> 		;---------------------------------------
   108                              <1> .10L:											; do
   109                              <1> 												; {
   110 000000E8 B410                <1> 		mov		ah, 0x10						;   // キー入力待ち
   111 000000EA CD16                <1> 		int		0x16							;   AL = BIOS(0x16, 0x10);
   112                              <1> 												;   
   113 000000EC 3C20                <1> 		cmp		al, ' '							;   ZF = AL == ' ';
   114 000000EE 75F8                <1> 		jne		.10L							; } while (!ZF);
   115                              <1> 
   116                              <1> 		;---------------------------------------
   117                              <1> 		; 改行を出力
   118                              <1> 		;---------------------------------------
   119 000000F0 68[1901]E8CAFF83C4- <1> 		cdecl	puts, .s1						; 改行
   119 000000F8 02                  <1>
   120                              <1> 
   121                              <1> 		;---------------------------------------
   122                              <1> 		; 再起動
   123                              <1> 		;---------------------------------------
   124 000000F9 CD19                <1> 		int		0x19							; BIOS(0x19);       // reboot();
   125                              <1> 
   126                              <1> 		;---------------------------------------
   127                              <1> 		; 文字列データ
   128                              <1> 		;---------------------------------------
   129 000000FB 0A0D50757368205350- <1> .s0		db	0x0A, 0x0D, "Push SPACE key to reboot...", 0
   129 00000104 414345206B65792074- <1>
   129 0000010D 6F207265626F6F742E- <1>
   129 00000116 2E2E00              <1>
   130 00000119 0A0D0A0D00          <1> .s1		db	0x0A, 0x0D, 0x0A, 0x0D, 0
   131                              <1> 
    90                                  %include	"../modules/real/read_chs.s"
    91                              <1> ;************************************************************************
    92                              <1> ;	セクタ読み込み（CHS指定）
    93                              <1> ;------------------------------------------------------------------------
    94                              <1> ;	BIOSコール（INT13 AH=0x02）を使ったセクタ読み出し
    95                              <1> ;========================================================================
    96                              <1> ;■書式		: WORD read_chs(drive, sect, dst);
    97                              <1> ;
    98                              <1> ;■引数
    99                              <1> ;	drive	: drive構造体のアドレス
   100                              <1> ;	sect	: 読み出しセクタ数
   101                              <1> ;	dst		: 読み出し先アドレス
   102                              <1> ;
   103                              <1> ;■戻り値	: 読み込んだセクタ数
   104                              <1> ;************************************************************************
   105                              <1> read_chs:
   106                              <1> 		;---------------------------------------
   107                              <1> 		; 【スタックフレームの構築】
   108                              <1> 		;---------------------------------------
   109                              <1> 												; ------|--------
   110                              <1> 												;    + 8| コピー先
   111                              <1> 												;    + 6| セクタ数
   112                              <1> 												;    + 4| パラメータバッファ
   113                              <1> 												; ------+----------------
   114                              <1> 												;    + 2| IP（戻り番地）
   115 0000011E 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   116 0000011F 89E5                <1> 		mov		bp, sp							; ------+--------
   117 00000121 6A03                <1> 		push	3								;    - 2| retry = 3; // リトライ回数
   118 00000123 6A00                <1> 		push	0								;    - 4| sect  = 0; // 読み込みセクタ数
   119                              <1> 
   120                              <1> 		;---------------------------------------
   121                              <1> 		; 【レジスタの保存】
   122                              <1> 		;---------------------------------------
   123 00000125 53                  <1> 		push	bx
   124 00000126 51                  <1> 		push	cx
   125 00000127 52                  <1> 		push	dx
   126 00000128 06                  <1> 		push	es
   127 00000129 56                  <1> 		push	si
   128                              <1> 
   129                              <1> 		;---------------------------------------
   130                              <1> 		; 【処理の開始】
   131                              <1> 		;---------------------------------------
   132 0000012A 8B7604              <1> 		mov		si, [bp + 4]					; SI = SRCバッファ;
   133                              <1> 
   134                              <1> 		;---------------------------------------
   135                              <1> 		; CXレジスタの設定
   136                              <1> 		;（BIOSコールの呼び出しに適した形に変換）
   137                              <1> 		;---------------------------------------
   138 0000012D 8A6C02              <1> 		mov		ch, [si + drive.cyln + 0]		; CH   = シリンダ番号（下位バイト）
   139 00000130 8A4C03              <1> 		mov		cl, [si + drive.cyln + 1]		; CL   = シリンダ番号（上位バイト）
   140 00000133 C0E106              <1> 		shl		cl, 6							; CL <<= 6; // 最上位2ビットにシフト
   141 00000136 0A4C06              <1> 		or		cl, [si + drive.sect]			; CL  |= セクタ番号;
   142                              <1> 
   143                              <1> 		;---------------------------------------
   144                              <1> 		; セクタ読み込み
   145                              <1> 		;---------------------------------------
   146 00000139 8A7404              <1> 		mov		dh, [si + drive.head]			; DH = ヘッド番号;
   147 0000013C 8A14                <1> 		mov		dl, [si + 0]					; DL = ドライブ番号;
   148 0000013E B80000              <1> 		mov		ax, 0x0000						; AX = 0x0000;
   149 00000141 8EC0                <1> 		mov		es, ax							; ES = セグメント
   150 00000143 8B5E08              <1> 		mov		bx, [bp + 8]					; BX = コピー先;
   151                              <1> .10L:											; do
   152                              <1> 												; {
   153 00000146 B402                <1> 		mov		ah, 0x02						;   AH = セクタ読み込み
   154 00000148 8A4606              <1> 		mov		al, [bp + 6]					;   AL = セクタ数
   155                              <1> 												;   
   156 0000014B CD13                <1> 		int		0x13							;   CF = BIOS(0x13, 0x02);
   157 0000014D 7304                <1> 		jnc		.11E							;   if (CF)
   158                              <1> 												;   {
   159 0000014F B000                <1> 		mov		al, 0							;     AL = 0;
   160 00000151 EB0C                <1> 		jmp		.10E							;     break;
   161                              <1> .11E:											;   }
   162                              <1> 												;   
   163 00000153 3C00                <1> 		cmp		al, 0							;   if (読み込んだセクタがあれば)
   164 00000155 7508                <1> 		jne		.10E							;     break;
   165                              <1> 												;   
   166 00000157 B80000              <1> 		mov		ax, 0							;   ret = 0; // 戻り値を設定
   167 0000015A FF4EFE              <1> 		dec		word [bp - 2]					; }
   168 0000015D 75E7                <1> 		jnz		.10L							; while (--retry);
   169                              <1> .10E:
   170 0000015F B400                <1> 		mov		ah, 0							; AH = 0; // ステータス情報は破棄
   171                              <1> 
   172                              <1> 		;---------------------------------------
   173                              <1> 		; 【レジスタの復帰】
   174                              <1> 		;---------------------------------------
   175 00000161 5E                  <1> 		pop		si
   176 00000162 07                  <1> 		pop		es
   177 00000163 5A                  <1> 		pop		dx
   178 00000164 59                  <1> 		pop		cx
   179 00000165 5B                  <1> 		pop		bx
   180                              <1> 
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 【スタックフレームの破棄】
   183                              <1> 		;---------------------------------------
   184 00000166 89EC                <1> 		mov		sp, bp
   185 00000168 5D                  <1> 		pop		bp
   186                              <1> 
   187 00000169 C3                  <1> 		ret
   188                              <1> 
    91                                  
    92                                  ;************************************************************************
    93                                  ;	ブートフラグ（先頭512バイトの終了）
    94                                  ;************************************************************************
    95 0000016A 00<rep 94h>             		times	510 - ($ - $$) db 0x00
    96 000001FE 55AA                    		db	0x55, 0xAA
    97                                  
    98                                  ;************************************************************************
    99                                  ;	リアルモード時に取得した情報
   100                                  ;************************************************************************
   101                                  FONT:											; フォント
   102 00000200 0000                    .seg:	dw	0
   103 00000202 0000                    .off:	dw	0
   104                                  ACPI_DATA:										; ACPI data
   105 00000204 00000000                .adr:	dd	0									; ACPI data address
   106 00000208 00000000                .len:	dd	0									; ACPI data length
   107                                  
   108                                  ;************************************************************************
   109                                  ;	モジュール（先頭512バイト以降に配置）
   110                                  ;************************************************************************
   111                                  %include	"../modules/real/itoa.s"
   112                              <1> ;************************************************************************
   113                              <1> ;	数値を文字に変換
   114                              <1> ;========================================================================
   115                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
   116                              <1> ;
   117                              <1> ;■引数
   118                              <1> ;	num		: 変換する数値
   119                              <1> ;	buff	: 保存先バッファアドレス
   120                              <1> ;	size	: 保存先バッファサイズ
   121                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
   122                              <1> ;	flags	: フラグ
   123                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
   124                              <1> ;			:      : 0=空白を' '（スペース）で埋める
   125                              <1> ;			:   B1 : 1=＋/-符号を表示する
   126                              <1> ;			:      : 0=＋/-符号を表示しない
   127                              <1> ;			:   B0 : 1=符号付き正数として扱う
   128                              <1> ;			:      : 0=符号無し正数として扱う
   129                              <1> ;
   130                              <1> ;■戻り値	: 無し
   131                              <1> ;************************************************************************
   132                              <1> itoa:
   133                              <1> 		;---------------------------------------
   134                              <1> 		; 【スタックフレームの構築】
   135                              <1> 		;---------------------------------------
   136                              <1> 												; ------|--------
   137                              <1> 												;    +12| フラグ
   138                              <1> 												;    +10| 基数
   139                              <1> 												;    + 8| バッファサイズ
   140                              <1> 												;    + 6| バッファアドレス
   141                              <1> 												;    + 4| 数値
   142                              <1> 												; ------|--------
   143                              <1> 												;    + 2| IP（戻り番地）
   144 0000020C 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   145 0000020D 89E5                <1> 		mov		bp, sp							; ------+--------
   146                              <1> 
   147                              <1> 		;---------------------------------------
   148                              <1> 		; 【レジスタの保存】
   149                              <1> 		;---------------------------------------
   150 0000020F 50                  <1> 		push	ax
   151 00000210 53                  <1> 		push	bx
   152 00000211 51                  <1> 		push	cx
   153 00000212 52                  <1> 		push	dx
   154 00000213 56                  <1> 		push	si
   155 00000214 57                  <1> 		push	di
   156                              <1> 
   157                              <1> 		;---------------------------------------
   158                              <1> 		; 引数を取得
   159                              <1> 		;---------------------------------------
   160 00000215 8B4604              <1> 		mov		ax, [bp + 4]					; val  = 数値;
   161 00000218 8B7606              <1> 		mov		si, [bp + 6]					; dst  = バッファアドレス;
   162 0000021B 8B4E08              <1> 		mov		cx, [bp + 8]					; size = 残りバッファサイズ;
   163                              <1> 
   164 0000021E 89F7                <1> 		mov		di, si							; // バッファの最後尾
   165 00000220 01CF                <1> 		add		di, cx							; dst  = &dst[size - 1];
   166 00000222 4F                  <1> 		dec		di								; 
   167                              <1> 
   168 00000223 8B5E0C              <1> 		mov		bx, [bp +12]					; flags = オプション;
   169                              <1> 
   170                              <1> 		;---------------------------------------
   171                              <1> 		; 符号付き判定
   172                              <1> 		;---------------------------------------
   173 00000226 F7C30100            <1> 		test	bx, 0b0001						; if (flags & 0x01)// 符号付き
   174 0000022A 7408                <1> .10Q:	je		.10E							; {
   175 0000022C 83F800              <1> 		cmp		ax, 0							;   if (val < 0)
   176 0000022F 7D03                <1> .12Q:	jge		.12E							;   {
   177 00000231 83CB02              <1> 		or		bx, 0b0010						;     flags |=  2; // 符号表示
   178                              <1> .12E:											;   }
   179                              <1> .10E:											; }
   180                              <1> 
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 符号出力判定
   183                              <1> 		;---------------------------------------
   184 00000234 F7C30200            <1> 		test	bx, 0b0010						; if (flags & 0x02)// 符号出力判定
   185 00000238 7410                <1> .20Q:	je		.20E							; {
   186 0000023A 83F800              <1> 		cmp		ax, 0							;   if (val < 0)
   187 0000023D 7D07                <1> .22Q:	jge		.22F							;   {
   188 0000023F F7D8                <1> 		neg		ax								;     val *= -1;   // 符号反転
   189 00000241 C6042D              <1> 		mov		[si], byte '-'					;     *dst = '-';  // 符号表示
   190 00000244 EB03                <1> 		jmp		.22E							;   }
   191                              <1> .22F:											;   else
   192                              <1> 												;   {
   193 00000246 C6042B              <1> 		mov		[si], byte '+'					;     *dst = '+';  // 符号表示
   194                              <1> .22E:											;   }
   195 00000249 49                  <1> 		dec		cx								;   size--;        // 残りバッファサイズの減算
   196                              <1> .20E:											; }
   197                              <1> 
   198                              <1> 		;---------------------------------------
   199                              <1> 		; ASCII変換
   200                              <1> 		;---------------------------------------
   201 0000024A 8B5E0A              <1> 		mov		bx, [bp +10]					; BX = 基数;
   202                              <1> .30L:											; do
   203                              <1> 												; {
   204 0000024D BA0000              <1> 		mov		dx, 0							;   
   205 00000250 F7F3                <1> 		div		bx								;   DX = DX:AX % 基数;
   206                              <1> 												;   AX = DX:AX / 基数;
   207                              <1> 												;   
   208 00000252 89D6                <1> 		mov		si, dx							;   // テーブル参照
   209 00000254 8A94[7C02]          <1> 		mov		dl, byte [.ascii + si]			;   DL = ASCII[DX];
   210                              <1> 												;   
   211 00000258 8815                <1> 		mov		[di], dl						;   *dst = DL;
   212 0000025A 4F                  <1> 		dec		di								;   dst--;
   213                              <1> 												;   
   214 0000025B 83F800              <1> 		cmp		ax, 0							;   
   215 0000025E E0ED                <1> 		loopnz	.30L							; } while (AX);
   216                              <1> .30E:
   217                              <1> 
   218                              <1> 		;---------------------------------------
   219                              <1> 		; 空欄を埋める
   220                              <1> 		;---------------------------------------
   221 00000260 83F900              <1> 		cmp		cx, 0							; if (size)
   222 00000263 740D                <1> .40Q:	je		.40E							; {
   223 00000265 B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   224 00000267 837E0C04            <1> 		cmp		[bp +12], word 0b0100			;   if (flags & 0x04)
   225 0000026B 7502                <1> .42Q:	jne		.42E							;   {
   226 0000026D B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   227                              <1> .42E:											;   }
   228 0000026F FD                  <1> 		std										;   // DF = 1（-方向）
   229 00000270 F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   230                              <1> .40E:											; }
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; 【レジスタの復帰】
   234                              <1> 		;---------------------------------------
   235 00000272 5F                  <1> 		pop		di
   236 00000273 5E                  <1> 		pop		si
   237 00000274 5A                  <1> 		pop		dx
   238 00000275 59                  <1> 		pop		cx
   239 00000276 5B                  <1> 		pop		bx
   240 00000277 58                  <1> 		pop		ax
   241                              <1> 
   242                              <1> 		;---------------------------------------
   243                              <1> 		; 【スタックフレームの破棄】
   244                              <1> 		;---------------------------------------
   245 00000278 89EC                <1> 		mov		sp, bp
   246 0000027A 5D                  <1> 		pop		bp
   247                              <1> 
   248 0000027B C3                  <1> 		ret
   249                              <1> 
   250 0000027C 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   250 00000285 39414243444546      <1>
   251                              <1> 
   112                                  %include	"../modules/real/get_drive_param.s"
   113                              <1> ;************************************************************************
   114                              <1> ;	ドライブ情報の取得(LBA変換に必要な情報)
   115                              <1> ;------------------------------------------------------------------------
   116                              <1> ;	アクセス可能な最大セクタをdrive構造体に設定する
   117                              <1> ;	注）ドライブ番号（drive.no）を設定後に呼び出す事
   118                              <1> ;========================================================================
   119                              <1> ;■書式		: WORD get_drive_param(drive);
   120                              <1> ;
   121                              <1> ;■引数
   122                              <1> ;	drive	: drive構造体のアドレス
   123                              <1> ;
   124                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   125                              <1> ;************************************************************************
   126                              <1> get_drive_param:
   127                              <1> 		;---------------------------------------
   128                              <1> 		; 【スタックフレームの構築】
   129                              <1> 		;---------------------------------------
   130                              <1> 												; ------|--------
   131                              <1> 												;    + 4| パラメータバッファ
   132                              <1> 												;    + 2| IP（戻り番地）
   133 0000028C 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   134 0000028D 89E5                <1> 		mov		bp, sp							; ------+--------
   135                              <1> 
   136                              <1> 		;---------------------------------------
   137                              <1> 		; 【レジスタの保存】
   138                              <1> 		;---------------------------------------
   139 0000028F 53                  <1> 		push	bx
   140 00000290 51                  <1> 		push	cx
   141 00000291 06                  <1> 		push	es
   142 00000292 56                  <1> 		push	si
   143 00000293 57                  <1> 		push	di
   144                              <1> 
   145                              <1> 		;---------------------------------------
   146                              <1> 		; 【処理の開始】
   147                              <1> 		;---------------------------------------
   148 00000294 8B7604              <1> 		mov		si, [bp + 4]					; SI = バッファ
   149                              <1> 
   150 00000297 B80000              <1> 		mov		ax, 0							; Disk Base Table Pointerの初期化
   151 0000029A 8EC0                <1> 		mov		es, ax							; ES = 0;
   152 0000029C 89C7                <1> 		mov		di, ax							; DI = 0;
   153                              <1> 
   154 0000029E B408                <1> 		mov		ah, 0x08						; // get drive parameters 
   155 000002A0 8A14                <1> 		mov		dl, [si + drive.no]				; DL = ドライブ番号
   156 000002A2 CD13                <1> 		int		0x13							; CF = BIOS(0x13, 0x08);
   157 000002A4 721B                <1> .10Q:	jc		.10F							; if (0 == CF)
   158                              <1> .10T:											; {
   159 000002A6 88C8                <1> 		mov		al, cl							;   AX = セクタ数
   160 000002A8 83E03F              <1> 		and		ax, 0x3F						;   // 下位6ビットのみ有効
   161                              <1> 
   162 000002AB C0E906              <1> 		shr		cl, 6							;   CX = シリンダ数
   163 000002AE C1C908              <1> 		ror		cx, 8							;   
   164 000002B1 41                  <1> 		inc		cx								;   
   165                              <1> 
   166 000002B2 0FB6DE              <1> 		movzx	bx, dh							;   BX = ヘッド数（1ベース）
   167 000002B5 43                  <1> 		inc		bx								;   
   168                              <1> 
   169 000002B6 894C02              <1> 		mov		[si + drive.cyln], cx			;   drive.syln = CX; // C:シリンダ数
   170 000002B9 895C04              <1> 		mov		[si + drive.head], bx			;   drive.head = BX; // H:ヘッド数
   171 000002BC 894406              <1> 		mov		[si + drive.sect], ax			;   drive.sect = AX; // S:セクタ数
   172                              <1> 
   173 000002BF EB03                <1> 		jmp		.10E							; }
   174                              <1> .10F:											; else
   175                              <1> 												; {
   176 000002C1 B80000              <1> 		mov		ax, 0							;   AX = 0; // 失敗
   177                              <1> .10E:											; }
   178                              <1> 
   179                              <1> 		;---------------------------------------
   180                              <1> 		; 【レジスタの復帰】
   181                              <1> 		;---------------------------------------
   182 000002C4 5F                  <1> 		pop		di
   183 000002C5 5E                  <1> 		pop		si
   184 000002C6 07                  <1> 		pop		es
   185 000002C7 59                  <1> 		pop		cx
   186 000002C8 5B                  <1> 		pop		bx
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 【スタックフレームの破棄】
   190                              <1> 		;---------------------------------------
   191 000002C9 89EC                <1> 		mov		sp, bp
   192 000002CB 5D                  <1> 		pop		bp
   193                              <1> 
   194 000002CC C3                  <1> 		ret
   195                              <1> 
   113                                  %include	"../modules/real/get_font_adr.s"
   114                              <1> ;************************************************************************
   115                              <1> ;	BIOSフォントアドレスを取得
   116                              <1> ;------------------------------------------------------------------------
   117                              <1> ;	フォント8x16ドットのフォントアドレスを取得
   118                              <1> ;========================================================================
   119                              <1> ;■書式		: void get_font_adr(adr);
   120                              <1> ;
   121                              <1> ;■引数
   122                              <1> ;	adr		: フォントアドレス格納位置
   123                              <1> ;
   124                              <1> ;■戻り値;	: 無し
   125                              <1> ;************************************************************************
   126                              <1> get_font_adr:
   127                              <1> 		;---------------------------------------
   128                              <1> 		; 【スタックフレームの構築】
   129                              <1> 		;---------------------------------------
   130                              <1> 												; ------|--------
   131                              <1> 												;    + 4| パラメータバッファ
   132                              <1> 												;    + 2| IP（戻り番地）
   133 000002CD 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   134 000002CE 89E5                <1> 		mov		bp, sp							; ------+--------
   135                              <1> 
   136                              <1> 		;---------------------------------------
   137                              <1> 		; 【レジスタの保存】
   138                              <1> 		;---------------------------------------
   139 000002D0 50                  <1> 		push	ax
   140 000002D1 53                  <1> 		push	bx
   141 000002D2 56                  <1> 		push	si
   142 000002D3 06                  <1> 		push	es
   143 000002D4 55                  <1> 		push	bp
   144                              <1> 
   145                              <1> 		;---------------------------------------
   146                              <1> 		; 引数を取得
   147                              <1> 		;---------------------------------------
   148 000002D5 8B7604              <1> 		mov		si, [bp + 4]					; dst  =FONTアドレスの保存先;
   149                              <1> 
   150                              <1> 		;---------------------------------------
   151                              <1> 		; フォントアドレスの取得
   152                              <1> 		;---------------------------------------
   153 000002D8 B83011              <1> 		mov		ax, 0x1130						; // フォントアドレスの取得
   154 000002DB B706                <1> 		mov		bh, 0x06						; 8x16 font (vga/mcga) 
   155 000002DD CD10                <1> 		int		10h								; ES:BP=FONT ADDRESS
   156                              <1> 
   157                              <1> 		;---------------------------------------
   158                              <1> 		; FONTアドレスを保存
   159                              <1> 		;---------------------------------------
   160 000002DF 8C04                <1> 		mov		[si + 0], es					; dst[0] = セグメント;
   161 000002E1 896C02              <1> 		mov		[si + 2], bp					; dst[1] = オフセット;
   162                              <1> 
   163                              <1> 		;---------------------------------------
   164                              <1> 		; 【レジスタの復帰】
   165                              <1> 		;---------------------------------------
   166 000002E4 5D                  <1> 		pop		bp
   167 000002E5 07                  <1> 		pop		es
   168 000002E6 5E                  <1> 		pop		si
   169 000002E7 5B                  <1> 		pop		bx
   170 000002E8 58                  <1> 		pop		ax
   171                              <1> 
   172                              <1> 		;---------------------------------------
   173                              <1> 		; 【スタックフレームの破棄】
   174                              <1> 		;---------------------------------------
   175 000002E9 89EC                <1> 		mov		sp, bp
   176 000002EB 5D                  <1> 		pop		bp
   177                              <1> 
   178 000002EC C3                  <1> 		ret
   179                              <1> 
   114                                  %include	"../modules/real/get_mem_info.s"
   115                              <1> ;************************************************************************
   116                              <1> ;	メモリ情報の表示
   117                              <1> ;------------------------------------------------------------------------
   118                              <1> ;	ACPIデータのアドレスと長さをグローバル変数に保存する
   119                              <1> ;========================================================================
   120                              <1> ;■書式		: void get_mem_info(void);
   121                              <1> ;
   122                              <1> ;■引数		: 無し
   123                              <1> ;
   124                              <1> ;■戻り値;	: 無し
   125                              <1> ;************************************************************************
   126                              <1> get_mem_info:
   127                              <1> 		;---------------------------------------
   128                              <1> 		; 【レジスタの保存】
   129                              <1> 		;---------------------------------------
   130 000002ED 6650                <1> 		push	eax
   131 000002EF 6653                <1> 		push	ebx
   132 000002F1 6651                <1> 		push	ecx
   133 000002F3 6652                <1> 		push	edx
   134 000002F5 56                  <1> 		push	si
   135 000002F6 57                  <1> 		push	di
   136 000002F7 55                  <1> 		push	bp
   115                                  %include	"../modules/real/kbc.s"
   116                              <1> ;************************************************************************
   117                              <1> ;	KBCの出力バッファに書き込む
   118                              <1> ;========================================================================
   119                              <1> ;■書式		: WORD KBC_Data_Write(data);
   120                              <1> ;
   121                              <1> ;■引数
   122                              <1> ;	data	: 書き込みデータ
   123                              <1> ;
   124                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   125                              <1> ;************************************************************************
   126                              <1> KBC_Data_Write:
   127                              <1>                 ;---------------------------------------
   128                              <1>                 ; 【スタックフレームの構築】
   129                              <1>                 ;---------------------------------------
   130                              <1>                                                         
   131                              <1>                                                         ;    + 4| データ
   132                              <1>                                                         ;    + 2| IP（戻り番地）
   133 000002F8 55                  <1>                 push	bp								;  BP+ 0| BP（元の値）
   134 000002F9 89E5                <1>                 mov		bp, sp							; ------+--------
   135                              <1> 
   136                              <1>                 ;---------------------------------------
   137                              <1>                 ; 【レジスタの保存】
   138                              <1>                 ;---------------------------------------
   139 000002FB 51                  <1>                 push	cx
   140                              <1> 
   141                              <1>                 ;---------------------------------------
   142                              <1>                 ; データ書き込み
   143                              <1>                 ;---------------------------------------
   144 000002FC B90000              <1>                 mov		cx, 0							; CX = 0; // 最大カウント値
   145                              <1>         .10L:											; do
   146                              <1>                                                         ; {
   147 000002FF E464                <1>                 in		al, 0x64						;   AL = inp(0x64); // KBCステータス
   148 00000301 A802                <1>                 test    al, 0x02						;   ZF = AL & 0x02; // 書き込み可能？
   149 00000303 E0FA                <1>                 loopnz	.10L							; } while (--CX && !ZF);
   150                              <1>                                                         ; 
   151 00000305 83F900              <1>                 cmp		cx, 0							; if (CX) // 未タイムアウト
   152 00000308 7405                <1>                 jz		.20E							; {
   153                              <1>                                                         ;   
   154 0000030A 8A4604              <1>                 mov		al, [bp + 4]					;   AL = データ;
   155 0000030D E660                <1>                 out    	0x60, al						;   outp(0x60, AL);
   156                              <1>         .20E:											; }
   157                              <1>                                                         ; 
   158 0000030F 89C8                <1>                 mov		ax, cx							; return CX;
   159                              <1> 
   160                              <1>                 ;---------------------------------------
   161                              <1>                 ; 【レジスタの復帰】
   162                              <1>                 ;---------------------------------------
   163 00000311 59                  <1>                 pop		cx
   164                              <1> 
   165                              <1>                 ;---------------------------------------
   166                              <1>                 ; 【スタックフレームの破棄】
   167                              <1>                 ;---------------------------------------
   168 00000312 89EC                <1>                 mov		sp, bp
   169 00000314 5D                  <1>                 pop		bp
   170                              <1> 
   171 00000315 C3                  <1>                 ret
   172                              <1> 
   173                              <1> 
   174                              <1> ;************************************************************************
   175                              <1> ;	KBCの出力バッファを読み込む
   176                              <1> ;========================================================================
   177                              <1> ;■書式		: WORD KBC_Data_Read(data);
   178                              <1> ;
   179                              <1> ;■引数
   180                              <1> ;	data	: 読み込みデータ格納アドレス
   181                              <1> ;
   182                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   183                              <1> ;************************************************************************
   184                              <1> KBC_Data_Read:
   185                              <1> 
   186                              <1>                 ;---------------------------------------
   187                              <1>                 ; 【スタックフレームの構築】
   188                              <1>                 ;---------------------------------------
   189                              <1>                                                         ;    + 4| 格納アドレス
   190                              <1>                                                         ;    + 2| IP（戻り番地）
   191 00000316 55                  <1>                 push	bp								;  BP+ 0| BP（元の値）
   192 00000317 89E5                <1>                 mov		bp, sp							; ------+--------
   193                              <1> 
   194                              <1>                 ;---------------------------------------
   195                              <1>                 ; 【レジスタの保存】
   196                              <1>                 ;---------------------------------------
   197 00000319 51                  <1>                 push	cx
   198 0000031A 57                  <1>                 push	di
   199                              <1> 
   200                              <1>                 ;---------------------------------------
   201                              <1>                 ; データ読み込み
   202                              <1>                 ;---------------------------------------
   203 0000031B B90000              <1>                 mov		cx, 0							; CX = 0; // 最大カウント値
   204                              <1>         .10L:											; do
   205                              <1>                                                         ; {
   206 0000031E E464                <1>                 in		al, 0x64						;   AL = inp(0x64); // KBCステータス
   207 00000320 A801                <1>                 test    al, 0x01						;   ZF = AL & 0x01; // 読み込み可能？
   208 00000322 E1FA                <1>                 loopz	.10L							; } while (--CX && ZF);
   209                              <1>                                                         ;   
   210 00000324 83F900              <1>                 cmp		cx, 0							; if (CX) // 未タイムアウト
   211 00000327 7409                <1>                 jz		.20E							; {
   212                              <1>                                                         ;   
   213 00000329 B400                <1>                 mov		ah, 0x00						;   AH = 0x00;
   214 0000032B E460                <1>                 in     	al, 0x60						;   AL = inp(0x60); // データ取得
   215                              <1>                                                         ;   
   216 0000032D 8B7E04              <1>                 mov		di, [bp + 4]					;   DI    = adr;
   217 00000330 8905                <1>                 mov		[di + 0], ax					;   DI[0] = AX;
   218                              <1>         .20E:											; }
   219                              <1>                                                         ; 
   220 00000332 89C8                <1>                 mov		ax, cx		                    ;  return CX;
   221                              <1> 
   222                              <1>                 ;---------------------------------------
   223                              <1>                 ; 【レジスタの復帰】
   224                              <1>                 ;---------------------------------------
   225 00000334 5F                  <1>                 pop		di
   226 00000335 59                  <1>                 pop		cx
   227                              <1> 
   228                              <1>                 ;---------------------------------------
   229                              <1>                 ; 【スタックフレームの破棄】
   230                              <1>                 ;---------------------------------------
   231 00000336 89EC                <1>                 mov		sp, bp
   232 00000338 5D                  <1>                 pop		bp
   233                              <1> 
   234 00000339 C3                  <1>                 ret
   235                              <1> 
   236                              <1> 
   237                              <1> ;************************************************************************
   238                              <1> ;	KBCにコマンドを出力
   239                              <1> ;========================================================================
   240                              <1> ;■書式		: WORD KBC_Cmd_Write(cmd);
   241                              <1> ;
   242                              <1> ;■引数
   243                              <1> ;	cmd		: コマンド
   244                              <1> ;
   245                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   246                              <1> ;************************************************************************
   247                              <1> KBC_Cmd_Write:
   248                              <1>                 ;---------------------------------------
   249                              <1>                 ; 【スタックフレームの構築】
   250                              <1>                 ;---------------------------------------
   251                              <1>                                                         ;    + 4| コマンド
   252                              <1>                                                         ;    + 2| IP（戻り番地）
   253 0000033A 55                  <1>                 push	bp								;  BP+ 0| BP（元の値）
   254 0000033B 89E5                <1>                 mov		bp, sp							; ------+--------
   255                              <1> 
   256                              <1>                 ;---------------------------------------
   257                              <1>                 ; 【レジスタの保存】
   258                              <1>                 ;---------------------------------------
   259 0000033D 51                  <1>                 push	cx
   260                              <1> 
   261                              <1>                 ;---------------------------------------
   262                              <1>                 ; コマンド書き込み
   263                              <1>                 ;---------------------------------------
   264 0000033E B90000              <1>                 mov		cx, 0							; CX = 0; // 最大カウント値
   265                              <1>         .10L:											; do
   266                              <1>                                                         ; {
   267 00000341 E464                <1>                 in		al, 0x64						;   AL = inp(0x64); // KBCステータス
   268 00000343 A802                <1>                 test    al, 0x02						;   ZF = AL & 0x02; // 書き込み可能？
   269 00000345 E0FA                <1>                 loopnz	.10L							; } while (--CX && !ZF);
   270                              <1>                                                         ; 
   271 00000347 83F900              <1>                 cmp		cx, 0							; if (CX) // 未タイムアウト
   272 0000034A 7405                <1>                 jz		.20E							; {
   273                              <1>                                                         ;   
   274 0000034C 8A4604              <1>                 mov		al, [bp + 4]					;   AL = コマンド;
   275 0000034F E664                <1>                 out    	0x64, al						;   outp(0x64, AL);
   276                              <1>         .20E:											; }
   277                              <1> 
   278 00000351 89C8                <1>                 mov		ax, cx							; return CX;
   279                              <1> 
   280                              <1>                 ;---------------------------------------
   281                              <1>                 ; 【レジスタの復帰】
   282                              <1>                 ;---------------------------------------
   283 00000353 59                  <1>                 pop		cx
   284                              <1> 
   285                              <1>                 ;---------------------------------------
   286                              <1>                 ; 【スタックフレームの破棄】
   287                              <1>                 ;---------------------------------------
   288 00000354 89EC                <1>                 mov		sp, bp
   289 00000356 5D                  <1>                 pop		bp
   290                              <1> 
   291 00000357 C3                  <1>                 ret
   116                                  
   117                                  ;************************************************************************
   118                                  ;	ブート処理の第2ステージ
   119                                  ;************************************************************************
   120                                  stage_2:
   121                                  		;---------------------------------------
   122                                  		; 文字列を表示
   123                                  		;---------------------------------------
   124 00000358 68[D203]E862FD83C4-     		cdecl	puts, .s0						; puts(.s0);
   124 00000360 02                 
   125                                  
   126                                  		;---------------------------------------
   127                                  		; ドライブ情報を取得
   128                                  		;---------------------------------------
   129 00000361 68[B800]E825FF83C4-     		cdecl	get_drive_param, BOOT			; get_drive_param(DX, BOOT.CYLN);
   129 00000369 02                 
   130 0000036A 83F800                  		cmp		ax, 0							; if (0 == AX)
   131 0000036D 750C                    .10Q:	jne		.10E							; {
   132 0000036F 68[0904]E84BFD83C4-     .10T:	cdecl	puts, .e0						;   puts(.e0);
   132 00000377 02                 
   133 00000378 E864FD                  		call	reboot							;   reboot(); // 再起動
   134                                  .10E:											; }
   135                                  
   136                                  		;---------------------------------------
   137                                  		; ドライブ情報を表示
   138                                  		;---------------------------------------
   139 0000037B A1[B800]                		mov		ax, [BOOT + drive.no]			; AX = ブートドライブ;
   140 0000037E 6A046A106A0268-         		cdecl	itoa, ax, .p1, 2, 16, 0b0100	; 
   140 00000385 [EA03]50E881FE83C4-
   140 0000038D 0A                 
   141 0000038E A1[BA00]                		mov		ax, [BOOT + drive.cyln]			; 
   142 00000391 6A046A106A0468-         		cdecl	itoa, ax, .p2, 4, 16, 0b0100	; 
   142 00000398 [F203]50E86EFE83C4-
   142 000003A0 0A                 
   143 000003A1 A1[BC00]                		mov		ax, [BOOT + drive.head]			; AX = ヘッド数;
   144 000003A4 6A046A106A0268-         		cdecl	itoa, ax, .p3, 2, 16, 0b0100	; 
   144 000003AB [FC03]50E85BFE83C4-
   144 000003B3 0A                 
   145 000003B4 A1[BE00]                		mov		ax, [BOOT + drive.sect]			; AX = トラックあたりのセクタ数;
   146 000003B7 6A046A106A0268-         		cdecl	itoa, ax, .p4, 2, 16, 0b0100	; 
   146 000003BE [0404]50E848FE83C4-
   146 000003C6 0A                 
   147 000003C7 68[E103]E8F3FC83C4-     		cdecl	puts, .s1
   147 000003CF 02                 
   148                                  
   149                                  		;---------------------------------------
   150                                  		; 次のステージへ移行
   151                                  		;---------------------------------------
   152 000003D0 EB52                    		jmp		stage_3rd						; 次のステージへ移行
   153                                  
   154                                  		;---------------------------------------
   155                                  		; データ
   156                                  		;---------------------------------------
   157 000003D2 326E64207374616765-     .s0		db	"2nd stage...", 0x0A, 0x0D, 0
   157 000003DB 2E2E2E0A0D00       
   158                                  
   159 000003E1 2044726976653A3078      .s1		db	" Drive:0x"
   160 000003EA 20202C20433A3078        .p1		db	"  , C:0x"
   161 000003F2 202020202C20483A30-     .p2		db	"    , H:0x"
   161 000003FB 78                 
   162 000003FC 20202C20533A3078        .p3		db	"  , S:0x"
   163 00000404 20200A0D00              .p4		db	"  ", 0x0A, 0x0D, 0
   164                                  
   165 00000409 43616E277420676574-     .e0		db	"Can't get drive parameter.", 0
   165 00000412 206472697665207061-
   165 0000041B 72616D657465722E00 
   166                                  
   167                                  ;************************************************************************
   168                                  ;	ブート処理の第3ステージ
   169                                  ;************************************************************************
   170                                  stage_3rd:
   171                                  		;---------------------------------------
   172                                  		; 文字列を表示
   173                                  		;---------------------------------------
   174 00000424 68[A104]E896FC83C4-     		cdecl	puts, .s0
   174 0000042C 02                 
   175                                  
   176                                  		;---------------------------------------
   177                                  		; プロテクトモードで使用するフォントは、
   178                                  		; BIOSに内蔵されたものを流用する
   179                                  		;---------------------------------------
   180 0000042D 68[0002]E89AFE83C4-     		cdecl	get_font_adr, FONT				; // BIOSのフォントアドレスを取得
   180 00000435 02                 
   181                                  
   182                                  		;---------------------------------------
   183                                  		; フォントアドレスの表示
   184                                  		;---------------------------------------
   185 00000436 6A046A106A0468-         		cdecl	itoa, word [FONT.seg], .p1, 4, 16, 0b0100
   185 0000043D [BE04]FF36[0002]E8-
   185 00000444 C6FD83C40A         
   186 00000449 6A046A106A0468-         		cdecl	itoa, word [FONT.off], .p2, 4, 16, 0b0100
   186 00000450 [C304]FF36[0202]E8-
   186 00000457 B3FD83C40A         
   187 0000045C 68[B004]E85EFC83C4-     		cdecl	puts, .s1
   187 00000464 02                 
   188                                  
   189                                  		;---------------------------------------
   190                                  		; メモリ情報の取得と表示
   191                                  		;---------------------------------------
   192 00000465 E885FE                  		cdecl	get_mem_info					; get_mem_info();
   193                                  
   194 00000468 66A1[0402]              		mov		eax, [ACPI_DATA.adr]			; EAX = ACPI_DATA.adr;
   195 0000046C 6683F800                		cmp		eax, 0							; if (EAX)
   196 00000470 742D                    		je		.10E							; {
   197                                  
   198 00000472 6A046A106A0468-         		cdecl	itoa, ax, .p4, 4, 16, 0b0100	;   itoa(AX); // 下位アドレスを変換
   198 00000479 [DC04]50E88DFD83C4-
   198 00000481 0A                 
   199 00000482 66C1E810                		shr		eax, 16							;   EAX >>= 16;
   200 00000486 6A046A106A0468-         		cdecl	itoa, ax, .p3, 4, 16, 0b0100	;   itoa(AX); // 上位アドレスを変換
   200 0000048D [D804]50E879FD83C4-
   200 00000495 0A                 
   201                                  
   202 00000496 68[CD04]E824FC83C4-     		cdecl	puts, .s2						;   puts(.s2); // アドレスを表示
   202 0000049E 02                 
   203                                  .10E:											; }
   204                                  
   205                                  		;---------------------------------------
   206                                  		; 次のステージへ移行
   207                                  		;---------------------------------------
   208 0000049F EB42                    		jmp		stage_4							; 次のステージへ移行
   209                                  
   210                                  		;---------------------------------------
   211                                  		; データ
   212                                  		;---------------------------------------
   213 000004A1 337264207374616765-     .s0:	db	"3rd stage...", 0x0A, 0x0D, 0
   213 000004AA 2E2E2E0A0D00       
   214                                  
   215 000004B0 20466F6E7420416464-     .s1:	db	" Font Address="
   215 000004B9 726573733D         
   216 000004BE 5A5A5A5A3A              .p1:	db	"ZZZZ:"
   217 000004C3 5A5A5A5A0A0D00          .p2:	db	"ZZZZ", 0x0A, 0x0D, 0
   218 000004CA 0A0D00                  		db	0x0A, 0x0D, 0
   219                                  
   220 000004CD 204143504920646174-     .s2:	db	" ACPI data="
   220 000004D6 613D               
   221 000004D8 5A5A5A5A                .p3:	db	"ZZZZ"
   222 000004DC 5A5A5A5A0A0D00          .p4:	db	"ZZZZ", 0x0A, 0x0D, 0
   223                                  
   224                                  ;************************************************************************
   225                                  ;	ブート処理の第4ステージ
   226                                  ;************************************************************************
   227                                  stage_4:
   228                                  		;---------------------------------------
   229                                  		; 文字列を表示
   230                                  		;---------------------------------------
   231 000004E3 68[3405]E8D7FB83C4-     		cdecl	puts, .s0
   231 000004EB 02                 
   232                                  
   233                                  		;---------------------------------------
   234                                  		; A20ゲートの有効化
   235                                  		;---------------------------------------
   236 000004EC FA                      		cli										;   // 割り込み禁止
   237                                  												;   
   238 000004ED 68AD00E847FE83C402      		cdecl	KBC_Cmd_Write, 0xAD				;   // キーボード無効化
   239                                  												;   
   240 000004F6 68D000E83EFE83C402      		cdecl	KBC_Cmd_Write, 0xD0				;   // 出力ポート読み出しコマンド
   241 000004FF 68[5805]E811FE83C4-     		cdecl	KBC_Data_Read, .key				;   // 出力ポートデータ
   241 00000507 02                 
   242                                  												;   
   243 00000508 8A1E[5805]              		mov		bl, [.key]						;   BL  = key;
   244 0000050C 80CB02                  		or		bl, 0x02						;   BL |= 0x02; // A20ゲート有効化
   245                                  												;   
   246 0000050F 68D100E825FE83C402      		cdecl	KBC_Cmd_Write, 0xD1				;   // 出力ポート書き込みコマンド
   247 00000518 53E8DCFD83C402          		cdecl	KBC_Data_Write, bx				;   // 出力ポートデータ
   248                                  												;   
   249 0000051F 68AE00E815FE83C402      		cdecl	KBC_Cmd_Write, 0xAE				;   // キーボード有効化
   250                                  												;   
   251 00000528 FB                      		sti										;   // 割り込み許可
   252                                  
   253                                  		;---------------------------------------
   254                                  		; 文字列を表示
   255                                  		;---------------------------------------
   256 00000529 68[4305]E891FB83C4-     		cdecl	puts, .s1
   256 00000531 02                 
   257                                  
   258                                  		;---------------------------------------
   259                                  		; 処理の終了
   260                                  		;---------------------------------------
   261 00000532 EBFE                    		jmp		$								; while (1) ; // 無限ループ
   262                                  
   263 00000534 347468207374616765-     .s0:	db	"4th stage...", 0x0A, 0x0D, 0
   263 0000053D 2E2E2E0A0D00       
   264 00000543 204132302047617465-     .s1:	db	" A20 Gate Enabled.", 0x0A, 0x0D, 0
   264 0000054C 20456E61626C65642E-
   264 00000555 0A0D00             
   265                                  
   266 00000558 0000                    .key:	dw	0
   267                                  
   268                                  ;************************************************************************
   269                                  ;	パディング
   270                                  ;************************************************************************
   271 0000055A 00<rep 1AA6h>           		times BOOT_SIZE - ($ - $$)		db	0	; パディング
