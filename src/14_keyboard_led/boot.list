     1                                  ;************************************************************************
     2                                  ;	BIOSでロードされる最初のセクタ
     3                                  ;	
     4                                  ;	プログラム全体を通して、セグメントの値は0x0000とする。
     5                                  ;	(DS==ES==0)
     6                                  ;	
     7                                  ;************************************************************************
     8                                  
     9                                  ;************************************************************************
    10                                  ;	マクロ
    11                                  ;************************************************************************
    12                                  %include	"../include/define.s"
    13                              <1> ;************************************************************************
    14                              <1> ;	メモリイメージ
    15                              <1> ;************************************************************************
    16                              <1> 
    17                              <1> 		;---------------------------------------
    18                              <1> 		;           |            | 
    19                              <1> 		;           |____________| 
    20                              <1> 		; 0000_7A00 |            | ( 512) スタック
    21                              <1> 		;           |____________| 
    22                              <1> 		; 0000_7C00 |            | (  8K) ブート
    23                              <1> 		;           =            = 
    24                              <1> 		;           |____________| 
    25                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    26                              <1> 		;           =            = 
    27                              <1> 		;           |____________| 
    28                              <1> 		; 0000_BC00 |////////////| 
    29                              <1> 		;           =            = 
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    32                              <1> 		;           |____________| 
    33                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    34                              <1> 		;           |____________| 
    35                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    36                              <1> 		;           |            | 
    37                              <1> 		;           =            = 
    38                              <1> 		;           |____________| 
    39                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    40                              <1> 		;           |            | （各タスク1K）
    41                              <1> 		;           =            = 
    42                              <1> 		;           |____________| 
    43                              <1> 		; 0010_5000 |            | Dir
    44                              <1> 		;      6000 |____________| Page
    45                              <1> 		; 0010_7000 |            | Dir
    46                              <1> 		;      8000 |____________| Page
    47                              <1> 		; 0010_9000 |////////////| 
    48                              <1> 		;           |            | 
    49                              <1> 
    50                              <1> 
    51                              <1>         BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    52                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    53                              <1>         SECT_SIZE			equ		(512)			; セクタサイズ
    54                              <1>         BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    55                              <1> 
    56                              <1>         E820_RECORD_SIZE	equ		20
    13                                  %include	"../include/macro.s"
    14                              <1> ;************************************************************************
    15                              <1> ; 関数呼び出し用マクロ
    16                              <1> ;
    17                              <1> ; 使い方：
    18                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    19                              <1> ;
    20                              <1> ;************************************************************************
    21                              <1> 
    22                              <1> %macro cdecl 1-*.nolist
    23                              <1> 
    24                              <1>     %rep %0 - 1
    25                              <1>         push    %{-1:-1}
    26                              <1>         %rotate -1
    27                              <1>     %endrep
    28                              <1>     %rotate -1
    29                              <1> 
    30                              <1>         call    %1
    31                              <1> 
    32                              <1>     %if 1 < %0
    33                              <1>         add     sp,(__BITS__ >> 3) * (%0 - 1)
    34                              <1>     %endif
    35                              <1> 
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> ;************************************************************************
    39                              <1> ;	構造体
    40                              <1> ;************************************************************************
    41                              <1> 
    42                              <1> ;-----------------------------------------------
    43                              <1> ;	ドライブパラメータ
    44                              <1> ;-----------------------------------------------
    45                              <1> struc drive
    46 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
    47 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
    48 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
    49 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
    50                              <1> endstruc
    14                                  
    15                                  		ORG		BOOT_LOAD						; ロードアドレスをアセンブラに指示
    16                                  
    17                                  ;************************************************************************
    18                                  ;	エントリポイント
    19                                  ;************************************************************************
    20                                  entry:
    21                                  		;---------------------------------------
    22                                  		; BPB(BIOS Parameter Block)
    23                                  		;---------------------------------------
    24 00000000 EB58                    		jmp		ipl								; IPLへジャンプ
    25 00000002 90<rep 58h>             		times	90 - ($ - $$) db 0x90			; 
    26                                  
    27                                  		;---------------------------------------
    28                                  		; IPL(Initial Program Loader)
    29                                  		;---------------------------------------
    30                                  ipl:
    31 0000005A FA                      		cli										; // 割り込み禁止
    32                                  
    33 0000005B B80000                  		mov		ax, 0x0000						; AX = 0x0000;
    34 0000005E 8ED8                    		mov		ds, ax							; DS = 0x0000;
    35 00000060 8EC0                    		mov		es, ax							; ES = 0x0000;
    36 00000062 8ED0                    		mov		ss, ax							; SS = 0x0000;
    37 00000064 BC007C                  		mov		sp, BOOT_LOAD					; SP = 0x7C00;
    38                                  
    39 00000067 FB                      		sti										; // 割り込み許可
    40                                  
    41 00000068 8816[B800]              		mov		[BOOT + drive.no], dl			; ブートドライブを保存
    42                                  
    43                                  		;---------------------------------------
    44                                  		; 文字列を表示
    45                                  		;---------------------------------------
    46 0000006C 68[9900]E84E0083C4-     		cdecl	puts, .s0						; puts(.s0);
    46 00000074 02                 
    47                                  
    48                                          ; 残りのセクタを全て読み込む
    49                                  		;---------------------------------------
    50 00000075 BB0F00                  		mov		bx, BOOT_SECT - 1				; BX = 残りのブートセクタ数;
    51 00000078 B9007E                  		mov		cx, BOOT_LOAD + SECT_SIZE		; CX = 次のロードアドレス;
    52                                  
    53 0000007B 515368[B800]E89B00-     		cdecl	read_chs, BOOT, bx, cx			; AX = read_chs(.chs, bx, cx);
    53 00000083 83C406             
    54                                  
    55 00000086 39D8                    		cmp		ax, bx							; if (AX != 残りのセクタ数)
    56 00000088 740C                    .10Q:	jz		.10E							; {
    57 0000008A 68[A600]E8300083C4-     .10T:	cdecl	puts, .e0						;   puts(.e0);
    57 00000092 02                 
    58 00000093 E84900                  		call	reboot							;   reboot(); // 再起動
    59                                  .10E:											; }
    60                                  
    61                                  		;---------------------------------------
    62                                  		; 次のステージへ移行
    63                                  		;---------------------------------------
    64 00000096 E96305                  		jmp		stage_2							; ブート処理の第2ステージ
    65                                  
    66                                  		;---------------------------------------
    67                                  		; データ
    68                                  		;---------------------------------------
    69 00000099 426F6F74696E672E2E-     .s0		db	"Booting...", 0x0A, 0x0D, 0
    69 000000A2 2E0A0D00           
    70 000000A6 4572726F723A736563-     .e0		db	"Error:sector read", 0
    70 000000AF 746F72207265616400 
    71                                  
    72                                  ;************************************************************************
    73                                  ;	ブートドライブに関する情報
    74                                  ;************************************************************************
    75                                  ALIGN 2, db 0
    76                                  BOOT:											; ブートドライブに関する情報
    77                                  	istruc	drive
    78 000000B8 0000                    		at	drive.no,		dw	0				; ドライブ番号
    79 000000BA 0000                    		at	drive.cyln,		dw	0				; C:シリンダ
    80 000000BC 0000                    		at	drive.head,		dw	0				; H:ヘッド
    81 000000BE 0200                    		at	drive.sect,		dw	2				; S:セクタ
    82                                  	iend
    83                                  
    84                                  ;************************************************************************
    85                                  ;	モジュール
    86                                  ;************************************************************************
    87                                  %include	"../modules/real/puts.s"
    88                              <1> ;************************************************************************
    89                              <1> ;	文字列表示
    90                              <1> ;------------------------------------------------------------------------
    91                              <1> ;	BIOS を使用
    92                              <1> ;========================================================================
    93                              <1> ;■書式		: void puts(str);
    94                              <1> ;
    95                              <1> ;■引数
    96                              <1> ;	str		: 文字列のアドレス
    97                              <1> ;
    98                              <1> ;■戻り値	: 無し
    99                              <1> ;************************************************************************
   100                              <1> puts:
   101                              <1> 		;---------------------------------------
   102                              <1> 		; 【スタックフレームの構築】
   103                              <1> 		;---------------------------------------
   104                              <1> 												; ------|--------
   105                              <1> 												;    + 4| 文字列のアドレス
   106                              <1> 												;    + 2| IP（戻り番地）
   107 000000C0 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   108 000000C1 89E5                <1> 		mov		bp, sp							; ------+--------
   109                              <1> 
   110                              <1> 		;---------------------------------------
   111                              <1> 		; 【レジスタの保存】
   112                              <1> 		;---------------------------------------
   113 000000C3 50                  <1> 		push	ax
   114 000000C4 53                  <1> 		push	bx
   115 000000C5 56                  <1> 		push	si
   116                              <1> 
   117                              <1> 		;---------------------------------------
   118                              <1> 		; 引数を取得
   119                              <1> 		;---------------------------------------
   120 000000C6 8B7604              <1> 		mov		si, [bp + 4]					; SI = 文字列のアドレス;
   121                              <1> 
   122                              <1> 		;---------------------------------------
   123                              <1> 		; 【処理の開始】
   124                              <1> 		;---------------------------------------
   125 000000C9 B40E                <1> 		mov		ah, 0x0E						; // テレタイプ式1文字出力
   126 000000CB BB0000              <1> 		mov		bx, 0x0000						; // ページ番号と文字色を0に設定
   127 000000CE FC                  <1> 		cld										; DF = 0; // アドレス加算
   128                              <1> .10L:											; do
   129                              <1> 												; {
   130 000000CF AC                  <1> 		lodsb									;   AL = *SI++;
   131                              <1> 												;   
   132 000000D0 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   133 000000D2 7404                <1> 		je		.10E							;     break;
   134                              <1> 												;   
   135 000000D4 CD10                <1> 		int		0x10							;   Int10(0x0E, AL); // 文字出力
   136 000000D6 EBF7                <1> 		jmp		.10L							;   
   137                              <1> .10E:											; } while (1);
   138                              <1> 
   139                              <1> 		;---------------------------------------
   140                              <1> 		; 【レジスタの復帰】
   141                              <1> 		;---------------------------------------
   142 000000D8 5E                  <1> 		pop		si
   143 000000D9 5B                  <1> 		pop		bx
   144 000000DA 58                  <1> 		pop		ax
   145                              <1> 
   146                              <1> 		;---------------------------------------
   147                              <1> 		; 【スタックフレームの破棄】
   148                              <1> 		;---------------------------------------
   149 000000DB 89EC                <1> 		mov		sp, bp
   150 000000DD 5D                  <1> 		pop		bp
   151                              <1> 
   152 000000DE C3                  <1> 		ret
   153                              <1> 
    88                                  %include	"../modules/real/reboot.s"
    89                              <1> ;************************************************************************
    90                              <1> ;	メッセージを表示して再起動を行う
    91                              <1> ;========================================================================
    92                              <1> ;■書式		: void reboot(void);
    93                              <1> ;
    94                              <1> ;■引数		: 無し
    95                              <1> ;
    96                              <1> ;■戻り値;	: 無し
    97                              <1> ;************************************************************************
    98                              <1> reboot:
    99                              <1> 		;---------------------------------------
   100                              <1> 		; メッセージを表示
   101                              <1> 		;---------------------------------------
   102 000000DF 68[FB00]E8DBFF83C4- <1> 		cdecl	puts, .s0						; // 再起動メッセージを表示
   102 000000E7 02                  <1>
   103                              <1> 
   104                              <1> 		;---------------------------------------
   105                              <1> 		; キー入力待ち
   106                              <1> 		;---------------------------------------
   107                              <1> .10L:											; do
   108                              <1> 												; {
   109 000000E8 B410                <1> 		mov		ah, 0x10						;   // キー入力待ち
   110 000000EA CD16                <1> 		int		0x16							;   AL = BIOS(0x16, 0x10);
   111                              <1> 												;   
   112 000000EC 3C20                <1> 		cmp		al, ' '							;   ZF = AL == ' ';
   113 000000EE 75F8                <1> 		jne		.10L							; } while (!ZF);
   114                              <1> 
   115                              <1> 		;---------------------------------------
   116                              <1> 		; 改行を出力
   117                              <1> 		;---------------------------------------
   118 000000F0 68[1901]E8CAFF83C4- <1> 		cdecl	puts, .s1						; 改行
   118 000000F8 02                  <1>
   119                              <1> 
   120                              <1> 		;---------------------------------------
   121                              <1> 		; 再起動
   122                              <1> 		;---------------------------------------
   123 000000F9 CD19                <1> 		int		0x19							; BIOS(0x19);       // reboot();
   124                              <1> 
   125                              <1> 		;---------------------------------------
   126                              <1> 		; 文字列データ
   127                              <1> 		;---------------------------------------
   128 000000FB 0A0D50757368205350- <1> .s0		db	0x0A, 0x0D, "Push SPACE key to reboot...", 0
   128 00000104 414345206B65792074- <1>
   128 0000010D 6F207265626F6F742E- <1>
   128 00000116 2E2E00              <1>
   129 00000119 0A0D0A0D00          <1> .s1		db	0x0A, 0x0D, 0x0A, 0x0D, 0
   130                              <1> 
    89                                  %include	"../modules/real/read_chs.s"
    90                              <1> ;************************************************************************
    91                              <1> ;	セクタ読み込み（CHS指定）
    92                              <1> ;------------------------------------------------------------------------
    93                              <1> ;	BIOSコール（INT13 AH=0x02）を使ったセクタ読み出し
    94                              <1> ;========================================================================
    95                              <1> ;■書式		: WORD read_chs(drive, sect, dst);
    96                              <1> ;
    97                              <1> ;■引数
    98                              <1> ;	drive	: drive構造体のアドレス
    99                              <1> ;	sect	: 読み出しセクタ数
   100                              <1> ;	dst		: 読み出し先アドレス
   101                              <1> ;
   102                              <1> ;■戻り値	: 読み込んだセクタ数
   103                              <1> ;************************************************************************
   104                              <1> read_chs:
   105                              <1> 		;---------------------------------------
   106                              <1> 		; 【スタックフレームの構築】
   107                              <1> 		;---------------------------------------
   108                              <1> 												; ------|--------
   109                              <1> 												;    + 8| コピー先
   110                              <1> 												;    + 6| セクタ数
   111                              <1> 												;    + 4| パラメータバッファ
   112                              <1> 												; ------+----------------
   113                              <1> 												;    + 2| IP（戻り番地）
   114 0000011E 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   115 0000011F 89E5                <1> 		mov		bp, sp							; ------+--------
   116 00000121 6A03                <1> 		push	3								;    - 2| retry = 3; // リトライ回数
   117 00000123 6A00                <1> 		push	0								;    - 4| sect  = 0; // 読み込みセクタ数
   118                              <1> 
   119                              <1> 		;---------------------------------------
   120                              <1> 		; 【レジスタの保存】
   121                              <1> 		;---------------------------------------
   122 00000125 53                  <1> 		push	bx
   123 00000126 51                  <1> 		push	cx
   124 00000127 52                  <1> 		push	dx
   125 00000128 06                  <1> 		push	es
   126 00000129 56                  <1> 		push	si
   127                              <1> 
   128                              <1> 		;---------------------------------------
   129                              <1> 		; 【処理の開始】
   130                              <1> 		;---------------------------------------
   131 0000012A 8B7604              <1> 		mov		si, [bp + 4]					; SI = SRCバッファ;
   132                              <1> 
   133                              <1> 		;---------------------------------------
   134                              <1> 		; CXレジスタの設定
   135                              <1> 		;（BIOSコールの呼び出しに適した形に変換）
   136                              <1> 		;---------------------------------------
   137 0000012D 8A6C02              <1> 		mov		ch, [si + drive.cyln + 0]		; CH   = シリンダ番号（下位バイト）
   138 00000130 8A4C03              <1> 		mov		cl, [si + drive.cyln + 1]		; CL   = シリンダ番号（上位バイト）
   139 00000133 C0E106              <1> 		shl		cl, 6							; CL <<= 6; // 最上位2ビットにシフト
   140 00000136 0A4C06              <1> 		or		cl, [si + drive.sect]			; CL  |= セクタ番号;
   141                              <1> 
   142                              <1> 		;---------------------------------------
   143                              <1> 		; セクタ読み込み
   144                              <1> 		;---------------------------------------
   145 00000139 8A7404              <1> 		mov		dh, [si + drive.head]			; DH = ヘッド番号;
   146 0000013C 8A14                <1> 		mov		dl, [si + 0]					; DL = ドライブ番号;
   147 0000013E B80000              <1> 		mov		ax, 0x0000						; AX = 0x0000;
   148 00000141 8EC0                <1> 		mov		es, ax							; ES = セグメント
   149 00000143 8B5E08              <1> 		mov		bx, [bp + 8]					; BX = コピー先;
   150                              <1> .10L:											; do
   151                              <1> 												; {
   152 00000146 B402                <1> 		mov		ah, 0x02						;   AH = セクタ読み込み
   153 00000148 8A4606              <1> 		mov		al, [bp + 6]					;   AL = セクタ数
   154                              <1> 												;   
   155 0000014B CD13                <1> 		int		0x13							;   CF = BIOS(0x13, 0x02);
   156 0000014D 7304                <1> 		jnc		.11E							;   if (CF)
   157                              <1> 												;   {
   158 0000014F B000                <1> 		mov		al, 0							;     AL = 0;
   159 00000151 EB0C                <1> 		jmp		.10E							;     break;
   160                              <1> .11E:											;   }
   161                              <1> 												;   
   162 00000153 3C00                <1> 		cmp		al, 0							;   if (読み込んだセクタがあれば)
   163 00000155 7508                <1> 		jne		.10E							;     break;
   164                              <1> 												;   
   165 00000157 B80000              <1> 		mov		ax, 0							;   ret = 0; // 戻り値を設定
   166 0000015A FF4EFE              <1> 		dec		word [bp - 2]					; }
   167 0000015D 75E7                <1> 		jnz		.10L							; while (--retry);
   168                              <1> .10E:
   169 0000015F B400                <1> 		mov		ah, 0							; AH = 0; // ステータス情報は破棄
   170                              <1> 
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 【レジスタの復帰】
   173                              <1> 		;---------------------------------------
   174 00000161 5E                  <1> 		pop		si
   175 00000162 07                  <1> 		pop		es
   176 00000163 5A                  <1> 		pop		dx
   177 00000164 59                  <1> 		pop		cx
   178 00000165 5B                  <1> 		pop		bx
   179                              <1> 
   180                              <1> 		;---------------------------------------
   181                              <1> 		; 【スタックフレームの破棄】
   182                              <1> 		;---------------------------------------
   183 00000166 89EC                <1> 		mov		sp, bp
   184 00000168 5D                  <1> 		pop		bp
   185                              <1> 
   186 00000169 C3                  <1> 		ret
   187                              <1> 
    90                                  
    91                                  ;************************************************************************
    92                                  ;	ブートフラグ（先頭512バイトの終了）
    93                                  ;************************************************************************
    94 0000016A 00<rep 94h>             		times	510 - ($ - $$) db 0x00
    95 000001FE 55AA                    		db	0x55, 0xAA
    96                                      
    97                                  ;************************************************************************
    98                                  ;	リアルモード時に取得した情報
    99                                  ;************************************************************************
   100                                  FONT:											; フォント
   101 00000200 0000                    .seg:	dw	0
   102 00000202 0000                    .off:	dw	0
   103                                  ACPI_DATA:										; ACPI data
   104 00000204 00000000                .adr:	dd	0									; ACPI data address
   105 00000208 00000000                .len:	dd	0									; ACPI data length
   106                                  
   107                                  ;************************************************************************
   108                                  ;	モジュール（先頭512バイト以降に配置）
   109                                  ;************************************************************************
   110                                  %include	"../modules/real/itoa.s"
   111                              <1> ;************************************************************************
   112                              <1> ;	数値を文字に変換
   113                              <1> ;========================================================================
   114                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
   115                              <1> ;
   116                              <1> ;■引数
   117                              <1> ;	num		: 変換する数値
   118                              <1> ;	buff	: 保存先バッファアドレス
   119                              <1> ;	size	: 保存先バッファサイズ
   120                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
   121                              <1> ;	flags	: フラグ
   122                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
   123                              <1> ;			:      : 0=空白を' '（スペース）で埋める
   124                              <1> ;			:   B1 : 1=＋/-符号を表示する
   125                              <1> ;			:      : 0=＋/-符号を表示しない
   126                              <1> ;			:   B0 : 1=符号付き正数として扱う
   127                              <1> ;			:      : 0=符号無し正数として扱う
   128                              <1> ;
   129                              <1> ;■戻り値	: 無し
   130                              <1> ;************************************************************************
   131                              <1> itoa:
   132                              <1> 		;---------------------------------------
   133                              <1> 		; 【スタックフレームの構築】
   134                              <1> 		;---------------------------------------
   135                              <1> 												; ------|--------
   136                              <1> 												;    +12| フラグ
   137                              <1> 												;    +10| 基数
   138                              <1> 												;    + 8| バッファサイズ
   139                              <1> 												;    + 6| バッファアドレス
   140                              <1> 												;    + 4| 数値
   141                              <1> 												; ------|--------
   142                              <1> 												;    + 2| IP（戻り番地）
   143 0000020C 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   144 0000020D 89E5                <1> 		mov		bp, sp							; ------+--------
   145                              <1> 
   146                              <1> 		;---------------------------------------
   147                              <1> 		; 【レジスタの保存】
   148                              <1> 		;---------------------------------------
   149 0000020F 50                  <1> 		push	ax
   150 00000210 53                  <1> 		push	bx
   151 00000211 51                  <1> 		push	cx
   152 00000212 52                  <1> 		push	dx
   153 00000213 56                  <1> 		push	si
   154 00000214 57                  <1> 		push	di
   155                              <1> 
   156                              <1> 		;---------------------------------------
   157                              <1> 		; 引数を取得
   158                              <1> 		;---------------------------------------
   159 00000215 8B4604              <1> 		mov		ax, [bp + 4]					; val  = 数値;
   160 00000218 8B7606              <1> 		mov		si, [bp + 6]					; dst  = バッファアドレス;
   161 0000021B 8B4E08              <1> 		mov		cx, [bp + 8]					; size = 残りバッファサイズ;
   162                              <1> 
   163 0000021E 89F7                <1> 		mov		di, si							; // バッファの最後尾
   164 00000220 01CF                <1> 		add		di, cx							; dst  = &dst[size - 1];
   165 00000222 4F                  <1> 		dec		di								; 
   166                              <1> 
   167 00000223 8B5E0C              <1> 		mov		bx, [bp +12]					; flags = オプション;
   168                              <1> 
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 符号付き判定
   171                              <1> 		;---------------------------------------
   172 00000226 F7C30100            <1> 		test	bx, 0b0001						; if (flags & 0x01)// 符号付き
   173 0000022A 7408                <1> .10Q:	je		.10E							; {
   174 0000022C 83F800              <1> 		cmp		ax, 0							;   if (val < 0)
   175 0000022F 7D03                <1> .12Q:	jge		.12E							;   {
   176 00000231 83CB02              <1> 		or		bx, 0b0010						;     flags |=  2; // 符号表示
   177                              <1> .12E:											;   }
   178                              <1> .10E:											; }
   179                              <1> 
   180                              <1> 		;---------------------------------------
   181                              <1> 		; 符号出力判定
   182                              <1> 		;---------------------------------------
   183 00000234 F7C30200            <1> 		test	bx, 0b0010						; if (flags & 0x02)// 符号出力判定
   184 00000238 7410                <1> .20Q:	je		.20E							; {
   185 0000023A 83F800              <1> 		cmp		ax, 0							;   if (val < 0)
   186 0000023D 7D07                <1> .22Q:	jge		.22F							;   {
   187 0000023F F7D8                <1> 		neg		ax								;     val *= -1;   // 符号反転
   188 00000241 C6042D              <1> 		mov		[si], byte '-'					;     *dst = '-';  // 符号表示
   189 00000244 EB03                <1> 		jmp		.22E							;   }
   190                              <1> .22F:											;   else
   191                              <1> 												;   {
   192 00000246 C6042B              <1> 		mov		[si], byte '+'					;     *dst = '+';  // 符号表示
   193                              <1> .22E:											;   }
   194 00000249 49                  <1> 		dec		cx								;   size--;        // 残りバッファサイズの減算
   195                              <1> .20E:											; }
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; ASCII変換
   199                              <1> 		;---------------------------------------
   200 0000024A 8B5E0A              <1> 		mov		bx, [bp +10]					; BX = 基数;
   201                              <1> .30L:											; do
   202                              <1> 												; {
   203 0000024D BA0000              <1> 		mov		dx, 0							;   
   204 00000250 F7F3                <1> 		div		bx								;   DX = DX:AX % 基数;
   205                              <1> 												;   AX = DX:AX / 基数;
   206                              <1> 												;   
   207 00000252 89D6                <1> 		mov		si, dx							;   // テーブル参照
   208 00000254 8A94[7C02]          <1> 		mov		dl, byte [.ascii + si]			;   DL = ASCII[DX];
   209                              <1> 												;   
   210 00000258 8815                <1> 		mov		[di], dl						;   *dst = DL;
   211 0000025A 4F                  <1> 		dec		di								;   dst--;
   212                              <1> 												;   
   213 0000025B 83F800              <1> 		cmp		ax, 0							;   
   214 0000025E E0ED                <1> 		loopnz	.30L							; } while (AX);
   215                              <1> .30E:
   216                              <1> 
   217                              <1> 		;---------------------------------------
   218                              <1> 		; 空欄を埋める
   219                              <1> 		;---------------------------------------
   220 00000260 83F900              <1> 		cmp		cx, 0							; if (size)
   221 00000263 740D                <1> .40Q:	je		.40E							; {
   222 00000265 B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   223 00000267 837E0C04            <1> 		cmp		[bp +12], word 0b0100			;   if (flags & 0x04)
   224 0000026B 7502                <1> .42Q:	jne		.42E							;   {
   225 0000026D B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   226                              <1> .42E:											;   }
   227 0000026F FD                  <1> 		std										;   // DF = 1（-方向）
   228 00000270 F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   229                              <1> .40E:											; }
   230                              <1> 
   231                              <1> 		;---------------------------------------
   232                              <1> 		; 【レジスタの復帰】
   233                              <1> 		;---------------------------------------
   234 00000272 5F                  <1> 		pop		di
   235 00000273 5E                  <1> 		pop		si
   236 00000274 5A                  <1> 		pop		dx
   237 00000275 59                  <1> 		pop		cx
   238 00000276 5B                  <1> 		pop		bx
   239 00000277 58                  <1> 		pop		ax
   240                              <1> 
   241                              <1> 		;---------------------------------------
   242                              <1> 		; 【スタックフレームの破棄】
   243                              <1> 		;---------------------------------------
   244 00000278 89EC                <1> 		mov		sp, bp
   245 0000027A 5D                  <1> 		pop		bp
   246                              <1> 
   247 0000027B C3                  <1> 		ret
   248                              <1> 
   249 0000027C 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   249 00000285 39414243444546      <1>
   250                              <1> 
   111                                  %include	"../modules/real/get_drive_param.s"
   112                              <1> ;************************************************************************
   113                              <1> ;	ドライブ情報の取得(LBA変換に必要な情報)
   114                              <1> ;------------------------------------------------------------------------
   115                              <1> ;	アクセス可能な最大セクタをdrive構造体に設定する
   116                              <1> ;	注）ドライブ番号（drive.no）を設定後に呼び出す事
   117                              <1> ;========================================================================
   118                              <1> ;■書式		: WORD get_drive_param(drive);
   119                              <1> ;
   120                              <1> ;■引数
   121                              <1> ;	drive	: drive構造体のアドレス
   122                              <1> ;
   123                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   124                              <1> ;************************************************************************
   125                              <1> get_drive_param:
   126                              <1> 		;---------------------------------------
   127                              <1> 		; 【スタックフレームの構築】
   128                              <1> 		;---------------------------------------
   129                              <1> 												; ------|--------
   130                              <1> 												;    + 4| パラメータバッファ
   131                              <1> 												;    + 2| IP（戻り番地）
   132 0000028C 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   133 0000028D 89E5                <1> 		mov		bp, sp							; ------+--------
   134                              <1> 
   135                              <1> 		;---------------------------------------
   136                              <1> 		; 【レジスタの保存】
   137                              <1> 		;---------------------------------------
   138 0000028F 53                  <1> 		push	bx
   139 00000290 51                  <1> 		push	cx
   140 00000291 06                  <1> 		push	es
   141 00000292 56                  <1> 		push	si
   142 00000293 57                  <1> 		push	di
   143                              <1> 
   144                              <1> 		;---------------------------------------
   145                              <1> 		; 【処理の開始】
   146                              <1> 		;---------------------------------------
   147 00000294 8B7604              <1> 		mov		si, [bp + 4]					; SI = バッファ
   148                              <1> 
   149 00000297 B80000              <1> 		mov		ax, 0							; Disk Base Table Pointerの初期化
   150 0000029A 8EC0                <1> 		mov		es, ax							; ES = 0;
   151 0000029C 89C7                <1> 		mov		di, ax							; DI = 0;
   152                              <1> 
   153 0000029E B408                <1> 		mov		ah, 0x08						; // get drive parameters 
   154 000002A0 8A14                <1> 		mov		dl, [si + drive.no]				; DL = ドライブ番号
   155 000002A2 CD13                <1> 		int		0x13							; CF = BIOS(0x13, 0x08);
   156 000002A4 721B                <1> .10Q:	jc		.10F							; if (0 == CF)
   157                              <1> .10T:											; {
   158 000002A6 88C8                <1> 		mov		al, cl							;   AX = セクタ数
   159 000002A8 83E03F              <1> 		and		ax, 0x3F						;   // 下位6ビットのみ有効
   160                              <1> 
   161 000002AB C0E906              <1> 		shr		cl, 6							;   CX = シリンダ数
   162 000002AE C1C908              <1> 		ror		cx, 8							;   
   163 000002B1 41                  <1> 		inc		cx								;   
   164                              <1> 
   165 000002B2 0FB6DE              <1> 		movzx	bx, dh							;   BX = ヘッド数（1ベース）
   166 000002B5 43                  <1> 		inc		bx								;   
   167                              <1> 
   168 000002B6 894C02              <1> 		mov		[si + drive.cyln], cx			;   drive.syln = CX; // C:シリンダ数
   169 000002B9 895C04              <1> 		mov		[si + drive.head], bx			;   drive.head = BX; // H:ヘッド数
   170 000002BC 894406              <1> 		mov		[si + drive.sect], ax			;   drive.sect = AX; // S:セクタ数
   171                              <1> 
   172 000002BF EB03                <1> 		jmp		.10E							; }
   173                              <1> .10F:											; else
   174                              <1> 												; {
   175 000002C1 B80000              <1> 		mov		ax, 0							;   AX = 0; // 失敗
   176                              <1> .10E:											; }
   177                              <1> 
   178                              <1> 		;---------------------------------------
   179                              <1> 		; 【レジスタの復帰】
   180                              <1> 		;---------------------------------------
   181 000002C4 5F                  <1> 		pop		di
   182 000002C5 5E                  <1> 		pop		si
   183 000002C6 07                  <1> 		pop		es
   184 000002C7 59                  <1> 		pop		cx
   185 000002C8 5B                  <1> 		pop		bx
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 【スタックフレームの破棄】
   189                              <1> 		;---------------------------------------
   190 000002C9 89EC                <1> 		mov		sp, bp
   191 000002CB 5D                  <1> 		pop		bp
   192                              <1> 
   193 000002CC C3                  <1> 		ret
   194                              <1> 
   112                                  %include	"../modules/real/get_font_adr.s"
   113                              <1> ;************************************************************************
   114                              <1> ;	BIOSフォントアドレスを取得
   115                              <1> ;------------------------------------------------------------------------
   116                              <1> ;	フォント8x16ドットのフォントアドレスを取得
   117                              <1> ;========================================================================
   118                              <1> ;■書式		: void get_font_adr(adr);
   119                              <1> ;
   120                              <1> ;■引数
   121                              <1> ;	adr		: フォントアドレス格納位置
   122                              <1> ;
   123                              <1> ;■戻り値;	: 無し
   124                              <1> ;************************************************************************
   125                              <1> get_font_adr:
   126                              <1> 		;---------------------------------------
   127                              <1> 		; 【スタックフレームの構築】
   128                              <1> 		;---------------------------------------
   129                              <1> 												; ------|--------
   130                              <1> 												;    + 4| パラメータバッファ
   131                              <1> 												;    + 2| IP（戻り番地）
   132 000002CD 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   133 000002CE 89E5                <1> 		mov		bp, sp							; ------+--------
   134                              <1> 
   135                              <1> 		;---------------------------------------
   136                              <1> 		; 【レジスタの保存】
   137                              <1> 		;---------------------------------------
   138 000002D0 50                  <1> 		push	ax
   139 000002D1 53                  <1> 		push	bx
   140 000002D2 56                  <1> 		push	si
   141 000002D3 06                  <1> 		push	es
   142 000002D4 55                  <1> 		push	bp
   143                              <1> 
   144                              <1> 		;---------------------------------------
   145                              <1> 		; 引数を取得
   146                              <1> 		;---------------------------------------
   147 000002D5 8B7604              <1> 		mov		si, [bp + 4]					; dst  =FONTアドレスの保存先;
   148                              <1> 
   149                              <1> 		;---------------------------------------
   150                              <1> 		; フォントアドレスの取得
   151                              <1> 		;---------------------------------------
   152 000002D8 B83011              <1> 		mov		ax, 0x1130						; // フォントアドレスの取得
   153 000002DB B706                <1> 		mov		bh, 0x06						; 8x16 font (vga/mcga) 
   154 000002DD CD10                <1> 		int		10h								; ES:BP=FONT ADDRESS
   155                              <1> 
   156                              <1> 		;---------------------------------------
   157                              <1> 		; FONTアドレスを保存
   158                              <1> 		;---------------------------------------
   159 000002DF 8C04                <1> 		mov		[si + 0], es					; dst[0] = セグメント;
   160 000002E1 896C02              <1> 		mov		[si + 2], bp					; dst[1] = オフセット;
   161                              <1> 
   162                              <1> 		;---------------------------------------
   163                              <1> 		; 【レジスタの復帰】
   164                              <1> 		;---------------------------------------
   165 000002E4 5D                  <1> 		pop		bp
   166 000002E5 07                  <1> 		pop		es
   167 000002E6 5E                  <1> 		pop		si
   168 000002E7 5B                  <1> 		pop		bx
   169 000002E8 58                  <1> 		pop		ax
   170                              <1> 
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 【スタックフレームの破棄】
   173                              <1> 		;---------------------------------------
   174 000002E9 89EC                <1> 		mov		sp, bp
   175 000002EB 5D                  <1> 		pop		bp
   176                              <1> 
   177 000002EC C3                  <1> 		ret
   178                              <1> 
   113                                  %include	"../modules/real/get_mem_info.s"
   114                              <1> ;************************************************************************
   115                              <1> ;	メモリ情報の表示
   116                              <1> ;------------------------------------------------------------------------
   117                              <1> ;	ACPIデータのアドレスと長さをグローバル変数に保存する
   118                              <1> ;========================================================================
   119                              <1> ;■書式		: void get_mem_info(void);
   120                              <1> ;
   121                              <1> ;■引数		: 無し
   122                              <1> ;
   123                              <1> ;■戻り値;	: 無し
   124                              <1> ;************************************************************************
   125                              <1> get_mem_info:
   126                              <1> 		;---------------------------------------
   127                              <1> 		; 【レジスタの保存】
   128                              <1> 		;---------------------------------------
   129 000002ED 6650                <1> 		push	eax
   130 000002EF 6653                <1> 		push	ebx
   131 000002F1 6651                <1> 		push	ecx
   132 000002F3 6652                <1> 		push	edx
   133 000002F5 56                  <1> 		push	si
   134 000002F6 57                  <1> 		push	di
   135 000002F7 55                  <1> 		push	bp
   136                              <1> 
   137                              <1> 		;---------------------------------------
   138                              <1> 		; 【処理の開始】
   139                              <1> 		;---------------------------------------
   140 000002F8 68[8C03]E8C2FD83C4- <1> 		cdecl	puts, .s0						; // ヘッダを表示
   140 00000300 02                  <1>
   141                              <1> 
   142 00000301 BD0000              <1> 		mov		bp, 0							; lines = 0; // 行数
   143 00000304 66BB00000000        <1> 		mov		ebx, 0							; index = 0; // インデックスを初期化
   144                              <1> .10L:											; do
   145                              <1> 												; {
   146 0000030A 66B820E80000        <1> 		mov		eax, 0x0000E820					;   EAX   = 0xE820
   147                              <1> 												;   EBX   = インデックス
   148 00000310 66B914000000        <1> 		mov		ecx, E820_RECORD_SIZE			;   ECX   = 要求バイト数
   149 00000316 66BA50414D53        <1> 		mov 	edx, 'PAMS'						;   EDX   = 'SMAP';
   150 0000031C BF[1804]            <1> 		mov		di, .b0							;   ES:DI = バッファ
   151 0000031F CD15                <1> 		int		0x15							;   BIOS(0x15, 0xE820);
   152                              <1> 
   153                              <1> 		; コマンドに対応か？
   154 00000321 663D50414D53        <1> 		cmp		eax, 'PAMS'						;   if ('SMAP' != EAX)
   155 00000327 7402                <1> 		je		.12E							;   {
   156 00000329 EB4C                <1> 		jmp		.10E							;     break; // コマンド未対応
   157                              <1> .12E:											;   }
   158                              <1> 
   159                              <1> 		; エラー無し？							;   if (CF)
   160 0000032B 7302                <1> 		jnc		.14E							;   {
   161 0000032D EB48                <1> 		jmp		.10E							;     break; // エラー発生
   162                              <1> .14E:											;   }
   163                              <1> 
   164                              <1> 		; 1レコード分のメモリ情報を表示
   165 0000032F 57E8F90083C402      <1> 		cdecl	put_mem_info, di				;   1レコード分のメモリ情報を表示
   166                              <1> 
   167                              <1> 		; ACPI dataのアドレスを取得
   168 00000336 668B4510            <1> 		mov		eax, [di + 16]					;   EAX = レコードタイプ;
   169 0000033A 6683F803            <1> 		cmp		eax, 3							;   if (3 == EAX) // ACPI data
   170 0000033E 750F                <1> 		jne		.15E							;   {
   171                              <1> 												;     
   172 00000340 668B05              <1> 		mov		eax, [di +  0]					;     EAX   = BASEアドレス;
   173 00000343 66A3[0402]          <1> 		mov		[ACPI_DATA.adr], eax			;     ACPI_DATA.adr = EAX;
   174                              <1> 												;     
   175 00000347 668B4508            <1> 		mov		eax, [di +  8]					;     EAX   = Length;
   176 0000034B 66A3[0802]          <1> 		mov		[ACPI_DATA.len], eax			;     ACPI_DATA.len = EAX;
   177                              <1> .15E:											;   }
   178                              <1> 
   179 0000034F 6683FB00            <1> 		cmp		ebx, 0							;   if (0 != EBX)
   180 00000353 741C                <1> 		jz		.16E							;   {
   181                              <1> 												;     
   182 00000355 45                  <1> 		inc		bp								;     lines++;
   183 00000356 83E507              <1> 		and		bp, 0x07						;     lines &= 0x07;
   184 00000359 7516                <1> 		jnz		.16E							;     if (0 == lines)
   185                              <1> 												;     {
   186 0000035B 68[FF03]E85FFD83C4- <1> 		cdecl	puts, .s2						;       // 中断メッセージを表示
   186 00000363 02                  <1>
   187                              <1> 												;       
   188 00000364 B410                <1> 		mov		ah, 0x10						;       // キー入力待ち
   189 00000366 CD16                <1> 		int		0x16							;       AL = BIOS(0x16, 0x10);
   190                              <1> 												;       
   191 00000368 68[0A04]E852FD83C4- <1> 		cdecl	puts, .s3						;       // 中断メッセージを消去
   191 00000370 02                  <1>
   192                              <1> 												;     }
   193                              <1> .16E:											;   }
   194                              <1> 												;   
   195 00000371 6683FB00            <1> 		cmp		ebx, 0							;   
   196 00000375 7593                <1> 		jne		.10L							; }
   197                              <1> .10E:											; while (0 != EBX);
   198                              <1> 
   199 00000377 68[CF03]E843FD83C4- <1> 		cdecl	puts, .s1						; // フッダを表示
   199 0000037F 02                  <1>
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; 【レジスタの復帰】
   203                              <1> 		;---------------------------------------
   204 00000380 5D                  <1> 		pop		bp
   205 00000381 5F                  <1> 		pop		di
   206 00000382 5E                  <1> 		pop		si
   207 00000383 665A                <1> 		pop		edx
   208 00000385 6659                <1> 		pop		ecx
   209 00000387 665B                <1> 		pop		ebx
   210 00000389 6658                <1> 		pop		eax
   211                              <1> 
   212 0000038B C3                  <1> 		ret
   213                              <1> 
   214 0000038C 2045383230204D656D- <1> .s0:	db " E820 Memory Map:", 0x0A, 0x0D
   214 00000395 6F7279204D61703A0A- <1>
   214 0000039E 0D                  <1>
   215 0000039F 20426173655F5F5F5F- <1> 		db " Base_____________ Length___________ Type____", 0x0A, 0x0D, 0
   215 000003A8 5F5F5F5F5F5F5F5F5F- <1>
   215 000003B1 204C656E6774685F5F- <1>
   215 000003BA 5F5F5F5F5F5F5F5F5F- <1>
   215 000003C3 20547970655F5F5F5F- <1>
   215 000003CC 0A0D00              <1>
   216 000003CF 202D2D2D2D2D2D2D2D- <1> .s1:	db " ----------------- ----------------- --------", 0x0A, 0x0D, 0
   216 000003D8 2D2D2D2D2D2D2D2D2D- <1>
   216 000003E1 202D2D2D2D2D2D2D2D- <1>
   216 000003EA 2D2D2D2D2D2D2D2D2D- <1>
   216 000003F3 202D2D2D2D2D2D2D2D- <1>
   216 000003FC 0A0D00              <1>
   217 000003FF 203C6D6F72652E2E2E- <1> .s2:	db " <more...>", 0
   217 00000408 3E00                <1>
   218 0000040A 0D2020202020202020- <1> .s3:	db 0x0D, "          ", 0x0D, 0
   218 00000413 20200D00            <1>
   219                              <1> 
   220 00000417 00                  <1> ALIGN 4, db 0
   221 00000418 00<rep 14h>         <1> .b0:	times E820_RECORD_SIZE db 0
   222                              <1> 
   223                              <1> ;************************************************************************
   224                              <1> ;	メモリ情報の表示
   225                              <1> ;========================================================================
   226                              <1> ;■書式		: void put_mem_info(adr);
   227                              <1> ;
   228                              <1> ;■引数
   229                              <1> ;	adr		: メモリ情報を参照するアドレス
   230                              <1> ;
   231                              <1> ;■戻り値;	: 無し
   232                              <1> ;************************************************************************
   233                              <1> put_mem_info:
   234                              <1> 		;---------------------------------------
   235                              <1> 		; 【スタックフレームの構築】
   236                              <1> 		;---------------------------------------
   237                              <1> 												;    + 4| バッファアドレス
   238                              <1> 												;    + 2| IP（戻り番地）
   239 0000042C 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   240 0000042D 89E5                <1> 		mov		bp, sp							; ------+--------
   241                              <1> 
   242                              <1> 		;---------------------------------------
   243                              <1> 		; 【レジスタの保存】
   244                              <1> 		;---------------------------------------
   245 0000042F 53                  <1> 		push	bx
   246 00000430 56                  <1> 		push	si
   247                              <1> 
   248                              <1> 		;---------------------------------------
   249                              <1> 		; 引数を取得
   250                              <1> 		;---------------------------------------
   251 00000431 8B7604              <1> 		mov		si, [bp + 4]					; SI = バッファアドレス;
   252                              <1> 
   253                              <1> 		;---------------------------------------
   254                              <1> 		; レコードの表示
   255                              <1> 		;---------------------------------------
   256                              <1> 
   257                              <1> 		; Base(64bit)
   258 00000434 6A046A106A0468-     <1> 		cdecl	itoa, word [si + 6], .p2 + 0, 4, 16, 0b0100
   258 0000043B [0B05]FF7406E8C9FD- <1>
   258 00000443 83C40A              <1>
   259 00000446 6A046A106A0468-     <1> 		cdecl	itoa, word [si + 4], .p2 + 4, 4, 16, 0b0100
   259 0000044D [0F05]FF7404E8B7FD- <1>
   259 00000455 83C40A              <1>
   260 00000458 6A046A106A0468-     <1> 		cdecl	itoa, word [si + 2], .p3 + 0, 4, 16, 0b0100
   260 0000045F [1405]FF7402E8A5FD- <1>
   260 00000467 83C40A              <1>
   261 0000046A 6A046A106A0468-     <1> 		cdecl	itoa, word [si + 0], .p3 + 4, 4, 16, 0b0100
   261 00000471 [1805]FF34E894FD83- <1>
   261 00000479 C40A                <1>
   262                              <1> 
   263                              <1> 		; Length(64bit)
   264 0000047B 6A046A106A0468-     <1> 		cdecl	itoa, word [si +14], .p4 + 0, 4, 16, 0b0100
   264 00000482 [1D05]FF740EE882FD- <1>
   264 0000048A 83C40A              <1>
   265 0000048D 6A046A106A0468-     <1> 		cdecl	itoa, word [si +12], .p4 + 4, 4, 16, 0b0100
   265 00000494 [2105]FF740CE870FD- <1>
   265 0000049C 83C40A              <1>
   266 0000049F 6A046A106A0468-     <1> 		cdecl	itoa, word [si +10], .p5 + 0, 4, 16, 0b0100
   266 000004A6 [2605]FF740AE85EFD- <1>
   266 000004AE 83C40A              <1>
   267 000004B1 6A046A106A0468-     <1> 		cdecl	itoa, word [si + 8], .p5 + 4, 4, 16, 0b0100
   267 000004B8 [2A05]FF7408E84CFD- <1>
   267 000004C0 83C40A              <1>
   268                              <1> 
   269                              <1> 		; Type(32bit)
   270 000004C3 6A046A106A0468-     <1> 		cdecl	itoa, word [si +18], .p6 + 0, 4, 16, 0b0100
   270 000004CA [2F05]FF7412E83AFD- <1>
   270 000004D2 83C40A              <1>
   271 000004D5 6A046A106A0468-     <1> 		cdecl	itoa, word [si +16], .p6 + 4, 4, 16, 0b0100
   271 000004DC [3305]FF7410E828FD- <1>
   271 000004E4 83C40A              <1>
   272                              <1> 
   273 000004E7 68[0A05]E8D3FB83C4- <1> 		cdecl	puts, .s1						;   // レコード情報を表示
   273 000004EF 02                  <1>
   274                              <1> 
   275 000004F0 8B5C10              <1> 		mov		bx, [si +16]					;   // タイプを文字列で表示
   276 000004F3 83E307              <1> 		and		bx, 0x07						;   BX  = Type(0～5)
   277 000004F6 D1E3                <1> 		shl		bx, 1							;   BX *= 2;   // 要素サイズに変換
   278 000004F8 81C3[8C05]          <1> 		add		bx, .t0							;   BX += .t0; // テーブルの先頭アドレスを加算
   279 000004FC FF37E8BFFB83C402    <1> 		cdecl	puts, word [bx]					;   puts(*BX);
   280                              <1> 
   281                              <1> 		;---------------------------------------
   282                              <1> 		; 【レジスタの復帰】
   283                              <1> 		;---------------------------------------
   284 00000504 5E                  <1> 		pop		si
   285 00000505 5B                  <1> 		pop		bx
   286                              <1> 
   287                              <1> 		;---------------------------------------
   288                              <1> 		; 【スタックフレームの破棄】
   289                              <1> 		;---------------------------------------
   290 00000506 89EC                <1> 		mov		sp, bp
   291 00000508 5D                  <1> 		pop		bp
   292                              <1> 
   293 00000509 C3                  <1> 		ret;
   294                              <1> 
   295 0000050A 20                  <1> .s1:	db " "
   296 0000050B 5A5A5A5A5A5A5A5A5F  <1> .p2:	db "ZZZZZZZZ_"
   297 00000514 5A5A5A5A5A5A5A5A20  <1> .p3:	db "ZZZZZZZZ "
   298 0000051D 5A5A5A5A5A5A5A5A5F  <1> .p4:	db "ZZZZZZZZ_"
   299 00000526 5A5A5A5A5A5A5A5A20  <1> .p5:	db "ZZZZZZZZ "
   300 0000052F 5A5A5A5A5A5A5A5A00  <1> .p6:	db "ZZZZZZZZ", 0
   301                              <1> 
   302 00000538 2028556E6B6E6F776E- <1> .s4:	db " (Unknown)", 0x0A, 0x0D, 0
   302 00000541 290A0D00            <1>
   303 00000545 2028757361626C6529- <1> .s5:	db " (usable)", 0x0A, 0x0D, 0
   303 0000054E 0A0D00              <1>
   304 00000551 202872657365727665- <1> .s6:	db " (reserved)", 0x0A, 0x0D, 0
   304 0000055A 64290A0D00          <1>
   305 0000055F 202841435049206461- <1> .s7:	db " (ACPI data)", 0x0A, 0x0D, 0
   305 00000568 7461290A0D00        <1>
   306 0000056E 202841435049204E56- <1> .s8:	db " (ACPI NVS)", 0x0A, 0x0D, 0
   306 00000577 53290A0D00          <1>
   307 0000057C 2028626164206D656D- <1> .s9:	db " (bad memory)", 0x0A, 0x0D, 0
   307 00000585 6F7279290A0D00      <1>
   308                              <1> 
   309 0000058C [3805][4505][5105]- <1> .t0:	dw .s4, .s5, .s6, .s7, .s8, .s9, .s4, .s4
   309 00000592 [5F05][6E05][7C05]- <1>
   309 00000598 [3805][3805]        <1>
   310                              <1> 
   114                                  %include	"../modules/real/kbc.s"
   115                              <1> ;************************************************************************
   116                              <1> ;	KBCの出力バッファに書き込む
   117                              <1> ;========================================================================
   118                              <1> ;■書式		: WORD KBC_Data_Write(data);
   119                              <1> ;
   120                              <1> ;■引数
   121                              <1> ;	data	: 書き込みデータ
   122                              <1> ;
   123                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   124                              <1> ;************************************************************************
   125                              <1> KBC_Data_Write:
   126                              <1>                 ;---------------------------------------
   127                              <1>                 ; 【スタックフレームの構築】
   128                              <1>                 ;---------------------------------------
   129                              <1>                                                         
   130                              <1>                                                         ;    + 4| データ
   131                              <1>                                                         ;    + 2| IP（戻り番地）
   132 0000059C 55                  <1>                 push	bp								;  BP+ 0| BP（元の値）
   133 0000059D 89E5                <1>                 mov		bp, sp							; ------+--------
   134                              <1> 
   135                              <1>                 ;---------------------------------------
   136                              <1>                 ; 【レジスタの保存】
   137                              <1>                 ;---------------------------------------
   138 0000059F 51                  <1>                 push	cx
   139                              <1> 
   140                              <1>                 ;---------------------------------------
   141                              <1>                 ; データ書き込み
   142                              <1>                 ;---------------------------------------
   143 000005A0 B90000              <1>                 mov		cx, 0							; CX = 0; // 最大カウント値
   144                              <1>         .10L:											; do
   145                              <1>                                                         ; {
   146 000005A3 E464                <1>                 in		al, 0x64						;   AL = inp(0x64); // KBCステータス
   147 000005A5 A802                <1>                 test    al, 0x02						;   ZF = AL & 0x02; // 書き込み可能？
   148 000005A7 E0FA                <1>                 loopnz	.10L							; } while (--CX && !ZF);
   149                              <1>                                                         ; 
   150 000005A9 83F900              <1>                 cmp		cx, 0							; if (CX) // 未タイムアウト
   151 000005AC 7405                <1>                 jz		.20E							; {
   152                              <1>                                                         ;   
   153 000005AE 8A4604              <1>                 mov		al, [bp + 4]					;   AL = データ;
   154 000005B1 E660                <1>                 out    	0x60, al						;   outp(0x60, AL);
   155                              <1>         .20E:											; }
   156                              <1>                                                         ; 
   157 000005B3 89C8                <1>                 mov		ax, cx							; return CX;
   158                              <1> 
   159                              <1>                 ;---------------------------------------
   160                              <1>                 ; 【レジスタの復帰】
   161                              <1>                 ;---------------------------------------
   162 000005B5 59                  <1>                 pop		cx
   163                              <1> 
   164                              <1>                 ;---------------------------------------
   165                              <1>                 ; 【スタックフレームの破棄】
   166                              <1>                 ;---------------------------------------
   167 000005B6 89EC                <1>                 mov		sp, bp
   168 000005B8 5D                  <1>                 pop		bp
   169                              <1> 
   170 000005B9 C3                  <1>                 ret
   171                              <1> 
   172                              <1> 
   173                              <1> ;************************************************************************
   174                              <1> ;	KBCの出力バッファを読み込む
   175                              <1> ;========================================================================
   176                              <1> ;■書式		: WORD KBC_Data_Read(data);
   177                              <1> ;
   178                              <1> ;■引数
   179                              <1> ;	data	: 読み込みデータ格納アドレス
   180                              <1> ;
   181                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   182                              <1> ;************************************************************************
   183                              <1> KBC_Data_Read:
   184                              <1> 
   185                              <1>                 ;---------------------------------------
   186                              <1>                 ; 【スタックフレームの構築】
   187                              <1>                 ;---------------------------------------
   188                              <1>                                                         ;    + 4| 格納アドレス
   189                              <1>                                                         ;    + 2| IP（戻り番地）
   190 000005BA 55                  <1>                 push	bp								;  BP+ 0| BP（元の値）
   191 000005BB 89E5                <1>                 mov		bp, sp							; ------+--------
   192                              <1> 
   193                              <1>                 ;---------------------------------------
   194                              <1>                 ; 【レジスタの保存】
   195                              <1>                 ;---------------------------------------
   196 000005BD 51                  <1>                 push	cx
   197 000005BE 57                  <1>                 push	di
   198                              <1> 
   199                              <1>                 ;---------------------------------------
   200                              <1>                 ; データ読み込み
   201                              <1>                 ;---------------------------------------
   202 000005BF B90000              <1>                 mov		cx, 0							; CX = 0; // 最大カウント値
   203                              <1>         .10L:											; do
   204                              <1>                                                         ; {
   205 000005C2 E464                <1>                 in		al, 0x64						;   AL = inp(0x64); // KBCステータス
   206 000005C4 A801                <1>                 test    al, 0x01						;   ZF = AL & 0x01; // 読み込み可能？
   207 000005C6 E1FA                <1>                 loopz	.10L							; } while (--CX && ZF);
   208                              <1>                                                         ;   
   209 000005C8 83F900              <1>                 cmp		cx, 0							; if (CX) // 未タイムアウト
   210 000005CB 7409                <1>                 jz		.20E							; {
   211                              <1>                                                         ;   
   212 000005CD B400                <1>                 mov		ah, 0x00						;   AH = 0x00;
   213 000005CF E460                <1>                 in     	al, 0x60						;   AL = inp(0x60); // データ取得
   214                              <1>                                                         ;   
   215 000005D1 8B7E04              <1>                 mov		di, [bp + 4]					;   DI    = adr;
   216 000005D4 8905                <1>                 mov		[di + 0], ax					;   DI[0] = AX;
   217                              <1>         .20E:											; }
   218                              <1>                                                         ; 
   219 000005D6 89C8                <1>                 mov		ax, cx		                    ;  return CX;
   220                              <1> 
   221                              <1>                 ;---------------------------------------
   222                              <1>                 ; 【レジスタの復帰】
   223                              <1>                 ;---------------------------------------
   224 000005D8 5F                  <1>                 pop		di
   225 000005D9 59                  <1>                 pop		cx
   226                              <1> 
   227                              <1>                 ;---------------------------------------
   228                              <1>                 ; 【スタックフレームの破棄】
   229                              <1>                 ;---------------------------------------
   230 000005DA 89EC                <1>                 mov		sp, bp
   231 000005DC 5D                  <1>                 pop		bp
   232                              <1> 
   233 000005DD C3                  <1>                 ret
   234                              <1> 
   235                              <1> 
   236                              <1> ;************************************************************************
   237                              <1> ;	KBCにコマンドを出力
   238                              <1> ;========================================================================
   239                              <1> ;■書式		: WORD KBC_Cmd_Write(cmd);
   240                              <1> ;
   241                              <1> ;■引数
   242                              <1> ;	cmd		: コマンド
   243                              <1> ;
   244                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   245                              <1> ;************************************************************************
   246                              <1> KBC_Cmd_Write:
   247                              <1>                 ;---------------------------------------
   248                              <1>                 ; 【スタックフレームの構築】
   249                              <1>                 ;---------------------------------------
   250                              <1>                                                         ;    + 4| コマンド
   251                              <1>                                                         ;    + 2| IP（戻り番地）
   252 000005DE 55                  <1>                 push	bp								;  BP+ 0| BP（元の値）
   253 000005DF 89E5                <1>                 mov		bp, sp							; ------+--------
   254                              <1> 
   255                              <1>                 ;---------------------------------------
   256                              <1>                 ; 【レジスタの保存】
   257                              <1>                 ;---------------------------------------
   258 000005E1 51                  <1>                 push	cx
   259                              <1> 
   260                              <1>                 ;---------------------------------------
   261                              <1>                 ; コマンド書き込み
   262                              <1>                 ;---------------------------------------
   263 000005E2 B90000              <1>                 mov		cx, 0							; CX = 0; // 最大カウント値
   264                              <1>         .10L:											; do
   265                              <1>                                                         ; {
   266 000005E5 E464                <1>                 in		al, 0x64						;   AL = inp(0x64); // KBCステータス
   267 000005E7 A802                <1>                 test    al, 0x02						;   ZF = AL & 0x02; // 書き込み可能？
   268 000005E9 E0FA                <1>                 loopnz	.10L							; } while (--CX && !ZF);
   269                              <1>                                                         ; 
   270 000005EB 83F900              <1>                 cmp		cx, 0							; if (CX) // 未タイムアウト
   271 000005EE 7405                <1>                 jz		.20E							; {
   272                              <1>                                                         ;   
   273 000005F0 8A4604              <1>                 mov		al, [bp + 4]					;   AL = コマンド;
   274 000005F3 E664                <1>                 out    	0x64, al						;   outp(0x64, AL);
   275                              <1>         .20E:											; }
   276                              <1> 
   277 000005F5 89C8                <1>                 mov		ax, cx							; return CX;
   278                              <1> 
   279                              <1>                 ;---------------------------------------
   280                              <1>                 ; 【レジスタの復帰】
   281                              <1>                 ;---------------------------------------
   282 000005F7 59                  <1>                 pop		cx
   283                              <1> 
   284                              <1>                 ;---------------------------------------
   285                              <1>                 ; 【スタックフレームの破棄】
   286                              <1>                 ;---------------------------------------
   287 000005F8 89EC                <1>                 mov		sp, bp
   288 000005FA 5D                  <1>                 pop		bp
   289                              <1> 
   290 000005FB C3                  <1>                 ret
   115                                  
   116                                  ;************************************************************************
   117                                  ;	ブート処理の第2ステージ
   118                                  ;************************************************************************
   119                                  stage_2:
   120                                  		;---------------------------------------
   121                                  		; 文字列を表示
   122                                  		;---------------------------------------
   123 000005FC 68[7606]E8BEFA83C4-     		cdecl	puts, .s0						; puts(.s0);
   123 00000604 02                 
   124                                  
   125                                  		;---------------------------------------
   126                                  		; ドライブ情報を取得
   127                                  		;---------------------------------------
   128 00000605 68[B800]E881FC83C4-     		cdecl	get_drive_param, BOOT			; get_drive_param(DX, BOOT.CYLN);
   128 0000060D 02                 
   129 0000060E 83F800                  		cmp		ax, 0							; if (0 == AX)
   130 00000611 750C                    .10Q:	jne		.10E							; {
   131 00000613 68[AD06]E8A7FA83C4-     .10T:	cdecl	puts, .e0						;   puts(.e0);
   131 0000061B 02                 
   132 0000061C E8C0FA                  		call	reboot							;   reboot(); // 再起動
   133                                  .10E:											; }
   134                                  
   135                                  		;---------------------------------------
   136                                  		; ドライブ情報を表示
   137                                  		;---------------------------------------
   138 0000061F A1[B800]                		mov		ax, [BOOT + drive.no]			; AX = ブートドライブ;
   139 00000622 6A046A106A0268-         		cdecl	itoa, ax, .p1, 2, 16, 0b0100	; 
   139 00000629 [8E06]50E8DDFB83C4-
   139 00000631 0A                 
   140 00000632 A1[BA00]                		mov		ax, [BOOT + drive.cyln]			; 
   141 00000635 6A046A106A0468-         		cdecl	itoa, ax, .p2, 4, 16, 0b0100	; 
   141 0000063C [9606]50E8CAFB83C4-
   141 00000644 0A                 
   142 00000645 A1[BC00]                		mov		ax, [BOOT + drive.head]			; AX = ヘッド数;
   143 00000648 6A046A106A0268-         		cdecl	itoa, ax, .p3, 2, 16, 0b0100	; 
   143 0000064F [A006]50E8B7FB83C4-
   143 00000657 0A                 
   144 00000658 A1[BE00]                		mov		ax, [BOOT + drive.sect]			; AX = トラックあたりのセクタ数;
   145 0000065B 6A046A106A0268-         		cdecl	itoa, ax, .p4, 2, 16, 0b0100	; 
   145 00000662 [A806]50E8A4FB83C4-
   145 0000066A 0A                 
   146 0000066B 68[8506]E84FFA83C4-     		cdecl	puts, .s1
   146 00000673 02                 
   147                                  
   148                                  		;---------------------------------------
   149                                  		; 次のステージへ移行
   150                                  		;---------------------------------------
   151 00000674 EB52                    		jmp		stage_3rd						; 次のステージへ移行
   152                                  
   153                                  		;---------------------------------------
   154                                  		; データ
   155                                  		;---------------------------------------
   156 00000676 326E64207374616765-     .s0		db	"2nd stage...", 0x0A, 0x0D, 0
   156 0000067F 2E2E2E0A0D00       
   157                                  
   158 00000685 2044726976653A3078      .s1		db	" Drive:0x"
   159 0000068E 20202C20433A3078        .p1		db	"  , C:0x"
   160 00000696 202020202C20483A30-     .p2		db	"    , H:0x"
   160 0000069F 78                 
   161 000006A0 20202C20533A3078        .p3		db	"  , S:0x"
   162 000006A8 20200A0D00              .p4		db	"  ", 0x0A, 0x0D, 0
   163                                  
   164 000006AD 43616E277420676574-     .e0		db	"Can't get drive parameter.", 0
   164 000006B6 206472697665207061-
   164 000006BF 72616D657465722E00 
   165                                  
   166                                  ;************************************************************************
   167                                  ;	ブート処理の第3ステージ
   168                                  ;************************************************************************
   169                                  stage_3rd:
   170                                  		;---------------------------------------
   171                                  		; 文字列を表示
   172                                  		;---------------------------------------
   173 000006C8 68[4507]E8F2F983C4-     		cdecl	puts, .s0
   173 000006D0 02                 
   174                                  
   175                                  		;---------------------------------------
   176                                  		; プロテクトモードで使用するフォントは、
   177                                  		; BIOSに内蔵されたものを流用する
   178                                  		;---------------------------------------
   179 000006D1 68[0002]E8F6FB83C4-     		cdecl	get_font_adr, FONT				; // BIOSのフォントアドレスを取得
   179 000006D9 02                 
   180                                  
   181                                  		;---------------------------------------
   182                                  		; フォントアドレスの表示
   183                                  		;---------------------------------------
   184 000006DA 6A046A106A0468-         		cdecl	itoa, word [FONT.seg], .p1, 4, 16, 0b0100
   184 000006E1 [6207]FF36[0002]E8-
   184 000006E8 22FB83C40A         
   185 000006ED 6A046A106A0468-         		cdecl	itoa, word [FONT.off], .p2, 4, 16, 0b0100
   185 000006F4 [6707]FF36[0202]E8-
   185 000006FB 0FFB83C40A         
   186 00000700 68[5407]E8BAF983C4-     		cdecl	puts, .s1
   186 00000708 02                 
   187                                  
   188                                  		;---------------------------------------
   189                                  		; メモリ情報の取得と表示
   190                                  		;---------------------------------------
   191 00000709 E8E1FB                  		cdecl	get_mem_info					; get_mem_info();
   192                                  
   193 0000070C 66A1[0402]              		mov		eax, [ACPI_DATA.adr]			; EAX = ACPI_DATA.adr;
   194 00000710 6683F800                		cmp		eax, 0							; if (EAX)
   195 00000714 742D                    		je		.10E							; {
   196                                  
   197 00000716 6A046A106A0468-         		cdecl	itoa, ax, .p4, 4, 16, 0b0100	;   itoa(AX); // 下位アドレスを変換
   197 0000071D [8007]50E8E9FA83C4-
   197 00000725 0A                 
   198 00000726 66C1E810                		shr		eax, 16							;   EAX >>= 16;
   199 0000072A 6A046A106A0468-         		cdecl	itoa, ax, .p3, 4, 16, 0b0100	;   itoa(AX); // 上位アドレスを変換
   199 00000731 [7C07]50E8D5FA83C4-
   199 00000739 0A                 
   200                                  
   201 0000073A 68[7107]E880F983C4-     		cdecl	puts, .s2						;   puts(.s2); // アドレスを表示
   201 00000742 02                 
   202                                  .10E:											; }
   203                                  
   204                                  		;---------------------------------------
   205                                  		; 次のステージへ移行
   206                                  		;---------------------------------------
   207 00000743 EB42                    		jmp		stage_4							; 次のステージへ移行
   208                                  
   209                                  		;---------------------------------------
   210                                  		; データ
   211                                  		;---------------------------------------
   212 00000745 337264207374616765-     .s0:	db	"3rd stage...", 0x0A, 0x0D, 0
   212 0000074E 2E2E2E0A0D00       
   213                                  
   214 00000754 20466F6E7420416464-     .s1:	db	" Font Address="
   214 0000075D 726573733D         
   215 00000762 5A5A5A5A3A              .p1:	db	"ZZZZ:"
   216 00000767 5A5A5A5A0A0D00          .p2:	db	"ZZZZ", 0x0A, 0x0D, 0
   217 0000076E 0A0D00                  		db	0x0A, 0x0D, 0
   218                                  
   219 00000771 204143504920646174-     .s2:	db	" ACPI data="
   219 0000077A 613D               
   220 0000077C 5A5A5A5A                .p3:	db	"ZZZZ"
   221 00000780 5A5A5A5A0A0D00          .p4:	db	"ZZZZ", 0x0A, 0x0D, 0
   222                                  
   223                                  ;************************************************************************
   224                                  ;	ブート処理の第4ステージ
   225                                  ;************************************************************************
   226                                  stage_4:
   227                                  		;---------------------------------------
   228                                  		; 文字列を表示
   229                                  		;---------------------------------------
   230 00000787 68[5B08]E833F983C4-     		cdecl	puts, .s0
   230 0000078F 02                 
   231                                  
   232                                  		;---------------------------------------
   233                                  		; A20ゲートの有効化
   234                                  		;---------------------------------------
   235 00000790 FA                      		cli										;   // 割り込み禁止
   236                                  												;   
   237 00000791 68AD00E847FE83C402      		cdecl	KBC_Cmd_Write, 0xAD				;   // キーボード無効化
   238                                  												;   
   239 0000079A 68D000E83EFE83C402      		cdecl	KBC_Cmd_Write, 0xD0				;   // 出力ポート読み出しコマンド
   240 000007A3 68[A408]E811FE83C4-     		cdecl	KBC_Data_Read, .key				;   // 出力ポートデータ
   240 000007AB 02                 
   241                                  												;   
   242 000007AC 8A1E[A408]              		mov		bl, [.key]						;   BL  = key;
   243 000007B0 80CB02                  		or		bl, 0x02						;   BL |= 0x02; // A20ゲート有効化
   244                                  												;   
   245 000007B3 68D100E825FE83C402      		cdecl	KBC_Cmd_Write, 0xD1				;   // 出力ポート書き込みコマンド
   246 000007BC 53E8DCFD83C402          		cdecl	KBC_Data_Write, bx				;   // 出力ポートデータ
   247                                  												;   
   248 000007C3 68AE00E815FE83C402      		cdecl	KBC_Cmd_Write, 0xAE				;   // キーボード有効化
   249                                  												;   
   250 000007CC FB                      		sti										;   // 割り込み許可
   251                                  
   252                                  		;---------------------------------------
   253                                  		; 文字列を表示
   254                                  		;---------------------------------------
   255 000007CD 68[6A08]E8EDF883C4-     		cdecl	puts, .s1
   255 000007D5 02                 
   256                                  
   257                                  		;---------------------------------------
   258                                  		; キーボードLEDのテスト
   259                                  		;---------------------------------------
   260 000007D6 68[7F08]E8E4F883C4-     		cdecl	puts, .s2						; 
   260 000007DE 02                 
   261                                  
   262 000007DF BB0000                  		mov		bx, 0							; CX = LEDの初期値;
   263                                  .10L:											; do
   264                                  												; {
   265 000007E2 B400                    		mov		ah, 0x00						;   // キー入力待ち
   266 000007E4 CD16                    		int		0x16							;   AL = BIOS(0x16, 0x00);
   267                                  												;   
   268 000007E6 3C31                    		cmp		al, '1'							;   if (AL < '1')
   269 000007E8 7266                    		jb		.10E							;     break;
   270                                  												;   
   271 000007EA 3C33                    		cmp		al, '3'							;   if ('3' < AL)
   272 000007EC 7762                    		ja		.10E							;     break;
   273                                  												;   
   274 000007EE 88C1                    		mov		cl, al							;   CL   = キー入力;
   275 000007F0 FEC9                    		dec		cl								;   CL  -= 1;       // 1減算
   276 000007F2 80E103                  		and		cl, 0x03						;   CL  &= 0x03;    // 0～2に制限
   277 000007F5 B80100                  		mov		ax, 0x0001						;   AX   = 0x0001;  // ビット変換用
   278 000007F8 D3E0                    		shl		ax, cl							;   AX <<= CL;      // 0～2ビット左シフト
   279 000007FA 31C3                    		xor		bx, ax							;   BX  ^= AX;      // ビット反転
   280                                  
   281                                  		;---------------------------------------
   282                                  		; LEDコマンドの送信
   283                                  		;---------------------------------------
   284 000007FC FA                      		cli										;   // 割り込み禁止
   285                                  												;   
   286 000007FD 68AD00E8DBFD83C402      		cdecl	KBC_Cmd_Write, 0xAD				;   // キーボード無効化
   287                                  												;   
   288 00000806 68ED00E890FD83C402      		cdecl	KBC_Data_Write, 0xED			;   // LEDコマンド
   289 0000080F 68[A408]E8A5FD83C4-     		cdecl	KBC_Data_Read, .key				;   // 受信応答
   289 00000817 02                 
   290                                  												;   
   291 00000818 803E[A408]FA            		cmp		[.key], byte 0xFA				;   if (0xFA == key)
   292 0000081D 7509                    		jne		.11F							;   {
   293                                  												;     
   294 0000081F 53E879FD83C402          		cdecl	KBC_Data_Write, bx				;     // LEDデータ出力
   295                                  												;   }
   296 00000826 EB1C                    		jmp		.11E							;   else
   297                                  .11F:											;   {
   298 00000828 6A046A106A0268-         		cdecl	itoa, word [.key], .e1, 2, 16, 0b0100
   298 0000082F [A008]FF36[A408]E8-
   298 00000836 D4F983C40A         
   299 0000083B 68[9F08]E87FF883C4-     		cdecl	puts, .e0						;     // 受信コードを表示
   299 00000843 02                 
   300                                  .11E:											;   }
   301                                  												;   
   302 00000844 68AE00E894FD83C402      		cdecl	KBC_Cmd_Write, 0xAE				;   // キーボード有効化
   303                                  												;   
   304 0000084D FB                      		sti										;   // 割り込み許可
   305                                  												;   
   306 0000084E EB92                    		jmp		.10L							; } while (1);
   307                                  .10E:
   308                                  
   309                                  		;---------------------------------------
   310                                  		; 文字列を表示
   311                                  		;---------------------------------------
   312 00000850 68[9508]E86AF883C4-     		cdecl	puts, .s3
   312 00000858 02                 
   313                                  
   314                                  		;---------------------------------------
   315                                  		; 処理の終了
   316                                  		;---------------------------------------
   317 00000859 EBFE                    		jmp		$								; while (1) ; // 無限ループ
   318                                  
   319 0000085B 347468207374616765-     .s0:	db	"4th stage...", 0x0A, 0x0D, 0
   319 00000864 2E2E2E0A0D00       
   320 0000086A 204132302047617465-     .s1:	db	" A20 Gate Enabled.", 0x0A, 0x0D, 0
   320 00000873 20456E61626C65642E-
   320 0000087C 0A0D00             
   321 0000087F 204B6579626F617264-     .s2:	db	" Keyboard LED Test...", 0
   321 00000888 204C45442054657374-
   321 00000891 2E2E2E00           
   322 00000895 2028646F6E65290A0D-     .s3:	db	" (done)", 0x0A, 0x0D, 0
   322 0000089E 00                 
   323 0000089F 5B                      .e0:	db	"["
   324 000008A0 5A5A5D00                .e1:	db	"ZZ]", 0
   325                                  
   326 000008A4 0000                    .key:	dw	0
   327                                  
   328                                  ;************************************************************************
   329                                  ;	パディング
   330                                  ;************************************************************************
   331 000008A6 00<rep 175Ah>           		times BOOT_SIZE - ($ - $$)		db	0	; パディング
   332                                  
