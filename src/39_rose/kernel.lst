     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  %define	USE_SYSTEM_CALL
     8                                  %define	USE_TEST_AND_SET
     9                                  
    10                                  ;************************************************************************
    11                                  ;	マクロ
    12                                  ;************************************************************************
    13                                  %include	"../include/define.s"
    14                              <1> ;************************************************************************
    15                              <1> ;	メモリイメージ
    16                              <1> ;************************************************************************
    17                              <1> 
    18                              <1> 		;---------------------------------------
    19                              <1> 		;           |            | 
    20                              <1> 		;           |____________| 
    21                              <1> 		; 0000_7A00 |            | ( 512) スタック
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0000_7C00 |            | (  8K) ブート
    24                              <1> 		;           =            = 
    25                              <1> 		;           |____________| 
    26                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    27                              <1> 		;           =            = 
    28                              <1> 		;           |____________| 
    29                              <1> 		; 0000_BC00 |////////////| 
    30                              <1> 		;           =            = 
    31                              <1> 		;           |____________| 
    32                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    33                              <1> 		;           |____________| 
    34                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    35                              <1> 		;           |____________| 
    36                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    37                              <1> 		;           |            | 
    38                              <1> 		;           =            = 
    39                              <1> 		;           |____________| 
    40                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    41                              <1> 		;           |            | （各タスク1K）
    42                              <1> 		;           =            = 
    43                              <1> 		;           |____________| 
    44                              <1> 		; 0010_5000 |            | Dir
    45                              <1> 		;      6000 |____________| Page
    46                              <1> 		; 0010_7000 |            | Dir
    47                              <1> 		;      8000 |____________| Page
    48                              <1> 		; 0010_9000 |////////////| 
    49                              <1> 		;           |            | 
    50                              <1> 
    51                              <1> 
    52                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    53                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    54                              <1> 
    55                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    56                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    57                              <1> 
    58                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    59                              <1> 
    60                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    61                              <1> 
    62                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    63                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    64                              <1> 
    65                              <1> 		E820_RECORD_SIZE	equ		20
    66                              <1> 
    67                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    68                              <1> 
    69                              <1> 		STACK_BASE			equ		0x0010_3000		; タスク用スタックエリア
    70                              <1> 		STACK_SIZE			equ		1024			; スタックサイズ
    71                              <1> 
    72                              <1> 		SP_TASK_0			equ		STACK_BASE + (STACK_SIZE * 1)
    73                              <1> 		SP_TASK_1			equ		STACK_BASE + (STACK_SIZE * 2)
    74                              <1> 		SP_TASK_2			equ		STACK_BASE + (STACK_SIZE * 3)
    75                              <1> 		SP_TASK_3			equ		STACK_BASE + (STACK_SIZE * 4)
    76                              <1> 		SP_TASK_4			equ		STACK_BASE + (STACK_SIZE * 5)
    77                              <1> 		SP_TASK_5			equ		STACK_BASE + (STACK_SIZE * 6)
    78                              <1> 		SP_TASK_6			equ		STACK_BASE + (STACK_SIZE * 7)
    14                                  %include	"../include/macro.s"
    15                              <1> ;************************************************************************
    16                              <1> ; 関数呼び出し用マクロ
    17                              <1> ;
    18                              <1> ; 使い方：
    19                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    20                              <1> ;
    21                              <1> ;************************************************************************
    22                              <1> %macro  cdecl 1-*.nolist
    23                              <1> 
    24                              <1> 	%rep  %0 - 1
    25                              <1> 		push	%{-1:-1}
    26                              <1> 		%rotate -1
    27                              <1> 	%endrep 
    28                              <1> 	%rotate -1
    29                              <1> 
    30                              <1> 		call	%1
    31                              <1> 
    32                              <1> 	%if 1 < %0
    33                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    34                              <1> 	%endif
    35                              <1> 
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> ;************************************************************************
    39                              <1> ; 割り込みベクタ設定用
    40                              <1> ;
    41                              <1> ; 使い方：
    42                              <1> ;	set_vect	ベクタ番号, 割り込み処理 [, フラグ]
    43                              <1> ;
    44                              <1> ;************************************************************************
    45                              <1> %macro  set_vect 1-*.nolist
    46                              <1> 		push	eax
    47                              <1> 		push	edi
    48                              <1> 
    49                              <1> 		mov		edi, VECT_BASE + (%1 * 8)		; ベクタアドレス;
    50                              <1> 		mov		eax, %2
    51                              <1> 
    52                              <1> 	%if 3 == %0
    53                              <1> 		mov		[edi + 4], %3					; フラグ
    54                              <1> 	%endif
    55                              <1> 
    56                              <1> 		mov		[edi + 0], ax					; 例外アドレス[15: 0]
    57                              <1> 		shr		eax, 16							; 
    58                              <1> 		mov		[edi + 6], ax					; 例外アドレス[31:16]
    59                              <1> 
    60                              <1> 		pop		edi
    61                              <1> 		pop		eax
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> ;************************************************************************
    65                              <1> ; ポート出力用
    66                              <1> ;
    67                              <1> ; 使い方：
    68                              <1> ;	outp	ポート番号, 出力値
    69                              <1> ;
    70                              <1> ;************************************************************************
    71                              <1> %macro  outp 2
    72                              <1> 		mov		al, %2
    73                              <1> 		out		%1, al
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> ;************************************************************************
    77                              <1> ; ディスクリプタの情報を設定
    78                              <1> ;
    79                              <1> ; 使い方：
    80                              <1> ;	set_desc	ディスクリプタ, ベース
    81                              <1> ;
    82                              <1> ;************************************************************************
    83                              <1> %macro  set_desc 2-* 
    84                              <1> 		push	eax
    85                              <1> 		push	edi
    86                              <1> 
    87                              <1> 		mov		edi, %1							; ディスクリプタアドレス
    88                              <1> 		mov		eax, %2							; ベースアドレス
    89                              <1> 
    90                              <1> 	%if 3 == %0
    91                              <1> 		mov		[edi + 0], %3					; リミット
    92                              <1> 	%endif
    93                              <1> 
    94                              <1> 		mov		[edi + 2], ax					; ベース（[15: 0]）
    95                              <1> 		shr		eax, 16							; 
    96                              <1> 		mov		[edi + 4], al					; ベース（[23:16]）
    97                              <1> 		mov		[edi + 7], ah					; ベース（[31:24]）
    98                              <1> 
    99                              <1> 		pop		edi
   100                              <1> 		pop		eax
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> ;************************************************************************
   104                              <1> ; ゲートディスクリプタのオフセットを設定
   105                              <1> ;
   106                              <1> ; 使い方：
   107                              <1> ;	set_gate	ディスクリプタ, オフセット
   108                              <1> ;
   109                              <1> ;************************************************************************
   110                              <1> %macro  set_gate 2-* 
   111                              <1> 		push	eax
   112                              <1> 		push	edi
   113                              <1> 
   114                              <1> 		mov		edi, %1							; ディスクリプタアドレス
   115                              <1> 		mov		eax, %2							; ベースアドレス
   116                              <1> 
   117                              <1> 		mov		[edi + 0], ax					; ベース（[15: 0]）
   118                              <1> 		shr		eax, 16							; 
   119                              <1> 		mov		[edi + 6], ax					; ベース（[31:16]）
   120                              <1> 
   121                              <1> 		pop		edi
   122                              <1> 		pop		eax
   123                              <1> %endmacro
   124                              <1> 
   125                              <1> ;************************************************************************
   126                              <1> ;	構造体
   127                              <1> ;************************************************************************
   128                              <1> 
   129                              <1> ;-----------------------------------------------
   130                              <1> ;	ドライブパラメータ
   131                              <1> ;-----------------------------------------------
   132                              <1> struc drive
   133 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
   134 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
   135 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
   136 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
   137                              <1> endstruc
   138                              <1> 
   139                              <1> ;-----------------------------------------------
   140                              <1> ;	リングバッファ
   141                              <1> ;-----------------------------------------------
   142                              <1> %define		RING_ITEM_SIZE		(1 << 4)
   143                              <1> %define		RING_INDEX_MASK		(RING_ITEM_SIZE - 1)
   144                              <1> 
   145                              <1> struc ring_buff
   146 00000000 ????????            <1> 		.rp				resd	1				; RP:書き込み位置
   147 00000004 ????????            <1> 		.wp				resd	1				; WP:読み込み位置
   148 00000008 <res 10h>           <1> 		.item			resb	RING_ITEM_SIZE	; バッファ
   149                              <1> endstruc
   150                              <1> 
   151                              <1> ;-----------------------------------------------
   152                              <1> ;	バラ曲線描画パラメータ
   153                              <1> ;-----------------------------------------------
   154                              <1> struc rose
   155 00000000 ????????            <1> 		.x0				resd	1				; 左上座標：X0
   156 00000004 ????????            <1> 		.y0				resd	1				; 左上座標：Y0
   157 00000008 ????????            <1> 		.x1				resd	1				; 右下座標：X1
   158 0000000C ????????            <1> 		.y1				resd	1				; 右下座標：Y1
   159                              <1> 
   160 00000010 ????????            <1> 		.n				resd	1				; 変数：n
   161 00000014 ????????            <1> 		.d				resd	1				; 変数：d
   162                              <1> 
   163 00000018 ????????            <1> 		.color_x		resd	1				; 描画色：X軸
   164 0000001C ????????            <1> 		.color_y		resd	1				; 描画色：Y軸
   165 00000020 ????????            <1> 		.color_z		resd	1				; 描画色：枠
   166 00000024 ????????            <1> 		.color_s		resd	1				; 描画色：文字
   167 00000028 ????????            <1> 		.color_f		resd	1				; 描画色：グラフ描画色
   168 0000002C ????????            <1> 		.color_b		resd	1				; 描画色：グラフ消去色
   169                              <1> 
   170 00000030 <res 10h>           <1> 		.title			resb	16				; タイトル
   171                              <1> endstruc
   172                              <1> 
    15                                  
    16                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    17                                  
    18                                  [BITS 32]
    19                                  ;************************************************************************
    20                                  ;	エントリポイント
    21                                  ;************************************************************************
    22                                  kernel:
    23                                  		;---------------------------------------
    24                                  		; フォントアドレスを取得
    25                                  		;---------------------------------------
    26 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    27 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    28 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    29 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    30 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    31 00000011 A3[1C020000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    32                                  
    33                                  		;---------------------------------------
    34                                  		; TSSディスクリプタの設定
    35                                  		;---------------------------------------
    36                                  		set_desc	GDT.tss_0, TSS_0			; // タスク0用TSSの設定
    84 00000016 50                  <1>  push eax
    85 00000017 57                  <1>  push edi
    86                              <1> 
    87 00000018 BF[A4050000]        <1>  mov edi, %1
    88 0000001D B8[24020000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000022 66894702            <1>  mov [edi + 2], ax
    95 00000026 C1E810              <1>  shr eax, 16
    96 00000029 884704              <1>  mov [edi + 4], al
    97 0000002C 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 0000002F 5F                  <1>  pop edi
   100 00000030 58                  <1>  pop eax
    37                                  		set_desc	GDT.tss_1, TSS_1			; // タスク1用TSSの設定
    84 00000031 50                  <1>  push eax
    85 00000032 57                  <1>  push edi
    86                              <1> 
    87 00000033 BF[AC050000]        <1>  mov edi, %1
    88 00000038 B8[FC020000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 0000003D 66894702            <1>  mov [edi + 2], ax
    95 00000041 C1E810              <1>  shr eax, 16
    96 00000044 884704              <1>  mov [edi + 4], al
    97 00000047 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 0000004A 5F                  <1>  pop edi
   100 0000004B 58                  <1>  pop eax
    38                                  		set_desc	GDT.tss_2, TSS_2			; // タスク2用TSSの設定
    84 0000004C 50                  <1>  push eax
    85 0000004D 57                  <1>  push edi
    86                              <1> 
    87 0000004E BF[B4050000]        <1>  mov edi, %1
    88 00000053 B8[D4030000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000058 66894702            <1>  mov [edi + 2], ax
    95 0000005C C1E810              <1>  shr eax, 16
    96 0000005F 884704              <1>  mov [edi + 4], al
    97 00000062 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 00000065 5F                  <1>  pop edi
   100 00000066 58                  <1>  pop eax
    39                                  		set_desc	GDT.tss_3, TSS_3			; // タスク3用TSSの設定
    84 00000067 50                  <1>  push eax
    85 00000068 57                  <1>  push edi
    86                              <1> 
    87 00000069 BF[BC050000]        <1>  mov edi, %1
    88 0000006E B8[AC040000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000073 66894702            <1>  mov [edi + 2], ax
    95 00000077 C1E810              <1>  shr eax, 16
    96 0000007A 884704              <1>  mov [edi + 4], al
    97 0000007D 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 00000080 5F                  <1>  pop edi
   100 00000081 58                  <1>  pop eax
    40                                  
    41                                  		;---------------------------------------
    42                                  		; コールゲートの設定
    43                                  		;---------------------------------------
    44                                  		set_gate	GDT.call_gate, call_gate	; // コールゲートの設定
   111 00000082 50                  <1>  push eax
   112 00000083 57                  <1>  push edi
   113                              <1> 
   114 00000084 BF[C4050000]        <1>  mov edi, %1
   115 00000089 B8[18120000]        <1>  mov eax, %2
   116                              <1> 
   117 0000008E 668907              <1>  mov [edi + 0], ax
   118 00000091 C1E810              <1>  shr eax, 16
   119 00000094 66894706            <1>  mov [edi + 6], ax
   120                              <1> 
   121 00000098 5F                  <1>  pop edi
   122 00000099 58                  <1>  pop eax
    45                                  
    46                                  		;---------------------------------------
    47                                  		; LDTの設定
    48                                  		;---------------------------------------
    49                                  		set_desc	GDT.ldt, LDT, word LDT_LIMIT
    84 0000009A 50                  <1>  push eax
    85 0000009B 57                  <1>  push edi
    86                              <1> 
    87 0000009C BF[9C050000]        <1>  mov edi, %1
    88 000000A1 B8[D2050000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91 000000A6 66C7074700          <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 000000AB 66894702            <1>  mov [edi + 2], ax
    95 000000AF C1E810              <1>  shr eax, 16
    96 000000B2 884704              <1>  mov [edi + 4], al
    97 000000B5 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 000000B8 5F                  <1>  pop edi
   100 000000B9 58                  <1>  pop eax
    50                                  
    51                                  		;---------------------------------------
    52                                  		; GDTをロード（再設定）
    53                                  		;---------------------------------------
    54 000000BA 0F0115[CC050000]        		lgdt	[GDTR]							; // グローバルディスクリプタテーブルをロード
    55                                  
    56                                  		;---------------------------------------
    57                                  		; スタックの設定
    58                                  		;---------------------------------------
    59 000000C1 BC00341000              		mov		esp, SP_TASK_0					; // タスク0用のスタックを設定
    60                                  
    61                                  		;---------------------------------------
    62                                  		; タスクレジスタの初期化
    63                                  		;---------------------------------------
    64 000000C6 66B82000                		mov		ax, SS_TASK_0
    65 000000CA 0F00D8                  		ltr		ax								; // タスクレジスタの設定
    66                                  
    67                                  		;---------------------------------------
    68                                  		; 初期化
    69                                  		;---------------------------------------
    70 000000CD E81C0E0000              		cdecl	init_int						; // 割り込みベクタの初期化
    71 000000D2 E89D0F0000              		cdecl	init_pic						; // 割り込みコントローラの初期化
    72                                  
    73 000000D7 5057BF00001000B8-       		set_vect	0x00, int_zero_div			; // 割り込み処理の登録：0除算
    73 000000DF [56100000]668907C1-
    73 000000E7 E810668947065F58   
    74 000000EF 5057BF38001000B8-       		set_vect	0x07, int_nm				; // 割り込み処理の登録：デバイス使用不可
    74 000000F7 [83120000]668907C1-
    74 000000FF E810668947065F58   
    75 00000107 5057BF00011000B8-       		set_vect	0x20, int_timer				; // 割り込み処理の登録：タイマー
    75 0000010F [1A060000]668907C1-
    75 00000117 E810668947065F58   
    76 0000011F 5057BF08011000B8-       		set_vect	0x21, int_keyboard			; // 割り込み処理の登録：KBC
    76 00000127 [DE100000]668907C1-
    76 0000012F E810668947065F58   
    77 00000137 5057BF40011000B8-       		set_vect	0x28, int_rtc				; // 割り込み処理の登録：RTC
    77 0000013F [B3100000]668907C1-
    77 00000147 E810668947065F58   
    78 0000014F 5057BF08041000B8-       		set_vect	0x81, trap_gate_81, word 0xEF00	; // トラップゲートの登録：1文字出力
    78 00000157 [48120000]66C74704-
    78 0000015F 00EF668907C1E81066-
    78 00000168 8947065F58         
    79 0000016D 5057BF10041000B8-       		set_vect	0x82, trap_gate_82, word 0xEF00	; // トラップゲートの登録：点の描画
    79 00000175 [56120000]66C74704-
    79 0000017D 00EF668907C1E81066-
    79 00000186 8947065F58         
    80                                  
    81                                  		;---------------------------------------
    82                                  		; デバイスの割り込み許可
    83                                  		;---------------------------------------
    84 0000018B 6A10E80D0F00006683-     		cdecl	rtc_int_en, 0x10				; rtc_int_en(UIE); // 更新サイクル終了割り込み許可
    84 00000194 C404               
    85 00000196 E835100000              		cdecl	int_en_timer0					; // タイマー（カウンタ0）割り込み許可
    86                                  
    87                                  		;---------------------------------------
    88                                  		; IMR(割り込みマスクレジスタ)の設定
    89                                  		;---------------------------------------
    90                                  		outp	0x21, 0b_1111_1000				; // 割り込み有効：スレーブPIC/KBC/タイマー
    72 0000019B B0F8                <1>  mov al, %2
    73 0000019D E621                <1>  out %1, al
    91                                  		outp	0xA1, 0b_1111_1110				; // 割り込み有効：RTC
    72 0000019F B0FE                <1>  mov al, %2
    73 000001A1 E6A1                <1>  out %1, al
    92                                  
    93                                  		;---------------------------------------
    94                                  		; CPUの割り込み許可
    95                                  		;---------------------------------------
    96 000001A3 FB                      		sti										; // 割り込み許可
    97                                  
    98                                  		;---------------------------------------
    99                                  		; フォントの一覧表示
   100                                  		;---------------------------------------
   101 000001A4 6A0D6A3FE8EB080000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
   101 000001AD 6683C408           
   102 000001B1 6A046A3FE861090000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
   102 000001BA 6683C408           
   103                                  
   104                                  		;---------------------------------------
   105                                  		; 文字列の表示
   106                                  		;---------------------------------------
   107 000001BE 68[06020000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
   107 000001C6 00006A0E6A19E80C09-
   107 000001CF 00006683C410       
   108                                  
   109                                  .10L:											; while (;;)
   110                                  												; {
   111                                  		;---------------------------------------
   112                                  		; 回転する棒を表示
   113                                  		;---------------------------------------
   114 000001D5 E805100000              		cdecl	draw_rotation_bar				;   // 回転する棒を表示
   115                                  
   116                                  		;---------------------------------------
   117                                  		; キーコードの取得
   118                                  		;---------------------------------------
   119 000001DA 68[18020000]68-         		cdecl	ring_rd, _KEY_BUFF, .int_key	;   EAX = ring_rd(buff, &int_key);
   119 000001E0 [04110000]E8330F00-
   119 000001E8 006683C408         
   120 000001ED 83F800                  		cmp		eax, 0							;   if (EAX == 0)
   121 000001F0 7412                    		je		.10E							;   {
   122                                  												;   
   123                                  		;---------------------------------------
   124                                  		; キーコードの表示
   125                                  		;---------------------------------------
   126 000001F2 68[04110000]6A1D6A-     		cdecl	draw_key, 2, 29, _KEY_BUFF		;     ring_show(key_buff); // 全要素を表示
   126 000001FA 02E87D0F00006683C4-
   126 00000203 0C                 
   127                                  .10E:											;   }
   128 00000204 EBCF                    		jmp		.10L							; }
   129                                  
   130 00000206 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
   130 0000020F 65726E656C212000   
   131                                  
   132 00000217 00                      ALIGN 4, db 0
   133 00000218 00000000                .int_key:	dd	0
   134                                  
   135                                  ALIGN 4, db 0
   136 0000021C 00000000                FONT_ADR:	dd	0
   137 00000220 00000000                RTC_TIME:	dd	0
   138                                  
   139                                  ;************************************************************************
   140                                  ;	タスク
   141                                  ;************************************************************************
   142                                  %include	"descriptor.s"
   143                              <1> ;************************************************************************
   144                              <1> ;	TSS
   145                              <1> ;************************************************************************
   146                              <1> TSS_0:
   147 00000224 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   148 00000228 00321000            <1> .esp0:			dd	SP_TASK_0 - 512				;*  4:ESP0
   149 0000022C 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   150 00000230 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   151 00000234 00000000            <1> .ss1:			dd	0							;* 16:
   152 00000238 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   153 0000023C 00000000            <1> .ss2:			dd	0							;* 24:
   154 00000240 00000000            <1> .cr3:			dd	0							;  28:CR3(PDBR)
   155 00000244 00000000            <1> .eip:			dd	0							;  32:EIP
   156 00000248 00000000            <1> .eflags:		dd	0							;  36:EFLAGS
   157 0000024C 00000000            <1> .eax:			dd	0							;  40:EAX
   158 00000250 00000000            <1> .ecx:			dd	0							;  44:ECX
   159 00000254 00000000            <1> .edx:			dd	0							;  48:EDX
   160 00000258 00000000            <1> .ebx:			dd	0							;  52:EBX
   161 0000025C 00000000            <1> .esp:			dd	0							;  56:ESP
   162 00000260 00000000            <1> .ebp:			dd	0							;  60:EBP
   163 00000264 00000000            <1> .esi:			dd	0							;  64:ESI
   164 00000268 00000000            <1> .edi:			dd	0							;  68:EDI
   165 0000026C 00000000            <1> .es:			dd	0							;  72:ES
   166 00000270 00000000            <1> .cs:			dd	0							;  76:CS
   167 00000274 00000000            <1> .ss:			dd	0							;  80:SS
   168 00000278 00000000            <1> .ds:			dd	0							;  84:DS
   169 0000027C 00000000            <1> .fs:			dd	0							;  88:FS
   170 00000280 00000000            <1> .gs:			dd	0							;  92:GS
   171 00000284 00000000            <1> .ldt:			dd	0							;* 96:LDTセグメントセレクタ
   172 00000288 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   173 0000028C 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   174                              <1> 
   175                              <1> TSS_1:
   176 000002FC 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   177 00000300 00361000            <1> .esp0:			dd	SP_TASK_1 - 512				;*  4:ESP0
   178 00000304 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   179 00000308 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   180 0000030C 00000000            <1> .ss1:			dd	0							;* 16:
   181 00000310 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   182 00000314 00000000            <1> .ss2:			dd	0							;* 24:
   183 00000318 00000000            <1> .cr3:			dd	0							;  28:CR3(PDBR)
   184 0000031C [74060000]          <1> .eip:			dd	task_1						;  32:EIP
   185 00000320 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   186 00000324 00000000            <1> .eax:			dd	0							;  40:EAX
   187 00000328 00000000            <1> .ecx:			dd	0							;  44:ECX
   188 0000032C 00000000            <1> .edx:			dd	0							;  48:EDX
   189 00000330 00000000            <1> .ebx:			dd	0							;  52:EBX
   190 00000334 00381000            <1> .esp:			dd	SP_TASK_1					;  56:ESP
   191 00000338 00000000            <1> .ebp:			dd	0							;  60:EBP
   192 0000033C 00000000            <1> .esi:			dd	0							;  64:ESI
   193 00000340 00000000            <1> .edi:			dd	0							;  68:EDI
   194 00000344 27000000            <1> .es:			dd	DS_TASK_1					;  72:ES
   195 00000348 1F000000            <1> .cs:			dd	CS_TASK_1					;  76:CS
   196 0000034C 27000000            <1> .ss:			dd	DS_TASK_1					;  80:SS
   197 00000350 27000000            <1> .ds:			dd	DS_TASK_1					;  84:DS
   198 00000354 27000000            <1> .fs:			dd	DS_TASK_1					;  88:FS
   199 00000358 27000000            <1> .gs:			dd	DS_TASK_1					;  92:GS
   200 0000035C 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   201 00000360 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   202 00000364 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   203                              <1> 
   204                              <1> TSS_2:
   205 000003D4 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   206 000003D8 003A1000            <1> .esp0:			dd	SP_TASK_2 - 512				;*  4:ESP0
   207 000003DC 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   208 000003E0 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   209 000003E4 00000000            <1> .ss1:			dd	0							;* 16:
   210 000003E8 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   211 000003EC 00000000            <1> .ss2:			dd	0							;* 24:
   212 000003F0 00000000            <1> .cr3:			dd	0							;  28:CR3(PDBR)
   213 000003F4 [A9060000]          <1> .eip:			dd	task_2						;  32:EIP
   214 000003F8 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   215 000003FC 00000000            <1> .eax:			dd	0							;  40:EAX
   216 00000400 00000000            <1> .ecx:			dd	0							;  44:ECX
   217 00000404 00000000            <1> .edx:			dd	0							;  48:EDX
   218 00000408 00000000            <1> .ebx:			dd	0							;  52:EBX
   219 0000040C 003C1000            <1> .esp:			dd	SP_TASK_2					;  56:ESP
   220 00000410 00000000            <1> .ebp:			dd	0							;  60:EBP
   221 00000414 00000000            <1> .esi:			dd	0							;  64:ESI
   222 00000418 00000000            <1> .edi:			dd	0							;  68:EDI
   223 0000041C 37000000            <1> .es:			dd	DS_TASK_2					;  72:ES
   224 00000420 2F000000            <1> .cs:			dd	CS_TASK_2					;  76:CS
   225 00000424 37000000            <1> .ss:			dd	DS_TASK_2					;  80:SS
   226 00000428 37000000            <1> .ds:			dd	DS_TASK_2					;  84:DS
   227 0000042C 37000000            <1> .fs:			dd	DS_TASK_2					;  88:FS
   228 00000430 37000000            <1> .gs:			dd	DS_TASK_2					;  92:GS
   229 00000434 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   230 00000438 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   231 0000043C 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   232                              <1> 
   233                              <1> TSS_3:
   234 000004AC 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   235 000004B0 003E1000            <1> .esp0:			dd	SP_TASK_3 - 512				;*  4:ESP0
   236 000004B4 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   237 000004B8 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   238 000004BC 00000000            <1> .ss1:			dd	0							;* 16:
   239 000004C0 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   240 000004C4 00000000            <1> .ss2:			dd	0							;* 24:
   241 000004C8 00000000            <1> .cr3:			dd	0							;  28:CR3(PDBR)
   242 000004CC [7C070000]          <1> .eip:			dd	task_3						;  32:EIP
   243 000004D0 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   244 000004D4 00000000            <1> .eax:			dd	0							;  40:EAX
   245 000004D8 00000000            <1> .ecx:			dd	0							;  44:ECX
   246 000004DC 00000000            <1> .edx:			dd	0							;  48:EDX
   247 000004E0 00000000            <1> .ebx:			dd	0							;  52:EBX
   248 000004E4 00401000            <1> .esp:			dd	SP_TASK_3					;  56:ESP
   249 000004E8 00000000            <1> .ebp:			dd	0							;  60:EBP
   250 000004EC 00000000            <1> .esi:			dd	0							;  64:ESI
   251 000004F0 00000000            <1> .edi:			dd	0							;  68:EDI
   252 000004F4 47000000            <1> .es:			dd	DS_TASK_3					;  72:ES
   253 000004F8 3F000000            <1> .cs:			dd	CS_TASK_3					;  76:CS
   254 000004FC 47000000            <1> .ss:			dd	DS_TASK_3					;  80:SS
   255 00000500 47000000            <1> .ds:			dd	DS_TASK_3					;  84:DS
   256 00000504 47000000            <1> .fs:			dd	DS_TASK_3					;  88:FS
   257 00000508 47000000            <1> .gs:			dd	DS_TASK_3					;  92:GS
   258 0000050C 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   259 00000510 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   260 00000514 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   261                              <1> 
   262                              <1> 
   263                              <1> ;************************************************************************
   264                              <1> ;	グローバルディスクリプタテーブル
   265                              <1> ;************************************************************************
   266 00000584 0000000000000000    <1> GDT:			dq	0x0000000000000000			; NULL
   267 0000058C FFFF0000009ACF00    <1> .cs_kernel:		dq	0x00CF9A000000FFFF			; CODE 4G
   268 00000594 FFFF00000092CF00    <1> .ds_kernel:		dq	0x00CF92000000FFFF			; DATA 4G
   269 0000059C 0000000000820000    <1> .ldt			dq	0x0000820000000000			; LDTディスクリプタ
   270 000005A4 6700000000890000    <1> .tss_0:			dq	0x0000890000000067			; TSSディスクリプタ
   271 000005AC 6700000000890000    <1> .tss_1:			dq	0x0000890000000067			; TSSディスクリプタ
   272 000005B4 6700000000890000    <1> .tss_2:			dq	0x0000890000000067			; TSSディスクリプタ
   273 000005BC 6700000000890000    <1> .tss_3:			dq	0x0000890000000067			; TSSディスクリプタ
   274 000005C4 0000080004EC0000    <1> .call_gate:		dq	0x0000EC0400080000			; 386コールゲート(DPL=3, count=4, SEL=8)
   275                              <1> .end:
   276                              <1> 
   277                              <1> CS_KERNEL		equ	.cs_kernel	- GDT
   278                              <1> DS_KERNEL		equ	.ds_kernel	- GDT
   279                              <1> SS_LDT			equ	.ldt		- GDT
   280                              <1> SS_TASK_0		equ	.tss_0		- GDT
   281                              <1> SS_TASK_1		equ	.tss_1		- GDT
   282                              <1> SS_TASK_2		equ	.tss_2		- GDT
   283                              <1> SS_TASK_3		equ	.tss_3		- GDT
   284                              <1> SS_GATE_0		equ	.call_gate	- GDT
   285                              <1> 
   286 000005CC 4700                <1> GDTR:	dw 		GDT.end - GDT - 1
   287 000005CE [84050000]          <1> 		dd 		GDT
   288                              <1> 
   289                              <1> 
   290                              <1> ;************************************************************************
   291                              <1> ;	ローカルディスクリプタテーブル
   292                              <1> ;************************************************************************
   293 000005D2 0000000000000000    <1> LDT:			dq	0x0000000000000000			; NULL
   294 000005DA FFFF0000009ACF00    <1> .cs_task_0:		dq	0x00CF9A000000FFFF			; CODE 4G
   295 000005E2 FFFF00000092CF00    <1> .ds_task_0:		dq	0x00CF92000000FFFF			; DATA 4G
   296 000005EA FFFF000000FACF00    <1> .cs_task_1:		dq	0x00CFFA000000FFFF			; CODE 4G
   297 000005F2 FFFF000000F2CF00    <1> .ds_task_1:		dq	0x00CFF2000000FFFF			; DATA 4G
   298 000005FA FFFF000000FACF00    <1> .cs_task_2:		dq	0x00CFFA000000FFFF			; CODE 4G
   299 00000602 FFFF000000F2CF00    <1> .ds_task_2:		dq	0x00CFF2000000FFFF			; DATA 4G
   300 0000060A FFFF000000FACF00    <1> .cs_task_3:		dq	0x00CFFA000000FFFF			; CODE 4G
   301 00000612 FFFF000000F2CF00    <1> .ds_task_3:		dq	0x00CFF2000000FFFF			; DATA 4G
   302                              <1> .end:
   303                              <1> 
   304                              <1> CS_TASK_0		equ	(.cs_task_0 - LDT) | 4		; タスク0用CSセレクタ
   305                              <1> DS_TASK_0		equ	(.ds_task_0 - LDT) | 4		; タスク0用DSセレクタ
   306                              <1> CS_TASK_1		equ	(.cs_task_1 - LDT) | 4 | 3	; タスク1用CSセレクタ
   307                              <1> DS_TASK_1		equ	(.ds_task_1 - LDT) | 4 | 3	; タスク1用DSセレクタ
   308                              <1> CS_TASK_2		equ	(.cs_task_2 - LDT) | 4 | 3	; タスク2用CSセレクタ
   309                              <1> DS_TASK_2		equ	(.ds_task_2 - LDT) | 4 | 3	; タスク2用DSセレクタ
   310                              <1> CS_TASK_3		equ	(.cs_task_3 - LDT) | 4 | 3	; タスク3用CSセレクタ
   311                              <1> DS_TASK_3		equ	(.ds_task_3 - LDT) | 4 | 3	; タスク3用DSセレクタ
   312                              <1> 
   313                              <1> LDT_LIMIT		equ	.end		- LDT - 1
   314                              <1> 
   315                              <1> 
   143                                  %include	"modules/int_timer.s"
   144                              <1> ;************************************************************************
   145                              <1> ;	例外:タイマー
   146                              <1> ;************************************************************************
   147                              <1> int_timer:
   148                              <1> 		;---------------------------------------
   149                              <1> 		; 【レジスタの保存】
   150                              <1> 		;---------------------------------------
   151 0000061A 60                  <1> 		pusha
   152 0000061B 1E                  <1> 		push	ds
   153 0000061C 06                  <1> 		push	es
   154                              <1> 
   155                              <1> 		;---------------------------------------
   156                              <1> 		; データ用セグメントの設定
   157                              <1> 		;---------------------------------------
   158 0000061D 66B81000            <1> 		mov		ax, 0x0010						; 
   159 00000621 8ED8                <1> 		mov		ds, ax							; 
   160 00000623 8EC0                <1> 		mov		es, ax							; 
   161                              <1> 
   162                              <1> 		;---------------------------------------
   163                              <1> 		; TICK
   164                              <1> 		;---------------------------------------
   165 00000625 FF05[70060000]      <1> 		inc		dword [TIMER_COUNT]				; TIMER_COUNT++; // 割り込み回数の更新
   166                              <1> 
   167                              <1> 		;---------------------------------------
   168                              <1> 		; 割り込みフラグをクリア(EOI)
   169                              <1> 		;---------------------------------------
   170                              <1> 		outp	0x20, 0x20						; // マスタPIC:EOIコマンド
    72 0000062B B020                <2>  mov al, %2
    73 0000062D E620                <2>  out %1, al
   171                              <1> 
   172                              <1> 		;---------------------------------------
   173                              <1> 		; タスクの切り替え
   174                              <1> 		;---------------------------------------
   175 0000062F 660F00C8            <1> 		str		ax								; AX = TR; // 現在のタスクレジスタ
   176 00000633 6683F820            <1> 		cmp		ax, SS_TASK_0					; case (AX)
   177 00000637 7415                <1> 		je		.11L							; {
   178 00000639 6683F828            <1> 		cmp		ax, SS_TASK_1					;   
   179 0000063D 7418                <1> 		je		.12L							;   
   180 0000063F 6683F830            <1> 		cmp		ax, SS_TASK_2					;   
   181 00000643 741B                <1> 		je		.13L							;   
   182                              <1> 												;   default:
   183 00000645 EA000000002000      <1> 		jmp		SS_TASK_0:0						;     // タスク0に切り替え
   184 0000064C EB1B                <1> 		jmp		.10E							;     break;
   185                              <1> 												;     
   186                              <1> .11L:											;   case SS_TASK_0:
   187 0000064E EA000000002800      <1> 		jmp		SS_TASK_1:0						;     // タスク1に切り替え
   188 00000655 EB12                <1> 		jmp		.10E							;     break;
   189                              <1> 												;     
   190                              <1> .12L:											;   case SS_TASK_1:
   191 00000657 EA000000003000      <1> 		jmp		SS_TASK_2:0						;     // タスク2に切り替え
   192 0000065E EB09                <1> 		jmp		.10E							;     break;
   193                              <1> 												;     
   194                              <1> .13L:											;   case SS_TASK_2:
   195 00000660 EA000000003800      <1> 		jmp		SS_TASK_3:0						;     // タスク3に切り替え
   196 00000667 EB00                <1> 		jmp		.10E							;     break;
   197                              <1> .10E:											; }
   198                              <1> 
   199                              <1> 		;---------------------------------------
   200                              <1> 		; 【レジスタの復帰】
   201                              <1> 		;---------------------------------------
   202 00000669 07                  <1> 		pop		es								; 
   203 0000066A 1F                  <1> 		pop		ds								; 
   204 0000066B 61                  <1> 		popa
   205                              <1> 
   206 0000066C CF                  <1> 		iret
   207                              <1> 
   208 0000066D 00<rep 3h>          <1> ALIGN 4, db 0
   209 00000670 00000000            <1> TIMER_COUNT:	dd	0
   210                              <1> 
   144                                  %include	"tasks/task_1.s"
   145                              <1> ;************************************************************************
   146                              <1> ;	TASK-1
   147                              <1> ;************************************************************************
   148                              <1> task_1:
   149                              <1> 		;---------------------------------------
   150                              <1> 		; 文字列の表示
   151                              <1> 		;---------------------------------------
   152 00000674 68[A2060000]6A076A- <1> 		cdecl	draw_str, 63, 0, 0x07, .s0		; draw_str();
   152 0000067C 006A3FE85904000066- <1>
   152 00000685 83C410              <1>
   153                              <1> 
   154                              <1> .10L:											; while (;;)
   155                              <1> 												; {
   156                              <1> 		;---------------------------------------
   157                              <1> 		; 時刻の表示
   158                              <1> 		;---------------------------------------
   159 00000688 A1[20020000]        <1> 		mov		eax, [RTC_TIME]					;   // 時刻の取得
   160 0000068D 5068000700006A006A- <1> 		cdecl	draw_time, 72, 0, 0x0700, eax	;   // 時刻の表示
   160 00000696 48E8B30700006683C4- <1>
   160 0000069F 10                  <1>
   161                              <1> 
   162 000006A0 EBE6                <1> 		jmp		.10L							; }
   163                              <1> 
   164                              <1> 		;---------------------------------------
   165                              <1> 		; データ
   166                              <1> 		;---------------------------------------
   167 000006A2 5461736B2D3100      <1> .s0		db	"Task-1", 0
   168                              <1> 
   145                                  %include	"tasks/task_2.s"
   146                              <1> 
   147                              <1> ;************************************************************************
   148                              <1> ;	TASK
   149                              <1> ;************************************************************************
   150                              <1> task_2:
   151                              <1> 		;---------------------------------------
   152                              <1> 		; 文字列の表示
   153                              <1> 		;---------------------------------------
   154 000006A9 68[6E070000]6A076A- <1> 		cdecl	draw_str, 63, 1, 0x07, .s0		; draw_str(.s0);
   154 000006B1 016A3FE82404000066- <1>
   154 000006BA 83C410              <1>
   155                              <1> 
   156                              <1> 		;---------------------------------------
   157                              <1> 		; 初期化
   158                              <1> 		;---------------------------------------
   159                              <1> 												; ---------+---------+---------|---------|---------|---------|
   160                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   161                              <1> 												; ---------+---------+---------|---------|---------|---------|
   162 000006BD DB05[5C070000]      <1> 		fild	dword [.c1000]					;     1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   163 000006C3 D9EB                <1> 		fldpi									;       pi |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   164 000006C5 DA35[60070000]      <1> 		fidiv	dword [.c180]					;   pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   165 000006CB D9EB                <1> 		fldpi									;       pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   166 000006CD DCC0                <1> 		fadd	st0, st0						;     2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   167 000006CF D9EE                <1> 		fldz									;   θ = 0 |    2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
   168                              <1> 												; ---------+---------+---------|---------|---------|---------|
   169                              <1> 												;   θ = 0 |    2*pi |d=pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
   170                              <1> 												; ---------+---------+---------|---------|---------|---------|
   171                              <1> 
   172                              <1> 		;---------------------------------------
   173                              <1> 		; メインループ
   174                              <1> 		;---------------------------------------
   175                              <1> .10L:											; for ( ; ; )
   176                              <1> 												; {
   177                              <1> 		;---------------------------------------
   178                              <1> 		; sin(t)
   179                              <1> 		;---------------------------------------
   180                              <1> 												; ---------+---------+---------|---------|---------|---------|
   181                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   182                              <1> 												; ---------+---------+---------|---------|---------|---------|
   183                              <1> 												;       θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   184                              <1> 												; ---------+---------+---------|---------|---------|---------|
   185 000006D1 D8C2                <1> 		fadd	st0, st2						;   θ + d |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   186 000006D3 D9F8                <1> 		fprem									;   MOD(θ)|    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   187 000006D5 D9C0                <1> 		fld		st0								;       θ |      θ |    2*pi |       d |    1000 |xxxxxxxxx|
   188 000006D7 D9FE                <1> 		fsin									;   sin(θ)|      θ |    2*pi |       d |    1000 |xxxxxxxxx|
   189 000006D9 D8CC                <1> 		fmul	st0, st4						;ST4sin(θ)|      θ |    2*pi |       d |    1000 |xxxxxxxxx|
   190                              <1> 												; ---------+---------+---------|---------|---------|---------|
   191 000006DB DF35[64070000]      <1> 		fbstp	[.bcd]							;       θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   192                              <1> 												; ---------+---------+---------|---------|---------|---------|
   193                              <1> 
   194 000006E1 A1[64070000]        <1> 		mov		eax, [.bcd]						;   EAX = 1000 * sin(t);
   195 000006E6 89C3                <1> 		mov		ebx, eax						;   EBX = EAX;
   196                              <1> 
   197 000006E8 250F0F0000          <1> 		and		eax, 0x0F0F						;   // 上位4ビットをマスク
   198 000006ED 0D30300000          <1> 		or		eax, 0x3030						;   // 上位4ビットに0x3を設定
   199                              <1> 
   200 000006F2 C1EB04              <1> 		shr		ebx, 4							;   EBX >>= 4;
   201 000006F5 81E30F0F0000        <1> 		and		ebx, 0x0F0F						;   // 上位4ビットをマスク
   202 000006FB 81CB30300000        <1> 		or		ebx, 0x3030						;   // 上位4ビットに0x3を設定
   203                              <1> 
   204 00000701 883D[76070000]      <1> 		mov		[.s2 + 0], bh					;   // 1桁目
   205 00000707 8825[78070000]      <1> 		mov		[.s3 + 0], ah					;   // 小数1桁目
   206 0000070D 881D[79070000]      <1> 		mov		[.s3 + 1], bl					;   // 小数2桁目
   207 00000713 A2[7A070000]        <1> 		mov		[.s3 + 2], al					;   // 小数3桁目
   208                              <1> 
   209 00000718 B807000000          <1> 		mov		eax, 7							;   // 符号の表示
   210 0000071D 0FA305[6D070000]    <1> 		bt		[.bcd + 9], eax					;   CF = bcd[9] & 0x80;
   211 00000724 7209                <1> 		jc		.10F							;   if (CF)
   212                              <1> 												;   {
   213 00000726 C605[75070000]2B    <1> 		mov		[.s1 + 0], byte '+'				;     *s1 = '+';
   214 0000072D EB07                <1> 		jmp		.10E							;   }
   215                              <1> .10F:											;   else
   216                              <1> 												;   {
   217 0000072F C605[75070000]2D    <1> 		mov		[.s1 + 0], byte '-'				;     *s1 = '-';
   218                              <1> .10E:											;   }
   219                              <1> 
   220 00000736 68[75070000]6A076A- <1> 		cdecl	draw_str, 72, 1, 0x07, .s1		; draw_str(.s1);
   220 0000073E 016A48E89703000066- <1>
   220 00000747 83C410              <1>
   221                              <1> 
   222                              <1> 		;---------------------------------------
   223                              <1> 		; ウェイト
   224                              <1> 		;---------------------------------------
   225 0000074A 6A14E8C10B00006683- <1> 		cdecl	wait_tick, 20					;   wait_tick(20);
   225 00000753 C404                <1>
   226                              <1> 
   227 00000755 E977FFFFFF          <1> 		jmp		.10L							; }
   228                              <1> 
   229                              <1> 
   230 0000075A 00<rep 2h>          <1> ALIGN 4, db 0
   231 0000075C E8030000            <1> .c1000:		dd	1000
   232 00000760 B4000000            <1> .c180:		dd	180
   233                              <1> 
   234 00000764 00<rep Ah>          <1> .bcd:	times 10 db	0x00
   235                              <1> 
   236 0000076E 5461736B2D3200      <1> .s0		db	"Task-2", 0
   237 00000775 2D                  <1> .s1:	db	"-"
   238 00000776 302E                <1> .s2:	db	"0."
   239 00000778 30303000            <1> .s3:	db	"000", 0
   240                              <1> 
   146                                  %include	"tasks/task_3.s"
   147                              <1> ;************************************************************************
   148                              <1> ;	TASK
   149                              <1> ;************************************************************************
   150                              <1> task_3:
   151                              <1> 		;---------------------------------------
   152                              <1> 		; 【スタックフレームの構築】
   153                              <1> 		;---------------------------------------
   154 0000077C 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   155                              <1> 												; ---------------
   156 0000077E 6A00                <1> 		push	dword 0							;    - 4| x0 = 0; // X座標原点
   157 00000780 6A00                <1> 		push	dword 0							;    - 8| y0 = 0; // Y座標原点
   158 00000782 6A00                <1> 		push	dword 0							;    -12| x  = 0; // X座標描画
   159 00000784 6A00                <1> 		push	dword 0							;    -16| y  = 0; // Y座標描画
   160 00000786 6A00                <1> 		push	dword 0							;    -20| r  = 0; // 角度
   161                              <1> 
   162                              <1> 		;---------------------------------------
   163                              <1> 		; 初期化
   164                              <1> 		;---------------------------------------
   165 00000788 BE[7C080000]        <1> 		mov		esi, DRAW_PARAM					; ESI = 描画パラメータ
   166                              <1> 
   167                              <1> 		;---------------------------------------
   168                              <1> 		; タイトル表示
   169                              <1> 		;---------------------------------------
   170 0000078D 8B06                <1> 		mov		eax, [esi + rose.x0]			; X0座標
   171 0000078F 8B5E04              <1> 		mov		ebx, [esi + rose.y0]			; Y0座標
   172                              <1> 
   173 00000792 C1E803              <1> 		shr		eax, 3							; EAX = EAX /  8; // X座標を文字位置に変換
   174 00000795 C1EB04              <1> 		shr		ebx, 4							; EBX = EBX / 16; // Y座標を文字位置に変換
   175 00000798 4B                  <1> 		dec		ebx								; // 1文字分上に移動
   176 00000799 8B4E24              <1> 		mov		ecx, [esi + rose.color_s]		; 文字色
   177 0000079C 8D5630              <1> 		lea		edx, [esi + rose.title]			; タイトル
   178                              <1> 
   179 0000079F 52515350E835030000- <1> 		cdecl	draw_str, eax, ebx, ecx, edx	; draw_str();
   179 000007A8 6683C410            <1>
   180                              <1> 
   181                              <1> 		;---------------------------------------
   182                              <1> 		; X軸の中点
   183                              <1> 		;---------------------------------------
   184 000007AC 8B06                <1> 		mov		eax, [esi + rose.x0]			; EAX  = X0座標
   185 000007AE 8B5E08              <1> 		mov		ebx, [esi + rose.x1]			; EBX  = X1座標
   186 000007B1 29C3                <1> 		sub		ebx, eax						; EBX  = (X1 - X0);
   187 000007B3 D1EB                <1> 		shr		ebx, 1							; EBX /= 2;
   188 000007B5 01C3                <1> 		add		ebx, eax						; EBX += X0
   189 000007B7 895DFC              <1> 		mov		[ebp - 4], ebx					; x0 = EBX; // X座標原点;
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; Y軸の中点
   193                              <1> 		;---------------------------------------
   194 000007BA 8B4604              <1> 		mov		eax, [esi + rose.y0]			; EAX  = Y0座標
   195 000007BD 8B5E0C              <1> 		mov		ebx, [esi + rose.y1]			; EBX  = Y1座標
   196 000007C0 29C3                <1> 		sub		ebx, eax						; EBX  = (Y1 - Y0);
   197 000007C2 D1EB                <1> 		shr		ebx, 1							; EBX /= 2;
   198 000007C4 01C3                <1> 		add		ebx, eax						; EBX += Y0
   199 000007C6 895DF8              <1> 		mov		[ebp - 8], ebx					; y0 = EBX; // Y座標原点;
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; X軸の描画
   203                              <1> 		;---------------------------------------
   204 000007C9 8B06                <1> 		mov		eax, [esi + rose.x0]			; EAX = X0座標;
   205 000007CB 8B5DF8              <1> 		mov		ebx, [ebp - 8]					; EBX = Y軸の中点;
   206 000007CE 8B4E08              <1> 		mov		ecx, [esi + rose.x1]			; ECX = X1座標;
   207                              <1> 
   208 000007D1 FF761853515350E893- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]	; X軸
   208 000007DA 0400006683C414      <1>
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; Y軸の描画
   212                              <1> 		;---------------------------------------
   213 000007E1 8B4604              <1> 		mov		eax, [esi + rose.y0]			; Y0座標
   214 000007E4 8B5DFC              <1> 		mov		ebx, [ebp - 4]					; EBX = X軸の中点;
   215 000007E7 8B4E0C              <1> 		mov		ecx, [esi + rose.y1]			; Y1座標
   216                              <1> 
   217 000007EA FF761C51535053E87A- <1> 		cdecl	draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]	; Y軸
   217 000007F3 0400006683C414      <1>
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 枠の描画
   221                              <1> 		;---------------------------------------
   222 000007FA 8B06                <1> 		mov		eax, [esi + rose.x0]			; X0座標
   223 000007FC 8B5E04              <1> 		mov		ebx, [esi + rose.y0]			; Y0座標
   224 000007FF 8B4E08              <1> 		mov		ecx, [esi + rose.x1]			; X1座標
   225 00000802 8B560C              <1> 		mov		edx, [esi + rose.y1]			; Y1座標
   226                              <1> 
   227 00000805 FF762052515350E80E- <1> 		cdecl	draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]	; 枠
   227 0000080E 0500006683C414      <1>
   228                              <1> 
   229                              <1> 		;---------------------------------------
   230                              <1> 		; 振幅をX軸の約95%とする
   231                              <1> 		;---------------------------------------
   232 00000815 8B4608              <1> 		mov		eax, [esi + rose.x1]			; EAX  = X1座標;
   233 00000818 2B06                <1> 		sub		eax, [esi + rose.x0]			; EAX -= X0座標;
   234 0000081A D1E8                <1> 		shr		eax, 1							; EAX /= 2;      // 半分
   235 0000081C 89C3                <1> 		mov		ebx, eax						; EBX  = EAX;
   236 0000081E C1EB04              <1> 		shr		ebx, 4							; EBX /= 16;
   237 00000821 29D8                <1> 		sub		eax, ebx						; EAX -= EBX;
   238                              <1> 
   239                              <1> 		;---------------------------------------
   240                              <1> 		; FPUの初期化(バラ曲線の初期化)
   241                              <1> 		;---------------------------------------
   242 00000823 FF7614FF761050E88D- <1> 		cdecl	fpu_rose_init										, eax											, dword [esi + rose.n]							, dword [esi + rose.d]
   242 0000082C 0000006683C40C      <1>
   246                              <1> 
   247                              <1> 		;---------------------------------------
   248                              <1> 		; メインループ
   249                              <1> 		;---------------------------------------
   250                              <1> .10L:											; for ( ; ; )
   251                              <1> 												; {
   252                              <1> 		;---------------------------------------
   253                              <1> 		; 座標計算
   254                              <1> 		;---------------------------------------
   255 00000833 8D5DF4              <1> 		lea		ebx, [ebp -12]					;   EBX = &x;
   256 00000836 8D4DF0              <1> 		lea		ecx, [ebp -16]					;   ECX = &y;
   257 00000839 8B45EC              <1> 		mov		eax, [ebp -20]					;   EAX = r;
   258                              <1> 
   259 0000083C 505153E89200000066- <1> 		cdecl	fpu_rose_update										, ebx											, ecx											, eax
   259 00000845 83C40C              <1>
   263                              <1> 
   264                              <1> 		;---------------------------------------
   265                              <1> 		; 角度更新(r = r % 36000)
   266                              <1> 		;---------------------------------------
   267 00000848 BA00000000          <1> 		mov		edx, 0							;   EDX = 0;
   268 0000084D 40                  <1> 		inc		eax								;   EAX++;
   269 0000084E BBA08C0000          <1> 		mov		ebx, 360 * 100					;   DBX = 36000
   270 00000853 F7F3                <1> 		div		ebx								;   EDX = EDX:EAX % EBX;
   271 00000855 8955EC              <1> 		mov		[ebp -20], edx
   272                              <1> 
   273                              <1> 		;---------------------------------------
   274                              <1> 		; ドット描画
   275                              <1> 		;---------------------------------------
   276 00000858 8B4DF4              <1> 		mov		ecx, [ebp -12]					;   ECX = X座標
   277 0000085B 8B55F0              <1> 		mov		edx, [ebp -16]					;   ECX = Y座標
   278                              <1> 
   279 0000085E 034DFC              <1> 		add		ecx, [ebp - 4]					;   ECX += X座標原点;
   280 00000861 0355F8              <1> 		add		edx, [ebp - 8]					;   EDX += Y座標原点;
   281                              <1> 
   282 00000864 8B5E28              <1> 		mov		ebx, [esi + rose.color_f]		;   EBX = 表示色;
   283 00000867 CD82                <1> 		int		0x82							;   sys_call_82(表示色, X, Y);
   284                              <1> 
   285                              <1> 		;---------------------------------------
   286                              <1> 		; ウェイト
   287                              <1> 		;---------------------------------------
   288 00000869 6A02E8A20A00006683- <1> 		cdecl	wait_tick, 2					;   wait_tick(2);
   288 00000872 C404                <1>
   289                              <1> 
   290                              <1> 		;---------------------------------------
   291                              <1> 		; ドット描画(消去)
   292                              <1> 		;---------------------------------------
   293 00000874 8B5E2C              <1> 		mov		ebx, [esi + rose.color_b]		;   EBX = 背景色;
   294 00000877 CD82                <1> 		int		0x82							;   sys_call_82(背景色, X, Y);
   295                              <1> 
   296                              <1> 
   297 00000879 EBB8                <1>         jmp     .10L                            ; }
   298                              <1> 
   299                              <1> 
   300 0000087B 00                  <1> ALIGN 4, db 0
   301                              <1> DRAW_PARAM:										; 描画パラメータ
   302                              <1> 	istruc	rose
   303 0000087C 10000000            <1> 		at	rose.x0,		dd		 16			; 左上座標：X0
   304 00000880 20000000            <1> 		at	rose.y0,		dd		 32			; 左上座標：Y0
   305 00000884 A0010000            <1> 		at	rose.x1,		dd		416			; 右下座標：X1
   306 00000888 B0010000            <1> 		at	rose.y1,		dd		432			; 右下座標：Y1
   307                              <1> 
   308 0000088C 02000000            <1> 		at	rose.n,			dd		2			; 変数：n
   309 00000890 01000000            <1> 		at	rose.d,			dd		1			; 変数：d
   310                              <1> 
   311 00000894 07000000            <1> 		at	rose.color_x,	dd		0x0007		; 描画色：X軸
   312 00000898 07000000            <1> 		at	rose.color_y,	dd		0x0007		; 描画色：Y軸
   313 0000089C 0F000000            <1> 		at	rose.color_z,	dd		0x000F		; 描画色：枠
   314 000008A0 0F030000            <1> 		at	rose.color_s,	dd		0x030F		; 描画色：文字
   315 000008A4 0F000000            <1> 		at	rose.color_f,	dd		0x000F		; 描画色：グラフ描画色
   316 000008A8 03000000            <1> 		at	rose.color_b,	dd		0x0003		; 描画色：グラフ消去色
   317                              <1> 
   318 000008AC 5461736B2D3300      <1> 		at	rose.title,		db		"Task-3", 0	; タイトル
   319                              <1> 
   320 000008B3 00<rep 9h>          <1> 	iend
   321                              <1> 
   322                              <1> 
   323                              <1> ;************************************************************************
   324                              <1> ;	バラ曲線：初期化
   325                              <1> ;------------------------------------------------------------------------
   326                              <1> ;	バラ曲線を描画するためにFPUのレジスタを初期化する
   327                              <1> ;
   328                              <1> ;	Z = A * sin(nθ)
   329                              <1> ;	  = A * sin( (n/d) * ((π/180) * t) )
   330                              <1> ;
   331                              <1> ;	このグラフを描画するために、X/Y座標を次の様に計算する
   332                              <1> ;
   333                              <1> ;	x = A * sin(nθ) * cos(θ)
   334                              <1> ;	y = A * sin(nθ) * sin(θ)
   335                              <1> ;
   336                              <1> ;	この時、kは(n / d)で指定する。また、ラディアン = 度 * (π / 180)
   337                              <1> ;	である事から、r = π / 180を先に計算しておく
   338                              <1> ;========================================================================
   339                              <1> ;■書式		: void fpu_rose_init(A, n, d);
   340                              <1> ;
   341                              <1> ;■引数
   342                              <1> ;	DWORD	: A
   343                              <1> ;	DWORD	: n
   344                              <1> ;	DWORD	: d
   345                              <1> ;
   346                              <1> ;■戻り値	: 無し
   347                              <1> ;************************************************************************
   348                              <1> fpu_rose_init:
   349                              <1> 		;---------------------------------------
   350                              <1> 		; 【スタックフレームの構築】
   351                              <1> 		;---------------------------------------
   352                              <1> 												; ------|--------
   353                              <1> 												;    +16| d
   354                              <1> 												;    +12| n
   355                              <1> 												;    + 8| A
   356                              <1> 												; ---------------
   357 000008BC 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   358 000008BD 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   359                              <1> 												; ---------------
   360 000008BF 68B4000000          <1> 		push	dword 180						;    - 4| dword i = 180;
   361                              <1> 
   362                              <1> 		;---------------------------------------
   363                              <1> 		; FPUを使った処理
   364                              <1> 		;
   365                              <1> 		; A(振幅), k(n/d),r(度→ラディアン)を
   366                              <1> 		; FPU内のレジスタにスタックしておく
   367                              <1> 		;---------------------------------------
   368                              <1> 												; ---------+---------+---------|---------|---------|---------|
   369                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   370                              <1> 												; ---------+---------+---------|---------|---------|---------|
   371 000008C4 D9EB                <1> 		fldpi									;   pi     |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   372 000008C6 DA75FC              <1> 		fidiv	dword [ebp - 4]					;   pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   373 000008C9 DB450C              <1> 		fild	dword [ebp +12]					;        n |  pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   374 000008CC DA7510              <1> 		fidiv	dword [ebp +16]					;      n/d |         |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   375 000008CF DB4508              <1> 		fild	dword [ebp + 8]					;        A |     n/d |  pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   376                              <1> 												; ---------+---------+---------|---------|---------|---------|
   377                              <1> 												;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   378                              <1> 												; ---------+---------+---------|---------|---------|---------|
   379                              <1> 		;---------------------------------------
   380                              <1> 		; スタックフレームの破棄
   381                              <1> 		;---------------------------------------
   382 000008D2 89EC                <1> 		mov		esp, ebp
   383 000008D4 5D                  <1> 		pop		ebp
   384                              <1> 
   385 000008D5 C3                  <1> 		ret
   386                              <1> 
   387                              <1> ;************************************************************************
   388                              <1> ;	バラ曲線：計算
   389                              <1> ;------------------------------------------------------------------------
   390                              <1> ;	角度を引数として受け取り、座標を計算する。
   391                              <1> ;	（他のパラメータはFPUレジスタに設定済みと仮定）
   392                              <1> ;========================================================================
   393                              <1> ;■書式		: void fpu_rose_update(t, X, Y);
   394                              <1> ;
   395                              <1> ;■引数
   396                              <1> ;	DWORD	: 角度[度]
   397                              <1> ;	DWORD	: Y座標へのポインタ
   398                              <1> ;	DWORD	: X座標へのポインタ
   399                              <1> ;
   400                              <1> ;■戻り値	: 無し
   401                              <1> ;************************************************************************
   402                              <1> fpu_rose_update:
   403                              <1> 		;---------------------------------------
   404                              <1> 		; 【スタックフレームの構築】
   405                              <1> 		;---------------------------------------
   406                              <1> 												; ---------------
   407                              <1> 												; EBP+16| t(角度)
   408                              <1> 												; EBP+12| Y(float)
   409                              <1> 												; EBP+ 8| X(float)
   410                              <1> 												; ---------------
   411 000008D6 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   412 000008D7 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   413                              <1> 												; ------|--------
   414                              <1> 
   415                              <1> 		;---------------------------------------
   416                              <1> 		; 【レジスタの保存】
   417                              <1> 		;---------------------------------------
   418 000008D9 50                  <1> 		push	eax
   419 000008DA 53                  <1> 		push	ebx
   420                              <1> 
   421                              <1> 		;---------------------------------------
   422                              <1> 		; X/Yの保存先を設定
   423                              <1> 		;---------------------------------------
   424 000008DB 8B4508              <1> 		mov		eax, [ebp +  8]					; EAX = pX; // X座標へのポインタ
   425 000008DE 8B5D0C              <1> 		mov		ebx, [ebp + 12]					; EBX = pY; // Y座標へのポインタ
   426                              <1> 
   427                              <1> 		;---------------------------------------
   428                              <1> 		; FPUを使った処理
   429                              <1> 		; 
   430                              <1> 		; 既にスタックしてある値を元に
   431                              <1> 		; t(角度)から座標を計算する
   432                              <1> 		;---------------------------------------
   433                              <1> 												; ---------+---------+---------|---------|---------|---------|
   434                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   435                              <1> 												; ---------+---------+---------|---------|---------|---------|
   436 000008E1 DB4510              <1> 		fild	dword [ebp +16]					;        t |       A |       k |       r |xxxxxxxxx|xxxxxxxxx|
   437 000008E4 D8CB                <1> 		fmul	st0, st3						;       rt |         |         |         |         |         |
   438 000008E6 D9C0                <1> 		fld		st0								;       rt |      rt |       A |       k |       r |xxxxxxxxx|
   439                              <1> 												; ---------+---------+---------|---------|---------|---------|
   440                              <1> 		; rt を θと置き換える					;       θ |      θ |       A |       k |       r |         |
   441                              <1> 												; ---------+---------+---------|---------|---------|---------|
   442 000008E8 D9FB                <1> 		fsincos									;   cos(θ)|  sin(θ)|      θ |       A |       k |       r |
   443 000008EA D9CA                <1> 		fxch	st2								;       θ |         |  cos(θ)|         |         |         |
   444 000008EC D8CC                <1> 		fmul	st0, st4						;      kθ |         |         |         |         |         |
   445 000008EE D9FE                <1> 		fsin									;  sin(kθ)|         |         |         |         |         |
   446 000008F0 D8CB                <1> 		fmul	st0, st3						; Asin(kθ)|         |         |         |         |         |
   447                              <1> 												; ---------+---------+---------|---------|---------|---------|
   448                              <1> 												; Asin(kθ)|  sin(θ)|  cos(θ)|       A |       k |       r |
   449                              <1> 												; ---------+---------+---------|---------|---------|---------|
   450                              <1> 		;---------------------------------------
   451                              <1> 		; x =  A * sin(kθ) * cos(θ);
   452                              <1> 		;---------------------------------------
   453                              <1> 												; ---------+---------+---------|---------|---------|---------|
   454                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   455                              <1> 												; ---------+---------+---------|---------|---------|---------|
   456                              <1> 												; Asin(kθ)|  sin(θ)|  cos(θ)|       A |       k |       r |
   457 000008F2 D9CA                <1> 		fxch	st2								;   cos(θ)|         |Asin(kθ)|         |         |         |
   458 000008F4 D8CA                <1> 		fmul	st0, st2						;        x |         |         |         |         |         |
   459 000008F6 DB18                <1> 		fistp	dword [eax]						;   sin(θ)|Asin(kθ)|       A |       k |       r |xxxxxxxxx|
   460                              <1> 												; ---------+---------+---------|---------|---------|---------|
   461                              <1> 		;---------------------------------------
   462                              <1> 		; y = -A * sin(kθ) * sin(θ);
   463                              <1> 		;---------------------------------------
   464                              <1> 												; ---------+---------+---------|---------|---------|---------|
   465                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   466                              <1> 												; ---------+---------+---------|---------|---------|---------|
   467                              <1> 												;   sin(θ)|Asin(kθ)|       A |       k |       r |xxxxxxxxx|
   468 000008F8 DEC9                <1> 		fmulp	st1, st0						;        y |       A |       k |       r |xxxxxxxxx|xxxxxxxxx|
   469 000008FA D9E0                <1> 		fchs									;       -y |         |         |         |xxxxxxxxx|xxxxxxxxx|
   470 000008FC DB1B                <1> 		fistp	dword [ebx]						;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   471                              <1> 												; ---------+---------+---------|---------|---------|---------|
   472                              <1> 		;---------------------------------------
   473                              <1> 		; レジスタの復帰
   474                              <1> 		;---------------------------------------
   475 000008FE 5B                  <1> 		pop		ebx
   476 000008FF 58                  <1> 		pop		eax
   477                              <1> 
   478                              <1> 		;---------------------------------------
   479                              <1> 		; スタックフレームの破棄
   480                              <1> 		;---------------------------------------
   481 00000900 89EC                <1> 		mov		esp, ebp
   482 00000902 5D                  <1> 		pop		ebp
   483                              <1> 
   484 00000903 C3                  <1> 		ret
   485                              <1> 
   147                                  
   148                                  ;************************************************************************
   149                                  ;	モジュール
   150                                  ;************************************************************************
   151                                  %include	"../modules/protect/vga.s"
   152                              <1> ;************************************************************************
   153                              <1> ;	読み込みプレーンの選択
   154                              <1> ;========================================================================
   155                              <1> ;■書式		: void vga_set_read_plane(plane);
   156                              <1> ;
   157                              <1> ;■引数
   158                              <1> ;	plane	: 読み込みプレーン
   159                              <1> ;
   160                              <1> ;■戻り値	: 無し
   161                              <1> ;************************************************************************
   162                              <1> vga_set_read_plane:
   163                              <1> 		;---------------------------------------
   164                              <1> 		; 【スタックフレームの構築】
   165                              <1> 		;---------------------------------------
   166                              <1> 												; EBP+ 8| プレーン（インデックス）
   167                              <1> 												; ------+----------------
   168 00000904 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   169 00000905 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   170                              <1> 												; ------+----------------
   171                              <1> 
   172                              <1> 		;---------------------------------------
   173                              <1> 		; 【レジスタの保存】
   174                              <1> 		;---------------------------------------
   175 00000907 50                  <1> 		push	eax
   176 00000908 52                  <1> 		push	edx
   177                              <1> 
   178                              <1> 		;---------------------------------------
   179                              <1> 		; 読み込みプレーンの選択
   180                              <1> 		;---------------------------------------
   181 00000909 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
   182 0000090C 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
   183 0000090F B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
   184 00000911 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
   185 00000915 66EF                <1> 		out		dx, ax							; // ポート出力
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 【レジスタの復帰】
   189                              <1> 		;---------------------------------------
   190 00000917 5A                  <1> 		pop		edx
   191 00000918 58                  <1> 		pop		eax
   192                              <1> 
   193                              <1> 		;---------------------------------------
   194                              <1> 		; 【スタックフレームの破棄】
   195                              <1> 		;---------------------------------------
   196 00000919 89EC                <1> 		mov		esp, ebp
   197 0000091B 5D                  <1> 		pop		ebp
   198                              <1> 
   199 0000091C C3                  <1> 		ret
   200                              <1> 
   201                              <1> 
   202                              <1> ;************************************************************************
   203                              <1> ;	書き込みプレーンを選択
   204                              <1> ;========================================================================
   205                              <1> ;■書式		: void vga_set_write_plane(plane);
   206                              <1> ;
   207                              <1> ;■引数
   208                              <1> ;	plane	: 書き込みプレーン
   209                              <1> ;
   210                              <1> ;■戻り値	: 無し
   211                              <1> ;************************************************************************
   212                              <1> vga_set_write_plane:
   213                              <1> 		;---------------------------------------
   214                              <1> 		; 【スタックフレームの構築】
   215                              <1> 		;---------------------------------------
   216                              <1> 												; EBP+ 8| プレーン（ビット指定）
   217                              <1> 												; ------+----------------
   218 0000091D 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   219 0000091E 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   220                              <1> 												; ------+----------------
   221                              <1> 
   222                              <1> 		;---------------------------------------
   223                              <1> 		; 【レジスタの保存】
   224                              <1> 		;---------------------------------------
   225 00000920 50                  <1> 		push	eax
   226 00000921 52                  <1> 		push	edx
   227                              <1> 
   228                              <1> 		;---------------------------------------
   229                              <1> 		; 書き込みプレーンの選択
   230                              <1> 		;---------------------------------------
   231 00000922 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
   232 00000925 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
   233 00000928 B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
   234 0000092A 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
   235 0000092E 66EF                <1> 		out		dx, ax							; // ポート出力
   236                              <1> 
   237                              <1> 		;---------------------------------------
   238                              <1> 		; 【レジスタの復帰】
   239                              <1> 		;---------------------------------------
   240 00000930 5A                  <1> 		pop		edx
   241 00000931 58                  <1> 		pop		eax
   242                              <1> 
   243                              <1> 		;---------------------------------------
   244                              <1> 		; 【スタックフレームの破棄】
   245                              <1> 		;---------------------------------------
   246 00000932 89EC                <1> 		mov		esp, ebp
   247 00000934 5D                  <1> 		pop		ebp
   248                              <1> 
   249 00000935 C3                  <1> 		ret
   250                              <1> 
   251                              <1> 
   252                              <1> ;************************************************************************
   253                              <1> ;	フォントの書き込み
   254                              <1> ;========================================================================
   255                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   256                              <1> ;
   257                              <1> ;■引数
   258                              <1> ;	font	: FONTアドレス
   259                              <1> ;	vram	: VRAMアドレス
   260                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   261                              <1> ;	color	: 描画色
   262                              <1> ;
   263                              <1> ;■戻り値	: 無し
   264                              <1> ;************************************************************************
   265                              <1> vram_font_copy:
   266                              <1> 		;---------------------------------------
   267                              <1> 		; 【スタックフレームの構築】
   268                              <1> 		;---------------------------------------
   269                              <1> 												; EBP+20| 色（背景/前景色）
   270                              <1> 												; EBP+16| プレーン（ビット指定）
   271                              <1> 												; EBP+12| VRAMアドレス
   272                              <1> 												; EBP+ 8| FONTアドレス
   273                              <1> 												; ------+----------------
   274 00000936 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   275 00000937 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   276                              <1> 												; ------+----------------
   277                              <1> 
   278                              <1> 		;---------------------------------------
   279                              <1> 		; 【レジスタの保存】
   280                              <1> 		;---------------------------------------
   281 00000939 50                  <1> 		push	eax
   282 0000093A 53                  <1> 		push	ebx
   283 0000093B 51                  <1> 		push	ecx
   284 0000093C 52                  <1> 		push	edx
   285 0000093D 56                  <1> 		push	esi
   286 0000093E 57                  <1> 		push	edi
   287                              <1> 
   288                              <1> 		;---------------------------------------
   289                              <1> 		; 【処理の開始】
   290                              <1> 		;---------------------------------------
   291 0000093F 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   292 00000942 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   293 00000945 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   294 00000949 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   295                              <1> 
   296 0000094D 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   297 0000094F 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   298 00000952 FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   299                              <1> 
   300 00000954 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   301 00000956 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   302 00000959 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   303                              <1> 
   304                              <1> 		;---------------------------------------
   305                              <1> 		; 16ドットフォントのコピー
   306                              <1> 		;---------------------------------------
   307 0000095B FC                  <1> 		cld										; DF  = 0; // アドレス加算
   308                              <1> 
   309 0000095C B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   310                              <1> .10L:											; do
   311                              <1> 												; {
   312                              <1> 		;---------------------------------------
   313                              <1> 		; フォントマスクの作成
   314                              <1> 		;---------------------------------------
   315 00000961 AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   316 00000962 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   317 00000964 F6D4                <1> 		not		ah								;   
   318                              <1> 
   319                              <1> 		;---------------------------------------
   320                              <1> 		; 前景色
   321                              <1> 		;---------------------------------------
   322 00000966 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   323                              <1> 
   324                              <1> 		;---------------------------------------
   325                              <1> 		; 背景色
   326                              <1> 		;---------------------------------------
   327 00000968 F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   328 0000096E 7404                <1> 		jz		.11F							;   {
   329 00000970 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   330 00000972 EB02                <1> 		jmp		.11E							;   }
   331                              <1> .11F:											;   else
   332                              <1> 												;   {
   333 00000974 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   334                              <1> .11E:											;   }
   335                              <1> 
   336                              <1> 		;---------------------------------------
   337                              <1> 		; 前景色と背景色を合成
   338                              <1> 		;---------------------------------------
   339 00000976 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   340                              <1> 
   341                              <1> 		;---------------------------------------
   342                              <1> 		; 新しい値を出力
   343                              <1> 		;---------------------------------------
   344 00000978 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   345                              <1> 
   346 0000097A 83C750              <1> 		add		edi, 80							;   EDI += 80;
   347 0000097D E2E2                <1> 		loop	.10L							; } while (--ECX);
   348                              <1> .10E:											; 
   349                              <1> 
   350                              <1> 		;---------------------------------------
   351                              <1> 		; 【レジスタの復帰】
   352                              <1> 		;---------------------------------------
   353 0000097F 5F                  <1> 		pop		edi
   354 00000980 5E                  <1> 		pop		esi
   355 00000981 5A                  <1> 		pop		edx
   356 00000982 59                  <1> 		pop		ecx
   357 00000983 5B                  <1> 		pop		ebx
   358 00000984 58                  <1> 		pop		eax
   359                              <1> 
   360                              <1> 		;---------------------------------------
   361                              <1> 		; 【スタックフレームの破棄】
   362                              <1> 		;---------------------------------------
   363 00000985 89EC                <1> 		mov		esp, ebp
   364 00000987 5D                  <1> 		pop		ebp
   365                              <1> 
   366 00000988 C3                  <1> 		ret
   367                              <1> 
   368                              <1> 
   369                              <1> ;************************************************************************
   370                              <1> ;	ビットパターンの書き込み
   371                              <1> ;========================================================================
   372                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   373                              <1> ;
   374                              <1> ;■引数
   375                              <1> ;	bit		: 出力ビットパターン
   376                              <1> ;	vram	: VRAMアドレス
   377                              <1> ;	flag	: 1:セット, 0:クリア
   378                              <1> ;
   379                              <1> ;■戻り値	: 無し
   380                              <1> ;************************************************************************
   381                              <1> vram_bit_copy:
   382                              <1> 		;---------------------------------------
   383                              <1> 		; 【スタックフレームの構築】
   384                              <1> 		;---------------------------------------
   385                              <1> 												; EBP+20| 色（背景/前景色）
   386                              <1> 												; EBP+16| プレーン（ビット指定）
   387                              <1> 												; EBP+12| VRAMアドレス
   388                              <1> 												; EBP+ 8| 出力ビットパターン
   389                              <1> 												; ------+----------------
   390 00000989 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   391 0000098A 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   392                              <1> 												; ------+----------------
   393                              <1> 
   394                              <1> 		;---------------------------------------
   395                              <1> 		; 【レジスタの保存】
   396                              <1> 		;---------------------------------------
   397 0000098C 50                  <1> 		push	eax
   398 0000098D 53                  <1> 		push	ebx
   399 0000098E 57                  <1> 		push	edi
   400                              <1> 
   401                              <1> 		;---------------------------------------
   402                              <1> 		; 【処理の開始】
   403                              <1> 		;---------------------------------------
   404 0000098F 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   405 00000992 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   406 00000996 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   407                              <1> 
   408 0000099A 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   409 0000099C 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   410 0000099F FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   411                              <1> 
   412                              <1> 		;---------------------------------------
   413                              <1> 		; マスクデータの作成
   414                              <1> 		;---------------------------------------
   415 000009A1 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   416 000009A4 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   417 000009A6 F6D4                <1> 		not		ah								; 
   418                              <1> 
   419                              <1> 		;---------------------------------------
   420                              <1> 		; 現在値の出力を取得
   421                              <1> 		;---------------------------------------
   422 000009A8 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   423 000009AA 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   424 000009AC 08E0                <1> 		or		al, ah							; AL |= AH;
   425                              <1> 
   426                              <1> 		;---------------------------------------
   427                              <1> 		; 新しい値を出力
   428                              <1> 		;---------------------------------------
   429 000009AE 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   430                              <1> 
   431                              <1> 		;---------------------------------------
   432                              <1> 		; 【レジスタの復帰】
   433                              <1> 		;---------------------------------------
   434 000009B0 5F                  <1> 		pop		edi
   435 000009B1 5B                  <1> 		pop		ebx
   436 000009B2 58                  <1> 		pop		eax
   437                              <1> 
   438                              <1> 		;---------------------------------------
   439                              <1> 		; 【スタックフレームの破棄】
   440                              <1> 		;---------------------------------------
   441 000009B3 89EC                <1> 		mov		esp, ebp
   442 000009B5 5D                  <1> 		pop		ebp
   443                              <1> 
   444 000009B6 C3                  <1> 		ret
   152                                  %include	"../modules/protect/draw_char.s"
   153                              <1> ;************************************************************************
   154                              <1> ;	文字の表示
   155                              <1> ;------------------------------------------------------------------------
   156                              <1> ;	グラフィックスモードでテキストを表示
   157                              <1> ;========================================================================
   158                              <1> ;■書式		: void draw_char(col, row, color, ch);
   159                              <1> ;
   160                              <1> ;■引数
   161                              <1> ;	col		: 列（0～79）
   162                              <1> ;	row		: 行（0～29）
   163                              <1> ;	color	: 描画色
   164                              <1> ;	ch		: 文字
   165                              <1> ;
   166                              <1> ;■戻り値	: 無し
   167                              <1> ;************************************************************************
   168                              <1> draw_char:
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 【スタックフレームの構築】
   171                              <1> 		;---------------------------------------
   172                              <1> 												; ------|--------
   173                              <1> 												; EBP+20| 文字
   174                              <1> 												; EBP+16| 色
   175                              <1> 												; EBP+12| Y（行）
   176                              <1> 												; EBP+ 8| X（列）
   177                              <1> 												; ------+----------------
   178 000009B7 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   179 000009B8 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   180                              <1> 												; ------+----------------
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; 【レジスタの保存】
   184                              <1> 		;---------------------------------------
   185 000009BA 50                  <1> 		push	eax
   186 000009BB 53                  <1> 		push	ebx
   187 000009BC 51                  <1> 		push	ecx
   188 000009BD 52                  <1> 		push	edx
   189 000009BE 56                  <1> 		push	esi
   190 000009BF 57                  <1> 		push	edi
   191                              <1> 
   192                              <1> 		;---------------------------------------
   193                              <1> 		; テストアンドセット
   194                              <1> 		;---------------------------------------
   195                              <1> %ifdef	USE_TEST_AND_SET
   196 000009C0 68[940A0000]E89908- <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   196 000009C8 00006683C404        <1>
   197                              <1> %endif
   198                              <1> 
   199                              <1> 		;---------------------------------------
   200                              <1> 		; コピー元フォントアドレスを設定
   201                              <1> 		;---------------------------------------
   202 000009CE 0FB67514            <1> 		movzx	esi, byte [ebp +20]				; CL  = 文字コード;
   203 000009D2 C1E604              <1> 		shl		esi, 4							; CL *= 16; // 1文字16バイト
   204 000009D5 0335[1C020000]      <1> 		add		esi, [FONT_ADR]					; ESI = フォントアドレス;
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; コピー先アドレスを取得
   208                              <1> 		; Adr = 0xA0000 + (640 / 8 * 16) * y + x
   209                              <1> 		;---------------------------------------
   210 000009DB 8B7D0C              <1> 		mov		edi, [ebp +12]					; Y（行）
   211 000009DE C1E708              <1> 		shl		edi, 8							; EDI = Y * 256;
   212 000009E1 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA0000]	; EDI = Y *   4 + Y;
   213 000009E8 037D08              <1> 		add		edi, [ebp + 8]					; X（列）
   214                              <1> 
   215                              <1> 		;---------------------------------------
   216                              <1> 		; 1文字分のフォントを出力
   217                              <1> 		;---------------------------------------
   218 000009EB 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
   219                              <1> 
   220 000009EF 6A03E80EFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
   220 000009F8 C404                <1>
   221 000009FA 6A08E81CFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
   221 00000A03 C404                <1>
   222 00000A05 536A085756E827FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
   222 00000A0E FF6683C410          <1>
   223                              <1> 
   224 00000A13 6A02E8EAFEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
   224 00000A1C C404                <1>
   225 00000A1E 6A04E8F8FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
   225 00000A27 C404                <1>
   226 00000A29 536A045756E803FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
   226 00000A32 FF6683C410          <1>
   227                              <1> 
   228 00000A37 6A01E8C6FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
   228 00000A40 C404                <1>
   229 00000A42 6A02E8D4FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
   229 00000A4B C404                <1>
   230 00000A4D 536A025756E8DFFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
   230 00000A56 FF6683C410          <1>
   231                              <1> 
   232 00000A5B 6A00E8A2FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
   232 00000A64 C404                <1>
   233 00000A66 6A01E8B0FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
   233 00000A6F C404                <1>
   234 00000A71 536A015756E8BBFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
   234 00000A7A FF6683C410          <1>
   235                              <1> 
   236                              <1> %ifdef	USE_TEST_AND_SET
   237                              <1> 		;---------------------------------------
   238                              <1> 		; テストアンドセット
   239                              <1> 		;---------------------------------------
   240 00000A7F C705[940A0000]0000- <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   240 00000A87 0000                <1>
   241                              <1> %endif
   242                              <1> 
   243                              <1> 		;---------------------------------------
   244                              <1> 		; 【レジスタの復帰】
   245                              <1> 		;---------------------------------------
   246 00000A89 5F                  <1> 		pop		edi
   247 00000A8A 5E                  <1> 		pop		esi
   248 00000A8B 5A                  <1> 		pop		edx
   249 00000A8C 59                  <1> 		pop		ecx
   250 00000A8D 5B                  <1> 		pop		ebx
   251 00000A8E 58                  <1> 		pop		eax
   252                              <1> 
   253                              <1> 		;---------------------------------------
   254                              <1> 		; 【スタックフレームの破棄】
   255                              <1> 		;---------------------------------------
   256 00000A8F 89EC                <1> 		mov		esp, ebp
   257 00000A91 5D                  <1> 		pop		ebp
   258                              <1> 
   259 00000A92 C3                  <1> 		ret
   260                              <1> 
   261                              <1> %ifdef USE_TEST_AND_SET
   262 00000A93 00                  <1> ALIGN 4, db 0
   263 00000A94 00000000            <1> IN_USE:	dd	0
   264                              <1> %endif
   265                              <1> 
   153                                  %include	"../modules/protect/draw_font.s"
   154                              <1> ;************************************************************************
   155                              <1> ;	フォント一覧を表示
   156                              <1> ;========================================================================
   157                              <1> ;■書式		: void draw_font(col, row);
   158                              <1> ;
   159                              <1> ;■引数
   160                              <1> ;	col		: 列
   161                              <1> ;	row		: 行
   162                              <1> ;
   163                              <1> ;■戻り値	: 無し
   164                              <1> ;************************************************************************
   165                              <1> draw_font:
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 【スタックフレームの構築】
   168                              <1> 		;---------------------------------------
   169                              <1> 												; ------|--------
   170                              <1> 												; EBP+12| Y（行）
   171                              <1> 												; EBP+ 8| X（列）
   172                              <1> 												; ---------------
   173 00000A98 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   174 00000A99 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   175                              <1> 												; ---------------
   176                              <1> 
   177                              <1> 		;---------------------------------------
   178                              <1> 		; 【レジスタの保存】
   179                              <1> 		;---------------------------------------
   180 00000A9B 50                  <1> 		push	eax
   181 00000A9C 53                  <1> 		push	ebx
   182 00000A9D 51                  <1> 		push	ecx
   183 00000A9E 52                  <1> 		push	edx
   184 00000A9F 56                  <1> 		push	esi
   185 00000AA0 57                  <1> 		push	edi
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 表示位置
   189                              <1> 		;---------------------------------------
   190 00000AA1 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   191 00000AA4 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   192                              <1> 
   193                              <1> 		;---------------------------------------
   194                              <1> 		; フォント一覧を表示
   195                              <1> 		;---------------------------------------
   196 00000AA7 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   197 00000AAC 81F900010000        <1> .10L:	cmp		ecx, 256						;      ECX < 256;
   198 00000AB2 731F                <1> 		jae		.10E							; 
   199                              <1> 												;      ECX++)
   200                              <1> 												; {
   201                              <1> 												;   // 桁位置の計算
   202 00000AB4 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   203 00000AB6 83E00F              <1> 		and		eax, 0x0F						;   EAX &= 0x0F
   204 00000AB9 01F0                <1> 		add		eax, esi						;   EAX += X;
   205                              <1> 												;   
   206                              <1> 												;   // 行位置の計算
   207 00000ABB 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   208 00000ABD C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
   209 00000AC0 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   210                              <1> 
   211 00000AC2 516A075350E8EBFEFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
   211 00000ACB FF6683C410          <1>
   212                              <1> 
   213 00000AD0 41                  <1> 		inc		ecx								;   // for (... ECX++)
   214 00000AD1 EBD9                <1> 		jmp		.10L							; 
   215                              <1> .10E:											; }
   216                              <1> 
   217                              <1> 		;---------------------------------------
   218                              <1> 		; 【レジスタの復帰】
   219                              <1> 		;---------------------------------------
   220 00000AD3 5F                  <1> 		pop		edi
   221 00000AD4 5E                  <1> 		pop		esi
   222 00000AD5 5A                  <1> 		pop		edx
   223 00000AD6 59                  <1> 		pop		ecx
   224 00000AD7 5B                  <1> 		pop		ebx
   225 00000AD8 58                  <1> 		pop		eax
   226                              <1> 
   227                              <1> 		;---------------------------------------
   228                              <1> 		; 【スタックフレームの破棄】
   229                              <1> 		;---------------------------------------
   230 00000AD9 89EC                <1> 		mov		esp, ebp
   231 00000ADB 5D                  <1> 		pop		ebp
   232                              <1> 
   233 00000ADC C3                  <1> 		ret
   234                              <1> 
   154                                  %include	"../modules/protect/draw_str.s"
   155                              <1> ;************************************************************************
   156                              <1> ;	文字列の表示
   157                              <1> ;========================================================================
   158                              <1> ;■書式		: void draw_str(col, row, color, p);
   159                              <1> ;
   160                              <1> ;■引数
   161                              <1> ;	col		: 列
   162                              <1> ;	row		: 行
   163                              <1> ;	color	: 描画色
   164                              <1> ;	p		: 文字列のアドレス
   165                              <1> ;
   166                              <1> ;■戻り値	: 無し
   167                              <1> ;************************************************************************
   168                              <1> draw_str:
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 【スタックフレームの構築】
   171                              <1> 		;---------------------------------------
   172                              <1> 												; ------|--------
   173                              <1> 												; EBP+20| *p（文字列のアドレス）
   174                              <1> 												; EBP+16| color（色）
   175                              <1> 												; EBP+12| row（行）
   176                              <1> 												; EBP+ 8| col（列）
   177                              <1> 												; ---------------
   178 00000ADD 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   179 00000ADE 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   180                              <1> 												; ---------------
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; 【レジスタの保存】
   184                              <1> 		;---------------------------------------
   185 00000AE0 50                  <1> 		push	eax
   186 00000AE1 53                  <1> 		push	ebx
   187 00000AE2 51                  <1> 		push	ecx
   188 00000AE3 52                  <1> 		push	edx
   189 00000AE4 56                  <1> 		push	esi
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 文字列の表示
   193                              <1> 		;---------------------------------------
   194 00000AE5 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
   195 00000AE8 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
   196 00000AEB 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
   197 00000AEF 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
   198                              <1> 
   199 00000AF2 FC                  <1> 		cld										; DF = 0; // アドレス加算
   200                              <1> .10L:											; do
   201                              <1> 												; {
   202 00000AF3 AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
   203 00000AF4 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   204 00000AF6 741A                <1> 		je		.10E							;     break;
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; 1文字表示
   208                              <1> 		;---------------------------------------
   209                              <1> %ifdef	USE_SYSTEM_CALL
   210 00000AF8 CD81                <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
   211                              <1> %else
   212                              <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
   213                              <1> %endif
   214                              <1> 
   215                              <1> 		; 次の文字の位置を調整
   216 00000AFA 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
   217 00000AFB 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
   218 00000AFE 7C10                <1> 		jl		.12E							;   {
   219 00000B00 B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
   220 00000B05 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
   221 00000B06 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
   222 00000B09 7C05                <1> 		jl		.12E							;     {
   223 00000B0B BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
   224                              <1> 												;     }
   225                              <1> .12E:											;   }
   226 00000B10 EBE1                <1> 		jmp		.10L							;   
   227                              <1> .10E:											; } while (1);
   228                              <1> 
   229                              <1> 		;---------------------------------------
   230                              <1> 		; 【レジスタの復帰】
   231                              <1> 		;---------------------------------------
   232 00000B12 5E                  <1> 		pop		esi
   233 00000B13 5A                  <1> 		pop		edx
   234 00000B14 59                  <1> 		pop		ecx
   235 00000B15 5B                  <1> 		pop		ebx
   236 00000B16 58                  <1> 		pop		eax
   237                              <1> 
   238                              <1> 		;---------------------------------------
   239                              <1> 		; 【スタックフレームの破棄】
   240                              <1> 		;---------------------------------------
   241 00000B17 89EC                <1> 		mov		esp, ebp
   242 00000B19 5D                  <1> 		pop		ebp
   243                              <1> 
   244 00000B1A C3                  <1> 		ret
   245                              <1> 
   155                                  %include	"../modules/protect/draw_color_bar.s"
   156                              <1> ;************************************************************************
   157                              <1> ;	カラーバーの表示
   158                              <1> ;========================================================================
   159                              <1> ;■書式		: void draw_color_bar(col, row);
   160                              <1> ;
   161                              <1> ;■引数
   162                              <1> ;	col		: 列
   163                              <1> ;	row		: 行
   164                              <1> ;
   165                              <1> ;■戻り値	: 無し
   166                              <1> ;************************************************************************
   167                              <1> draw_color_bar:
   168                              <1> 		;---------------------------------------
   169                              <1> 		; 【スタックフレームの構築】
   170                              <1> 		;---------------------------------------
   171                              <1> 												; ------|--------
   172                              <1> 												; EBP+ 8| X（列）
   173                              <1> 												; EBP+12| Y（行）
   174                              <1> 												; ---------------
   175 00000B1B 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   176 00000B1C 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   177                              <1> 												; ---------------
   178                              <1> 		;---------------------------------------
   179                              <1> 		; 【レジスタの保存】
   180                              <1> 		;---------------------------------------
   181 00000B1E 50                  <1> 		push	eax
   182 00000B1F 53                  <1> 		push	ebx
   183 00000B20 51                  <1> 		push	ecx
   184 00000B21 52                  <1> 		push	edx
   185 00000B22 56                  <1> 		push	esi
   186 00000B23 57                  <1> 		push	edi
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 表示位置
   190                              <1> 		;---------------------------------------
   191 00000B24 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   192 00000B27 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   193                              <1> 
   194                              <1> 		;---------------------------------------
   195                              <1> 		; カラーバーを表示
   196                              <1> 		;---------------------------------------
   197 00000B2A B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   198 00000B2F 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
   199 00000B32 732E                <1> 		jae		.10E							; 
   200                              <1> 												;      ECX++)
   201                              <1> 												; {
   202                              <1> 												;   // 桁位置の計算
   203 00000B34 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   204 00000B36 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
   205 00000B39 C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
   206 00000B3C 01F0                <1> 		add		eax, esi						;   EAX += X;
   207                              <1> 												;   
   208                              <1> 												;   // 行位置の計算
   209 00000B3E 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   210 00000B40 D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
   211 00000B42 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   212                              <1> 												;   
   213                              <1> 												;   // 表示色の取得
   214 00000B44 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
   215 00000B46 D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
   216 00000B48 8B92[750B0000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
   217                              <1> 
   218 00000B4E 68[6C0B0000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
   218 00000B56 E882FFFFFF6683C410  <1>
   219                              <1> 
   220 00000B5F 41                  <1> 		inc		ecx								;   // for (... ECX++)
   221 00000B60 EBCD                <1> 		jmp		.10L							; 
   222                              <1> .10E:											; }
   223                              <1> 
   224                              <1> 		;---------------------------------------
   225                              <1> 		; 【レジスタの復帰】
   226                              <1> 		;---------------------------------------
   227 00000B62 5F                  <1> 		pop		edi
   228 00000B63 5E                  <1> 		pop		esi
   229 00000B64 5A                  <1> 		pop		edx
   230 00000B65 59                  <1> 		pop		ecx
   231 00000B66 5B                  <1> 		pop		ebx
   232 00000B67 58                  <1> 		pop		eax
   233                              <1> 
   234                              <1> 		;---------------------------------------
   235                              <1> 		; 【スタックフレームの破棄】
   236                              <1> 		;---------------------------------------
   237 00000B68 89EC                <1> 		mov		esp, ebp
   238 00000B6A 5D                  <1> 		pop		ebp
   239                              <1> 
   240 00000B6B C3                  <1> 		ret
   241                              <1> 
   242 00000B6C 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
   243                              <1> 
   244 00000B75 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
   245 00000B79 00010009            <1> 		dw	0x0100, 0x0900
   246 00000B7D 0002000A            <1> 		dw	0x0200, 0x0A00
   247 00000B81 0003000B            <1> 		dw	0x0300, 0x0B00
   248 00000B85 0004000C            <1> 		dw	0x0400, 0x0C00
   249 00000B89 0005000D            <1> 		dw	0x0500, 0x0D00
   250 00000B8D 0006000E            <1> 		dw	0x0600, 0x0E00
   251 00000B91 0007000F            <1> 		dw	0x0700, 0x0F00
   252                              <1> 
   156                                  %include	"../modules/protect/draw_pixel.s"
   157                              <1> ;************************************************************************
   158                              <1> ;	ピクセルの描画
   159                              <1> ;========================================================================
   160                              <1> ;■書式		: void draw_pixel(X, Y, color);
   161                              <1> ;
   162                              <1> ;■引数
   163                              <1> ;	X		: X座標
   164                              <1> ;	Y		: Y座標
   165                              <1> ;	color	: 描画色
   166                              <1> ;
   167                              <1> ;■戻り値	: 無し
   168                              <1> ;************************************************************************
   169                              <1> draw_pixel:
   170                              <1> 		;---------------------------------------
   171                              <1> 		; 【スタックフレームの構築】
   172                              <1> 		;---------------------------------------
   173                              <1> 												; ------|--------
   174                              <1> 												; EBP+16| 色
   175                              <1> 												; EBP+12| Y
   176                              <1> 												; EBP+ 8| X
   177                              <1> 												; ------|--------
   178 00000B95 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   179 00000B96 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   180                              <1> 												; ------+--------
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 【レジスタの保存】
   183                              <1> 		;---------------------------------------
   184 00000B98 50                  <1> 		push	eax
   185 00000B99 53                  <1> 		push	ebx
   186 00000B9A 51                  <1> 		push	ecx
   187 00000B9B 57                  <1> 		push	edi
   188                              <1> 
   189                              <1> 		;---------------------------------------
   190                              <1> 		; Y座標を80倍する（640/8）
   191                              <1> 		;---------------------------------------
   192 00000B9C 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI  = Y座標
   193 00000B9F C1E704              <1> 		shl		edi, 4							; EDI *= 16;
   194 00000BA2 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA_0000]	; EDI  = 0xA00000[EDI * 4 + EDI];
   195                              <1> 
   196                              <1> 		;---------------------------------------
   197                              <1> 		; X座標を1/8して加算
   198                              <1> 		;---------------------------------------
   199 00000BA9 8B5D08              <1> 		mov		ebx, [ebp + 8]					; EBX  = X座標;
   200 00000BAC 89D9                <1> 		mov		ecx, ebx						; ECX  = X座標;（一時保存）
   201 00000BAE C1EB03              <1> 		shr		ebx, 3							; EBX /= 8;
   202 00000BB1 01DF                <1> 		add		edi, ebx						; EDI += EBX;
   203                              <1> 
   204                              <1> 		;---------------------------------------
   205                              <1> 		; X座標を8で割った余りからビット位置を計算
   206                              <1> 		; (0=0x80, 1=0x40,... 7=0x01)
   207                              <1> 		;---------------------------------------
   208 00000BB3 83E107              <1> 		and		ecx, 0x07						; ECX = X & 0x07;
   209 00000BB6 BB80000000          <1> 		mov		ebx, 0x80						; EBX = 0x80;
   210 00000BBB D3EB                <1> 		shr		ebx, cl							; EBX >>= ECX;
   211                              <1> 
   212                              <1> 		;---------------------------------------
   213                              <1> 		; 色指定
   214                              <1> 		;---------------------------------------
   215 00000BBD 8B4D10              <1> 		mov		ecx, [ebp +16]					; // 表示色
   216                              <1> 
   217                              <1> %ifdef	USE_TEST_AND_SET
   218 00000BC0 68[940A0000]E89906- <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   218 00000BC8 00006683C404        <1>
   219                              <1> %endif
   220                              <1> 
   221                              <1> 		;---------------------------------------
   222                              <1> 		; プレーン毎に出力
   223                              <1> 		;---------------------------------------
   224 00000BCE 6A03E82FFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 輝度(I)プレーンを選択
   224 00000BD7 C404                <1>
   225 00000BD9 6A08E83DFDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 輝度(I)プレーンを選択
   225 00000BE2 C404                <1>
   226 00000BE4 516A085753E89BFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
   226 00000BED FF6683C410          <1>
   227                              <1> 
   228 00000BF2 6A02E80BFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 赤(R)プレーンを選択
   228 00000BFB C404                <1>
   229 00000BFD 6A04E819FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 赤(R)プレーンを選択
   229 00000C06 C404                <1>
   230 00000C08 516A045753E877FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
   230 00000C11 FF6683C410          <1>
   231                              <1> 
   232 00000C16 6A01E8E7FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 緑(G)プレーンを選択
   232 00000C1F C404                <1>
   233 00000C21 6A02E8F5FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 緑(G)プレーンを選択
   233 00000C2A C404                <1>
   234 00000C2C 516A025753E853FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
   234 00000C35 FF6683C410          <1>
   235                              <1> 
   236 00000C3A 6A00E8C3FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 青(B)プレーンを選択
   236 00000C43 C404                <1>
   237 00000C45 6A01E8D1FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 青(B)プレーンを選択
   237 00000C4E C404                <1>
   238 00000C50 516A015753E82FFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
   238 00000C59 FF6683C410          <1>
   239                              <1> 
   240                              <1> 
   241                              <1> %ifdef	USE_TEST_AND_SET
   242                              <1> 		;---------------------------------------
   243                              <1> 		; テストアンドセット
   244                              <1> 		;---------------------------------------
   245 00000C5E C705[940A0000]0000- <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   245 00000C66 0000                <1>
   246                              <1> %endif
   247                              <1> 
   248                              <1> 		;---------------------------------------
   249                              <1> 		; 【レジスタの復帰】
   250                              <1> 		;---------------------------------------
   251 00000C68 5F                  <1> 		pop		edi
   252 00000C69 59                  <1> 		pop		ecx
   253 00000C6A 5B                  <1> 		pop		ebx
   254 00000C6B 58                  <1> 		pop		eax
   255                              <1> 
   256                              <1> 		;---------------------------------------
   257                              <1> 		; 【スタックフレームの破棄】
   258                              <1> 		;---------------------------------------
   259 00000C6C 89EC                <1> 		mov		esp, ebp
   260 00000C6E 5D                  <1> 		pop		ebp
   261                              <1> 
   262 00000C6F C3                  <1> 		ret
   263                              <1> 
   157                                  %include	"../modules/protect/draw_line.s"
   158                              <1> ;************************************************************************
   159                              <1> ;	直線の描画
   160                              <1> ;========================================================================
   161                              <1> ;■書式		: void draw_line(X0, Y0, X1, Y1, color);
   162                              <1> ;
   163                              <1> ;■引数
   164                              <1> ;	X0		: 始点のX座標
   165                              <1> ;	Y0		: 始点のY座標
   166                              <1> ;	X1		: 終点のX座標
   167                              <1> ;	Y1		: 終点のY座標
   168                              <1> ;	color	: 描画色
   169                              <1> ;
   170                              <1> ;■戻り値	: 無し
   171                              <1> ;************************************************************************
   172                              <1> draw_line:
   173                              <1> 		;---------------------------------------
   174                              <1> 		; 【スタックフレームの構築】
   175                              <1> 		;---------------------------------------
   176                              <1> 												; ---------------
   177                              <1> 												;    +24| 色
   178                              <1> 												;    +20| Y1
   179                              <1> 												;    +16| X1
   180                              <1> 												;    +12| Y0
   181                              <1> 												;    + 8| X0
   182                              <1> 												; ---------------
   183 00000C70 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   184 00000C71 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   185                              <1> 												; ---------------
   186 00000C73 6A00                <1> 		push	dword 0							;    - 4| sum   = 0; // 相対軸の積算値
   187 00000C75 6A00                <1> 		push	dword 0							;    - 8| x0    = 0; // X座標
   188 00000C77 6A00                <1> 		push	dword 0							;    -12| dx    = 0; // X増分
   189 00000C79 6A00                <1> 		push	dword 0							;    -16| inc_x = 0; // X座標増分(1 or -1)
   190 00000C7B 6A00                <1> 		push	dword 0							;    -20| y0    = 0; // Y座標
   191 00000C7D 6A00                <1> 		push	dword 0							;    -24| dy    = 0; // Y増分
   192 00000C7F 6A00                <1> 		push	dword 0							;    -28| inc_y = 0; // Y座標増分(1 or -1)
   193                              <1> 												; ------|--------
   194                              <1> 
   195                              <1> 		;---------------------------------------
   196                              <1> 		; 【レジスタの保存】
   197                              <1> 		;---------------------------------------
   198 00000C81 50                  <1> 		push	eax
   199 00000C82 53                  <1> 		push	ebx
   200 00000C83 51                  <1> 		push	ecx
   201 00000C84 52                  <1> 		push	edx
   202 00000C85 56                  <1> 		push	esi
   203 00000C86 57                  <1> 		push	edi
   204                              <1> 
   205                              <1> 		;---------------------------------------
   206                              <1> 		; 幅を計算（X軸）
   207                              <1> 		;---------------------------------------
   208 00000C87 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   209 00000C8A 8B5D10              <1> 		mov		ebx, [ebp +16]					; EBX = X1;
   210 00000C8D 29C3                <1> 		sub		ebx, eax						; EBX = X1 - X0; // 幅
   211 00000C8F 7D09                <1> 		jge		.10F							; if (幅 < 0)
   212                              <1> 												; {
   213 00000C91 F7DB                <1> 		neg		ebx								;   幅   *= -1;
   214 00000C93 BEFFFFFFFF          <1> 		mov		esi, -1							;   // X座標の増分
   215 00000C98 EB05                <1> 		jmp		.10E							; }
   216                              <1> .10F:											; else
   217                              <1> 												; {
   218 00000C9A BE01000000          <1> 		mov		esi, 1							;   // X座標の増分
   219                              <1> .10E:											; }
   220                              <1> 
   221                              <1> 		;---------------------------------------
   222                              <1> 		; 高さを計算（Y軸）
   223                              <1> 		;---------------------------------------
   224 00000C9F 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX = Y0
   225 00000CA2 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1
   226 00000CA5 29CA                <1> 		sub		edx, ecx						; EDX = Y1 - Y0; // 高さ
   227 00000CA7 7D09                <1> 		jge		.20F							; if (高さ < 0)
   228                              <1> 												; {
   229 00000CA9 F7DA                <1> 		neg		edx								;   高さ *= -1;
   230 00000CAB BFFFFFFFFF          <1> 		mov		edi, -1							;   // Y座標の増分
   231 00000CB0 EB05                <1> 		jmp		.20E							; }
   232                              <1> .20F:											; else
   233                              <1> 												; {
   234 00000CB2 BF01000000          <1> 		mov		edi, 1							;   // Y座標の増分
   235                              <1> .20E:											; }
   236                              <1> 
   237                              <1> 		;---------------------------------------
   238                              <1> 		; X軸
   239                              <1> 		;---------------------------------------
   240 00000CB7 8945F8              <1> 		mov		[ebp - 8], eax					;   // X軸:開始座標
   241 00000CBA 895DF4              <1> 		mov		[ebp -12], ebx					;   // X軸:描画幅
   242 00000CBD 8975F0              <1> 		mov		[ebp -16], esi					;   // X軸:増分(基準軸：1 or -1)
   243                              <1> 
   244                              <1> 		;---------------------------------------
   245                              <1> 		; Y軸
   246                              <1> 		;---------------------------------------
   247 00000CC0 894DEC              <1> 		mov		[ebp -20], ecx					;   // Y軸:開始座標
   248 00000CC3 8955E8              <1> 		mov		[ebp -24], edx					;   // Y軸:描画幅
   249 00000CC6 897DE4              <1> 		mov		[ebp -28], edi					;   // Y軸:増分(基準軸：1 or -1)
   250                              <1> 
   251                              <1> 		;---------------------------------------
   252                              <1> 		; 基準軸を決める
   253                              <1> 		;---------------------------------------
   254 00000CC9 39D3                <1> 		cmp		ebx, edx						; if (幅 <= 高さ)
   255 00000CCB 7F08                <1> 		jg		.22F							; {
   256                              <1> 												;   
   257 00000CCD 8D75EC              <1> 		lea		esi, [ebp -20]					;   // Y軸が基準軸
   258 00000CD0 8D7DF8              <1> 		lea		edi, [ebp - 8]					;   // X軸が相対軸
   259                              <1> 												;   
   260 00000CD3 EB06                <1> 		jmp		.22E							; }
   261                              <1> .22F:											; else
   262                              <1> 												; {
   263 00000CD5 8D75F8              <1> 		lea		esi, [ebp - 8]					;   // X軸が基準軸
   264 00000CD8 8D7DEC              <1> 		lea		edi, [ebp -20]					;   // Y軸が相対軸
   265                              <1> .22E:											; }
   266                              <1> 
   267                              <1> 		;---------------------------------------
   268                              <1> 		; 繰り返し回数(基準軸のドット数)
   269                              <1> 		;---------------------------------------
   270 00000CDB 8B4EFC              <1> 		mov		ecx, [esi - 4]					; ECX = 基準軸描画幅;
   271 00000CDE 83F900              <1> 		cmp		ecx, 0							; if (0 == ECX)
   272 00000CE1 7505                <1> 		jnz		.30E							; {
   273 00000CE3 B901000000          <1> 		mov		ecx, 1							;   ECX = 1;
   274                              <1> .30E:											; }
   275                              <1> 
   276                              <1> 		;---------------------------------------
   277                              <1> 		; 線を描画
   278                              <1> 		;---------------------------------------
   279                              <1> .50L:											; do
   280                              <1> 												; {
   281                              <1> %ifdef	USE_SYSTEM_CALL
   282 00000CE8 89C8                <1> 		mov		eax, ecx						;   // 繰り返し回数を保存
   283                              <1> 
   284 00000CEA 8B5D18              <1> 		mov		ebx, [ebp +24]					;   EBX = 表示色;
   285 00000CED 8B4DF8              <1> 		mov		ecx, [ebp - 8]					;   ECX = X座標;
   286 00000CF0 8B55EC              <1> 		mov		edx, [ebp -20]					;   EDX = Y座標;
   287 00000CF3 CD82                <1> 		int		0x82							;   sys_call(1, X, Y, 色, 文字); BX(C), CX(X), DX(Y)
   288                              <1> 
   289 00000CF5 89C1                <1> 		mov		ecx, eax
   290                              <1> %else
   291                              <1> 		cdecl	draw_pixel, dword [ebp - 8], 							dword [ebp -20], 							dword [ebp +24]		;   // 点の描画
   294                              <1> %endif
   295                              <1> 												;   // 基準軸を更新(1ドット分)
   296 00000CF7 8B46F8              <1> 		mov		eax, [esi - 8]					;   EAX = 基準軸増分(1 or -1);
   297 00000CFA 0106                <1> 		add		[esi - 0], eax					;   
   298                              <1> 
   299                              <1> 												;   // 相対軸を更新
   300 00000CFC 8B45FC              <1> 		mov		eax, [ebp - 4]					;   EAX  = sum; // 相対軸の積算値;
   301 00000CFF 0347FC              <1> 		add		eax, [edi - 4]					;   EAX += dy;  // 増分(相対軸の描画幅)
   302 00000D02 8B5EFC              <1> 		mov		ebx, [esi - 4]					;   EBX  = dx;  // 増分(基準軸の描画幅)
   303                              <1> 
   304 00000D05 39D8                <1> 		cmp		eax, ebx						;   if (積算値 <= 相対軸の増分)
   305 00000D07 7C07                <1> 		jl		.52E							;   {
   306 00000D09 29D8                <1> 		sub		eax, ebx						;     EAX -= EBX; // 積算値から相対軸の増分を減算
   307                              <1> 												;     
   308                              <1> 												;     // 相対軸の座標を更新(1ドット分)
   309 00000D0B 8B5FF8              <1> 		mov		ebx, [edi - 8]					;     EBX =  相対軸増分;
   310 00000D0E 011F                <1> 		add		[edi - 0], ebx					;     
   311                              <1> .52E:											;   }
   312 00000D10 8945FC              <1> 		mov		[ebp - 4], eax					;   // 積算値を更新
   313                              <1> 												;   
   314 00000D13 E2D3                <1> 		loop	.50L							;   
   315                              <1> .50E:											; } while (ループ回数--);
   316                              <1> 
   317                              <1> 		;---------------------------------------
   318                              <1> 		; 【レジスタの復帰】
   319                              <1> 		;---------------------------------------
   320 00000D15 5F                  <1> 		pop		edi
   321 00000D16 5E                  <1> 		pop		esi
   322 00000D17 5A                  <1> 		pop		edx
   323 00000D18 59                  <1> 		pop		ecx
   324 00000D19 5B                  <1> 		pop		ebx
   325 00000D1A 58                  <1> 		pop		eax
   326                              <1> 
   327                              <1> 		;---------------------------------------
   328                              <1> 		; 【スタックフレームの破棄】
   329                              <1> 		;---------------------------------------
   330 00000D1B 89EC                <1> 		mov		esp, ebp
   331 00000D1D 5D                  <1> 		pop		ebp
   332                              <1> 
   333 00000D1E C3                  <1> 		ret
   334                              <1> 
   158                                  %include	"../modules/protect/draw_rect.s"
   159                              <1> ;************************************************************************
   160                              <1> ;	矩形の描画
   161                              <1> ;========================================================================
   162                              <1> ;■書式		: void draw_rect(X0, Y0, X1, Y1, color);
   163                              <1> ;
   164                              <1> ;■引数
   165                              <1> ;	X0		: 始点のX座標
   166                              <1> ;	Y0		: 始点のY座標
   167                              <1> ;	X1		: 終点のX座標
   168                              <1> ;	Y1		: 終点のY座標
   169                              <1> ;	color	: 描画色
   170                              <1> ;
   171                              <1> ;■戻り値	: 無し
   172                              <1> ;************************************************************************
   173                              <1> draw_rect:
   174                              <1> 		;---------------------------------------
   175                              <1> 		; 【スタックフレームの構築】
   176                              <1> 		;---------------------------------------
   177                              <1> 												; ------|--------
   178                              <1> 												; EBP+24| 色
   179                              <1> 												; EBP+20| Y1
   180                              <1> 												; EBP+16| X1
   181                              <1> 												; EBP+12| Y0
   182                              <1> 												; EBP+ 8| X0
   183                              <1> 												; ---------------
   184 00000D1F 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   185 00000D20 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   186                              <1> 												; ------|--------
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 【レジスタの保存】
   190                              <1> 		;---------------------------------------
   191 00000D22 50                  <1> 		push		eax
   192 00000D23 53                  <1> 		push		ebx
   193 00000D24 51                  <1> 		push		ecx
   194 00000D25 52                  <1> 		push		edx
   195 00000D26 56                  <1> 		push		esi
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; 矩形を描画
   199                              <1> 		;---------------------------------------
   200 00000D27 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   201 00000D2A 8B5D0C              <1> 		mov		ebx, [ebp +12]					; EBX = Y0;
   202 00000D2D 8B4D10              <1> 		mov		ecx, [ebp +16]					; ECX = X1;
   203 00000D30 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1;
   204 00000D33 8B7518              <1> 		mov		esi, [ebp +24]					; ESI = 色;
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; 座標軸の大小を確定
   208                              <1> 		;---------------------------------------
   209 00000D36 39C8                <1> 		cmp		eax, ecx						; if (X1 < X0)
   210 00000D38 7C01                <1> 		jl		.10E							; {
   211 00000D3A 91                  <1> 		xchg	eax, ecx						;   X0とX1を入れ替える;
   212                              <1> .10E:											; }
   213                              <1> 
   214 00000D3B 39D3                <1> 		cmp		ebx, edx						; if (Y1 < Y0)
   215 00000D3D 7C02                <1> 		jl		.20E							; {
   216 00000D3F 87DA                <1> 		xchg	ebx, edx						;   Y0とY1を入れ替える;
   217                              <1> .20E:											; }
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 矩形を描画
   221                              <1> 		;---------------------------------------
   222 00000D41 5653515350E825FFFF- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, esi	; 上線
   222 00000D4A FF6683C414          <1>
   223 00000D4F 5652505350E817FFFF- <1> 		cdecl	draw_line, eax, ebx, eax, edx, esi	; 左線
   223 00000D58 FF6683C414          <1>
   224                              <1> 
   225 00000D5D 4A                  <1> 		dec		edx									; EDX--; // 下線は1ドット上げる
   226 00000D5E 5652515250E808FFFF- <1> 		cdecl	draw_line, eax, edx, ecx, edx, esi	; 下線
   226 00000D67 FF6683C414          <1>
   227 00000D6C 42                  <1> 		inc		edx
   228                              <1> 
   229 00000D6D 49                  <1> 		dec		ecx									; ECX--; // 右線は1ドット左に移動
   230 00000D6E 5652515351E8F8FEFF- <1> 		cdecl	draw_line, ecx, ebx, ecx, edx, esi	; 右線
   230 00000D77 FF6683C414          <1>
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; 【レジスタの復帰】
   234                              <1> 		;---------------------------------------
   235 00000D7C 5E                  <1> 		pop		esi
   236 00000D7D 5A                  <1> 		pop		edx
   237 00000D7E 59                  <1> 		pop		ecx
   238 00000D7F 5B                  <1> 		pop		ebx
   239 00000D80 58                  <1> 		pop		eax
   240                              <1> 
   241                              <1> 		;---------------------------------------
   242                              <1> 		; 【スタックフレームの破棄】
   243                              <1> 		;---------------------------------------
   244 00000D81 89EC                <1> 		mov		esp, ebp
   245 00000D83 5D                  <1> 		pop		ebp
   246                              <1> 
   247 00000D84 C3                  <1> 		ret
   159                                  %include	"../modules/protect/itoa.s"
   160                              <1> ;************************************************************************
   161                              <1> ;	数値を文字に変換
   162                              <1> ;========================================================================
   163                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
   164                              <1> ;
   165                              <1> ;■引数
   166                              <1> ;	num		: 変換する数値
   167                              <1> ;	buff	: 保存先バッファアドレス
   168                              <1> ;	size	: 保存先バッファサイズ
   169                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
   170                              <1> ;	flags	: フラグ
   171                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
   172                              <1> ;			:      : 0=空白を' '（スペース）で埋める
   173                              <1> ;			:   B1 : 1=＋/-符号を表示する
   174                              <1> ;			:      : 0=＋/-符号を表示しない
   175                              <1> ;			:   B0 : 1=符号付き正数として扱う
   176                              <1> ;			:      : 0=符号無し正数として扱う
   177                              <1> ;
   178                              <1> ;■戻り値	: 無し
   179                              <1> ;************************************************************************
   180                              <1> itoa:
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 【スタックフレームの構築】
   183                              <1> 		;---------------------------------------
   184                              <1> 												; ------|--------
   185                              <1> 												;    +24| フラグ
   186                              <1> 												;    +20| 基数
   187                              <1> 												;    +16| バッファサイズ
   188                              <1> 												;    +12| バッファアドレス
   189                              <1> 												;    + 8| 数値
   190                              <1> 												; ------|--------
   191                              <1> 												;    + 4| EIP（戻り番地）
   192 00000D85 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   193 00000D86 89E5                <1> 		mov		ebp, esp						; ------+--------
   194                              <1> 
   195                              <1> 		;---------------------------------------
   196                              <1> 		; 【レジスタの保存】
   197                              <1> 		;---------------------------------------
   198 00000D88 50                  <1> 		push	eax
   199 00000D89 53                  <1> 		push	ebx
   200 00000D8A 51                  <1> 		push	ecx
   201 00000D8B 52                  <1> 		push	edx
   202 00000D8C 56                  <1> 		push	esi
   203 00000D8D 57                  <1> 		push	edi
   204                              <1> 
   205                              <1> 		;---------------------------------------
   206                              <1> 		; 引数を取得
   207                              <1> 		;---------------------------------------
   208 00000D8E 8B4508              <1> 		mov		eax, [ebp + 8]					; val  = 数値;
   209 00000D91 8B750C              <1> 		mov		esi, [ebp +12]					; dst  = バッファアドレス;
   210 00000D94 8B4D10              <1> 		mov		ecx, [ebp +16]					; size = 残りバッファサイズ;
   211                              <1> 
   212 00000D97 89F7                <1> 		mov		edi, esi						; // バッファの最後尾
   213 00000D99 01CF                <1> 		add		edi, ecx						; dst  = &dst[size - 1];
   214 00000D9B 4F                  <1> 		dec		edi								; 
   215                              <1> 
   216 00000D9C 8B5D18              <1> 		mov		ebx, [ebp +24]					; flags = オプション;
   217                              <1> 
   218                              <1> 		;---------------------------------------
   219                              <1> 		; 符号付き判定
   220                              <1> 		;---------------------------------------
   221 00000D9F F7C301000000        <1> 		test	ebx, 0b0001						; if (flags & 0x01)// 符号付き
   222 00000DA5 7408                <1> .10Q:	je		.10E							; {
   223 00000DA7 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   224 00000DAA 7D03                <1> .12Q:	jge		.12E							;   {
   225 00000DAC 83CB02              <1> 		or		ebx, 0b0010						;     flags |=  2; // 符号表示
   226                              <1> .12E:											;   }
   227                              <1> .10E:											; }
   228                              <1> 
   229                              <1> 		;---------------------------------------
   230                              <1> 		; 符号出力判定
   231                              <1> 		;---------------------------------------
   232 00000DAF F7C302000000        <1> 		test	ebx, 0b0010						; if (flags & 0x02)// 符号出力判定
   233 00000DB5 7410                <1> .20Q:	je		.20E							; {
   234 00000DB7 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   235 00000DBA 7D07                <1> .22Q:	jge		.22F							;   {
   236 00000DBC F7D8                <1> 		neg		eax								;     val *= -1;   // 符号反転
   237 00000DBE C6062D              <1> 		mov		[esi], byte '-'					;     *dst = '-';  // 符号表示
   238 00000DC1 EB03                <1> 		jmp		.22E							;   }
   239                              <1> .22F:											;   else
   240                              <1> 												;   {
   241 00000DC3 C6062B              <1> 		mov		[esi], byte '+'					;     *dst = '+';  // 符号表示
   242                              <1> .22E:											;   }
   243 00000DC6 49                  <1> 		dec		ecx								;   size--;        // 残りバッファサイズの減算
   244                              <1> .20E:											; }
   245                              <1> 
   246                              <1> 		;---------------------------------------
   247                              <1> 		; ASCII変換
   248                              <1> 		;---------------------------------------
   249 00000DC7 8B5D14              <1> 		mov		ebx, [ebp +20]					; BX = 基数;
   250                              <1> .30L:											; do
   251                              <1> 												; {
   252 00000DCA BA00000000          <1> 		mov		edx, 0							;   
   253 00000DCF F7F3                <1> 		div		ebx								;   DX = DX:AX % 基数;
   254                              <1> 												;   AX = DX:AX / 基数;
   255                              <1> 												;   
   256 00000DD1 89D6                <1> 		mov		esi, edx						;   // テーブル参照
   257 00000DD3 8A96[FE0D0000]      <1> 		mov		dl, byte [.ascii + esi]			;   DL = ASCII[DX];
   258                              <1> 												;   
   259 00000DD9 8817                <1> 		mov		[edi], dl						;   *dst = DL;
   260 00000DDB 4F                  <1> 		dec		edi								;   dst--;
   261                              <1> 												;   
   262 00000DDC 83F800              <1> 		cmp		eax, 0							;   
   263 00000DDF E0E9                <1> 		loopnz	.30L							; } while (AX);
   264                              <1> .30E:
   265                              <1> 
   266                              <1> 		;---------------------------------------
   267                              <1> 		; 空欄を埋める
   268                              <1> 		;---------------------------------------
   269 00000DE1 83F900              <1> 		cmp		ecx, 0							; if (size)
   270 00000DE4 740E                <1> .40Q:	je		.40E							; {
   271 00000DE6 B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   272 00000DE8 66837D1804          <1> 		cmp		[ebp +24], word 0b0100			;   if (flags & 0x04)
   273 00000DED 7502                <1> .42Q:	jne		.42E							;   {
   274 00000DEF B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   275                              <1> .42E:											;   }
   276 00000DF1 FD                  <1> 		std										;   // DF = 1（-方向）
   277 00000DF2 F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   278                              <1> .40E:											; }
   279                              <1> 
   280                              <1> 		;---------------------------------------
   281                              <1> 		; 【レジスタの復帰】
   282                              <1> 		;---------------------------------------
   283 00000DF4 5F                  <1> 		pop		edi
   284 00000DF5 5E                  <1> 		pop		esi
   285 00000DF6 5A                  <1> 		pop		edx
   286 00000DF7 59                  <1> 		pop		ecx
   287 00000DF8 5B                  <1> 		pop		ebx
   288 00000DF9 58                  <1> 		pop		eax
   289                              <1> 
   290                              <1> 		;---------------------------------------
   291                              <1> 		; 【スタックフレームの破棄】
   292                              <1> 		;---------------------------------------
   293 00000DFA 89EC                <1> 		mov		esp, ebp
   294 00000DFC 5D                  <1> 		pop		ebp
   295                              <1> 
   296 00000DFD C3                  <1> 		ret
   297                              <1> 
   298 00000DFE 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   298 00000E07 39414243444546      <1>
   299                              <1> 
   160                                  %include	"../modules/protect/rtc.s"
   161                              <1> ;************************************************************************
   162                              <1> ;	RTCから時刻データを取得する
   163                              <1> ;========================================================================
   164                              <1> ;■書式		: DWORD rtc_get_time(dst);
   165                              <1> ;
   166                              <1> ;■引数
   167                              <1> ;	dst		: 保存先アドレス
   168                              <1> ;
   169                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   170                              <1> ;************************************************************************
   171                              <1> rtc_get_time:
   172                              <1> 		;---------------------------------------
   173                              <1> 		; 【スタックフレームの構築】
   174                              <1> 		;---------------------------------------
   175                              <1> 												; ------|--------
   176                              <1> 												; EBP+ 8| 保存先アドレス
   177                              <1> 												; ---------------
   178 00000E0E 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   179 00000E0F 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   180                              <1> 												; ---------------
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 【レジスタの保存】
   183                              <1> 		;---------------------------------------
   184 00000E11 53                  <1> 		push	ebx
   185                              <1> 
   186                              <1> 		;---------------------------------------
   187                              <1> 		; RTCから時刻を取得
   188                              <1> 		;---------------------------------------
   189 00000E12 B00A                <1> 		mov		al, 0x0A						; // レジスタA
   190 00000E14 E670                <1> 		out		0x70, al						; outp(0x70, AL);
   191 00000E16 E471                <1> 		in		al, 0x71						; AL = レジスタA;
   192 00000E18 A880                <1> 		test	al, 0x80						; if (DM & UIP) // 更新中
   193 00000E1A 7407                <1> 		je		.10F							; {
   194 00000E1C B801000000          <1> 		mov		eax, 1							;   ret = 1; // データ更新中
   195 00000E21 EB27                <1> 		jmp		.10E							; }
   196                              <1> .10F:											; else
   197                              <1> 												; {
   198                              <1> 												;   // RAM[0x04]:時
   199 00000E23 B004                <1> 		mov		al, 0x04						;   AL = 0x04;
   200 00000E25 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   201 00000E27 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 時データ
   202                              <1> 												;   
   203 00000E29 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   204                              <1> 												;   
   205                              <1> 												;   // RAM[0x02]:分
   206 00000E2C B002                <1> 		mov		al, 0x02						;   AL = 0x02;
   207 00000E2E E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   208 00000E30 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 分データ
   209                              <1> 												;   
   210 00000E32 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   211                              <1> 												;   
   212                              <1> 												;   // RAM[0x00]:秒
   213 00000E35 B000                <1> 		mov		al, 0x00						;   AL = 0x00;
   214 00000E37 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   215 00000E39 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 秒データ
   216                              <1> 												;   
   217 00000E3B 25FFFFFF00          <1> 		and		eax, 0x00_FF_FF_FF				;   // 下位3バイトのみ有効
   218                              <1> 												;   
   219 00000E40 8B5D08              <1> 		mov		ebx, [ebp + 8]					;   dst = 保存先;
   220 00000E43 8903                <1> 		mov		[ebx], eax						;   [dst] = 時刻;
   221                              <1> 												;   
   222 00000E45 B800000000          <1> 		mov		eax, 0							;   ret = 0; // 正常終了
   223                              <1> .10E:											; }
   224                              <1> 
   225                              <1> 		;---------------------------------------
   226                              <1> 		; 【レジスタの復帰】
   227                              <1> 		;---------------------------------------
   228 00000E4A 5B                  <1> 		pop		ebx
   229                              <1> 
   230                              <1> 		;---------------------------------------
   231                              <1> 		; 【スタックフレームの破棄】
   232                              <1> 		;---------------------------------------
   233 00000E4B 89EC                <1> 		mov		esp, ebp
   234 00000E4D 5D                  <1> 		pop		ebp
   235                              <1> 
   236 00000E4E C3                  <1> 		ret
   237                              <1> 
   161                                  %include	"../modules/protect/draw_time.s"
   162                              <1> ;************************************************************************
   163                              <1> ;	時刻の表示
   164                              <1> ;========================================================================
   165                              <1> ;■書式		: void draw_time(col, row, color, time);
   166                              <1> ;
   167                              <1> ;■引数
   168                              <1> ;	col		: 列
   169                              <1> ;	row		: 行
   170                              <1> ;	color	: 描画色
   171                              <1> ;	time	: 時刻データ
   172                              <1> ;
   173                              <1> ;■戻り値	: 無し
   174                              <1> ;************************************************************************
   175                              <1> draw_time:
   176                              <1> 		;---------------------------------------
   177                              <1> 		; 【スタックフレームの構築】
   178                              <1> 		;---------------------------------------
   179                              <1> 												; ------|--------
   180                              <1> 												; EBP+20| 時刻データ
   181                              <1> 												; EBP+16| 色
   182                              <1> 												; EBP+12| Y（行）
   183                              <1> 												; EBP+ 8| X（列）
   184                              <1> 												; ---------------
   185 00000E4F 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   186 00000E50 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   187                              <1> 												; ---------------
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 【レジスタの保存】
   190                              <1> 		;---------------------------------------
   191 00000E52 50                  <1> 		push	eax
   192 00000E53 53                  <1> 		push	ebx
   193                              <1> 
   194                              <1> 		;---------------------------------------
   195                              <1> 		; 
   196                              <1> 		;---------------------------------------
   197 00000E54 8B4514              <1> 		mov		eax, [ebp +20]					; EAX = 時刻データ;
   198 00000E57 3B05[D40E0000]      <1> 		cmp		eax, [.last]					; if (今回 != 前回)
   199 00000E5D 7467                <1> 		je		.10E							; {
   200                              <1> 												;   
   201 00000E5F A3[D40E0000]        <1> 		mov		[.last], eax					;   // 前回の時刻値を更新
   202                              <1> 												;   
   203 00000E64 BB00000000          <1> 		mov		ebx, 0							;   EBX = 0;
   204 00000E69 88C3                <1> 		mov		bl, al							;   EBX = 秒;
   205 00000E6B 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .sec, 2, 16, 0b0100	;   // 時刻を文字列に変換
   205 00000E72 [E20E0000]53E809FF- <1>
   205 00000E7A FFFF6683C414        <1>
   206                              <1> 
   207 00000E80 88E3                <1> 		mov		bl, ah							;   EBX = 分;
   208 00000E82 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .min, 2, 16, 0b0100	;   // 時刻を文字列に変換
   208 00000E89 [DF0E0000]53E8F2FE- <1>
   208 00000E91 FFFF6683C414        <1>
   209                              <1> 
   210 00000E97 C1E810              <1> 		shr		eax, 16							;   EBX = 時;
   211 00000E9A 6A046A106A0268-     <1> 		cdecl	itoa, eax, .hour, 2, 16, 0b0100	;   // 時刻を文字列に変換
   211 00000EA1 [DC0E0000]50E8DAFE- <1>
   211 00000EA9 FFFF6683C414        <1>
   212                              <1> 
   213                              <1> 												;   // 時刻を表示
   214 00000EAF 68[DC0E0000]FF7510- <1> 		cdecl	draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
   214 00000EB7 FF750CFF7508E81BFC- <1>
   214 00000EC0 FFFF6683C410        <1>
   215                              <1> 												;     
   216                              <1> 												;   }
   217                              <1> .10E:											; }
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 【レジスタの復帰】
   221                              <1> 		;---------------------------------------
   222 00000EC6 5B                  <1> 		pop		ebx
   223 00000EC7 58                  <1> 		pop		eax
   224                              <1> 
   225                              <1> 		;---------------------------------------
   226                              <1> 		; 【スタックフレームの破棄】
   227                              <1> 		;---------------------------------------
   228 00000EC8 89EC                <1> 		mov		esp, ebp
   229 00000ECA 5D                  <1> 		pop		ebp
   230                              <1> 
   231 00000ECB C3                  <1> 		ret
   232                              <1> 
   233                              <1> ALIGN 2, db 0
   234 00000ECC 0000000000000000    <1> .temp:	dq	0
   235 00000ED4 0000000000000000    <1> .last:	dq	0
   236 00000EDC 5A5A3A              <1> .hour:	db	"ZZ:"
   237 00000EDF 5A5A3A              <1> .min:	db	"ZZ:"
   238 00000EE2 5A5A00              <1> .sec:	db	"ZZ", 0
   239                              <1> 
   162                                  %include	"../modules/protect/interrupt.s"
   163                              <1> ;************************************************************************
   164                              <1> ;	割り込みベクタの初期化
   165                              <1> ;************************************************************************
   166 00000EE5 90<rep 3h>          <1> ALIGN 4
   167 00000EE8 FF07                <1> IDTR:	dw 		8 * 256 - 1					; idt_limit
   168 00000EEA 00001000            <1> 		dd 		VECT_BASE					; idt location
   169                              <1> 
   170                              <1> ;************************************************************************
   171                              <1> ;	割り込みテーブルを初期化
   172                              <1> ;------------------------------------------------------------------------
   173                              <1> ;	
   174                              <1> ;	まず、全ての割り込みアドレスにデフォルト処理を設定すし、その後、
   175                              <1> ;	必要な割り込みだけ設定しなおす。
   176                              <1> ;	
   177                              <1> ;	割り込みアドレスは、VECT_BASEで指定され、256の割り込みがあるので
   178                              <1> ;	0x0800バイト占有することになる。
   179                              <1> ;	
   180                              <1> ;	           |____________| _V___
   181                              <1> ;	  VECT_BASE| IntDefault |  |   
   182                              <1> ;	           | IntDefault |  | 8 * 256
   183                              <1> ;	           |      :     |  |   
   184                              <1> ;	           |____________| _|___
   185                              <1> ;	      +0800|////////////|
   186                              <1> ;	           |            |
   187                              <1> ;	
   188                              <1> ;	一つの割り込み設定は8バイトで構成される。
   189                              <1> ;	
   190                              <1> ;	           |____________|____________| 
   191                              <1> ;	        [0]| Address Lo[15: 0]       | 
   192                              <1> ;	        [2]| Selector                | 
   193                              <1> ;	        [4]| Flags                   | 
   194                              <1> ;	        [6]|_Address Lo[32:16]_______| 
   195                              <1> ;	           |/////////////////////////| 
   196                              <1> ;	           |            |            | 
   197                              <1> ;	
   198                              <1> ;========================================================================
   199                              <1> ;■書式		: void init_int(void);
   200                              <1> ;
   201                              <1> ;■引数		: 無し
   202                              <1> ;
   203                              <1> ;■戻り値	: 無し
   204                              <1> ;************************************************************************
   205                              <1> init_int:
   206                              <1> 		;---------------------------------------
   207                              <1> 		; 【レジスタの保存】
   208                              <1> 		;---------------------------------------
   209 00000EEE 50                  <1> 		push	eax
   210 00000EEF 53                  <1> 		push	ebx
   211 00000EF0 51                  <1> 		push	ecx
   212 00000EF1 57                  <1> 		push	edi
   213                              <1> 
   214                              <1> 		;---------------------------------------
   215                              <1> 		; 全ての割り込みにデフォルト処理を設定
   216                              <1> 		;---------------------------------------
   217 00000EF2 8D05[38100000]      <1> 		lea		eax, [int_default]				; EAX   = 割り込み処理アドレス;
   218 00000EF8 BB008E0800          <1> 		mov		ebx, 0x0008_8E00				; EBX   = セグメントセレクタ;
   219 00000EFD 6693                <1> 		xchg	ax, bx							; // 下位ワードを交換
   220                              <1> 
   221 00000EFF B900010000          <1> 		mov		ecx, 256						; ECX   = 割り込みベクタ数
   222 00000F04 BF00001000          <1> 		mov		edi, VECT_BASE					; EDI   = 割り込みベクタテーブル
   223                              <1> 
   224                              <1> .10L:											; do
   225                              <1> 												; {
   226 00000F09 891F                <1> 		mov		[edi + 0], ebx					;   [EDI + 0] = 割り込みディスクリプタ（下位）
   227 00000F0B 894704              <1> 		mov		[edi + 4], eax					;   [EDI + 4] = 割り込みディスクリプタ（上位）
   228 00000F0E 83C708              <1> 		add		edi, 8							;   EDI += 8;
   229 00000F11 E2F6                <1> 		loop	.10L							; } while (ECX--);
   230                              <1> 
   231                              <1> 		;---------------------------------------
   232                              <1> 		; 割り込みディスクリプタの設定
   233                              <1> 		;---------------------------------------
   234 00000F13 0F011D[E80E0000]    <1> 		lidt	[IDTR]							; // 割り込みディスクリプタテーブルをロード
   235                              <1> 
   236                              <1> 		;---------------------------------------
   237                              <1> 		; 【レジスタの復帰】
   238                              <1> 		;---------------------------------------
   239 00000F1A 5F                  <1> 		pop		edi
   240 00000F1B 59                  <1> 		pop		ecx
   241 00000F1C 5B                  <1> 		pop		ebx
   242 00000F1D 58                  <1> 		pop		eax
   243                              <1> 
   244 00000F1E C3                  <1> 		ret
   245                              <1> 
   246                              <1> ;************************************************************************
   247                              <1> ;	スタックの内容を表示して無限ループを実行
   248                              <1> ;************************************************************************
   249                              <1> int_stop:
   250 00000F1F FB                  <1> 		sti										; // 割り込み許可
   251                              <1> 
   252                              <1> 		;---------------------------------------
   253                              <1> 		; EAXで示される文字列を表示
   254                              <1> 		;---------------------------------------
   255 00000F20 50680F0600006A0F6A- <1> 		cdecl	draw_str, 25, 15, 0x060F, eax	; draw_str(EAX);
   255 00000F29 19E8AEFBFFFF6683C4- <1>
   255 00000F32 10                  <1>
   256                              <1> 
   257                              <1> 		;---------------------------------------
   258                              <1> 		; スタックのデータを文字列に変換
   259                              <1> 		;---------------------------------------
   260 00000F33 8B0424              <1> 		mov		eax, [esp + 0]					; EAX = ESP[ 0];
   261 00000F36 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p1, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   261 00000F3D [FB0F0000]50E83EFE- <1>
   261 00000F45 FFFF6683C414        <1>
   262                              <1> 
   263 00000F4B 8B442404            <1> 		mov		eax, [esp + 4]					; EAX = ESP[ 4];
   264 00000F4F 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p2, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   264 00000F56 [0C100000]50E825FE- <1>
   264 00000F5E FFFF6683C414        <1>
   265                              <1> 
   266 00000F64 8B442408            <1> 		mov		eax, [esp + 8]					; EAX = ESP[ 8];
   267 00000F68 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p3, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   267 00000F6F [1D100000]50E80CFE- <1>
   267 00000F77 FFFF6683C414        <1>
   268                              <1> 
   269 00000F7D 8B44240C            <1> 		mov		eax, [esp +12]					; EAX = ESP[12];
   270 00000F81 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p4, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   270 00000F88 [2E100000]50E8F3FD- <1>
   270 00000F90 FFFF6683C414        <1>
   271                              <1> 
   272                              <1> 		;---------------------------------------
   273                              <1> 		; 文字列の表示
   274                              <1> 		;---------------------------------------
   275 00000F96 68[F40F0000]68040F- <1> 		cdecl	draw_str, 25, 16, 0x0F04, .s1	; draw_str("ESP+ 0:-------- ");
   275 00000F9E 00006A106A19E834FB- <1>
   275 00000FA7 FFFF6683C410        <1>
   276 00000FAD 68[05100000]68040F- <1> 		cdecl	draw_str, 25, 17, 0x0F04, .s2	; draw_str("   + 4:-------- ");
   276 00000FB5 00006A116A19E81DFB- <1>
   276 00000FBE FFFF6683C410        <1>
   277 00000FC4 68[16100000]68040F- <1> 		cdecl	draw_str, 25, 18, 0x0F04, .s3	; draw_str("   + 8:-------- ");
   277 00000FCC 00006A126A19E806FB- <1>
   277 00000FD5 FFFF6683C410        <1>
   278 00000FDB 68[27100000]68040F- <1> 		cdecl	draw_str, 25, 19, 0x0F04, .s4	; draw_str("   +12:-------- ");
   278 00000FE3 00006A136A19E8EFFA- <1>
   278 00000FEC FFFF6683C410        <1>
   279                              <1> 
   280                              <1> 		;---------------------------------------
   281                              <1> 		; 無限ループ
   282                              <1> 		;---------------------------------------
   283 00000FF2 EBFE                <1> 		jmp		$								; while (1) ; // 無限ループ
   284                              <1> 
   285 00000FF4 4553502B20303A      <1> .s1		db	"ESP+ 0:"
   286 00000FFB 5F5F5F5F5F5F5F5F20- <1> .p1		db	"________ ", 0
   286 00001004 00                  <1>
   287 00001005 2020202B20343A      <1> .s2		db	"   + 4:"
   288 0000100C 5F5F5F5F5F5F5F5F20- <1> .p2		db	"________ ", 0
   288 00001015 00                  <1>
   289 00001016 2020202B20383A      <1> .s3		db	"   + 8:"
   290 0000101D 5F5F5F5F5F5F5F5F20- <1> .p3		db	"________ ", 0
   290 00001026 00                  <1>
   291 00001027 2020202B31323A      <1> .s4		db	"   +12:"
   292 0000102E 5F5F5F5F5F5F5F5F20- <1> .p4		db	"________ ", 0
   292 00001037 00                  <1>
   293                              <1> 
   294                              <1> ;************************************************************************
   295                              <1> ;	割り込み処理：デフォルトの処理
   296                              <1> ;************************************************************************
   297                              <1> int_default:
   298 00001038 9C                  <1> 		pushf									; // EFLAGS(IF==0)
   299 00001039 0E                  <1> 		push	cs								; // CS
   300 0000103A 68[1F0F0000]        <1> 		push	int_stop						; // スタック表示処理
   301                              <1> 
   302 0000103F B8[45100000]        <1> 		mov		eax, .s0						; // 割り込み種別
   303 00001044 CF                  <1> 		iret
   304                              <1> 
   305 00001045 203C2020202053544F- <1> .s0		db	" <    STOP    > ", 0
   305 0000104E 50202020203E2000    <1>
   306                              <1> 
   307                              <1> ;************************************************************************
   308                              <1> ;	割り込み処理：ゼロ除算
   309                              <1> ;************************************************************************
   310                              <1> int_zero_div:
   311 00001056 9C                  <1> 		pushf									; // EFLAGS
   312 00001057 0E                  <1> 		push	cs								; // CS
   313 00001058 68[1F0F0000]        <1> 		push	int_stop						; // スタック表示処理
   314                              <1> 
   315 0000105D B8[63100000]        <1> 		mov		eax, .s0						; // 割り込み種別
   316 00001062 CF                  <1> 		iret
   317                              <1> 
   318 00001063 203C20205A45524F20- <1> .s0		db	" <  ZERO DIV  > ", 0
   318 0000106C 44495620203E2000    <1>
   319                              <1> 
   163                                  %include	"../modules/protect/pic.s"
   164                              <1> ;************************************************************************
   165                              <1> ;	割り込みコントローラの初期化
   166                              <1> ;========================================================================
   167                              <1> ;■書式		: void init_pic(void);
   168                              <1> ;
   169                              <1> ;■引数		: 無し
   170                              <1> ;
   171                              <1> ;■戻り値	: 無し
   172                              <1> ;************************************************************************
   173                              <1> init_pic:
   174                              <1> 		;---------------------------------------
   175                              <1> 		; 【レジスタの保存】
   176                              <1> 		;---------------------------------------
   177 00001074 50                  <1> 		push	eax
   178                              <1> 
   179                              <1> 		;---------------------------------------
   180                              <1> 		; マスタPICの設定
   181                              <1> 		;---------------------------------------
   182                              <1> 		outp	0x20, 0x11						; // MASTER.ICW1 = 0x11;
    72 00001075 B011                <2>  mov al, %2
    73 00001077 E620                <2>  out %1, al
   183                              <1> 		outp	0x21, 0x20						; // MASTER.ICW2 = 0x20;
    72 00001079 B020                <2>  mov al, %2
    73 0000107B E621                <2>  out %1, al
   184                              <1> 		outp	0x21, 0x04						; // MASTER.ICW3 = 0x04;
    72 0000107D B004                <2>  mov al, %2
    73 0000107F E621                <2>  out %1, al
   185                              <1> 		outp	0x21, 0x01						; // MASTER.ICW4 = 0x01;
    72 00001081 B001                <2>  mov al, %2
    73 00001083 E621                <2>  out %1, al
   186                              <1> 		outp	0x21, 0xFF						; // マスタ割り込みマスク
    72 00001085 B0FF                <2>  mov al, %2
    73 00001087 E621                <2>  out %1, al
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; スレーブPICの設定
   190                              <1> 		;---------------------------------------
   191                              <1> 		outp	0xA0, 0x11						; // SLAVE.ICW1  = 0x11;
    72 00001089 B011                <2>  mov al, %2
    73 0000108B E6A0                <2>  out %1, al
   192                              <1> 		outp	0xA1, 0x28						; // SLAVE.ICW2  = 0x28;
    72 0000108D B028                <2>  mov al, %2
    73 0000108F E6A1                <2>  out %1, al
   193                              <1> 		outp	0xA1, 0x02						; // SLAVE.ICW3  = 0x02;
    72 00001091 B002                <2>  mov al, %2
    73 00001093 E6A1                <2>  out %1, al
   194                              <1> 		outp	0xA1, 0x01						; // SLAVE.ICW4  = 0x01;
    72 00001095 B001                <2>  mov al, %2
    73 00001097 E6A1                <2>  out %1, al
   195                              <1> 		outp	0xA1, 0xFF						; // スレーブ割り込みマスク
    72 00001099 B0FF                <2>  mov al, %2
    73 0000109B E6A1                <2>  out %1, al
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; 【レジスタの復帰】
   199                              <1> 		;---------------------------------------
   200 0000109D 58                  <1> 		pop		eax
   201                              <1> 
   202 0000109E C3                  <1> 		ret
   203                              <1> 
   164                                  %include	"../modules/protect/int_rtc.s"
   165                              <1> ;************************************************************************
   166                              <1> ;	RTCの割り込み許可設定
   167                              <1> ;========================================================================
   168                              <1> ;■書式		: void rtc_int_en(bit);
   169                              <1> ;
   170                              <1> ;■引数
   171                              <1> ;	bit		: 割り込みを許可するビット
   172                              <1> ;
   173                              <1> ;■戻り値	: 無し
   174                              <1> ;************************************************************************
   175                              <1> rtc_int_en:
   176                              <1> 		;---------------------------------------
   177                              <1> 		; 【スタックフレームの構築】
   178                              <1> 		;---------------------------------------
   179                              <1> 												; ------|--------
   180                              <1> 												;    + 8| ビット
   181                              <1> 												; ------|--------
   182                              <1> 												;    + 4| EIP（戻り番地）
   183 0000109F 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   184 000010A0 89E5                <1> 		mov		ebp, esp						; ------+--------
   185                              <1> 
   186                              <1> 		;---------------------------------------
   187                              <1> 		; 【レジスタの保存】
   188                              <1> 		;---------------------------------------
   189 000010A2 50                  <1> 		push	eax
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 割り込み許可設定
   193                              <1> 		;---------------------------------------
   194                              <1> 		outp	0x70, 0x0B						; outp(0x70, AL);   // レジスタBを選択
    72 000010A3 B00B                <2>  mov al, %2
    73 000010A5 E670                <2>  out %1, al
   195                              <1> 
   196 000010A7 E471                <1> 		in		al, 0x71						; AL  = port(0x71); // レジスタBの
   197 000010A9 0A4508              <1> 		or		al, [ebp + 8]					; AL |= ビット;     // 指定されたビットをセット
   198                              <1> 
   199 000010AC E671                <1> 		out		0x71, al						; outp(0x71, AL);   // レジスタBに書き込み
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; 【レジスタの復帰】
   203                              <1> 		;---------------------------------------
   204 000010AE 58                  <1> 		pop		eax
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; 【スタックフレームの破棄】
   208                              <1> 		;---------------------------------------
   209 000010AF 89EC                <1> 		mov		esp, ebp
   210 000010B1 5D                  <1> 		pop		ebp
   211                              <1> 
   212 000010B2 C3                  <1> 		ret
   213                              <1> 
   214                              <1> 
   215                              <1> ;************************************************************************
   216                              <1> ;	割り込み処理：RTC
   217                              <1> ;************************************************************************
   218                              <1> int_rtc:
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 【レジスタの保存】
   221                              <1> 		;---------------------------------------
   222 000010B3 60                  <1> 		pusha
   223 000010B4 1E                  <1> 		push	ds
   224 000010B5 06                  <1> 		push	es
   225                              <1> 
   226                              <1> 		;---------------------------------------
   227                              <1> 		; データ用セグメントセレクタの設定
   228                              <1> 		;---------------------------------------
   229 000010B6 66B81000            <1> 		mov		ax, 0x0010						; 
   230 000010BA 8ED8                <1> 		mov		ds, ax							; 
   231 000010BC 8EC0                <1> 		mov		es, ax							; 
   232                              <1> 
   233                              <1> 		;---------------------------------------
   234                              <1> 		; RTCから時刻を取得
   235                              <1> 		;---------------------------------------
   236 000010BE 68[20020000]E846FD- <1> 		cdecl	rtc_get_time, RTC_TIME			; EAX = get_time(&RTC_TIME);
   236 000010C6 FFFF6683C404        <1>
   237                              <1> 												; 
   238                              <1> 		;---------------------------------------
   239                              <1> 		; RTCの割り込み要因を取得
   240                              <1> 		;---------------------------------------
   241                              <1> 		outp	0x70, 0x0C						; outp(0x70, 0x0C); // レジスタCを選択
    72 000010CC B00C                <2>  mov al, %2
    73 000010CE E670                <2>  out %1, al
   242 000010D0 E471                <1> 		in		al, 0x71						; AL = inp();
   243                              <1> 
   244                              <1> 		;---------------------------------------
   245                              <1> 		; 割り込みフラグをクリア(EOI)
   246                              <1> 		;---------------------------------------
   247                              <1> 		outp	0xA0, 0x20						; outp(0xA0, EOI); // スレーブPIC
    72 000010D2 B020                <2>  mov al, %2
    73 000010D4 E6A0                <2>  out %1, al
   248                              <1> 		outp	0x20, 0x20						; outp(0x20, EOI); // マスタPIC
    72 000010D6 B020                <2>  mov al, %2
    73 000010D8 E620                <2>  out %1, al
   249                              <1> 
   250                              <1> 		;---------------------------------------
   251                              <1> 		; 【レジスタの復帰】
   252                              <1> 		;---------------------------------------
   253 000010DA 07                  <1> 		pop		es								; 
   254 000010DB 1F                  <1> 		pop		ds								; 
   255 000010DC 61                  <1> 		popa									; 
   256                              <1> 
   257 000010DD CF                  <1> 		iret									; 割り込み処理の終了
   258                              <1> 
   165                                  %include	"../modules/protect/int_keyboard.s"
   166                              <1> ;************************************************************************
   167                              <1> ;	割り込み処理：キーボード
   168                              <1> ;------------------------------------------------------------------------
   169                              <1> ;	KBC（キーボードコントローラ）からキーコードを取得して、
   170                              <1> ;	専用のリングバッファに保存する。
   171                              <1> ;************************************************************************
   172                              <1> int_keyboard:
   173                              <1> 		;---------------------------------------
   174                              <1> 		; 【レジスタの保存】
   175                              <1> 		;---------------------------------------
   176 000010DE 60                  <1> 		pusha
   177 000010DF 1E                  <1> 		push	ds
   178 000010E0 06                  <1> 		push	es
   179                              <1> 
   180                              <1> 		;---------------------------------------
   181                              <1> 		; データ用セグメントの設定
   182                              <1> 		;---------------------------------------
   183 000010E1 66B81000            <1> 		mov		ax, 0x0010						; 
   184 000010E5 8ED8                <1> 		mov		ds, ax							; 
   185 000010E7 8EC0                <1> 		mov		es, ax							; 
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; KBCのバッファ読み取り
   189                              <1> 		;---------------------------------------
   190 000010E9 E460                <1> 		in		al, 0x60						; AL = キーコードの取得
   191                              <1> 
   192                              <1> 		;---------------------------------------
   193                              <1> 		; キーコードの保存
   194                              <1> 		;---------------------------------------
   195 000010EB 5068[04110000]E856- <1> 		cdecl	ring_wr, _KEY_BUFF, eax			; ring_wr(_KEY_BUFF, EAX); // キーコードの保存
   195 000010F3 0000006683C408      <1>
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; 割り込み終了コマンド送信
   199                              <1> 		;---------------------------------------
   200                              <1> 		outp	0x20, 0x20						; outp(); // マスタPIC:EOIコマンド
    72 000010FA B020                <2>  mov al, %2
    73 000010FC E620                <2>  out %1, al
   201                              <1> 
   202                              <1> 		;---------------------------------------
   203                              <1> 		; 【レジスタの復帰】
   204                              <1> 		;---------------------------------------
   205 000010FE 07                  <1> 		pop		es								; 
   206 000010FF 1F                  <1> 		pop		ds								; 
   207 00001100 61                  <1> 		popa
   208                              <1> 
   209 00001101 CF                  <1> 		iret									; 割り込みからの復帰
   210                              <1> 
   211 00001102 00<rep 2h>          <1> ALIGN 4, db 0
   212 00001104 00<rep 18h>         <1> _KEY_BUFF:	times ring_buff_size db 0
   213                              <1> 
   166                                  %include	"../modules/protect/ring_buff.s"
   167                              <1> ;************************************************************************
   168                              <1> ;	リングバッファからデータを取得
   169                              <1> ;========================================================================
   170                              <1> ;■書式		: DWORD ring_rd(buff, data);
   171                              <1> ;
   172                              <1> ;■引数
   173                              <1> ;	buff	: リングバッファ
   174                              <1> ;	data	: 読み込んだデータの保存先アドレス
   175                              <1> ;
   176                              <1> ;■戻り値	: データあり(0以外)、データ無し(0)
   177                              <1> ;************************************************************************
   178                              <1> ring_rd:
   179                              <1> 		;---------------------------------------
   180                              <1> 		; 【スタックフレームの構築】
   181                              <1> 		;---------------------------------------
   182                              <1> 												; ------|--------
   183                              <1> 												;    +12| リングデータ
   184                              <1> 												;    + 8| データアドレス
   185                              <1> 												; ------|--------
   186                              <1> 												;    + 4| EIP（戻り番地）
   187 0000111C 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   188 0000111D 89E5                <1> 		mov		ebp, esp						; ------+--------
   189                              <1> 
   190                              <1> 		;---------------------------------------
   191                              <1> 		; 【レジスタの保存】
   192                              <1> 		;---------------------------------------
   193 0000111F 53                  <1> 		push	ebx
   194 00001120 56                  <1> 		push	esi
   195 00001121 57                  <1> 		push	edi
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; 引数を取得
   199                              <1> 		;---------------------------------------
   200 00001122 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   201 00001125 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = データアドレス;
   202                              <1> 
   203                              <1> 		;---------------------------------------
   204                              <1> 		; 読み込み位置を確認
   205                              <1> 		;---------------------------------------
   206 00001128 B800000000          <1> 		mov		eax, 0							; EAX = 0;          // データ無し
   207 0000112D 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;         // 読み込み位置
   208 0000112F 3B5E04              <1> 		cmp		ebx, [esi + ring_buff.wp]		; if (EBX != wp)    // 書き込み位置と異なる
   209 00001132 7411                <1> 		je		.10E							; {
   210                              <1> 												;   
   211 00001134 8A441E08            <1> 		mov		al, [esi + ring_buff.item + ebx] ;   AL = BUFF[rp]; // キーコードを保存
   212                              <1> 												;   
   213 00001138 8807                <1> 		mov		[edi], al						;   [EDI] = AL;     // データを保存
   214                              <1> 												;   
   215 0000113A 43                  <1> 		inc		ebx								;   EBX++;          // 次の読み込み位置
   216 0000113B 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= 0x0F     // サイズの制限
   217 0000113E 891E                <1> 		mov		[esi + ring_buff.rp], ebx		;   rp = EBX;       // 読み込み位置を保存
   218                              <1> 												;   
   219 00001140 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // データあり
   220                              <1> .10E:											; }
   221                              <1> 
   222                              <1> 		;---------------------------------------
   223                              <1> 		; 【レジスタの復帰】
   224                              <1> 		;---------------------------------------
   225 00001145 5F                  <1> 		pop		edi
   226 00001146 5E                  <1> 		pop		esi
   227 00001147 5B                  <1> 		pop		ebx
   228                              <1> 
   229                              <1> 		;---------------------------------------
   230                              <1> 		; 【スタックフレームの破棄】
   231                              <1> 		;---------------------------------------
   232 00001148 89EC                <1> 		mov		esp, ebp
   233 0000114A 5D                  <1> 		pop		ebp
   234                              <1> 
   235 0000114B C3                  <1> 		ret
   236                              <1> 
   237                              <1> ;************************************************************************
   238                              <1> ;	リングバッファにデータを格納
   239                              <1> ;========================================================================
   240                              <1> ;■書式		: DWORD ring_wr(buff, data);
   241                              <1> ;
   242                              <1> ;■引数
   243                              <1> ;	buff	: リングバッファ
   244                              <1> ;	data	: 書き込むデータ
   245                              <1> ;
   246                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   247                              <1> ;************************************************************************
   248                              <1> ring_wr:
   249                              <1> 		;---------------------------------------
   250                              <1> 		; 【スタックフレームの構築】
   251                              <1> 		;---------------------------------------
   252                              <1> 												; ------|--------
   253                              <1> 												;    +12| リングデータ
   254                              <1> 												;    + 8| データ
   255                              <1> 												; ------|--------
   256                              <1> 												;    + 4| EIP（戻り番地）
   257 0000114C 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   258 0000114D 89E5                <1> 		mov		ebp, esp						; ------+--------
   259                              <1> 
   260                              <1> 		;---------------------------------------
   261                              <1> 		; 【レジスタの保存】
   262                              <1> 		;---------------------------------------
   263 0000114F 53                  <1> 		push	ebx
   264 00001150 51                  <1> 		push	ecx
   265 00001151 56                  <1> 		push	esi
   266                              <1> 
   267                              <1> 		;---------------------------------------
   268                              <1> 		; 引数を取得
   269                              <1> 		;---------------------------------------
   270 00001152 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   271                              <1> 
   272                              <1> 		;---------------------------------------
   273                              <1> 		; 書き込み位置を確認
   274                              <1> 		;---------------------------------------
   275 00001155 B800000000          <1> 		mov		eax, 0							; EAX  = 0;         // 失敗
   276 0000115A 8B5E04              <1> 		mov		ebx, [esi + ring_buff.wp]		; EBX  = wp;        // 書き込み位置
   277 0000115D 89D9                <1> 		mov		ecx, ebx						; ECX  = EBX;
   278 0000115F 41                  <1> 		inc		ecx								; ECX++;            // 次の書き込み位置
   279 00001160 83E10F              <1> 		and		ecx, RING_INDEX_MASK			; ECX &= 0x0F       // サイズの制限
   280                              <1> 												; 
   281 00001163 3B0E                <1> 		cmp		ecx, [esi + ring_buff.rp]		; if (ECX != rp)    // 読み込み位置と異なる
   282 00001165 740F                <1> 		je		.10E							; {
   283                              <1> 												; 
   284 00001167 8A450C              <1> 		mov		al, [ebp +12]					;   AL = データ;
   285                              <1> 												; 
   286 0000116A 88441E08            <1> 		mov		[esi + ring_buff.item + ebx], al ;   BUFF[wp] = AL; // キーコードを保存
   287 0000116E 894E04              <1> 		mov		[esi + ring_buff.wp], ecx		;   wp = ECX;       // 書き込み位置を保存
   288 00001171 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // 成功
   289                              <1> .10E:											; }
   290                              <1> 
   291                              <1> 		;---------------------------------------
   292                              <1> 		; 【レジスタの復帰】
   293                              <1> 		;---------------------------------------
   294 00001176 5E                  <1> 		pop		esi
   295 00001177 59                  <1> 		pop		ecx
   296 00001178 5B                  <1> 		pop		ebx
   297                              <1> 
   298                              <1> 		;---------------------------------------
   299                              <1> 		; 【スタックフレームの破棄】
   300                              <1> 		;---------------------------------------
   301 00001179 89EC                <1> 		mov		esp, ebp
   302 0000117B 5D                  <1> 		pop		ebp
   303                              <1> 
   304 0000117C C3                  <1> 		ret
   305                              <1> 
   306                              <1> ;************************************************************************
   307                              <1> ;	リングバッファ内要素の表示
   308                              <1> ;========================================================================
   309                              <1> ;■書式		: void ring_show(col, row, buff);
   310                              <1> ;
   311                              <1> ;■引数
   312                              <1> ;	col		: 列
   313                              <1> ;	row		: 行
   314                              <1> ;	buff	: リングバッファ
   315                              <1> ;
   316                              <1> ;■戻り値	: 無し
   317                              <1> ;************************************************************************
   318                              <1> draw_key:
   319                              <1> 		;---------------------------------------
   320                              <1> 		; 【スタックフレームの構築】
   321                              <1> 		;---------------------------------------
   322                              <1> 												; ------|--------
   323                              <1> 												; EBP+16| リングバッファ
   324                              <1> 												; EBP+12| Y（行）
   325                              <1> 												; EBP+ 8| X（列）
   326                              <1> 												; ------|--------
   327 0000117D 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   328 0000117E 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   329                              <1> 												; ------|--------
   330                              <1> 
   331                              <1> 		;---------------------------------------
   332                              <1> 		; 【レジスタの保存】
   333                              <1> 		;---------------------------------------
   334 00001180 60                  <1> 		pusha
   335                              <1> 
   336                              <1> 		;---------------------------------------
   337                              <1> 		; 引数を取得
   338                              <1> 		;---------------------------------------
   339 00001181 8B5508              <1> 		mov		edx, [ebp + 8]					; EDX = X（列）;
   340 00001184 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）;
   341 00001187 8B7510              <1> 		mov		esi, [ebp +16]					; ESI = リングバッファ;
   342                              <1> 
   343                              <1> 		;---------------------------------------
   344                              <1> 		; リングバッファの情報を取得
   345                              <1> 		;---------------------------------------
   346 0000118A 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;             // 読み込み位置
   347 0000118C 8D7608              <1> 		lea		esi, [esi + ring_buff.item]		; ESI = &KEY_BUFF[EBX];
   348 0000118F B910000000          <1> 		mov		ecx, RING_ITEM_SIZE				; ECX = RING_ITEM_SIZE; // 要素数
   349                              <1> 
   350                              <1> 		;---------------------------------------
   351                              <1> 		; 文字に変換しながら表示
   352                              <1> 		;---------------------------------------
   353                              <1> .10L:											; do
   354                              <1> 												; {
   355 00001194 4B                  <1> 		dec		ebx								;   EBX--; // 読み込み位置
   356 00001195 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= RING_INDEX_MASK;
   357 00001198 8A041E              <1> 		mov		al, [esi + ebx]					;   EAX  = KEY_BUFF[EBX];
   358                              <1> 												;   
   359 0000119B 6A046A106A0268-     <1> 		cdecl	itoa, eax, .tmp, 2, 16, 0b0100	;   // キーコードを文字列に変換
   359 000011A2 [CC110000]50E8D9FB- <1>
   359 000011AA FFFF6683C414        <1>
   360 000011B0 68[CC110000]6A0257- <1> 		cdecl	draw_str, edx, edi, 0x02, .tmp	;   // 変換した文字列を表示
   360 000011B8 52E81FF9FFFF6683C4- <1>
   360 000011C1 10                  <1>
   361                              <1> 												;   
   362 000011C2 83C203              <1> 		add		edx, 3							;   // 表示位置を更新（3文字分）
   363                              <1> 												;   
   364 000011C5 E2CD                <1> 		loop	.10L							;   
   365                              <1> .10E:											; } while (ECX--);
   366                              <1> 
   367                              <1> 		;---------------------------------------
   368                              <1> 		; 【レジスタの復帰】
   369                              <1> 		;---------------------------------------
   370 000011C7 61                  <1> 		popa
   371                              <1> 
   372                              <1> 		;---------------------------------------
   373                              <1> 		; 【スタックフレームの破棄】
   374                              <1> 		;---------------------------------------
   375 000011C8 89EC                <1> 		mov		esp, ebp
   376 000011CA 5D                  <1> 		pop		ebp
   377                              <1> 
   378 000011CB C3                  <1> 		ret
   379                              <1> 
   380 000011CC 2D2D2000            <1> .tmp	db "-- ", 0
   167                                  %include	"../modules/protect/timer.s"
   168                              <1> ;************************************************************************
   169                              <1> ;	タイマーの設定
   170                              <1> ;------------------------------------------------------------------------
   171                              <1> ;	タイマー（カウンタ0）割り込み許可
   172                              <1> ;========================================================================
   173                              <1> ;■書式		: void int_en_timer0(void);
   174                              <1> ;
   175                              <1> ;■引数		: 無し
   176                              <1> ;
   177                              <1> ;■戻り値	: 無し
   178                              <1> ;************************************************************************
   179                              <1> int_en_timer0:
   180                              <1> 		;---------------------------------------
   181                              <1> 		; 【レジスタの保存】
   182                              <1> 		;---------------------------------------
   183 000011D0 50                  <1> 		push	eax
   184                              <1> 
   185                              <1> 		;---------------------------------------
   186                              <1> 		;	8254 Timer
   187                              <1> 		;	0x2e9c(11932)=10[ms] @ CLK=1,193,182[Hz]
   188                              <1> 		;---------------------------------------
   189                              <1> 		 outp	 0x43, 0b_00_11_010_0			; // カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    72 000011D1 B034                <2>  mov al, %2
    73 000011D3 E643                <2>  out %1, al
   190                              <1> 		 outp	 0x40, 0x9C						; // 下位バイト
    72 000011D5 B09C                <2>  mov al, %2
    73 000011D7 E640                <2>  out %1, al
   191                              <1> 		 outp	 0x40, 0x2E						; // 上位バイト
    72 000011D9 B02E                <2>  mov al, %2
    73 000011DB E640                <2>  out %1, al
   192                              <1> 
   193                              <1> 		;---------------------------------------
   194                              <1> 		; 【レジスタの復帰】
   195                              <1> 		;---------------------------------------
   196 000011DD 58                  <1> 		pop		eax
   197                              <1> 
   198 000011DE C3                  <1> 		ret
   199                              <1> 
   168                                  %include	"../modules/protect/draw_rotation_bar.s"
   169                              <1> ;************************************************************************
   170                              <1> ;	画面左下に、回転する棒を表示
   171                              <1> ;========================================================================
   172                              <1> ;■書式		: void draw_rotation_bar(void);
   173                              <1> ;
   174                              <1> ;■引数		: 無し
   175                              <1> ;
   176                              <1> ;■戻り値	: 無し
   177                              <1> ;************************************************************************
   178                              <1> draw_rotation_bar:
   179                              <1> 		;---------------------------------------
   180                              <1> 		; 【レジスタの保存】
   181                              <1> 		;---------------------------------------
   182 000011DF 50                  <1> 		push	eax
   183                              <1> 
   184                              <1> 		;---------------------------------------
   185                              <1> 		; タイマー割り込みカウンタを確認
   186                              <1> 		;---------------------------------------
   187 000011E0 A1[70060000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX  = タイマー割り込みカウンタ
   188 000011E5 C1E804              <1> 		shr		eax, 4							; EAX /= 4;    // 16で除算
   189 000011E8 3B05[10120000]      <1> 		cmp		eax, [.index]					; if (EAX != 前回値)
   190 000011EE 741E                <1> 		je		.10E							; {
   191                              <1> 												;   
   192 000011F0 A3[10120000]        <1> 		mov		[.index], eax					;   前回値 = EAX;
   193 000011F5 83E003              <1> 		and		eax, 0x03						;   EAX &= 0x03; // 0～3に限定
   194                              <1> 												;   
   195 000011F8 8A80[14120000]      <1> 		mov		al, [.table + eax]				;   AL = table[index];
   196 000011FE 506A0F6A1D6A00E8AD- <1> 		cdecl	draw_char, 0, 29, 0x000F, eax	;   draw_char(); // 文字を表示
   196 00001207 F7FFFF6683C410      <1>
   197                              <1> 												;   
   198                              <1> .10E:											; }
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 【レジスタの復帰】
   202                              <1> 		;---------------------------------------
   203 0000120E 58                  <1> 		pop		eax
   204                              <1> 
   205 0000120F C3                  <1> 		ret
   206                              <1> 
   207                              <1> ALIGN 4, db 0
   208 00001210 00000000            <1> .index:		dd 0								; 前回値
   209 00001214 7C2F2D5C            <1> .table:		db	"|/-\"							; 表示キャラクタ
   210                              <1> 
   169                                  %include	"../modules/protect/call_gate.s"
   170                              <1> ;************************************************************************
   171                              <1> ;	コールゲート関数
   172                              <1> ;************************************************************************
   173                              <1> call_gate:
   174                              <1> 		;---------------------------------------
   175                              <1> 		; 【スタックフレームの構築】
   176                              <1> 		;---------------------------------------
   177                              <1> 												; ------|--------
   178                              <1> 												; EBP+12| X（列）
   179                              <1> 												; EBP+16| Y（行）
   180                              <1> 												; EBP+20| 色
   181                              <1> 												; EBP+24| 文字
   182                              <1> 												; ---------------
   183                              <1> 												; EBP+ 8| CS（コードセグメント）
   184 00001218 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   185 00001219 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   186                              <1> 												; ---------------
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 【レジスタの保存】
   189                              <1> 		;---------------------------------------
   190 0000121B 60                  <1> 		pusha
   191 0000121C 1E                  <1> 		push	ds
   192 0000121D 06                  <1> 		push	es
   193                              <1> 
   194                              <1> 		;---------------------------------------
   195                              <1> 		; データ用セグメントの設定
   196                              <1> 		;---------------------------------------
   197 0000121E 66B81000            <1> 		mov		ax, 0x0010						; 
   198 00001222 8ED8                <1> 		mov		ds, ax							; 
   199 00001224 8EC0                <1> 		mov		es, ax							; 
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; 文字を表示
   203                              <1> 		;---------------------------------------
   204 00001226 8B450C              <1> 		mov		eax, dword [ebp +12]			; EAX = X（列）;
   205 00001229 8B5D10              <1> 		mov		ebx, dword [ebp +16]			; EBX = Y（行）;
   206 0000122C 8B4D14              <1> 		mov		ecx, dword [ebp +20]			; ECX = 色;
   207 0000122F 8B5518              <1> 		mov		edx, dword [ebp +24]			; EDX = 文字;
   208 00001232 52515350E8A2F8FFFF- <1> 		cdecl	draw_str, eax, ebx , ecx, edx	; draw_str();
   208 0000123B 6683C410            <1>
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 【レジスタの復帰】
   212                              <1> 		;---------------------------------------
   213 0000123F 07                  <1> 		pop		es								; 
   214 00001240 1F                  <1> 		pop		ds								; 
   215 00001241 61                  <1> 		popa									; 
   216                              <1> 
   217                              <1> 		;---------------------------------------
   218                              <1> 		; 【スタックフレームの破棄】
   219                              <1> 		;---------------------------------------
   220 00001242 89EC                <1> 		mov		esp, ebp
   221 00001244 5D                  <1> 		pop		ebp
   222                              <1> 
   223 00001245 CA1000              <1> 		retf	4 * 4
   224                              <1> 
   170                                  %include	"../modules/protect/trap_gate.s"
   171                              <1> ;************************************************************************
   172                              <1> ;	システムコール：1文字出力
   173                              <1> ;************************************************************************
   174                              <1> trap_gate_81:
   175                              <1> 		;---------------------------------------
   176                              <1> 		; 1文字出力
   177                              <1> 		;---------------------------------------
   178 00001248 50535251E866F7FFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	; // 1文字出力
   178 00001251 6683C410            <1>
   179                              <1> 
   180 00001255 CF                  <1> 		iret
   181                              <1> 
   182                              <1> ;************************************************************************
   183                              <1> ;	システムコール：点の描画
   184                              <1> ;************************************************************************
   185                              <1> trap_gate_82:
   186                              <1> 		;---------------------------------------
   187                              <1> 		; 点の描画
   188                              <1> 		;---------------------------------------
   189 00001256 535251E837F9FFFF66- <1> 		cdecl	draw_pixel, ecx, edx, ebx		; // 点の描画
   189 0000125F 83C40C              <1>
   190                              <1> 
   191 00001262 CF                  <1> 		iret
   192                              <1> 
   171                                  %include	"../modules/protect/test_and_set.s"
   172                              <1> ;************************************************************************
   173                              <1> ;	RTCから時刻データを取得する
   174                              <1> ;========================================================================
   175                              <1> ;■書式		: void test_and_set(local);
   176                              <1> ;
   177                              <1> ;■引数
   178                              <1> ;	local	: ローカル変数のアドレス
   179                              <1> ;
   180                              <1> ;■戻り値	: 無し
   181                              <1> ;************************************************************************
   182                              <1> test_and_set:
   183                              <1> 		;---------------------------------------
   184                              <1> 		; 【スタックフレームの構築】
   185                              <1> 		;---------------------------------------
   186                              <1> 												; EBP+ 8| ローカル変数のアドレス
   187                              <1> 												; ------+----------------
   188 00001263 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   189 00001264 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   190                              <1> 												; ------+----------------
   191                              <1> 
   192                              <1> 		;---------------------------------------
   193                              <1> 		; 【レジスタの保存】
   194                              <1> 		;---------------------------------------
   195 00001266 50                  <1> 		push	eax
   196 00001267 53                  <1> 		push	ebx
   197                              <1> 
   198                              <1> 		;---------------------------------------
   199                              <1> 		; テストアンドセット
   200                              <1> 		;---------------------------------------
   201 00001268 B800000000          <1> 		mov		eax, 0							; local  = 0;
   202 0000126D 8B5D08              <1> 		mov		ebx, [ebp + 8]					; global = アドレス;
   203                              <1> 
   204                              <1> .10L:											; for ( ; ; )
   205                              <1> 												; {
   206 00001270 F00FAB03            <1> 		lock bts [ebx], eax						;   CF = TEST_AND_SET(IN_USE, 1);
   207 00001274 7307                <1> 		jnc		.10E							;   if (0 == CF)
   208                              <1> 												;     break;
   209                              <1> 												;   
   210                              <1> .12L:											;   for ( ; ; )
   211                              <1> 												;   {
   212 00001276 0FA303              <1> 		bt		[ebx], eax						;     CF = TEST(IN_USE, 1);
   213 00001279 72FB                <1> 		jc		.12L							;     if (0 == CF)
   214                              <1> 												;       break;
   215 0000127B EBF3                <1> 		jmp		.10L							;   }
   216                              <1> .10E:											; }
   217                              <1> 
   218                              <1> 		;---------------------------------------
   219                              <1> 		; 【レジスタの復帰】
   220                              <1> 		;---------------------------------------
   221 0000127D 5B                  <1> 		pop		ebx
   222 0000127E 58                  <1> 		pop		eax
   223                              <1> 
   224                              <1> 		;---------------------------------------
   225                              <1> 		; 【スタックフレームの破棄】
   226                              <1> 		;---------------------------------------
   227 0000127F 89EC                <1> 		mov		esp, ebp
   228 00001281 5D                  <1> 		pop		ebp
   229                              <1> 
   230 00001282 C3                  <1> 		ret
   231                              <1> 
   172                                  %include	"../modules/protect/int_nm.s"
   173                              <1> ;************************************************************************
   174                              <1> ;	割り込み処理：#NM(DNA:デバイス使用不可)
   175                              <1> ;************************************************************************
   176                              <1> int_nm:
   177                              <1> 		;---------------------------------------
   178                              <1> 		; 【レジスタの保存】
   179                              <1> 		;---------------------------------------
   180 00001283 60                  <1> 		pusha
   181 00001284 1E                  <1> 		push	ds
   182 00001285 06                  <1> 		push	es
   183                              <1> 
   184                              <1> 		;---------------------------------------
   185                              <1> 		; カーネル用セレクタを設定
   186                              <1> 		;---------------------------------------
   187 00001286 66B81000            <1> 		mov		ax, DS_KERNEL					;
   188 0000128A 8ED8                <1> 		mov		ds, ax							;
   189 0000128C 8EC0                <1> 		mov		es, ax							;
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; タスクスイッチフラグをクリア
   193                              <1> 		;---------------------------------------
   194 0000128E 0F06                <1> 		clts									; CR0.TS = 0;
   195                              <1> 
   196                              <1> 		;---------------------------------------
   197                              <1> 		; 前回/今回FPUを使用するタスク
   198                              <1> 		;---------------------------------------
   199 00001290 8B3D[DC120000]      <1> 		mov		edi, [.last_tss]				; EDI = 前回FPUを使用したタスクのTSS
   200 00001296 0F00CE              <1> 		str		esi								; ESI = 今回FPUを使用したタスクのTSS
   201 00001299 83E6F8              <1> 		and		esi, ~0x0007					; // 特権レベルをマスク
   202                              <1> 
   203                              <1> 		;---------------------------------------
   204                              <1> 		; FPUの初回利用をチェック
   205                              <1> 		;---------------------------------------
   206 0000129C 83FF00              <1> 		cmp		edi, 0							; if (0 != EDI)     // 前回使用したタスク
   207 0000129F 7420                <1> 		je		.10F							; {
   208                              <1> 												;   
   209 000012A1 39FE                <1> 		cmp		esi, edi						;   if (ESI != EDI) // 異なるタスク
   210 000012A3 741A                <1> 		je		.12E							;   {
   211                              <1> 												;     
   212 000012A5 FA                  <1> 		cli										;     // 割り込み禁止
   213                              <1> 
   214                              <1> 		;---------------------------------------
   215                              <1> 		; 前回のFPUコンテキストを保存
   216                              <1> 		;---------------------------------------
   217 000012A6 89FB                <1> 		mov		ebx, edi						;     // 前回のタスク
   218 000012A8 E833000000          <1> 		call	get_tss_base					;     // TSSアドレスを取得
   219 000012AD E841000000          <1> 		call	save_fpu_context				;     // FPUのコンテキストを保存
   220                              <1> 
   221                              <1> 		;---------------------------------------
   222                              <1> 		; 今回のFPUコンテキストを復帰
   223                              <1> 		;---------------------------------------
   224 000012B2 89F3                <1> 		mov		ebx, esi						;     // 今回のタスク
   225 000012B4 E827000000          <1> 		call	get_tss_base					;     // TSSアドレスを取得
   226 000012B9 E843000000          <1> 		call	load_fpu_context				;     // FPUのコンテキストを復帰
   227                              <1> 												;     
   228 000012BE FB                  <1> 		sti										;     // 割り込み許可
   229                              <1> .12E:											;   }
   230 000012BF EB0E                <1> 		jmp		.10E							; }
   231                              <1> .10F:											; else
   232                              <1> 												; {
   233                              <1> 												;   
   234 000012C1 FA                  <1> 		cli										;   // 割り込み禁止
   235                              <1> 
   236                              <1> 		;---------------------------------------
   237                              <1> 		; 今回のFPUコンテキストを復帰
   238                              <1> 		;---------------------------------------
   239 000012C2 89F3                <1> 		mov		ebx, esi						;   // 今回のタスク
   240 000012C4 E817000000          <1> 		call	get_tss_base					;   // 現在のタスクのTSSアドレスを取得
   241 000012C9 E833000000          <1> 		call	load_fpu_context				;   // FPUのコンテキストを復帰
   242                              <1> 												;   
   243 000012CE FB                  <1> 		sti										;   // 割り込み許可
   244                              <1> .10E:											; }
   245                              <1> 												; 
   246 000012CF 8935[DC120000]      <1> 		mov		[.last_tss], esi				; // FPUを使用したタスクを保存
   247                              <1> 
   248                              <1> 		;---------------------------------------
   249                              <1> 		; 【レジスタの復帰】
   250                              <1> 		;---------------------------------------
   251 000012D5 07                  <1> 		pop		es
   252 000012D6 1F                  <1> 		pop		ds
   253 000012D7 61                  <1> 		popa
   254                              <1> 
   255 000012D8 CF                  <1> 		iret
   256                              <1> 
   257 000012D9 00<rep 3h>          <1> ALIGN 4, db 0
   258 000012DC 00000000            <1> .last_tss:	dd		0
   259                              <1> 
   260                              <1> ;************************************************************************
   261                              <1> ; GDTのセレクタのベースアドレスを取得
   262                              <1> ;------------------------------------------------------------------[IN]--
   263                              <1> ;	EBX : セレクタ
   264                              <1> ;-----------------------------------------------------------------[OUT]--
   265                              <1> ;	EAX : ベースアドレス
   266                              <1> ;************************************************************************
   267                              <1> get_tss_base:
   268 000012E0 8B83[86050000]      <1> 		mov		eax, [GDT + ebx + 2]			; EAX   = TSS[23: 0];
   269 000012E6 C1E008              <1> 		shl		eax, 8							; EAX <<= 8;
   270 000012E9 8A83[8B050000]      <1>         mov     al,  [GDT + ebx + 7]            ;  AL   = TSS[31:24];
   271 000012EF C1C808              <1> 		ror		eax, 8							; EAX >>= 8;
   272                              <1> 
   273 000012F2 C3                  <1> 		ret
   274                              <1> 
   275                              <1> ;************************************************************************
   276                              <1> ; FPUのコンテキストを保存
   277                              <1> ;------------------------------------------------------------------[IN]--
   278                              <1> ;	EAX : TSSの先頭アドレス
   279                              <1> ;************************************************************************
   280                              <1> save_fpu_context:
   281 000012F3 DD7068              <1> 		fnsave	[eax + 104]						; // FPUコンテキストを保存
   282 000012F6 C780D4000000010000- <1> 		mov		[eax + 104 + 108], dword 1		; saved = 1;
   282 000012FF 00                  <1>
   283                              <1> 
   284 00001300 C3                  <1> 		ret
   285                              <1> 
   286                              <1> ;************************************************************************
   287                              <1> ; FPUのコンテキストを復帰
   288                              <1> ;------------------------------------------------------------------[IN]--
   289                              <1> ;	EAX : TSSの先頭アドレス
   290                              <1> ;************************************************************************
   291                              <1> load_fpu_context:
   292 00001301 83B8D400000000      <1> 		cmp		[eax + 104 + 108], dword 0		; if (0 == saved)
   293 00001308 7504                <1> 		jne		.10F							; {
   294 0000130A DBE3                <1> 		fninit									;    // FPUの初期化
   295 0000130C EB03                <1> 		jmp		.10E							; }
   296                              <1> .10F:											; else
   297                              <1> 												; {
   298 0000130E DD6068              <1> 		frstor	[eax + 104]						;   // FPUコンテキストを復帰
   299                              <1> .10E:											; }
   300 00001311 C3                  <1> 		ret
   301                              <1> 
   173                                  %include	"../modules/protect/wait_tick.s"
   174                              <1> ;************************************************************************
   175                              <1> ;	ウェイト
   176                              <1> ;------------------------------------------------------------------------
   177                              <1> ;	指定された回数、システム割り込みが発生するまで待つ
   178                              <1> ;========================================================================
   179                              <1> ;■書式		: void wait_tick(tick);
   180                              <1> ;
   181                              <1> ;■引数
   182                              <1> ;	tick	: システム割り込み回数
   183                              <1> ;
   184                              <1> ;■戻り値	: 無し
   185                              <1> ;************************************************************************
   186                              <1> wait_tick:
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 【スタックフレームの構築】
   189                              <1> 		;---------------------------------------
   190                              <1> 												; ---------------
   191                              <1> 												; EBP+ 8| ウェイト
   192                              <1> 												; ---------------
   193 00001312 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   194 00001313 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   195                              <1> 												; ------|--------
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; 【レジスタの保存】
   199                              <1> 		;---------------------------------------
   200 00001315 50                  <1> 		push	eax
   201 00001316 51                  <1> 		push	ecx
   202                              <1> 
   203                              <1> 		;---------------------------------------
   204                              <1> 		; ウェイト
   205                              <1> 		;---------------------------------------
   206 00001317 8B4D08              <1> 		mov		ecx, [ebp +  8]					; ECX = ウェイト回数
   207 0000131A A1[70060000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX = TIMER;
   208                              <1> 												; do
   209                              <1> 												; {
   210 0000131F 3905[70060000]      <1> .10L:	cmp		[TIMER_COUNT], eax				;   while (TIMER != EAX)
   211 00001325 74F8                <1> 		je		.10L							;     ;
   212 00001327 40                  <1> 		inc		eax								;   EAX++;
   213 00001328 E2F5                <1> 		loop	.10L							; } while (--ECX);
   214                              <1> 
   215                              <1> 		;---------------------------------------
   216                              <1> 		; レジスタの復帰
   217                              <1> 		;---------------------------------------
   218 0000132A 59                  <1> 		pop		ecx
   219 0000132B 58                  <1> 		pop		eax
   220                              <1> 
   221                              <1> 		;---------------------------------------
   222                              <1> 		; スタックフレームの破棄
   223                              <1> 		;---------------------------------------
   224 0000132C 89EC                <1> 		mov		esp, ebp
   225 0000132E 5D                  <1> 		pop		ebp
   226                              <1> 
   227 0000132F C3                  <1> 		ret
   228                              <1> 
   174                                  
   175                                  ;************************************************************************
   176                                  ;	パディング
   177                                  ;************************************************************************
   178 00001330 00<rep CD0h>            		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
   179                                  
