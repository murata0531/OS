     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  %define	USE_SYSTEM_CALL
     8                                  %define	USE_TEST_AND_SET
     9                                  
    10                                  ;************************************************************************
    11                                  ;	マクロ
    12                                  ;************************************************************************
    13                                  %include	"../include/define.s"
    14                              <1> ;************************************************************************
    15                              <1> ;	メモリイメージ
    16                              <1> ;************************************************************************
    17                              <1> 
    18                              <1> 		;---------------------------------------
    19                              <1> 		;           |            | 
    20                              <1> 		;           |____________| 
    21                              <1> 		; 0000_7A00 |            | ( 512) スタック
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0000_7C00 |            | (  8K) ブート
    24                              <1> 		;           =            = 
    25                              <1> 		;           |____________| 
    26                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    27                              <1> 		;           =            = 
    28                              <1> 		;           |____________| 
    29                              <1> 		; 0000_BC00 |////////////| 
    30                              <1> 		;           =            = 
    31                              <1> 		;           |____________| 
    32                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    33                              <1> 		;           |____________| 
    34                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    35                              <1> 		;           |____________| 
    36                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    37                              <1> 		;           |            | 
    38                              <1> 		;           =            = 
    39                              <1> 		;           |____________| 
    40                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    41                              <1> 		;           |            | （各タスク1K）
    42                              <1> 		;           =            = 
    43                              <1> 		;           |____________| 
    44                              <1> 		; 0010_5000 |            | Dir
    45                              <1> 		;      6000 |____________| Page
    46                              <1> 		; 0010_7000 |            | Dir
    47                              <1> 		;      8000 |____________| Page
    48                              <1> 		; 0010_9000 |////////////| 
    49                              <1> 		;           |            | 
    50                              <1> 
    51                              <1> 
    52                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    53                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    54                              <1> 
    55                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    56                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    57                              <1> 
    58                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    59                              <1> 
    60                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    61                              <1> 
    62                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    63                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    64                              <1> 
    65                              <1> 		E820_RECORD_SIZE	equ		20
    66                              <1> 
    67                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    68                              <1> 
    69                              <1> 
    70                              <1> 		STACK_BASE			equ		0x0010_3000		; タスク用スタックエリア
    71                              <1> 		STACK_SIZE			equ		1024			; スタックサイズ
    72                              <1> 
    73                              <1> 		SP_TASK_0			equ		STACK_BASE + (STACK_SIZE * 1)
    74                              <1> 		SP_TASK_1			equ		STACK_BASE + (STACK_SIZE * 2)
    75                              <1> 		SP_TASK_2			equ		STACK_BASE + (STACK_SIZE * 3)
    76                              <1> 		SP_TASK_3			equ		STACK_BASE + (STACK_SIZE * 4)
    77                              <1> 		SP_TASK_4			equ		STACK_BASE + (STACK_SIZE * 5)
    78                              <1> 		SP_TASK_5			equ		STACK_BASE + (STACK_SIZE * 6)
    79                              <1> 		SP_TASK_6			equ		STACK_BASE + (STACK_SIZE * 7)
    80                              <1> 
    81                              <1> 		CR3_BASE			equ		0x0010_5000		; ページ変換テーブル：タスク3用
    82                              <1> 
    83                              <1> 		PARAM_TASK_4		equ		0x0010_8000		; 描画パラメータ：タスク4用
    84                              <1> 		PARAM_TASK_5		equ		0x0010_9000		; 描画パラメータ：タスク5用
    85                              <1> 		PARAM_TASK_6		equ		0x0010_A000		; 描画パラメータ：タスク6用
    86                              <1> 
    87                              <1> 		CR3_TASK_4			equ		0x0020_0000		; ページ変換テーブル：タスク4用
    88                              <1> 		CR3_TASK_5			equ		0x0020_2000		; ページ変換テーブル：タスク5用
    89                              <1> 		CR3_TASK_6			equ		0x0020_4000		; ページ変換テーブル：タスク6用
    90                              <1> 
    91                              <1> ;************************************************************************
    92                              <1> ;	ディスクイメージ
    93                              <1> ;************************************************************************
    94                              <1> 		;(SECT/SUM)  file img                 
    95                              <1> 		;                       ____________  
    96                              <1> 		;( 16/  0)   0000_0000 |       (8K) | ブート
    97                              <1> 		;                      =            = 
    98                              <1> 		;                      |____________| 
    99                              <1> 		;( 16/ 16)   0000_2000 |       (8K) | カーネル
   100                              <1> 		;                      =            = 
   101                              <1> 		;                      |____________| 
   102                              <1> 		;(256/ 32)   0000_4000 |     (128K) | FAT-1
   103                              <1> 		;                      |            | 
   104                              <1> 		;                      |            | 
   105                              <1> 		;                      =            = 
   106                              <1> 		;                      |____________| 
   107                              <1> 		;(256/288)   0002_4000 |     (128K) | FAT-2
   108                              <1> 		;                      |            | 
   109                              <1> 		;                      |            | 
   110                              <1> 		;                      =            = 
   111                              <1> 		;                      |____________| 
   112                              <1> 		;( 32/544)   0004_4000 |      (16K) | ルートディレクトリ領域
   113                              <1> 		;                      |            | (32セクタ/512エントリ)
   114                              <1> 		;                      =            = 
   115                              <1> 		;                      |____________| 
   116                              <1> 		;(   /576)   0004_8000 |            | データ領域
   117                              <1> 		;                      |            | 
   118                              <1> 		;                      =            = 
   119                              <1> 		;                      |            | 
   120                              <1> 		;                      |____________| 
   121                              <1> 		;(   /640)   0005_0000 |////////////| 
   122                              <1> 		;                      |            | 
   123                              <1> 
   124                              <1> 		FAT_SIZE			equ		(1024 * 128)	; FAT-1/2
   125                              <1> 		ROOT_SIZE			equ		(1024 *  16)	; ルートディレクトリ領域
   126                              <1> 
   127                              <1> 		ENTRY_SIZE			equ		32				; エントリサイズ
   128                              <1> 
   129                              <1> 		; BOOT イメージは異なるファイルなので、FAT アドレスの定義には加算しない
   130                              <1> 		FAT_OFFSET			equ		(BOOT_SIZE + KERNEL_SIZE)
   131                              <1> 		FAT1_START			equ		(KERNEL_SIZE)
   132                              <1> 		FAT2_START			equ		(FAT1_START + FAT_SIZE)
   133                              <1> 		ROOT_START			equ		(FAT2_START + FAT_SIZE)
   134                              <1> 		FILE_START			equ		(ROOT_START + ROOT_SIZE)
   135                              <1> 
   136                              <1> 		; ファイル属性
   137                              <1> 		ATTR_READ_ONLY		equ		0x01
   138                              <1> 		ATTR_HIDDEN			equ		0x02
   139                              <1> 		ATTR_SYSTEM			equ		0x04
   140                              <1> 		ATTR_VOLUME_ID		equ		0x08
   141                              <1> 		ATTR_DIRECTORY		equ		0x10
   142                              <1> 		ATTR_ARCHIVE		equ		0x20
    14                                  %include	"../include/macro.s"
    15                              <1> ;************************************************************************
    16                              <1> ; 関数呼び出し用マクロ
    17                              <1> ;
    18                              <1> ; 使い方：
    19                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    20                              <1> ;
    21                              <1> ;************************************************************************
    22                              <1> %macro  cdecl 1-*.nolist
    23                              <1> 
    24                              <1> 	%rep  %0 - 1
    25                              <1> 		push	%{-1:-1}
    26                              <1> 		%rotate -1
    27                              <1> 	%endrep 
    28                              <1> 	%rotate -1
    29                              <1> 
    30                              <1> 		call	%1
    31                              <1> 
    32                              <1> 	%if 1 < %0
    33                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    34                              <1> 	%endif
    35                              <1> 
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> ;************************************************************************
    39                              <1> ; 割り込みベクタ設定用
    40                              <1> ;
    41                              <1> ; 使い方：
    42                              <1> ;	set_vect	ベクタ番号, 割り込み処理 [, フラグ]
    43                              <1> ;
    44                              <1> ;************************************************************************
    45                              <1> %macro  set_vect 1-*.nolist
    46                              <1> 		push	eax
    47                              <1> 		push	edi
    48                              <1> 
    49                              <1> 		mov		edi, VECT_BASE + (%1 * 8)		; ベクタアドレス;
    50                              <1> 		mov		eax, %2
    51                              <1> 
    52                              <1> 	%if 3 == %0
    53                              <1> 		mov		[edi + 4], %3					; フラグ
    54                              <1> 	%endif
    55                              <1> 
    56                              <1> 		mov		[edi + 0], ax					; 例外アドレス[15: 0]
    57                              <1> 		shr		eax, 16							; 
    58                              <1> 		mov		[edi + 6], ax					; 例外アドレス[31:16]
    59                              <1> 
    60                              <1> 		pop		edi
    61                              <1> 		pop		eax
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> ;************************************************************************
    65                              <1> ; ポート出力用
    66                              <1> ;
    67                              <1> ; 使い方：
    68                              <1> ;	outp	ポート番号, 出力値
    69                              <1> ;
    70                              <1> ;************************************************************************
    71                              <1> %macro  outp 2
    72                              <1> 		mov		al, %2
    73                              <1> 		out		%1, al
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> ;************************************************************************
    77                              <1> ; ディスクリプタの情報を設定
    78                              <1> ;
    79                              <1> ; 使い方：
    80                              <1> ;	set_desc	ディスクリプタ, ベース
    81                              <1> ;
    82                              <1> ;************************************************************************
    83                              <1> %macro  set_desc 2-* 
    84                              <1> 		push	eax
    85                              <1> 		push	edi
    86                              <1> 
    87                              <1> 		mov		edi, %1							; ディスクリプタアドレス
    88                              <1> 		mov		eax, %2							; ベースアドレス
    89                              <1> 
    90                              <1> 	%if 3 == %0
    91                              <1> 		mov		[edi + 0], %3					; リミット
    92                              <1> 	%endif
    93                              <1> 
    94                              <1> 		mov		[edi + 2], ax					; ベース（[15: 0]）
    95                              <1> 		shr		eax, 16							; 
    96                              <1> 		mov		[edi + 4], al					; ベース（[23:16]）
    97                              <1> 		mov		[edi + 7], ah					; ベース（[31:24]）
    98                              <1> 
    99                              <1> 		pop		edi
   100                              <1> 		pop		eax
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> ;************************************************************************
   104                              <1> ; ゲートディスクリプタのオフセットを設定
   105                              <1> ;
   106                              <1> ; 使い方：
   107                              <1> ;	set_gate	ディスクリプタ, オフセット
   108                              <1> ;
   109                              <1> ;************************************************************************
   110                              <1> %macro  set_gate 2-* 
   111                              <1> 		push	eax
   112                              <1> 		push	edi
   113                              <1> 
   114                              <1> 		mov		edi, %1							; ディスクリプタアドレス
   115                              <1> 		mov		eax, %2							; ベースアドレス
   116                              <1> 
   117                              <1> 		mov		[edi + 0], ax					; ベース（[15: 0]）
   118                              <1> 		shr		eax, 16							; 
   119                              <1> 		mov		[edi + 6], ax					; ベース（[31:16]）
   120                              <1> 
   121                              <1> 		pop		edi
   122                              <1> 		pop		eax
   123                              <1> %endmacro
   124                              <1> 
   125                              <1> ;************************************************************************
   126                              <1> ;	構造体
   127                              <1> ;************************************************************************
   128                              <1> 
   129                              <1> ;-----------------------------------------------
   130                              <1> ;	ドライブパラメータ
   131                              <1> ;-----------------------------------------------
   132                              <1> struc drive
   133 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
   134 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
   135 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
   136 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
   137                              <1> endstruc
   138                              <1> 
   139                              <1> ;-----------------------------------------------
   140                              <1> ;	リングバッファ
   141                              <1> ;-----------------------------------------------
   142                              <1> %define		RING_ITEM_SIZE		(1 << 4)
   143                              <1> %define		RING_INDEX_MASK		(RING_ITEM_SIZE - 1)
   144                              <1> 
   145                              <1> struc ring_buff
   146 00000000 ????????            <1> 		.rp				resd	1				; RP:書き込み位置
   147 00000004 ????????            <1> 		.wp				resd	1				; WP:読み込み位置
   148 00000008 <res 10h>           <1> 		.item			resb	RING_ITEM_SIZE	; バッファ
   149                              <1> endstruc
   150                              <1> 
   151                              <1> ;-----------------------------------------------
   152                              <1> ;	バラ曲線描画パラメータ
   153                              <1> ;-----------------------------------------------
   154                              <1> struc rose
   155 00000000 ????????            <1> 		.x0				resd	1				; 左上座標：X0
   156 00000004 ????????            <1> 		.y0				resd	1				; 左上座標：Y0
   157 00000008 ????????            <1> 		.x1				resd	1				; 右下座標：X1
   158 0000000C ????????            <1> 		.y1				resd	1				; 右下座標：Y1
   159                              <1> 
   160 00000010 ????????            <1> 		.n				resd	1				; 変数：n
   161 00000014 ????????            <1> 		.d				resd	1				; 変数：d
   162                              <1> 
   163 00000018 ????????            <1> 		.color_x		resd	1				; 描画色：X軸
   164 0000001C ????????            <1> 		.color_y		resd	1				; 描画色：Y軸
   165 00000020 ????????            <1> 		.color_z		resd	1				; 描画色：枠
   166 00000024 ????????            <1> 		.color_s		resd	1				; 描画色：文字
   167 00000028 ????????            <1> 		.color_f		resd	1				; 描画色：グラフ描画色
   168 0000002C ????????            <1> 		.color_b		resd	1				; 描画色：グラフ消去色
   169                              <1> 
   170 00000030 <res 10h>           <1> 		.title			resb	16				; タイトル
   171                              <1> endstruc
   172                              <1> 
    15                                  
    16                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    17                                  
    18                                  [BITS 32]
    19                                  ;************************************************************************
    20                                  ;	エントリポイント
    21                                  ;************************************************************************
    22                                  kernel:
    23                                  		;---------------------------------------
    24                                  		; フォントアドレスを取得
    25                                  		;---------------------------------------
    26 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    27 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    28 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    29 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    30 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    31 00000011 A3[F8020000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    32                                  
    33                                  		;---------------------------------------
    34                                  		; TSSディスクリプタの設定
    35                                  		;---------------------------------------
    36                                  		set_desc	GDT.tss_0, TSS_0			; // タスク0用TSSの設定
    84 00000016 50                  <1>  push eax
    85 00000017 57                  <1>  push edi
    86                              <1> 
    87 00000018 BF[18090000]        <1>  mov edi, %1
    88 0000001D B8[00030000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000022 66894702            <1>  mov [edi + 2], ax
    95 00000026 C1E810              <1>  shr eax, 16
    96 00000029 884704              <1>  mov [edi + 4], al
    97 0000002C 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 0000002F 5F                  <1>  pop edi
   100 00000030 58                  <1>  pop eax
    37                                  		set_desc	GDT.tss_1, TSS_1			; // タスク1用TSSの設定
    84 00000031 50                  <1>  push eax
    85 00000032 57                  <1>  push edi
    86                              <1> 
    87 00000033 BF[20090000]        <1>  mov edi, %1
    88 00000038 B8[D8030000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 0000003D 66894702            <1>  mov [edi + 2], ax
    95 00000041 C1E810              <1>  shr eax, 16
    96 00000044 884704              <1>  mov [edi + 4], al
    97 00000047 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 0000004A 5F                  <1>  pop edi
   100 0000004B 58                  <1>  pop eax
    38                                  		set_desc	GDT.tss_2, TSS_2			; // タスク2用TSSの設定
    84 0000004C 50                  <1>  push eax
    85 0000004D 57                  <1>  push edi
    86                              <1> 
    87 0000004E BF[28090000]        <1>  mov edi, %1
    88 00000053 B8[B0040000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000058 66894702            <1>  mov [edi + 2], ax
    95 0000005C C1E810              <1>  shr eax, 16
    96 0000005F 884704              <1>  mov [edi + 4], al
    97 00000062 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 00000065 5F                  <1>  pop edi
   100 00000066 58                  <1>  pop eax
    39                                  		set_desc	GDT.tss_3, TSS_3			; // タスク3用TSSの設定
    84 00000067 50                  <1>  push eax
    85 00000068 57                  <1>  push edi
    86                              <1> 
    87 00000069 BF[30090000]        <1>  mov edi, %1
    88 0000006E B8[88050000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000073 66894702            <1>  mov [edi + 2], ax
    95 00000077 C1E810              <1>  shr eax, 16
    96 0000007A 884704              <1>  mov [edi + 4], al
    97 0000007D 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 00000080 5F                  <1>  pop edi
   100 00000081 58                  <1>  pop eax
    40                                  		set_desc	GDT.tss_4, TSS_4			; // タスク4用TSSの設定
    84 00000082 50                  <1>  push eax
    85 00000083 57                  <1>  push edi
    86                              <1> 
    87 00000084 BF[38090000]        <1>  mov edi, %1
    88 00000089 B8[60060000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 0000008E 66894702            <1>  mov [edi + 2], ax
    95 00000092 C1E810              <1>  shr eax, 16
    96 00000095 884704              <1>  mov [edi + 4], al
    97 00000098 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 0000009B 5F                  <1>  pop edi
   100 0000009C 58                  <1>  pop eax
    41                                  		set_desc	GDT.tss_5, TSS_5			; // タスク5用TSSの設定
    84 0000009D 50                  <1>  push eax
    85 0000009E 57                  <1>  push edi
    86                              <1> 
    87 0000009F BF[40090000]        <1>  mov edi, %1
    88 000000A4 B8[38070000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 000000A9 66894702            <1>  mov [edi + 2], ax
    95 000000AD C1E810              <1>  shr eax, 16
    96 000000B0 884704              <1>  mov [edi + 4], al
    97 000000B3 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 000000B6 5F                  <1>  pop edi
   100 000000B7 58                  <1>  pop eax
    42                                  		set_desc	GDT.tss_6, TSS_6			; // タスク6用TSSの設定
    84 000000B8 50                  <1>  push eax
    85 000000B9 57                  <1>  push edi
    86                              <1> 
    87 000000BA BF[48090000]        <1>  mov edi, %1
    88 000000BF B8[10080000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 000000C4 66894702            <1>  mov [edi + 2], ax
    95 000000C8 C1E810              <1>  shr eax, 16
    96 000000CB 884704              <1>  mov [edi + 4], al
    97 000000CE 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 000000D1 5F                  <1>  pop edi
   100 000000D2 58                  <1>  pop eax
    43                                  
    44                                  		;---------------------------------------
    45                                  		; コールゲートの設定
    46                                  		;---------------------------------------
    47                                  		set_gate	GDT.call_gate, call_gate	; // コールゲートの設定
   111 000000D3 50                  <1>  push eax
   112 000000D4 57                  <1>  push edi
   113                              <1> 
   114 000000D5 BF[50090000]        <1>  mov edi, %1
   115 000000DA B8[F0170000]        <1>  mov eax, %2
   116                              <1> 
   117 000000DF 668907              <1>  mov [edi + 0], ax
   118 000000E2 C1E810              <1>  shr eax, 16
   119 000000E5 66894706            <1>  mov [edi + 6], ax
   120                              <1> 
   121 000000E9 5F                  <1>  pop edi
   122 000000EA 58                  <1>  pop eax
    48                                  
    49                                  		;---------------------------------------
    50                                  		; LDTの設定
    51                                  		;---------------------------------------
    52                                  		set_desc	GDT.ldt, LDT, word LDT_LIMIT
    84 000000EB 50                  <1>  push eax
    85 000000EC 57                  <1>  push edi
    86                              <1> 
    87 000000ED BF[10090000]        <1>  mov edi, %1
    88 000000F2 B8[5E090000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91 000000F7 66C7075F00          <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 000000FC 66894702            <1>  mov [edi + 2], ax
    95 00000100 C1E810              <1>  shr eax, 16
    96 00000103 884704              <1>  mov [edi + 4], al
    97 00000106 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 00000109 5F                  <1>  pop edi
   100 0000010A 58                  <1>  pop eax
    53                                  
    54                                  		;---------------------------------------
    55                                  		; GDTをロード（再設定）
    56                                  		;---------------------------------------
    57 0000010B 0F0115[58090000]        		lgdt	[GDTR]							; // グローバルディスクリプタテーブルをロード
    58                                  
    59                                  		;---------------------------------------
    60                                  		; スタックの設定
    61                                  		;---------------------------------------
    62 00000112 BC00341000              		mov		esp, SP_TASK_0					; // タスク0用のスタックを設定
    63                                  
    64                                  		;---------------------------------------
    65                                  		; タスクレジスタの初期化
    66                                  		;---------------------------------------
    67 00000117 66B83000                		mov		ax, SS_TASK_0
    68 0000011B 0F00D8                  		ltr		ax								; // タスクレジスタの設定
    69                                  
    70                                  		;---------------------------------------
    71                                  		; 初期化
    72                                  		;---------------------------------------
    73 0000011E E8A3130000              		cdecl	init_int						; // 割り込みベクタの初期化
    74 00000123 E824150000              		cdecl	init_pic						; // 割り込みコントローラの初期化
    75 00000128 E891080000              		cdecl	init_page						; // ページングの初期化
    76                                  
    77 0000012D 5057BF00001000B8-       		set_vect	0x00, int_zero_div			; // 割り込み処理の登録：0除算
    77 00000135 [2E160000]668907C1-
    77 0000013D E810668947065F58   
    78 00000145 5057BF38001000B8-       		set_vect	0x07, int_nm				; // 割り込み処理の登録：デバイス使用不可
    78 0000014D [5B180000]668907C1-
    78 00000155 E810668947065F58   
    79 0000015D 5057BF70001000B8-       		set_vect	0x0E, int_pf				; // 割り込み処理の登録：ページフォルト
    79 00000165 [200B0000]668907C1-
    79 0000016D E810668947065F58   
    80 00000175 5057BF00011000B8-       		set_vect	0x20, int_timer				; // 割り込み処理の登録：タイマー
    80 0000017D [9B0A0000]668907C1-
    80 00000185 E810668947065F58   
    81 0000018D 5057BF08011000B8-       		set_vect	0x21, int_keyboard			; // 割り込み処理の登録：KBC
    81 00000195 [B6160000]668907C1-
    81 0000019D E810668947065F58   
    82 000001A5 5057BF40011000B8-       		set_vect	0x28, int_rtc				; // 割り込み処理の登録：RTC
    82 000001AD [8B160000]668907C1-
    82 000001B5 E810668947065F58   
    83 000001BD 5057BF08041000B8-       		set_vect	0x81, trap_gate_81, word 0xEF00	; // トラップゲートの登録：1文字出力
    83 000001C5 [20180000]66C74704-
    83 000001CD 00EF668907C1E81066-
    83 000001D6 8947065F58         
    84 000001DB 5057BF10041000B8-       		set_vect	0x82, trap_gate_82, word 0xEF00	; // トラップゲートの登録：点の描画
    84 000001E3 [2E180000]66C74704-
    84 000001EB 00EF668907C1E81066-
    84 000001F4 8947065F58         
    85                                  
    86                                  		;---------------------------------------
    87                                  		; デバイスの割り込み許可
    88                                  		;---------------------------------------
    89 000001F9 6A10E8771400006683-     		cdecl	rtc_int_en, 0x10				; rtc_int_en(UIE); // 更新サイクル終了割り込み許可
    89 00000202 C404               
    90 00000204 E89F150000              		cdecl	int_en_timer0					; // タイマー（カウンタ0）割り込み許可
    91                                  
    92                                  		;---------------------------------------
    93                                  		; IMR(割り込みマスクレジスタ)の設定
    94                                  		;---------------------------------------
    95                                  		outp	0x21, 0b_1111_1000				; // 割り込み有効：スレーブPIC/KBC/タイマー
    72 00000209 B0F8                <1>  mov al, %2
    73 0000020B E621                <1>  out %1, al
    96                                  		outp	0xA1, 0b_1111_1110				; // 割り込み有効：RTC
    72 0000020D B0FE                <1>  mov al, %2
    73 0000020F E6A1                <1>  out %1, al
    97                                  
    98                                  		;---------------------------------------
    99                                  		; ページングを有効化
   100                                  		;---------------------------------------
   101 00000211 B800501000              		mov		eax, CR3_BASE					;
   102 00000216 0F22D8                  		mov		cr3, eax						; // ページテーブルの登録
   103                                  
   104 00000219 0F20C0                  		mov		eax, cr0						; // PGビットをセット
   105 0000021C 0D00000080              		or		eax, (1 << 31)					; CR0 |= PG;
   106 00000221 0F22C0                  		mov		cr0, eax						; 
   107 00000224 EB00                    		jmp		$ + 2							; FLUSH();
   108                                  
   109                                  		;---------------------------------------
   110                                  		; CPUの割り込み許可
   111                                  		;---------------------------------------
   112 00000226 FB                      		sti										; // 割り込み許可
   113                                  
   114                                  		;---------------------------------------
   115                                  		; フォントの一覧表示
   116                                  		;---------------------------------------
   117 00000227 6A0D6A3FE8400E0000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
   117 00000230 6683C408           
   118 00000234 6A046A3FE8B60E0000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
   118 0000023D 6683C408           
   119                                  
   120                                  		;---------------------------------------
   121                                  		; 文字列の表示
   122                                  		;---------------------------------------
   123 00000241 68[DE020000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
   123 00000249 00006A0E6A19E8610E-
   123 00000252 00006683C410       
   124                                  
   125                                  .10L:											; while (;;)
   126                                  												; {
   127                                  		;---------------------------------------
   128                                  		; 回転する棒を表示
   129                                  		;---------------------------------------
   130 00000258 E85A150000              		cdecl	draw_rotation_bar				;   // 回転する棒を表示
   131                                  
   132                                  		;---------------------------------------
   133                                  		; キーコードの取得
   134                                  		;---------------------------------------
   135 0000025D 68[F0020000]68-         		cdecl	ring_rd, _KEY_BUFF, .int_key	;   EAX = ring_rd(buff, &int_key);
   135 00000263 [DC160000]E8881400-
   135 0000026B 006683C408         
   136 00000270 83F800                  		cmp		eax, 0							;   if (EAX == 0)
   137 00000273 7464                    		je		.10E							;   {
   138                                  												;   
   139                                  		;---------------------------------------
   140                                  		; キーコードの表示
   141                                  		;---------------------------------------
   142 00000275 68[DC160000]6A1D6A-     		cdecl	draw_key, 2, 29, _KEY_BUFF		;     ring_show(key_buff); // 全要素を表示
   142 0000027D 02E8D21400006683C4-
   142 00000286 0C                 
   143                                  
   144                                  		;---------------------------------------
   145                                  		; キー押下時の処理
   146                                  		;---------------------------------------
   147 00000287 A0[F0020000]            		mov		al, [.int_key]					;     AL = [.int_key]; // キーコード
   148 0000028C 3C02                    		cmp		al, 0x02						;     if ('1' == AL)
   149 0000028E 7522                    		jne		.12E							;     {
   150                                  
   151                                  		;---------------------------------------
   152                                  		; ファイル読み込み
   153                                  		;---------------------------------------
   154 00000290 FF15F09B0000            		call	[BOOT_LOAD + BOOT_SIZE - 16]	;       // ファイル読み込み
   155                                  
   156                                  		;---------------------------------------
   157                                  		; ファイルの内容を表示
   158                                  		;---------------------------------------
   159 00000296 BE00780000              		mov		esi, 0x7800						;       ESI       = 読み込み先アドレス;
   160 0000029B C6462000                		mov		[esi + 32], byte 0				;       [ESI +32] = 0; // 最大32文字
   161 0000029F 5668040F00006A006A-     		cdecl	draw_str, 0, 0, 0x0F04, esi		;       draw_str();    // 文字列の表示
   161 000002A8 00E8070E00006683C4-
   161 000002B1 10                 
   162                                  .12E:											;     }
   163                                  
   164                                  		;---------------------------------------
   165                                  		; CTRL+ALD+ENDキー
   166                                  		;---------------------------------------
   167 000002B2 A0[F0020000]            		mov		al, [.int_key]					;     AL  = [.int_key]; // キーコード
   168 000002B7 50E8641600006683C4-     		cdecl	ctrl_alt_end, eax				;     EAX = ctrl_alt_end(キーコード);
   168 000002C0 04                 
   169 000002C1 83F800                  		cmp		eax, 0							;     if (0 != EAX)
   170 000002C4 7413                    		je		.14E							;     {
   171                                  												;       
   172 000002C6 B800000000              		mov		eax, 0							;       // 電断処理は一度だけ行う
   173 000002CB 0FAB05[F4020000]        		bts		[.once], eax					;       if (0 == bts(.once))
   174 000002D2 7205                    		jc		.14E							;       {
   175 000002D4 E8BA160000              		cdecl	power_off						;         power_off(); // 電断処理
   176                                  												;       }
   177                                  .14E:											;     }
   178                                  .10E:											;   }
   179 000002D9 E97AFFFFFF              		jmp		.10L							; }
   180                                  
   181 000002DE 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
   181 000002E7 65726E656C212000   
   182                                  
   183 000002EF 00                      ALIGN 4, db 0
   184 000002F0 00000000                .int_key:	dd	0
   185 000002F4 00000000                .once:		dd	0
   186                                  
   187                                  ALIGN 4, db 0
   188 000002F8 00000000                FONT_ADR:	dd	0
   189 000002FC 00000000                RTC_TIME:	dd	0
   190                                  
   191                                  ;************************************************************************
   192                                  ;	タスク
   193                                  ;************************************************************************
   194                                  %include	"descriptor.s"
   195                              <1> ;************************************************************************
   196                              <1> ;	TSS
   197                              <1> ;************************************************************************
   198                              <1> TSS_0:
   199 00000300 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   200 00000304 00321000            <1> .esp0:			dd	SP_TASK_0 - 512				;*  4:ESP0
   201 00000308 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   202 0000030C 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   203 00000310 00000000            <1> .ss1:			dd	0							;* 16:
   204 00000314 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   205 00000318 00000000            <1> .ss2:			dd	0							;* 24:
   206 0000031C 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
   207 00000320 00000000            <1> .eip:			dd	0							;  32:EIP
   208 00000324 00000000            <1> .eflags:		dd	0							;  36:EFLAGS
   209 00000328 00000000            <1> .eax:			dd	0							;  40:EAX
   210 0000032C 00000000            <1> .ecx:			dd	0							;  44:ECX
   211 00000330 00000000            <1> .edx:			dd	0							;  48:EDX
   212 00000334 00000000            <1> .ebx:			dd	0							;  52:EBX
   213 00000338 00000000            <1> .esp:			dd	0							;  56:ESP
   214 0000033C 00000000            <1> .ebp:			dd	0							;  60:EBP
   215 00000340 00000000            <1> .esi:			dd	0							;  64:ESI
   216 00000344 00000000            <1> .edi:			dd	0							;  68:EDI
   217 00000348 00000000            <1> .es:			dd	0							;  72:ES
   218 0000034C 00000000            <1> .cs:			dd	0							;  76:CS
   219 00000350 00000000            <1> .ss:			dd	0							;  80:SS
   220 00000354 00000000            <1> .ds:			dd	0							;  84:DS
   221 00000358 00000000            <1> .fs:			dd	0							;  88:FS
   222 0000035C 00000000            <1> .gs:			dd	0							;  92:GS
   223 00000360 00000000            <1> .ldt:			dd	0							;* 96:LDTセグメントセレクタ
   224 00000364 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   225 00000368 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   226                              <1> 
   227                              <1> TSS_1:
   228 000003D8 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   229 000003DC 00361000            <1> .esp0:			dd	SP_TASK_1 - 512				;*  4:ESP0
   230 000003E0 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   231 000003E4 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   232 000003E8 00000000            <1> .ss1:			dd	0							;* 16:
   233 000003EC 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   234 000003F0 00000000            <1> .ss2:			dd	0							;* 24:
   235 000003F4 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
   236 000003F8 [8E0B0000]          <1> .eip:			dd	task_1						;  32:EIP
   237 000003FC 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   238 00000400 00000000            <1> .eax:			dd	0							;  40:EAX
   239 00000404 00000000            <1> .ecx:			dd	0							;  44:ECX
   240 00000408 00000000            <1> .edx:			dd	0							;  48:EDX
   241 0000040C 00000000            <1> .ebx:			dd	0							;  52:EBX
   242 00000410 00381000            <1> .esp:			dd	SP_TASK_1					;  56:ESP
   243 00000414 00000000            <1> .ebp:			dd	0							;  60:EBP
   244 00000418 00000000            <1> .esi:			dd	0							;  64:ESI
   245 0000041C 00000000            <1> .edi:			dd	0							;  68:EDI
   246 00000420 27000000            <1> .es:			dd	DS_TASK_1					;  72:ES
   247 00000424 1F000000            <1> .cs:			dd	CS_TASK_1					;  76:CS
   248 00000428 27000000            <1> .ss:			dd	DS_TASK_1					;  80:SS
   249 0000042C 27000000            <1> .ds:			dd	DS_TASK_1					;  84:DS
   250 00000430 27000000            <1> .fs:			dd	DS_TASK_1					;  88:FS
   251 00000434 27000000            <1> .gs:			dd	DS_TASK_1					;  92:GS
   252 00000438 28000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   253 0000043C 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   254 00000440 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   255                              <1> 
   256                              <1> TSS_2:
   257 000004B0 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   258 000004B4 003A1000            <1> .esp0:			dd	SP_TASK_2 - 512				;*  4:ESP0
   259 000004B8 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   260 000004BC 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   261 000004C0 00000000            <1> .ss1:			dd	0							;* 16:
   262 000004C4 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   263 000004C8 00000000            <1> .ss2:			dd	0							;* 24:
   264 000004CC 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
   265 000004D0 [C30B0000]          <1> .eip:			dd	task_2						;  32:EIP
   266 000004D4 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   267 000004D8 00000000            <1> .eax:			dd	0							;  40:EAX
   268 000004DC 00000000            <1> .ecx:			dd	0							;  44:ECX
   269 000004E0 00000000            <1> .edx:			dd	0							;  48:EDX
   270 000004E4 00000000            <1> .ebx:			dd	0							;  52:EBX
   271 000004E8 003C1000            <1> .esp:			dd	SP_TASK_2					;  56:ESP
   272 000004EC 00000000            <1> .ebp:			dd	0							;  60:EBP
   273 000004F0 00000000            <1> .esi:			dd	0							;  64:ESI
   274 000004F4 00000000            <1> .edi:			dd	0							;  68:EDI
   275 000004F8 37000000            <1> .es:			dd	DS_TASK_2					;  72:ES
   276 000004FC 2F000000            <1> .cs:			dd	CS_TASK_2					;  76:CS
   277 00000500 37000000            <1> .ss:			dd	DS_TASK_2					;  80:SS
   278 00000504 37000000            <1> .ds:			dd	DS_TASK_2					;  84:DS
   279 00000508 37000000            <1> .fs:			dd	DS_TASK_2					;  88:FS
   280 0000050C 37000000            <1> .gs:			dd	DS_TASK_2					;  92:GS
   281 00000510 28000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   282 00000514 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   283 00000518 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   284                              <1> 
   285                              <1> TSS_3:
   286 00000588 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   287 0000058C 003E1000            <1> .esp0:			dd	SP_TASK_3 - 512				;*  4:ESP0
   288 00000590 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   289 00000594 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   290 00000598 00000000            <1> .ss1:			dd	0							;* 16:
   291 0000059C 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   292 000005A0 00000000            <1> .ss2:			dd	0							;* 24:
   293 000005A4 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
   294 000005A8 [940C0000]          <1> .eip:			dd	task_3						;  32:EIP
   295 000005AC 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   296 000005B0 00000000            <1> .eax:			dd	0							;  40:EAX
   297 000005B4 00000000            <1> .ecx:			dd	0							;  44:ECX
   298 000005B8 00000000            <1> .edx:			dd	0							;  48:EDX
   299 000005BC 00000000            <1> .ebx:			dd	0							;  52:EBX
   300 000005C0 00401000            <1> .esp:			dd	SP_TASK_3					;  56:ESP
   301 000005C4 00000000            <1> .ebp:			dd	0							;  60:EBP
   302 000005C8 00000000            <1> .esi:			dd	0							;  64:ESI
   303 000005CC 00000000            <1> .edi:			dd	0							;  68:EDI
   304 000005D0 47000000            <1> .es:			dd	DS_TASK_3					;  72:ES
   305 000005D4 3F000000            <1> .cs:			dd	CS_TASK_3					;  76:CS
   306 000005D8 47000000            <1> .ss:			dd	DS_TASK_3					;  80:SS
   307 000005DC 47000000            <1> .ds:			dd	DS_TASK_3					;  84:DS
   308 000005E0 47000000            <1> .fs:			dd	DS_TASK_3					;  88:FS
   309 000005E4 47000000            <1> .gs:			dd	DS_TASK_3					;  92:GS
   310 000005E8 28000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   311 000005EC 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   312 000005F0 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   313                              <1> 
   314                              <1> TSS_4:
   315 00000660 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   316 00000664 00421000            <1> .esp0:			dd	SP_TASK_4 - 512				;*  4:ESP0
   317 00000668 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   318 0000066C 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   319 00000670 00000000            <1> .ss1:			dd	0							;* 16:
   320 00000674 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   321 00000678 00000000            <1> .ss2:			dd	0							;* 24:
   322 0000067C 00002000            <1> .cr3:			dd	CR3_TASK_4					;  28:CR3(PDBR)
   323 00000680 [940C0000]          <1> .eip:			dd	task_3						;  32:EIP
   324 00000684 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   325 00000688 00000000            <1> .eax:			dd	0							;  40:EAX
   326 0000068C 00000000            <1> .ecx:			dd	0							;  44:ECX
   327 00000690 00000000            <1> .edx:			dd	0							;  48:EDX
   328 00000694 00000000            <1> .ebx:			dd	0							;  52:EBX
   329 00000698 00441000            <1> .esp:			dd	SP_TASK_4					;  56:ESP
   330 0000069C 00000000            <1> .ebp:			dd	0							;  60:EBP
   331 000006A0 00000000            <1> .esi:			dd	0							;  64:ESI
   332 000006A4 00000000            <1> .edi:			dd	0							;  68:EDI
   333 000006A8 4F000000            <1> .es:			dd	DS_TASK_4					;  72:ES
   334 000006AC 3F000000            <1> .cs:			dd	CS_TASK_3					;  76:CS
   335 000006B0 4F000000            <1> .ss:			dd	DS_TASK_4					;  80:SS
   336 000006B4 4F000000            <1> .ds:			dd	DS_TASK_4					;  84:DS
   337 000006B8 4F000000            <1> .fs:			dd	DS_TASK_4					;  88:FS
   338 000006BC 4F000000            <1> .gs:			dd	DS_TASK_4					;  92:GS
   339 000006C0 28000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   340 000006C4 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   341 000006C8 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   342                              <1> 
   343                              <1> TSS_5:
   344 00000738 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   345 0000073C 00461000            <1> .esp0:			dd	SP_TASK_5 - 512				;*  4:ESP0
   346 00000740 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   347 00000744 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   348 00000748 00000000            <1> .ss1:			dd	0							;* 16:
   349 0000074C 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   350 00000750 00000000            <1> .ss2:			dd	0							;* 24:
   351 00000754 00202000            <1> .cr3:			dd	CR3_TASK_5					;  28:CR3(PDBR)
   352 00000758 [940C0000]          <1> .eip:			dd	task_3						;  32:EIP
   353 0000075C 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   354 00000760 00000000            <1> .eax:			dd	0							;  40:EAX
   355 00000764 00000000            <1> .ecx:			dd	0							;  44:ECX
   356 00000768 00000000            <1> .edx:			dd	0							;  48:EDX
   357 0000076C 00000000            <1> .ebx:			dd	0							;  52:EBX
   358 00000770 00481000            <1> .esp:			dd	SP_TASK_5					;  56:ESP
   359 00000774 00000000            <1> .ebp:			dd	0							;  60:EBP
   360 00000778 00000000            <1> .esi:			dd	0							;  64:ESI
   361 0000077C 00000000            <1> .edi:			dd	0							;  68:EDI
   362 00000780 57000000            <1> .es:			dd	DS_TASK_5					;  72:ES
   363 00000784 3F000000            <1> .cs:			dd	CS_TASK_3					;  76:CS
   364 00000788 57000000            <1> .ss:			dd	DS_TASK_5					;  80:SS
   365 0000078C 57000000            <1> .ds:			dd	DS_TASK_5					;  84:DS
   366 00000790 57000000            <1> .fs:			dd	DS_TASK_5					;  88:FS
   367 00000794 57000000            <1> .gs:			dd	DS_TASK_5					;  92:GS
   368 00000798 28000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   369 0000079C 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   370 000007A0 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   371                              <1> 
   372                              <1> TSS_6:
   373 00000810 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   374 00000814 004A1000            <1> .esp0:			dd	SP_TASK_6 - 512				;*  4:ESP0
   375 00000818 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   376 0000081C 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   377 00000820 00000000            <1> .ss1:			dd	0							;* 16:
   378 00000824 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   379 00000828 00000000            <1> .ss2:			dd	0							;* 24:
   380 0000082C 00402000            <1> .cr3:			dd	CR3_TASK_6					;  28:CR3(PDBR)
   381 00000830 [940C0000]          <1> .eip:			dd	task_3						;  32:EIP
   382 00000834 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   383 00000838 00000000            <1> .eax:			dd	0							;  40:EAX
   384 0000083C 00000000            <1> .ecx:			dd	0							;  44:ECX
   385 00000840 00000000            <1> .edx:			dd	0							;  48:EDX
   386 00000844 00000000            <1> .ebx:			dd	0							;  52:EBX
   387 00000848 004C1000            <1> .esp:			dd	SP_TASK_6					;  56:ESP
   388 0000084C 00000000            <1> .ebp:			dd	0							;  60:EBP
   389 00000850 00000000            <1> .esi:			dd	0							;  64:ESI
   390 00000854 00000000            <1> .edi:			dd	0							;  68:EDI
   391 00000858 5F000000            <1> .es:			dd	DS_TASK_6					;  72:ES
   392 0000085C 3F000000            <1> .cs:			dd	CS_TASK_3					;  76:CS
   393 00000860 5F000000            <1> .ss:			dd	DS_TASK_6					;  80:SS
   394 00000864 5F000000            <1> .ds:			dd	DS_TASK_6					;  84:DS
   395 00000868 5F000000            <1> .fs:			dd	DS_TASK_6					;  88:FS
   396 0000086C 5F000000            <1> .gs:			dd	DS_TASK_6					;  92:GS
   397 00000870 28000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   398 00000874 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   399 00000878 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   400                              <1> 
   401                              <1> 
   402                              <1> ;************************************************************************
   403                              <1> ;	グローバルディスクリプタテーブル
   404                              <1> ;************************************************************************
   405 000008E8 0000000000000000    <1> GDT:			dq	0x0000000000000000			; NULL
   406 000008F0 FFFF0000009ACF00    <1> .cs_kernel:		dq	0x00CF9A000000FFFF			; CODE 4G
   407 000008F8 FFFF00000092CF00    <1> .ds_kernel:		dq	0x00CF92000000FFFF			; DATA 4G
   408 00000900 FFFF0000009A0F00    <1> .cs_bit16:		dq	0x000F9A000000FFFF			; コードセグメント（16ビットセグメント）
   409 00000908 FFFF000000920F00    <1> .ds_bit16:		dq	0x000F92000000FFFF			; データセグメント（16ビットセグメント）
   410 00000910 0000000000820000    <1> .ldt			dq	0x0000820000000000			; LDTディスクリプタ
   411 00000918 6700000000890000    <1> .tss_0:			dq	0x0000890000000067			; TSSディスクリプタ
   412 00000920 6700000000890000    <1> .tss_1:			dq	0x0000890000000067			; TSSディスクリプタ
   413 00000928 6700000000890000    <1> .tss_2:			dq	0x0000890000000067			; TSSディスクリプタ
   414 00000930 6700000000890000    <1> .tss_3:			dq	0x0000890000000067			; TSSディスクリプタ
   415 00000938 6700000000890000    <1> .tss_4:			dq	0x0000890000000067			; TSSディスクリプタ
   416 00000940 6700000000890000    <1> .tss_5:			dq	0x0000890000000067			; TSSディスクリプタ
   417 00000948 6700000000890000    <1> .tss_6:			dq	0x0000890000000067			; TSSディスクリプタ
   418 00000950 0000080004EC0000    <1> .call_gate:		dq	0x0000EC0400080000			; 386コールゲート(DPL=3, count=4, SEL=8)
   419                              <1> .end:
   420                              <1> 
   421                              <1> CS_KERNEL		equ	.cs_kernel	- GDT
   422                              <1> DS_KERNEL		equ	.ds_kernel	- GDT
   423                              <1> SS_LDT			equ	.ldt		- GDT
   424                              <1> SS_TASK_0		equ	.tss_0		- GDT
   425                              <1> SS_TASK_1		equ	.tss_1		- GDT
   426                              <1> SS_TASK_2		equ	.tss_2		- GDT
   427                              <1> SS_TASK_3		equ	.tss_3		- GDT
   428                              <1> SS_TASK_4		equ	.tss_4		- GDT
   429                              <1> SS_TASK_5		equ	.tss_5		- GDT
   430                              <1> SS_TASK_6		equ	.tss_6		- GDT
   431                              <1> SS_GATE_0		equ	.call_gate	- GDT
   432                              <1> 
   433 00000958 6F00                <1> GDTR:	dw 		GDT.end - GDT - 1
   434 0000095A [E8080000]          <1> 		dd 		GDT
   435                              <1> 
   436                              <1> 
   437                              <1> ;************************************************************************
   438                              <1> ;	ローカルディスクリプタテーブル
   439                              <1> ;************************************************************************
   440 0000095E 0000000000000000    <1> LDT:			dq	0x0000000000000000			; NULL
   441 00000966 FFFF0000009ACF00    <1> .cs_task_0:		dq	0x00CF9A000000FFFF			; CODE 4G
   442 0000096E FFFF00000092CF00    <1> .ds_task_0:		dq	0x00CF92000000FFFF			; DATA 4G
   443 00000976 FFFF000000FACF00    <1> .cs_task_1:		dq	0x00CFFA000000FFFF			; CODE 4G
   444 0000097E FFFF000000F2CF00    <1> .ds_task_1:		dq	0x00CFF2000000FFFF			; DATA 4G
   445 00000986 FFFF000000FACF00    <1> .cs_task_2:		dq	0x00CFFA000000FFFF			; CODE 4G
   446 0000098E FFFF000000F2CF00    <1> .ds_task_2:		dq	0x00CFF2000000FFFF			; DATA 4G
   447 00000996 FFFF000000FACF00    <1> .cs_task_3:		dq	0x00CFFA000000FFFF			; CODE 4G
   448 0000099E FFFF000000F2CF00    <1> .ds_task_3:		dq	0x00CFF2000000FFFF			; DATA 4G
   449 000009A6 FFFF000000F2CF00    <1> .ds_task_4:		dq	0x00CFF2000000FFFF			; DATA 4G
   450 000009AE FFFF000000F2CF00    <1> .ds_task_5:		dq	0x00CFF2000000FFFF			; DATA 4G
   451 000009B6 FFFF000000F2CF00    <1> .ds_task_6:		dq	0x00CFF2000000FFFF			; DATA 4G
   452                              <1> .end:
   453                              <1> 
   454                              <1> CS_TASK_0		equ	(.cs_task_0 - LDT) | 4		; タスク0用CSセレクタ
   455                              <1> DS_TASK_0		equ	(.ds_task_0 - LDT) | 4		; タスク0用DSセレクタ
   456                              <1> CS_TASK_1		equ	(.cs_task_1 - LDT) | 4 | 3	; タスク1用CSセレクタ
   457                              <1> DS_TASK_1		equ	(.ds_task_1 - LDT) | 4 | 3	; タスク1用DSセレクタ
   458                              <1> CS_TASK_2		equ	(.cs_task_2 - LDT) | 4 | 3	; タスク2用CSセレクタ
   459                              <1> DS_TASK_2		equ	(.ds_task_2 - LDT) | 4 | 3	; タスク2用DSセレクタ
   460                              <1> CS_TASK_3		equ	(.cs_task_3 - LDT) | 4 | 3	; タスク3用CSセレクタ
   461                              <1> DS_TASK_3		equ	(.ds_task_3 - LDT) | 4 | 3	; タスク3用DSセレクタ
   462                              <1> DS_TASK_4		equ	(.ds_task_4 - LDT) | 4 | 3	; タスク4用DSセレクタ
   463                              <1> DS_TASK_5		equ	(.ds_task_5 - LDT) | 4 | 3	; タスク5用DSセレクタ
   464                              <1> DS_TASK_6		equ	(.ds_task_6 - LDT) | 4 | 3	; タスク6用DSセレクタ
   465                              <1> 
   466                              <1> LDT_LIMIT		equ	.end		- LDT - 1
   467                              <1> 
   468                              <1> 
   195                                  %include	"modules/paging.s"
   196                              <1> ;************************************************************************
   197                              <1> ;	ページの初期化
   198                              <1> ;
   199                              <1> 		;---------------------------------------
   200                              <1> 		;          |____________| 
   201                              <1> 		; 0010_5000|       (4K) | ディレクトリテーブル
   202                              <1> 		;          =            = 
   203                              <1> 		;          |____________| 
   204                              <1> 		; 0010_6000|       (4K) | ページテーブル
   205                              <1> 		;          =            = 
   206                              <1> 		;          |____________| 
   207                              <1> 		; 0010_7000|       (4K) | ページフォルト用
   208                              <1> 		;          =            = 
   209                              <1> 		;          |____________| 
   210                              <1> 		;          |            | 
   211                              <1> ;
   212                              <1> ;************************************************************************
   213                              <1> init_page:
   214                              <1> 		;---------------------------------------
   215                              <1> 		; 【レジスタの保存】
   216                              <1> 		;---------------------------------------
   217 000009BE 60                  <1> 		pusha
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; ページ変換テーブルの作成
   221                              <1> 		;---------------------------------------
   222 000009BF 6800501000E8970000- <1> 		cdecl	page_set_4m, CR3_BASE			; // ページ変換テーブルの作成：タスク3用
   222 000009C8 006683C404          <1>
   223 000009CD 6800002000E8890000- <1> 		cdecl	page_set_4m, CR3_TASK_4			; // ページ変換テーブルの作成：タスク4用
   223 000009D6 006683C404          <1>
   224 000009DB 6800202000E87B0000- <1> 		cdecl	page_set_4m, CR3_TASK_5			; // ページ変換テーブルの作成：タスク5用
   224 000009E4 006683C404          <1>
   225 000009E9 6800402000E86D0000- <1> 		cdecl	page_set_4m, CR3_TASK_6			; // ページ変換テーブルの作成：タスク6用
   225 000009F2 006683C404          <1>
   226                              <1> 
   227                              <1> 		;---------------------------------------
   228                              <1> 		; ページテーブルの設定（不在）
   229                              <1> 		;---------------------------------------
   230 000009F7 C7051C641000000000- <1> 		mov		[0x0010_6000 + 0x107 * 4], dword 0	; // 0x0010_7000をページ不在に設定
   230 00000A00 00                  <1>
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; アドレス変換設定
   234                              <1> 		;---------------------------------------
   235 00000A01 C7051C142000078010- <1> 		mov		[0x0020_1000 + 0x107 * 4], dword PARAM_TASK_4 + 7 ; // アドレス変換：タスク4用
   235 00000A0A 00                  <1>
   236 00000A0B C7051C342000079010- <1> 		mov		[0x0020_3000 + 0x107 * 4], dword PARAM_TASK_5 + 7 ; // アドレス変換：タスク5用
   236 00000A14 00                  <1>
   237 00000A15 C7051C54200007A010- <1> 		mov		[0x0020_5000 + 0x107 * 4], dword PARAM_TASK_6 + 7 ; // アドレス変換：タスク6用
   237 00000A1E 00                  <1>
   238                              <1> 
   239                              <1> 		;---------------------------------------
   240                              <1> 		; 描画パラメータの設定
   241                              <1> 		;---------------------------------------
   242 00000A1F 6A4068[D40D0000]68- <1> 		cdecl	memcpy, PARAM_TASK_4, DRAW_PARAM.t4, rose_size	; 描画パラメータ：タスク4用
   242 00000A27 00801000E8D80E0000- <1>
   242 00000A30 6683C40C            <1>
   243 00000A34 6A4068[140E0000]68- <1> 		cdecl	memcpy, PARAM_TASK_5, DRAW_PARAM.t5, rose_size	; 描画パラメータ：タスク5用
   243 00000A3C 00901000E8C30E0000- <1>
   243 00000A45 6683C40C            <1>
   244 00000A49 6A4068[540E0000]68- <1> 		cdecl	memcpy, PARAM_TASK_6, DRAW_PARAM.t6, rose_size	; 描画パラメータ：タスク6用
   244 00000A51 00A01000E8AE0E0000- <1>
   244 00000A5A 6683C40C            <1>
   245                              <1> 
   246                              <1> 		;---------------------------------------
   247                              <1> 		; 【レジスタの復帰】
   248                              <1> 		;---------------------------------------
   249 00000A5E 61                  <1> 		popa
   250                              <1> 
   251 00000A5F C3                  <1> 		ret
   252                              <1> 
   253                              <1> 
   254                              <1> ;************************************************************************
   255                              <1> ;	
   256                              <1> ;************************************************************************
   257                              <1> page_set_4m:
   258                              <1> 		;---------------------------------------
   259                              <1> 		; 【スタックフレームの構築】
   260                              <1> 		;---------------------------------------
   261                              <1> 												; ------|--------
   262 00000A60 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   263 00000A61 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   264                              <1> 												; ------|--------
   265                              <1> 												;    + 8| ページテーブル作成位置
   266                              <1> 												; ------|--------
   267                              <1> 		;---------------------------------------
   268                              <1> 		; 【レジスタの保存】
   269                              <1> 		;---------------------------------------
   270 00000A63 60                  <1> 		pusha
   271                              <1> 
   272                              <1> 		;---------------------------------------
   273                              <1> 		; ページディレクトリの作成(P=0)
   274                              <1> 		;---------------------------------------
   275 00000A64 FC                  <1> 		cld										; // DFクリア（+方向）
   276 00000A65 8B7D08              <1> 		mov		edi, [ebp + 8]					; EDI = ページディレクトリの先頭;
   277 00000A68 B800000000          <1> 		mov		eax, 0x00000000					; EAX = 0 ; // P = 0
   278 00000A6D B900040000          <1> 		mov		ecx, 1024						; count = 1024;
   279 00000A72 F3AB                <1> 		rep stosd								; whlie (count--) *dst++ = 属性;
   280                              <1> 
   281                              <1> 		;---------------------------------------
   282                              <1> 		; 先頭のエントリを設定
   283                              <1> 		;---------------------------------------
   284 00000A74 89F8                <1> 		mov		eax, edi						; EAX  = EDI;   // ページディレクトリの直後
   285 00000A76 2500F0FFFF          <1> 		and		eax, ~0x0000_0FFF				; EAX &= ~0FFF; // 物理アドレスの指定
   286 00000A7B 83C807              <1> 		or		eax,  7							; EAX |=  7;    // RWの許可
   287 00000A7E 898700F0FFFF        <1> 		mov		[edi - (1024 * 4)], eax			; // 先頭のエントリを設定
   288                              <1> 
   289                              <1> 		;---------------------------------------
   290                              <1> 		; ページテーブルの設定（リニア）
   291                              <1> 		;---------------------------------------
   292 00000A84 B807000000          <1> 		mov		eax, 0x00000007					; // 物理アドレスの指定とRWの許可
   293 00000A89 B900040000          <1> 		mov		ecx, 1024						; count = 1024;
   294                              <1> 												; do
   295                              <1> .10L:											; {
   296 00000A8E AB                  <1> 		stosd									;   *dst++  = 属性;
   297 00000A8F 0500100000          <1> 		add		eax, 0x00001000					;    adr   += 0x1000;
   298 00000A94 E2F8                <1> 		loop	.10L							; } while (--count);
   299                              <1> 
   300                              <1> 		;---------------------------------------
   301                              <1> 		; 【レジスタの復帰】
   302                              <1> 		;---------------------------------------
   303 00000A96 61                  <1> 		popa
   304                              <1> 
   305                              <1> 		;---------------------------------------
   306                              <1> 		; 【スタックフレームの破棄】
   307                              <1> 		;---------------------------------------
   308 00000A97 89EC                <1> 		mov		esp, ebp
   309 00000A99 5D                  <1> 		pop		ebp
   310                              <1> 
   311 00000A9A C3                  <1> 		ret
   312                              <1> 
   196                                  %include	"modules/int_timer.s"
   197                              <1> ;************************************************************************
   198                              <1> ;	例外:タイマー
   199                              <1> ;************************************************************************
   200                              <1> int_timer:
   201                              <1> 		;---------------------------------------
   202                              <1> 		; 【レジスタの保存】
   203                              <1> 		;---------------------------------------
   204 00000A9B 60                  <1> 		pusha
   205 00000A9C 1E                  <1> 		push	ds
   206 00000A9D 06                  <1> 		push	es
   207                              <1> 
   208                              <1> 		;---------------------------------------
   209                              <1> 		; データ用セグメントの設定
   210                              <1> 		;---------------------------------------
   211 00000A9E 66B81000            <1> 		mov		ax, 0x0010						; 
   212 00000AA2 8ED8                <1> 		mov		ds, ax							; 
   213 00000AA4 8EC0                <1> 		mov		es, ax							; 
   214                              <1> 
   215                              <1> 		;---------------------------------------
   216                              <1> 		; TICK
   217                              <1> 		;---------------------------------------
   218 00000AA6 FF05[1C0B0000]      <1> 		inc		dword [TIMER_COUNT]				; TIMER_COUNT++; // 割り込み回数の更新
   219                              <1> 
   220                              <1> 		;---------------------------------------
   221                              <1> 		; 割り込みフラグをクリア(EOI)
   222                              <1> 		;---------------------------------------
   223                              <1> 		outp	0x20, 0x20						; // マスタPIC:EOIコマンド
    72 00000AAC B020                <2>  mov al, %2
    73 00000AAE E620                <2>  out %1, al
   224                              <1> 
   225                              <1> 		;---------------------------------------
   226                              <1> 		; タスクの切り替え
   227                              <1> 		;---------------------------------------
   228 00000AB0 660F00C8            <1> 		str		ax								; AX = TR; // 現在のタスクレジスタ
   229 00000AB4 6683F830            <1> 		cmp		ax, SS_TASK_0					; case (AX)
   230 00000AB8 7427                <1> 		je		.11L							; {
   231 00000ABA 6683F838            <1> 		cmp		ax, SS_TASK_1					;   
   232 00000ABE 742A                <1> 		je		.12L							;   
   233 00000AC0 6683F840            <1> 		cmp		ax, SS_TASK_2					;   
   234 00000AC4 742D                <1> 		je		.13L							;   
   235 00000AC6 6683F848            <1> 		cmp		ax, SS_TASK_3					;   
   236 00000ACA 7430                <1> 		je		.14L							;   
   237 00000ACC 6683F850            <1> 		cmp		ax, SS_TASK_4					;   
   238 00000AD0 7433                <1> 		je		.15L							;   
   239 00000AD2 6683F858            <1> 		cmp		ax, SS_TASK_5					;   
   240 00000AD6 7436                <1> 		je		.16L							;   
   241                              <1> 												;   default:
   242 00000AD8 EA000000003000      <1> 		jmp		SS_TASK_0:0						;     // タスク0に切り替え
   243 00000ADF EB36                <1> 		jmp		.10E							;     break;
   244                              <1> 												;     
   245                              <1> .11L:											;   case SS_TASK_0:
   246 00000AE1 EA000000003800      <1> 		jmp		SS_TASK_1:0						;     // タスク1に切り替え
   247 00000AE8 EB2D                <1> 		jmp		.10E							;     break;
   248                              <1> 												;     
   249                              <1> .12L:											;   case SS_TASK_1:
   250 00000AEA EA000000004000      <1> 		jmp		SS_TASK_2:0						;     // タスク2に切り替え
   251 00000AF1 EB24                <1> 		jmp		.10E							;     break;
   252                              <1> 												;     
   253                              <1> .13L:											;   case SS_TASK_2:
   254 00000AF3 EA000000004800      <1> 		jmp		SS_TASK_3:0						;     // タスク3に切り替え
   255 00000AFA EB1B                <1> 		jmp		.10E							;     break;
   256                              <1> 												;     
   257                              <1> .14L:											;   case SS_TASK_3:
   258 00000AFC EA000000005000      <1> 		jmp		SS_TASK_4:0						;     // タスク4に切り替え
   259 00000B03 EB12                <1> 		jmp		.10E							;     break;
   260                              <1> 												;     
   261                              <1> .15L:											;   case SS_TASK_4:
   262 00000B05 EA000000005800      <1> 		jmp		SS_TASK_5:0						;     // タスク5に切り替え
   263 00000B0C EB09                <1> 		jmp		.10E							;     break;
   264                              <1> 												;     
   265                              <1> .16L:											;   case SS_TASK_5:
   266 00000B0E EA000000006000      <1> 		jmp		SS_TASK_6:0						;     // タスク6に切り替え
   267 00000B15 EB00                <1> 		jmp		.10E							;     break;
   268                              <1> .10E:											; }
   269                              <1> 
   270                              <1> 		;---------------------------------------
   271                              <1> 		; 【レジスタの復帰】
   272                              <1> 		;---------------------------------------
   273 00000B17 07                  <1> 		pop		es								; 
   274 00000B18 1F                  <1> 		pop		ds								; 
   275 00000B19 61                  <1> 		popa
   276                              <1> 
   277 00000B1A CF                  <1> 		iret
   278                              <1> 
   279 00000B1B 00                  <1> ALIGN 4, db 0
   280 00000B1C 00000000            <1> TIMER_COUNT:	dd	0
   281                              <1> 
   197                                  %include	"modules/int_pf.s"
   198                              <1> ;************************************************************************
   199                              <1> ;	
   200                              <1> ;************************************************************************
   201                              <1> int_pf:
   202                              <1> 		;---------------------------------------
   203                              <1> 		; 【スタックフレームの構築】
   204                              <1> 		;---------------------------------------
   205                              <1> 												; ------|--------
   206                              <1> 												; EBP+16| EFLAGS
   207                              <1> 												; EBP+12| CS
   208                              <1> 												; EBP+ 8| EIP（戻り番地）
   209 00000B20 55                  <1> 		push	ebp								; EBP+ 4| エラーコード
   210 00000B21 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   211                              <1> 												; ---------------
   212                              <1> 		;---------------------------------------
   213                              <1> 		; 【レジスタの保存】
   214                              <1> 		;---------------------------------------
   215 00000B23 60                  <1> 		pusha									; 
   216 00000B24 1E                  <1> 		push	ds								; 
   217 00000B25 06                  <1> 		push	es								; 
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; データ用セグメントの設定
   221                              <1> 		;---------------------------------------
   222 00000B26 66B81000            <1> 		mov		ax, 0x0010						; 
   223 00000B2A 8ED8                <1> 		mov		ds, ax							; 
   224 00000B2C 8EC0                <1> 		mov		es, ax							; 
   225                              <1> 
   226                              <1> 		;---------------------------------------
   227                              <1> 		; 例外を生成したアドレスの確認
   228                              <1> 		;---------------------------------------
   229 00000B2E 0F20D0              <1> 		mov		eax, cr2						; // CR2
   230 00000B31 2500F0FFFF          <1> 		and		eax, ~0x0FFF					; // 4Kバイト以内のアクセス
   231 00000B36 3D00701000          <1> 		cmp		eax, 0x0010_7000				; ptr = アクセスアドレス;
   232 00000B3B 7521                <1> 		jne		.10F							; if (0x0010_7000 == ptr)
   233                              <1> 												; {
   234                              <1> 		;---------------------------------------
   235                              <1> 		; ページの有効化
   236                              <1> 		;---------------------------------------
   237 00000B3D C7051C641000077010- <1> 		mov		[0x00106000 + 0x107 * 4], dword 0x00107007	; // ページの有効化
   237 00000B46 00                  <1>
   238                              <1> 
   239                              <1> 		;---------------------------------------
   240                              <1> 		; 描画パラメータの設定
   241                              <1> 		;---------------------------------------
   242 00000B47 6A4068[940D0000]68- <1> 		cdecl	memcpy, 0x0010_7000, DRAW_PARAM, rose_size	; 描画パラメータ：タスク3用
   242 00000B4F 00701000E8B00D0000- <1>
   242 00000B58 6683C40C            <1>
   243                              <1> 												; }
   244 00000B5C EB15                <1> 		jmp		.10E							; else
   245                              <1> .10F:											; {
   246                              <1> 		;---------------------------------------
   247                              <1> 		; スタックの調整
   248                              <1> 		;---------------------------------------
   249 00000B5E 83C404              <1> 		add		esp, 4							; pop es
   250 00000B61 83C404              <1> 		add		esp, 4							; pop ds
   251 00000B64 61                  <1> 		popa									; 
   252 00000B65 5D                  <1> 		pop		ebp								; 
   253                              <1> 
   254                              <1> 		;---------------------------------------
   255                              <1> 		; タスク終了処理
   256                              <1> 		;---------------------------------------
   257 00000B66 9C                  <1> 		pushf									; // EFLAGS
   258 00000B67 0E                  <1> 		push	cs								; // CS
   259 00000B68 68[F7140000]        <1> 		push	int_stop						; // スタック表示処理
   260                              <1> 
   261 00000B6D B8[7D0B0000]        <1> 		mov		eax, .s0						; // 割り込み種別
   262 00000B72 CF                  <1> 		iret
   263                              <1> .10E:											; }
   264                              <1> 		;---------------------------------------
   265                              <1> 		; 【レジスタの復帰】
   266                              <1> 		;---------------------------------------
   267 00000B73 07                  <1> 		pop		es								; 
   268 00000B74 1F                  <1> 		pop		ds								; 
   269 00000B75 61                  <1> 		popa									; 
   270                              <1> 
   271                              <1> 		;---------------------------------------
   272                              <1> 		; 【スタックフレームの破棄】
   273                              <1> 		;---------------------------------------
   274 00000B76 89EC                <1> 		mov		esp, ebp
   275 00000B78 5D                  <1> 		pop		ebp
   276                              <1> 
   277                              <1> 		;---------------------------------------
   278                              <1> 		; エラーコードの破棄
   279                              <1> 		;---------------------------------------
   280 00000B79 83C404              <1> 		add		esp, 4							; // エラーコードの破棄
   281                              <1> 
   282 00000B7C CF                  <1> 		iret
   283                              <1> 
   284 00000B7D 203C20504147452046- <1> .s0		db	" < PAGE FAULT > ", 0
   284 00000B86 41554C54203E2000    <1>
   285                              <1> 
   198                                  %include	"tasks/task_1.s"
   199                              <1> ;************************************************************************
   200                              <1> ;	TASK-1
   201                              <1> ;************************************************************************
   202                              <1> task_1:
   203                              <1> 		;---------------------------------------
   204                              <1> 		; 文字列の表示
   205                              <1> 		;---------------------------------------
   206 00000B8E 68[BC0B0000]6A076A- <1> 		cdecl	draw_str, 63, 0, 0x07, .s0		; draw_str();
   206 00000B96 006A3FE81705000066- <1>
   206 00000B9F 83C410              <1>
   207                              <1> 
   208                              <1> .10L:											; while (;;)
   209                              <1> 												; {
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 時刻の表示
   212                              <1> 		;---------------------------------------
   213 00000BA2 A1[FC020000]        <1> 		mov		eax, [RTC_TIME]					;   // 時刻の取得
   214 00000BA7 5068000700006A006A- <1> 		cdecl	draw_time, 72, 0, 0x0700, eax	;   // 時刻の表示
   214 00000BB0 48E8710800006683C4- <1>
   214 00000BB9 10                  <1>
   215                              <1> 
   216 00000BBA EBE6                <1> 		jmp		.10L							; }
   217                              <1> 
   218                              <1> 		;---------------------------------------
   219                              <1> 		; データ
   220                              <1> 		;---------------------------------------
   221 00000BBC 5461736B2D3100      <1> .s0		db	"Task-1", 0
   222                              <1> 
   199                                  %include	"tasks/task_2.s"
   200                              <1> 
   201                              <1> ;************************************************************************
   202                              <1> ;	TASK
   203                              <1> ;************************************************************************
   204                              <1> task_2:
   205                              <1> 		;---------------------------------------
   206                              <1> 		; 文字列の表示
   207                              <1> 		;---------------------------------------
   208 00000BC3 68[860C0000]6A076A- <1> 		cdecl	draw_str, 63, 1, 0x07, .s0		; draw_str(.s0);
   208 00000BCB 016A3FE8E204000066- <1>
   208 00000BD4 83C410              <1>
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 初期化
   212                              <1> 		;---------------------------------------
   213                              <1> 												; ---------+---------+---------|---------|---------|---------|
   214                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   215                              <1> 												; ---------+---------+---------|---------|---------|---------|
   216 00000BD7 DB05[740C0000]      <1> 		fild	dword [.c1000]					;     1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   217 00000BDD D9EB                <1> 		fldpi									;       pi |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   218 00000BDF DA35[780C0000]      <1> 		fidiv	dword [.c180]					;   pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   219 00000BE5 D9EB                <1> 		fldpi									;       pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   220 00000BE7 DCC0                <1> 		fadd	st0, st0						;     2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   221 00000BE9 D9EE                <1> 		fldz									;   θ = 0 |    2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
   222                              <1> 												; ---------+---------+---------|---------|---------|---------|
   223                              <1> 												;   θ = 0 |    2*pi |d=pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
   224                              <1> 												; ---------+---------+---------|---------|---------|---------|
   225                              <1> 
   226                              <1> 		;---------------------------------------
   227                              <1> 		; メインループ
   228                              <1> 		;---------------------------------------
   229                              <1> .10L:											; for ( ; ; )
   230                              <1> 												; {
   231                              <1> 		;---------------------------------------
   232                              <1> 		; sin(t)
   233                              <1> 		;---------------------------------------
   234                              <1> 												; ---------+---------+---------|---------|---------|---------|
   235                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   236                              <1> 												; ---------+---------+---------|---------|---------|---------|
   237                              <1> 												;       θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   238                              <1> 												; ---------+---------+---------|---------|---------|---------|
   239 00000BEB D8C2                <1> 		fadd	st0, st2						;   θ + d |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   240 00000BED D9F8                <1> 		fprem									;   MOD(θ)|    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   241 00000BEF D9C0                <1> 		fld		st0								;       θ |      θ |    2*pi |       d |    1000 |xxxxxxxxx|
   242 00000BF1 D9FE                <1> 		fsin									;   sin(θ)|      θ |    2*pi |       d |    1000 |xxxxxxxxx|
   243 00000BF3 D8CC                <1> 		fmul	st0, st4						;ST4sin(θ)|      θ |    2*pi |       d |    1000 |xxxxxxxxx|
   244                              <1> 												; ---------+---------+---------|---------|---------|---------|
   245 00000BF5 DF35[7C0C0000]      <1> 		fbstp	[.bcd]							;       θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   246                              <1> 												; ---------+---------+---------|---------|---------|---------|
   247                              <1> 
   248 00000BFB A1[7C0C0000]        <1> 		mov		eax, [.bcd]						;   EAX = 1000 * sin(t);
   249 00000C00 89C3                <1> 		mov		ebx, eax						;   EBX = EAX;
   250                              <1> 
   251 00000C02 250F0F0000          <1> 		and		eax, 0x0F0F						;   // 上位4ビットをマスク
   252 00000C07 0D30300000          <1> 		or		eax, 0x3030						;   // 上位4ビットに0x3を設定
   253                              <1> 
   254 00000C0C C1EB04              <1> 		shr		ebx, 4							;   EBX >>= 4;
   255 00000C0F 81E30F0F0000        <1> 		and		ebx, 0x0F0F						;   // 上位4ビットをマスク
   256 00000C15 81CB30300000        <1> 		or		ebx, 0x3030						;   // 上位4ビットに0x3を設定
   257                              <1> 
   258 00000C1B 883D[8E0C0000]      <1> 		mov		[.s2 + 0], bh					;   // 1桁目
   259 00000C21 8825[900C0000]      <1> 		mov		[.s3 + 0], ah					;   // 小数1桁目
   260 00000C27 881D[910C0000]      <1> 		mov		[.s3 + 1], bl					;   // 小数2桁目
   261 00000C2D A2[920C0000]        <1> 		mov		[.s3 + 2], al					;   // 小数3桁目
   262                              <1> 
   263 00000C32 B807000000          <1> 		mov		eax, 7							;   // 符号の表示
   264 00000C37 0FA305[850C0000]    <1> 		bt		[.bcd + 9], eax					;   CF = bcd[9] & 0x80;
   265 00000C3E 7209                <1> 		jc		.10F							;   if (CF)
   266                              <1> 												;   {
   267 00000C40 C605[8D0C0000]2B    <1> 		mov		[.s1 + 0], byte '+'				;     *s1 = '+';
   268 00000C47 EB07                <1> 		jmp		.10E							;   }
   269                              <1> .10F:											;   else
   270                              <1> 												;   {
   271 00000C49 C605[8D0C0000]2D    <1> 		mov		[.s1 + 0], byte '-'				;     *s1 = '-';
   272                              <1> .10E:											;   }
   273                              <1> 
   274 00000C50 68[8D0C0000]6A076A- <1> 		cdecl	draw_str, 72, 1, 0x07, .s1		; draw_str(.s1);
   274 00000C58 016A48E85504000066- <1>
   274 00000C61 83C410              <1>
   275                              <1> 
   276                              <1> 		;---------------------------------------
   277                              <1> 		; ウェイト
   278                              <1> 		;---------------------------------------
   279 00000C64 6A14E87F0C00006683- <1> 		cdecl	wait_tick, 20					;   wait_tick(20);
   279 00000C6D C404                <1>
   280                              <1> 
   281 00000C6F E977FFFFFF          <1> 		jmp		.10L							; }
   282                              <1> 
   283                              <1> 
   284                              <1> ALIGN 4, db 0
   285 00000C74 E8030000            <1> .c1000:		dd	1000
   286 00000C78 B4000000            <1> .c180:		dd	180
   287                              <1> 
   288 00000C7C 00<rep Ah>          <1> .bcd:	times 10 db	0x00
   289                              <1> 
   290 00000C86 5461736B2D3200      <1> .s0		db	"Task-2", 0
   291 00000C8D 2D                  <1> .s1:	db	"-"
   292 00000C8E 302E                <1> .s2:	db	"0."
   293 00000C90 30303000            <1> .s3:	db	"000", 0
   294                              <1> 
   200                                  %include	"tasks/task_3.s"
   201                              <1> ;************************************************************************
   202                              <1> ;	TASK
   203                              <1> ;************************************************************************
   204                              <1> task_3:
   205                              <1> 		;---------------------------------------
   206                              <1> 		; 【スタックフレームの構築】
   207                              <1> 		;---------------------------------------
   208 00000C94 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   209                              <1> 												; ---------------
   210 00000C96 6A00                <1> 		push	dword 0							;    - 4| x0 = 0; // X座標原点
   211 00000C98 6A00                <1> 		push	dword 0							;    - 8| y0 = 0; // Y座標原点
   212 00000C9A 6A00                <1> 		push	dword 0							;    -12| x  = 0; // X座標描画
   213 00000C9C 6A00                <1> 		push	dword 0							;    -16| y  = 0; // Y座標描画
   214 00000C9E 6A00                <1> 		push	dword 0							;    -20| r  = 0; // 角度
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; 初期化
   218                              <1> 		;---------------------------------------
   219 00000CA0 BE00701000          <1> 		mov		esi, 0x0010_7000				; ESI = 描画パラメータ
   220                              <1> 
   221                              <1> 		;---------------------------------------
   222                              <1> 		; タイトル表示
   223                              <1> 		;---------------------------------------
   224 00000CA5 8B06                <1> 		mov		eax, [esi + rose.x0]			; X0座標
   225 00000CA7 8B5E04              <1> 		mov		ebx, [esi + rose.y0]			; Y0座標
   226                              <1> 
   227 00000CAA C1E803              <1> 		shr		eax, 3							; EAX = EAX /  8; // X座標を文字位置に変換
   228 00000CAD C1EB04              <1> 		shr		ebx, 4							; EBX = EBX / 16; // Y座標を文字位置に変換
   229 00000CB0 4B                  <1> 		dec		ebx								; // 1文字分上に移動
   230 00000CB1 8B4E24              <1> 		mov		ecx, [esi + rose.color_s]		; 文字色
   231 00000CB4 8D5630              <1> 		lea		edx, [esi + rose.title]			; タイトル
   232                              <1> 
   233 00000CB7 52515350E8F5030000- <1> 		cdecl	draw_str, eax, ebx, ecx, edx	; draw_str();
   233 00000CC0 6683C410            <1>
   234                              <1> 
   235                              <1> 		;---------------------------------------
   236                              <1> 		; X軸の中点
   237                              <1> 		;---------------------------------------
   238 00000CC4 8B06                <1> 		mov		eax, [esi + rose.x0]			; EAX  = X0座標
   239 00000CC6 8B5E08              <1> 		mov		ebx, [esi + rose.x1]			; EBX  = X1座標
   240 00000CC9 29C3                <1> 		sub		ebx, eax						; EBX  = (X1 - X0);
   241 00000CCB D1EB                <1> 		shr		ebx, 1							; EBX /= 2;
   242 00000CCD 01C3                <1> 		add		ebx, eax						; EBX += X0
   243 00000CCF 895DFC              <1> 		mov		[ebp - 4], ebx					; x0 = EBX; // X座標原点;
   244                              <1> 
   245                              <1> 		;---------------------------------------
   246                              <1> 		; Y軸の中点
   247                              <1> 		;---------------------------------------
   248 00000CD2 8B4604              <1> 		mov		eax, [esi + rose.y0]			; EAX  = Y0座標
   249 00000CD5 8B5E0C              <1> 		mov		ebx, [esi + rose.y1]			; EBX  = Y1座標
   250 00000CD8 29C3                <1> 		sub		ebx, eax						; EBX  = (Y1 - Y0);
   251 00000CDA D1EB                <1> 		shr		ebx, 1							; EBX /= 2;
   252 00000CDC 01C3                <1> 		add		ebx, eax						; EBX += Y0
   253 00000CDE 895DF8              <1> 		mov		[ebp - 8], ebx					; y0 = EBX; // Y座標原点;
   254                              <1> 
   255                              <1> 		;---------------------------------------
   256                              <1> 		; X軸の描画
   257                              <1> 		;---------------------------------------
   258 00000CE1 8B06                <1> 		mov		eax, [esi + rose.x0]			; EAX = X0座標;
   259 00000CE3 8B5DF8              <1> 		mov		ebx, [ebp - 8]					; EBX = Y軸の中点;
   260 00000CE6 8B4E08              <1> 		mov		ecx, [esi + rose.x1]			; ECX = X1座標;
   261                              <1> 
   262 00000CE9 FF761853515350E853- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]	; X軸
   262 00000CF2 0500006683C414      <1>
   263                              <1> 
   264                              <1> 		;---------------------------------------
   265                              <1> 		; Y軸の描画
   266                              <1> 		;---------------------------------------
   267 00000CF9 8B4604              <1> 		mov		eax, [esi + rose.y0]			; Y0座標
   268 00000CFC 8B5DFC              <1> 		mov		ebx, [ebp - 4]					; EBX = X軸の中点;
   269 00000CFF 8B4E0C              <1> 		mov		ecx, [esi + rose.y1]			; Y1座標
   270                              <1> 
   271 00000D02 FF761C51535053E83A- <1> 		cdecl	draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]	; Y軸
   271 00000D0B 0500006683C414      <1>
   272                              <1> 
   273                              <1> 		;---------------------------------------
   274                              <1> 		; 枠の描画
   275                              <1> 		;---------------------------------------
   276 00000D12 8B06                <1> 		mov		eax, [esi + rose.x0]			; X0座標
   277 00000D14 8B5E04              <1> 		mov		ebx, [esi + rose.y0]			; Y0座標
   278 00000D17 8B4E08              <1> 		mov		ecx, [esi + rose.x1]			; X1座標
   279 00000D1A 8B560C              <1> 		mov		edx, [esi + rose.y1]			; Y1座標
   280                              <1> 
   281 00000D1D FF762052515350E8CE- <1> 		cdecl	draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]	; 枠
   281 00000D26 0500006683C414      <1>
   282                              <1> 
   283                              <1> 		;---------------------------------------
   284                              <1> 		; 振幅をX軸の約95%とする
   285                              <1> 		;---------------------------------------
   286 00000D2D 8B4608              <1> 		mov		eax, [esi + rose.x1]			; EAX  = X1座標;
   287 00000D30 2B06                <1> 		sub		eax, [esi + rose.x0]			; EAX -= X0座標;
   288 00000D32 D1E8                <1> 		shr		eax, 1							; EAX /= 2;      // 半分
   289 00000D34 89C3                <1> 		mov		ebx, eax						; EBX  = EAX;
   290 00000D36 C1EB04              <1> 		shr		ebx, 4							; EBX /= 16;
   291 00000D39 29D8                <1> 		sub		eax, ebx						; EAX -= EBX;
   292                              <1> 
   293                              <1> 		;---------------------------------------
   294                              <1> 		; FPUの初期化(バラ曲線の初期化)
   295                              <1> 		;---------------------------------------
   296 00000D3B FF7614FF761050E84D- <1> 		cdecl	fpu_rose_init										, eax											, dword [esi + rose.n]							, dword [esi + rose.d]
   296 00000D44 0100006683C40C      <1>
   300                              <1> 
   301                              <1> 		;---------------------------------------
   302                              <1> 		; メインループ
   303                              <1> 		;---------------------------------------
   304                              <1> .10L:											; for ( ; ; )
   305                              <1> 												; {
   306                              <1> 		;---------------------------------------
   307                              <1> 		; 座標計算
   308                              <1> 		;---------------------------------------
   309 00000D4B 8D5DF4              <1> 		lea		ebx, [ebp -12]					;   EBX = &x;
   310 00000D4E 8D4DF0              <1> 		lea		ecx, [ebp -16]					;   ECX = &y;
   311 00000D51 8B45EC              <1> 		mov		eax, [ebp -20]					;   EAX = r;
   312                              <1> 
   313 00000D54 505153E85201000066- <1> 		cdecl	fpu_rose_update										, ebx											, ecx											, eax
   313 00000D5D 83C40C              <1>
   317                              <1> 
   318                              <1> 		;---------------------------------------
   319                              <1> 		; 角度更新(r = r % 36000)
   320                              <1> 		;---------------------------------------
   321 00000D60 BA00000000          <1> 		mov		edx, 0							;   EDX = 0;
   322 00000D65 40                  <1> 		inc		eax								;   EAX++;
   323 00000D66 BBA08C0000          <1> 		mov		ebx, 360 * 100					;   DBX = 36000
   324 00000D6B F7F3                <1> 		div		ebx								;   EDX = EDX:EAX % EBX;
   325 00000D6D 8955EC              <1> 		mov		[ebp -20], edx
   326                              <1> 
   327                              <1> 		;---------------------------------------
   328                              <1> 		; ドット描画
   329                              <1> 		;---------------------------------------
   330 00000D70 8B4DF4              <1> 		mov		ecx, [ebp -12]					;   ECX = X座標
   331 00000D73 8B55F0              <1> 		mov		edx, [ebp -16]					;   ECX = Y座標
   332                              <1> 
   333 00000D76 034DFC              <1> 		add		ecx, [ebp - 4]					;   ECX += X座標原点;
   334 00000D79 0355F8              <1> 		add		edx, [ebp - 8]					;   EDX += Y座標原点;
   335                              <1> 
   336 00000D7C 8B5E28              <1> 		mov		ebx, [esi + rose.color_f]		;   EBX = 表示色;
   337 00000D7F CD82                <1> 		int		0x82							;   sys_call_82(表示色, X, Y);
   338                              <1> 
   339                              <1> 		;---------------------------------------
   340                              <1> 		; ウェイト
   341                              <1> 		;---------------------------------------
   342 00000D81 6A02E8620B00006683- <1> 		cdecl	wait_tick, 2					;   wait_tick(2);
   342 00000D8A C404                <1>
   343                              <1> 
   344                              <1> 		;---------------------------------------
   345                              <1> 		; ドット描画(消去)
   346                              <1> 		;---------------------------------------
   347 00000D8C 8B5E2C              <1> 		mov		ebx, [esi + rose.color_b]		;   EBX = 背景色;
   348 00000D8F CD82                <1> 		int		0x82							;   sys_call_82(背景色, X, Y);
   349                              <1> 
   350                              <1> 
   351 00000D91 EBB8                <1>         jmp     .10L                            ; }
   352                              <1> 
   353                              <1> 
   354 00000D93 00                  <1> ALIGN 4, db 0
   355                              <1> DRAW_PARAM:										; 描画パラメータ
   356                              <1> .t3:
   357                              <1> 	istruc	rose
   358 00000D94 20000000            <1> 		at	rose.x0,		dd		 32			; 左上座標：X0
   359 00000D98 20000000            <1> 		at	rose.y0,		dd		 32			; 左上座標：Y0
   360 00000D9C D0000000            <1> 		at	rose.x1,		dd		208			; 右下座標：X1
   361 00000DA0 D0000000            <1> 		at	rose.y1,		dd		208			; 右下座標：Y1
   362                              <1> 
   363 00000DA4 02000000            <1> 		at	rose.n,			dd		2			; 変数：n
   364 00000DA8 01000000            <1> 		at	rose.d,			dd		1			; 変数：d
   365                              <1> 
   366 00000DAC 07000000            <1> 		at	rose.color_x,	dd		0x0007		; 描画色：X軸
   367 00000DB0 07000000            <1> 		at	rose.color_y,	dd		0x0007		; 描画色：Y軸
   368 00000DB4 0F000000            <1> 		at	rose.color_z,	dd		0x000F		; 描画色：枠
   369 00000DB8 0F030000            <1> 		at	rose.color_s,	dd		0x030F		; 描画色：文字
   370 00000DBC 0F000000            <1> 		at	rose.color_f,	dd		0x000F		; 描画色：グラフ描画色
   371 00000DC0 03000000            <1> 		at	rose.color_b,	dd		0x0003		; 描画色：グラフ消去色
   372                              <1> 
   373 00000DC4 5461736B2D3300      <1> 		at	rose.title,		db		"Task-3", 0	; タイトル
   374 00000DCB 00<rep 9h>          <1> 	iend
   375                              <1> 
   376                              <1> .t4:
   377                              <1> 	istruc	rose
   378 00000DD4 F8000000            <1> 		at	rose.x0,		dd		248			; 左上座標：X0
   379 00000DD8 20000000            <1> 		at	rose.y0,		dd		 32			; 左上座標：Y0
   380 00000DDC A8010000            <1> 		at	rose.x1,		dd		424			; 右下座標：X1
   381 00000DE0 D0000000            <1> 		at	rose.y1,		dd		208			; 右下座標：Y1
   382                              <1> 
   383 00000DE4 03000000            <1> 		at	rose.n,			dd		3			; 変数：n
   384 00000DE8 01000000            <1> 		at	rose.d,			dd		1			; 変数：d
   385                              <1> 
   386 00000DEC 07000000            <1> 		at	rose.color_x,	dd		0x0007		; 描画色：X軸
   387 00000DF0 07000000            <1> 		at	rose.color_y,	dd		0x0007		; 描画色：Y軸
   388 00000DF4 0F000000            <1> 		at	rose.color_z,	dd		0x000F		; 描画色：枠
   389 00000DF8 0F040000            <1> 		at	rose.color_s,	dd		0x040F		; 描画色：文字
   390 00000DFC 0F000000            <1> 		at	rose.color_f,	dd		0x000F		; 描画色：グラフ描画色
   391 00000E00 04000000            <1> 		at	rose.color_b,	dd		0x0004		; 描画色：グラフ消去色
   392                              <1> 
   393 00000E04 5461736B2D3400      <1> 		at	rose.title,		db		"Task-4", 0	; タイトル
   394 00000E0B 00<rep 9h>          <1> 	iend
   395                              <1> 
   396                              <1> .t5:
   397                              <1> 	istruc	rose
   398 00000E14 20000000            <1> 		at	rose.x0,		dd		 32			; 左上座標：X0
   399 00000E18 10010000            <1> 		at	rose.y0,		dd		272			; 左上座標：Y0
   400 00000E1C D0000000            <1> 		at	rose.x1,		dd		208			; 右下座標：X1
   401 00000E20 C0010000            <1> 		at	rose.y1,		dd		448			; 右下座標：Y1
   402                              <1> 
   403 00000E24 02000000            <1> 		at	rose.n,			dd		2			; 変数：n
   404 00000E28 06000000            <1> 		at	rose.d,			dd		6			; 変数：d
   405                              <1> 
   406 00000E2C 07000000            <1> 		at	rose.color_x,	dd		0x0007		; 描画色：X軸
   407 00000E30 07000000            <1> 		at	rose.color_y,	dd		0x0007		; 描画色：Y軸
   408 00000E34 0F000000            <1> 		at	rose.color_z,	dd		0x000F		; 描画色：枠
   409 00000E38 0F050000            <1> 		at	rose.color_s,	dd		0x050F		; 描画色：文字
   410 00000E3C 0F000000            <1> 		at	rose.color_f,	dd		0x000F		; 描画色：グラフ描画色
   411 00000E40 05000000            <1> 		at	rose.color_b,	dd		0x0005		; 描画色：グラフ消去色
   412                              <1> 
   413 00000E44 5461736B2D3500      <1> 		at	rose.title,		db		"Task-5", 0	; タイトル
   414 00000E4B 00<rep 9h>          <1> 	iend
   415                              <1> 
   416                              <1> .t6:
   417                              <1> 	istruc	rose
   418 00000E54 F8000000            <1> 		at	rose.x0,		dd		248			; 左上座標：X0
   419 00000E58 10010000            <1> 		at	rose.y0,		dd		272			; 左上座標：Y0
   420 00000E5C A8010000            <1> 		at	rose.x1,		dd		424			; 右下座標：X1
   421 00000E60 C0010000            <1> 		at	rose.y1,		dd		448			; 右下座標：Y1
   422                              <1> 
   423 00000E64 04000000            <1> 		at	rose.n,			dd		4			; 変数：n
   424 00000E68 06000000            <1> 		at	rose.d,			dd		6			; 変数：d
   425                              <1> 
   426 00000E6C 07000000            <1> 		at	rose.color_x,	dd		0x0007		; 描画色：X軸
   427 00000E70 07000000            <1> 		at	rose.color_y,	dd		0x0007		; 描画色：Y軸
   428 00000E74 0F000000            <1> 		at	rose.color_z,	dd		0x000F		; 描画色：枠
   429 00000E78 0F060000            <1> 		at	rose.color_s,	dd		0x060F		; 描画色：文字
   430 00000E7C 0F000000            <1> 		at	rose.color_f,	dd		0x000F		; 描画色：グラフ描画色
   431 00000E80 06000000            <1> 		at	rose.color_b,	dd		0x0006		; 描画色：グラフ消去色
   432                              <1> 
   433 00000E84 5461736B2D3600      <1> 		at	rose.title,		db		"Task-6", 0	; タイトル
   434 00000E8B 00<rep 9h>          <1> 	iend
   435                              <1> 
   436                              <1> 
   437                              <1> 
   438                              <1> 
   439                              <1> ;************************************************************************
   440                              <1> ;	バラ曲線：初期化
   441                              <1> ;------------------------------------------------------------------------
   442                              <1> ;	バラ曲線を描画するためにFPUのレジスタを初期化する
   443                              <1> ;
   444                              <1> ;	Z = A * sin(nθ)
   445                              <1> ;	  = A * sin( (n/d) * ((π/180) * t) )
   446                              <1> ;
   447                              <1> ;	このグラフを描画するために、X/Y座標を次の様に計算する
   448                              <1> ;
   449                              <1> ;	x = A * sin(nθ) * cos(θ)
   450                              <1> ;	y = A * sin(nθ) * sin(θ)
   451                              <1> ;
   452                              <1> ;	この時、kは(n / d)で指定する。また、ラディアン = 度 * (π / 180)
   453                              <1> ;	である事から、r = π / 180を先に計算しておく
   454                              <1> ;========================================================================
   455                              <1> ;■書式		: void fpu_rose_init(A, n, d);
   456                              <1> ;
   457                              <1> ;■引数
   458                              <1> ;	DWORD	: A
   459                              <1> ;	DWORD	: n
   460                              <1> ;	DWORD	: d
   461                              <1> ;
   462                              <1> ;■戻り値	: 無し
   463                              <1> ;************************************************************************
   464                              <1> fpu_rose_init:
   465                              <1> 		;---------------------------------------
   466                              <1> 		; 【スタックフレームの構築】
   467                              <1> 		;---------------------------------------
   468                              <1> 												; ------|--------
   469                              <1> 												;    +16| d
   470                              <1> 												;    +12| n
   471                              <1> 												;    + 8| A
   472                              <1> 												; ---------------
   473 00000E94 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   474 00000E95 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   475                              <1> 												; ---------------
   476 00000E97 68B4000000          <1> 		push	dword 180						;    - 4| dword i = 180;
   477                              <1> 
   478                              <1> 		;---------------------------------------
   479                              <1> 		; FPUを使った処理
   480                              <1> 		;
   481                              <1> 		; A(振幅), k(n/d),r(度→ラディアン)を
   482                              <1> 		; FPU内のレジスタにスタックしておく
   483                              <1> 		;---------------------------------------
   484                              <1> 												; ---------+---------+---------|---------|---------|---------|
   485                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   486                              <1> 												; ---------+---------+---------|---------|---------|---------|
   487 00000E9C D9EB                <1> 		fldpi									;   pi     |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   488 00000E9E DA75FC              <1> 		fidiv	dword [ebp - 4]					;   pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   489 00000EA1 DB450C              <1> 		fild	dword [ebp +12]					;        n |  pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   490 00000EA4 DA7510              <1> 		fidiv	dword [ebp +16]					;      n/d |         |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   491 00000EA7 DB4508              <1> 		fild	dword [ebp + 8]					;        A |     n/d |  pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   492                              <1> 												; ---------+---------+---------|---------|---------|---------|
   493                              <1> 												;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   494                              <1> 												; ---------+---------+---------|---------|---------|---------|
   495                              <1> 		;---------------------------------------
   496                              <1> 		; スタックフレームの破棄
   497                              <1> 		;---------------------------------------
   498 00000EAA 89EC                <1> 		mov		esp, ebp
   499 00000EAC 5D                  <1> 		pop		ebp
   500                              <1> 
   501 00000EAD C3                  <1> 		ret
   502                              <1> 
   503                              <1> ;************************************************************************
   504                              <1> ;	バラ曲線：計算
   505                              <1> ;------------------------------------------------------------------------
   506                              <1> ;	角度を引数として受け取り、座標を計算する。
   507                              <1> ;	（他のパラメータはFPUレジスタに設定済みと仮定）
   508                              <1> ;========================================================================
   509                              <1> ;■書式		: void fpu_rose_update(t, X, Y);
   510                              <1> ;
   511                              <1> ;■引数
   512                              <1> ;	DWORD	: 角度[度]
   513                              <1> ;	DWORD	: Y座標へのポインタ
   514                              <1> ;	DWORD	: X座標へのポインタ
   515                              <1> ;
   516                              <1> ;■戻り値	: 無し
   517                              <1> ;************************************************************************
   518                              <1> fpu_rose_update:
   519                              <1> 		;---------------------------------------
   520                              <1> 		; 【スタックフレームの構築】
   521                              <1> 		;---------------------------------------
   522                              <1> 												; ---------------
   523                              <1> 												; EBP+16| t(角度)
   524                              <1> 												; EBP+12| Y(float)
   525                              <1> 												; EBP+ 8| X(float)
   526                              <1> 												; ---------------
   527 00000EAE 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   528 00000EAF 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   529                              <1> 												; ------|--------
   530                              <1> 
   531                              <1> 		;---------------------------------------
   532                              <1> 		; 【レジスタの保存】
   533                              <1> 		;---------------------------------------
   534 00000EB1 50                  <1> 		push	eax
   535 00000EB2 53                  <1> 		push	ebx
   536                              <1> 
   537                              <1> 		;---------------------------------------
   538                              <1> 		; X/Yの保存先を設定
   539                              <1> 		;---------------------------------------
   540 00000EB3 8B4508              <1> 		mov		eax, [ebp +  8]					; EAX = pX; // X座標へのポインタ
   541 00000EB6 8B5D0C              <1> 		mov		ebx, [ebp + 12]					; EBX = pY; // Y座標へのポインタ
   542                              <1> 
   543                              <1> 		;---------------------------------------
   544                              <1> 		; FPUを使った処理
   545                              <1> 		; 
   546                              <1> 		; 既にスタックしてある値を元に
   547                              <1> 		; t(角度)から座標を計算する
   548                              <1> 		;---------------------------------------
   549                              <1> 												; ---------+---------+---------|---------|---------|---------|
   550                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   551                              <1> 												; ---------+---------+---------|---------|---------|---------|
   552 00000EB9 DB4510              <1> 		fild	dword [ebp +16]					;        t |       A |       k |       r |xxxxxxxxx|xxxxxxxxx|
   553 00000EBC D8CB                <1> 		fmul	st0, st3						;       rt |         |         |         |         |         |
   554 00000EBE D9C0                <1> 		fld		st0								;       rt |      rt |       A |       k |       r |xxxxxxxxx|
   555                              <1> 												; ---------+---------+---------|---------|---------|---------|
   556                              <1> 		; rt を θと置き換える					;       θ |      θ |       A |       k |       r |         |
   557                              <1> 												; ---------+---------+---------|---------|---------|---------|
   558 00000EC0 D9FB                <1> 		fsincos									;   cos(θ)|  sin(θ)|      θ |       A |       k |       r |
   559 00000EC2 D9CA                <1> 		fxch	st2								;       θ |         |  cos(θ)|         |         |         |
   560 00000EC4 D8CC                <1> 		fmul	st0, st4						;      kθ |         |         |         |         |         |
   561 00000EC6 D9FE                <1> 		fsin									;  sin(kθ)|         |         |         |         |         |
   562 00000EC8 D8CB                <1> 		fmul	st0, st3						; Asin(kθ)|         |         |         |         |         |
   563                              <1> 												; ---------+---------+---------|---------|---------|---------|
   564                              <1> 												; Asin(kθ)|  sin(θ)|  cos(θ)|       A |       k |       r |
   565                              <1> 												; ---------+---------+---------|---------|---------|---------|
   566                              <1> 		;---------------------------------------
   567                              <1> 		; x =  A * sin(kθ) * cos(θ);
   568                              <1> 		;---------------------------------------
   569                              <1> 												; ---------+---------+---------|---------|---------|---------|
   570                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   571                              <1> 												; ---------+---------+---------|---------|---------|---------|
   572                              <1> 												; Asin(kθ)|  sin(θ)|  cos(θ)|       A |       k |       r |
   573 00000ECA D9CA                <1> 		fxch	st2								;   cos(θ)|         |Asin(kθ)|         |         |         |
   574 00000ECC D8CA                <1> 		fmul	st0, st2						;        x |         |         |         |         |         |
   575 00000ECE DB18                <1> 		fistp	dword [eax]						;   sin(θ)|Asin(kθ)|       A |       k |       r |xxxxxxxxx|
   576                              <1> 												; ---------+---------+---------|---------|---------|---------|
   577                              <1> 		;---------------------------------------
   578                              <1> 		; y = -A * sin(kθ) * sin(θ);
   579                              <1> 		;---------------------------------------
   580                              <1> 												; ---------+---------+---------|---------|---------|---------|
   581                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   582                              <1> 												; ---------+---------+---------|---------|---------|---------|
   583                              <1> 												;   sin(θ)|Asin(kθ)|       A |       k |       r |xxxxxxxxx|
   584 00000ED0 DEC9                <1> 		fmulp	st1, st0						;        y |       A |       k |       r |xxxxxxxxx|xxxxxxxxx|
   585 00000ED2 D9E0                <1> 		fchs									;       -y |         |         |         |xxxxxxxxx|xxxxxxxxx|
   586 00000ED4 DB1B                <1> 		fistp	dword [ebx]						;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   587                              <1> 												; ---------+---------+---------|---------|---------|---------|
   588                              <1> 		;---------------------------------------
   589                              <1> 		; レジスタの復帰
   590                              <1> 		;---------------------------------------
   591 00000ED6 5B                  <1> 		pop		ebx
   592 00000ED7 58                  <1> 		pop		eax
   593                              <1> 
   594                              <1> 		;---------------------------------------
   595                              <1> 		; スタックフレームの破棄
   596                              <1> 		;---------------------------------------
   597 00000ED8 89EC                <1> 		mov		esp, ebp
   598 00000EDA 5D                  <1> 		pop		ebp
   599                              <1> 
   600 00000EDB C3                  <1> 		ret
   601                              <1> 
   201                                  
   202                                  ;************************************************************************
   203                                  ;	モジュール
   204                                  ;************************************************************************
   205                                  %include	"../modules/protect/vga.s"
   206                              <1> ;************************************************************************
   207                              <1> ;	読み込みプレーンの選択
   208                              <1> ;========================================================================
   209                              <1> ;■書式		: void vga_set_read_plane(plane);
   210                              <1> ;
   211                              <1> ;■引数
   212                              <1> ;	plane	: 読み込みプレーン
   213                              <1> ;
   214                              <1> ;■戻り値	: 無し
   215                              <1> ;************************************************************************
   216                              <1> vga_set_read_plane:
   217                              <1> 		;---------------------------------------
   218                              <1> 		; 【スタックフレームの構築】
   219                              <1> 		;---------------------------------------
   220                              <1> 												; EBP+ 8| プレーン（インデックス）
   221                              <1> 												; ------+----------------
   222 00000EDC 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   223 00000EDD 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   224                              <1> 												; ------+----------------
   225                              <1> 
   226                              <1> 		;---------------------------------------
   227                              <1> 		; 【レジスタの保存】
   228                              <1> 		;---------------------------------------
   229 00000EDF 50                  <1> 		push	eax
   230 00000EE0 52                  <1> 		push	edx
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; 読み込みプレーンの選択
   234                              <1> 		;---------------------------------------
   235 00000EE1 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
   236 00000EE4 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
   237 00000EE7 B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
   238 00000EE9 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
   239 00000EED 66EF                <1> 		out		dx, ax							; // ポート出力
   240                              <1> 
   241                              <1> 		;---------------------------------------
   242                              <1> 		; 【レジスタの復帰】
   243                              <1> 		;---------------------------------------
   244 00000EEF 5A                  <1> 		pop		edx
   245 00000EF0 58                  <1> 		pop		eax
   246                              <1> 
   247                              <1> 		;---------------------------------------
   248                              <1> 		; 【スタックフレームの破棄】
   249                              <1> 		;---------------------------------------
   250 00000EF1 89EC                <1> 		mov		esp, ebp
   251 00000EF3 5D                  <1> 		pop		ebp
   252                              <1> 
   253 00000EF4 C3                  <1> 		ret
   254                              <1> 
   255                              <1> 
   256                              <1> ;************************************************************************
   257                              <1> ;	書き込みプレーンを選択
   258                              <1> ;========================================================================
   259                              <1> ;■書式		: void vga_set_write_plane(plane);
   260                              <1> ;
   261                              <1> ;■引数
   262                              <1> ;	plane	: 書き込みプレーン
   263                              <1> ;
   264                              <1> ;■戻り値	: 無し
   265                              <1> ;************************************************************************
   266                              <1> vga_set_write_plane:
   267                              <1> 		;---------------------------------------
   268                              <1> 		; 【スタックフレームの構築】
   269                              <1> 		;---------------------------------------
   270                              <1> 												; EBP+ 8| プレーン（ビット指定）
   271                              <1> 												; ------+----------------
   272 00000EF5 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   273 00000EF6 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   274                              <1> 												; ------+----------------
   275                              <1> 
   276                              <1> 		;---------------------------------------
   277                              <1> 		; 【レジスタの保存】
   278                              <1> 		;---------------------------------------
   279 00000EF8 50                  <1> 		push	eax
   280 00000EF9 52                  <1> 		push	edx
   281                              <1> 
   282                              <1> 		;---------------------------------------
   283                              <1> 		; 書き込みプレーンの選択
   284                              <1> 		;---------------------------------------
   285 00000EFA 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
   286 00000EFD 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
   287 00000F00 B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
   288 00000F02 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
   289 00000F06 66EF                <1> 		out		dx, ax							; // ポート出力
   290                              <1> 
   291                              <1> 		;---------------------------------------
   292                              <1> 		; 【レジスタの復帰】
   293                              <1> 		;---------------------------------------
   294 00000F08 5A                  <1> 		pop		edx
   295 00000F09 58                  <1> 		pop		eax
   296                              <1> 
   297                              <1> 		;---------------------------------------
   298                              <1> 		; 【スタックフレームの破棄】
   299                              <1> 		;---------------------------------------
   300 00000F0A 89EC                <1> 		mov		esp, ebp
   301 00000F0C 5D                  <1> 		pop		ebp
   302                              <1> 
   303 00000F0D C3                  <1> 		ret
   304                              <1> 
   305                              <1> 
   306                              <1> ;************************************************************************
   307                              <1> ;	フォントの書き込み
   308                              <1> ;========================================================================
   309                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   310                              <1> ;
   311                              <1> ;■引数
   312                              <1> ;	font	: FONTアドレス
   313                              <1> ;	vram	: VRAMアドレス
   314                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   315                              <1> ;	color	: 描画色
   316                              <1> ;
   317                              <1> ;■戻り値	: 無し
   318                              <1> ;************************************************************************
   319                              <1> vram_font_copy:
   320                              <1> 		;---------------------------------------
   321                              <1> 		; 【スタックフレームの構築】
   322                              <1> 		;---------------------------------------
   323                              <1> 												; EBP+20| 色（背景/前景色）
   324                              <1> 												; EBP+16| プレーン（ビット指定）
   325                              <1> 												; EBP+12| VRAMアドレス
   326                              <1> 												; EBP+ 8| FONTアドレス
   327                              <1> 												; ------+----------------
   328 00000F0E 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   329 00000F0F 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   330                              <1> 												; ------+----------------
   331                              <1> 
   332                              <1> 		;---------------------------------------
   333                              <1> 		; 【レジスタの保存】
   334                              <1> 		;---------------------------------------
   335 00000F11 50                  <1> 		push	eax
   336 00000F12 53                  <1> 		push	ebx
   337 00000F13 51                  <1> 		push	ecx
   338 00000F14 52                  <1> 		push	edx
   339 00000F15 56                  <1> 		push	esi
   340 00000F16 57                  <1> 		push	edi
   341                              <1> 
   342                              <1> 		;---------------------------------------
   343                              <1> 		; 【処理の開始】
   344                              <1> 		;---------------------------------------
   345 00000F17 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   346 00000F1A 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   347 00000F1D 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   348 00000F21 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   349                              <1> 
   350 00000F25 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   351 00000F27 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   352 00000F2A FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   353                              <1> 
   354 00000F2C 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   355 00000F2E 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   356 00000F31 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   357                              <1> 
   358                              <1> 		;---------------------------------------
   359                              <1> 		; 16ドットフォントのコピー
   360                              <1> 		;---------------------------------------
   361 00000F33 FC                  <1> 		cld										; DF  = 0; // アドレス加算
   362                              <1> 
   363 00000F34 B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   364                              <1> .10L:											; do
   365                              <1> 												; {
   366                              <1> 		;---------------------------------------
   367                              <1> 		; フォントマスクの作成
   368                              <1> 		;---------------------------------------
   369 00000F39 AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   370 00000F3A 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   371 00000F3C F6D4                <1> 		not		ah								;   
   372                              <1> 
   373                              <1> 		;---------------------------------------
   374                              <1> 		; 前景色
   375                              <1> 		;---------------------------------------
   376 00000F3E 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   377                              <1> 
   378                              <1> 		;---------------------------------------
   379                              <1> 		; 背景色
   380                              <1> 		;---------------------------------------
   381 00000F40 F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   382 00000F46 7404                <1> 		jz		.11F							;   {
   383 00000F48 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   384 00000F4A EB02                <1> 		jmp		.11E							;   }
   385                              <1> .11F:											;   else
   386                              <1> 												;   {
   387 00000F4C 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   388                              <1> .11E:											;   }
   389                              <1> 
   390                              <1> 		;---------------------------------------
   391                              <1> 		; 前景色と背景色を合成
   392                              <1> 		;---------------------------------------
   393 00000F4E 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   394                              <1> 
   395                              <1> 		;---------------------------------------
   396                              <1> 		; 新しい値を出力
   397                              <1> 		;---------------------------------------
   398 00000F50 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   399                              <1> 
   400 00000F52 83C750              <1> 		add		edi, 80							;   EDI += 80;
   401 00000F55 E2E2                <1> 		loop	.10L							; } while (--ECX);
   402                              <1> .10E:											; 
   403                              <1> 
   404                              <1> 		;---------------------------------------
   405                              <1> 		; 【レジスタの復帰】
   406                              <1> 		;---------------------------------------
   407 00000F57 5F                  <1> 		pop		edi
   408 00000F58 5E                  <1> 		pop		esi
   409 00000F59 5A                  <1> 		pop		edx
   410 00000F5A 59                  <1> 		pop		ecx
   411 00000F5B 5B                  <1> 		pop		ebx
   412 00000F5C 58                  <1> 		pop		eax
   413                              <1> 
   414                              <1> 		;---------------------------------------
   415                              <1> 		; 【スタックフレームの破棄】
   416                              <1> 		;---------------------------------------
   417 00000F5D 89EC                <1> 		mov		esp, ebp
   418 00000F5F 5D                  <1> 		pop		ebp
   419                              <1> 
   420 00000F60 C3                  <1> 		ret
   421                              <1> 
   422                              <1> 
   423                              <1> ;************************************************************************
   424                              <1> ;	ビットパターンの書き込み
   425                              <1> ;========================================================================
   426                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   427                              <1> ;
   428                              <1> ;■引数
   429                              <1> ;	bit		: 出力ビットパターン
   430                              <1> ;	vram	: VRAMアドレス
   431                              <1> ;	flag	: 1:セット, 0:クリア
   432                              <1> ;
   433                              <1> ;■戻り値	: 無し
   434                              <1> ;************************************************************************
   435                              <1> vram_bit_copy:
   436                              <1> 		;---------------------------------------
   437                              <1> 		; 【スタックフレームの構築】
   438                              <1> 		;---------------------------------------
   439                              <1> 												; EBP+20| 色（背景/前景色）
   440                              <1> 												; EBP+16| プレーン（ビット指定）
   441                              <1> 												; EBP+12| VRAMアドレス
   442                              <1> 												; EBP+ 8| 出力ビットパターン
   443                              <1> 												; ------+----------------
   444 00000F61 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   445 00000F62 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   446                              <1> 												; ------+----------------
   447                              <1> 
   448                              <1> 		;---------------------------------------
   449                              <1> 		; 【レジスタの保存】
   450                              <1> 		;---------------------------------------
   451 00000F64 50                  <1> 		push	eax
   452 00000F65 53                  <1> 		push	ebx
   453 00000F66 57                  <1> 		push	edi
   454                              <1> 
   455                              <1> 		;---------------------------------------
   456                              <1> 		; 【処理の開始】
   457                              <1> 		;---------------------------------------
   458 00000F67 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   459 00000F6A 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   460 00000F6E 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   461                              <1> 
   462 00000F72 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   463 00000F74 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   464 00000F77 FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   465                              <1> 
   466                              <1> 		;---------------------------------------
   467                              <1> 		; マスクデータの作成
   468                              <1> 		;---------------------------------------
   469 00000F79 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   470 00000F7C 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   471 00000F7E F6D4                <1> 		not		ah								; 
   472                              <1> 
   473                              <1> 		;---------------------------------------
   474                              <1> 		; 現在値の出力を取得
   475                              <1> 		;---------------------------------------
   476 00000F80 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   477 00000F82 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   478 00000F84 08E0                <1> 		or		al, ah							; AL |= AH;
   479                              <1> 
   480                              <1> 		;---------------------------------------
   481                              <1> 		; 新しい値を出力
   482                              <1> 		;---------------------------------------
   483 00000F86 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   484                              <1> 
   485                              <1> 		;---------------------------------------
   486                              <1> 		; 【レジスタの復帰】
   487                              <1> 		;---------------------------------------
   488 00000F88 5F                  <1> 		pop		edi
   489 00000F89 5B                  <1> 		pop		ebx
   490 00000F8A 58                  <1> 		pop		eax
   491                              <1> 
   492                              <1> 		;---------------------------------------
   493                              <1> 		; 【スタックフレームの破棄】
   494                              <1> 		;---------------------------------------
   495 00000F8B 89EC                <1> 		mov		esp, ebp
   496 00000F8D 5D                  <1> 		pop		ebp
   497                              <1> 
   498 00000F8E C3                  <1> 		ret
   206                                  %include	"../modules/protect/draw_char.s"
   207                              <1> ;************************************************************************
   208                              <1> ;	文字の表示
   209                              <1> ;------------------------------------------------------------------------
   210                              <1> ;	グラフィックスモードでテキストを表示
   211                              <1> ;========================================================================
   212                              <1> ;■書式		: void draw_char(col, row, color, ch);
   213                              <1> ;
   214                              <1> ;■引数
   215                              <1> ;	col		: 列（0～79）
   216                              <1> ;	row		: 行（0～29）
   217                              <1> ;	color	: 描画色
   218                              <1> ;	ch		: 文字
   219                              <1> ;
   220                              <1> ;■戻り値	: 無し
   221                              <1> ;************************************************************************
   222                              <1> draw_char:
   223                              <1> 		;---------------------------------------
   224                              <1> 		; 【スタックフレームの構築】
   225                              <1> 		;---------------------------------------
   226                              <1> 												; ------|--------
   227                              <1> 												; EBP+20| 文字
   228                              <1> 												; EBP+16| 色
   229                              <1> 												; EBP+12| Y（行）
   230                              <1> 												; EBP+ 8| X（列）
   231                              <1> 												; ------+----------------
   232 00000F8F 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   233 00000F90 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   234                              <1> 												; ------+----------------
   235                              <1> 
   236                              <1> 		;---------------------------------------
   237                              <1> 		; 【レジスタの保存】
   238                              <1> 		;---------------------------------------
   239 00000F92 50                  <1> 		push	eax
   240 00000F93 53                  <1> 		push	ebx
   241 00000F94 51                  <1> 		push	ecx
   242 00000F95 52                  <1> 		push	edx
   243 00000F96 56                  <1> 		push	esi
   244 00000F97 57                  <1> 		push	edi
   245                              <1> 
   246                              <1> 		;---------------------------------------
   247                              <1> 		; テストアンドセット
   248                              <1> 		;---------------------------------------
   249                              <1> %ifdef	USE_TEST_AND_SET
   250 00000F98 68[6C100000]E89908- <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   250 00000FA0 00006683C404        <1>
   251                              <1> %endif
   252                              <1> 
   253                              <1> 		;---------------------------------------
   254                              <1> 		; コピー元フォントアドレスを設定
   255                              <1> 		;---------------------------------------
   256 00000FA6 0FB67514            <1> 		movzx	esi, byte [ebp +20]				; CL  = 文字コード;
   257 00000FAA C1E604              <1> 		shl		esi, 4							; CL *= 16; // 1文字16バイト
   258 00000FAD 0335[F8020000]      <1> 		add		esi, [FONT_ADR]					; ESI = フォントアドレス;
   259                              <1> 
   260                              <1> 		;---------------------------------------
   261                              <1> 		; コピー先アドレスを取得
   262                              <1> 		; Adr = 0xA0000 + (640 / 8 * 16) * y + x
   263                              <1> 		;---------------------------------------
   264 00000FB3 8B7D0C              <1> 		mov		edi, [ebp +12]					; Y（行）
   265 00000FB6 C1E708              <1> 		shl		edi, 8							; EDI = Y * 256;
   266 00000FB9 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA0000]	; EDI = Y *   4 + Y;
   267 00000FC0 037D08              <1> 		add		edi, [ebp + 8]					; X（列）
   268                              <1> 
   269                              <1> 		;---------------------------------------
   270                              <1> 		; 1文字分のフォントを出力
   271                              <1> 		;---------------------------------------
   272 00000FC3 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
   273                              <1> 
   274 00000FC7 6A03E80EFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
   274 00000FD0 C404                <1>
   275 00000FD2 6A08E81CFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
   275 00000FDB C404                <1>
   276 00000FDD 536A085756E827FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
   276 00000FE6 FF6683C410          <1>
   277                              <1> 
   278 00000FEB 6A02E8EAFEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
   278 00000FF4 C404                <1>
   279 00000FF6 6A04E8F8FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
   279 00000FFF C404                <1>
   280 00001001 536A045756E803FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
   280 0000100A FF6683C410          <1>
   281                              <1> 
   282 0000100F 6A01E8C6FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
   282 00001018 C404                <1>
   283 0000101A 6A02E8D4FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
   283 00001023 C404                <1>
   284 00001025 536A025756E8DFFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
   284 0000102E FF6683C410          <1>
   285                              <1> 
   286 00001033 6A00E8A2FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
   286 0000103C C404                <1>
   287 0000103E 6A01E8B0FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
   287 00001047 C404                <1>
   288 00001049 536A015756E8BBFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
   288 00001052 FF6683C410          <1>
   289                              <1> 
   290                              <1> %ifdef	USE_TEST_AND_SET
   291                              <1> 		;---------------------------------------
   292                              <1> 		; テストアンドセット
   293                              <1> 		;---------------------------------------
   294 00001057 C705[6C100000]0000- <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   294 0000105F 0000                <1>
   295                              <1> %endif
   296                              <1> 
   297                              <1> 		;---------------------------------------
   298                              <1> 		; 【レジスタの復帰】
   299                              <1> 		;---------------------------------------
   300 00001061 5F                  <1> 		pop		edi
   301 00001062 5E                  <1> 		pop		esi
   302 00001063 5A                  <1> 		pop		edx
   303 00001064 59                  <1> 		pop		ecx
   304 00001065 5B                  <1> 		pop		ebx
   305 00001066 58                  <1> 		pop		eax
   306                              <1> 
   307                              <1> 		;---------------------------------------
   308                              <1> 		; 【スタックフレームの破棄】
   309                              <1> 		;---------------------------------------
   310 00001067 89EC                <1> 		mov		esp, ebp
   311 00001069 5D                  <1> 		pop		ebp
   312                              <1> 
   313 0000106A C3                  <1> 		ret
   314                              <1> 
   315                              <1> %ifdef USE_TEST_AND_SET
   316 0000106B 00                  <1> ALIGN 4, db 0
   317 0000106C 00000000            <1> IN_USE:	dd	0
   318                              <1> %endif
   319                              <1> 
   207                                  %include	"../modules/protect/draw_font.s"
   208                              <1> ;************************************************************************
   209                              <1> ;	フォント一覧を表示
   210                              <1> ;========================================================================
   211                              <1> ;■書式		: void draw_font(col, row);
   212                              <1> ;
   213                              <1> ;■引数
   214                              <1> ;	col		: 列
   215                              <1> ;	row		: 行
   216                              <1> ;
   217                              <1> ;■戻り値	: 無し
   218                              <1> ;************************************************************************
   219                              <1> draw_font:
   220                              <1> 		;---------------------------------------
   221                              <1> 		; 【スタックフレームの構築】
   222                              <1> 		;---------------------------------------
   223                              <1> 												; ------|--------
   224                              <1> 												; EBP+12| Y（行）
   225                              <1> 												; EBP+ 8| X（列）
   226                              <1> 												; ---------------
   227 00001070 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   228 00001071 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   229                              <1> 												; ---------------
   230                              <1> 
   231                              <1> 		;---------------------------------------
   232                              <1> 		; 【レジスタの保存】
   233                              <1> 		;---------------------------------------
   234 00001073 50                  <1> 		push	eax
   235 00001074 53                  <1> 		push	ebx
   236 00001075 51                  <1> 		push	ecx
   237 00001076 52                  <1> 		push	edx
   238 00001077 56                  <1> 		push	esi
   239 00001078 57                  <1> 		push	edi
   240                              <1> 
   241                              <1> 		;---------------------------------------
   242                              <1> 		; 表示位置
   243                              <1> 		;---------------------------------------
   244 00001079 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   245 0000107C 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   246                              <1> 
   247                              <1> 		;---------------------------------------
   248                              <1> 		; フォント一覧を表示
   249                              <1> 		;---------------------------------------
   250 0000107F B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   251 00001084 81F900010000        <1> .10L:	cmp		ecx, 256						;      ECX < 256;
   252 0000108A 731F                <1> 		jae		.10E							; 
   253                              <1> 												;      ECX++)
   254                              <1> 												; {
   255                              <1> 												;   // 桁位置の計算
   256 0000108C 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   257 0000108E 83E00F              <1> 		and		eax, 0x0F						;   EAX &= 0x0F
   258 00001091 01F0                <1> 		add		eax, esi						;   EAX += X;
   259                              <1> 												;   
   260                              <1> 												;   // 行位置の計算
   261 00001093 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   262 00001095 C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
   263 00001098 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   264                              <1> 
   265 0000109A 516A075350E8EBFEFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
   265 000010A3 FF6683C410          <1>
   266                              <1> 
   267 000010A8 41                  <1> 		inc		ecx								;   // for (... ECX++)
   268 000010A9 EBD9                <1> 		jmp		.10L							; 
   269                              <1> .10E:											; }
   270                              <1> 
   271                              <1> 		;---------------------------------------
   272                              <1> 		; 【レジスタの復帰】
   273                              <1> 		;---------------------------------------
   274 000010AB 5F                  <1> 		pop		edi
   275 000010AC 5E                  <1> 		pop		esi
   276 000010AD 5A                  <1> 		pop		edx
   277 000010AE 59                  <1> 		pop		ecx
   278 000010AF 5B                  <1> 		pop		ebx
   279 000010B0 58                  <1> 		pop		eax
   280                              <1> 
   281                              <1> 		;---------------------------------------
   282                              <1> 		; 【スタックフレームの破棄】
   283                              <1> 		;---------------------------------------
   284 000010B1 89EC                <1> 		mov		esp, ebp
   285 000010B3 5D                  <1> 		pop		ebp
   286                              <1> 
   287 000010B4 C3                  <1> 		ret
   288                              <1> 
   208                                  %include	"../modules/protect/draw_str.s"
   209                              <1> ;************************************************************************
   210                              <1> ;	文字列の表示
   211                              <1> ;========================================================================
   212                              <1> ;■書式		: void draw_str(col, row, color, p);
   213                              <1> ;
   214                              <1> ;■引数
   215                              <1> ;	col		: 列
   216                              <1> ;	row		: 行
   217                              <1> ;	color	: 描画色
   218                              <1> ;	p		: 文字列のアドレス
   219                              <1> ;
   220                              <1> ;■戻り値	: 無し
   221                              <1> ;************************************************************************
   222                              <1> draw_str:
   223                              <1> 		;---------------------------------------
   224                              <1> 		; 【スタックフレームの構築】
   225                              <1> 		;---------------------------------------
   226                              <1> 												; ------|--------
   227                              <1> 												; EBP+20| *p（文字列のアドレス）
   228                              <1> 												; EBP+16| color（色）
   229                              <1> 												; EBP+12| row（行）
   230                              <1> 												; EBP+ 8| col（列）
   231                              <1> 												; ---------------
   232 000010B5 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   233 000010B6 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   234                              <1> 												; ---------------
   235                              <1> 
   236                              <1> 		;---------------------------------------
   237                              <1> 		; 【レジスタの保存】
   238                              <1> 		;---------------------------------------
   239 000010B8 50                  <1> 		push	eax
   240 000010B9 53                  <1> 		push	ebx
   241 000010BA 51                  <1> 		push	ecx
   242 000010BB 52                  <1> 		push	edx
   243 000010BC 56                  <1> 		push	esi
   244                              <1> 
   245                              <1> 		;---------------------------------------
   246                              <1> 		; 文字列の表示
   247                              <1> 		;---------------------------------------
   248 000010BD 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
   249 000010C0 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
   250 000010C3 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
   251 000010C7 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
   252                              <1> 
   253 000010CA FC                  <1> 		cld										; DF = 0; // アドレス加算
   254                              <1> .10L:											; do
   255                              <1> 												; {
   256 000010CB AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
   257 000010CC 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   258 000010CE 741A                <1> 		je		.10E							;     break;
   259                              <1> 
   260                              <1> 		;---------------------------------------
   261                              <1> 		; 1文字表示
   262                              <1> 		;---------------------------------------
   263                              <1> %ifdef	USE_SYSTEM_CALL
   264 000010D0 CD81                <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
   265                              <1> %else
   266                              <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
   267                              <1> %endif
   268                              <1> 
   269                              <1> 		; 次の文字の位置を調整
   270 000010D2 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
   271 000010D3 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
   272 000010D6 7C10                <1> 		jl		.12E							;   {
   273 000010D8 B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
   274 000010DD 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
   275 000010DE 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
   276 000010E1 7C05                <1> 		jl		.12E							;     {
   277 000010E3 BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
   278                              <1> 												;     }
   279                              <1> .12E:											;   }
   280 000010E8 EBE1                <1> 		jmp		.10L							;   
   281                              <1> .10E:											; } while (1);
   282                              <1> 
   283                              <1> 		;---------------------------------------
   284                              <1> 		; 【レジスタの復帰】
   285                              <1> 		;---------------------------------------
   286 000010EA 5E                  <1> 		pop		esi
   287 000010EB 5A                  <1> 		pop		edx
   288 000010EC 59                  <1> 		pop		ecx
   289 000010ED 5B                  <1> 		pop		ebx
   290 000010EE 58                  <1> 		pop		eax
   291                              <1> 
   292                              <1> 		;---------------------------------------
   293                              <1> 		; 【スタックフレームの破棄】
   294                              <1> 		;---------------------------------------
   295 000010EF 89EC                <1> 		mov		esp, ebp
   296 000010F1 5D                  <1> 		pop		ebp
   297                              <1> 
   298 000010F2 C3                  <1> 		ret
   299                              <1> 
   209                                  %include	"../modules/protect/draw_color_bar.s"
   210                              <1> ;************************************************************************
   211                              <1> ;	カラーバーの表示
   212                              <1> ;========================================================================
   213                              <1> ;■書式		: void draw_color_bar(col, row);
   214                              <1> ;
   215                              <1> ;■引数
   216                              <1> ;	col		: 列
   217                              <1> ;	row		: 行
   218                              <1> ;
   219                              <1> ;■戻り値	: 無し
   220                              <1> ;************************************************************************
   221                              <1> draw_color_bar:
   222                              <1> 		;---------------------------------------
   223                              <1> 		; 【スタックフレームの構築】
   224                              <1> 		;---------------------------------------
   225                              <1> 												; ------|--------
   226                              <1> 												; EBP+ 8| X（列）
   227                              <1> 												; EBP+12| Y（行）
   228                              <1> 												; ---------------
   229 000010F3 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   230 000010F4 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   231                              <1> 												; ---------------
   232                              <1> 		;---------------------------------------
   233                              <1> 		; 【レジスタの保存】
   234                              <1> 		;---------------------------------------
   235 000010F6 50                  <1> 		push	eax
   236 000010F7 53                  <1> 		push	ebx
   237 000010F8 51                  <1> 		push	ecx
   238 000010F9 52                  <1> 		push	edx
   239 000010FA 56                  <1> 		push	esi
   240 000010FB 57                  <1> 		push	edi
   241                              <1> 
   242                              <1> 		;---------------------------------------
   243                              <1> 		; 表示位置
   244                              <1> 		;---------------------------------------
   245 000010FC 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   246 000010FF 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   247                              <1> 
   248                              <1> 		;---------------------------------------
   249                              <1> 		; カラーバーを表示
   250                              <1> 		;---------------------------------------
   251 00001102 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   252 00001107 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
   253 0000110A 732E                <1> 		jae		.10E							; 
   254                              <1> 												;      ECX++)
   255                              <1> 												; {
   256                              <1> 												;   // 桁位置の計算
   257 0000110C 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   258 0000110E 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
   259 00001111 C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
   260 00001114 01F0                <1> 		add		eax, esi						;   EAX += X;
   261                              <1> 												;   
   262                              <1> 												;   // 行位置の計算
   263 00001116 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   264 00001118 D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
   265 0000111A 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   266                              <1> 												;   
   267                              <1> 												;   // 表示色の取得
   268 0000111C 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
   269 0000111E D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
   270 00001120 8B92[4D110000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
   271                              <1> 
   272 00001126 68[44110000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
   272 0000112E E882FFFFFF6683C410  <1>
   273                              <1> 
   274 00001137 41                  <1> 		inc		ecx								;   // for (... ECX++)
   275 00001138 EBCD                <1> 		jmp		.10L							; 
   276                              <1> .10E:											; }
   277                              <1> 
   278                              <1> 		;---------------------------------------
   279                              <1> 		; 【レジスタの復帰】
   280                              <1> 		;---------------------------------------
   281 0000113A 5F                  <1> 		pop		edi
   282 0000113B 5E                  <1> 		pop		esi
   283 0000113C 5A                  <1> 		pop		edx
   284 0000113D 59                  <1> 		pop		ecx
   285 0000113E 5B                  <1> 		pop		ebx
   286 0000113F 58                  <1> 		pop		eax
   287                              <1> 
   288                              <1> 		;---------------------------------------
   289                              <1> 		; 【スタックフレームの破棄】
   290                              <1> 		;---------------------------------------
   291 00001140 89EC                <1> 		mov		esp, ebp
   292 00001142 5D                  <1> 		pop		ebp
   293                              <1> 
   294 00001143 C3                  <1> 		ret
   295                              <1> 
   296 00001144 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
   297                              <1> 
   298 0000114D 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
   299 00001151 00010009            <1> 		dw	0x0100, 0x0900
   300 00001155 0002000A            <1> 		dw	0x0200, 0x0A00
   301 00001159 0003000B            <1> 		dw	0x0300, 0x0B00
   302 0000115D 0004000C            <1> 		dw	0x0400, 0x0C00
   303 00001161 0005000D            <1> 		dw	0x0500, 0x0D00
   304 00001165 0006000E            <1> 		dw	0x0600, 0x0E00
   305 00001169 0007000F            <1> 		dw	0x0700, 0x0F00
   306                              <1> 
   210                                  %include	"../modules/protect/draw_pixel.s"
   211                              <1> ;************************************************************************
   212                              <1> ;	ピクセルの描画
   213                              <1> ;========================================================================
   214                              <1> ;■書式		: void draw_pixel(X, Y, color);
   215                              <1> ;
   216                              <1> ;■引数
   217                              <1> ;	X		: X座標
   218                              <1> ;	Y		: Y座標
   219                              <1> ;	color	: 描画色
   220                              <1> ;
   221                              <1> ;■戻り値	: 無し
   222                              <1> ;************************************************************************
   223                              <1> draw_pixel:
   224                              <1> 		;---------------------------------------
   225                              <1> 		; 【スタックフレームの構築】
   226                              <1> 		;---------------------------------------
   227                              <1> 												; ------|--------
   228                              <1> 												; EBP+16| 色
   229                              <1> 												; EBP+12| Y
   230                              <1> 												; EBP+ 8| X
   231                              <1> 												; ------|--------
   232 0000116D 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   233 0000116E 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   234                              <1> 												; ------+--------
   235                              <1> 		;---------------------------------------
   236                              <1> 		; 【レジスタの保存】
   237                              <1> 		;---------------------------------------
   238 00001170 50                  <1> 		push	eax
   239 00001171 53                  <1> 		push	ebx
   240 00001172 51                  <1> 		push	ecx
   241 00001173 57                  <1> 		push	edi
   242                              <1> 
   243                              <1> 		;---------------------------------------
   244                              <1> 		; Y座標を80倍する（640/8）
   245                              <1> 		;---------------------------------------
   246 00001174 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI  = Y座標
   247 00001177 C1E704              <1> 		shl		edi, 4							; EDI *= 16;
   248 0000117A 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA_0000]	; EDI  = 0xA00000[EDI * 4 + EDI];
   249                              <1> 
   250                              <1> 		;---------------------------------------
   251                              <1> 		; X座標を1/8して加算
   252                              <1> 		;---------------------------------------
   253 00001181 8B5D08              <1> 		mov		ebx, [ebp + 8]					; EBX  = X座標;
   254 00001184 89D9                <1> 		mov		ecx, ebx						; ECX  = X座標;（一時保存）
   255 00001186 C1EB03              <1> 		shr		ebx, 3							; EBX /= 8;
   256 00001189 01DF                <1> 		add		edi, ebx						; EDI += EBX;
   257                              <1> 
   258                              <1> 		;---------------------------------------
   259                              <1> 		; X座標を8で割った余りからビット位置を計算
   260                              <1> 		; (0=0x80, 1=0x40,... 7=0x01)
   261                              <1> 		;---------------------------------------
   262 0000118B 83E107              <1> 		and		ecx, 0x07						; ECX = X & 0x07;
   263 0000118E BB80000000          <1> 		mov		ebx, 0x80						; EBX = 0x80;
   264 00001193 D3EB                <1> 		shr		ebx, cl							; EBX >>= ECX;
   265                              <1> 
   266                              <1> 		;---------------------------------------
   267                              <1> 		; 色指定
   268                              <1> 		;---------------------------------------
   269 00001195 8B4D10              <1> 		mov		ecx, [ebp +16]					; // 表示色
   270                              <1> 
   271                              <1> %ifdef	USE_TEST_AND_SET
   272 00001198 68[6C100000]E89906- <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   272 000011A0 00006683C404        <1>
   273                              <1> %endif
   274                              <1> 
   275                              <1> 		;---------------------------------------
   276                              <1> 		; プレーン毎に出力
   277                              <1> 		;---------------------------------------
   278 000011A6 6A03E82FFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 輝度(I)プレーンを選択
   278 000011AF C404                <1>
   279 000011B1 6A08E83DFDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 輝度(I)プレーンを選択
   279 000011BA C404                <1>
   280 000011BC 516A085753E89BFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
   280 000011C5 FF6683C410          <1>
   281                              <1> 
   282 000011CA 6A02E80BFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 赤(R)プレーンを選択
   282 000011D3 C404                <1>
   283 000011D5 6A04E819FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 赤(R)プレーンを選択
   283 000011DE C404                <1>
   284 000011E0 516A045753E877FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
   284 000011E9 FF6683C410          <1>
   285                              <1> 
   286 000011EE 6A01E8E7FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 緑(G)プレーンを選択
   286 000011F7 C404                <1>
   287 000011F9 6A02E8F5FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 緑(G)プレーンを選択
   287 00001202 C404                <1>
   288 00001204 516A025753E853FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
   288 0000120D FF6683C410          <1>
   289                              <1> 
   290 00001212 6A00E8C3FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 青(B)プレーンを選択
   290 0000121B C404                <1>
   291 0000121D 6A01E8D1FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 青(B)プレーンを選択
   291 00001226 C404                <1>
   292 00001228 516A015753E82FFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
   292 00001231 FF6683C410          <1>
   293                              <1> 
   294                              <1> 
   295                              <1> %ifdef	USE_TEST_AND_SET
   296                              <1> 		;---------------------------------------
   297                              <1> 		; テストアンドセット
   298                              <1> 		;---------------------------------------
   299 00001236 C705[6C100000]0000- <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   299 0000123E 0000                <1>
   300                              <1> %endif
   301                              <1> 
   302                              <1> 		;---------------------------------------
   303                              <1> 		; 【レジスタの復帰】
   304                              <1> 		;---------------------------------------
   305 00001240 5F                  <1> 		pop		edi
   306 00001241 59                  <1> 		pop		ecx
   307 00001242 5B                  <1> 		pop		ebx
   308 00001243 58                  <1> 		pop		eax
   309                              <1> 
   310                              <1> 		;---------------------------------------
   311                              <1> 		; 【スタックフレームの破棄】
   312                              <1> 		;---------------------------------------
   313 00001244 89EC                <1> 		mov		esp, ebp
   314 00001246 5D                  <1> 		pop		ebp
   315                              <1> 
   316 00001247 C3                  <1> 		ret
   317                              <1> 
   211                                  %include	"../modules/protect/draw_line.s"
   212                              <1> ;************************************************************************
   213                              <1> ;	直線の描画
   214                              <1> ;========================================================================
   215                              <1> ;■書式		: void draw_line(X0, Y0, X1, Y1, color);
   216                              <1> ;
   217                              <1> ;■引数
   218                              <1> ;	X0		: 始点のX座標
   219                              <1> ;	Y0		: 始点のY座標
   220                              <1> ;	X1		: 終点のX座標
   221                              <1> ;	Y1		: 終点のY座標
   222                              <1> ;	color	: 描画色
   223                              <1> ;
   224                              <1> ;■戻り値	: 無し
   225                              <1> ;************************************************************************
   226                              <1> draw_line:
   227                              <1> 		;---------------------------------------
   228                              <1> 		; 【スタックフレームの構築】
   229                              <1> 		;---------------------------------------
   230                              <1> 												; ---------------
   231                              <1> 												;    +24| 色
   232                              <1> 												;    +20| Y1
   233                              <1> 												;    +16| X1
   234                              <1> 												;    +12| Y0
   235                              <1> 												;    + 8| X0
   236                              <1> 												; ---------------
   237 00001248 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   238 00001249 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   239                              <1> 												; ---------------
   240 0000124B 6A00                <1> 		push	dword 0							;    - 4| sum   = 0; // 相対軸の積算値
   241 0000124D 6A00                <1> 		push	dword 0							;    - 8| x0    = 0; // X座標
   242 0000124F 6A00                <1> 		push	dword 0							;    -12| dx    = 0; // X増分
   243 00001251 6A00                <1> 		push	dword 0							;    -16| inc_x = 0; // X座標増分(1 or -1)
   244 00001253 6A00                <1> 		push	dword 0							;    -20| y0    = 0; // Y座標
   245 00001255 6A00                <1> 		push	dword 0							;    -24| dy    = 0; // Y増分
   246 00001257 6A00                <1> 		push	dword 0							;    -28| inc_y = 0; // Y座標増分(1 or -1)
   247                              <1> 												; ------|--------
   248                              <1> 
   249                              <1> 		;---------------------------------------
   250                              <1> 		; 【レジスタの保存】
   251                              <1> 		;---------------------------------------
   252 00001259 50                  <1> 		push	eax
   253 0000125A 53                  <1> 		push	ebx
   254 0000125B 51                  <1> 		push	ecx
   255 0000125C 52                  <1> 		push	edx
   256 0000125D 56                  <1> 		push	esi
   257 0000125E 57                  <1> 		push	edi
   258                              <1> 
   259                              <1> 		;---------------------------------------
   260                              <1> 		; 幅を計算（X軸）
   261                              <1> 		;---------------------------------------
   262 0000125F 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   263 00001262 8B5D10              <1> 		mov		ebx, [ebp +16]					; EBX = X1;
   264 00001265 29C3                <1> 		sub		ebx, eax						; EBX = X1 - X0; // 幅
   265 00001267 7D09                <1> 		jge		.10F							; if (幅 < 0)
   266                              <1> 												; {
   267 00001269 F7DB                <1> 		neg		ebx								;   幅   *= -1;
   268 0000126B BEFFFFFFFF          <1> 		mov		esi, -1							;   // X座標の増分
   269 00001270 EB05                <1> 		jmp		.10E							; }
   270                              <1> .10F:											; else
   271                              <1> 												; {
   272 00001272 BE01000000          <1> 		mov		esi, 1							;   // X座標の増分
   273                              <1> .10E:											; }
   274                              <1> 
   275                              <1> 		;---------------------------------------
   276                              <1> 		; 高さを計算（Y軸）
   277                              <1> 		;---------------------------------------
   278 00001277 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX = Y0
   279 0000127A 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1
   280 0000127D 29CA                <1> 		sub		edx, ecx						; EDX = Y1 - Y0; // 高さ
   281 0000127F 7D09                <1> 		jge		.20F							; if (高さ < 0)
   282                              <1> 												; {
   283 00001281 F7DA                <1> 		neg		edx								;   高さ *= -1;
   284 00001283 BFFFFFFFFF          <1> 		mov		edi, -1							;   // Y座標の増分
   285 00001288 EB05                <1> 		jmp		.20E							; }
   286                              <1> .20F:											; else
   287                              <1> 												; {
   288 0000128A BF01000000          <1> 		mov		edi, 1							;   // Y座標の増分
   289                              <1> .20E:											; }
   290                              <1> 
   291                              <1> 		;---------------------------------------
   292                              <1> 		; X軸
   293                              <1> 		;---------------------------------------
   294 0000128F 8945F8              <1> 		mov		[ebp - 8], eax					;   // X軸:開始座標
   295 00001292 895DF4              <1> 		mov		[ebp -12], ebx					;   // X軸:描画幅
   296 00001295 8975F0              <1> 		mov		[ebp -16], esi					;   // X軸:増分(基準軸：1 or -1)
   297                              <1> 
   298                              <1> 		;---------------------------------------
   299                              <1> 		; Y軸
   300                              <1> 		;---------------------------------------
   301 00001298 894DEC              <1> 		mov		[ebp -20], ecx					;   // Y軸:開始座標
   302 0000129B 8955E8              <1> 		mov		[ebp -24], edx					;   // Y軸:描画幅
   303 0000129E 897DE4              <1> 		mov		[ebp -28], edi					;   // Y軸:増分(基準軸：1 or -1)
   304                              <1> 
   305                              <1> 		;---------------------------------------
   306                              <1> 		; 基準軸を決める
   307                              <1> 		;---------------------------------------
   308 000012A1 39D3                <1> 		cmp		ebx, edx						; if (幅 <= 高さ)
   309 000012A3 7F08                <1> 		jg		.22F							; {
   310                              <1> 												;   
   311 000012A5 8D75EC              <1> 		lea		esi, [ebp -20]					;   // Y軸が基準軸
   312 000012A8 8D7DF8              <1> 		lea		edi, [ebp - 8]					;   // X軸が相対軸
   313                              <1> 												;   
   314 000012AB EB06                <1> 		jmp		.22E							; }
   315                              <1> .22F:											; else
   316                              <1> 												; {
   317 000012AD 8D75F8              <1> 		lea		esi, [ebp - 8]					;   // X軸が基準軸
   318 000012B0 8D7DEC              <1> 		lea		edi, [ebp -20]					;   // Y軸が相対軸
   319                              <1> .22E:											; }
   320                              <1> 
   321                              <1> 		;---------------------------------------
   322                              <1> 		; 繰り返し回数(基準軸のドット数)
   323                              <1> 		;---------------------------------------
   324 000012B3 8B4EFC              <1> 		mov		ecx, [esi - 4]					; ECX = 基準軸描画幅;
   325 000012B6 83F900              <1> 		cmp		ecx, 0							; if (0 == ECX)
   326 000012B9 7505                <1> 		jnz		.30E							; {
   327 000012BB B901000000          <1> 		mov		ecx, 1							;   ECX = 1;
   328                              <1> .30E:											; }
   329                              <1> 
   330                              <1> 		;---------------------------------------
   331                              <1> 		; 線を描画
   332                              <1> 		;---------------------------------------
   333                              <1> .50L:											; do
   334                              <1> 												; {
   335                              <1> %ifdef	USE_SYSTEM_CALL
   336 000012C0 89C8                <1> 		mov		eax, ecx						;   // 繰り返し回数を保存
   337                              <1> 
   338 000012C2 8B5D18              <1> 		mov		ebx, [ebp +24]					;   EBX = 表示色;
   339 000012C5 8B4DF8              <1> 		mov		ecx, [ebp - 8]					;   ECX = X座標;
   340 000012C8 8B55EC              <1> 		mov		edx, [ebp -20]					;   EDX = Y座標;
   341 000012CB CD82                <1> 		int		0x82							;   sys_call(1, X, Y, 色, 文字); BX(C), CX(X), DX(Y)
   342                              <1> 
   343 000012CD 89C1                <1> 		mov		ecx, eax
   344                              <1> %else
   345                              <1> 		cdecl	draw_pixel, dword [ebp - 8], 							dword [ebp -20], 							dword [ebp +24]		;   // 点の描画
   348                              <1> %endif
   349                              <1> 												;   // 基準軸を更新(1ドット分)
   350 000012CF 8B46F8              <1> 		mov		eax, [esi - 8]					;   EAX = 基準軸増分(1 or -1);
   351 000012D2 0106                <1> 		add		[esi - 0], eax					;   
   352                              <1> 
   353                              <1> 												;   // 相対軸を更新
   354 000012D4 8B45FC              <1> 		mov		eax, [ebp - 4]					;   EAX  = sum; // 相対軸の積算値;
   355 000012D7 0347FC              <1> 		add		eax, [edi - 4]					;   EAX += dy;  // 増分(相対軸の描画幅)
   356 000012DA 8B5EFC              <1> 		mov		ebx, [esi - 4]					;   EBX  = dx;  // 増分(基準軸の描画幅)
   357                              <1> 
   358 000012DD 39D8                <1> 		cmp		eax, ebx						;   if (積算値 <= 相対軸の増分)
   359 000012DF 7C07                <1> 		jl		.52E							;   {
   360 000012E1 29D8                <1> 		sub		eax, ebx						;     EAX -= EBX; // 積算値から相対軸の増分を減算
   361                              <1> 												;     
   362                              <1> 												;     // 相対軸の座標を更新(1ドット分)
   363 000012E3 8B5FF8              <1> 		mov		ebx, [edi - 8]					;     EBX =  相対軸増分;
   364 000012E6 011F                <1> 		add		[edi - 0], ebx					;     
   365                              <1> .52E:											;   }
   366 000012E8 8945FC              <1> 		mov		[ebp - 4], eax					;   // 積算値を更新
   367                              <1> 												;   
   368 000012EB E2D3                <1> 		loop	.50L							;   
   369                              <1> .50E:											; } while (ループ回数--);
   370                              <1> 
   371                              <1> 		;---------------------------------------
   372                              <1> 		; 【レジスタの復帰】
   373                              <1> 		;---------------------------------------
   374 000012ED 5F                  <1> 		pop		edi
   375 000012EE 5E                  <1> 		pop		esi
   376 000012EF 5A                  <1> 		pop		edx
   377 000012F0 59                  <1> 		pop		ecx
   378 000012F1 5B                  <1> 		pop		ebx
   379 000012F2 58                  <1> 		pop		eax
   380                              <1> 
   381                              <1> 		;---------------------------------------
   382                              <1> 		; 【スタックフレームの破棄】
   383                              <1> 		;---------------------------------------
   384 000012F3 89EC                <1> 		mov		esp, ebp
   385 000012F5 5D                  <1> 		pop		ebp
   386                              <1> 
   387 000012F6 C3                  <1> 		ret
   388                              <1> 
   212                                  %include	"../modules/protect/draw_rect.s"
   213                              <1> ;************************************************************************
   214                              <1> ;	矩形の描画
   215                              <1> ;========================================================================
   216                              <1> ;■書式		: void draw_rect(X0, Y0, X1, Y1, color);
   217                              <1> ;
   218                              <1> ;■引数
   219                              <1> ;	X0		: 始点のX座標
   220                              <1> ;	Y0		: 始点のY座標
   221                              <1> ;	X1		: 終点のX座標
   222                              <1> ;	Y1		: 終点のY座標
   223                              <1> ;	color	: 描画色
   224                              <1> ;
   225                              <1> ;■戻り値	: 無し
   226                              <1> ;************************************************************************
   227                              <1> draw_rect:
   228                              <1> 		;---------------------------------------
   229                              <1> 		; 【スタックフレームの構築】
   230                              <1> 		;---------------------------------------
   231                              <1> 												; ------|--------
   232                              <1> 												; EBP+24| 色
   233                              <1> 												; EBP+20| Y1
   234                              <1> 												; EBP+16| X1
   235                              <1> 												; EBP+12| Y0
   236                              <1> 												; EBP+ 8| X0
   237                              <1> 												; ---------------
   238 000012F7 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   239 000012F8 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   240                              <1> 												; ------|--------
   241                              <1> 
   242                              <1> 		;---------------------------------------
   243                              <1> 		; 【レジスタの保存】
   244                              <1> 		;---------------------------------------
   245 000012FA 50                  <1> 		push		eax
   246 000012FB 53                  <1> 		push		ebx
   247 000012FC 51                  <1> 		push		ecx
   248 000012FD 52                  <1> 		push		edx
   249 000012FE 56                  <1> 		push		esi
   250                              <1> 
   251                              <1> 		;---------------------------------------
   252                              <1> 		; 矩形を描画
   253                              <1> 		;---------------------------------------
   254 000012FF 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   255 00001302 8B5D0C              <1> 		mov		ebx, [ebp +12]					; EBX = Y0;
   256 00001305 8B4D10              <1> 		mov		ecx, [ebp +16]					; ECX = X1;
   257 00001308 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1;
   258 0000130B 8B7518              <1> 		mov		esi, [ebp +24]					; ESI = 色;
   259                              <1> 
   260                              <1> 		;---------------------------------------
   261                              <1> 		; 座標軸の大小を確定
   262                              <1> 		;---------------------------------------
   263 0000130E 39C8                <1> 		cmp		eax, ecx						; if (X1 < X0)
   264 00001310 7C01                <1> 		jl		.10E							; {
   265 00001312 91                  <1> 		xchg	eax, ecx						;   X0とX1を入れ替える;
   266                              <1> .10E:											; }
   267                              <1> 
   268 00001313 39D3                <1> 		cmp		ebx, edx						; if (Y1 < Y0)
   269 00001315 7C02                <1> 		jl		.20E							; {
   270 00001317 87DA                <1> 		xchg	ebx, edx						;   Y0とY1を入れ替える;
   271                              <1> .20E:											; }
   272                              <1> 
   273                              <1> 		;---------------------------------------
   274                              <1> 		; 矩形を描画
   275                              <1> 		;---------------------------------------
   276 00001319 5653515350E825FFFF- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, esi	; 上線
   276 00001322 FF6683C414          <1>
   277 00001327 5652505350E817FFFF- <1> 		cdecl	draw_line, eax, ebx, eax, edx, esi	; 左線
   277 00001330 FF6683C414          <1>
   278                              <1> 
   279 00001335 4A                  <1> 		dec		edx									; EDX--; // 下線は1ドット上げる
   280 00001336 5652515250E808FFFF- <1> 		cdecl	draw_line, eax, edx, ecx, edx, esi	; 下線
   280 0000133F FF6683C414          <1>
   281 00001344 42                  <1> 		inc		edx
   282                              <1> 
   283 00001345 49                  <1> 		dec		ecx									; ECX--; // 右線は1ドット左に移動
   284 00001346 5652515351E8F8FEFF- <1> 		cdecl	draw_line, ecx, ebx, ecx, edx, esi	; 右線
   284 0000134F FF6683C414          <1>
   285                              <1> 
   286                              <1> 		;---------------------------------------
   287                              <1> 		; 【レジスタの復帰】
   288                              <1> 		;---------------------------------------
   289 00001354 5E                  <1> 		pop		esi
   290 00001355 5A                  <1> 		pop		edx
   291 00001356 59                  <1> 		pop		ecx
   292 00001357 5B                  <1> 		pop		ebx
   293 00001358 58                  <1> 		pop		eax
   294                              <1> 
   295                              <1> 		;---------------------------------------
   296                              <1> 		; 【スタックフレームの破棄】
   297                              <1> 		;---------------------------------------
   298 00001359 89EC                <1> 		mov		esp, ebp
   299 0000135B 5D                  <1> 		pop		ebp
   300                              <1> 
   301 0000135C C3                  <1> 		ret
   213                                  %include	"../modules/protect/itoa.s"
   214                              <1> ;************************************************************************
   215                              <1> ;	数値を文字に変換
   216                              <1> ;========================================================================
   217                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
   218                              <1> ;
   219                              <1> ;■引数
   220                              <1> ;	num		: 変換する数値
   221                              <1> ;	buff	: 保存先バッファアドレス
   222                              <1> ;	size	: 保存先バッファサイズ
   223                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
   224                              <1> ;	flags	: フラグ
   225                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
   226                              <1> ;			:      : 0=空白を' '（スペース）で埋める
   227                              <1> ;			:   B1 : 1=＋/-符号を表示する
   228                              <1> ;			:      : 0=＋/-符号を表示しない
   229                              <1> ;			:   B0 : 1=符号付き正数として扱う
   230                              <1> ;			:      : 0=符号無し正数として扱う
   231                              <1> ;
   232                              <1> ;■戻り値	: 無し
   233                              <1> ;************************************************************************
   234                              <1> itoa:
   235                              <1> 		;---------------------------------------
   236                              <1> 		; 【スタックフレームの構築】
   237                              <1> 		;---------------------------------------
   238                              <1> 												; ------|--------
   239                              <1> 												;    +24| フラグ
   240                              <1> 												;    +20| 基数
   241                              <1> 												;    +16| バッファサイズ
   242                              <1> 												;    +12| バッファアドレス
   243                              <1> 												;    + 8| 数値
   244                              <1> 												; ------|--------
   245                              <1> 												;    + 4| EIP（戻り番地）
   246 0000135D 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   247 0000135E 89E5                <1> 		mov		ebp, esp						; ------+--------
   248                              <1> 
   249                              <1> 		;---------------------------------------
   250                              <1> 		; 【レジスタの保存】
   251                              <1> 		;---------------------------------------
   252 00001360 50                  <1> 		push	eax
   253 00001361 53                  <1> 		push	ebx
   254 00001362 51                  <1> 		push	ecx
   255 00001363 52                  <1> 		push	edx
   256 00001364 56                  <1> 		push	esi
   257 00001365 57                  <1> 		push	edi
   258                              <1> 
   259                              <1> 		;---------------------------------------
   260                              <1> 		; 引数を取得
   261                              <1> 		;---------------------------------------
   262 00001366 8B4508              <1> 		mov		eax, [ebp + 8]					; val  = 数値;
   263 00001369 8B750C              <1> 		mov		esi, [ebp +12]					; dst  = バッファアドレス;
   264 0000136C 8B4D10              <1> 		mov		ecx, [ebp +16]					; size = 残りバッファサイズ;
   265                              <1> 
   266 0000136F 89F7                <1> 		mov		edi, esi						; // バッファの最後尾
   267 00001371 01CF                <1> 		add		edi, ecx						; dst  = &dst[size - 1];
   268 00001373 4F                  <1> 		dec		edi								; 
   269                              <1> 
   270 00001374 8B5D18              <1> 		mov		ebx, [ebp +24]					; flags = オプション;
   271                              <1> 
   272                              <1> 		;---------------------------------------
   273                              <1> 		; 符号付き判定
   274                              <1> 		;---------------------------------------
   275 00001377 F7C301000000        <1> 		test	ebx, 0b0001						; if (flags & 0x01)// 符号付き
   276 0000137D 7408                <1> .10Q:	je		.10E							; {
   277 0000137F 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   278 00001382 7D03                <1> .12Q:	jge		.12E							;   {
   279 00001384 83CB02              <1> 		or		ebx, 0b0010						;     flags |=  2; // 符号表示
   280                              <1> .12E:											;   }
   281                              <1> .10E:											; }
   282                              <1> 
   283                              <1> 		;---------------------------------------
   284                              <1> 		; 符号出力判定
   285                              <1> 		;---------------------------------------
   286 00001387 F7C302000000        <1> 		test	ebx, 0b0010						; if (flags & 0x02)// 符号出力判定
   287 0000138D 7410                <1> .20Q:	je		.20E							; {
   288 0000138F 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   289 00001392 7D07                <1> .22Q:	jge		.22F							;   {
   290 00001394 F7D8                <1> 		neg		eax								;     val *= -1;   // 符号反転
   291 00001396 C6062D              <1> 		mov		[esi], byte '-'					;     *dst = '-';  // 符号表示
   292 00001399 EB03                <1> 		jmp		.22E							;   }
   293                              <1> .22F:											;   else
   294                              <1> 												;   {
   295 0000139B C6062B              <1> 		mov		[esi], byte '+'					;     *dst = '+';  // 符号表示
   296                              <1> .22E:											;   }
   297 0000139E 49                  <1> 		dec		ecx								;   size--;        // 残りバッファサイズの減算
   298                              <1> .20E:											; }
   299                              <1> 
   300                              <1> 		;---------------------------------------
   301                              <1> 		; ASCII変換
   302                              <1> 		;---------------------------------------
   303 0000139F 8B5D14              <1> 		mov		ebx, [ebp +20]					; BX = 基数;
   304                              <1> .30L:											; do
   305                              <1> 												; {
   306 000013A2 BA00000000          <1> 		mov		edx, 0							;   
   307 000013A7 F7F3                <1> 		div		ebx								;   DX = DX:AX % 基数;
   308                              <1> 												;   AX = DX:AX / 基数;
   309                              <1> 												;   
   310 000013A9 89D6                <1> 		mov		esi, edx						;   // テーブル参照
   311 000013AB 8A96[D6130000]      <1> 		mov		dl, byte [.ascii + esi]			;   DL = ASCII[DX];
   312                              <1> 												;   
   313 000013B1 8817                <1> 		mov		[edi], dl						;   *dst = DL;
   314 000013B3 4F                  <1> 		dec		edi								;   dst--;
   315                              <1> 												;   
   316 000013B4 83F800              <1> 		cmp		eax, 0							;   
   317 000013B7 E0E9                <1> 		loopnz	.30L							; } while (AX);
   318                              <1> .30E:
   319                              <1> 
   320                              <1> 		;---------------------------------------
   321                              <1> 		; 空欄を埋める
   322                              <1> 		;---------------------------------------
   323 000013B9 83F900              <1> 		cmp		ecx, 0							; if (size)
   324 000013BC 740E                <1> .40Q:	je		.40E							; {
   325 000013BE B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   326 000013C0 66837D1804          <1> 		cmp		[ebp +24], word 0b0100			;   if (flags & 0x04)
   327 000013C5 7502                <1> .42Q:	jne		.42E							;   {
   328 000013C7 B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   329                              <1> .42E:											;   }
   330 000013C9 FD                  <1> 		std										;   // DF = 1（-方向）
   331 000013CA F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   332                              <1> .40E:											; }
   333                              <1> 
   334                              <1> 		;---------------------------------------
   335                              <1> 		; 【レジスタの復帰】
   336                              <1> 		;---------------------------------------
   337 000013CC 5F                  <1> 		pop		edi
   338 000013CD 5E                  <1> 		pop		esi
   339 000013CE 5A                  <1> 		pop		edx
   340 000013CF 59                  <1> 		pop		ecx
   341 000013D0 5B                  <1> 		pop		ebx
   342 000013D1 58                  <1> 		pop		eax
   343                              <1> 
   344                              <1> 		;---------------------------------------
   345                              <1> 		; 【スタックフレームの破棄】
   346                              <1> 		;---------------------------------------
   347 000013D2 89EC                <1> 		mov		esp, ebp
   348 000013D4 5D                  <1> 		pop		ebp
   349                              <1> 
   350 000013D5 C3                  <1> 		ret
   351                              <1> 
   352 000013D6 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   352 000013DF 39414243444546      <1>
   353                              <1> 
   214                                  %include	"../modules/protect/rtc.s"
   215                              <1> ;************************************************************************
   216                              <1> ;	RTCから時刻データを取得する
   217                              <1> ;========================================================================
   218                              <1> ;■書式		: DWORD rtc_get_time(dst);
   219                              <1> ;
   220                              <1> ;■引数
   221                              <1> ;	dst		: 保存先アドレス
   222                              <1> ;
   223                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   224                              <1> ;************************************************************************
   225                              <1> rtc_get_time:
   226                              <1> 		;---------------------------------------
   227                              <1> 		; 【スタックフレームの構築】
   228                              <1> 		;---------------------------------------
   229                              <1> 												; ------|--------
   230                              <1> 												; EBP+ 8| 保存先アドレス
   231                              <1> 												; ---------------
   232 000013E6 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   233 000013E7 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   234                              <1> 												; ---------------
   235                              <1> 		;---------------------------------------
   236                              <1> 		; 【レジスタの保存】
   237                              <1> 		;---------------------------------------
   238 000013E9 53                  <1> 		push	ebx
   239                              <1> 
   240                              <1> 		;---------------------------------------
   241                              <1> 		; RTCから時刻を取得
   242                              <1> 		;---------------------------------------
   243 000013EA B00A                <1> 		mov		al, 0x0A						; // レジスタA
   244 000013EC E670                <1> 		out		0x70, al						; outp(0x70, AL);
   245 000013EE E471                <1> 		in		al, 0x71						; AL = レジスタA;
   246 000013F0 A880                <1> 		test	al, 0x80						; if (DM & UIP) // 更新中
   247 000013F2 7407                <1> 		je		.10F							; {
   248 000013F4 B801000000          <1> 		mov		eax, 1							;   ret = 1; // データ更新中
   249 000013F9 EB27                <1> 		jmp		.10E							; }
   250                              <1> .10F:											; else
   251                              <1> 												; {
   252                              <1> 												;   // RAM[0x04]:時
   253 000013FB B004                <1> 		mov		al, 0x04						;   AL = 0x04;
   254 000013FD E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   255 000013FF E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 時データ
   256                              <1> 												;   
   257 00001401 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   258                              <1> 												;   
   259                              <1> 												;   // RAM[0x02]:分
   260 00001404 B002                <1> 		mov		al, 0x02						;   AL = 0x02;
   261 00001406 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   262 00001408 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 分データ
   263                              <1> 												;   
   264 0000140A C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   265                              <1> 												;   
   266                              <1> 												;   // RAM[0x00]:秒
   267 0000140D B000                <1> 		mov		al, 0x00						;   AL = 0x00;
   268 0000140F E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   269 00001411 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 秒データ
   270                              <1> 												;   
   271 00001413 25FFFFFF00          <1> 		and		eax, 0x00_FF_FF_FF				;   // 下位3バイトのみ有効
   272                              <1> 												;   
   273 00001418 8B5D08              <1> 		mov		ebx, [ebp + 8]					;   dst = 保存先;
   274 0000141B 8903                <1> 		mov		[ebx], eax						;   [dst] = 時刻;
   275                              <1> 												;   
   276 0000141D B800000000          <1> 		mov		eax, 0							;   ret = 0; // 正常終了
   277                              <1> .10E:											; }
   278                              <1> 
   279                              <1> 		;---------------------------------------
   280                              <1> 		; 【レジスタの復帰】
   281                              <1> 		;---------------------------------------
   282 00001422 5B                  <1> 		pop		ebx
   283                              <1> 
   284                              <1> 		;---------------------------------------
   285                              <1> 		; 【スタックフレームの破棄】
   286                              <1> 		;---------------------------------------
   287 00001423 89EC                <1> 		mov		esp, ebp
   288 00001425 5D                  <1> 		pop		ebp
   289                              <1> 
   290 00001426 C3                  <1> 		ret
   291                              <1> 
   215                                  %include	"../modules/protect/draw_time.s"
   216                              <1> ;************************************************************************
   217                              <1> ;	時刻の表示
   218                              <1> ;========================================================================
   219                              <1> ;■書式		: void draw_time(col, row, color, time);
   220                              <1> ;
   221                              <1> ;■引数
   222                              <1> ;	col		: 列
   223                              <1> ;	row		: 行
   224                              <1> ;	color	: 描画色
   225                              <1> ;	time	: 時刻データ
   226                              <1> ;
   227                              <1> ;■戻り値	: 無し
   228                              <1> ;************************************************************************
   229                              <1> draw_time:
   230                              <1> 		;---------------------------------------
   231                              <1> 		; 【スタックフレームの構築】
   232                              <1> 		;---------------------------------------
   233                              <1> 												; ------|--------
   234                              <1> 												; EBP+20| 時刻データ
   235                              <1> 												; EBP+16| 色
   236                              <1> 												; EBP+12| Y（行）
   237                              <1> 												; EBP+ 8| X（列）
   238                              <1> 												; ---------------
   239 00001427 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   240 00001428 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   241                              <1> 												; ---------------
   242                              <1> 		;---------------------------------------
   243                              <1> 		; 【レジスタの保存】
   244                              <1> 		;---------------------------------------
   245 0000142A 50                  <1> 		push	eax
   246 0000142B 53                  <1> 		push	ebx
   247                              <1> 
   248                              <1> 		;---------------------------------------
   249                              <1> 		; 
   250                              <1> 		;---------------------------------------
   251 0000142C 8B4514              <1> 		mov		eax, [ebp +20]					; EAX = 時刻データ;
   252 0000142F 3B05[AC140000]      <1> 		cmp		eax, [.last]					; if (今回 != 前回)
   253 00001435 7467                <1> 		je		.10E							; {
   254                              <1> 												;   
   255 00001437 A3[AC140000]        <1> 		mov		[.last], eax					;   // 前回の時刻値を更新
   256                              <1> 												;   
   257 0000143C BB00000000          <1> 		mov		ebx, 0							;   EBX = 0;
   258 00001441 88C3                <1> 		mov		bl, al							;   EBX = 秒;
   259 00001443 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .sec, 2, 16, 0b0100	;   // 時刻を文字列に変換
   259 0000144A [BA140000]53E809FF- <1>
   259 00001452 FFFF6683C414        <1>
   260                              <1> 
   261 00001458 88E3                <1> 		mov		bl, ah							;   EBX = 分;
   262 0000145A 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .min, 2, 16, 0b0100	;   // 時刻を文字列に変換
   262 00001461 [B7140000]53E8F2FE- <1>
   262 00001469 FFFF6683C414        <1>
   263                              <1> 
   264 0000146F C1E810              <1> 		shr		eax, 16							;   EBX = 時;
   265 00001472 6A046A106A0268-     <1> 		cdecl	itoa, eax, .hour, 2, 16, 0b0100	;   // 時刻を文字列に変換
   265 00001479 [B4140000]50E8DAFE- <1>
   265 00001481 FFFF6683C414        <1>
   266                              <1> 
   267                              <1> 												;   // 時刻を表示
   268 00001487 68[B4140000]FF7510- <1> 		cdecl	draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
   268 0000148F FF750CFF7508E81BFC- <1>
   268 00001498 FFFF6683C410        <1>
   269                              <1> 												;     
   270                              <1> 												;   }
   271                              <1> .10E:											; }
   272                              <1> 
   273                              <1> 		;---------------------------------------
   274                              <1> 		; 【レジスタの復帰】
   275                              <1> 		;---------------------------------------
   276 0000149E 5B                  <1> 		pop		ebx
   277 0000149F 58                  <1> 		pop		eax
   278                              <1> 
   279                              <1> 		;---------------------------------------
   280                              <1> 		; 【スタックフレームの破棄】
   281                              <1> 		;---------------------------------------
   282 000014A0 89EC                <1> 		mov		esp, ebp
   283 000014A2 5D                  <1> 		pop		ebp
   284                              <1> 
   285 000014A3 C3                  <1> 		ret
   286                              <1> 
   287                              <1> ALIGN 2, db 0
   288 000014A4 0000000000000000    <1> .temp:	dq	0
   289 000014AC 0000000000000000    <1> .last:	dq	0
   290 000014B4 5A5A3A              <1> .hour:	db	"ZZ:"
   291 000014B7 5A5A3A              <1> .min:	db	"ZZ:"
   292 000014BA 5A5A00              <1> .sec:	db	"ZZ", 0
   293                              <1> 
   216                                  %include	"../modules/protect/interrupt.s"
   217                              <1> ;************************************************************************
   218                              <1> ;	割り込みベクタの初期化
   219                              <1> ;************************************************************************
   220 000014BD 90<rep 3h>          <1> ALIGN 4
   221 000014C0 FF07                <1> IDTR:	dw 		8 * 256 - 1					; idt_limit
   222 000014C2 00001000            <1> 		dd 		VECT_BASE					; idt location
   223                              <1> 
   224                              <1> ;************************************************************************
   225                              <1> ;	割り込みテーブルを初期化
   226                              <1> ;------------------------------------------------------------------------
   227                              <1> ;	
   228                              <1> ;	まず、全ての割り込みアドレスにデフォルト処理を設定すし、その後、
   229                              <1> ;	必要な割り込みだけ設定しなおす。
   230                              <1> ;	
   231                              <1> ;	割り込みアドレスは、VECT_BASEで指定され、256の割り込みがあるので
   232                              <1> ;	0x0800バイト占有することになる。
   233                              <1> ;	
   234                              <1> ;	           |____________| _V___
   235                              <1> ;	  VECT_BASE| IntDefault |  |   
   236                              <1> ;	           | IntDefault |  | 8 * 256
   237                              <1> ;	           |      :     |  |   
   238                              <1> ;	           |____________| _|___
   239                              <1> ;	      +0800|////////////|
   240                              <1> ;	           |            |
   241                              <1> ;	
   242                              <1> ;	一つの割り込み設定は8バイトで構成される。
   243                              <1> ;	
   244                              <1> ;	           |____________|____________| 
   245                              <1> ;	        [0]| Address Lo[15: 0]       | 
   246                              <1> ;	        [2]| Selector                | 
   247                              <1> ;	        [4]| Flags                   | 
   248                              <1> ;	        [6]|_Address Lo[32:16]_______| 
   249                              <1> ;	           |/////////////////////////| 
   250                              <1> ;	           |            |            | 
   251                              <1> ;	
   252                              <1> ;========================================================================
   253                              <1> ;■書式		: void init_int(void);
   254                              <1> ;
   255                              <1> ;■引数		: 無し
   256                              <1> ;
   257                              <1> ;■戻り値	: 無し
   258                              <1> ;************************************************************************
   259                              <1> init_int:
   260                              <1> 		;---------------------------------------
   261                              <1> 		; 【レジスタの保存】
   262                              <1> 		;---------------------------------------
   263 000014C6 50                  <1> 		push	eax
   264 000014C7 53                  <1> 		push	ebx
   265 000014C8 51                  <1> 		push	ecx
   266 000014C9 57                  <1> 		push	edi
   267                              <1> 
   268                              <1> 		;---------------------------------------
   269                              <1> 		; 全ての割り込みにデフォルト処理を設定
   270                              <1> 		;---------------------------------------
   271 000014CA 8D05[10160000]      <1> 		lea		eax, [int_default]				; EAX   = 割り込み処理アドレス;
   272 000014D0 BB008E0800          <1> 		mov		ebx, 0x0008_8E00				; EBX   = セグメントセレクタ;
   273 000014D5 6693                <1> 		xchg	ax, bx							; // 下位ワードを交換
   274                              <1> 
   275 000014D7 B900010000          <1> 		mov		ecx, 256						; ECX   = 割り込みベクタ数
   276 000014DC BF00001000          <1> 		mov		edi, VECT_BASE					; EDI   = 割り込みベクタテーブル
   277                              <1> 
   278                              <1> .10L:											; do
   279                              <1> 												; {
   280 000014E1 891F                <1> 		mov		[edi + 0], ebx					;   [EDI + 0] = 割り込みディスクリプタ（下位）
   281 000014E3 894704              <1> 		mov		[edi + 4], eax					;   [EDI + 4] = 割り込みディスクリプタ（上位）
   282 000014E6 83C708              <1> 		add		edi, 8							;   EDI += 8;
   283 000014E9 E2F6                <1> 		loop	.10L							; } while (ECX--);
   284                              <1> 
   285                              <1> 		;---------------------------------------
   286                              <1> 		; 割り込みディスクリプタの設定
   287                              <1> 		;---------------------------------------
   288 000014EB 0F011D[C0140000]    <1> 		lidt	[IDTR]							; // 割り込みディスクリプタテーブルをロード
   289                              <1> 
   290                              <1> 		;---------------------------------------
   291                              <1> 		; 【レジスタの復帰】
   292                              <1> 		;---------------------------------------
   293 000014F2 5F                  <1> 		pop		edi
   294 000014F3 59                  <1> 		pop		ecx
   295 000014F4 5B                  <1> 		pop		ebx
   296 000014F5 58                  <1> 		pop		eax
   297                              <1> 
   298 000014F6 C3                  <1> 		ret
   299                              <1> 
   300                              <1> ;************************************************************************
   301                              <1> ;	スタックの内容を表示して無限ループを実行
   302                              <1> ;************************************************************************
   303                              <1> int_stop:
   304 000014F7 FB                  <1> 		sti										; // 割り込み許可
   305                              <1> 
   306                              <1> 		;---------------------------------------
   307                              <1> 		; EAXで示される文字列を表示
   308                              <1> 		;---------------------------------------
   309 000014F8 50680F0600006A0F6A- <1> 		cdecl	draw_str, 25, 15, 0x060F, eax	; draw_str(EAX);
   309 00001501 19E8AEFBFFFF6683C4- <1>
   309 0000150A 10                  <1>
   310                              <1> 
   311                              <1> 		;---------------------------------------
   312                              <1> 		; スタックのデータを文字列に変換
   313                              <1> 		;---------------------------------------
   314 0000150B 8B0424              <1> 		mov		eax, [esp + 0]					; EAX = ESP[ 0];
   315 0000150E 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p1, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   315 00001515 [D3150000]50E83EFE- <1>
   315 0000151D FFFF6683C414        <1>
   316                              <1> 
   317 00001523 8B442404            <1> 		mov		eax, [esp + 4]					; EAX = ESP[ 4];
   318 00001527 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p2, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   318 0000152E [E4150000]50E825FE- <1>
   318 00001536 FFFF6683C414        <1>
   319                              <1> 
   320 0000153C 8B442408            <1> 		mov		eax, [esp + 8]					; EAX = ESP[ 8];
   321 00001540 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p3, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   321 00001547 [F5150000]50E80CFE- <1>
   321 0000154F FFFF6683C414        <1>
   322                              <1> 
   323 00001555 8B44240C            <1> 		mov		eax, [esp +12]					; EAX = ESP[12];
   324 00001559 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p4, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   324 00001560 [06160000]50E8F3FD- <1>
   324 00001568 FFFF6683C414        <1>
   325                              <1> 
   326                              <1> 		;---------------------------------------
   327                              <1> 		; 文字列の表示
   328                              <1> 		;---------------------------------------
   329 0000156E 68[CC150000]68040F- <1> 		cdecl	draw_str, 25, 16, 0x0F04, .s1	; draw_str("ESP+ 0:-------- ");
   329 00001576 00006A106A19E834FB- <1>
   329 0000157F FFFF6683C410        <1>
   330 00001585 68[DD150000]68040F- <1> 		cdecl	draw_str, 25, 17, 0x0F04, .s2	; draw_str("   + 4:-------- ");
   330 0000158D 00006A116A19E81DFB- <1>
   330 00001596 FFFF6683C410        <1>
   331 0000159C 68[EE150000]68040F- <1> 		cdecl	draw_str, 25, 18, 0x0F04, .s3	; draw_str("   + 8:-------- ");
   331 000015A4 00006A126A19E806FB- <1>
   331 000015AD FFFF6683C410        <1>
   332 000015B3 68[FF150000]68040F- <1> 		cdecl	draw_str, 25, 19, 0x0F04, .s4	; draw_str("   +12:-------- ");
   332 000015BB 00006A136A19E8EFFA- <1>
   332 000015C4 FFFF6683C410        <1>
   333                              <1> 
   334                              <1> 		;---------------------------------------
   335                              <1> 		; 無限ループ
   336                              <1> 		;---------------------------------------
   337 000015CA EBFE                <1> 		jmp		$								; while (1) ; // 無限ループ
   338                              <1> 
   339 000015CC 4553502B20303A      <1> .s1		db	"ESP+ 0:"
   340 000015D3 5F5F5F5F5F5F5F5F20- <1> .p1		db	"________ ", 0
   340 000015DC 00                  <1>
   341 000015DD 2020202B20343A      <1> .s2		db	"   + 4:"
   342 000015E4 5F5F5F5F5F5F5F5F20- <1> .p2		db	"________ ", 0
   342 000015ED 00                  <1>
   343 000015EE 2020202B20383A      <1> .s3		db	"   + 8:"
   344 000015F5 5F5F5F5F5F5F5F5F20- <1> .p3		db	"________ ", 0
   344 000015FE 00                  <1>
   345 000015FF 2020202B31323A      <1> .s4		db	"   +12:"
   346 00001606 5F5F5F5F5F5F5F5F20- <1> .p4		db	"________ ", 0
   346 0000160F 00                  <1>
   347                              <1> 
   348                              <1> ;************************************************************************
   349                              <1> ;	割り込み処理：デフォルトの処理
   350                              <1> ;************************************************************************
   351                              <1> int_default:
   352 00001610 9C                  <1> 		pushf									; // EFLAGS(IF==0)
   353 00001611 0E                  <1> 		push	cs								; // CS
   354 00001612 68[F7140000]        <1> 		push	int_stop						; // スタック表示処理
   355                              <1> 
   356 00001617 B8[1D160000]        <1> 		mov		eax, .s0						; // 割り込み種別
   357 0000161C CF                  <1> 		iret
   358                              <1> 
   359 0000161D 203C2020202053544F- <1> .s0		db	" <    STOP    > ", 0
   359 00001626 50202020203E2000    <1>
   360                              <1> 
   361                              <1> ;************************************************************************
   362                              <1> ;	割り込み処理：ゼロ除算
   363                              <1> ;************************************************************************
   364                              <1> int_zero_div:
   365 0000162E 9C                  <1> 		pushf									; // EFLAGS
   366 0000162F 0E                  <1> 		push	cs								; // CS
   367 00001630 68[F7140000]        <1> 		push	int_stop						; // スタック表示処理
   368                              <1> 
   369 00001635 B8[3B160000]        <1> 		mov		eax, .s0						; // 割り込み種別
   370 0000163A CF                  <1> 		iret
   371                              <1> 
   372 0000163B 203C20205A45524F20- <1> .s0		db	" <  ZERO DIV  > ", 0
   372 00001644 44495620203E2000    <1>
   373                              <1> 
   217                                  %include	"../modules/protect/pic.s"
   218                              <1> ;************************************************************************
   219                              <1> ;	割り込みコントローラの初期化
   220                              <1> ;========================================================================
   221                              <1> ;■書式		: void init_pic(void);
   222                              <1> ;
   223                              <1> ;■引数		: 無し
   224                              <1> ;
   225                              <1> ;■戻り値	: 無し
   226                              <1> ;************************************************************************
   227                              <1> init_pic:
   228                              <1> 		;---------------------------------------
   229                              <1> 		; 【レジスタの保存】
   230                              <1> 		;---------------------------------------
   231 0000164C 50                  <1> 		push	eax
   232                              <1> 
   233                              <1> 		;---------------------------------------
   234                              <1> 		; マスタPICの設定
   235                              <1> 		;---------------------------------------
   236                              <1> 		outp	0x20, 0x11						; // MASTER.ICW1 = 0x11;
    72 0000164D B011                <2>  mov al, %2
    73 0000164F E620                <2>  out %1, al
   237                              <1> 		outp	0x21, 0x20						; // MASTER.ICW2 = 0x20;
    72 00001651 B020                <2>  mov al, %2
    73 00001653 E621                <2>  out %1, al
   238                              <1> 		outp	0x21, 0x04						; // MASTER.ICW3 = 0x04;
    72 00001655 B004                <2>  mov al, %2
    73 00001657 E621                <2>  out %1, al
   239                              <1> 		outp	0x21, 0x01						; // MASTER.ICW4 = 0x01;
    72 00001659 B001                <2>  mov al, %2
    73 0000165B E621                <2>  out %1, al
   240                              <1> 		outp	0x21, 0xFF						; // マスタ割り込みマスク
    72 0000165D B0FF                <2>  mov al, %2
    73 0000165F E621                <2>  out %1, al
   241                              <1> 
   242                              <1> 		;---------------------------------------
   243                              <1> 		; スレーブPICの設定
   244                              <1> 		;---------------------------------------
   245                              <1> 		outp	0xA0, 0x11						; // SLAVE.ICW1  = 0x11;
    72 00001661 B011                <2>  mov al, %2
    73 00001663 E6A0                <2>  out %1, al
   246                              <1> 		outp	0xA1, 0x28						; // SLAVE.ICW2  = 0x28;
    72 00001665 B028                <2>  mov al, %2
    73 00001667 E6A1                <2>  out %1, al
   247                              <1> 		outp	0xA1, 0x02						; // SLAVE.ICW3  = 0x02;
    72 00001669 B002                <2>  mov al, %2
    73 0000166B E6A1                <2>  out %1, al
   248                              <1> 		outp	0xA1, 0x01						; // SLAVE.ICW4  = 0x01;
    72 0000166D B001                <2>  mov al, %2
    73 0000166F E6A1                <2>  out %1, al
   249                              <1> 		outp	0xA1, 0xFF						; // スレーブ割り込みマスク
    72 00001671 B0FF                <2>  mov al, %2
    73 00001673 E6A1                <2>  out %1, al
   250                              <1> 
   251                              <1> 		;---------------------------------------
   252                              <1> 		; 【レジスタの復帰】
   253                              <1> 		;---------------------------------------
   254 00001675 58                  <1> 		pop		eax
   255                              <1> 
   256 00001676 C3                  <1> 		ret
   257                              <1> 
   218                                  %include	"../modules/protect/int_rtc.s"
   219                              <1> ;************************************************************************
   220                              <1> ;	RTCの割り込み許可設定
   221                              <1> ;========================================================================
   222                              <1> ;■書式		: void rtc_int_en(bit);
   223                              <1> ;
   224                              <1> ;■引数
   225                              <1> ;	bit		: 割り込みを許可するビット
   226                              <1> ;
   227                              <1> ;■戻り値	: 無し
   228                              <1> ;************************************************************************
   229                              <1> rtc_int_en:
   230                              <1> 		;---------------------------------------
   231                              <1> 		; 【スタックフレームの構築】
   232                              <1> 		;---------------------------------------
   233                              <1> 												; ------|--------
   234                              <1> 												;    + 8| ビット
   235                              <1> 												; ------|--------
   236                              <1> 												;    + 4| EIP（戻り番地）
   237 00001677 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   238 00001678 89E5                <1> 		mov		ebp, esp						; ------+--------
   239                              <1> 
   240                              <1> 		;---------------------------------------
   241                              <1> 		; 【レジスタの保存】
   242                              <1> 		;---------------------------------------
   243 0000167A 50                  <1> 		push	eax
   244                              <1> 
   245                              <1> 		;---------------------------------------
   246                              <1> 		; 割り込み許可設定
   247                              <1> 		;---------------------------------------
   248                              <1> 		outp	0x70, 0x0B						; outp(0x70, AL);   // レジスタBを選択
    72 0000167B B00B                <2>  mov al, %2
    73 0000167D E670                <2>  out %1, al
   249                              <1> 
   250 0000167F E471                <1> 		in		al, 0x71						; AL  = port(0x71); // レジスタBの
   251 00001681 0A4508              <1> 		or		al, [ebp + 8]					; AL |= ビット;     // 指定されたビットをセット
   252                              <1> 
   253 00001684 E671                <1> 		out		0x71, al						; outp(0x71, AL);   // レジスタBに書き込み
   254                              <1> 
   255                              <1> 		;---------------------------------------
   256                              <1> 		; 【レジスタの復帰】
   257                              <1> 		;---------------------------------------
   258 00001686 58                  <1> 		pop		eax
   259                              <1> 
   260                              <1> 		;---------------------------------------
   261                              <1> 		; 【スタックフレームの破棄】
   262                              <1> 		;---------------------------------------
   263 00001687 89EC                <1> 		mov		esp, ebp
   264 00001689 5D                  <1> 		pop		ebp
   265                              <1> 
   266 0000168A C3                  <1> 		ret
   267                              <1> 
   268                              <1> 
   269                              <1> ;************************************************************************
   270                              <1> ;	割り込み処理：RTC
   271                              <1> ;************************************************************************
   272                              <1> int_rtc:
   273                              <1> 		;---------------------------------------
   274                              <1> 		; 【レジスタの保存】
   275                              <1> 		;---------------------------------------
   276 0000168B 60                  <1> 		pusha
   277 0000168C 1E                  <1> 		push	ds
   278 0000168D 06                  <1> 		push	es
   279                              <1> 
   280                              <1> 		;---------------------------------------
   281                              <1> 		; データ用セグメントセレクタの設定
   282                              <1> 		;---------------------------------------
   283 0000168E 66B81000            <1> 		mov		ax, 0x0010						; 
   284 00001692 8ED8                <1> 		mov		ds, ax							; 
   285 00001694 8EC0                <1> 		mov		es, ax							; 
   286                              <1> 
   287                              <1> 		;---------------------------------------
   288                              <1> 		; RTCから時刻を取得
   289                              <1> 		;---------------------------------------
   290 00001696 68[FC020000]E846FD- <1> 		cdecl	rtc_get_time, RTC_TIME			; EAX = get_time(&RTC_TIME);
   290 0000169E FFFF6683C404        <1>
   291                              <1> 												; 
   292                              <1> 		;---------------------------------------
   293                              <1> 		; RTCの割り込み要因を取得
   294                              <1> 		;---------------------------------------
   295                              <1> 		outp	0x70, 0x0C						; outp(0x70, 0x0C); // レジスタCを選択
    72 000016A4 B00C                <2>  mov al, %2
    73 000016A6 E670                <2>  out %1, al
   296 000016A8 E471                <1> 		in		al, 0x71						; AL = inp();
   297                              <1> 
   298                              <1> 		;---------------------------------------
   299                              <1> 		; 割り込みフラグをクリア(EOI)
   300                              <1> 		;---------------------------------------
   301                              <1> 		outp	0xA0, 0x20						; outp(0xA0, EOI); // スレーブPIC
    72 000016AA B020                <2>  mov al, %2
    73 000016AC E6A0                <2>  out %1, al
   302                              <1> 		outp	0x20, 0x20						; outp(0x20, EOI); // マスタPIC
    72 000016AE B020                <2>  mov al, %2
    73 000016B0 E620                <2>  out %1, al
   303                              <1> 
   304                              <1> 		;---------------------------------------
   305                              <1> 		; 【レジスタの復帰】
   306                              <1> 		;---------------------------------------
   307 000016B2 07                  <1> 		pop		es								; 
   308 000016B3 1F                  <1> 		pop		ds								; 
   309 000016B4 61                  <1> 		popa									; 
   310                              <1> 
   311 000016B5 CF                  <1> 		iret									; 割り込み処理の終了
   312                              <1> 
   219                                  %include	"../modules/protect/int_keyboard.s"
   220                              <1> ;************************************************************************
   221                              <1> ;	割り込み処理：キーボード
   222                              <1> ;------------------------------------------------------------------------
   223                              <1> ;	KBC（キーボードコントローラ）からキーコードを取得して、
   224                              <1> ;	専用のリングバッファに保存する。
   225                              <1> ;************************************************************************
   226                              <1> int_keyboard:
   227                              <1> 		;---------------------------------------
   228                              <1> 		; 【レジスタの保存】
   229                              <1> 		;---------------------------------------
   230 000016B6 60                  <1> 		pusha
   231 000016B7 1E                  <1> 		push	ds
   232 000016B8 06                  <1> 		push	es
   233                              <1> 
   234                              <1> 		;---------------------------------------
   235                              <1> 		; データ用セグメントの設定
   236                              <1> 		;---------------------------------------
   237 000016B9 66B81000            <1> 		mov		ax, 0x0010						; 
   238 000016BD 8ED8                <1> 		mov		ds, ax							; 
   239 000016BF 8EC0                <1> 		mov		es, ax							; 
   240                              <1> 
   241                              <1> 		;---------------------------------------
   242                              <1> 		; KBCのバッファ読み取り
   243                              <1> 		;---------------------------------------
   244 000016C1 E460                <1> 		in		al, 0x60						; AL = キーコードの取得
   245                              <1> 
   246                              <1> 		;---------------------------------------
   247                              <1> 		; キーコードの保存
   248                              <1> 		;---------------------------------------
   249 000016C3 5068[DC160000]E856- <1> 		cdecl	ring_wr, _KEY_BUFF, eax			; ring_wr(_KEY_BUFF, EAX); // キーコードの保存
   249 000016CB 0000006683C408      <1>
   250                              <1> 
   251                              <1> 		;---------------------------------------
   252                              <1> 		; 割り込み終了コマンド送信
   253                              <1> 		;---------------------------------------
   254                              <1> 		outp	0x20, 0x20						; outp(); // マスタPIC:EOIコマンド
    72 000016D2 B020                <2>  mov al, %2
    73 000016D4 E620                <2>  out %1, al
   255                              <1> 
   256                              <1> 		;---------------------------------------
   257                              <1> 		; 【レジスタの復帰】
   258                              <1> 		;---------------------------------------
   259 000016D6 07                  <1> 		pop		es								; 
   260 000016D7 1F                  <1> 		pop		ds								; 
   261 000016D8 61                  <1> 		popa
   262                              <1> 
   263 000016D9 CF                  <1> 		iret									; 割り込みからの復帰
   264                              <1> 
   265 000016DA 00<rep 2h>          <1> ALIGN 4, db 0
   266 000016DC 00<rep 18h>         <1> _KEY_BUFF:	times ring_buff_size db 0
   267                              <1> 
   220                                  %include	"../modules/protect/ring_buff.s"
   221                              <1> ;************************************************************************
   222                              <1> ;	リングバッファからデータを取得
   223                              <1> ;========================================================================
   224                              <1> ;■書式		: DWORD ring_rd(buff, data);
   225                              <1> ;
   226                              <1> ;■引数
   227                              <1> ;	buff	: リングバッファ
   228                              <1> ;	data	: 読み込んだデータの保存先アドレス
   229                              <1> ;
   230                              <1> ;■戻り値	: データあり(0以外)、データ無し(0)
   231                              <1> ;************************************************************************
   232                              <1> ring_rd:
   233                              <1> 		;---------------------------------------
   234                              <1> 		; 【スタックフレームの構築】
   235                              <1> 		;---------------------------------------
   236                              <1> 												; ------|--------
   237                              <1> 												;    +12| リングデータ
   238                              <1> 												;    + 8| データアドレス
   239                              <1> 												; ------|--------
   240                              <1> 												;    + 4| EIP（戻り番地）
   241 000016F4 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   242 000016F5 89E5                <1> 		mov		ebp, esp						; ------+--------
   243                              <1> 
   244                              <1> 		;---------------------------------------
   245                              <1> 		; 【レジスタの保存】
   246                              <1> 		;---------------------------------------
   247 000016F7 53                  <1> 		push	ebx
   248 000016F8 56                  <1> 		push	esi
   249 000016F9 57                  <1> 		push	edi
   250                              <1> 
   251                              <1> 		;---------------------------------------
   252                              <1> 		; 引数を取得
   253                              <1> 		;---------------------------------------
   254 000016FA 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   255 000016FD 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = データアドレス;
   256                              <1> 
   257                              <1> 		;---------------------------------------
   258                              <1> 		; 読み込み位置を確認
   259                              <1> 		;---------------------------------------
   260 00001700 B800000000          <1> 		mov		eax, 0							; EAX = 0;          // データ無し
   261 00001705 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;         // 読み込み位置
   262 00001707 3B5E04              <1> 		cmp		ebx, [esi + ring_buff.wp]		; if (EBX != wp)    // 書き込み位置と異なる
   263 0000170A 7411                <1> 		je		.10E							; {
   264                              <1> 												;   
   265 0000170C 8A441E08            <1> 		mov		al, [esi + ring_buff.item + ebx] ;   AL = BUFF[rp]; // キーコードを保存
   266                              <1> 												;   
   267 00001710 8807                <1> 		mov		[edi], al						;   [EDI] = AL;     // データを保存
   268                              <1> 												;   
   269 00001712 43                  <1> 		inc		ebx								;   EBX++;          // 次の読み込み位置
   270 00001713 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= 0x0F     // サイズの制限
   271 00001716 891E                <1> 		mov		[esi + ring_buff.rp], ebx		;   rp = EBX;       // 読み込み位置を保存
   272                              <1> 												;   
   273 00001718 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // データあり
   274                              <1> .10E:											; }
   275                              <1> 
   276                              <1> 		;---------------------------------------
   277                              <1> 		; 【レジスタの復帰】
   278                              <1> 		;---------------------------------------
   279 0000171D 5F                  <1> 		pop		edi
   280 0000171E 5E                  <1> 		pop		esi
   281 0000171F 5B                  <1> 		pop		ebx
   282                              <1> 
   283                              <1> 		;---------------------------------------
   284                              <1> 		; 【スタックフレームの破棄】
   285                              <1> 		;---------------------------------------
   286 00001720 89EC                <1> 		mov		esp, ebp
   287 00001722 5D                  <1> 		pop		ebp
   288                              <1> 
   289 00001723 C3                  <1> 		ret
   290                              <1> 
   291                              <1> ;************************************************************************
   292                              <1> ;	リングバッファにデータを格納
   293                              <1> ;========================================================================
   294                              <1> ;■書式		: DWORD ring_wr(buff, data);
   295                              <1> ;
   296                              <1> ;■引数
   297                              <1> ;	buff	: リングバッファ
   298                              <1> ;	data	: 書き込むデータ
   299                              <1> ;
   300                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   301                              <1> ;************************************************************************
   302                              <1> ring_wr:
   303                              <1> 		;---------------------------------------
   304                              <1> 		; 【スタックフレームの構築】
   305                              <1> 		;---------------------------------------
   306                              <1> 												; ------|--------
   307                              <1> 												;    +12| リングデータ
   308                              <1> 												;    + 8| データ
   309                              <1> 												; ------|--------
   310                              <1> 												;    + 4| EIP（戻り番地）
   311 00001724 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   312 00001725 89E5                <1> 		mov		ebp, esp						; ------+--------
   313                              <1> 
   314                              <1> 		;---------------------------------------
   315                              <1> 		; 【レジスタの保存】
   316                              <1> 		;---------------------------------------
   317 00001727 53                  <1> 		push	ebx
   318 00001728 51                  <1> 		push	ecx
   319 00001729 56                  <1> 		push	esi
   320                              <1> 
   321                              <1> 		;---------------------------------------
   322                              <1> 		; 引数を取得
   323                              <1> 		;---------------------------------------
   324 0000172A 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   325                              <1> 
   326                              <1> 		;---------------------------------------
   327                              <1> 		; 書き込み位置を確認
   328                              <1> 		;---------------------------------------
   329 0000172D B800000000          <1> 		mov		eax, 0							; EAX  = 0;         // 失敗
   330 00001732 8B5E04              <1> 		mov		ebx, [esi + ring_buff.wp]		; EBX  = wp;        // 書き込み位置
   331 00001735 89D9                <1> 		mov		ecx, ebx						; ECX  = EBX;
   332 00001737 41                  <1> 		inc		ecx								; ECX++;            // 次の書き込み位置
   333 00001738 83E10F              <1> 		and		ecx, RING_INDEX_MASK			; ECX &= 0x0F       // サイズの制限
   334                              <1> 												; 
   335 0000173B 3B0E                <1> 		cmp		ecx, [esi + ring_buff.rp]		; if (ECX != rp)    // 読み込み位置と異なる
   336 0000173D 740F                <1> 		je		.10E							; {
   337                              <1> 												; 
   338 0000173F 8A450C              <1> 		mov		al, [ebp +12]					;   AL = データ;
   339                              <1> 												; 
   340 00001742 88441E08            <1> 		mov		[esi + ring_buff.item + ebx], al ;   BUFF[wp] = AL; // キーコードを保存
   341 00001746 894E04              <1> 		mov		[esi + ring_buff.wp], ecx		;   wp = ECX;       // 書き込み位置を保存
   342 00001749 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // 成功
   343                              <1> .10E:											; }
   344                              <1> 
   345                              <1> 		;---------------------------------------
   346                              <1> 		; 【レジスタの復帰】
   347                              <1> 		;---------------------------------------
   348 0000174E 5E                  <1> 		pop		esi
   349 0000174F 59                  <1> 		pop		ecx
   350 00001750 5B                  <1> 		pop		ebx
   351                              <1> 
   352                              <1> 		;---------------------------------------
   353                              <1> 		; 【スタックフレームの破棄】
   354                              <1> 		;---------------------------------------
   355 00001751 89EC                <1> 		mov		esp, ebp
   356 00001753 5D                  <1> 		pop		ebp
   357                              <1> 
   358 00001754 C3                  <1> 		ret
   359                              <1> 
   360                              <1> ;************************************************************************
   361                              <1> ;	リングバッファ内要素の表示
   362                              <1> ;========================================================================
   363                              <1> ;■書式		: void ring_show(col, row, buff);
   364                              <1> ;
   365                              <1> ;■引数
   366                              <1> ;	col		: 列
   367                              <1> ;	row		: 行
   368                              <1> ;	buff	: リングバッファ
   369                              <1> ;
   370                              <1> ;■戻り値	: 無し
   371                              <1> ;************************************************************************
   372                              <1> draw_key:
   373                              <1> 		;---------------------------------------
   374                              <1> 		; 【スタックフレームの構築】
   375                              <1> 		;---------------------------------------
   376                              <1> 												; ------|--------
   377                              <1> 												; EBP+16| リングバッファ
   378                              <1> 												; EBP+12| Y（行）
   379                              <1> 												; EBP+ 8| X（列）
   380                              <1> 												; ------|--------
   381 00001755 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   382 00001756 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   383                              <1> 												; ------|--------
   384                              <1> 
   385                              <1> 		;---------------------------------------
   386                              <1> 		; 【レジスタの保存】
   387                              <1> 		;---------------------------------------
   388 00001758 60                  <1> 		pusha
   389                              <1> 
   390                              <1> 		;---------------------------------------
   391                              <1> 		; 引数を取得
   392                              <1> 		;---------------------------------------
   393 00001759 8B5508              <1> 		mov		edx, [ebp + 8]					; EDX = X（列）;
   394 0000175C 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）;
   395 0000175F 8B7510              <1> 		mov		esi, [ebp +16]					; ESI = リングバッファ;
   396                              <1> 
   397                              <1> 		;---------------------------------------
   398                              <1> 		; リングバッファの情報を取得
   399                              <1> 		;---------------------------------------
   400 00001762 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;             // 読み込み位置
   401 00001764 8D7608              <1> 		lea		esi, [esi + ring_buff.item]		; ESI = &KEY_BUFF[EBX];
   402 00001767 B910000000          <1> 		mov		ecx, RING_ITEM_SIZE				; ECX = RING_ITEM_SIZE; // 要素数
   403                              <1> 
   404                              <1> 		;---------------------------------------
   405                              <1> 		; 文字に変換しながら表示
   406                              <1> 		;---------------------------------------
   407                              <1> .10L:											; do
   408                              <1> 												; {
   409 0000176C 4B                  <1> 		dec		ebx								;   EBX--; // 読み込み位置
   410 0000176D 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= RING_INDEX_MASK;
   411 00001770 8A041E              <1> 		mov		al, [esi + ebx]					;   EAX  = KEY_BUFF[EBX];
   412                              <1> 												;   
   413 00001773 6A046A106A0268-     <1> 		cdecl	itoa, eax, .tmp, 2, 16, 0b0100	;   // キーコードを文字列に変換
   413 0000177A [A4170000]50E8D9FB- <1>
   413 00001782 FFFF6683C414        <1>
   414 00001788 68[A4170000]6A0257- <1> 		cdecl	draw_str, edx, edi, 0x02, .tmp	;   // 変換した文字列を表示
   414 00001790 52E81FF9FFFF6683C4- <1>
   414 00001799 10                  <1>
   415                              <1> 												;   
   416 0000179A 83C203              <1> 		add		edx, 3							;   // 表示位置を更新（3文字分）
   417                              <1> 												;   
   418 0000179D E2CD                <1> 		loop	.10L							;   
   419                              <1> .10E:											; } while (ECX--);
   420                              <1> 
   421                              <1> 		;---------------------------------------
   422                              <1> 		; 【レジスタの復帰】
   423                              <1> 		;---------------------------------------
   424 0000179F 61                  <1> 		popa
   425                              <1> 
   426                              <1> 		;---------------------------------------
   427                              <1> 		; 【スタックフレームの破棄】
   428                              <1> 		;---------------------------------------
   429 000017A0 89EC                <1> 		mov		esp, ebp
   430 000017A2 5D                  <1> 		pop		ebp
   431                              <1> 
   432 000017A3 C3                  <1> 		ret
   433                              <1> 
   434 000017A4 2D2D2000            <1> .tmp	db "-- ", 0
   221                                  %include	"../modules/protect/timer.s"
   222                              <1> ;************************************************************************
   223                              <1> ;	タイマーの設定
   224                              <1> ;------------------------------------------------------------------------
   225                              <1> ;	タイマー（カウンタ0）割り込み許可
   226                              <1> ;========================================================================
   227                              <1> ;■書式		: void int_en_timer0(void);
   228                              <1> ;
   229                              <1> ;■引数		: 無し
   230                              <1> ;
   231                              <1> ;■戻り値	: 無し
   232                              <1> ;************************************************************************
   233                              <1> int_en_timer0:
   234                              <1> 		;---------------------------------------
   235                              <1> 		; 【レジスタの保存】
   236                              <1> 		;---------------------------------------
   237 000017A8 50                  <1> 		push	eax
   238                              <1> 
   239                              <1> 		;---------------------------------------
   240                              <1> 		;	8254 Timer
   241                              <1> 		;	0x2e9c(11932)=10[ms] @ CLK=1,193,182[Hz]
   242                              <1> 		;---------------------------------------
   243                              <1> 		 outp	 0x43, 0b_00_11_010_0			; // カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    72 000017A9 B034                <2>  mov al, %2
    73 000017AB E643                <2>  out %1, al
   244                              <1> 		 outp	 0x40, 0x9C						; // 下位バイト
    72 000017AD B09C                <2>  mov al, %2
    73 000017AF E640                <2>  out %1, al
   245                              <1> 		 outp	 0x40, 0x2E						; // 上位バイト
    72 000017B1 B02E                <2>  mov al, %2
    73 000017B3 E640                <2>  out %1, al
   246                              <1> 
   247                              <1> 		;---------------------------------------
   248                              <1> 		; 【レジスタの復帰】
   249                              <1> 		;---------------------------------------
   250 000017B5 58                  <1> 		pop		eax
   251                              <1> 
   252 000017B6 C3                  <1> 		ret
   253                              <1> 
   222                                  %include	"../modules/protect/draw_rotation_bar.s"
   223                              <1> ;************************************************************************
   224                              <1> ;	画面左下に、回転する棒を表示
   225                              <1> ;========================================================================
   226                              <1> ;■書式		: void draw_rotation_bar(void);
   227                              <1> ;
   228                              <1> ;■引数		: 無し
   229                              <1> ;
   230                              <1> ;■戻り値	: 無し
   231                              <1> ;************************************************************************
   232                              <1> draw_rotation_bar:
   233                              <1> 		;---------------------------------------
   234                              <1> 		; 【レジスタの保存】
   235                              <1> 		;---------------------------------------
   236 000017B7 50                  <1> 		push	eax
   237                              <1> 
   238                              <1> 		;---------------------------------------
   239                              <1> 		; タイマー割り込みカウンタを確認
   240                              <1> 		;---------------------------------------
   241 000017B8 A1[1C0B0000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX  = タイマー割り込みカウンタ
   242 000017BD C1E804              <1> 		shr		eax, 4							; EAX /= 4;    // 16で除算
   243 000017C0 3B05[E8170000]      <1> 		cmp		eax, [.index]					; if (EAX != 前回値)
   244 000017C6 741E                <1> 		je		.10E							; {
   245                              <1> 												;   
   246 000017C8 A3[E8170000]        <1> 		mov		[.index], eax					;   前回値 = EAX;
   247 000017CD 83E003              <1> 		and		eax, 0x03						;   EAX &= 0x03; // 0～3に限定
   248                              <1> 												;   
   249 000017D0 8A80[EC170000]      <1> 		mov		al, [.table + eax]				;   AL = table[index];
   250 000017D6 506A0F6A1D6A00E8AD- <1> 		cdecl	draw_char, 0, 29, 0x000F, eax	;   draw_char(); // 文字を表示
   250 000017DF F7FFFF6683C410      <1>
   251                              <1> 												;   
   252                              <1> .10E:											; }
   253                              <1> 
   254                              <1> 		;---------------------------------------
   255                              <1> 		; 【レジスタの復帰】
   256                              <1> 		;---------------------------------------
   257 000017E6 58                  <1> 		pop		eax
   258                              <1> 
   259 000017E7 C3                  <1> 		ret
   260                              <1> 
   261                              <1> ALIGN 4, db 0
   262 000017E8 00000000            <1> .index:		dd 0								; 前回値
   263 000017EC 7C2F2D5C            <1> .table:		db	"|/-\"							; 表示キャラクタ
   264                              <1> 
   223                                  %include	"../modules/protect/call_gate.s"
   224                              <1> ;************************************************************************
   225                              <1> ;	コールゲート関数
   226                              <1> ;************************************************************************
   227                              <1> call_gate:
   228                              <1> 		;---------------------------------------
   229                              <1> 		; 【スタックフレームの構築】
   230                              <1> 		;---------------------------------------
   231                              <1> 												; ------|--------
   232                              <1> 												; EBP+12| X（列）
   233                              <1> 												; EBP+16| Y（行）
   234                              <1> 												; EBP+20| 色
   235                              <1> 												; EBP+24| 文字
   236                              <1> 												; ---------------
   237                              <1> 												; EBP+ 8| CS（コードセグメント）
   238 000017F0 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   239 000017F1 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   240                              <1> 												; ---------------
   241                              <1> 		;---------------------------------------
   242                              <1> 		; 【レジスタの保存】
   243                              <1> 		;---------------------------------------
   244 000017F3 60                  <1> 		pusha
   245 000017F4 1E                  <1> 		push	ds
   246 000017F5 06                  <1> 		push	es
   247                              <1> 
   248                              <1> 		;---------------------------------------
   249                              <1> 		; データ用セグメントの設定
   250                              <1> 		;---------------------------------------
   251 000017F6 66B81000            <1> 		mov		ax, 0x0010						; 
   252 000017FA 8ED8                <1> 		mov		ds, ax							; 
   253 000017FC 8EC0                <1> 		mov		es, ax							; 
   254                              <1> 
   255                              <1> 		;---------------------------------------
   256                              <1> 		; 文字を表示
   257                              <1> 		;---------------------------------------
   258 000017FE 8B450C              <1> 		mov		eax, dword [ebp +12]			; EAX = X（列）;
   259 00001801 8B5D10              <1> 		mov		ebx, dword [ebp +16]			; EBX = Y（行）;
   260 00001804 8B4D14              <1> 		mov		ecx, dword [ebp +20]			; ECX = 色;
   261 00001807 8B5518              <1> 		mov		edx, dword [ebp +24]			; EDX = 文字;
   262 0000180A 52515350E8A2F8FFFF- <1> 		cdecl	draw_str, eax, ebx , ecx, edx	; draw_str();
   262 00001813 6683C410            <1>
   263                              <1> 
   264                              <1> 		;---------------------------------------
   265                              <1> 		; 【レジスタの復帰】
   266                              <1> 		;---------------------------------------
   267 00001817 07                  <1> 		pop		es								; 
   268 00001818 1F                  <1> 		pop		ds								; 
   269 00001819 61                  <1> 		popa									; 
   270                              <1> 
   271                              <1> 		;---------------------------------------
   272                              <1> 		; 【スタックフレームの破棄】
   273                              <1> 		;---------------------------------------
   274 0000181A 89EC                <1> 		mov		esp, ebp
   275 0000181C 5D                  <1> 		pop		ebp
   276                              <1> 
   277 0000181D CA1000              <1> 		retf	4 * 4
   278                              <1> 
   224                                  %include	"../modules/protect/trap_gate.s"
   225                              <1> ;************************************************************************
   226                              <1> ;	システムコール：1文字出力
   227                              <1> ;************************************************************************
   228                              <1> trap_gate_81:
   229                              <1> 		;---------------------------------------
   230                              <1> 		; 1文字出力
   231                              <1> 		;---------------------------------------
   232 00001820 50535251E866F7FFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	; // 1文字出力
   232 00001829 6683C410            <1>
   233                              <1> 
   234 0000182D CF                  <1> 		iret
   235                              <1> 
   236                              <1> ;************************************************************************
   237                              <1> ;	システムコール：点の描画
   238                              <1> ;************************************************************************
   239                              <1> trap_gate_82:
   240                              <1> 		;---------------------------------------
   241                              <1> 		; 点の描画
   242                              <1> 		;---------------------------------------
   243 0000182E 535251E837F9FFFF66- <1> 		cdecl	draw_pixel, ecx, edx, ebx		; // 点の描画
   243 00001837 83C40C              <1>
   244                              <1> 
   245 0000183A CF                  <1> 		iret
   246                              <1> 
   225                                  %include	"../modules/protect/test_and_set.s"
   226                              <1> ;************************************************************************
   227                              <1> ;	RTCから時刻データを取得する
   228                              <1> ;========================================================================
   229                              <1> ;■書式		: void test_and_set(local);
   230                              <1> ;
   231                              <1> ;■引数
   232                              <1> ;	local	: ローカル変数のアドレス
   233                              <1> ;
   234                              <1> ;■戻り値	: 無し
   235                              <1> ;************************************************************************
   236                              <1> test_and_set:
   237                              <1> 		;---------------------------------------
   238                              <1> 		; 【スタックフレームの構築】
   239                              <1> 		;---------------------------------------
   240                              <1> 												; EBP+ 8| ローカル変数のアドレス
   241                              <1> 												; ------+----------------
   242 0000183B 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   243 0000183C 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   244                              <1> 												; ------+----------------
   245                              <1> 
   246                              <1> 		;---------------------------------------
   247                              <1> 		; 【レジスタの保存】
   248                              <1> 		;---------------------------------------
   249 0000183E 50                  <1> 		push	eax
   250 0000183F 53                  <1> 		push	ebx
   251                              <1> 
   252                              <1> 		;---------------------------------------
   253                              <1> 		; テストアンドセット
   254                              <1> 		;---------------------------------------
   255 00001840 B800000000          <1> 		mov		eax, 0							; local  = 0;
   256 00001845 8B5D08              <1> 		mov		ebx, [ebp + 8]					; global = アドレス;
   257                              <1> 
   258                              <1> .10L:											; for ( ; ; )
   259                              <1> 												; {
   260 00001848 F00FAB03            <1> 		lock bts [ebx], eax						;   CF = TEST_AND_SET(IN_USE, 1);
   261 0000184C 7307                <1> 		jnc		.10E							;   if (0 == CF)
   262                              <1> 												;     break;
   263                              <1> 												;   
   264                              <1> .12L:											;   for ( ; ; )
   265                              <1> 												;   {
   266 0000184E 0FA303              <1> 		bt		[ebx], eax						;     CF = TEST(IN_USE, 1);
   267 00001851 72FB                <1> 		jc		.12L							;     if (0 == CF)
   268                              <1> 												;       break;
   269 00001853 EBF3                <1> 		jmp		.10L							;   }
   270                              <1> .10E:											; }
   271                              <1> 
   272                              <1> 		;---------------------------------------
   273                              <1> 		; 【レジスタの復帰】
   274                              <1> 		;---------------------------------------
   275 00001855 5B                  <1> 		pop		ebx
   276 00001856 58                  <1> 		pop		eax
   277                              <1> 
   278                              <1> 		;---------------------------------------
   279                              <1> 		; 【スタックフレームの破棄】
   280                              <1> 		;---------------------------------------
   281 00001857 89EC                <1> 		mov		esp, ebp
   282 00001859 5D                  <1> 		pop		ebp
   283                              <1> 
   284 0000185A C3                  <1> 		ret
   285                              <1> 
   226                                  %include	"../modules/protect/int_nm.s"
   227                              <1> ;************************************************************************
   228                              <1> ;	割り込み処理：#NM(DNA:デバイス使用不可)
   229                              <1> ;************************************************************************
   230                              <1> int_nm:
   231                              <1> 		;---------------------------------------
   232                              <1> 		; 【レジスタの保存】
   233                              <1> 		;---------------------------------------
   234 0000185B 60                  <1> 		pusha
   235 0000185C 1E                  <1> 		push	ds
   236 0000185D 06                  <1> 		push	es
   237                              <1> 
   238                              <1> 		;---------------------------------------
   239                              <1> 		; カーネル用セレクタを設定
   240                              <1> 		;---------------------------------------
   241 0000185E 66B81000            <1> 		mov		ax, DS_KERNEL					;
   242 00001862 8ED8                <1> 		mov		ds, ax							;
   243 00001864 8EC0                <1> 		mov		es, ax							;
   244                              <1> 
   245                              <1> 		;---------------------------------------
   246                              <1> 		; タスクスイッチフラグをクリア
   247                              <1> 		;---------------------------------------
   248 00001866 0F06                <1> 		clts									; CR0.TS = 0;
   249                              <1> 
   250                              <1> 		;---------------------------------------
   251                              <1> 		; 前回/今回FPUを使用するタスク
   252                              <1> 		;---------------------------------------
   253 00001868 8B3D[B4180000]      <1> 		mov		edi, [.last_tss]				; EDI = 前回FPUを使用したタスクのTSS
   254 0000186E 0F00CE              <1> 		str		esi								; ESI = 今回FPUを使用したタスクのTSS
   255 00001871 83E6F8              <1> 		and		esi, ~0x0007					; // 特権レベルをマスク
   256                              <1> 
   257                              <1> 		;---------------------------------------
   258                              <1> 		; FPUの初回利用をチェック
   259                              <1> 		;---------------------------------------
   260 00001874 83FF00              <1> 		cmp		edi, 0							; if (0 != EDI)     // 前回使用したタスク
   261 00001877 7420                <1> 		je		.10F							; {
   262                              <1> 												;   
   263 00001879 39FE                <1> 		cmp		esi, edi						;   if (ESI != EDI) // 異なるタスク
   264 0000187B 741A                <1> 		je		.12E							;   {
   265                              <1> 												;     
   266 0000187D FA                  <1> 		cli										;     // 割り込み禁止
   267                              <1> 
   268                              <1> 		;---------------------------------------
   269                              <1> 		; 前回のFPUコンテキストを保存
   270                              <1> 		;---------------------------------------
   271 0000187E 89FB                <1> 		mov		ebx, edi						;     // 前回のタスク
   272 00001880 E833000000          <1> 		call	get_tss_base					;     // TSSアドレスを取得
   273 00001885 E841000000          <1> 		call	save_fpu_context				;     // FPUのコンテキストを保存
   274                              <1> 
   275                              <1> 		;---------------------------------------
   276                              <1> 		; 今回のFPUコンテキストを復帰
   277                              <1> 		;---------------------------------------
   278 0000188A 89F3                <1> 		mov		ebx, esi						;     // 今回のタスク
   279 0000188C E827000000          <1> 		call	get_tss_base					;     // TSSアドレスを取得
   280 00001891 E843000000          <1> 		call	load_fpu_context				;     // FPUのコンテキストを復帰
   281                              <1> 												;     
   282 00001896 FB                  <1> 		sti										;     // 割り込み許可
   283                              <1> .12E:											;   }
   284 00001897 EB0E                <1> 		jmp		.10E							; }
   285                              <1> .10F:											; else
   286                              <1> 												; {
   287                              <1> 												;   
   288 00001899 FA                  <1> 		cli										;   // 割り込み禁止
   289                              <1> 
   290                              <1> 		;---------------------------------------
   291                              <1> 		; 今回のFPUコンテキストを復帰
   292                              <1> 		;---------------------------------------
   293 0000189A 89F3                <1> 		mov		ebx, esi						;   // 今回のタスク
   294 0000189C E817000000          <1> 		call	get_tss_base					;   // 現在のタスクのTSSアドレスを取得
   295 000018A1 E833000000          <1> 		call	load_fpu_context				;   // FPUのコンテキストを復帰
   296                              <1> 												;   
   297 000018A6 FB                  <1> 		sti										;   // 割り込み許可
   298                              <1> .10E:											; }
   299                              <1> 												; 
   300 000018A7 8935[B4180000]      <1> 		mov		[.last_tss], esi				; // FPUを使用したタスクを保存
   301                              <1> 
   302                              <1> 		;---------------------------------------
   303                              <1> 		; 【レジスタの復帰】
   304                              <1> 		;---------------------------------------
   305 000018AD 07                  <1> 		pop		es
   306 000018AE 1F                  <1> 		pop		ds
   307 000018AF 61                  <1> 		popa
   308                              <1> 
   309 000018B0 CF                  <1> 		iret
   310                              <1> 
   311 000018B1 00<rep 3h>          <1> ALIGN 4, db 0
   312 000018B4 00000000            <1> .last_tss:	dd		0
   313                              <1> 
   314                              <1> ;************************************************************************
   315                              <1> ; GDTのセレクタのベースアドレスを取得
   316                              <1> ;------------------------------------------------------------------[IN]--
   317                              <1> ;	EBX : セレクタ
   318                              <1> ;-----------------------------------------------------------------[OUT]--
   319                              <1> ;	EAX : ベースアドレス
   320                              <1> ;************************************************************************
   321                              <1> get_tss_base:
   322 000018B8 8B83[EA080000]      <1> 		mov		eax, [GDT + ebx + 2]			; EAX   = TSS[23: 0];
   323 000018BE C1E008              <1> 		shl		eax, 8							; EAX <<= 8;
   324 000018C1 8A83[EF080000]      <1>         mov     al,  [GDT + ebx + 7]            ;  AL   = TSS[31:24];
   325 000018C7 C1C808              <1> 		ror		eax, 8							; EAX >>= 8;
   326                              <1> 
   327 000018CA C3                  <1> 		ret
   328                              <1> 
   329                              <1> ;************************************************************************
   330                              <1> ; FPUのコンテキストを保存
   331                              <1> ;------------------------------------------------------------------[IN]--
   332                              <1> ;	EAX : TSSの先頭アドレス
   333                              <1> ;************************************************************************
   334                              <1> save_fpu_context:
   335 000018CB DD7068              <1> 		fnsave	[eax + 104]						; // FPUコンテキストを保存
   336 000018CE C780D4000000010000- <1> 		mov		[eax + 104 + 108], dword 1		; saved = 1;
   336 000018D7 00                  <1>
   337                              <1> 
   338 000018D8 C3                  <1> 		ret
   339                              <1> 
   340                              <1> ;************************************************************************
   341                              <1> ; FPUのコンテキストを復帰
   342                              <1> ;------------------------------------------------------------------[IN]--
   343                              <1> ;	EAX : TSSの先頭アドレス
   344                              <1> ;************************************************************************
   345                              <1> load_fpu_context:
   346 000018D9 83B8D400000000      <1> 		cmp		[eax + 104 + 108], dword 0		; if (0 == saved)
   347 000018E0 7504                <1> 		jne		.10F							; {
   348 000018E2 DBE3                <1> 		fninit									;    // FPUの初期化
   349 000018E4 EB03                <1> 		jmp		.10E							; }
   350                              <1> .10F:											; else
   351                              <1> 												; {
   352 000018E6 DD6068              <1> 		frstor	[eax + 104]						;   // FPUコンテキストを復帰
   353                              <1> .10E:											; }
   354 000018E9 C3                  <1> 		ret
   355                              <1> 
   227                                  %include	"../modules/protect/wait_tick.s"
   228                              <1> ;************************************************************************
   229                              <1> ;	ウェイト
   230                              <1> ;------------------------------------------------------------------------
   231                              <1> ;	指定された回数、システム割り込みが発生するまで待つ
   232                              <1> ;========================================================================
   233                              <1> ;■書式		: void wait_tick(tick);
   234                              <1> ;
   235                              <1> ;■引数
   236                              <1> ;	tick	: システム割り込み回数
   237                              <1> ;
   238                              <1> ;■戻り値	: 無し
   239                              <1> ;************************************************************************
   240                              <1> wait_tick:
   241                              <1> 		;---------------------------------------
   242                              <1> 		; 【スタックフレームの構築】
   243                              <1> 		;---------------------------------------
   244                              <1> 												; ---------------
   245                              <1> 												; EBP+ 8| ウェイト
   246                              <1> 												; ---------------
   247 000018EA 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   248 000018EB 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   249                              <1> 												; ------|--------
   250                              <1> 
   251                              <1> 		;---------------------------------------
   252                              <1> 		; 【レジスタの保存】
   253                              <1> 		;---------------------------------------
   254 000018ED 50                  <1> 		push	eax
   255 000018EE 51                  <1> 		push	ecx
   256                              <1> 
   257                              <1> 		;---------------------------------------
   258                              <1> 		; ウェイト
   259                              <1> 		;---------------------------------------
   260 000018EF 8B4D08              <1> 		mov		ecx, [ebp +  8]					; ECX = ウェイト回数
   261 000018F2 A1[1C0B0000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX = TIMER;
   262                              <1> 												; do
   263                              <1> 												; {
   264 000018F7 3905[1C0B0000]      <1> .10L:	cmp		[TIMER_COUNT], eax				;   while (TIMER != EAX)
   265 000018FD 74F8                <1> 		je		.10L							;     ;
   266 000018FF 40                  <1> 		inc		eax								;   EAX++;
   267 00001900 E2F5                <1> 		loop	.10L							; } while (--ECX);
   268                              <1> 
   269                              <1> 		;---------------------------------------
   270                              <1> 		; レジスタの復帰
   271                              <1> 		;---------------------------------------
   272 00001902 59                  <1> 		pop		ecx
   273 00001903 58                  <1> 		pop		eax
   274                              <1> 
   275                              <1> 		;---------------------------------------
   276                              <1> 		; スタックフレームの破棄
   277                              <1> 		;---------------------------------------
   278 00001904 89EC                <1> 		mov		esp, ebp
   279 00001906 5D                  <1> 		pop		ebp
   280                              <1> 
   281 00001907 C3                  <1> 		ret
   282                              <1> 
   228                                  %include	"../modules/protect/memcpy.s"
   229                              <1> ;************************************************************************
   230                              <1> ;	メモリのコピー
   231                              <1> ;========================================================================
   232                              <1> ;■書式		: void memcpy(dst, src, size);
   233                              <1> ;
   234                              <1> ;■引数
   235                              <1> ;	dst		: コピー先
   236                              <1> ;	src		: コピー元
   237                              <1> ;	size	: バイト数
   238                              <1> ;
   239                              <1> ;■戻り値	: 無し
   240                              <1> ;************************************************************************
   241                              <1> memcpy:
   242                              <1> 		;---------------------------------------
   243                              <1> 		; 【スタックフレームの構築】
   244                              <1> 		;---------------------------------------
   245                              <1> 												; EBP+16| バイト数
   246                              <1> 												; EBP+12| コピー元
   247                              <1> 												; EBP+ 8| コピー先
   248                              <1> 												; ------|--------
   249 00001908 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   250 00001909 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   251                              <1> 												; ------|--------
   252                              <1> 		;---------------------------------------
   253                              <1> 		; 【レジスタの保存】
   254                              <1> 		;---------------------------------------
   255 0000190B 51                  <1> 		push	ecx
   256 0000190C 56                  <1> 		push	esi
   257 0000190D 57                  <1> 		push	edi
   258                              <1> 
   259                              <1> 		;---------------------------------------
   260                              <1> 		; バイト単位でのコピー
   261                              <1> 		;---------------------------------------
   262 0000190E FC                  <1> 		cld										; DF   = 0; // +方向
   263 0000190F 8B7D08              <1> 		mov		edi, [ebp + 8]					; EDI  = コピー先;
   264 00001912 8B750C              <1> 		mov		esi, [ebp +12]					; EDI  = コピー元;
   265 00001915 8B4D10              <1> 		mov		ecx, [ebp +16]					; EDI  = バイト数;
   266 00001918 F3A4                <1> 		rep movsb								; while (*EDI++ = *ESI++) ;
   267                              <1> 
   268                              <1> 		;---------------------------------------
   269                              <1> 		; 【レジスタの復帰】
   270                              <1> 		;---------------------------------------
   271 0000191A 5F                  <1> 		pop		edi
   272 0000191B 5E                  <1> 		pop		esi
   273 0000191C 59                  <1> 		pop		ecx
   274                              <1> 
   275                              <1> 		;---------------------------------------
   276                              <1> 		; 【スタックフレームの破棄】
   277                              <1> 		;---------------------------------------
   278 0000191D 89EC                <1> 		mov		esp, ebp
   279 0000191F 5D                  <1> 		pop		ebp
   280                              <1> 
   281 00001920 C3                  <1> 		ret
   282                              <1> 
   229                                  %include	"../modules/protect/ctrl_alt_end.s"
   230                              <1> ;************************************************************************
   231                              <1> ;	[CTRL+ALT+END]キーの同時押下検出処理
   232                              <1> ;========================================================================
   233                              <1> ;■書式		: DWORD ctrl_alt_end(key);
   234                              <1> ;
   235                              <1> ;■引数
   236                              <1> ;	key		: 入力されたキーコード
   237                              <1> ;
   238                              <1> ;■戻り値	: [CTRL+ALT+END]キーの同時押下が検出された時、0以外の値
   239                              <1> ;************************************************************************
   240                              <1> ctrl_alt_end:
   241                              <1> 		;---------------------------------------
   242                              <1> 		; 【スタックフレームの構築】
   243                              <1> 		;---------------------------------------
   244                              <1> 												; ------|--------
   245                              <1> 												; EBP+ 8| キーコード
   246                              <1> 												; ------+----------------
   247 00001921 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   248 00001922 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   249                              <1> 												; ------+----------------
   250                              <1> 
   251                              <1> 		;---------------------------------------
   252                              <1> 		; キー状態保存
   253                              <1> 		;---------------------------------------
   254 00001924 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = key;
   255 00001927 0FBAF007            <1> 		btr		eax, 7							; CF  = EAX & 0x80;
   256 0000192B 7209                <1> 		jc		.10F							; if (0 == CF)
   257 0000192D 0FAB05[73190000]    <1> 		bts		[.key_state], eax				; {
   258 00001934 EB07                <1> 		jmp		.10E							;   // フラグセット
   259                              <1> .10F:											; } else {
   260 00001936 0FB305[73190000]    <1> 		btr		[.key_state], eax				;   // フラグクリア
   261                              <1> .10E:											; }
   262                              <1> 
   263                              <1> 		;---------------------------------------
   264                              <1> 		; キー押下判定
   265                              <1> 		;---------------------------------------
   266                              <1> 												; do
   267                              <1> 												; {
   268 0000193D B81D000000          <1> 		mov		eax, 0x1D						;   // [Ctrl]キーが押されているか？
   269 00001942 0FA305[73190000]    <1> 		bt		[.key_state], eax				;   if (0 == key)
   270 00001949 7321                <1> 		jnc		.20E							;     break;
   271                              <1> 												;     
   272 0000194B B838000000          <1> 		mov		eax, 0x38						;   // [Alt]キーが押されているか？
   273 00001950 0FA305[73190000]    <1> 		bt		[.key_state], eax				;   if ('ALT' != key)
   274 00001957 7313                <1> 		jnc		.20E							;     break;
   275                              <1> 												;     
   276 00001959 B84F000000          <1> 		mov		eax, 0x4F						;   // [End]キーが押されているか？
   277 0000195E 0FA305[73190000]    <1> 		bt		[.key_state], eax				;   if ('End' != key)
   278 00001965 7305                <1> 		jnc		.20E							;     break;
   279                              <1> 												;   
   280 00001967 B8FFFFFFFF          <1> 		mov		eax, -1							;   ret = -1;
   281                              <1> 												;   
   282                              <1> .20E:											; } while (0);
   283                              <1> 
   284 0000196C C1F808              <1> 		sar		eax, 8							; ret >>= 8;
   285                              <1> 
   286                              <1> 		;---------------------------------------
   287                              <1> 		; 【スタックフレームの破棄】
   288                              <1> 		;---------------------------------------
   289 0000196F 89EC                <1> 		mov		esp, ebp
   290 00001971 5D                  <1> 		pop		ebp
   291                              <1> 
   292 00001972 C3                  <1> 		ret
   293                              <1> 
   294 00001973 00<rep 20h>         <1> .key_state:	times 32 db 0
   295                              <1> 
   230                                  %include	"../modules/protect/power_off.s"
   231                              <1> ;************************************************************************
   232                              <1> ;	電断処理を行う
   233                              <1> ;------------------------------------------------------------------------
   234                              <1> ;	電断処理に成功した場合、この関数は戻ってこない
   235                              <1> ;========================================================================
   236                              <1> ;■書式		: void power_off(void);
   237                              <1> ;
   238                              <1> ;■引数		: 無し
   239                              <1> ;
   240                              <1> ;■戻り値	: 無し
   241                              <1> ;************************************************************************
   242                              <1> power_off:
   243                              <1> 		;---------------------------------------
   244                              <1> 		; 【レジスタの保存】
   245                              <1> 		;---------------------------------------
   246 00001993 50                  <1> 		push	eax
   247 00001994 53                  <1> 		push	ebx
   248 00001995 51                  <1> 		push	ecx
   249 00001996 52                  <1> 		push	edx
   250 00001997 56                  <1> 		push	esi
   251                              <1> 
   252                              <1> 		;---------------------------------------
   253                              <1> 		; 電断開始メッセージ
   254                              <1> 		;---------------------------------------
   255 00001998 68[181B0000]680F02- <1> 		cdecl	draw_str, 25, 14, 0x020F, .s0	; draw_str();  // 電断開始メッセージ
   255 000019A0 00006A0E6A19E80AF7- <1>
   255 000019A9 FFFF6683C410        <1>
   256                              <1> 
   257                              <1> 		;---------------------------------------
   258                              <1> 		; ページングを無効化
   259                              <1> 		;---------------------------------------
   260 000019AF 0F20C0              <1> 		mov		eax, cr0						; // PGビットをクリア
   261 000019B2 25FFFFFF7F          <1> 		and		eax, 0x7FFF_FFFF				; CR0 &= ~PG;
   262 000019B7 0F22C0              <1> 		mov		cr0, eax						; 
   263 000019BA EB00                <1> 		jmp		$ + 2							; FLUSH();
   264                              <1> 
   265                              <1> 												; do
   266                              <1> 												; {
   267                              <1> 		;---------------------------------------
   268                              <1> 		; ACPIデータの確認
   269                              <1> 		;---------------------------------------
   270 000019BC A1047E0000          <1> 		mov		eax, [0x7C00 + 512 + 4]			;   EAX = ACPIアドレス;
   271 000019C1 8B1D087E0000        <1> 		mov		ebx, [0x7C00 + 512 + 8]			;   EBX = 長さ;
   272 000019C7 83F800              <1> 		cmp		eax, 0							;   if (0 == EAX)
   273 000019CA 7473                <1> 		je		.10E							;     break;
   274                              <1> 
   275                              <1> 		;---------------------------------------
   276                              <1> 		; RSDTテーブルの検索
   277                              <1> 		;---------------------------------------
   278 000019CC 68525344545350E86C- <1> 		cdecl	acpi_find, eax, ebx, 'RSDT'		;	EAX = acpi_find('RSDT');
   278 000019D5 0100006683C40C      <1>
   279 000019DC 83F800              <1> 		cmp		eax, 0							;   if (0 == EAX)
   280 000019DF 745E                <1> 		je		.10E							;     break;
   281                              <1> 
   282                              <1> 		;---------------------------------------
   283                              <1> 		; FACPテーブルの検索
   284                              <1> 		;---------------------------------------
   285 000019E1 684641435050E88601- <1> 		cdecl	find_rsdt_entry, eax, 'FACP'	;   EAX = find_rsdt_entry('FACP')
   285 000019EA 00006683C408        <1>
   286 000019F0 83F800              <1> 		cmp		eax, 0							;   if (0 == EAX)
   287 000019F3 744A                <1> 		je		.10E							;     break;
   288                              <1> 
   289 000019F5 8B5828              <1> 		mov		ebx, [eax + 40]					;   // DSDTアドレスの取得
   290 000019F8 83FB00              <1> 		cmp		ebx, 0							;   if (0 == DSDT)
   291 000019FB 7442                <1> 		je		.10E							;     break;
   292                              <1> 
   293                              <1> 		;---------------------------------------
   294                              <1> 		; ACPIレジスタの保存
   295                              <1> 		;---------------------------------------
   296 000019FD 8B4840              <1> 		mov		ecx, [eax + 64]					;   // ACPIレジスタの取得
   297 00001A00 890D[381B0000]      <1> 		mov		[PM1a_CNT_BLK], ecx				;   PM1a_CNT_BLK = FACP.PM1a_CNT_BLK;
   298                              <1> 
   299 00001A06 8B4844              <1> 		mov		ecx, [eax + 68]					;   // ACPIレジスタの取得
   300 00001A09 890D[3C1B0000]      <1> 		mov		[PM1b_CNT_BLK], ecx				;   PM1b_CNT_BLK = FACP.PM1b_CNT_BLK;
   301                              <1> 
   302                              <1> 		;---------------------------------------
   303                              <1> 		; S5名前空間の検索
   304                              <1> 		;---------------------------------------
   305 00001A0F 8B4B04              <1> 		mov		ecx, [ebx + 4]					;   ECX  = DSDT.Length; // データ長;
   306 00001A12 83E924              <1> 		sub		ecx, 36							;   ECX -= 36;          // テーブルヘッダ分減算
   307 00001A15 83C324              <1> 		add		ebx, 36							;   EBX += 36;          // テーブルヘッダ分加算
   308 00001A18 685F53355F5153E820- <1> 		cdecl	acpi_find, ebx, ecx, '_S5_'		;   EAX = acpi_find('_S5_');
   308 00001A21 0100006683C40C      <1>
   309 00001A28 83F800              <1> 		cmp		eax, 0							;   if (0 == EAX)
   310 00001A2B 7412                <1> 		je		.10E							;     break;
   311                              <1> 
   312                              <1> 		;---------------------------------------
   313                              <1> 		; パッケージデータの取得
   314                              <1> 		;---------------------------------------
   315 00001A2D 83C004              <1> 		add		eax, 4							;   EAX  = 先頭の要素;
   316 00001A30 50E86F0100006683C4- <1> 		cdecl	acpi_package_value, eax			;   EAX = パッケージデータ;
   316 00001A39 04                  <1>
   317 00001A3A A3[401B0000]        <1> 		mov		[S5_PACKAGE], eax				;   S5_PACKAGE = EAX;
   318                              <1> 
   319                              <1> .10E:											; } while (0);
   320                              <1> 
   321                              <1> 		;---------------------------------------
   322                              <1> 		; ページングを有効化
   323                              <1> 		;---------------------------------------
   324 00001A3F 0F20C0              <1> 		mov		eax, cr0						; // PGビットをセット
   325 00001A42 0D00000080          <1> 		or		eax, (1 << 31)					; CR0 |= PG;
   326 00001A47 0F22C0              <1> 		mov		cr0, eax						; 
   327 00001A4A EB00                <1> 		jmp		$ + 2							; FLUSH();
   328                              <1> 
   329                              <1> 												; do
   330                              <1> 												; {
   331                              <1> 		;---------------------------------------
   332                              <1> 		; ACPIレジスタの取得
   333                              <1> 		;---------------------------------------
   334 00001A4C 8B15[381B0000]      <1> 		mov		edx, [PM1a_CNT_BLK]				;   EDX = FACP.PM1a_CNT_BLK
   335 00001A52 83FA00              <1> 		cmp		edx, 0							;   if (0 == EDX)
   336 00001A55 0F8495000000        <1> 		je		.20E							;     break;
   337                              <1> 
   338                              <1> 		;---------------------------------------
   339                              <1> 		; カウントダウンの表示
   340                              <1> 		;---------------------------------------
   341 00001A5B 68[2F1B0000]680F02- <1> 		cdecl	draw_str, 38, 14, 0x020F, .s3	;   draw_str();  // カウントダウン...3
   341 00001A63 00006A0E6A26E847F6- <1>
   341 00001A6C FFFF6683C410        <1>
   342 00001A72 6A64E871FEFFFF6683- <1> 		cdecl	wait_tick, 100
   342 00001A7B C404                <1>
   343 00001A7D 68[2C1B0000]680F02- <1> 		cdecl	draw_str, 38, 14, 0x020F, .s2	;   draw_str();  // カウントダウン...2
   343 00001A85 00006A0E6A26E825F6- <1>
   343 00001A8E FFFF6683C410        <1>
   344 00001A94 6A64E84FFEFFFF6683- <1> 		cdecl	wait_tick, 100
   344 00001A9D C404                <1>
   345 00001A9F 68[291B0000]680F02- <1> 		cdecl	draw_str, 38, 14, 0x020F, .s1	;   draw_str();  // カウントダウン...1
   345 00001AA7 00006A0E6A26E803F6- <1>
   345 00001AB0 FFFF6683C410        <1>
   346 00001AB6 6A64E82DFEFFFF6683- <1> 		cdecl	wait_tick, 100
   346 00001ABF C404                <1>
   347                              <1> 
   348                              <1> 		;---------------------------------------
   349                              <1> 		; PM1a_CNT_BLKの設定
   350                              <1> 		;---------------------------------------
   351 00001AC1 660FB605[401B0000]  <1> 		movzx	ax, [S5_PACKAGE.0]				;   // PM1a_CNT_BLK
   352 00001AC9 66C1E00A            <1> 		shl		ax, 10							;   AX  = SLP_TYPx;
   353 00001ACD 660D0020            <1> 		or		ax, 1 << 13						;   AX |= SLP_EN;
   354 00001AD1 66EF                <1> 		out		dx, ax							;   out(PM1a_CNT_BLK, AX);
   355                              <1> 
   356                              <1> 		;---------------------------------------
   357                              <1> 		; PM1b_CNT_BLKの確認
   358                              <1> 		;---------------------------------------
   359 00001AD3 8B15[3C1B0000]      <1> 		mov		edx, [PM1b_CNT_BLK]				;   EDX = FACP.PM1b_CNT_BLK
   360 00001AD9 83FA00              <1> 		cmp		edx, 0							;   if (0 == EDX)
   361 00001ADC 7412                <1> 		je		.20E							;     break;
   362                              <1> 
   363                              <1> 		;---------------------------------------
   364                              <1> 		; PM1b_CNT_BLKの設定
   365                              <1> 		;---------------------------------------
   366 00001ADE 660FB605[411B0000]  <1> 		movzx	ax, [S5_PACKAGE.1]				;   // PM1b_CNT_BLK
   367 00001AE6 66C1E00A            <1> 		shl		ax, 10							;   AX  = SLP_TYPx;
   368 00001AEA 660D0020            <1> 		or		ax, 1 << 13						;   AX |= SLP_EN;
   369 00001AEE 66EF                <1> 		out		dx, ax							;   out(PM1b_CNT_BLK, AX);
   370                              <1> 
   371                              <1> .20E:											; } while (0);
   372                              <1> 
   373                              <1> 		;---------------------------------------
   374                              <1> 		; 電断待ち
   375                              <1> 		;---------------------------------------
   376 00001AF0 6A64E8F3FDFFFF6683- <1> 		cdecl	wait_tick, 100					; // 100[ms]ウェイト
   376 00001AF9 C404                <1>
   377                              <1> 
   378                              <1> 		;---------------------------------------
   379                              <1> 		; 電断失敗メッセージ
   380                              <1> 		;---------------------------------------
   381 00001AFB 68[321B0000]680F02- <1> 		cdecl	draw_str, 38, 14, 0x020F, .s4	;         draw_str();  // 電断失敗メッセージ
   381 00001B03 00006A0E6A26E8A7F5- <1>
   381 00001B0C FFFF6683C410        <1>
   382                              <1> 
   383                              <1> 		;---------------------------------------
   384                              <1> 		; 【レジスタの復帰】
   385                              <1> 		;---------------------------------------
   386 00001B12 5E                  <1> 		pop		esi
   387 00001B13 5A                  <1> 		pop		edx
   388 00001B14 59                  <1> 		pop		ecx
   389 00001B15 5B                  <1> 		pop		ebx
   390 00001B16 58                  <1> 		pop		eax
   391                              <1> 
   392 00001B17 C3                  <1> 		ret
   393                              <1> 
   394 00001B18 20506F776572206F66- <1> .s0:	db	" Power off...   ", 0
   394 00001B21 662E2E2E20202000    <1>
   395 00001B29 203100              <1> .s1:	db	" 1", 0
   396 00001B2C 203200              <1> .s2:	db	" 2", 0
   397 00001B2F 203300              <1> .s3:	db	" 3", 0
   398 00001B32 4E4700              <1> .s4:	db	"NG", 0
   399                              <1> 
   400 00001B35 00<rep 3h>          <1> ALIGN 4, db 0
   401 00001B38 00000000            <1> PM1a_CNT_BLK:	dd	0
   402 00001B3C 00000000            <1> PM1b_CNT_BLK:	dd	0
   403                              <1> S5_PACKAGE:
   404 00001B40 00                  <1> .0:				db	0
   405 00001B41 00                  <1> .1:				db	0
   406 00001B42 00                  <1> .2:				db	0
   407 00001B43 00                  <1> .3:				db	0
   408                              <1> 
   231                                  %include	"../modules/protect/acpi_find.s"
   232                              <1> ;************************************************************************
   233                              <1> ;	FACPテーブルの検索
   234                              <1> ;------------------------------------------------------------------------
   235                              <1> ;	4バイトのデータを検索する
   236                              <1> ;========================================================================
   237                              <1> ;■書式		: DWORD acpi_find(address, size, word);
   238                              <1> ;
   239                              <1> ;■引数
   240                              <1> ;	address	: アドレス
   241                              <1> ;	size	: サイズ
   242                              <1> ;	word	: 検索データ
   243                              <1> ;
   244                              <1> ;■戻り値	: 見つかったアドレス、見つからなかった場合は0
   245                              <1> ;************************************************************************
   246                              <1> acpi_find:
   247                              <1> 		;---------------------------------------
   248                              <1> 		; 【スタックフレームの構築】
   249                              <1> 		;---------------------------------------
   250                              <1> 												; ------|--------
   251                              <1> 												;    +16| テーブル名
   252                              <1> 												;    +12| サイズ
   253                              <1> 												;    + 8| アドレス
   254                              <1> 												; ------|--------
   255                              <1> 												;    + 4| EIP（戻り番地）
   256 00001B44 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   257 00001B45 89E5                <1> 		mov		ebp, esp						; ------+--------
   258                              <1> 
   259                              <1> 		;---------------------------------------
   260                              <1> 		; 【レジスタの保存】
   261                              <1> 		;---------------------------------------
   262 00001B47 53                  <1> 		push	ebx
   263 00001B48 51                  <1> 		push	ecx
   264 00001B49 57                  <1> 		push	edi
   265                              <1> 
   266                              <1> 		;---------------------------------------
   267                              <1> 		; 引数を取得
   268                              <1> 		;---------------------------------------
   269 00001B4A 8B7D08              <1> 		mov		edi, [ebp + 8]					; EDI  = アドレス;
   270 00001B4D 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX  = 長さ;
   271 00001B50 8B4510              <1> 		mov		eax, [ebp +16]					; EAX  = 検索データ;
   272                              <1> 
   273                              <1> 		;---------------------------------------
   274                              <1> 		; 名前の検索
   275                              <1> 		;---------------------------------------
   276 00001B53 FC                  <1> 		cld										; // DFクリア（+方向）
   277                              <1> .10L:											; for ( ; ; )
   278                              <1> 												; {
   279 00001B54 F2AE                <1> 		repne	scasb							;   while (AL != *EDI) EDI++;
   280                              <1> 												;   
   281 00001B56 83F900              <1> 		cmp		ecx, 0							;   if (0 == ECX)
   282 00001B59 7507                <1> 		jnz		.11E							;   {
   283 00001B5B B800000000          <1> 		mov		eax, 0							;     EAX = 0; // 見つからない
   284 00001B60 EB09                <1> 		jmp		.10E							;     break;
   285                              <1> .11E:											;   }
   286                              <1> 												;   
   287 00001B62 263B47FF            <1> 		cmp		eax, [es:edi - 1]				;   if (EAX != *EDI) // 4文字分一致？
   288 00001B66 75EC                <1> 		jne		.10L							;     continue;      // （不一致）
   289                              <1> 												;   
   290 00001B68 4F                  <1> 		dec		edi								;   EAX = EDI - 1;
   291 00001B69 89F8                <1> 		mov		eax, edi						;   
   292                              <1> .10E:											; }
   293                              <1> 
   294                              <1> 		;---------------------------------------
   295                              <1> 		; 【レジスタの復帰】
   296                              <1> 		;---------------------------------------
   297 00001B6B 5F                  <1> 		pop		edi
   298 00001B6C 59                  <1> 		pop		ecx
   299 00001B6D 5B                  <1> 		pop		ebx
   300                              <1> 
   301                              <1> 		;---------------------------------------
   302                              <1> 		; 【スタックフレームの破棄】
   303                              <1> 		;---------------------------------------
   304 00001B6E 89EC                <1> 		mov		esp, ebp
   305 00001B70 5D                  <1> 		pop		ebp
   306                              <1> 
   307 00001B71 C3                  <1> 		ret
   308                              <1> 
   232                                  %include	"../modules/protect/find_rsdt_entry.s"
   233                              <1> ;************************************************************************
   234                              <1> ;	RSDTテーブルに登録されているテーブルを検索
   235                              <1> ;------------------------------------------------------------------------
   236                              <1> ;	RSDTテーブルからFACPテーブルのアドレスを取得する
   237                              <1> ;========================================================================
   238                              <1> ;■書式		: DWORD find_rsdt_entry(facp, word);
   239                              <1> ;
   240                              <1> ;■引数
   241                              <1> ;	facp	: RSDTテーブルのアドレス
   242                              <1> ;	word	: テーブル識別子
   243                              <1> ;
   244                              <1> ;■戻り値	: 見つかったアドレス、見つからなかった場合は0
   245                              <1> ;************************************************************************
   246                              <1> find_rsdt_entry:
   247                              <1> 		;---------------------------------------
   248                              <1> 		; 【スタックフレームの構築】
   249                              <1> 		;---------------------------------------
   250                              <1> 												; ------|--------
   251                              <1> 												;    +12| テーブル名
   252                              <1> 												;    + 8| アドレス
   253                              <1> 												; ------|--------
   254                              <1> 												;    + 4| EIP（戻り番地）
   255 00001B72 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   256 00001B73 89E5                <1> 		mov		ebp, esp						; ------+--------
   257                              <1> 
   258                              <1> 		;---------------------------------------
   259                              <1> 		; 【レジスタの保存】
   260                              <1> 		;---------------------------------------
   261 00001B75 53                  <1> 		push	ebx
   262 00001B76 51                  <1> 		push	ecx
   263 00001B77 56                  <1> 		push	esi
   264 00001B78 57                  <1> 		push	edi
   265                              <1> 
   266                              <1> 		;---------------------------------------
   267                              <1> 		; 引数を取得
   268                              <1> 		;---------------------------------------
   269 00001B79 8B7508              <1> 		mov		esi, [ebp + 8]					; EDI  = RSDT;
   270 00001B7C 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX  = 名前;
   271                              <1> 
   272 00001B7F BB00000000          <1> 		mov		ebx, 0							; adr = 0;
   273                              <1> 
   274                              <1> 		;---------------------------------------
   275                              <1> 		; ACPIテーブル検索処理
   276                              <1> 		;---------------------------------------
   277 00001B84 89F7                <1> 		mov		edi, esi						; 
   278 00001B86 037E04              <1> 		add		edi, [esi + 4]					; EDI = &ENTRY[MAX];
   279 00001B89 83C624              <1> 		add		esi, 36							; ESI = &ENTRY[0];
   280                              <1> .10L:											; 
   281 00001B8C 39FE                <1> 		cmp		esi, edi						; while (ESI < EDI)
   282 00001B8E 7D0B                <1> 		jge		.10E							; {
   283                              <1> 												;   
   284 00001B90 AD                  <1> 		lodsd									;   EAX = [ESI++];   // エントリ
   285                              <1> 												;   
   286 00001B91 3908                <1> 		cmp		[eax], ecx						;   if (ECX == *EAX) // テーブル名と比較
   287 00001B93 7504                <1> 		jne		.12E							;   {
   288 00001B95 89C3                <1> 		mov		ebx, eax						;     adr = EAX;     // FACPのアドレス
   289 00001B97 EB02                <1> 		jmp		.10E							;     break;
   290 00001B99 EBF1                <1> .12E:	jmp		.10L							;   }
   291                              <1> .10E:											; }
   292                              <1> 
   293 00001B9B 89D8                <1> 		mov		eax, ebx						; return adr;
   294                              <1> 
   295                              <1> 		;---------------------------------------
   296                              <1> 		; 【レジスタの復帰】
   297                              <1> 		;---------------------------------------
   298 00001B9D 5F                  <1> 		pop		edi
   299 00001B9E 5E                  <1> 		pop		esi
   300 00001B9F 59                  <1> 		pop		ecx
   301 00001BA0 5B                  <1> 		pop		ebx
   302                              <1> 
   303                              <1> 		;---------------------------------------
   304                              <1> 		; 【スタックフレームの破棄】
   305                              <1> 		;---------------------------------------
   306 00001BA1 89EC                <1> 		mov		esp, ebp
   307 00001BA3 5D                  <1> 		pop		ebp
   308                              <1> 
   309 00001BA4 C3                  <1> 		ret
   310                              <1> 
   233                                  %include	"../modules/protect/acpi_package_value.s"
   234                              <1> ;************************************************************************
   235                              <1> ;	パッケージ要素（数値）の取得
   236                              <1> ;------------------------------------------------------------------------
   237                              <1> ;	簡易的なパッケージ内のデータ取得（下位2バイト）
   238                              <1> ;========================================================================
   239                              <1> ;■書式		: DWORD acpi_package_value(address);
   240                              <1> ;
   241                              <1> ;■引数
   242                              <1> ;	address	: パッケージへのアドレス
   243                              <1> ;
   244                              <1> ;■戻り値	: パッケージ要素
   245                              <1> ;************************************************************************
   246                              <1> acpi_package_value:
   247                              <1> 		;---------------------------------------
   248                              <1> 		; 【スタックフレームの構築】
   249                              <1> 		;---------------------------------------
   250                              <1> 												; ------|--------
   251                              <1> 												;    + 8| パッケージへのアドレス
   252                              <1> 												; ------|--------
   253                              <1> 												;    + 4| EIP（戻り番地）
   254 00001BA5 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   255 00001BA6 89E5                <1> 		mov		ebp, esp						; ------+--------
   256                              <1> 
   257                              <1> 		;---------------------------------------
   258                              <1> 		; 【レジスタの保存】
   259                              <1> 		;---------------------------------------
   260 00001BA8 56                  <1> 		push	esi
   261                              <1> 
   262                              <1> 		;---------------------------------------
   263                              <1> 		; 引数を取得
   264                              <1> 		;---------------------------------------
   265 00001BA9 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = パッケージへのアドレス;
   266                              <1> 
   267                              <1> 		;---------------------------------------
   268                              <1> 		; パケットのヘッダをスキップ
   269                              <1> 		;---------------------------------------
   270 00001BAC 46                  <1> 		inc		esi								; ESI++; // Skip 'PackageOp'
   271 00001BAD 46                  <1> 		inc		esi								; ESI++; // Skip 'PkgLength'
   272 00001BAE 46                  <1> 		inc		esi								; ESI++; // Skip 'NumElements'
   273                              <1> 												; ESI = PackageElemantList;
   274                              <1> 
   275                              <1> 		;---------------------------------------
   276                              <1> 		; 2バイトのみを取得
   277                              <1> 		;---------------------------------------
   278 00001BAF 8A06                <1> 		mov		al, [esi]						; AL = *ESI;
   279 00001BB1 3C0B                <1> 		cmp		al, 0x0B						; switch (AL)
   280 00001BB3 740A                <1> 		je		.C0B							; {
   281 00001BB5 3C0C                <1> 		cmp		al, 0x0C						; 
   282 00001BB7 7406                <1> 		je		.C0C							; 
   283 00001BB9 3C0E                <1> 		cmp		al, 0x0E						; 
   284 00001BBB 7402                <1> 		je		.C0E							; 
   285 00001BBD EB08                <1> 		jmp		.C0A							; 
   286                              <1> .C0B:											; case 0x0B: // 'WordPrefix'
   287                              <1> .C0C:											; case 0x0C: // 'DWordPrefix'
   288                              <1> .C0E:											; case 0x0E: // 'QWordPrefix'
   289 00001BBF 8A4601              <1> 		mov		al, [esi + 1]					;   AL = ESI[1];
   290 00001BC2 8A6602              <1> 		mov		ah, [esi + 2]					;   AH = ESI[2];
   291 00001BC5 EB13                <1> 		jmp		.10E							;   break;
   292                              <1> 												;   
   293                              <1> .C0A:											; default:   // 'BytePrefix' | 'ConstObj'
   294                              <1> 												;   // 最初の1バイト
   295 00001BC7 3C0A                <1> 		cmp		al, 0x0A						;   if (0x0A == AL)
   296 00001BC9 7504                <1> 		jne		.11E							;   {
   297 00001BCB 8A4601              <1> 		mov		al, [esi + 1]					;     AL = *ESI;
   298 00001BCE 46                  <1> 		inc		esi								;     ESI++;
   299                              <1> .11E:											;   }
   300                              <1> 												;   
   301                              <1> 												;   // 次のの1バイト
   302 00001BCF 46                  <1> 		inc		esi								;   ESI++;
   303                              <1> 												;   
   304 00001BD0 8A26                <1> 		mov		ah, [esi]						;   AH = *ESI;
   305 00001BD2 80FC0A              <1> 		cmp		ah, 0x0A						;   if (0x0A == AL)
   306 00001BD5 7503                <1> 		jne		.12E							;   {
   307 00001BD7 8A6601              <1> 		mov		ah, [esi + 1]					;     AH = ESI[1];
   308                              <1> .12E:											;   }
   309                              <1> .10E:											; }
   310                              <1> 
   311                              <1> 		;---------------------------------------
   312                              <1> 		; 【レジスタの復帰】
   313                              <1> 		;---------------------------------------
   314 00001BDA 5E                  <1> 		pop		esi
   315                              <1> 
   316                              <1> 		;---------------------------------------
   317                              <1> 		; 【スタックフレームの破棄】
   318                              <1> 		;---------------------------------------
   319 00001BDB 89EC                <1> 		mov		esp, ebp
   320 00001BDD 5D                  <1> 		pop		ebp
   321                              <1> 
   322 00001BDE C3                  <1> 		ret
   323                              <1> 
   234                                  
   235                                  ;************************************************************************
   236                                  ;	パディング
   237                                  ;************************************************************************
   238 00001BDF 00<rep 421h>            		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
   239                                  
   240                                  ;************************************************************************
   241                                  ;	FAT
   242                                  ;************************************************************************
   243                                  %include	"fat.s"
   244                              <1> ;************************************************************************
   245                              <1> ;	FAT:FAT-1
   246                              <1> ;************************************************************************
   247                              <1> 		times (FAT1_START) - ($ - $$)	db	0x00
   248                              <1> ;------------------------------------------------------------------------
   249                              <1> FAT1:
   250 00002000 FFFF                <1> 		db		0xFF, 0xFF												; クラスタ:0
   251 00002002 FFFF                <1> 		dw		0xFFFF													; クラスタ:1
   252 00002004 FFFF                <1> 		dw		0xFFFF													; クラスタ:2
   253                              <1> 
   254                              <1> ;************************************************************************
   255                              <1> ;	FAT:FAT-2
   256                              <1> ;************************************************************************
   257 00002006 00<rep 1FFFAh>      <1> 		times (FAT2_START) - ($ - $$)	db	0x00
   258                              <1> ;------------------------------------------------------------------------
   259                              <1> FAT2:
   260 00022000 FFFF                <1> 		db		0xFF, 0xFF												; クラスタ:0
   261 00022002 FFFF                <1> 		dw		0xFFFF													; クラスタ:1
   262 00022004 FFFF                <1> 		dw		0xFFFF													; クラスタ:2
   263                              <1> 
   264                              <1> ;************************************************************************
   265                              <1> ;	FAT:ルートディレクトリ領域
   266                              <1> ;************************************************************************
   267 00022006 00<rep 1FFFAh>      <1> 		times (ROOT_START) - ($ - $$)	db	0x00
   268                              <1> ;------------------------------------------------------------------------
   269                              <1> FAT_ROOT:
   270 00042000 424F4F5441424C4544- <1> 		db		'BOOTABLE', 'DSK'										; + 0:ボリュームラベル
   270 00042009 534B                <1>
   271 0004200B 28                  <1> 		db		ATTR_ARCHIVE | ATTR_VOLUME_ID							; +11:属性
   272 0004200C 00                  <1> 		db		0x00													; +12:（予約）
   273 0004200D 00                  <1> 		db		0x00													; +13:TS
   274 0004200E 0000                <1> 		dw		( 0 << 11) | ( 0 << 5) | (0 / 2)						; +14:作成時刻
   275 00042010 0100                <1> 		dw		( 0 <<  9) | ( 0 << 5) | ( 1)							; +16:作成日
   276 00042012 0100                <1> 		dw		( 0 <<  9) | ( 0 << 5) | ( 1)							; +18:アクセス日
   277 00042014 0000                <1> 		dw		0x0000													; +20:（予約）
   278 00042016 0000                <1> 		dw		( 0 << 11) | ( 0 << 5) | (0 / 2)						; +22:更新時刻
   279 00042018 0100                <1> 		dw		( 0 <<  9) | ( 0 << 5) | ( 1)							; +24:更新日
   280 0004201A 0000                <1> 		dw		0														; +26:先頭クラスタ
   281 0004201C 00000000            <1> 		dd		0														; +28:ファイルサイズ
   282                              <1> 
   283 00042020 5350454349414C2054- <1> 		db		'SPECIAL ', 'TXT'										; + 0:ボリュームラベル
   283 00042029 5854                <1>
   284 0004202B 20                  <1> 		db		ATTR_ARCHIVE											; +11:属性
   285 0004202C 00                  <1> 		db		0x00													; +12:（予約）
   286 0004202D 00                  <1> 		db		0x00													; +13:TS
   287 0004202E 0000                <1> 		dw		( 0 << 11) | ( 0 << 5) | (0 / 2)						; +14:作成時刻
   288 00042030 2100                <1> 		dw		( 0 <<  9) | ( 1 << 5) | ( 1)							; +16:作成日
   289 00042032 2100                <1> 		dw		( 0 <<  9) | ( 1 << 5) | ( 1)							; +18:アクセス日
   290 00042034 0000                <1> 		dw		0x0000													; +20:（予約）
   291 00042036 0000                <1> 		dw		( 0 << 11) | ( 0 << 5) | (0 / 2)						; +22:更新時刻
   292 00042038 2100                <1> 		dw		( 0 <<  9) | ( 1 << 5) | ( 1)							; +24:更新日
   293 0004203A 0200                <1> 		dw		2														; +26:先頭クラスタ
   294 0004203C 0B000000            <1> 		dd		FILE.end - FILE											; +28:ファイルサイズ
   295                              <1> 
   296                              <1> ;************************************************************************
   297                              <1> ;	FAT:データ領域
   298                              <1> ;************************************************************************
   299 00042040 00<rep 3FC0h>       <1> 		times FILE_START - ($ - $$)	db	0x00
   300                              <1> ;------------------------------------------------------------------------
   301 00046000 68656C6C6F2C204641- <1> FILE:	db		'hello, FAT!'
   301 00046009 5421                <1>
   302 0004600B 00                  <1> .end:	db		0
   303                              <1> 
   304 0004600C 00<rep 1F4h>        <1> ALIGN 512, db 0x00
   305                              <1> 
   306 00046200 00<rep 7E00h>       <1> 		times (512 * 63)	db	0x00
   307                              <1> 
   244                                  
