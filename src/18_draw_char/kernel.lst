     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  ;************************************************************************
     8                                  ;	マクロ
     9                                  ;************************************************************************
    10                                  %include	"../include/define.s"
    11                              <1> ;************************************************************************
    12                              <1> ;	メモリイメージ
    13                              <1> ;************************************************************************
    14                              <1> 
    15                              <1> 		;---------------------------------------
    16                              <1> 		;           |            | 
    17                              <1> 		;           |____________| 
    18                              <1> 		; 0000_7A00 |            | ( 512) スタック
    19                              <1> 		;           |____________| 
    20                              <1> 		; 0000_7C00 |            | (  8K) ブート
    21                              <1> 		;           =            = 
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    24                              <1> 		;           =            = 
    25                              <1> 		;           |____________| 
    26                              <1> 		; 0000_BC00 |////////////| 
    27                              <1> 		;           =            = 
    28                              <1> 		;           |____________| 
    29                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    32                              <1> 		;           |____________| 
    33                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    34                              <1> 		;           |            | 
    35                              <1> 		;           =            = 
    36                              <1> 		;           |____________| 
    37                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    38                              <1> 		;           |            | （各タスク1K）
    39                              <1> 		;           =            = 
    40                              <1> 		;           |____________| 
    41                              <1> 		; 0010_5000 |            | Dir
    42                              <1> 		;      6000 |____________| Page
    43                              <1> 		; 0010_7000 |            | Dir
    44                              <1> 		;      8000 |____________| Page
    45                              <1> 		; 0010_9000 |////////////| 
    46                              <1> 		;           |            | 
    47                              <1> 
    48                              <1> 
    49                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    50                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    51                              <1> 
    52                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    53                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    54                              <1> 
    55                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    56                              <1> 
    57                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    58                              <1> 
    59                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    60                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    61                              <1> 
    62                              <1> 		E820_RECORD_SIZE	equ		20
    63                              <1> 
    64                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    11                                  %include	"../include/macro.s"
    12                              <1> ;************************************************************************
    13                              <1> ; 関数呼び出し用マクロ
    14                              <1> ;
    15                              <1> ; 使い方：
    16                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    17                              <1> ;
    18                              <1> ;************************************************************************
    19                              <1> 
    20                              <1> %macro cdecl 1-*.nolist
    21                              <1> 
    22                              <1>     %rep %0 - 1
    23                              <1>         push    %{-1:-1}
    24                              <1>         %rotate -1
    25                              <1>     %endrep
    26                              <1>     %rotate -1
    27                              <1> 
    28                              <1>         call    %1
    29                              <1> 
    30                              <1>     %if 1 < %0
    31                              <1>         add     sp,(__BITS__ >> 3) * (%0 - 1)
    32                              <1>     %endif
    33                              <1> 
    34                              <1> %endmacro
    35                              <1> 
    36                              <1> ;************************************************************************
    37                              <1> ;	構造体
    38                              <1> ;************************************************************************
    39                              <1> 
    40                              <1> ;-----------------------------------------------
    41                              <1> ;	ドライブパラメータ
    42                              <1> ;-----------------------------------------------
    43                              <1> struc drive
    44 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
    45 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
    46 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
    47 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
    48                              <1> endstruc
    12                                  
    13                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    14                                  
    15                                  [BITS 32]
    16                                  ;************************************************************************
    17                                  ;	エントリポイント
    18                                  ;************************************************************************
    19                                  kernel:
    20                                  		;---------------------------------------
    21                                  		; フォントアドレスを取得
    22                                  		;---------------------------------------
    23 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    24 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    25 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    26 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    27 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    28 00000011 A3[90000000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    29                                  
    30                                  		;---------------------------------------
    31                                  		; 文字の表示
    32                                  		;---------------------------------------
    33 00000016 6A41680F0100006A00-     		cdecl	draw_char, 0, 0, 0x010F, 'A'
    33 0000001F 6A00E8210100006683-
    33 00000028 C410               
    34 0000002A 6A42680F0100006A00-     		cdecl	draw_char, 1, 0, 0x010F, 'B'
    34 00000033 6A01E80D0100006683-
    34 0000003C C410               
    35 0000003E 6A43680F0100006A00-     		cdecl	draw_char, 2, 0, 0x010F, 'C'
    35 00000047 6A02E8F90000006683-
    35 00000050 C410               
    36                                  
    37 00000052 6A3068020400006A00-     		cdecl	draw_char, 0, 0, 0x0402, '0'
    37 0000005B 6A00E8E50000006683-
    37 00000064 C410               
    38 00000066 6A3168120200006A00-     		cdecl	draw_char, 1, 0, 0x0212, '1'
    38 0000006F 6A01E8D10000006683-
    38 00000078 C410               
    39 0000007A 6A5F68120200006A00-     		cdecl	draw_char, 2, 0, 0x0212, '_'
    39 00000083 6A02E8BD0000006683-
    39 0000008C C410               
    40                                  
    41                                  		;---------------------------------------
    42                                  		; 処理の終了
    43                                  		;---------------------------------------
    44 0000008E EBFE                    		jmp		$								; while (1) ; // 無限ループ
    45                                  
    46                                  ALIGN 4, db 0
    47 00000090 00000000                FONT_ADR:	dd	0
    48                                  
    49                                  ;************************************************************************
    50                                  ;	モジュール
    51                                  ;************************************************************************
    52                                  %include	"../modules/protect/vga.s"
    53                              <1> ;************************************************************************
    54                              <1> ;	読み込みプレーンの選択
    55                              <1> ;========================================================================
    56                              <1> ;■書式		: void vga_set_read_plane(plane);
    57                              <1> ;
    58                              <1> ;■引数
    59                              <1> ;	plane	: 読み込みプレーン
    60                              <1> ;
    61                              <1> ;■戻り値	: 無し
    62                              <1> ;************************************************************************
    63                              <1> vga_set_read_plane:
    64                              <1> 		;---------------------------------------
    65                              <1> 		; 【スタックフレームの構築】
    66                              <1> 		;---------------------------------------
    67                              <1> 												; EBP+ 8| プレーン（インデックス）
    68                              <1> 												; ------+----------------
    69 00000094 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    70 00000095 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    71                              <1> 												; ------+----------------
    72                              <1> 
    73                              <1> 		;---------------------------------------
    74                              <1> 		; 【レジスタの保存】
    75                              <1> 		;---------------------------------------
    76 00000097 50                  <1> 		push	eax
    77 00000098 52                  <1> 		push	edx
    78                              <1> 
    79                              <1> 		;---------------------------------------
    80                              <1> 		; 読み込みプレーンの選択
    81                              <1> 		;---------------------------------------
    82 00000099 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
    83 0000009C 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
    84 0000009F B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
    85 000000A1 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
    86 000000A5 66EF                <1> 		out		dx, ax							; // ポート出力
    87                              <1> 
    88                              <1> 		;---------------------------------------
    89                              <1> 		; 【レジスタの復帰】
    90                              <1> 		;---------------------------------------
    91 000000A7 5A                  <1> 		pop		edx
    92 000000A8 58                  <1> 		pop		eax
    93                              <1> 
    94                              <1> 		;---------------------------------------
    95                              <1> 		; 【スタックフレームの破棄】
    96                              <1> 		;---------------------------------------
    97 000000A9 89EC                <1> 		mov		esp, ebp
    98 000000AB 5D                  <1> 		pop		ebp
    99                              <1> 
   100 000000AC C3                  <1> 		ret
   101                              <1> 
   102                              <1> 
   103                              <1> ;************************************************************************
   104                              <1> ;	書き込みプレーンを選択
   105                              <1> ;========================================================================
   106                              <1> ;■書式		: void vga_set_write_plane(plane);
   107                              <1> ;
   108                              <1> ;■引数
   109                              <1> ;	plane	: 書き込みプレーン
   110                              <1> ;
   111                              <1> ;■戻り値	: 無し
   112                              <1> ;************************************************************************
   113                              <1> vga_set_write_plane:
   114                              <1> 		;---------------------------------------
   115                              <1> 		; 【スタックフレームの構築】
   116                              <1> 		;---------------------------------------
   117                              <1> 												; EBP+ 8| プレーン（ビット指定）
   118                              <1> 												; ------+----------------
   119 000000AD 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   120 000000AE 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   121                              <1> 												; ------+----------------
   122                              <1> 
   123                              <1> 		;---------------------------------------
   124                              <1> 		; 【レジスタの保存】
   125                              <1> 		;---------------------------------------
   126 000000B0 50                  <1> 		push	eax
   127 000000B1 52                  <1> 		push	edx
   128                              <1> 
   129                              <1> 		;---------------------------------------
   130                              <1> 		; 書き込みプレーンの選択
   131                              <1> 		;---------------------------------------
   132 000000B2 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
   133 000000B5 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
   134 000000B8 B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
   135 000000BA 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
   136 000000BE 66EF                <1> 		out		dx, ax							; // ポート出力
   137                              <1> 
   138                              <1> 		;---------------------------------------
   139                              <1> 		; 【レジスタの復帰】
   140                              <1> 		;---------------------------------------
   141 000000C0 5A                  <1> 		pop		edx
   142 000000C1 58                  <1> 		pop		eax
   143                              <1> 
   144                              <1> 		;---------------------------------------
   145                              <1> 		; 【スタックフレームの破棄】
   146                              <1> 		;---------------------------------------
   147 000000C2 89EC                <1> 		mov		esp, ebp
   148 000000C4 5D                  <1> 		pop		ebp
   149                              <1> 
   150 000000C5 C3                  <1> 		ret
   151                              <1> 
   152                              <1> 
   153                              <1> ;************************************************************************
   154                              <1> ;	フォントの書き込み
   155                              <1> ;========================================================================
   156                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   157                              <1> ;
   158                              <1> ;■引数
   159                              <1> ;	font	: FONTアドレス
   160                              <1> ;	vram	: VRAMアドレス
   161                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   162                              <1> ;	color	: 描画色
   163                              <1> ;
   164                              <1> ;■戻り値	: 無し
   165                              <1> ;************************************************************************
   166                              <1> vram_font_copy:
   167                              <1> 		;---------------------------------------
   168                              <1> 		; 【スタックフレームの構築】
   169                              <1> 		;---------------------------------------
   170                              <1> 												; EBP+20| 色（背景/前景色）
   171                              <1> 												; EBP+16| プレーン（ビット指定）
   172                              <1> 												; EBP+12| VRAMアドレス
   173                              <1> 												; EBP+ 8| FONTアドレス
   174                              <1> 												; ------+----------------
   175 000000C6 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   176 000000C7 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   177                              <1> 												; ------+----------------
   178                              <1> 
   179                              <1> 		;---------------------------------------
   180                              <1> 		; 【レジスタの保存】
   181                              <1> 		;---------------------------------------
   182 000000C9 50                  <1> 		push	eax
   183 000000CA 53                  <1> 		push	ebx
   184 000000CB 51                  <1> 		push	ecx
   185 000000CC 52                  <1> 		push	edx
   186 000000CD 56                  <1> 		push	esi
   187 000000CE 57                  <1> 		push	edi
   188                              <1> 
   189                              <1> 		;---------------------------------------
   190                              <1> 		; 【処理の開始】
   191                              <1> 		;---------------------------------------
   192 000000CF 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   193 000000D2 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   194 000000D5 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   195 000000D9 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   196                              <1> 
   197 000000DD 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   198 000000DF 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   199 000000E2 FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   200                              <1> 
   201 000000E4 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   202 000000E6 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   203 000000E9 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   204                              <1> 
   205                              <1> 		;---------------------------------------
   206                              <1> 		; 16ドットフォントのコピー
   207                              <1> 		;---------------------------------------
   208 000000EB FC                  <1> 		cld										; DF  = 0; // アドレス加算
   209                              <1> 
   210 000000EC B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   211                              <1> .10L:											; do
   212                              <1> 												; {
   213                              <1> 		;---------------------------------------
   214                              <1> 		; フォントマスクの作成
   215                              <1> 		;---------------------------------------
   216 000000F1 AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   217 000000F2 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   218 000000F4 F6D4                <1> 		not		ah								;   
   219                              <1> 
   220                              <1> 		;---------------------------------------
   221                              <1> 		; 前景色
   222                              <1> 		;---------------------------------------
   223 000000F6 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   224                              <1> 
   225                              <1> 		;---------------------------------------
   226                              <1> 		; 背景色
   227                              <1> 		;---------------------------------------
   228 000000F8 F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   229 000000FE 7404                <1> 		jz		.11F							;   {
   230 00000100 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   231 00000102 EB02                <1> 		jmp		.11E							;   }
   232                              <1> .11F:											;   else
   233                              <1> 												;   {
   234 00000104 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   235                              <1> .11E:											;   }
   236                              <1> 
   237                              <1> 		;---------------------------------------
   238                              <1> 		; 前景色と背景色を合成
   239                              <1> 		;---------------------------------------
   240 00000106 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   241                              <1> 
   242                              <1> 		;---------------------------------------
   243                              <1> 		; 新しい値を出力
   244                              <1> 		;---------------------------------------
   245 00000108 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   246                              <1> 
   247 0000010A 83C750              <1> 		add		edi, 80							;   EDI += 80;
   248 0000010D E2E2                <1> 		loop	.10L							; } while (--ECX);
   249                              <1> .10E:											; 
   250                              <1> 
   251                              <1> 		;---------------------------------------
   252                              <1> 		; 【レジスタの復帰】
   253                              <1> 		;---------------------------------------
   254 0000010F 5F                  <1> 		pop		edi
   255 00000110 5E                  <1> 		pop		esi
   256 00000111 5A                  <1> 		pop		edx
   257 00000112 59                  <1> 		pop		ecx
   258 00000113 5B                  <1> 		pop		ebx
   259 00000114 58                  <1> 		pop		eax
   260                              <1> 
   261                              <1> 		;---------------------------------------
   262                              <1> 		; 【スタックフレームの破棄】
   263                              <1> 		;---------------------------------------
   264 00000115 89EC                <1> 		mov		esp, ebp
   265 00000117 5D                  <1> 		pop		ebp
   266                              <1> 
   267 00000118 C3                  <1> 		ret
   268                              <1> 
   269                              <1> 
   270                              <1> ;************************************************************************
   271                              <1> ;	ビットパターンの書き込み
   272                              <1> ;========================================================================
   273                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   274                              <1> ;
   275                              <1> ;■引数
   276                              <1> ;	bit		: 出力ビットパターン
   277                              <1> ;	vram	: VRAMアドレス
   278                              <1> ;	flag	: 1:セット, 0:クリア
   279                              <1> ;
   280                              <1> ;■戻り値	: 無し
   281                              <1> ;************************************************************************
   282                              <1> vram_bit_copy:
   283                              <1> 		;---------------------------------------
   284                              <1> 		; 【スタックフレームの構築】
   285                              <1> 		;---------------------------------------
   286                              <1> 												; EBP+20| 色（背景/前景色）
   287                              <1> 												; EBP+16| プレーン（ビット指定）
   288                              <1> 												; EBP+12| VRAMアドレス
   289                              <1> 												; EBP+ 8| 出力ビットパターン
   290                              <1> 												; ------+----------------
   291 00000119 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   292 0000011A 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   293                              <1> 												; ------+----------------
   294                              <1> 
   295                              <1> 		;---------------------------------------
   296                              <1> 		; 【レジスタの保存】
   297                              <1> 		;---------------------------------------
   298 0000011C 50                  <1> 		push	eax
   299 0000011D 53                  <1> 		push	ebx
   300 0000011E 57                  <1> 		push	edi
   301                              <1> 
   302                              <1> 		;---------------------------------------
   303                              <1> 		; 【処理の開始】
   304                              <1> 		;---------------------------------------
   305 0000011F 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   306 00000122 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   307 00000126 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   308                              <1> 
   309 0000012A 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   310 0000012C 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   311 0000012F FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   312                              <1> 
   313                              <1> 		;---------------------------------------
   314                              <1> 		; マスクデータの作成
   315                              <1> 		;---------------------------------------
   316 00000131 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   317 00000134 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   318 00000136 F6D4                <1> 		not		ah								; 
   319                              <1> 
   320                              <1> 		;---------------------------------------
   321                              <1> 		; 現在値の出力を取得
   322                              <1> 		;---------------------------------------
   323 00000138 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   324 0000013A 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   325 0000013C 08E0                <1> 		or		al, ah							; AL |= AH;
   326                              <1> 
   327                              <1> 		;---------------------------------------
   328                              <1> 		; 新しい値を出力
   329                              <1> 		;---------------------------------------
   330 0000013E 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   331                              <1> 
   332                              <1> 		;---------------------------------------
   333                              <1> 		; 【レジスタの復帰】
   334                              <1> 		;---------------------------------------
   335 00000140 5F                  <1> 		pop		edi
   336 00000141 5B                  <1> 		pop		ebx
   337 00000142 58                  <1> 		pop		eax
   338                              <1> 
   339                              <1> 		;---------------------------------------
   340                              <1> 		; 【スタックフレームの破棄】
   341                              <1> 		;---------------------------------------
   342 00000143 89EC                <1> 		mov		esp, ebp
   343 00000145 5D                  <1> 		pop		ebp
   344                              <1> 
   345 00000146 C3                  <1> 		ret
    53                                  %include	"../modules/protect/draw_char.s"
    54                              <1> ;************************************************************************
    55                              <1> ;	文字の表示
    56                              <1> ;------------------------------------------------------------------------
    57                              <1> ;	グラフィックスモードでテキストを表示
    58                              <1> ;========================================================================
    59                              <1> ;■書式		: void draw_char(col, row, color, ch);
    60                              <1> ;
    61                              <1> ;■引数
    62                              <1> ;	col		: 列（0～79）
    63                              <1> ;	row		: 行（0～29）
    64                              <1> ;	color	: 描画色
    65                              <1> ;	ch		: 文字
    66                              <1> ;
    67                              <1> ;■戻り値	: 無し
    68                              <1> ;************************************************************************
    69                              <1> draw_char:
    70                              <1> 		;---------------------------------------
    71                              <1> 		; 【スタックフレームの構築】
    72                              <1> 		;---------------------------------------
    73                              <1> 												; ------|--------
    74                              <1> 												; EBP+20| 文字
    75                              <1> 												; EBP+16| 色
    76                              <1> 												; EBP+12| Y（行）
    77                              <1> 												; EBP+ 8| X（列）
    78                              <1> 												; ------+----------------
    79 00000147 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    80 00000148 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    81                              <1> 												; ------+----------------
    82                              <1> 
    83                              <1> 		;---------------------------------------
    84                              <1> 		; 【レジスタの保存】
    85                              <1> 		;---------------------------------------
    86 0000014A 50                  <1> 		push	eax
    87 0000014B 53                  <1> 		push	ebx
    88 0000014C 51                  <1> 		push	ecx
    89 0000014D 52                  <1> 		push	edx
    90 0000014E 56                  <1> 		push	esi
    91 0000014F 57                  <1> 		push	edi
    92                              <1> 
    93                              <1> 		;---------------------------------------
    94                              <1> 		; テストアンドセット
    95                              <1> 		;---------------------------------------
    96                              <1> %ifdef	USE_TEST_AND_SET
    97                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
    98                              <1> %endif
    99                              <1> 
   100                              <1> 		;---------------------------------------
   101                              <1> 		; コピー元フォントアドレスを設定
   102                              <1> 		;---------------------------------------
   103 00000150 0FB67514            <1> 		movzx	esi, byte [ebp +20]				; CL  = 文字コード;
   104 00000154 C1E604              <1> 		shl		esi, 4							; CL *= 16; // 1文字16バイト
   105 00000157 0335[90000000]      <1> 		add		esi, [FONT_ADR]					; ESI = フォントアドレス;
   106                              <1> 
   107                              <1> 		;---------------------------------------
   108                              <1> 		; コピー先アドレスを取得
   109                              <1> 		; Adr = 0xA0000 + (640 / 8 * 16) * y + x
   110                              <1> 		;---------------------------------------
   111 0000015D 8B7D0C              <1> 		mov		edi, [ebp +12]					; Y（行）
   112 00000160 C1E708              <1> 		shl		edi, 8							; EDI = Y * 256;
   113 00000163 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA0000]	; EDI = Y *   4 + Y;
   114 0000016A 037D08              <1> 		add		edi, [ebp + 8]					; X（列）
   115                              <1> 
   116                              <1> 		;---------------------------------------
   117                              <1> 		; 1文字分のフォントを出力
   118                              <1> 		;---------------------------------------
   119 0000016D 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
   120                              <1> 
   121 00000171 6A03E81CFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
   121 0000017A C404                <1>
   122 0000017C 6A08E82AFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
   122 00000185 C404                <1>
   123 00000187 536A085756E835FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
   123 00000190 FF6683C410          <1>
   124                              <1> 
   125 00000195 6A02E8F8FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
   125 0000019E C404                <1>
   126 000001A0 6A04E806FFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
   126 000001A9 C404                <1>
   127 000001AB 536A045756E811FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
   127 000001B4 FF6683C410          <1>
   128                              <1> 
   129 000001B9 6A01E8D4FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
   129 000001C2 C404                <1>
   130 000001C4 6A02E8E2FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
   130 000001CD C404                <1>
   131 000001CF 536A025756E8EDFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
   131 000001D8 FF6683C410          <1>
   132                              <1> 
   133 000001DD 6A00E8B0FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
   133 000001E6 C404                <1>
   134 000001E8 6A01E8BEFEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
   134 000001F1 C404                <1>
   135 000001F3 536A015756E8C9FEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
   135 000001FC FF6683C410          <1>
   136                              <1> 
   137                              <1> %ifdef	USE_TEST_AND_SET
   138                              <1> 		;---------------------------------------
   139                              <1> 		; テストアンドセット
   140                              <1> 		;---------------------------------------
   141                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   142                              <1> %endif
   143                              <1> 
   144                              <1> 		;---------------------------------------
   145                              <1> 		; 【レジスタの復帰】
   146                              <1> 		;---------------------------------------
   147 00000201 5F                  <1> 		pop		edi
   148 00000202 5E                  <1> 		pop		esi
   149 00000203 5A                  <1> 		pop		edx
   150 00000204 59                  <1> 		pop		ecx
   151 00000205 5B                  <1> 		pop		ebx
   152 00000206 58                  <1> 		pop		eax
   153                              <1> 
   154                              <1> 		;---------------------------------------
   155                              <1> 		; 【スタックフレームの破棄】
   156                              <1> 		;---------------------------------------
   157 00000207 89EC                <1> 		mov		esp, ebp
   158 00000209 5D                  <1> 		pop		ebp
   159                              <1> 
   160 0000020A C3                  <1> 		ret
   161                              <1> 
   162                              <1> %ifdef USE_TEST_AND_SET
   163                              <1> ALIGN 4, db 0
   164                              <1> IN_USE:	dd	0
   165                              <1> %endif
   166                              <1> 
    54                                  
    55                                  ;************************************************************************
    56                                  ;	パディング
    57                                  ;************************************************************************
    58 0000020B 00<rep 1DF5h>           		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
