     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  %define	USE_SYSTEM_CALL
     8                                  %define	USE_TEST_AND_SET
     9                                  
    10                                  ;************************************************************************
    11                                  ;	マクロ
    12                                  ;************************************************************************
    13                                  %include	"../include/define.s"
    14                              <1> ;************************************************************************
    15                              <1> ;	メモリイメージ
    16                              <1> ;************************************************************************
    17                              <1> 
    18                              <1> 		;---------------------------------------
    19                              <1> 		;           |            | 
    20                              <1> 		;           |____________| 
    21                              <1> 		; 0000_7A00 |            | ( 512) スタック
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0000_7C00 |            | (  8K) ブート
    24                              <1> 		;           =            = 
    25                              <1> 		;           |____________| 
    26                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    27                              <1> 		;           =            = 
    28                              <1> 		;           |____________| 
    29                              <1> 		; 0000_BC00 |////////////| 
    30                              <1> 		;           =            = 
    31                              <1> 		;           |____________| 
    32                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    33                              <1> 		;           |____________| 
    34                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    35                              <1> 		;           |____________| 
    36                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    37                              <1> 		;           |            | 
    38                              <1> 		;           =            = 
    39                              <1> 		;           |____________| 
    40                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    41                              <1> 		;           |            | （各タスク1K）
    42                              <1> 		;           =            = 
    43                              <1> 		;           |____________| 
    44                              <1> 		; 0010_5000 |            | Dir
    45                              <1> 		;      6000 |____________| Page
    46                              <1> 		; 0010_7000 |            | Dir
    47                              <1> 		;      8000 |____________| Page
    48                              <1> 		; 0010_9000 |////////////| 
    49                              <1> 		;           |            | 
    50                              <1> 
    51                              <1> 
    52                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    53                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    54                              <1> 
    55                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    56                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    57                              <1> 
    58                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    59                              <1> 
    60                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    61                              <1> 
    62                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    63                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    64                              <1> 
    65                              <1> 		E820_RECORD_SIZE	equ		20
    66                              <1> 
    67                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    68                              <1> 
    69                              <1> 		STACK_BASE			equ		0x0010_3000		; タスク用スタックエリア
    70                              <1> 		STACK_SIZE			equ		1024			; スタックサイズ
    71                              <1> 
    72                              <1> 		SP_TASK_0			equ		STACK_BASE + (STACK_SIZE * 1)
    73                              <1> 		SP_TASK_1			equ		STACK_BASE + (STACK_SIZE * 2)
    74                              <1> 		SP_TASK_2			equ		STACK_BASE + (STACK_SIZE * 3)
    75                              <1> 		SP_TASK_3			equ		STACK_BASE + (STACK_SIZE * 4)
    76                              <1> 		SP_TASK_4			equ		STACK_BASE + (STACK_SIZE * 5)
    77                              <1> 		SP_TASK_5			equ		STACK_BASE + (STACK_SIZE * 6)
    78                              <1> 		SP_TASK_6			equ		STACK_BASE + (STACK_SIZE * 7)
    79                              <1> 
    80                              <1> 		CR3_BASE			equ		0x0010_5000		; ページ変換テーブル：タスク3用
    81                              <1> 
    82                              <1> 		PARAM_TASK_4		equ		0x0010_8000		; 描画パラメータ：タスク4用
    83                              <1> 		PARAM_TASK_5		equ		0x0010_9000		; 描画パラメータ：タスク5用
    84                              <1> 		PARAM_TASK_6		equ		0x0010_A000		; 描画パラメータ：タスク6用
    85                              <1> 
    86                              <1> 		CR3_TASK_4			equ		0x0020_0000		; ページ変換テーブル：タスク4用
    87                              <1> 		CR3_TASK_5			equ		0x0020_2000		; ページ変換テーブル：タスク5用
    88                              <1> 		CR3_TASK_6			equ		0x0020_4000		; ページ変換テーブル：タスク6用
    14                                  %include	"../include/macro.s"
    15                              <1> ;************************************************************************
    16                              <1> ; 関数呼び出し用マクロ
    17                              <1> ;
    18                              <1> ; 使い方：
    19                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    20                              <1> ;
    21                              <1> ;************************************************************************
    22                              <1> %macro  cdecl 1-*.nolist
    23                              <1> 
    24                              <1> 	%rep  %0 - 1
    25                              <1> 		push	%{-1:-1}
    26                              <1> 		%rotate -1
    27                              <1> 	%endrep 
    28                              <1> 	%rotate -1
    29                              <1> 
    30                              <1> 		call	%1
    31                              <1> 
    32                              <1> 	%if 1 < %0
    33                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    34                              <1> 	%endif
    35                              <1> 
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> ;************************************************************************
    39                              <1> ; 割り込みベクタ設定用
    40                              <1> ;
    41                              <1> ; 使い方：
    42                              <1> ;	set_vect	ベクタ番号, 割り込み処理 [, フラグ]
    43                              <1> ;
    44                              <1> ;************************************************************************
    45                              <1> %macro  set_vect 1-*.nolist
    46                              <1> 		push	eax
    47                              <1> 		push	edi
    48                              <1> 
    49                              <1> 		mov		edi, VECT_BASE + (%1 * 8)		; ベクタアドレス;
    50                              <1> 		mov		eax, %2
    51                              <1> 
    52                              <1> 	%if 3 == %0
    53                              <1> 		mov		[edi + 4], %3					; フラグ
    54                              <1> 	%endif
    55                              <1> 
    56                              <1> 		mov		[edi + 0], ax					; 例外アドレス[15: 0]
    57                              <1> 		shr		eax, 16							; 
    58                              <1> 		mov		[edi + 6], ax					; 例外アドレス[31:16]
    59                              <1> 
    60                              <1> 		pop		edi
    61                              <1> 		pop		eax
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> ;************************************************************************
    65                              <1> ; ポート出力用
    66                              <1> ;
    67                              <1> ; 使い方：
    68                              <1> ;	outp	ポート番号, 出力値
    69                              <1> ;
    70                              <1> ;************************************************************************
    71                              <1> %macro  outp 2
    72                              <1> 		mov		al, %2
    73                              <1> 		out		%1, al
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> ;************************************************************************
    77                              <1> ; ディスクリプタの情報を設定
    78                              <1> ;
    79                              <1> ; 使い方：
    80                              <1> ;	set_desc	ディスクリプタ, ベース
    81                              <1> ;
    82                              <1> ;************************************************************************
    83                              <1> %macro  set_desc 2-* 
    84                              <1> 		push	eax
    85                              <1> 		push	edi
    86                              <1> 
    87                              <1> 		mov		edi, %1							; ディスクリプタアドレス
    88                              <1> 		mov		eax, %2							; ベースアドレス
    89                              <1> 
    90                              <1> 	%if 3 == %0
    91                              <1> 		mov		[edi + 0], %3					; リミット
    92                              <1> 	%endif
    93                              <1> 
    94                              <1> 		mov		[edi + 2], ax					; ベース（[15: 0]）
    95                              <1> 		shr		eax, 16							; 
    96                              <1> 		mov		[edi + 4], al					; ベース（[23:16]）
    97                              <1> 		mov		[edi + 7], ah					; ベース（[31:24]）
    98                              <1> 
    99                              <1> 		pop		edi
   100                              <1> 		pop		eax
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> ;************************************************************************
   104                              <1> ; ゲートディスクリプタのオフセットを設定
   105                              <1> ;
   106                              <1> ; 使い方：
   107                              <1> ;	set_gate	ディスクリプタ, オフセット
   108                              <1> ;
   109                              <1> ;************************************************************************
   110                              <1> %macro  set_gate 2-* 
   111                              <1> 		push	eax
   112                              <1> 		push	edi
   113                              <1> 
   114                              <1> 		mov		edi, %1							; ディスクリプタアドレス
   115                              <1> 		mov		eax, %2							; ベースアドレス
   116                              <1> 
   117                              <1> 		mov		[edi + 0], ax					; ベース（[15: 0]）
   118                              <1> 		shr		eax, 16							; 
   119                              <1> 		mov		[edi + 6], ax					; ベース（[31:16]）
   120                              <1> 
   121                              <1> 		pop		edi
   122                              <1> 		pop		eax
   123                              <1> %endmacro
   124                              <1> 
   125                              <1> ;************************************************************************
   126                              <1> ;	構造体
   127                              <1> ;************************************************************************
   128                              <1> 
   129                              <1> ;-----------------------------------------------
   130                              <1> ;	ドライブパラメータ
   131                              <1> ;-----------------------------------------------
   132                              <1> struc drive
   133 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
   134 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
   135 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
   136 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
   137                              <1> endstruc
   138                              <1> 
   139                              <1> ;-----------------------------------------------
   140                              <1> ;	リングバッファ
   141                              <1> ;-----------------------------------------------
   142                              <1> %define		RING_ITEM_SIZE		(1 << 4)
   143                              <1> %define		RING_INDEX_MASK		(RING_ITEM_SIZE - 1)
   144                              <1> 
   145                              <1> struc ring_buff
   146 00000000 ????????            <1> 		.rp				resd	1				; RP:書き込み位置
   147 00000004 ????????            <1> 		.wp				resd	1				; WP:読み込み位置
   148 00000008 <res 10h>           <1> 		.item			resb	RING_ITEM_SIZE	; バッファ
   149                              <1> endstruc
   150                              <1> 
   151                              <1> ;-----------------------------------------------
   152                              <1> ;	バラ曲線描画パラメータ
   153                              <1> ;-----------------------------------------------
   154                              <1> struc rose
   155 00000000 ????????            <1> 		.x0				resd	1				; 左上座標：X0
   156 00000004 ????????            <1> 		.y0				resd	1				; 左上座標：Y0
   157 00000008 ????????            <1> 		.x1				resd	1				; 右下座標：X1
   158 0000000C ????????            <1> 		.y1				resd	1				; 右下座標：Y1
   159                              <1> 
   160 00000010 ????????            <1> 		.n				resd	1				; 変数：n
   161 00000014 ????????            <1> 		.d				resd	1				; 変数：d
   162                              <1> 
   163 00000018 ????????            <1> 		.color_x		resd	1				; 描画色：X軸
   164 0000001C ????????            <1> 		.color_y		resd	1				; 描画色：Y軸
   165 00000020 ????????            <1> 		.color_z		resd	1				; 描画色：枠
   166 00000024 ????????            <1> 		.color_s		resd	1				; 描画色：文字
   167 00000028 ????????            <1> 		.color_f		resd	1				; 描画色：グラフ描画色
   168 0000002C ????????            <1> 		.color_b		resd	1				; 描画色：グラフ消去色
   169                              <1> 
   170 00000030 <res 10h>           <1> 		.title			resb	16				; タイトル
   171                              <1> endstruc
   172                              <1> 
    15                                  
    16                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    17                                  
    18                                  [BITS 32]
    19                                  ;************************************************************************
    20                                  ;	エントリポイント
    21                                  ;************************************************************************
    22                                  kernel:
    23                                  		;---------------------------------------
    24                                  		; フォントアドレスを取得
    25                                  		;---------------------------------------
    26 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    27 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    28 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    29 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    30 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    31 00000011 A3[38020000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    32                                  
    33                                  		;---------------------------------------
    34                                  		; TSSディスクリプタの設定
    35                                  		;---------------------------------------
    36                                  		set_desc	GDT.tss_0, TSS_0			; // タスク0用TSSの設定
    84 00000016 50                  <1>  push eax
    85 00000017 57                  <1>  push edi
    86                              <1> 
    87 00000018 BF[C0050000]        <1>  mov edi, %1
    88 0000001D B8[40020000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000022 66894702            <1>  mov [edi + 2], ax
    95 00000026 C1E810              <1>  shr eax, 16
    96 00000029 884704              <1>  mov [edi + 4], al
    97 0000002C 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 0000002F 5F                  <1>  pop edi
   100 00000030 58                  <1>  pop eax
    37                                  		set_desc	GDT.tss_1, TSS_1			; // タスク1用TSSの設定
    84 00000031 50                  <1>  push eax
    85 00000032 57                  <1>  push edi
    86                              <1> 
    87 00000033 BF[C8050000]        <1>  mov edi, %1
    88 00000038 B8[18030000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 0000003D 66894702            <1>  mov [edi + 2], ax
    95 00000041 C1E810              <1>  shr eax, 16
    96 00000044 884704              <1>  mov [edi + 4], al
    97 00000047 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 0000004A 5F                  <1>  pop edi
   100 0000004B 58                  <1>  pop eax
    38                                  		set_desc	GDT.tss_2, TSS_2			; // タスク2用TSSの設定
    84 0000004C 50                  <1>  push eax
    85 0000004D 57                  <1>  push edi
    86                              <1> 
    87 0000004E BF[D0050000]        <1>  mov edi, %1
    88 00000053 B8[F0030000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000058 66894702            <1>  mov [edi + 2], ax
    95 0000005C C1E810              <1>  shr eax, 16
    96 0000005F 884704              <1>  mov [edi + 4], al
    97 00000062 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 00000065 5F                  <1>  pop edi
   100 00000066 58                  <1>  pop eax
    39                                  		set_desc	GDT.tss_3, TSS_3			; // タスク3用TSSの設定
    84 00000067 50                  <1>  push eax
    85 00000068 57                  <1>  push edi
    86                              <1> 
    87 00000069 BF[D8050000]        <1>  mov edi, %1
    88 0000006E B8[C8040000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000073 66894702            <1>  mov [edi + 2], ax
    95 00000077 C1E810              <1>  shr eax, 16
    96 0000007A 884704              <1>  mov [edi + 4], al
    97 0000007D 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 00000080 5F                  <1>  pop edi
   100 00000081 58                  <1>  pop eax
    40                                  
    41                                  		;---------------------------------------
    42                                  		; コールゲートの設定
    43                                  		;---------------------------------------
    44                                  		set_gate	GDT.call_gate, call_gate	; // コールゲートの設定
   111 00000082 50                  <1>  push eax
   112 00000083 57                  <1>  push edi
   113                              <1> 
   114 00000084 BF[E0050000]        <1>  mov edi, %1
   115 00000089 B8[80120000]        <1>  mov eax, %2
   116                              <1> 
   117 0000008E 668907              <1>  mov [edi + 0], ax
   118 00000091 C1E810              <1>  shr eax, 16
   119 00000094 66894706            <1>  mov [edi + 6], ax
   120                              <1> 
   121 00000098 5F                  <1>  pop edi
   122 00000099 58                  <1>  pop eax
    45                                  
    46                                  		;---------------------------------------
    47                                  		; LDTの設定
    48                                  		;---------------------------------------
    49                                  		set_desc	GDT.ldt, LDT, word LDT_LIMIT
    84 0000009A 50                  <1>  push eax
    85 0000009B 57                  <1>  push edi
    86                              <1> 
    87 0000009C BF[B8050000]        <1>  mov edi, %1
    88 000000A1 B8[EE050000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91 000000A6 66C7074700          <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 000000AB 66894702            <1>  mov [edi + 2], ax
    95 000000AF C1E810              <1>  shr eax, 16
    96 000000B2 884704              <1>  mov [edi + 4], al
    97 000000B5 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 000000B8 5F                  <1>  pop edi
   100 000000B9 58                  <1>  pop eax
    50                                  
    51                                  		;---------------------------------------
    52                                  		; GDTをロード（再設定）
    53                                  		;---------------------------------------
    54 000000BA 0F0115[E8050000]        		lgdt	[GDTR]							; // グローバルディスクリプタテーブルをロード
    55                                  
    56                                  		;---------------------------------------
    57                                  		; スタックの設定
    58                                  		;---------------------------------------
    59 000000C1 BC00341000              		mov		esp, SP_TASK_0					; // タスク0用のスタックを設定
    60                                  
    61                                  		;---------------------------------------
    62                                  		; タスクレジスタの初期化
    63                                  		;---------------------------------------
    64 000000C6 66B82000                		mov		ax, SS_TASK_0
    65 000000CA 0F00D8                  		ltr		ax								; // タスクレジスタの設定
    66                                  
    67                                  		;---------------------------------------
    68                                  		; 初期化
    69                                  		;---------------------------------------
    70 000000CD E8840E0000              		cdecl	init_int						; // 割り込みベクタの初期化
    71 000000D2 E805100000              		cdecl	init_pic						; // 割り込みコントローラの初期化
    72 000000D7 E85A050000              		cdecl	init_page						; // ページングの初期化
    73                                  
    74 000000DC 5057BF00001000B8-       		set_vect	0x00, int_zero_div			; // 割り込み処理の登録：0除算
    74 000000E4 [BE100000]668907C1-
    74 000000EC E810668947065F58   
    75 000000F4 5057BF38001000B8-       		set_vect	0x07, int_nm				; // 割り込み処理の登録：デバイス使用不可
    75 000000FC [EB120000]668907C1-
    75 00000104 E810668947065F58   
    76 0000010C 5057BF00011000B8-       		set_vect	0x20, int_timer				; // 割り込み処理の登録：タイマー
    76 00000114 [82060000]668907C1-
    76 0000011C E810668947065F58   
    77 00000124 5057BF08011000B8-       		set_vect	0x21, int_keyboard			; // 割り込み処理の登録：KBC
    77 0000012C [46110000]668907C1-
    77 00000134 E810668947065F58   
    78 0000013C 5057BF40011000B8-       		set_vect	0x28, int_rtc				; // 割り込み処理の登録：RTC
    78 00000144 [1B110000]668907C1-
    78 0000014C E810668947065F58   
    79 00000154 5057BF08041000B8-       		set_vect	0x81, trap_gate_81, word 0xEF00	; // トラップゲートの登録：1文字出力
    79 0000015C [B0120000]66C74704-
    79 00000164 00EF668907C1E81066-
    79 0000016D 8947065F58         
    80 00000172 5057BF10041000B8-       		set_vect	0x82, trap_gate_82, word 0xEF00	; // トラップゲートの登録：点の描画
    80 0000017A [BE120000]66C74704-
    80 00000182 00EF668907C1E81066-
    80 0000018B 8947065F58         
    81                                  
    82                                  		;---------------------------------------
    83                                  		; デバイスの割り込み許可
    84                                  		;---------------------------------------
    85 00000190 6A10E8700F00006683-     		cdecl	rtc_int_en, 0x10				; rtc_int_en(UIE); // 更新サイクル終了割り込み許可
    85 00000199 C404               
    86 0000019B E898100000              		cdecl	int_en_timer0					; // タイマー（カウンタ0）割り込み許可
    87                                  
    88                                  		;---------------------------------------
    89                                  		; IMR(割り込みマスクレジスタ)の設定
    90                                  		;---------------------------------------
    91                                  		outp	0x21, 0b_1111_1000				; // 割り込み有効：スレーブPIC/KBC/タイマー
    72 000001A0 B0F8                <1>  mov al, %2
    73 000001A2 E621                <1>  out %1, al
    92                                  		outp	0xA1, 0b_1111_1110				; // 割り込み有効：RTC
    72 000001A4 B0FE                <1>  mov al, %2
    73 000001A6 E6A1                <1>  out %1, al
    93                                  
    94                                  		;---------------------------------------
    95                                  		; ページングを有効化
    96                                  		;---------------------------------------
    97 000001A8 B800501000              		mov		eax, CR3_BASE					;
    98 000001AD 0F22D8                  		mov		cr3, eax						; // ページテーブルの登録
    99                                  
   100 000001B0 0F20C0                  		mov		eax, cr0						; // PGビットをセット
   101 000001B3 0D00000080              		or		eax, (1 << 31)					; CR0 |= PG;
   102 000001B8 0F22C0                  		mov		cr0, eax						; 
   103 000001BB EB00                    		jmp		$ + 2							; FLUSH();
   104                                  
   105                                  		;---------------------------------------
   106                                  		; CPUの割り込み許可
   107                                  		;---------------------------------------
   108 000001BD FB                      		sti										; // 割り込み許可
   109                                  
   110                                  		;---------------------------------------
   111                                  		; フォントの一覧表示
   112                                  		;---------------------------------------
   113 000001BE 6A0D6A3FE839090000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
   113 000001C7 6683C408           
   114 000001CB 6A046A3FE8AF090000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
   114 000001D4 6683C408           
   115                                  
   116                                  		;---------------------------------------
   117                                  		; 文字列の表示
   118                                  		;---------------------------------------
   119 000001D8 68[20020000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
   119 000001E0 00006A0E6A19E85A09-
   119 000001E9 00006683C410       
   120                                  
   121                                  .10L:											; while (;;)
   122                                  												; {
   123                                  		;---------------------------------------
   124                                  		; 回転する棒を表示
   125                                  		;---------------------------------------
   126 000001EF E853100000              		cdecl	draw_rotation_bar				;   // 回転する棒を表示
   127                                  
   128                                  		;---------------------------------------
   129                                  		; キーコードの取得
   130                                  		;---------------------------------------
   131 000001F4 68[34020000]68-         		cdecl	ring_rd, _KEY_BUFF, .int_key	;   EAX = ring_rd(buff, &int_key);
   131 000001FA [6C110000]E8810F00-
   131 00000202 006683C408         
   132 00000207 83F800                  		cmp		eax, 0							;   if (EAX == 0)
   133 0000020A 7412                    		je		.10E							;   {
   134                                  												;   
   135                                  		;---------------------------------------
   136                                  		; キーコードの表示
   137                                  		;---------------------------------------
   138 0000020C 68[6C110000]6A1D6A-     		cdecl	draw_key, 2, 29, _KEY_BUFF		;     ring_show(key_buff); // 全要素を表示
   138 00000214 02E8CB0F00006683C4-
   138 0000021D 0C                 
   139                                  .10E:											;   }
   140 0000021E EBCF                    		jmp		.10L							; }
   141                                  
   142 00000220 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
   142 00000229 65726E656C212000   
   143                                  
   144 00000231 00<rep 3h>              ALIGN 4, db 0
   145 00000234 00000000                .int_key:	dd	0
   146                                  
   147                                  ALIGN 4, db 0
   148 00000238 00000000                FONT_ADR:	dd	0
   149 0000023C 00000000                RTC_TIME:	dd	0
   150                                  
   151                                  ;************************************************************************
   152                                  ;	タスク
   153                                  ;************************************************************************
   154                                  %include	"descriptor.s"
   155                              <1> ;************************************************************************
   156                              <1> ;	TSS
   157                              <1> ;************************************************************************
   158                              <1> TSS_0:
   159 00000240 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   160 00000244 00321000            <1> .esp0:			dd	SP_TASK_0 - 512				;*  4:ESP0
   161 00000248 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   162 0000024C 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   163 00000250 00000000            <1> .ss1:			dd	0							;* 16:
   164 00000254 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   165 00000258 00000000            <1> .ss2:			dd	0							;* 24:
   166 0000025C 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
   167 00000260 00000000            <1> .eip:			dd	0							;  32:EIP
   168 00000264 00000000            <1> .eflags:		dd	0							;  36:EFLAGS
   169 00000268 00000000            <1> .eax:			dd	0							;  40:EAX
   170 0000026C 00000000            <1> .ecx:			dd	0							;  44:ECX
   171 00000270 00000000            <1> .edx:			dd	0							;  48:EDX
   172 00000274 00000000            <1> .ebx:			dd	0							;  52:EBX
   173 00000278 00000000            <1> .esp:			dd	0							;  56:ESP
   174 0000027C 00000000            <1> .ebp:			dd	0							;  60:EBP
   175 00000280 00000000            <1> .esi:			dd	0							;  64:ESI
   176 00000284 00000000            <1> .edi:			dd	0							;  68:EDI
   177 00000288 00000000            <1> .es:			dd	0							;  72:ES
   178 0000028C 00000000            <1> .cs:			dd	0							;  76:CS
   179 00000290 00000000            <1> .ss:			dd	0							;  80:SS
   180 00000294 00000000            <1> .ds:			dd	0							;  84:DS
   181 00000298 00000000            <1> .fs:			dd	0							;  88:FS
   182 0000029C 00000000            <1> .gs:			dd	0							;  92:GS
   183 000002A0 00000000            <1> .ldt:			dd	0							;* 96:LDTセグメントセレクタ
   184 000002A4 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   185 000002A8 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   186                              <1> 
   187                              <1> TSS_1:
   188 00000318 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   189 0000031C 00361000            <1> .esp0:			dd	SP_TASK_1 - 512				;*  4:ESP0
   190 00000320 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   191 00000324 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   192 00000328 00000000            <1> .ss1:			dd	0							;* 16:
   193 0000032C 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   194 00000330 00000000            <1> .ss2:			dd	0							;* 24:
   195 00000334 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
   196 00000338 [DC060000]          <1> .eip:			dd	task_1						;  32:EIP
   197 0000033C 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   198 00000340 00000000            <1> .eax:			dd	0							;  40:EAX
   199 00000344 00000000            <1> .ecx:			dd	0							;  44:ECX
   200 00000348 00000000            <1> .edx:			dd	0							;  48:EDX
   201 0000034C 00000000            <1> .ebx:			dd	0							;  52:EBX
   202 00000350 00381000            <1> .esp:			dd	SP_TASK_1					;  56:ESP
   203 00000354 00000000            <1> .ebp:			dd	0							;  60:EBP
   204 00000358 00000000            <1> .esi:			dd	0							;  64:ESI
   205 0000035C 00000000            <1> .edi:			dd	0							;  68:EDI
   206 00000360 27000000            <1> .es:			dd	DS_TASK_1					;  72:ES
   207 00000364 1F000000            <1> .cs:			dd	CS_TASK_1					;  76:CS
   208 00000368 27000000            <1> .ss:			dd	DS_TASK_1					;  80:SS
   209 0000036C 27000000            <1> .ds:			dd	DS_TASK_1					;  84:DS
   210 00000370 27000000            <1> .fs:			dd	DS_TASK_1					;  88:FS
   211 00000374 27000000            <1> .gs:			dd	DS_TASK_1					;  92:GS
   212 00000378 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   213 0000037C 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   214 00000380 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   215                              <1> 
   216                              <1> TSS_2:
   217 000003F0 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   218 000003F4 003A1000            <1> .esp0:			dd	SP_TASK_2 - 512				;*  4:ESP0
   219 000003F8 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   220 000003FC 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   221 00000400 00000000            <1> .ss1:			dd	0							;* 16:
   222 00000404 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   223 00000408 00000000            <1> .ss2:			dd	0							;* 24:
   224 0000040C 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
   225 00000410 [11070000]          <1> .eip:			dd	task_2						;  32:EIP
   226 00000414 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   227 00000418 00000000            <1> .eax:			dd	0							;  40:EAX
   228 0000041C 00000000            <1> .ecx:			dd	0							;  44:ECX
   229 00000420 00000000            <1> .edx:			dd	0							;  48:EDX
   230 00000424 00000000            <1> .ebx:			dd	0							;  52:EBX
   231 00000428 003C1000            <1> .esp:			dd	SP_TASK_2					;  56:ESP
   232 0000042C 00000000            <1> .ebp:			dd	0							;  60:EBP
   233 00000430 00000000            <1> .esi:			dd	0							;  64:ESI
   234 00000434 00000000            <1> .edi:			dd	0							;  68:EDI
   235 00000438 37000000            <1> .es:			dd	DS_TASK_2					;  72:ES
   236 0000043C 2F000000            <1> .cs:			dd	CS_TASK_2					;  76:CS
   237 00000440 37000000            <1> .ss:			dd	DS_TASK_2					;  80:SS
   238 00000444 37000000            <1> .ds:			dd	DS_TASK_2					;  84:DS
   239 00000448 37000000            <1> .fs:			dd	DS_TASK_2					;  88:FS
   240 0000044C 37000000            <1> .gs:			dd	DS_TASK_2					;  92:GS
   241 00000450 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   242 00000454 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   243 00000458 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   244                              <1> 
   245                              <1> TSS_3:
   246 000004C8 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   247 000004CC 003E1000            <1> .esp0:			dd	SP_TASK_3 - 512				;*  4:ESP0
   248 000004D0 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   249 000004D4 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   250 000004D8 00000000            <1> .ss1:			dd	0							;* 16:
   251 000004DC 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   252 000004E0 00000000            <1> .ss2:			dd	0							;* 24:
   253 000004E4 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
   254 000004E8 [E4070000]          <1> .eip:			dd	task_3						;  32:EIP
   255 000004EC 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   256 000004F0 00000000            <1> .eax:			dd	0							;  40:EAX
   257 000004F4 00000000            <1> .ecx:			dd	0							;  44:ECX
   258 000004F8 00000000            <1> .edx:			dd	0							;  48:EDX
   259 000004FC 00000000            <1> .ebx:			dd	0							;  52:EBX
   260 00000500 00401000            <1> .esp:			dd	SP_TASK_3					;  56:ESP
   261 00000504 00000000            <1> .ebp:			dd	0							;  60:EBP
   262 00000508 00000000            <1> .esi:			dd	0							;  64:ESI
   263 0000050C 00000000            <1> .edi:			dd	0							;  68:EDI
   264 00000510 47000000            <1> .es:			dd	DS_TASK_3					;  72:ES
   265 00000514 3F000000            <1> .cs:			dd	CS_TASK_3					;  76:CS
   266 00000518 47000000            <1> .ss:			dd	DS_TASK_3					;  80:SS
   267 0000051C 47000000            <1> .ds:			dd	DS_TASK_3					;  84:DS
   268 00000520 47000000            <1> .fs:			dd	DS_TASK_3					;  88:FS
   269 00000524 47000000            <1> .gs:			dd	DS_TASK_3					;  92:GS
   270 00000528 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   271 0000052C 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   272 00000530 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   273                              <1> 
   274                              <1> 
   275                              <1> ;************************************************************************
   276                              <1> ;	グローバルディスクリプタテーブル
   277                              <1> ;************************************************************************
   278 000005A0 0000000000000000    <1> GDT:			dq	0x0000000000000000			; NULL
   279 000005A8 FFFF0000009ACF00    <1> .cs_kernel:		dq	0x00CF9A000000FFFF			; CODE 4G
   280 000005B0 FFFF00000092CF00    <1> .ds_kernel:		dq	0x00CF92000000FFFF			; DATA 4G
   281 000005B8 0000000000820000    <1> .ldt			dq	0x0000820000000000			; LDTディスクリプタ
   282 000005C0 6700000000890000    <1> .tss_0:			dq	0x0000890000000067			; TSSディスクリプタ
   283 000005C8 6700000000890000    <1> .tss_1:			dq	0x0000890000000067			; TSSディスクリプタ
   284 000005D0 6700000000890000    <1> .tss_2:			dq	0x0000890000000067			; TSSディスクリプタ
   285 000005D8 6700000000890000    <1> .tss_3:			dq	0x0000890000000067			; TSSディスクリプタ
   286 000005E0 0000080004EC0000    <1> .call_gate:		dq	0x0000EC0400080000			; 386コールゲート(DPL=3, count=4, SEL=8)
   287                              <1> .end:
   288                              <1> 
   289                              <1> CS_KERNEL		equ	.cs_kernel	- GDT
   290                              <1> DS_KERNEL		equ	.ds_kernel	- GDT
   291                              <1> SS_LDT			equ	.ldt		- GDT
   292                              <1> SS_TASK_0		equ	.tss_0		- GDT
   293                              <1> SS_TASK_1		equ	.tss_1		- GDT
   294                              <1> SS_TASK_2		equ	.tss_2		- GDT
   295                              <1> SS_TASK_3		equ	.tss_3		- GDT
   296                              <1> SS_GATE_0		equ	.call_gate	- GDT
   297                              <1> 
   298 000005E8 4700                <1> GDTR:	dw 		GDT.end - GDT - 1
   299 000005EA [A0050000]          <1> 		dd 		GDT
   300                              <1> 
   301                              <1> 
   302                              <1> ;************************************************************************
   303                              <1> ;	ローカルディスクリプタテーブル
   304                              <1> ;************************************************************************
   305 000005EE 0000000000000000    <1> LDT:			dq	0x0000000000000000			; NULL
   306 000005F6 FFFF0000009ACF00    <1> .cs_task_0:		dq	0x00CF9A000000FFFF			; CODE 4G
   307 000005FE FFFF00000092CF00    <1> .ds_task_0:		dq	0x00CF92000000FFFF			; DATA 4G
   308 00000606 FFFF000000FACF00    <1> .cs_task_1:		dq	0x00CFFA000000FFFF			; CODE 4G
   309 0000060E FFFF000000F2CF00    <1> .ds_task_1:		dq	0x00CFF2000000FFFF			; DATA 4G
   310 00000616 FFFF000000FACF00    <1> .cs_task_2:		dq	0x00CFFA000000FFFF			; CODE 4G
   311 0000061E FFFF000000F2CF00    <1> .ds_task_2:		dq	0x00CFF2000000FFFF			; DATA 4G
   312 00000626 FFFF000000FACF00    <1> .cs_task_3:		dq	0x00CFFA000000FFFF			; CODE 4G
   313 0000062E FFFF000000F2CF00    <1> .ds_task_3:		dq	0x00CFF2000000FFFF			; DATA 4G
   314                              <1> .end:
   315                              <1> 
   316                              <1> CS_TASK_0		equ	(.cs_task_0 - LDT) | 4		; タスク0用CSセレクタ
   317                              <1> DS_TASK_0		equ	(.ds_task_0 - LDT) | 4		; タスク0用DSセレクタ
   318                              <1> CS_TASK_1		equ	(.cs_task_1 - LDT) | 4 | 3	; タスク1用CSセレクタ
   319                              <1> DS_TASK_1		equ	(.ds_task_1 - LDT) | 4 | 3	; タスク1用DSセレクタ
   320                              <1> CS_TASK_2		equ	(.cs_task_2 - LDT) | 4 | 3	; タスク2用CSセレクタ
   321                              <1> DS_TASK_2		equ	(.ds_task_2 - LDT) | 4 | 3	; タスク2用DSセレクタ
   322                              <1> CS_TASK_3		equ	(.cs_task_3 - LDT) | 4 | 3	; タスク3用CSセレクタ
   323                              <1> DS_TASK_3		equ	(.ds_task_3 - LDT) | 4 | 3	; タスク3用DSセレクタ
   324                              <1> 
   325                              <1> LDT_LIMIT		equ	.end		- LDT - 1
   326                              <1> 
   327                              <1> 
   155                                  %include	"modules/paging.s"
   156                              <1> ;************************************************************************
   157                              <1> ;	ページの初期化
   158                              <1> ;
   159                              <1> 		;---------------------------------------
   160                              <1> 		;          |____________| 
   161                              <1> 		; 0010_5000|       (4K) | ディレクトリテーブル
   162                              <1> 		;          =            = 
   163                              <1> 		;          |____________| 
   164                              <1> 		; 0010_6000|       (4K) | ページテーブル
   165                              <1> 		;          =            = 
   166                              <1> 		;          |____________| 
   167                              <1> 		; 0010_7000|       (4K) | ページフォルト用
   168                              <1> 		;          =            = 
   169                              <1> 		;          |____________| 
   170                              <1> 		;          |            | 
   171                              <1> ;
   172                              <1> ;************************************************************************
   173                              <1> init_page:
   174                              <1> 		;---------------------------------------
   175                              <1> 		; 【レジスタの保存】
   176                              <1> 		;---------------------------------------
   177 00000636 60                  <1> 		pusha
   178                              <1> 
   179                              <1> 		;---------------------------------------
   180                              <1> 		; ページ変換テーブルの作成
   181                              <1> 		;---------------------------------------
   182 00000637 6800501000E8060000- <1> 		cdecl	page_set_4m, CR3_BASE			; // ページ変換テーブルの作成：タスク3用
   182 00000640 006683C404          <1>
   183                              <1> 
   184                              <1> 		;---------------------------------------
   185                              <1> 		; 【レジスタの復帰】
   186                              <1> 		;---------------------------------------
   187 00000645 61                  <1> 		popa
   188                              <1> 
   189 00000646 C3                  <1> 		ret
   190                              <1> 
   191                              <1> 
   192                              <1> ;************************************************************************
   193                              <1> ;	
   194                              <1> ;************************************************************************
   195                              <1> page_set_4m:
   196                              <1> 		;---------------------------------------
   197                              <1> 		; 【スタックフレームの構築】
   198                              <1> 		;---------------------------------------
   199                              <1> 												; ------|--------
   200 00000647 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   201 00000648 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   202                              <1> 												; ------|--------
   203                              <1> 												;    + 8| ページテーブル作成位置
   204                              <1> 												; ------|--------
   205                              <1> 		;---------------------------------------
   206                              <1> 		; 【レジスタの保存】
   207                              <1> 		;---------------------------------------
   208 0000064A 60                  <1> 		pusha
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; ページディレクトリの作成(P=0)
   212                              <1> 		;---------------------------------------
   213 0000064B FC                  <1> 		cld										; // DFクリア（+方向）
   214 0000064C 8B7D08              <1> 		mov		edi, [ebp + 8]					; EDI = ページディレクトリの先頭;
   215 0000064F B800000000          <1> 		mov		eax, 0x00000000					; EAX = 0 ; // P = 0
   216 00000654 B900040000          <1> 		mov		ecx, 1024						; count = 1024;
   217 00000659 F3AB                <1> 		rep stosd								; whlie (count--) *dst++ = 属性;
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 先頭のエントリを設定
   221                              <1> 		;---------------------------------------
   222 0000065B 89F8                <1> 		mov		eax, edi						; EAX  = EDI;   // ページディレクトリの直後
   223 0000065D 2500F0FFFF          <1> 		and		eax, ~0x0000_0FFF				; EAX &= ~0FFF; // 物理アドレスの指定
   224 00000662 83C807              <1> 		or		eax,  7							; EAX |=  7;    // RWの許可
   225 00000665 898700F0FFFF        <1> 		mov		[edi - (1024 * 4)], eax			; // 先頭のエントリを設定
   226                              <1> 
   227                              <1> 		;---------------------------------------
   228                              <1> 		; ページテーブルの設定（リニア）
   229                              <1> 		;---------------------------------------
   230 0000066B B807000000          <1> 		mov		eax, 0x00000007					; // 物理アドレスの指定とRWの許可
   231 00000670 B900040000          <1> 		mov		ecx, 1024						; count = 1024;
   232                              <1> 												; do
   233                              <1> .10L:											; {
   234 00000675 AB                  <1> 		stosd									;   *dst++  = 属性;
   235 00000676 0500100000          <1> 		add		eax, 0x00001000					;    adr   += 0x1000;
   236 0000067B E2F8                <1> 		loop	.10L							; } while (--count);
   237                              <1> 
   238                              <1> 		;---------------------------------------
   239                              <1> 		; 【レジスタの復帰】
   240                              <1> 		;---------------------------------------
   241 0000067D 61                  <1> 		popa
   242                              <1> 
   243                              <1> 		;---------------------------------------
   244                              <1> 		; 【スタックフレームの破棄】
   245                              <1> 		;---------------------------------------
   246 0000067E 89EC                <1> 		mov		esp, ebp
   247 00000680 5D                  <1> 		pop		ebp
   248                              <1> 
   249 00000681 C3                  <1> 		ret
   250                              <1> 
   156                                  %include	"modules/int_timer.s"
   157                              <1> ;************************************************************************
   158                              <1> ;	例外:タイマー
   159                              <1> ;************************************************************************
   160                              <1> int_timer:
   161                              <1> 		;---------------------------------------
   162                              <1> 		; 【レジスタの保存】
   163                              <1> 		;---------------------------------------
   164 00000682 60                  <1> 		pusha
   165 00000683 1E                  <1> 		push	ds
   166 00000684 06                  <1> 		push	es
   167                              <1> 
   168                              <1> 		;---------------------------------------
   169                              <1> 		; データ用セグメントの設定
   170                              <1> 		;---------------------------------------
   171 00000685 66B81000            <1> 		mov		ax, 0x0010						; 
   172 00000689 8ED8                <1> 		mov		ds, ax							; 
   173 0000068B 8EC0                <1> 		mov		es, ax							; 
   174                              <1> 
   175                              <1> 		;---------------------------------------
   176                              <1> 		; TICK
   177                              <1> 		;---------------------------------------
   178 0000068D FF05[D8060000]      <1> 		inc		dword [TIMER_COUNT]				; TIMER_COUNT++; // 割り込み回数の更新
   179                              <1> 
   180                              <1> 		;---------------------------------------
   181                              <1> 		; 割り込みフラグをクリア(EOI)
   182                              <1> 		;---------------------------------------
   183                              <1> 		outp	0x20, 0x20						; // マスタPIC:EOIコマンド
    72 00000693 B020                <2>  mov al, %2
    73 00000695 E620                <2>  out %1, al
   184                              <1> 
   185                              <1> 		;---------------------------------------
   186                              <1> 		; タスクの切り替え
   187                              <1> 		;---------------------------------------
   188 00000697 660F00C8            <1> 		str		ax								; AX = TR; // 現在のタスクレジスタ
   189 0000069B 6683F820            <1> 		cmp		ax, SS_TASK_0					; case (AX)
   190 0000069F 7415                <1> 		je		.11L							; {
   191 000006A1 6683F828            <1> 		cmp		ax, SS_TASK_1					;   
   192 000006A5 7418                <1> 		je		.12L							;   
   193 000006A7 6683F830            <1> 		cmp		ax, SS_TASK_2					;   
   194 000006AB 741B                <1> 		je		.13L							;   
   195                              <1> 												;   default:
   196 000006AD EA000000002000      <1> 		jmp		SS_TASK_0:0						;     // タスク0に切り替え
   197 000006B4 EB1B                <1> 		jmp		.10E							;     break;
   198                              <1> 												;     
   199                              <1> .11L:											;   case SS_TASK_0:
   200 000006B6 EA000000002800      <1> 		jmp		SS_TASK_1:0						;     // タスク1に切り替え
   201 000006BD EB12                <1> 		jmp		.10E							;     break;
   202                              <1> 												;     
   203                              <1> .12L:											;   case SS_TASK_1:
   204 000006BF EA000000003000      <1> 		jmp		SS_TASK_2:0						;     // タスク2に切り替え
   205 000006C6 EB09                <1> 		jmp		.10E							;     break;
   206                              <1> 												;     
   207                              <1> .13L:											;   case SS_TASK_2:
   208 000006C8 EA000000003800      <1> 		jmp		SS_TASK_3:0						;     // タスク3に切り替え
   209 000006CF EB00                <1> 		jmp		.10E							;     break;
   210                              <1> .10E:											; }
   211                              <1> 
   212                              <1> 		;---------------------------------------
   213                              <1> 		; 【レジスタの復帰】
   214                              <1> 		;---------------------------------------
   215 000006D1 07                  <1> 		pop		es								; 
   216 000006D2 1F                  <1> 		pop		ds								; 
   217 000006D3 61                  <1> 		popa
   218                              <1> 
   219 000006D4 CF                  <1> 		iret
   220                              <1> 
   221 000006D5 00<rep 3h>          <1> ALIGN 4, db 0
   222 000006D8 00000000            <1> TIMER_COUNT:	dd	0
   223                              <1> 
   157                                  %include	"tasks/task_1.s"
   158                              <1> ;************************************************************************
   159                              <1> ;	TASK-1
   160                              <1> ;************************************************************************
   161                              <1> task_1:
   162                              <1> 		;---------------------------------------
   163                              <1> 		; 文字列の表示
   164                              <1> 		;---------------------------------------
   165 000006DC 68[0A070000]6A076A- <1> 		cdecl	draw_str, 63, 0, 0x07, .s0		; draw_str();
   165 000006E4 006A3FE85904000066- <1>
   165 000006ED 83C410              <1>
   166                              <1> 
   167                              <1> .10L:											; while (;;)
   168                              <1> 												; {
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 時刻の表示
   171                              <1> 		;---------------------------------------
   172 000006F0 A1[3C020000]        <1> 		mov		eax, [RTC_TIME]					;   // 時刻の取得
   173 000006F5 5068000700006A006A- <1> 		cdecl	draw_time, 72, 0, 0x0700, eax	;   // 時刻の表示
   173 000006FE 48E8B30700006683C4- <1>
   173 00000707 10                  <1>
   174                              <1> 
   175 00000708 EBE6                <1> 		jmp		.10L							; }
   176                              <1> 
   177                              <1> 		;---------------------------------------
   178                              <1> 		; データ
   179                              <1> 		;---------------------------------------
   180 0000070A 5461736B2D3100      <1> .s0		db	"Task-1", 0
   181                              <1> 
   158                                  %include	"tasks/task_2.s"
   159                              <1> 
   160                              <1> ;************************************************************************
   161                              <1> ;	TASK
   162                              <1> ;************************************************************************
   163                              <1> task_2:
   164                              <1> 		;---------------------------------------
   165                              <1> 		; 文字列の表示
   166                              <1> 		;---------------------------------------
   167 00000711 68[D6070000]6A076A- <1> 		cdecl	draw_str, 63, 1, 0x07, .s0		; draw_str(.s0);
   167 00000719 016A3FE82404000066- <1>
   167 00000722 83C410              <1>
   168                              <1> 
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 初期化
   171                              <1> 		;---------------------------------------
   172                              <1> 												; ---------+---------+---------|---------|---------|---------|
   173                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   174                              <1> 												; ---------+---------+---------|---------|---------|---------|
   175 00000725 DB05[C4070000]      <1> 		fild	dword [.c1000]					;     1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   176 0000072B D9EB                <1> 		fldpi									;       pi |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   177 0000072D DA35[C8070000]      <1> 		fidiv	dword [.c180]					;   pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   178 00000733 D9EB                <1> 		fldpi									;       pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   179 00000735 DCC0                <1> 		fadd	st0, st0						;     2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   180 00000737 D9EE                <1> 		fldz									;   θ = 0 |    2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
   181                              <1> 												; ---------+---------+---------|---------|---------|---------|
   182                              <1> 												;   θ = 0 |    2*pi |d=pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
   183                              <1> 												; ---------+---------+---------|---------|---------|---------|
   184                              <1> 
   185                              <1> 		;---------------------------------------
   186                              <1> 		; メインループ
   187                              <1> 		;---------------------------------------
   188                              <1> .10L:											; for ( ; ; )
   189                              <1> 												; {
   190                              <1> 		;---------------------------------------
   191                              <1> 		; sin(t)
   192                              <1> 		;---------------------------------------
   193                              <1> 												; ---------+---------+---------|---------|---------|---------|
   194                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   195                              <1> 												; ---------+---------+---------|---------|---------|---------|
   196                              <1> 												;       θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   197                              <1> 												; ---------+---------+---------|---------|---------|---------|
   198 00000739 D8C2                <1> 		fadd	st0, st2						;   θ + d |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   199 0000073B D9F8                <1> 		fprem									;   MOD(θ)|    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   200 0000073D D9C0                <1> 		fld		st0								;       θ |      θ |    2*pi |       d |    1000 |xxxxxxxxx|
   201 0000073F D9FE                <1> 		fsin									;   sin(θ)|      θ |    2*pi |       d |    1000 |xxxxxxxxx|
   202 00000741 D8CC                <1> 		fmul	st0, st4						;ST4sin(θ)|      θ |    2*pi |       d |    1000 |xxxxxxxxx|
   203                              <1> 												; ---------+---------+---------|---------|---------|---------|
   204 00000743 DF35[CC070000]      <1> 		fbstp	[.bcd]							;       θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   205                              <1> 												; ---------+---------+---------|---------|---------|---------|
   206                              <1> 
   207 00000749 A1[CC070000]        <1> 		mov		eax, [.bcd]						;   EAX = 1000 * sin(t);
   208 0000074E 89C3                <1> 		mov		ebx, eax						;   EBX = EAX;
   209                              <1> 
   210 00000750 250F0F0000          <1> 		and		eax, 0x0F0F						;   // 上位4ビットをマスク
   211 00000755 0D30300000          <1> 		or		eax, 0x3030						;   // 上位4ビットに0x3を設定
   212                              <1> 
   213 0000075A C1EB04              <1> 		shr		ebx, 4							;   EBX >>= 4;
   214 0000075D 81E30F0F0000        <1> 		and		ebx, 0x0F0F						;   // 上位4ビットをマスク
   215 00000763 81CB30300000        <1> 		or		ebx, 0x3030						;   // 上位4ビットに0x3を設定
   216                              <1> 
   217 00000769 883D[DE070000]      <1> 		mov		[.s2 + 0], bh					;   // 1桁目
   218 0000076F 8825[E0070000]      <1> 		mov		[.s3 + 0], ah					;   // 小数1桁目
   219 00000775 881D[E1070000]      <1> 		mov		[.s3 + 1], bl					;   // 小数2桁目
   220 0000077B A2[E2070000]        <1> 		mov		[.s3 + 2], al					;   // 小数3桁目
   221                              <1> 
   222 00000780 B807000000          <1> 		mov		eax, 7							;   // 符号の表示
   223 00000785 0FA305[D5070000]    <1> 		bt		[.bcd + 9], eax					;   CF = bcd[9] & 0x80;
   224 0000078C 7209                <1> 		jc		.10F							;   if (CF)
   225                              <1> 												;   {
   226 0000078E C605[DD070000]2B    <1> 		mov		[.s1 + 0], byte '+'				;     *s1 = '+';
   227 00000795 EB07                <1> 		jmp		.10E							;   }
   228                              <1> .10F:											;   else
   229                              <1> 												;   {
   230 00000797 C605[DD070000]2D    <1> 		mov		[.s1 + 0], byte '-'				;     *s1 = '-';
   231                              <1> .10E:											;   }
   232                              <1> 
   233 0000079E 68[DD070000]6A076A- <1> 		cdecl	draw_str, 72, 1, 0x07, .s1		; draw_str(.s1);
   233 000007A6 016A48E89703000066- <1>
   233 000007AF 83C410              <1>
   234                              <1> 
   235                              <1> 		;---------------------------------------
   236                              <1> 		; ウェイト
   237                              <1> 		;---------------------------------------
   238 000007B2 6A14E8C10B00006683- <1> 		cdecl	wait_tick, 20					;   wait_tick(20);
   238 000007BB C404                <1>
   239                              <1> 
   240 000007BD E977FFFFFF          <1> 		jmp		.10L							; }
   241                              <1> 
   242                              <1> 
   243 000007C2 00<rep 2h>          <1> ALIGN 4, db 0
   244 000007C4 E8030000            <1> .c1000:		dd	1000
   245 000007C8 B4000000            <1> .c180:		dd	180
   246                              <1> 
   247 000007CC 00<rep Ah>          <1> .bcd:	times 10 db	0x00
   248                              <1> 
   249 000007D6 5461736B2D3200      <1> .s0		db	"Task-2", 0
   250 000007DD 2D                  <1> .s1:	db	"-"
   251 000007DE 302E                <1> .s2:	db	"0."
   252 000007E0 30303000            <1> .s3:	db	"000", 0
   253                              <1> 
   159                                  %include	"tasks/task_3.s"
   160                              <1> ;************************************************************************
   161                              <1> ;	TASK
   162                              <1> ;************************************************************************
   163                              <1> task_3:
   164                              <1> 		;---------------------------------------
   165                              <1> 		; 【スタックフレームの構築】
   166                              <1> 		;---------------------------------------
   167 000007E4 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   168                              <1> 												; ---------------
   169 000007E6 6A00                <1> 		push	dword 0							;    - 4| x0 = 0; // X座標原点
   170 000007E8 6A00                <1> 		push	dword 0							;    - 8| y0 = 0; // Y座標原点
   171 000007EA 6A00                <1> 		push	dword 0							;    -12| x  = 0; // X座標描画
   172 000007EC 6A00                <1> 		push	dword 0							;    -16| y  = 0; // Y座標描画
   173 000007EE 6A00                <1> 		push	dword 0							;    -20| r  = 0; // 角度
   174                              <1> 
   175                              <1> 		;---------------------------------------
   176                              <1> 		; 初期化
   177                              <1> 		;---------------------------------------
   178 000007F0 BE[E4080000]        <1> 		mov		esi, DRAW_PARAM					; ESI = 描画パラメータ
   179                              <1> 
   180                              <1> 		;---------------------------------------
   181                              <1> 		; タイトル表示
   182                              <1> 		;---------------------------------------
   183 000007F5 8B06                <1> 		mov		eax, [esi + rose.x0]			; X0座標
   184 000007F7 8B5E04              <1> 		mov		ebx, [esi + rose.y0]			; Y0座標
   185                              <1> 
   186 000007FA C1E803              <1> 		shr		eax, 3							; EAX = EAX /  8; // X座標を文字位置に変換
   187 000007FD C1EB04              <1> 		shr		ebx, 4							; EBX = EBX / 16; // Y座標を文字位置に変換
   188 00000800 4B                  <1> 		dec		ebx								; // 1文字分上に移動
   189 00000801 8B4E24              <1> 		mov		ecx, [esi + rose.color_s]		; 文字色
   190 00000804 8D5630              <1> 		lea		edx, [esi + rose.title]			; タイトル
   191                              <1> 
   192 00000807 52515350E835030000- <1> 		cdecl	draw_str, eax, ebx, ecx, edx	; draw_str();
   192 00000810 6683C410            <1>
   193                              <1> 
   194                              <1> 		;---------------------------------------
   195                              <1> 		; X軸の中点
   196                              <1> 		;---------------------------------------
   197 00000814 8B06                <1> 		mov		eax, [esi + rose.x0]			; EAX  = X0座標
   198 00000816 8B5E08              <1> 		mov		ebx, [esi + rose.x1]			; EBX  = X1座標
   199 00000819 29C3                <1> 		sub		ebx, eax						; EBX  = (X1 - X0);
   200 0000081B D1EB                <1> 		shr		ebx, 1							; EBX /= 2;
   201 0000081D 01C3                <1> 		add		ebx, eax						; EBX += X0
   202 0000081F 895DFC              <1> 		mov		[ebp - 4], ebx					; x0 = EBX; // X座標原点;
   203                              <1> 
   204                              <1> 		;---------------------------------------
   205                              <1> 		; Y軸の中点
   206                              <1> 		;---------------------------------------
   207 00000822 8B4604              <1> 		mov		eax, [esi + rose.y0]			; EAX  = Y0座標
   208 00000825 8B5E0C              <1> 		mov		ebx, [esi + rose.y1]			; EBX  = Y1座標
   209 00000828 29C3                <1> 		sub		ebx, eax						; EBX  = (Y1 - Y0);
   210 0000082A D1EB                <1> 		shr		ebx, 1							; EBX /= 2;
   211 0000082C 01C3                <1> 		add		ebx, eax						; EBX += Y0
   212 0000082E 895DF8              <1> 		mov		[ebp - 8], ebx					; y0 = EBX; // Y座標原点;
   213                              <1> 
   214                              <1> 		;---------------------------------------
   215                              <1> 		; X軸の描画
   216                              <1> 		;---------------------------------------
   217 00000831 8B06                <1> 		mov		eax, [esi + rose.x0]			; EAX = X0座標;
   218 00000833 8B5DF8              <1> 		mov		ebx, [ebp - 8]					; EBX = Y軸の中点;
   219 00000836 8B4E08              <1> 		mov		ecx, [esi + rose.x1]			; ECX = X1座標;
   220                              <1> 
   221 00000839 FF761853515350E893- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]	; X軸
   221 00000842 0400006683C414      <1>
   222                              <1> 
   223                              <1> 		;---------------------------------------
   224                              <1> 		; Y軸の描画
   225                              <1> 		;---------------------------------------
   226 00000849 8B4604              <1> 		mov		eax, [esi + rose.y0]			; Y0座標
   227 0000084C 8B5DFC              <1> 		mov		ebx, [ebp - 4]					; EBX = X軸の中点;
   228 0000084F 8B4E0C              <1> 		mov		ecx, [esi + rose.y1]			; Y1座標
   229                              <1> 
   230 00000852 FF761C51535053E87A- <1> 		cdecl	draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]	; Y軸
   230 0000085B 0400006683C414      <1>
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; 枠の描画
   234                              <1> 		;---------------------------------------
   235 00000862 8B06                <1> 		mov		eax, [esi + rose.x0]			; X0座標
   236 00000864 8B5E04              <1> 		mov		ebx, [esi + rose.y0]			; Y0座標
   237 00000867 8B4E08              <1> 		mov		ecx, [esi + rose.x1]			; X1座標
   238 0000086A 8B560C              <1> 		mov		edx, [esi + rose.y1]			; Y1座標
   239                              <1> 
   240 0000086D FF762052515350E80E- <1> 		cdecl	draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]	; 枠
   240 00000876 0500006683C414      <1>
   241                              <1> 
   242                              <1> 		;---------------------------------------
   243                              <1> 		; 振幅をX軸の約95%とする
   244                              <1> 		;---------------------------------------
   245 0000087D 8B4608              <1> 		mov		eax, [esi + rose.x1]			; EAX  = X1座標;
   246 00000880 2B06                <1> 		sub		eax, [esi + rose.x0]			; EAX -= X0座標;
   247 00000882 D1E8                <1> 		shr		eax, 1							; EAX /= 2;      // 半分
   248 00000884 89C3                <1> 		mov		ebx, eax						; EBX  = EAX;
   249 00000886 C1EB04              <1> 		shr		ebx, 4							; EBX /= 16;
   250 00000889 29D8                <1> 		sub		eax, ebx						; EAX -= EBX;
   251                              <1> 
   252                              <1> 		;---------------------------------------
   253                              <1> 		; FPUの初期化(バラ曲線の初期化)
   254                              <1> 		;---------------------------------------
   255 0000088B FF7614FF761050E88D- <1> 		cdecl	fpu_rose_init										, eax											, dword [esi + rose.n]							, dword [esi + rose.d]
   255 00000894 0000006683C40C      <1>
   259                              <1> 
   260                              <1> 		;---------------------------------------
   261                              <1> 		; メインループ
   262                              <1> 		;---------------------------------------
   263                              <1> .10L:											; for ( ; ; )
   264                              <1> 												; {
   265                              <1> 		;---------------------------------------
   266                              <1> 		; 座標計算
   267                              <1> 		;---------------------------------------
   268 0000089B 8D5DF4              <1> 		lea		ebx, [ebp -12]					;   EBX = &x;
   269 0000089E 8D4DF0              <1> 		lea		ecx, [ebp -16]					;   ECX = &y;
   270 000008A1 8B45EC              <1> 		mov		eax, [ebp -20]					;   EAX = r;
   271                              <1> 
   272 000008A4 505153E89200000066- <1> 		cdecl	fpu_rose_update										, ebx											, ecx											, eax
   272 000008AD 83C40C              <1>
   276                              <1> 
   277                              <1> 		;---------------------------------------
   278                              <1> 		; 角度更新(r = r % 36000)
   279                              <1> 		;---------------------------------------
   280 000008B0 BA00000000          <1> 		mov		edx, 0							;   EDX = 0;
   281 000008B5 40                  <1> 		inc		eax								;   EAX++;
   282 000008B6 BBA08C0000          <1> 		mov		ebx, 360 * 100					;   DBX = 36000
   283 000008BB F7F3                <1> 		div		ebx								;   EDX = EDX:EAX % EBX;
   284 000008BD 8955EC              <1> 		mov		[ebp -20], edx
   285                              <1> 
   286                              <1> 		;---------------------------------------
   287                              <1> 		; ドット描画
   288                              <1> 		;---------------------------------------
   289 000008C0 8B4DF4              <1> 		mov		ecx, [ebp -12]					;   ECX = X座標
   290 000008C3 8B55F0              <1> 		mov		edx, [ebp -16]					;   ECX = Y座標
   291                              <1> 
   292 000008C6 034DFC              <1> 		add		ecx, [ebp - 4]					;   ECX += X座標原点;
   293 000008C9 0355F8              <1> 		add		edx, [ebp - 8]					;   EDX += Y座標原点;
   294                              <1> 
   295 000008CC 8B5E28              <1> 		mov		ebx, [esi + rose.color_f]		;   EBX = 表示色;
   296 000008CF CD82                <1> 		int		0x82							;   sys_call_82(表示色, X, Y);
   297                              <1> 
   298                              <1> 		;---------------------------------------
   299                              <1> 		; ウェイト
   300                              <1> 		;---------------------------------------
   301 000008D1 6A02E8A20A00006683- <1> 		cdecl	wait_tick, 2					;   wait_tick(2);
   301 000008DA C404                <1>
   302                              <1> 
   303                              <1> 		;---------------------------------------
   304                              <1> 		; ドット描画(消去)
   305                              <1> 		;---------------------------------------
   306 000008DC 8B5E2C              <1> 		mov		ebx, [esi + rose.color_b]		;   EBX = 背景色;
   307 000008DF CD82                <1> 		int		0x82							;   sys_call_82(背景色, X, Y);
   308                              <1> 
   309                              <1> 
   310 000008E1 EBB8                <1>         jmp     .10L                            ; }
   311                              <1> 
   312                              <1> 
   313 000008E3 00                  <1> ALIGN 4, db 0
   314                              <1> DRAW_PARAM:										; 描画パラメータ
   315                              <1> 	istruc	rose
   316 000008E4 10000000            <1> 		at	rose.x0,		dd		 16			; 左上座標：X0
   317 000008E8 20000000            <1> 		at	rose.y0,		dd		 32			; 左上座標：Y0
   318 000008EC A0010000            <1> 		at	rose.x1,		dd		416			; 右下座標：X1
   319 000008F0 B0010000            <1> 		at	rose.y1,		dd		432			; 右下座標：Y1
   320                              <1> 
   321 000008F4 02000000            <1> 		at	rose.n,			dd		2			; 変数：n
   322 000008F8 01000000            <1> 		at	rose.d,			dd		1			; 変数：d
   323                              <1> 
   324 000008FC 07000000            <1> 		at	rose.color_x,	dd		0x0007		; 描画色：X軸
   325 00000900 07000000            <1> 		at	rose.color_y,	dd		0x0007		; 描画色：Y軸
   326 00000904 0F000000            <1> 		at	rose.color_z,	dd		0x000F		; 描画色：枠
   327 00000908 0F030000            <1> 		at	rose.color_s,	dd		0x030F		; 描画色：文字
   328 0000090C 0F000000            <1> 		at	rose.color_f,	dd		0x000F		; 描画色：グラフ描画色
   329 00000910 03000000            <1> 		at	rose.color_b,	dd		0x0003		; 描画色：グラフ消去色
   330                              <1> 
   331 00000914 5461736B2D3300      <1> 		at	rose.title,		db		"Task-3", 0	; タイトル
   332                              <1> 
   333 0000091B 00<rep 9h>          <1> 	iend
   334                              <1> 
   335                              <1> 
   336                              <1> ;************************************************************************
   337                              <1> ;	バラ曲線：初期化
   338                              <1> ;------------------------------------------------------------------------
   339                              <1> ;	バラ曲線を描画するためにFPUのレジスタを初期化する
   340                              <1> ;
   341                              <1> ;	Z = A * sin(nθ)
   342                              <1> ;	  = A * sin( (n/d) * ((π/180) * t) )
   343                              <1> ;
   344                              <1> ;	このグラフを描画するために、X/Y座標を次の様に計算する
   345                              <1> ;
   346                              <1> ;	x = A * sin(nθ) * cos(θ)
   347                              <1> ;	y = A * sin(nθ) * sin(θ)
   348                              <1> ;
   349                              <1> ;	この時、kは(n / d)で指定する。また、ラディアン = 度 * (π / 180)
   350                              <1> ;	である事から、r = π / 180を先に計算しておく
   351                              <1> ;========================================================================
   352                              <1> ;■書式		: void fpu_rose_init(A, n, d);
   353                              <1> ;
   354                              <1> ;■引数
   355                              <1> ;	DWORD	: A
   356                              <1> ;	DWORD	: n
   357                              <1> ;	DWORD	: d
   358                              <1> ;
   359                              <1> ;■戻り値	: 無し
   360                              <1> ;************************************************************************
   361                              <1> fpu_rose_init:
   362                              <1> 		;---------------------------------------
   363                              <1> 		; 【スタックフレームの構築】
   364                              <1> 		;---------------------------------------
   365                              <1> 												; ------|--------
   366                              <1> 												;    +16| d
   367                              <1> 												;    +12| n
   368                              <1> 												;    + 8| A
   369                              <1> 												; ---------------
   370 00000924 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   371 00000925 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   372                              <1> 												; ---------------
   373 00000927 68B4000000          <1> 		push	dword 180						;    - 4| dword i = 180;
   374                              <1> 
   375                              <1> 		;---------------------------------------
   376                              <1> 		; FPUを使った処理
   377                              <1> 		;
   378                              <1> 		; A(振幅), k(n/d),r(度→ラディアン)を
   379                              <1> 		; FPU内のレジスタにスタックしておく
   380                              <1> 		;---------------------------------------
   381                              <1> 												; ---------+---------+---------|---------|---------|---------|
   382                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   383                              <1> 												; ---------+---------+---------|---------|---------|---------|
   384 0000092C D9EB                <1> 		fldpi									;   pi     |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   385 0000092E DA75FC              <1> 		fidiv	dword [ebp - 4]					;   pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   386 00000931 DB450C              <1> 		fild	dword [ebp +12]					;        n |  pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   387 00000934 DA7510              <1> 		fidiv	dword [ebp +16]					;      n/d |         |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   388 00000937 DB4508              <1> 		fild	dword [ebp + 8]					;        A |     n/d |  pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   389                              <1> 												; ---------+---------+---------|---------|---------|---------|
   390                              <1> 												;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   391                              <1> 												; ---------+---------+---------|---------|---------|---------|
   392                              <1> 		;---------------------------------------
   393                              <1> 		; スタックフレームの破棄
   394                              <1> 		;---------------------------------------
   395 0000093A 89EC                <1> 		mov		esp, ebp
   396 0000093C 5D                  <1> 		pop		ebp
   397                              <1> 
   398 0000093D C3                  <1> 		ret
   399                              <1> 
   400                              <1> ;************************************************************************
   401                              <1> ;	バラ曲線：計算
   402                              <1> ;------------------------------------------------------------------------
   403                              <1> ;	角度を引数として受け取り、座標を計算する。
   404                              <1> ;	（他のパラメータはFPUレジスタに設定済みと仮定）
   405                              <1> ;========================================================================
   406                              <1> ;■書式		: void fpu_rose_update(t, X, Y);
   407                              <1> ;
   408                              <1> ;■引数
   409                              <1> ;	DWORD	: 角度[度]
   410                              <1> ;	DWORD	: Y座標へのポインタ
   411                              <1> ;	DWORD	: X座標へのポインタ
   412                              <1> ;
   413                              <1> ;■戻り値	: 無し
   414                              <1> ;************************************************************************
   415                              <1> fpu_rose_update:
   416                              <1> 		;---------------------------------------
   417                              <1> 		; 【スタックフレームの構築】
   418                              <1> 		;---------------------------------------
   419                              <1> 												; ---------------
   420                              <1> 												; EBP+16| t(角度)
   421                              <1> 												; EBP+12| Y(float)
   422                              <1> 												; EBP+ 8| X(float)
   423                              <1> 												; ---------------
   424 0000093E 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   425 0000093F 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   426                              <1> 												; ------|--------
   427                              <1> 
   428                              <1> 		;---------------------------------------
   429                              <1> 		; 【レジスタの保存】
   430                              <1> 		;---------------------------------------
   431 00000941 50                  <1> 		push	eax
   432 00000942 53                  <1> 		push	ebx
   433                              <1> 
   434                              <1> 		;---------------------------------------
   435                              <1> 		; X/Yの保存先を設定
   436                              <1> 		;---------------------------------------
   437 00000943 8B4508              <1> 		mov		eax, [ebp +  8]					; EAX = pX; // X座標へのポインタ
   438 00000946 8B5D0C              <1> 		mov		ebx, [ebp + 12]					; EBX = pY; // Y座標へのポインタ
   439                              <1> 
   440                              <1> 		;---------------------------------------
   441                              <1> 		; FPUを使った処理
   442                              <1> 		; 
   443                              <1> 		; 既にスタックしてある値を元に
   444                              <1> 		; t(角度)から座標を計算する
   445                              <1> 		;---------------------------------------
   446                              <1> 												; ---------+---------+---------|---------|---------|---------|
   447                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   448                              <1> 												; ---------+---------+---------|---------|---------|---------|
   449 00000949 DB4510              <1> 		fild	dword [ebp +16]					;        t |       A |       k |       r |xxxxxxxxx|xxxxxxxxx|
   450 0000094C D8CB                <1> 		fmul	st0, st3						;       rt |         |         |         |         |         |
   451 0000094E D9C0                <1> 		fld		st0								;       rt |      rt |       A |       k |       r |xxxxxxxxx|
   452                              <1> 												; ---------+---------+---------|---------|---------|---------|
   453                              <1> 		; rt を θと置き換える					;       θ |      θ |       A |       k |       r |         |
   454                              <1> 												; ---------+---------+---------|---------|---------|---------|
   455 00000950 D9FB                <1> 		fsincos									;   cos(θ)|  sin(θ)|      θ |       A |       k |       r |
   456 00000952 D9CA                <1> 		fxch	st2								;       θ |         |  cos(θ)|         |         |         |
   457 00000954 D8CC                <1> 		fmul	st0, st4						;      kθ |         |         |         |         |         |
   458 00000956 D9FE                <1> 		fsin									;  sin(kθ)|         |         |         |         |         |
   459 00000958 D8CB                <1> 		fmul	st0, st3						; Asin(kθ)|         |         |         |         |         |
   460                              <1> 												; ---------+---------+---------|---------|---------|---------|
   461                              <1> 												; Asin(kθ)|  sin(θ)|  cos(θ)|       A |       k |       r |
   462                              <1> 												; ---------+---------+---------|---------|---------|---------|
   463                              <1> 		;---------------------------------------
   464                              <1> 		; x =  A * sin(kθ) * cos(θ);
   465                              <1> 		;---------------------------------------
   466                              <1> 												; ---------+---------+---------|---------|---------|---------|
   467                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   468                              <1> 												; ---------+---------+---------|---------|---------|---------|
   469                              <1> 												; Asin(kθ)|  sin(θ)|  cos(θ)|       A |       k |       r |
   470 0000095A D9CA                <1> 		fxch	st2								;   cos(θ)|         |Asin(kθ)|         |         |         |
   471 0000095C D8CA                <1> 		fmul	st0, st2						;        x |         |         |         |         |         |
   472 0000095E DB18                <1> 		fistp	dword [eax]						;   sin(θ)|Asin(kθ)|       A |       k |       r |xxxxxxxxx|
   473                              <1> 												; ---------+---------+---------|---------|---------|---------|
   474                              <1> 		;---------------------------------------
   475                              <1> 		; y = -A * sin(kθ) * sin(θ);
   476                              <1> 		;---------------------------------------
   477                              <1> 												; ---------+---------+---------|---------|---------|---------|
   478                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   479                              <1> 												; ---------+---------+---------|---------|---------|---------|
   480                              <1> 												;   sin(θ)|Asin(kθ)|       A |       k |       r |xxxxxxxxx|
   481 00000960 DEC9                <1> 		fmulp	st1, st0						;        y |       A |       k |       r |xxxxxxxxx|xxxxxxxxx|
   482 00000962 D9E0                <1> 		fchs									;       -y |         |         |         |xxxxxxxxx|xxxxxxxxx|
   483 00000964 DB1B                <1> 		fistp	dword [ebx]						;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   484                              <1> 												; ---------+---------+---------|---------|---------|---------|
   485                              <1> 		;---------------------------------------
   486                              <1> 		; レジスタの復帰
   487                              <1> 		;---------------------------------------
   488 00000966 5B                  <1> 		pop		ebx
   489 00000967 58                  <1> 		pop		eax
   490                              <1> 
   491                              <1> 		;---------------------------------------
   492                              <1> 		; スタックフレームの破棄
   493                              <1> 		;---------------------------------------
   494 00000968 89EC                <1> 		mov		esp, ebp
   495 0000096A 5D                  <1> 		pop		ebp
   496                              <1> 
   497 0000096B C3                  <1> 		ret
   498                              <1> 
   160                                  
   161                                  ;************************************************************************
   162                                  ;	モジュール
   163                                  ;************************************************************************
   164                                  %include	"../modules/protect/vga.s"
   165                              <1> ;************************************************************************
   166                              <1> ;	読み込みプレーンの選択
   167                              <1> ;========================================================================
   168                              <1> ;■書式		: void vga_set_read_plane(plane);
   169                              <1> ;
   170                              <1> ;■引数
   171                              <1> ;	plane	: 読み込みプレーン
   172                              <1> ;
   173                              <1> ;■戻り値	: 無し
   174                              <1> ;************************************************************************
   175                              <1> vga_set_read_plane:
   176                              <1> 		;---------------------------------------
   177                              <1> 		; 【スタックフレームの構築】
   178                              <1> 		;---------------------------------------
   179                              <1> 												; EBP+ 8| プレーン（インデックス）
   180                              <1> 												; ------+----------------
   181 0000096C 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   182 0000096D 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   183                              <1> 												; ------+----------------
   184                              <1> 
   185                              <1> 		;---------------------------------------
   186                              <1> 		; 【レジスタの保存】
   187                              <1> 		;---------------------------------------
   188 0000096F 50                  <1> 		push	eax
   189 00000970 52                  <1> 		push	edx
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 読み込みプレーンの選択
   193                              <1> 		;---------------------------------------
   194 00000971 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
   195 00000974 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
   196 00000977 B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
   197 00000979 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
   198 0000097D 66EF                <1> 		out		dx, ax							; // ポート出力
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 【レジスタの復帰】
   202                              <1> 		;---------------------------------------
   203 0000097F 5A                  <1> 		pop		edx
   204 00000980 58                  <1> 		pop		eax
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; 【スタックフレームの破棄】
   208                              <1> 		;---------------------------------------
   209 00000981 89EC                <1> 		mov		esp, ebp
   210 00000983 5D                  <1> 		pop		ebp
   211                              <1> 
   212 00000984 C3                  <1> 		ret
   213                              <1> 
   214                              <1> 
   215                              <1> ;************************************************************************
   216                              <1> ;	書き込みプレーンを選択
   217                              <1> ;========================================================================
   218                              <1> ;■書式		: void vga_set_write_plane(plane);
   219                              <1> ;
   220                              <1> ;■引数
   221                              <1> ;	plane	: 書き込みプレーン
   222                              <1> ;
   223                              <1> ;■戻り値	: 無し
   224                              <1> ;************************************************************************
   225                              <1> vga_set_write_plane:
   226                              <1> 		;---------------------------------------
   227                              <1> 		; 【スタックフレームの構築】
   228                              <1> 		;---------------------------------------
   229                              <1> 												; EBP+ 8| プレーン（ビット指定）
   230                              <1> 												; ------+----------------
   231 00000985 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   232 00000986 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   233                              <1> 												; ------+----------------
   234                              <1> 
   235                              <1> 		;---------------------------------------
   236                              <1> 		; 【レジスタの保存】
   237                              <1> 		;---------------------------------------
   238 00000988 50                  <1> 		push	eax
   239 00000989 52                  <1> 		push	edx
   240                              <1> 
   241                              <1> 		;---------------------------------------
   242                              <1> 		; 書き込みプレーンの選択
   243                              <1> 		;---------------------------------------
   244 0000098A 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
   245 0000098D 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
   246 00000990 B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
   247 00000992 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
   248 00000996 66EF                <1> 		out		dx, ax							; // ポート出力
   249                              <1> 
   250                              <1> 		;---------------------------------------
   251                              <1> 		; 【レジスタの復帰】
   252                              <1> 		;---------------------------------------
   253 00000998 5A                  <1> 		pop		edx
   254 00000999 58                  <1> 		pop		eax
   255                              <1> 
   256                              <1> 		;---------------------------------------
   257                              <1> 		; 【スタックフレームの破棄】
   258                              <1> 		;---------------------------------------
   259 0000099A 89EC                <1> 		mov		esp, ebp
   260 0000099C 5D                  <1> 		pop		ebp
   261                              <1> 
   262 0000099D C3                  <1> 		ret
   263                              <1> 
   264                              <1> 
   265                              <1> ;************************************************************************
   266                              <1> ;	フォントの書き込み
   267                              <1> ;========================================================================
   268                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   269                              <1> ;
   270                              <1> ;■引数
   271                              <1> ;	font	: FONTアドレス
   272                              <1> ;	vram	: VRAMアドレス
   273                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   274                              <1> ;	color	: 描画色
   275                              <1> ;
   276                              <1> ;■戻り値	: 無し
   277                              <1> ;************************************************************************
   278                              <1> vram_font_copy:
   279                              <1> 		;---------------------------------------
   280                              <1> 		; 【スタックフレームの構築】
   281                              <1> 		;---------------------------------------
   282                              <1> 												; EBP+20| 色（背景/前景色）
   283                              <1> 												; EBP+16| プレーン（ビット指定）
   284                              <1> 												; EBP+12| VRAMアドレス
   285                              <1> 												; EBP+ 8| FONTアドレス
   286                              <1> 												; ------+----------------
   287 0000099E 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   288 0000099F 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   289                              <1> 												; ------+----------------
   290                              <1> 
   291                              <1> 		;---------------------------------------
   292                              <1> 		; 【レジスタの保存】
   293                              <1> 		;---------------------------------------
   294 000009A1 50                  <1> 		push	eax
   295 000009A2 53                  <1> 		push	ebx
   296 000009A3 51                  <1> 		push	ecx
   297 000009A4 52                  <1> 		push	edx
   298 000009A5 56                  <1> 		push	esi
   299 000009A6 57                  <1> 		push	edi
   300                              <1> 
   301                              <1> 		;---------------------------------------
   302                              <1> 		; 【処理の開始】
   303                              <1> 		;---------------------------------------
   304 000009A7 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   305 000009AA 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   306 000009AD 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   307 000009B1 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   308                              <1> 
   309 000009B5 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   310 000009B7 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   311 000009BA FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   312                              <1> 
   313 000009BC 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   314 000009BE 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   315 000009C1 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   316                              <1> 
   317                              <1> 		;---------------------------------------
   318                              <1> 		; 16ドットフォントのコピー
   319                              <1> 		;---------------------------------------
   320 000009C3 FC                  <1> 		cld										; DF  = 0; // アドレス加算
   321                              <1> 
   322 000009C4 B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   323                              <1> .10L:											; do
   324                              <1> 												; {
   325                              <1> 		;---------------------------------------
   326                              <1> 		; フォントマスクの作成
   327                              <1> 		;---------------------------------------
   328 000009C9 AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   329 000009CA 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   330 000009CC F6D4                <1> 		not		ah								;   
   331                              <1> 
   332                              <1> 		;---------------------------------------
   333                              <1> 		; 前景色
   334                              <1> 		;---------------------------------------
   335 000009CE 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   336                              <1> 
   337                              <1> 		;---------------------------------------
   338                              <1> 		; 背景色
   339                              <1> 		;---------------------------------------
   340 000009D0 F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   341 000009D6 7404                <1> 		jz		.11F							;   {
   342 000009D8 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   343 000009DA EB02                <1> 		jmp		.11E							;   }
   344                              <1> .11F:											;   else
   345                              <1> 												;   {
   346 000009DC 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   347                              <1> .11E:											;   }
   348                              <1> 
   349                              <1> 		;---------------------------------------
   350                              <1> 		; 前景色と背景色を合成
   351                              <1> 		;---------------------------------------
   352 000009DE 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   353                              <1> 
   354                              <1> 		;---------------------------------------
   355                              <1> 		; 新しい値を出力
   356                              <1> 		;---------------------------------------
   357 000009E0 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   358                              <1> 
   359 000009E2 83C750              <1> 		add		edi, 80							;   EDI += 80;
   360 000009E5 E2E2                <1> 		loop	.10L							; } while (--ECX);
   361                              <1> .10E:											; 
   362                              <1> 
   363                              <1> 		;---------------------------------------
   364                              <1> 		; 【レジスタの復帰】
   365                              <1> 		;---------------------------------------
   366 000009E7 5F                  <1> 		pop		edi
   367 000009E8 5E                  <1> 		pop		esi
   368 000009E9 5A                  <1> 		pop		edx
   369 000009EA 59                  <1> 		pop		ecx
   370 000009EB 5B                  <1> 		pop		ebx
   371 000009EC 58                  <1> 		pop		eax
   372                              <1> 
   373                              <1> 		;---------------------------------------
   374                              <1> 		; 【スタックフレームの破棄】
   375                              <1> 		;---------------------------------------
   376 000009ED 89EC                <1> 		mov		esp, ebp
   377 000009EF 5D                  <1> 		pop		ebp
   378                              <1> 
   379 000009F0 C3                  <1> 		ret
   380                              <1> 
   381                              <1> 
   382                              <1> ;************************************************************************
   383                              <1> ;	ビットパターンの書き込み
   384                              <1> ;========================================================================
   385                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   386                              <1> ;
   387                              <1> ;■引数
   388                              <1> ;	bit		: 出力ビットパターン
   389                              <1> ;	vram	: VRAMアドレス
   390                              <1> ;	flag	: 1:セット, 0:クリア
   391                              <1> ;
   392                              <1> ;■戻り値	: 無し
   393                              <1> ;************************************************************************
   394                              <1> vram_bit_copy:
   395                              <1> 		;---------------------------------------
   396                              <1> 		; 【スタックフレームの構築】
   397                              <1> 		;---------------------------------------
   398                              <1> 												; EBP+20| 色（背景/前景色）
   399                              <1> 												; EBP+16| プレーン（ビット指定）
   400                              <1> 												; EBP+12| VRAMアドレス
   401                              <1> 												; EBP+ 8| 出力ビットパターン
   402                              <1> 												; ------+----------------
   403 000009F1 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   404 000009F2 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   405                              <1> 												; ------+----------------
   406                              <1> 
   407                              <1> 		;---------------------------------------
   408                              <1> 		; 【レジスタの保存】
   409                              <1> 		;---------------------------------------
   410 000009F4 50                  <1> 		push	eax
   411 000009F5 53                  <1> 		push	ebx
   412 000009F6 57                  <1> 		push	edi
   413                              <1> 
   414                              <1> 		;---------------------------------------
   415                              <1> 		; 【処理の開始】
   416                              <1> 		;---------------------------------------
   417 000009F7 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   418 000009FA 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   419 000009FE 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   420                              <1> 
   421 00000A02 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   422 00000A04 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   423 00000A07 FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   424                              <1> 
   425                              <1> 		;---------------------------------------
   426                              <1> 		; マスクデータの作成
   427                              <1> 		;---------------------------------------
   428 00000A09 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   429 00000A0C 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   430 00000A0E F6D4                <1> 		not		ah								; 
   431                              <1> 
   432                              <1> 		;---------------------------------------
   433                              <1> 		; 現在値の出力を取得
   434                              <1> 		;---------------------------------------
   435 00000A10 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   436 00000A12 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   437 00000A14 08E0                <1> 		or		al, ah							; AL |= AH;
   438                              <1> 
   439                              <1> 		;---------------------------------------
   440                              <1> 		; 新しい値を出力
   441                              <1> 		;---------------------------------------
   442 00000A16 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   443                              <1> 
   444                              <1> 		;---------------------------------------
   445                              <1> 		; 【レジスタの復帰】
   446                              <1> 		;---------------------------------------
   447 00000A18 5F                  <1> 		pop		edi
   448 00000A19 5B                  <1> 		pop		ebx
   449 00000A1A 58                  <1> 		pop		eax
   450                              <1> 
   451                              <1> 		;---------------------------------------
   452                              <1> 		; 【スタックフレームの破棄】
   453                              <1> 		;---------------------------------------
   454 00000A1B 89EC                <1> 		mov		esp, ebp
   455 00000A1D 5D                  <1> 		pop		ebp
   456                              <1> 
   457 00000A1E C3                  <1> 		ret
   165                                  %include	"../modules/protect/draw_char.s"
   166                              <1> ;************************************************************************
   167                              <1> ;	文字の表示
   168                              <1> ;------------------------------------------------------------------------
   169                              <1> ;	グラフィックスモードでテキストを表示
   170                              <1> ;========================================================================
   171                              <1> ;■書式		: void draw_char(col, row, color, ch);
   172                              <1> ;
   173                              <1> ;■引数
   174                              <1> ;	col		: 列（0～79）
   175                              <1> ;	row		: 行（0～29）
   176                              <1> ;	color	: 描画色
   177                              <1> ;	ch		: 文字
   178                              <1> ;
   179                              <1> ;■戻り値	: 無し
   180                              <1> ;************************************************************************
   181                              <1> draw_char:
   182                              <1> 		;---------------------------------------
   183                              <1> 		; 【スタックフレームの構築】
   184                              <1> 		;---------------------------------------
   185                              <1> 												; ------|--------
   186                              <1> 												; EBP+20| 文字
   187                              <1> 												; EBP+16| 色
   188                              <1> 												; EBP+12| Y（行）
   189                              <1> 												; EBP+ 8| X（列）
   190                              <1> 												; ------+----------------
   191 00000A1F 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   192 00000A20 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   193                              <1> 												; ------+----------------
   194                              <1> 
   195                              <1> 		;---------------------------------------
   196                              <1> 		; 【レジスタの保存】
   197                              <1> 		;---------------------------------------
   198 00000A22 50                  <1> 		push	eax
   199 00000A23 53                  <1> 		push	ebx
   200 00000A24 51                  <1> 		push	ecx
   201 00000A25 52                  <1> 		push	edx
   202 00000A26 56                  <1> 		push	esi
   203 00000A27 57                  <1> 		push	edi
   204                              <1> 
   205                              <1> 		;---------------------------------------
   206                              <1> 		; テストアンドセット
   207                              <1> 		;---------------------------------------
   208                              <1> %ifdef	USE_TEST_AND_SET
   209 00000A28 68[FC0A0000]E89908- <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   209 00000A30 00006683C404        <1>
   210                              <1> %endif
   211                              <1> 
   212                              <1> 		;---------------------------------------
   213                              <1> 		; コピー元フォントアドレスを設定
   214                              <1> 		;---------------------------------------
   215 00000A36 0FB67514            <1> 		movzx	esi, byte [ebp +20]				; CL  = 文字コード;
   216 00000A3A C1E604              <1> 		shl		esi, 4							; CL *= 16; // 1文字16バイト
   217 00000A3D 0335[38020000]      <1> 		add		esi, [FONT_ADR]					; ESI = フォントアドレス;
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; コピー先アドレスを取得
   221                              <1> 		; Adr = 0xA0000 + (640 / 8 * 16) * y + x
   222                              <1> 		;---------------------------------------
   223 00000A43 8B7D0C              <1> 		mov		edi, [ebp +12]					; Y（行）
   224 00000A46 C1E708              <1> 		shl		edi, 8							; EDI = Y * 256;
   225 00000A49 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA0000]	; EDI = Y *   4 + Y;
   226 00000A50 037D08              <1> 		add		edi, [ebp + 8]					; X（列）
   227                              <1> 
   228                              <1> 		;---------------------------------------
   229                              <1> 		; 1文字分のフォントを出力
   230                              <1> 		;---------------------------------------
   231 00000A53 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
   232                              <1> 
   233 00000A57 6A03E80EFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
   233 00000A60 C404                <1>
   234 00000A62 6A08E81CFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
   234 00000A6B C404                <1>
   235 00000A6D 536A085756E827FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
   235 00000A76 FF6683C410          <1>
   236                              <1> 
   237 00000A7B 6A02E8EAFEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
   237 00000A84 C404                <1>
   238 00000A86 6A04E8F8FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
   238 00000A8F C404                <1>
   239 00000A91 536A045756E803FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
   239 00000A9A FF6683C410          <1>
   240                              <1> 
   241 00000A9F 6A01E8C6FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
   241 00000AA8 C404                <1>
   242 00000AAA 6A02E8D4FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
   242 00000AB3 C404                <1>
   243 00000AB5 536A025756E8DFFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
   243 00000ABE FF6683C410          <1>
   244                              <1> 
   245 00000AC3 6A00E8A2FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
   245 00000ACC C404                <1>
   246 00000ACE 6A01E8B0FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
   246 00000AD7 C404                <1>
   247 00000AD9 536A015756E8BBFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
   247 00000AE2 FF6683C410          <1>
   248                              <1> 
   249                              <1> %ifdef	USE_TEST_AND_SET
   250                              <1> 		;---------------------------------------
   251                              <1> 		; テストアンドセット
   252                              <1> 		;---------------------------------------
   253 00000AE7 C705[FC0A0000]0000- <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   253 00000AEF 0000                <1>
   254                              <1> %endif
   255                              <1> 
   256                              <1> 		;---------------------------------------
   257                              <1> 		; 【レジスタの復帰】
   258                              <1> 		;---------------------------------------
   259 00000AF1 5F                  <1> 		pop		edi
   260 00000AF2 5E                  <1> 		pop		esi
   261 00000AF3 5A                  <1> 		pop		edx
   262 00000AF4 59                  <1> 		pop		ecx
   263 00000AF5 5B                  <1> 		pop		ebx
   264 00000AF6 58                  <1> 		pop		eax
   265                              <1> 
   266                              <1> 		;---------------------------------------
   267                              <1> 		; 【スタックフレームの破棄】
   268                              <1> 		;---------------------------------------
   269 00000AF7 89EC                <1> 		mov		esp, ebp
   270 00000AF9 5D                  <1> 		pop		ebp
   271                              <1> 
   272 00000AFA C3                  <1> 		ret
   273                              <1> 
   274                              <1> %ifdef USE_TEST_AND_SET
   275 00000AFB 00                  <1> ALIGN 4, db 0
   276 00000AFC 00000000            <1> IN_USE:	dd	0
   277                              <1> %endif
   278                              <1> 
   166                                  %include	"../modules/protect/draw_font.s"
   167                              <1> ;************************************************************************
   168                              <1> ;	フォント一覧を表示
   169                              <1> ;========================================================================
   170                              <1> ;■書式		: void draw_font(col, row);
   171                              <1> ;
   172                              <1> ;■引数
   173                              <1> ;	col		: 列
   174                              <1> ;	row		: 行
   175                              <1> ;
   176                              <1> ;■戻り値	: 無し
   177                              <1> ;************************************************************************
   178                              <1> draw_font:
   179                              <1> 		;---------------------------------------
   180                              <1> 		; 【スタックフレームの構築】
   181                              <1> 		;---------------------------------------
   182                              <1> 												; ------|--------
   183                              <1> 												; EBP+12| Y（行）
   184                              <1> 												; EBP+ 8| X（列）
   185                              <1> 												; ---------------
   186 00000B00 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   187 00000B01 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   188                              <1> 												; ---------------
   189                              <1> 
   190                              <1> 		;---------------------------------------
   191                              <1> 		; 【レジスタの保存】
   192                              <1> 		;---------------------------------------
   193 00000B03 50                  <1> 		push	eax
   194 00000B04 53                  <1> 		push	ebx
   195 00000B05 51                  <1> 		push	ecx
   196 00000B06 52                  <1> 		push	edx
   197 00000B07 56                  <1> 		push	esi
   198 00000B08 57                  <1> 		push	edi
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 表示位置
   202                              <1> 		;---------------------------------------
   203 00000B09 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   204 00000B0C 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; フォント一覧を表示
   208                              <1> 		;---------------------------------------
   209 00000B0F B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   210 00000B14 81F900010000        <1> .10L:	cmp		ecx, 256						;      ECX < 256;
   211 00000B1A 731F                <1> 		jae		.10E							; 
   212                              <1> 												;      ECX++)
   213                              <1> 												; {
   214                              <1> 												;   // 桁位置の計算
   215 00000B1C 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   216 00000B1E 83E00F              <1> 		and		eax, 0x0F						;   EAX &= 0x0F
   217 00000B21 01F0                <1> 		add		eax, esi						;   EAX += X;
   218                              <1> 												;   
   219                              <1> 												;   // 行位置の計算
   220 00000B23 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   221 00000B25 C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
   222 00000B28 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   223                              <1> 
   224 00000B2A 516A075350E8EBFEFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
   224 00000B33 FF6683C410          <1>
   225                              <1> 
   226 00000B38 41                  <1> 		inc		ecx								;   // for (... ECX++)
   227 00000B39 EBD9                <1> 		jmp		.10L							; 
   228                              <1> .10E:											; }
   229                              <1> 
   230                              <1> 		;---------------------------------------
   231                              <1> 		; 【レジスタの復帰】
   232                              <1> 		;---------------------------------------
   233 00000B3B 5F                  <1> 		pop		edi
   234 00000B3C 5E                  <1> 		pop		esi
   235 00000B3D 5A                  <1> 		pop		edx
   236 00000B3E 59                  <1> 		pop		ecx
   237 00000B3F 5B                  <1> 		pop		ebx
   238 00000B40 58                  <1> 		pop		eax
   239                              <1> 
   240                              <1> 		;---------------------------------------
   241                              <1> 		; 【スタックフレームの破棄】
   242                              <1> 		;---------------------------------------
   243 00000B41 89EC                <1> 		mov		esp, ebp
   244 00000B43 5D                  <1> 		pop		ebp
   245                              <1> 
   246 00000B44 C3                  <1> 		ret
   247                              <1> 
   167                                  %include	"../modules/protect/draw_str.s"
   168                              <1> ;************************************************************************
   169                              <1> ;	文字列の表示
   170                              <1> ;========================================================================
   171                              <1> ;■書式		: void draw_str(col, row, color, p);
   172                              <1> ;
   173                              <1> ;■引数
   174                              <1> ;	col		: 列
   175                              <1> ;	row		: 行
   176                              <1> ;	color	: 描画色
   177                              <1> ;	p		: 文字列のアドレス
   178                              <1> ;
   179                              <1> ;■戻り値	: 無し
   180                              <1> ;************************************************************************
   181                              <1> draw_str:
   182                              <1> 		;---------------------------------------
   183                              <1> 		; 【スタックフレームの構築】
   184                              <1> 		;---------------------------------------
   185                              <1> 												; ------|--------
   186                              <1> 												; EBP+20| *p（文字列のアドレス）
   187                              <1> 												; EBP+16| color（色）
   188                              <1> 												; EBP+12| row（行）
   189                              <1> 												; EBP+ 8| col（列）
   190                              <1> 												; ---------------
   191 00000B45 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   192 00000B46 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   193                              <1> 												; ---------------
   194                              <1> 
   195                              <1> 		;---------------------------------------
   196                              <1> 		; 【レジスタの保存】
   197                              <1> 		;---------------------------------------
   198 00000B48 50                  <1> 		push	eax
   199 00000B49 53                  <1> 		push	ebx
   200 00000B4A 51                  <1> 		push	ecx
   201 00000B4B 52                  <1> 		push	edx
   202 00000B4C 56                  <1> 		push	esi
   203                              <1> 
   204                              <1> 		;---------------------------------------
   205                              <1> 		; 文字列の表示
   206                              <1> 		;---------------------------------------
   207 00000B4D 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
   208 00000B50 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
   209 00000B53 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
   210 00000B57 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
   211                              <1> 
   212 00000B5A FC                  <1> 		cld										; DF = 0; // アドレス加算
   213                              <1> .10L:											; do
   214                              <1> 												; {
   215 00000B5B AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
   216 00000B5C 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   217 00000B5E 741A                <1> 		je		.10E							;     break;
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 1文字表示
   221                              <1> 		;---------------------------------------
   222                              <1> %ifdef	USE_SYSTEM_CALL
   223 00000B60 CD81                <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
   224                              <1> %else
   225                              <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
   226                              <1> %endif
   227                              <1> 
   228                              <1> 		; 次の文字の位置を調整
   229 00000B62 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
   230 00000B63 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
   231 00000B66 7C10                <1> 		jl		.12E							;   {
   232 00000B68 B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
   233 00000B6D 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
   234 00000B6E 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
   235 00000B71 7C05                <1> 		jl		.12E							;     {
   236 00000B73 BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
   237                              <1> 												;     }
   238                              <1> .12E:											;   }
   239 00000B78 EBE1                <1> 		jmp		.10L							;   
   240                              <1> .10E:											; } while (1);
   241                              <1> 
   242                              <1> 		;---------------------------------------
   243                              <1> 		; 【レジスタの復帰】
   244                              <1> 		;---------------------------------------
   245 00000B7A 5E                  <1> 		pop		esi
   246 00000B7B 5A                  <1> 		pop		edx
   247 00000B7C 59                  <1> 		pop		ecx
   248 00000B7D 5B                  <1> 		pop		ebx
   249 00000B7E 58                  <1> 		pop		eax
   250                              <1> 
   251                              <1> 		;---------------------------------------
   252                              <1> 		; 【スタックフレームの破棄】
   253                              <1> 		;---------------------------------------
   254 00000B7F 89EC                <1> 		mov		esp, ebp
   255 00000B81 5D                  <1> 		pop		ebp
   256                              <1> 
   257 00000B82 C3                  <1> 		ret
   258                              <1> 
   168                                  %include	"../modules/protect/draw_color_bar.s"
   169                              <1> ;************************************************************************
   170                              <1> ;	カラーバーの表示
   171                              <1> ;========================================================================
   172                              <1> ;■書式		: void draw_color_bar(col, row);
   173                              <1> ;
   174                              <1> ;■引数
   175                              <1> ;	col		: 列
   176                              <1> ;	row		: 行
   177                              <1> ;
   178                              <1> ;■戻り値	: 無し
   179                              <1> ;************************************************************************
   180                              <1> draw_color_bar:
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 【スタックフレームの構築】
   183                              <1> 		;---------------------------------------
   184                              <1> 												; ------|--------
   185                              <1> 												; EBP+ 8| X（列）
   186                              <1> 												; EBP+12| Y（行）
   187                              <1> 												; ---------------
   188 00000B83 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   189 00000B84 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   190                              <1> 												; ---------------
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 【レジスタの保存】
   193                              <1> 		;---------------------------------------
   194 00000B86 50                  <1> 		push	eax
   195 00000B87 53                  <1> 		push	ebx
   196 00000B88 51                  <1> 		push	ecx
   197 00000B89 52                  <1> 		push	edx
   198 00000B8A 56                  <1> 		push	esi
   199 00000B8B 57                  <1> 		push	edi
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; 表示位置
   203                              <1> 		;---------------------------------------
   204 00000B8C 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   205 00000B8F 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   206                              <1> 
   207                              <1> 		;---------------------------------------
   208                              <1> 		; カラーバーを表示
   209                              <1> 		;---------------------------------------
   210 00000B92 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   211 00000B97 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
   212 00000B9A 732E                <1> 		jae		.10E							; 
   213                              <1> 												;      ECX++)
   214                              <1> 												; {
   215                              <1> 												;   // 桁位置の計算
   216 00000B9C 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   217 00000B9E 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
   218 00000BA1 C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
   219 00000BA4 01F0                <1> 		add		eax, esi						;   EAX += X;
   220                              <1> 												;   
   221                              <1> 												;   // 行位置の計算
   222 00000BA6 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   223 00000BA8 D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
   224 00000BAA 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   225                              <1> 												;   
   226                              <1> 												;   // 表示色の取得
   227 00000BAC 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
   228 00000BAE D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
   229 00000BB0 8B92[DD0B0000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
   230                              <1> 
   231 00000BB6 68[D40B0000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
   231 00000BBE E882FFFFFF6683C410  <1>
   232                              <1> 
   233 00000BC7 41                  <1> 		inc		ecx								;   // for (... ECX++)
   234 00000BC8 EBCD                <1> 		jmp		.10L							; 
   235                              <1> .10E:											; }
   236                              <1> 
   237                              <1> 		;---------------------------------------
   238                              <1> 		; 【レジスタの復帰】
   239                              <1> 		;---------------------------------------
   240 00000BCA 5F                  <1> 		pop		edi
   241 00000BCB 5E                  <1> 		pop		esi
   242 00000BCC 5A                  <1> 		pop		edx
   243 00000BCD 59                  <1> 		pop		ecx
   244 00000BCE 5B                  <1> 		pop		ebx
   245 00000BCF 58                  <1> 		pop		eax
   246                              <1> 
   247                              <1> 		;---------------------------------------
   248                              <1> 		; 【スタックフレームの破棄】
   249                              <1> 		;---------------------------------------
   250 00000BD0 89EC                <1> 		mov		esp, ebp
   251 00000BD2 5D                  <1> 		pop		ebp
   252                              <1> 
   253 00000BD3 C3                  <1> 		ret
   254                              <1> 
   255 00000BD4 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
   256                              <1> 
   257 00000BDD 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
   258 00000BE1 00010009            <1> 		dw	0x0100, 0x0900
   259 00000BE5 0002000A            <1> 		dw	0x0200, 0x0A00
   260 00000BE9 0003000B            <1> 		dw	0x0300, 0x0B00
   261 00000BED 0004000C            <1> 		dw	0x0400, 0x0C00
   262 00000BF1 0005000D            <1> 		dw	0x0500, 0x0D00
   263 00000BF5 0006000E            <1> 		dw	0x0600, 0x0E00
   264 00000BF9 0007000F            <1> 		dw	0x0700, 0x0F00
   265                              <1> 
   169                                  %include	"../modules/protect/draw_pixel.s"
   170                              <1> ;************************************************************************
   171                              <1> ;	ピクセルの描画
   172                              <1> ;========================================================================
   173                              <1> ;■書式		: void draw_pixel(X, Y, color);
   174                              <1> ;
   175                              <1> ;■引数
   176                              <1> ;	X		: X座標
   177                              <1> ;	Y		: Y座標
   178                              <1> ;	color	: 描画色
   179                              <1> ;
   180                              <1> ;■戻り値	: 無し
   181                              <1> ;************************************************************************
   182                              <1> draw_pixel:
   183                              <1> 		;---------------------------------------
   184                              <1> 		; 【スタックフレームの構築】
   185                              <1> 		;---------------------------------------
   186                              <1> 												; ------|--------
   187                              <1> 												; EBP+16| 色
   188                              <1> 												; EBP+12| Y
   189                              <1> 												; EBP+ 8| X
   190                              <1> 												; ------|--------
   191 00000BFD 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   192 00000BFE 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   193                              <1> 												; ------+--------
   194                              <1> 		;---------------------------------------
   195                              <1> 		; 【レジスタの保存】
   196                              <1> 		;---------------------------------------
   197 00000C00 50                  <1> 		push	eax
   198 00000C01 53                  <1> 		push	ebx
   199 00000C02 51                  <1> 		push	ecx
   200 00000C03 57                  <1> 		push	edi
   201                              <1> 
   202                              <1> 		;---------------------------------------
   203                              <1> 		; Y座標を80倍する（640/8）
   204                              <1> 		;---------------------------------------
   205 00000C04 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI  = Y座標
   206 00000C07 C1E704              <1> 		shl		edi, 4							; EDI *= 16;
   207 00000C0A 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA_0000]	; EDI  = 0xA00000[EDI * 4 + EDI];
   208                              <1> 
   209                              <1> 		;---------------------------------------
   210                              <1> 		; X座標を1/8して加算
   211                              <1> 		;---------------------------------------
   212 00000C11 8B5D08              <1> 		mov		ebx, [ebp + 8]					; EBX  = X座標;
   213 00000C14 89D9                <1> 		mov		ecx, ebx						; ECX  = X座標;（一時保存）
   214 00000C16 C1EB03              <1> 		shr		ebx, 3							; EBX /= 8;
   215 00000C19 01DF                <1> 		add		edi, ebx						; EDI += EBX;
   216                              <1> 
   217                              <1> 		;---------------------------------------
   218                              <1> 		; X座標を8で割った余りからビット位置を計算
   219                              <1> 		; (0=0x80, 1=0x40,... 7=0x01)
   220                              <1> 		;---------------------------------------
   221 00000C1B 83E107              <1> 		and		ecx, 0x07						; ECX = X & 0x07;
   222 00000C1E BB80000000          <1> 		mov		ebx, 0x80						; EBX = 0x80;
   223 00000C23 D3EB                <1> 		shr		ebx, cl							; EBX >>= ECX;
   224                              <1> 
   225                              <1> 		;---------------------------------------
   226                              <1> 		; 色指定
   227                              <1> 		;---------------------------------------
   228 00000C25 8B4D10              <1> 		mov		ecx, [ebp +16]					; // 表示色
   229                              <1> 
   230                              <1> %ifdef	USE_TEST_AND_SET
   231 00000C28 68[FC0A0000]E89906- <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   231 00000C30 00006683C404        <1>
   232                              <1> %endif
   233                              <1> 
   234                              <1> 		;---------------------------------------
   235                              <1> 		; プレーン毎に出力
   236                              <1> 		;---------------------------------------
   237 00000C36 6A03E82FFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 輝度(I)プレーンを選択
   237 00000C3F C404                <1>
   238 00000C41 6A08E83DFDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 輝度(I)プレーンを選択
   238 00000C4A C404                <1>
   239 00000C4C 516A085753E89BFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
   239 00000C55 FF6683C410          <1>
   240                              <1> 
   241 00000C5A 6A02E80BFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 赤(R)プレーンを選択
   241 00000C63 C404                <1>
   242 00000C65 6A04E819FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 赤(R)プレーンを選択
   242 00000C6E C404                <1>
   243 00000C70 516A045753E877FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
   243 00000C79 FF6683C410          <1>
   244                              <1> 
   245 00000C7E 6A01E8E7FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 緑(G)プレーンを選択
   245 00000C87 C404                <1>
   246 00000C89 6A02E8F5FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 緑(G)プレーンを選択
   246 00000C92 C404                <1>
   247 00000C94 516A025753E853FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
   247 00000C9D FF6683C410          <1>
   248                              <1> 
   249 00000CA2 6A00E8C3FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 青(B)プレーンを選択
   249 00000CAB C404                <1>
   250 00000CAD 6A01E8D1FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 青(B)プレーンを選択
   250 00000CB6 C404                <1>
   251 00000CB8 516A015753E82FFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
   251 00000CC1 FF6683C410          <1>
   252                              <1> 
   253                              <1> 
   254                              <1> %ifdef	USE_TEST_AND_SET
   255                              <1> 		;---------------------------------------
   256                              <1> 		; テストアンドセット
   257                              <1> 		;---------------------------------------
   258 00000CC6 C705[FC0A0000]0000- <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   258 00000CCE 0000                <1>
   259                              <1> %endif
   260                              <1> 
   261                              <1> 		;---------------------------------------
   262                              <1> 		; 【レジスタの復帰】
   263                              <1> 		;---------------------------------------
   264 00000CD0 5F                  <1> 		pop		edi
   265 00000CD1 59                  <1> 		pop		ecx
   266 00000CD2 5B                  <1> 		pop		ebx
   267 00000CD3 58                  <1> 		pop		eax
   268                              <1> 
   269                              <1> 		;---------------------------------------
   270                              <1> 		; 【スタックフレームの破棄】
   271                              <1> 		;---------------------------------------
   272 00000CD4 89EC                <1> 		mov		esp, ebp
   273 00000CD6 5D                  <1> 		pop		ebp
   274                              <1> 
   275 00000CD7 C3                  <1> 		ret
   276                              <1> 
   170                                  %include	"../modules/protect/draw_line.s"
   171                              <1> ;************************************************************************
   172                              <1> ;	直線の描画
   173                              <1> ;========================================================================
   174                              <1> ;■書式		: void draw_line(X0, Y0, X1, Y1, color);
   175                              <1> ;
   176                              <1> ;■引数
   177                              <1> ;	X0		: 始点のX座標
   178                              <1> ;	Y0		: 始点のY座標
   179                              <1> ;	X1		: 終点のX座標
   180                              <1> ;	Y1		: 終点のY座標
   181                              <1> ;	color	: 描画色
   182                              <1> ;
   183                              <1> ;■戻り値	: 無し
   184                              <1> ;************************************************************************
   185                              <1> draw_line:
   186                              <1> 		;---------------------------------------
   187                              <1> 		; 【スタックフレームの構築】
   188                              <1> 		;---------------------------------------
   189                              <1> 												; ---------------
   190                              <1> 												;    +24| 色
   191                              <1> 												;    +20| Y1
   192                              <1> 												;    +16| X1
   193                              <1> 												;    +12| Y0
   194                              <1> 												;    + 8| X0
   195                              <1> 												; ---------------
   196 00000CD8 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   197 00000CD9 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   198                              <1> 												; ---------------
   199 00000CDB 6A00                <1> 		push	dword 0							;    - 4| sum   = 0; // 相対軸の積算値
   200 00000CDD 6A00                <1> 		push	dword 0							;    - 8| x0    = 0; // X座標
   201 00000CDF 6A00                <1> 		push	dword 0							;    -12| dx    = 0; // X増分
   202 00000CE1 6A00                <1> 		push	dword 0							;    -16| inc_x = 0; // X座標増分(1 or -1)
   203 00000CE3 6A00                <1> 		push	dword 0							;    -20| y0    = 0; // Y座標
   204 00000CE5 6A00                <1> 		push	dword 0							;    -24| dy    = 0; // Y増分
   205 00000CE7 6A00                <1> 		push	dword 0							;    -28| inc_y = 0; // Y座標増分(1 or -1)
   206                              <1> 												; ------|--------
   207                              <1> 
   208                              <1> 		;---------------------------------------
   209                              <1> 		; 【レジスタの保存】
   210                              <1> 		;---------------------------------------
   211 00000CE9 50                  <1> 		push	eax
   212 00000CEA 53                  <1> 		push	ebx
   213 00000CEB 51                  <1> 		push	ecx
   214 00000CEC 52                  <1> 		push	edx
   215 00000CED 56                  <1> 		push	esi
   216 00000CEE 57                  <1> 		push	edi
   217                              <1> 
   218                              <1> 		;---------------------------------------
   219                              <1> 		; 幅を計算（X軸）
   220                              <1> 		;---------------------------------------
   221 00000CEF 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   222 00000CF2 8B5D10              <1> 		mov		ebx, [ebp +16]					; EBX = X1;
   223 00000CF5 29C3                <1> 		sub		ebx, eax						; EBX = X1 - X0; // 幅
   224 00000CF7 7D09                <1> 		jge		.10F							; if (幅 < 0)
   225                              <1> 												; {
   226 00000CF9 F7DB                <1> 		neg		ebx								;   幅   *= -1;
   227 00000CFB BEFFFFFFFF          <1> 		mov		esi, -1							;   // X座標の増分
   228 00000D00 EB05                <1> 		jmp		.10E							; }
   229                              <1> .10F:											; else
   230                              <1> 												; {
   231 00000D02 BE01000000          <1> 		mov		esi, 1							;   // X座標の増分
   232                              <1> .10E:											; }
   233                              <1> 
   234                              <1> 		;---------------------------------------
   235                              <1> 		; 高さを計算（Y軸）
   236                              <1> 		;---------------------------------------
   237 00000D07 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX = Y0
   238 00000D0A 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1
   239 00000D0D 29CA                <1> 		sub		edx, ecx						; EDX = Y1 - Y0; // 高さ
   240 00000D0F 7D09                <1> 		jge		.20F							; if (高さ < 0)
   241                              <1> 												; {
   242 00000D11 F7DA                <1> 		neg		edx								;   高さ *= -1;
   243 00000D13 BFFFFFFFFF          <1> 		mov		edi, -1							;   // Y座標の増分
   244 00000D18 EB05                <1> 		jmp		.20E							; }
   245                              <1> .20F:											; else
   246                              <1> 												; {
   247 00000D1A BF01000000          <1> 		mov		edi, 1							;   // Y座標の増分
   248                              <1> .20E:											; }
   249                              <1> 
   250                              <1> 		;---------------------------------------
   251                              <1> 		; X軸
   252                              <1> 		;---------------------------------------
   253 00000D1F 8945F8              <1> 		mov		[ebp - 8], eax					;   // X軸:開始座標
   254 00000D22 895DF4              <1> 		mov		[ebp -12], ebx					;   // X軸:描画幅
   255 00000D25 8975F0              <1> 		mov		[ebp -16], esi					;   // X軸:増分(基準軸：1 or -1)
   256                              <1> 
   257                              <1> 		;---------------------------------------
   258                              <1> 		; Y軸
   259                              <1> 		;---------------------------------------
   260 00000D28 894DEC              <1> 		mov		[ebp -20], ecx					;   // Y軸:開始座標
   261 00000D2B 8955E8              <1> 		mov		[ebp -24], edx					;   // Y軸:描画幅
   262 00000D2E 897DE4              <1> 		mov		[ebp -28], edi					;   // Y軸:増分(基準軸：1 or -1)
   263                              <1> 
   264                              <1> 		;---------------------------------------
   265                              <1> 		; 基準軸を決める
   266                              <1> 		;---------------------------------------
   267 00000D31 39D3                <1> 		cmp		ebx, edx						; if (幅 <= 高さ)
   268 00000D33 7F08                <1> 		jg		.22F							; {
   269                              <1> 												;   
   270 00000D35 8D75EC              <1> 		lea		esi, [ebp -20]					;   // Y軸が基準軸
   271 00000D38 8D7DF8              <1> 		lea		edi, [ebp - 8]					;   // X軸が相対軸
   272                              <1> 												;   
   273 00000D3B EB06                <1> 		jmp		.22E							; }
   274                              <1> .22F:											; else
   275                              <1> 												; {
   276 00000D3D 8D75F8              <1> 		lea		esi, [ebp - 8]					;   // X軸が基準軸
   277 00000D40 8D7DEC              <1> 		lea		edi, [ebp -20]					;   // Y軸が相対軸
   278                              <1> .22E:											; }
   279                              <1> 
   280                              <1> 		;---------------------------------------
   281                              <1> 		; 繰り返し回数(基準軸のドット数)
   282                              <1> 		;---------------------------------------
   283 00000D43 8B4EFC              <1> 		mov		ecx, [esi - 4]					; ECX = 基準軸描画幅;
   284 00000D46 83F900              <1> 		cmp		ecx, 0							; if (0 == ECX)
   285 00000D49 7505                <1> 		jnz		.30E							; {
   286 00000D4B B901000000          <1> 		mov		ecx, 1							;   ECX = 1;
   287                              <1> .30E:											; }
   288                              <1> 
   289                              <1> 		;---------------------------------------
   290                              <1> 		; 線を描画
   291                              <1> 		;---------------------------------------
   292                              <1> .50L:											; do
   293                              <1> 												; {
   294                              <1> %ifdef	USE_SYSTEM_CALL
   295 00000D50 89C8                <1> 		mov		eax, ecx						;   // 繰り返し回数を保存
   296                              <1> 
   297 00000D52 8B5D18              <1> 		mov		ebx, [ebp +24]					;   EBX = 表示色;
   298 00000D55 8B4DF8              <1> 		mov		ecx, [ebp - 8]					;   ECX = X座標;
   299 00000D58 8B55EC              <1> 		mov		edx, [ebp -20]					;   EDX = Y座標;
   300 00000D5B CD82                <1> 		int		0x82							;   sys_call(1, X, Y, 色, 文字); BX(C), CX(X), DX(Y)
   301                              <1> 
   302 00000D5D 89C1                <1> 		mov		ecx, eax
   303                              <1> %else
   304                              <1> 		cdecl	draw_pixel, dword [ebp - 8], 							dword [ebp -20], 							dword [ebp +24]		;   // 点の描画
   307                              <1> %endif
   308                              <1> 												;   // 基準軸を更新(1ドット分)
   309 00000D5F 8B46F8              <1> 		mov		eax, [esi - 8]					;   EAX = 基準軸増分(1 or -1);
   310 00000D62 0106                <1> 		add		[esi - 0], eax					;   
   311                              <1> 
   312                              <1> 												;   // 相対軸を更新
   313 00000D64 8B45FC              <1> 		mov		eax, [ebp - 4]					;   EAX  = sum; // 相対軸の積算値;
   314 00000D67 0347FC              <1> 		add		eax, [edi - 4]					;   EAX += dy;  // 増分(相対軸の描画幅)
   315 00000D6A 8B5EFC              <1> 		mov		ebx, [esi - 4]					;   EBX  = dx;  // 増分(基準軸の描画幅)
   316                              <1> 
   317 00000D6D 39D8                <1> 		cmp		eax, ebx						;   if (積算値 <= 相対軸の増分)
   318 00000D6F 7C07                <1> 		jl		.52E							;   {
   319 00000D71 29D8                <1> 		sub		eax, ebx						;     EAX -= EBX; // 積算値から相対軸の増分を減算
   320                              <1> 												;     
   321                              <1> 												;     // 相対軸の座標を更新(1ドット分)
   322 00000D73 8B5FF8              <1> 		mov		ebx, [edi - 8]					;     EBX =  相対軸増分;
   323 00000D76 011F                <1> 		add		[edi - 0], ebx					;     
   324                              <1> .52E:											;   }
   325 00000D78 8945FC              <1> 		mov		[ebp - 4], eax					;   // 積算値を更新
   326                              <1> 												;   
   327 00000D7B E2D3                <1> 		loop	.50L							;   
   328                              <1> .50E:											; } while (ループ回数--);
   329                              <1> 
   330                              <1> 		;---------------------------------------
   331                              <1> 		; 【レジスタの復帰】
   332                              <1> 		;---------------------------------------
   333 00000D7D 5F                  <1> 		pop		edi
   334 00000D7E 5E                  <1> 		pop		esi
   335 00000D7F 5A                  <1> 		pop		edx
   336 00000D80 59                  <1> 		pop		ecx
   337 00000D81 5B                  <1> 		pop		ebx
   338 00000D82 58                  <1> 		pop		eax
   339                              <1> 
   340                              <1> 		;---------------------------------------
   341                              <1> 		; 【スタックフレームの破棄】
   342                              <1> 		;---------------------------------------
   343 00000D83 89EC                <1> 		mov		esp, ebp
   344 00000D85 5D                  <1> 		pop		ebp
   345                              <1> 
   346 00000D86 C3                  <1> 		ret
   347                              <1> 
   171                                  %include	"../modules/protect/draw_rect.s"
   172                              <1> ;************************************************************************
   173                              <1> ;	矩形の描画
   174                              <1> ;========================================================================
   175                              <1> ;■書式		: void draw_rect(X0, Y0, X1, Y1, color);
   176                              <1> ;
   177                              <1> ;■引数
   178                              <1> ;	X0		: 始点のX座標
   179                              <1> ;	Y0		: 始点のY座標
   180                              <1> ;	X1		: 終点のX座標
   181                              <1> ;	Y1		: 終点のY座標
   182                              <1> ;	color	: 描画色
   183                              <1> ;
   184                              <1> ;■戻り値	: 無し
   185                              <1> ;************************************************************************
   186                              <1> draw_rect:
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 【スタックフレームの構築】
   189                              <1> 		;---------------------------------------
   190                              <1> 												; ------|--------
   191                              <1> 												; EBP+24| 色
   192                              <1> 												; EBP+20| Y1
   193                              <1> 												; EBP+16| X1
   194                              <1> 												; EBP+12| Y0
   195                              <1> 												; EBP+ 8| X0
   196                              <1> 												; ---------------
   197 00000D87 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   198 00000D88 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   199                              <1> 												; ------|--------
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; 【レジスタの保存】
   203                              <1> 		;---------------------------------------
   204 00000D8A 50                  <1> 		push		eax
   205 00000D8B 53                  <1> 		push		ebx
   206 00000D8C 51                  <1> 		push		ecx
   207 00000D8D 52                  <1> 		push		edx
   208 00000D8E 56                  <1> 		push		esi
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 矩形を描画
   212                              <1> 		;---------------------------------------
   213 00000D8F 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   214 00000D92 8B5D0C              <1> 		mov		ebx, [ebp +12]					; EBX = Y0;
   215 00000D95 8B4D10              <1> 		mov		ecx, [ebp +16]					; ECX = X1;
   216 00000D98 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1;
   217 00000D9B 8B7518              <1> 		mov		esi, [ebp +24]					; ESI = 色;
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 座標軸の大小を確定
   221                              <1> 		;---------------------------------------
   222 00000D9E 39C8                <1> 		cmp		eax, ecx						; if (X1 < X0)
   223 00000DA0 7C01                <1> 		jl		.10E							; {
   224 00000DA2 91                  <1> 		xchg	eax, ecx						;   X0とX1を入れ替える;
   225                              <1> .10E:											; }
   226                              <1> 
   227 00000DA3 39D3                <1> 		cmp		ebx, edx						; if (Y1 < Y0)
   228 00000DA5 7C02                <1> 		jl		.20E							; {
   229 00000DA7 87DA                <1> 		xchg	ebx, edx						;   Y0とY1を入れ替える;
   230                              <1> .20E:											; }
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; 矩形を描画
   234                              <1> 		;---------------------------------------
   235 00000DA9 5653515350E825FFFF- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, esi	; 上線
   235 00000DB2 FF6683C414          <1>
   236 00000DB7 5652505350E817FFFF- <1> 		cdecl	draw_line, eax, ebx, eax, edx, esi	; 左線
   236 00000DC0 FF6683C414          <1>
   237                              <1> 
   238 00000DC5 4A                  <1> 		dec		edx									; EDX--; // 下線は1ドット上げる
   239 00000DC6 5652515250E808FFFF- <1> 		cdecl	draw_line, eax, edx, ecx, edx, esi	; 下線
   239 00000DCF FF6683C414          <1>
   240 00000DD4 42                  <1> 		inc		edx
   241                              <1> 
   242 00000DD5 49                  <1> 		dec		ecx									; ECX--; // 右線は1ドット左に移動
   243 00000DD6 5652515351E8F8FEFF- <1> 		cdecl	draw_line, ecx, ebx, ecx, edx, esi	; 右線
   243 00000DDF FF6683C414          <1>
   244                              <1> 
   245                              <1> 		;---------------------------------------
   246                              <1> 		; 【レジスタの復帰】
   247                              <1> 		;---------------------------------------
   248 00000DE4 5E                  <1> 		pop		esi
   249 00000DE5 5A                  <1> 		pop		edx
   250 00000DE6 59                  <1> 		pop		ecx
   251 00000DE7 5B                  <1> 		pop		ebx
   252 00000DE8 58                  <1> 		pop		eax
   253                              <1> 
   254                              <1> 		;---------------------------------------
   255                              <1> 		; 【スタックフレームの破棄】
   256                              <1> 		;---------------------------------------
   257 00000DE9 89EC                <1> 		mov		esp, ebp
   258 00000DEB 5D                  <1> 		pop		ebp
   259                              <1> 
   260 00000DEC C3                  <1> 		ret
   172                                  %include	"../modules/protect/itoa.s"
   173                              <1> ;************************************************************************
   174                              <1> ;	数値を文字に変換
   175                              <1> ;========================================================================
   176                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
   177                              <1> ;
   178                              <1> ;■引数
   179                              <1> ;	num		: 変換する数値
   180                              <1> ;	buff	: 保存先バッファアドレス
   181                              <1> ;	size	: 保存先バッファサイズ
   182                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
   183                              <1> ;	flags	: フラグ
   184                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
   185                              <1> ;			:      : 0=空白を' '（スペース）で埋める
   186                              <1> ;			:   B1 : 1=＋/-符号を表示する
   187                              <1> ;			:      : 0=＋/-符号を表示しない
   188                              <1> ;			:   B0 : 1=符号付き正数として扱う
   189                              <1> ;			:      : 0=符号無し正数として扱う
   190                              <1> ;
   191                              <1> ;■戻り値	: 無し
   192                              <1> ;************************************************************************
   193                              <1> itoa:
   194                              <1> 		;---------------------------------------
   195                              <1> 		; 【スタックフレームの構築】
   196                              <1> 		;---------------------------------------
   197                              <1> 												; ------|--------
   198                              <1> 												;    +24| フラグ
   199                              <1> 												;    +20| 基数
   200                              <1> 												;    +16| バッファサイズ
   201                              <1> 												;    +12| バッファアドレス
   202                              <1> 												;    + 8| 数値
   203                              <1> 												; ------|--------
   204                              <1> 												;    + 4| EIP（戻り番地）
   205 00000DED 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   206 00000DEE 89E5                <1> 		mov		ebp, esp						; ------+--------
   207                              <1> 
   208                              <1> 		;---------------------------------------
   209                              <1> 		; 【レジスタの保存】
   210                              <1> 		;---------------------------------------
   211 00000DF0 50                  <1> 		push	eax
   212 00000DF1 53                  <1> 		push	ebx
   213 00000DF2 51                  <1> 		push	ecx
   214 00000DF3 52                  <1> 		push	edx
   215 00000DF4 56                  <1> 		push	esi
   216 00000DF5 57                  <1> 		push	edi
   217                              <1> 
   218                              <1> 		;---------------------------------------
   219                              <1> 		; 引数を取得
   220                              <1> 		;---------------------------------------
   221 00000DF6 8B4508              <1> 		mov		eax, [ebp + 8]					; val  = 数値;
   222 00000DF9 8B750C              <1> 		mov		esi, [ebp +12]					; dst  = バッファアドレス;
   223 00000DFC 8B4D10              <1> 		mov		ecx, [ebp +16]					; size = 残りバッファサイズ;
   224                              <1> 
   225 00000DFF 89F7                <1> 		mov		edi, esi						; // バッファの最後尾
   226 00000E01 01CF                <1> 		add		edi, ecx						; dst  = &dst[size - 1];
   227 00000E03 4F                  <1> 		dec		edi								; 
   228                              <1> 
   229 00000E04 8B5D18              <1> 		mov		ebx, [ebp +24]					; flags = オプション;
   230                              <1> 
   231                              <1> 		;---------------------------------------
   232                              <1> 		; 符号付き判定
   233                              <1> 		;---------------------------------------
   234 00000E07 F7C301000000        <1> 		test	ebx, 0b0001						; if (flags & 0x01)// 符号付き
   235 00000E0D 7408                <1> .10Q:	je		.10E							; {
   236 00000E0F 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   237 00000E12 7D03                <1> .12Q:	jge		.12E							;   {
   238 00000E14 83CB02              <1> 		or		ebx, 0b0010						;     flags |=  2; // 符号表示
   239                              <1> .12E:											;   }
   240                              <1> .10E:											; }
   241                              <1> 
   242                              <1> 		;---------------------------------------
   243                              <1> 		; 符号出力判定
   244                              <1> 		;---------------------------------------
   245 00000E17 F7C302000000        <1> 		test	ebx, 0b0010						; if (flags & 0x02)// 符号出力判定
   246 00000E1D 7410                <1> .20Q:	je		.20E							; {
   247 00000E1F 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   248 00000E22 7D07                <1> .22Q:	jge		.22F							;   {
   249 00000E24 F7D8                <1> 		neg		eax								;     val *= -1;   // 符号反転
   250 00000E26 C6062D              <1> 		mov		[esi], byte '-'					;     *dst = '-';  // 符号表示
   251 00000E29 EB03                <1> 		jmp		.22E							;   }
   252                              <1> .22F:											;   else
   253                              <1> 												;   {
   254 00000E2B C6062B              <1> 		mov		[esi], byte '+'					;     *dst = '+';  // 符号表示
   255                              <1> .22E:											;   }
   256 00000E2E 49                  <1> 		dec		ecx								;   size--;        // 残りバッファサイズの減算
   257                              <1> .20E:											; }
   258                              <1> 
   259                              <1> 		;---------------------------------------
   260                              <1> 		; ASCII変換
   261                              <1> 		;---------------------------------------
   262 00000E2F 8B5D14              <1> 		mov		ebx, [ebp +20]					; BX = 基数;
   263                              <1> .30L:											; do
   264                              <1> 												; {
   265 00000E32 BA00000000          <1> 		mov		edx, 0							;   
   266 00000E37 F7F3                <1> 		div		ebx								;   DX = DX:AX % 基数;
   267                              <1> 												;   AX = DX:AX / 基数;
   268                              <1> 												;   
   269 00000E39 89D6                <1> 		mov		esi, edx						;   // テーブル参照
   270 00000E3B 8A96[660E0000]      <1> 		mov		dl, byte [.ascii + esi]			;   DL = ASCII[DX];
   271                              <1> 												;   
   272 00000E41 8817                <1> 		mov		[edi], dl						;   *dst = DL;
   273 00000E43 4F                  <1> 		dec		edi								;   dst--;
   274                              <1> 												;   
   275 00000E44 83F800              <1> 		cmp		eax, 0							;   
   276 00000E47 E0E9                <1> 		loopnz	.30L							; } while (AX);
   277                              <1> .30E:
   278                              <1> 
   279                              <1> 		;---------------------------------------
   280                              <1> 		; 空欄を埋める
   281                              <1> 		;---------------------------------------
   282 00000E49 83F900              <1> 		cmp		ecx, 0							; if (size)
   283 00000E4C 740E                <1> .40Q:	je		.40E							; {
   284 00000E4E B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   285 00000E50 66837D1804          <1> 		cmp		[ebp +24], word 0b0100			;   if (flags & 0x04)
   286 00000E55 7502                <1> .42Q:	jne		.42E							;   {
   287 00000E57 B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   288                              <1> .42E:											;   }
   289 00000E59 FD                  <1> 		std										;   // DF = 1（-方向）
   290 00000E5A F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   291                              <1> .40E:											; }
   292                              <1> 
   293                              <1> 		;---------------------------------------
   294                              <1> 		; 【レジスタの復帰】
   295                              <1> 		;---------------------------------------
   296 00000E5C 5F                  <1> 		pop		edi
   297 00000E5D 5E                  <1> 		pop		esi
   298 00000E5E 5A                  <1> 		pop		edx
   299 00000E5F 59                  <1> 		pop		ecx
   300 00000E60 5B                  <1> 		pop		ebx
   301 00000E61 58                  <1> 		pop		eax
   302                              <1> 
   303                              <1> 		;---------------------------------------
   304                              <1> 		; 【スタックフレームの破棄】
   305                              <1> 		;---------------------------------------
   306 00000E62 89EC                <1> 		mov		esp, ebp
   307 00000E64 5D                  <1> 		pop		ebp
   308                              <1> 
   309 00000E65 C3                  <1> 		ret
   310                              <1> 
   311 00000E66 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   311 00000E6F 39414243444546      <1>
   312                              <1> 
   173                                  %include	"../modules/protect/rtc.s"
   174                              <1> ;************************************************************************
   175                              <1> ;	RTCから時刻データを取得する
   176                              <1> ;========================================================================
   177                              <1> ;■書式		: DWORD rtc_get_time(dst);
   178                              <1> ;
   179                              <1> ;■引数
   180                              <1> ;	dst		: 保存先アドレス
   181                              <1> ;
   182                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   183                              <1> ;************************************************************************
   184                              <1> rtc_get_time:
   185                              <1> 		;---------------------------------------
   186                              <1> 		; 【スタックフレームの構築】
   187                              <1> 		;---------------------------------------
   188                              <1> 												; ------|--------
   189                              <1> 												; EBP+ 8| 保存先アドレス
   190                              <1> 												; ---------------
   191 00000E76 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   192 00000E77 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   193                              <1> 												; ---------------
   194                              <1> 		;---------------------------------------
   195                              <1> 		; 【レジスタの保存】
   196                              <1> 		;---------------------------------------
   197 00000E79 53                  <1> 		push	ebx
   198                              <1> 
   199                              <1> 		;---------------------------------------
   200                              <1> 		; RTCから時刻を取得
   201                              <1> 		;---------------------------------------
   202 00000E7A B00A                <1> 		mov		al, 0x0A						; // レジスタA
   203 00000E7C E670                <1> 		out		0x70, al						; outp(0x70, AL);
   204 00000E7E E471                <1> 		in		al, 0x71						; AL = レジスタA;
   205 00000E80 A880                <1> 		test	al, 0x80						; if (DM & UIP) // 更新中
   206 00000E82 7407                <1> 		je		.10F							; {
   207 00000E84 B801000000          <1> 		mov		eax, 1							;   ret = 1; // データ更新中
   208 00000E89 EB27                <1> 		jmp		.10E							; }
   209                              <1> .10F:											; else
   210                              <1> 												; {
   211                              <1> 												;   // RAM[0x04]:時
   212 00000E8B B004                <1> 		mov		al, 0x04						;   AL = 0x04;
   213 00000E8D E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   214 00000E8F E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 時データ
   215                              <1> 												;   
   216 00000E91 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   217                              <1> 												;   
   218                              <1> 												;   // RAM[0x02]:分
   219 00000E94 B002                <1> 		mov		al, 0x02						;   AL = 0x02;
   220 00000E96 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   221 00000E98 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 分データ
   222                              <1> 												;   
   223 00000E9A C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   224                              <1> 												;   
   225                              <1> 												;   // RAM[0x00]:秒
   226 00000E9D B000                <1> 		mov		al, 0x00						;   AL = 0x00;
   227 00000E9F E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   228 00000EA1 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 秒データ
   229                              <1> 												;   
   230 00000EA3 25FFFFFF00          <1> 		and		eax, 0x00_FF_FF_FF				;   // 下位3バイトのみ有効
   231                              <1> 												;   
   232 00000EA8 8B5D08              <1> 		mov		ebx, [ebp + 8]					;   dst = 保存先;
   233 00000EAB 8903                <1> 		mov		[ebx], eax						;   [dst] = 時刻;
   234                              <1> 												;   
   235 00000EAD B800000000          <1> 		mov		eax, 0							;   ret = 0; // 正常終了
   236                              <1> .10E:											; }
   237                              <1> 
   238                              <1> 		;---------------------------------------
   239                              <1> 		; 【レジスタの復帰】
   240                              <1> 		;---------------------------------------
   241 00000EB2 5B                  <1> 		pop		ebx
   242                              <1> 
   243                              <1> 		;---------------------------------------
   244                              <1> 		; 【スタックフレームの破棄】
   245                              <1> 		;---------------------------------------
   246 00000EB3 89EC                <1> 		mov		esp, ebp
   247 00000EB5 5D                  <1> 		pop		ebp
   248                              <1> 
   249 00000EB6 C3                  <1> 		ret
   250                              <1> 
   174                                  %include	"../modules/protect/draw_time.s"
   175                              <1> ;************************************************************************
   176                              <1> ;	時刻の表示
   177                              <1> ;========================================================================
   178                              <1> ;■書式		: void draw_time(col, row, color, time);
   179                              <1> ;
   180                              <1> ;■引数
   181                              <1> ;	col		: 列
   182                              <1> ;	row		: 行
   183                              <1> ;	color	: 描画色
   184                              <1> ;	time	: 時刻データ
   185                              <1> ;
   186                              <1> ;■戻り値	: 無し
   187                              <1> ;************************************************************************
   188                              <1> draw_time:
   189                              <1> 		;---------------------------------------
   190                              <1> 		; 【スタックフレームの構築】
   191                              <1> 		;---------------------------------------
   192                              <1> 												; ------|--------
   193                              <1> 												; EBP+20| 時刻データ
   194                              <1> 												; EBP+16| 色
   195                              <1> 												; EBP+12| Y（行）
   196                              <1> 												; EBP+ 8| X（列）
   197                              <1> 												; ---------------
   198 00000EB7 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   199 00000EB8 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   200                              <1> 												; ---------------
   201                              <1> 		;---------------------------------------
   202                              <1> 		; 【レジスタの保存】
   203                              <1> 		;---------------------------------------
   204 00000EBA 50                  <1> 		push	eax
   205 00000EBB 53                  <1> 		push	ebx
   206                              <1> 
   207                              <1> 		;---------------------------------------
   208                              <1> 		; 
   209                              <1> 		;---------------------------------------
   210 00000EBC 8B4514              <1> 		mov		eax, [ebp +20]					; EAX = 時刻データ;
   211 00000EBF 3B05[3C0F0000]      <1> 		cmp		eax, [.last]					; if (今回 != 前回)
   212 00000EC5 7467                <1> 		je		.10E							; {
   213                              <1> 												;   
   214 00000EC7 A3[3C0F0000]        <1> 		mov		[.last], eax					;   // 前回の時刻値を更新
   215                              <1> 												;   
   216 00000ECC BB00000000          <1> 		mov		ebx, 0							;   EBX = 0;
   217 00000ED1 88C3                <1> 		mov		bl, al							;   EBX = 秒;
   218 00000ED3 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .sec, 2, 16, 0b0100	;   // 時刻を文字列に変換
   218 00000EDA [4A0F0000]53E809FF- <1>
   218 00000EE2 FFFF6683C414        <1>
   219                              <1> 
   220 00000EE8 88E3                <1> 		mov		bl, ah							;   EBX = 分;
   221 00000EEA 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .min, 2, 16, 0b0100	;   // 時刻を文字列に変換
   221 00000EF1 [470F0000]53E8F2FE- <1>
   221 00000EF9 FFFF6683C414        <1>
   222                              <1> 
   223 00000EFF C1E810              <1> 		shr		eax, 16							;   EBX = 時;
   224 00000F02 6A046A106A0268-     <1> 		cdecl	itoa, eax, .hour, 2, 16, 0b0100	;   // 時刻を文字列に変換
   224 00000F09 [440F0000]50E8DAFE- <1>
   224 00000F11 FFFF6683C414        <1>
   225                              <1> 
   226                              <1> 												;   // 時刻を表示
   227 00000F17 68[440F0000]FF7510- <1> 		cdecl	draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
   227 00000F1F FF750CFF7508E81BFC- <1>
   227 00000F28 FFFF6683C410        <1>
   228                              <1> 												;     
   229                              <1> 												;   }
   230                              <1> .10E:											; }
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; 【レジスタの復帰】
   234                              <1> 		;---------------------------------------
   235 00000F2E 5B                  <1> 		pop		ebx
   236 00000F2F 58                  <1> 		pop		eax
   237                              <1> 
   238                              <1> 		;---------------------------------------
   239                              <1> 		; 【スタックフレームの破棄】
   240                              <1> 		;---------------------------------------
   241 00000F30 89EC                <1> 		mov		esp, ebp
   242 00000F32 5D                  <1> 		pop		ebp
   243                              <1> 
   244 00000F33 C3                  <1> 		ret
   245                              <1> 
   246                              <1> ALIGN 2, db 0
   247 00000F34 0000000000000000    <1> .temp:	dq	0
   248 00000F3C 0000000000000000    <1> .last:	dq	0
   249 00000F44 5A5A3A              <1> .hour:	db	"ZZ:"
   250 00000F47 5A5A3A              <1> .min:	db	"ZZ:"
   251 00000F4A 5A5A00              <1> .sec:	db	"ZZ", 0
   252                              <1> 
   175                                  %include	"../modules/protect/interrupt.s"
   176                              <1> ;************************************************************************
   177                              <1> ;	割り込みベクタの初期化
   178                              <1> ;************************************************************************
   179 00000F4D 90<rep 3h>          <1> ALIGN 4
   180 00000F50 FF07                <1> IDTR:	dw 		8 * 256 - 1					; idt_limit
   181 00000F52 00001000            <1> 		dd 		VECT_BASE					; idt location
   182                              <1> 
   183                              <1> ;************************************************************************
   184                              <1> ;	割り込みテーブルを初期化
   185                              <1> ;------------------------------------------------------------------------
   186                              <1> ;	
   187                              <1> ;	まず、全ての割り込みアドレスにデフォルト処理を設定すし、その後、
   188                              <1> ;	必要な割り込みだけ設定しなおす。
   189                              <1> ;	
   190                              <1> ;	割り込みアドレスは、VECT_BASEで指定され、256の割り込みがあるので
   191                              <1> ;	0x0800バイト占有することになる。
   192                              <1> ;	
   193                              <1> ;	           |____________| _V___
   194                              <1> ;	  VECT_BASE| IntDefault |  |   
   195                              <1> ;	           | IntDefault |  | 8 * 256
   196                              <1> ;	           |      :     |  |   
   197                              <1> ;	           |____________| _|___
   198                              <1> ;	      +0800|////////////|
   199                              <1> ;	           |            |
   200                              <1> ;	
   201                              <1> ;	一つの割り込み設定は8バイトで構成される。
   202                              <1> ;	
   203                              <1> ;	           |____________|____________| 
   204                              <1> ;	        [0]| Address Lo[15: 0]       | 
   205                              <1> ;	        [2]| Selector                | 
   206                              <1> ;	        [4]| Flags                   | 
   207                              <1> ;	        [6]|_Address Lo[32:16]_______| 
   208                              <1> ;	           |/////////////////////////| 
   209                              <1> ;	           |            |            | 
   210                              <1> ;	
   211                              <1> ;========================================================================
   212                              <1> ;■書式		: void init_int(void);
   213                              <1> ;
   214                              <1> ;■引数		: 無し
   215                              <1> ;
   216                              <1> ;■戻り値	: 無し
   217                              <1> ;************************************************************************
   218                              <1> init_int:
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 【レジスタの保存】
   221                              <1> 		;---------------------------------------
   222 00000F56 50                  <1> 		push	eax
   223 00000F57 53                  <1> 		push	ebx
   224 00000F58 51                  <1> 		push	ecx
   225 00000F59 57                  <1> 		push	edi
   226                              <1> 
   227                              <1> 		;---------------------------------------
   228                              <1> 		; 全ての割り込みにデフォルト処理を設定
   229                              <1> 		;---------------------------------------
   230 00000F5A 8D05[A0100000]      <1> 		lea		eax, [int_default]				; EAX   = 割り込み処理アドレス;
   231 00000F60 BB008E0800          <1> 		mov		ebx, 0x0008_8E00				; EBX   = セグメントセレクタ;
   232 00000F65 6693                <1> 		xchg	ax, bx							; // 下位ワードを交換
   233                              <1> 
   234 00000F67 B900010000          <1> 		mov		ecx, 256						; ECX   = 割り込みベクタ数
   235 00000F6C BF00001000          <1> 		mov		edi, VECT_BASE					; EDI   = 割り込みベクタテーブル
   236                              <1> 
   237                              <1> .10L:											; do
   238                              <1> 												; {
   239 00000F71 891F                <1> 		mov		[edi + 0], ebx					;   [EDI + 0] = 割り込みディスクリプタ（下位）
   240 00000F73 894704              <1> 		mov		[edi + 4], eax					;   [EDI + 4] = 割り込みディスクリプタ（上位）
   241 00000F76 83C708              <1> 		add		edi, 8							;   EDI += 8;
   242 00000F79 E2F6                <1> 		loop	.10L							; } while (ECX--);
   243                              <1> 
   244                              <1> 		;---------------------------------------
   245                              <1> 		; 割り込みディスクリプタの設定
   246                              <1> 		;---------------------------------------
   247 00000F7B 0F011D[500F0000]    <1> 		lidt	[IDTR]							; // 割り込みディスクリプタテーブルをロード
   248                              <1> 
   249                              <1> 		;---------------------------------------
   250                              <1> 		; 【レジスタの復帰】
   251                              <1> 		;---------------------------------------
   252 00000F82 5F                  <1> 		pop		edi
   253 00000F83 59                  <1> 		pop		ecx
   254 00000F84 5B                  <1> 		pop		ebx
   255 00000F85 58                  <1> 		pop		eax
   256                              <1> 
   257 00000F86 C3                  <1> 		ret
   258                              <1> 
   259                              <1> ;************************************************************************
   260                              <1> ;	スタックの内容を表示して無限ループを実行
   261                              <1> ;************************************************************************
   262                              <1> int_stop:
   263 00000F87 FB                  <1> 		sti										; // 割り込み許可
   264                              <1> 
   265                              <1> 		;---------------------------------------
   266                              <1> 		; EAXで示される文字列を表示
   267                              <1> 		;---------------------------------------
   268 00000F88 50680F0600006A0F6A- <1> 		cdecl	draw_str, 25, 15, 0x060F, eax	; draw_str(EAX);
   268 00000F91 19E8AEFBFFFF6683C4- <1>
   268 00000F9A 10                  <1>
   269                              <1> 
   270                              <1> 		;---------------------------------------
   271                              <1> 		; スタックのデータを文字列に変換
   272                              <1> 		;---------------------------------------
   273 00000F9B 8B0424              <1> 		mov		eax, [esp + 0]					; EAX = ESP[ 0];
   274 00000F9E 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p1, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   274 00000FA5 [63100000]50E83EFE- <1>
   274 00000FAD FFFF6683C414        <1>
   275                              <1> 
   276 00000FB3 8B442404            <1> 		mov		eax, [esp + 4]					; EAX = ESP[ 4];
   277 00000FB7 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p2, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   277 00000FBE [74100000]50E825FE- <1>
   277 00000FC6 FFFF6683C414        <1>
   278                              <1> 
   279 00000FCC 8B442408            <1> 		mov		eax, [esp + 8]					; EAX = ESP[ 8];
   280 00000FD0 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p3, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   280 00000FD7 [85100000]50E80CFE- <1>
   280 00000FDF FFFF6683C414        <1>
   281                              <1> 
   282 00000FE5 8B44240C            <1> 		mov		eax, [esp +12]					; EAX = ESP[12];
   283 00000FE9 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p4, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   283 00000FF0 [96100000]50E8F3FD- <1>
   283 00000FF8 FFFF6683C414        <1>
   284                              <1> 
   285                              <1> 		;---------------------------------------
   286                              <1> 		; 文字列の表示
   287                              <1> 		;---------------------------------------
   288 00000FFE 68[5C100000]68040F- <1> 		cdecl	draw_str, 25, 16, 0x0F04, .s1	; draw_str("ESP+ 0:-------- ");
   288 00001006 00006A106A19E834FB- <1>
   288 0000100F FFFF6683C410        <1>
   289 00001015 68[6D100000]68040F- <1> 		cdecl	draw_str, 25, 17, 0x0F04, .s2	; draw_str("   + 4:-------- ");
   289 0000101D 00006A116A19E81DFB- <1>
   289 00001026 FFFF6683C410        <1>
   290 0000102C 68[7E100000]68040F- <1> 		cdecl	draw_str, 25, 18, 0x0F04, .s3	; draw_str("   + 8:-------- ");
   290 00001034 00006A126A19E806FB- <1>
   290 0000103D FFFF6683C410        <1>
   291 00001043 68[8F100000]68040F- <1> 		cdecl	draw_str, 25, 19, 0x0F04, .s4	; draw_str("   +12:-------- ");
   291 0000104B 00006A136A19E8EFFA- <1>
   291 00001054 FFFF6683C410        <1>
   292                              <1> 
   293                              <1> 		;---------------------------------------
   294                              <1> 		; 無限ループ
   295                              <1> 		;---------------------------------------
   296 0000105A EBFE                <1> 		jmp		$								; while (1) ; // 無限ループ
   297                              <1> 
   298 0000105C 4553502B20303A      <1> .s1		db	"ESP+ 0:"
   299 00001063 5F5F5F5F5F5F5F5F20- <1> .p1		db	"________ ", 0
   299 0000106C 00                  <1>
   300 0000106D 2020202B20343A      <1> .s2		db	"   + 4:"
   301 00001074 5F5F5F5F5F5F5F5F20- <1> .p2		db	"________ ", 0
   301 0000107D 00                  <1>
   302 0000107E 2020202B20383A      <1> .s3		db	"   + 8:"
   303 00001085 5F5F5F5F5F5F5F5F20- <1> .p3		db	"________ ", 0
   303 0000108E 00                  <1>
   304 0000108F 2020202B31323A      <1> .s4		db	"   +12:"
   305 00001096 5F5F5F5F5F5F5F5F20- <1> .p4		db	"________ ", 0
   305 0000109F 00                  <1>
   306                              <1> 
   307                              <1> ;************************************************************************
   308                              <1> ;	割り込み処理：デフォルトの処理
   309                              <1> ;************************************************************************
   310                              <1> int_default:
   311 000010A0 9C                  <1> 		pushf									; // EFLAGS(IF==0)
   312 000010A1 0E                  <1> 		push	cs								; // CS
   313 000010A2 68[870F0000]        <1> 		push	int_stop						; // スタック表示処理
   314                              <1> 
   315 000010A7 B8[AD100000]        <1> 		mov		eax, .s0						; // 割り込み種別
   316 000010AC CF                  <1> 		iret
   317                              <1> 
   318 000010AD 203C2020202053544F- <1> .s0		db	" <    STOP    > ", 0
   318 000010B6 50202020203E2000    <1>
   319                              <1> 
   320                              <1> ;************************************************************************
   321                              <1> ;	割り込み処理：ゼロ除算
   322                              <1> ;************************************************************************
   323                              <1> int_zero_div:
   324 000010BE 9C                  <1> 		pushf									; // EFLAGS
   325 000010BF 0E                  <1> 		push	cs								; // CS
   326 000010C0 68[870F0000]        <1> 		push	int_stop						; // スタック表示処理
   327                              <1> 
   328 000010C5 B8[CB100000]        <1> 		mov		eax, .s0						; // 割り込み種別
   329 000010CA CF                  <1> 		iret
   330                              <1> 
   331 000010CB 203C20205A45524F20- <1> .s0		db	" <  ZERO DIV  > ", 0
   331 000010D4 44495620203E2000    <1>
   332                              <1> 
   176                                  %include	"../modules/protect/pic.s"
   177                              <1> ;************************************************************************
   178                              <1> ;	割り込みコントローラの初期化
   179                              <1> ;========================================================================
   180                              <1> ;■書式		: void init_pic(void);
   181                              <1> ;
   182                              <1> ;■引数		: 無し
   183                              <1> ;
   184                              <1> ;■戻り値	: 無し
   185                              <1> ;************************************************************************
   186                              <1> init_pic:
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 【レジスタの保存】
   189                              <1> 		;---------------------------------------
   190 000010DC 50                  <1> 		push	eax
   191                              <1> 
   192                              <1> 		;---------------------------------------
   193                              <1> 		; マスタPICの設定
   194                              <1> 		;---------------------------------------
   195                              <1> 		outp	0x20, 0x11						; // MASTER.ICW1 = 0x11;
    72 000010DD B011                <2>  mov al, %2
    73 000010DF E620                <2>  out %1, al
   196                              <1> 		outp	0x21, 0x20						; // MASTER.ICW2 = 0x20;
    72 000010E1 B020                <2>  mov al, %2
    73 000010E3 E621                <2>  out %1, al
   197                              <1> 		outp	0x21, 0x04						; // MASTER.ICW3 = 0x04;
    72 000010E5 B004                <2>  mov al, %2
    73 000010E7 E621                <2>  out %1, al
   198                              <1> 		outp	0x21, 0x01						; // MASTER.ICW4 = 0x01;
    72 000010E9 B001                <2>  mov al, %2
    73 000010EB E621                <2>  out %1, al
   199                              <1> 		outp	0x21, 0xFF						; // マスタ割り込みマスク
    72 000010ED B0FF                <2>  mov al, %2
    73 000010EF E621                <2>  out %1, al
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; スレーブPICの設定
   203                              <1> 		;---------------------------------------
   204                              <1> 		outp	0xA0, 0x11						; // SLAVE.ICW1  = 0x11;
    72 000010F1 B011                <2>  mov al, %2
    73 000010F3 E6A0                <2>  out %1, al
   205                              <1> 		outp	0xA1, 0x28						; // SLAVE.ICW2  = 0x28;
    72 000010F5 B028                <2>  mov al, %2
    73 000010F7 E6A1                <2>  out %1, al
   206                              <1> 		outp	0xA1, 0x02						; // SLAVE.ICW3  = 0x02;
    72 000010F9 B002                <2>  mov al, %2
    73 000010FB E6A1                <2>  out %1, al
   207                              <1> 		outp	0xA1, 0x01						; // SLAVE.ICW4  = 0x01;
    72 000010FD B001                <2>  mov al, %2
    73 000010FF E6A1                <2>  out %1, al
   208                              <1> 		outp	0xA1, 0xFF						; // スレーブ割り込みマスク
    72 00001101 B0FF                <2>  mov al, %2
    73 00001103 E6A1                <2>  out %1, al
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 【レジスタの復帰】
   212                              <1> 		;---------------------------------------
   213 00001105 58                  <1> 		pop		eax
   214                              <1> 
   215 00001106 C3                  <1> 		ret
   216                              <1> 
   177                                  %include	"../modules/protect/int_rtc.s"
   178                              <1> ;************************************************************************
   179                              <1> ;	RTCの割り込み許可設定
   180                              <1> ;========================================================================
   181                              <1> ;■書式		: void rtc_int_en(bit);
   182                              <1> ;
   183                              <1> ;■引数
   184                              <1> ;	bit		: 割り込みを許可するビット
   185                              <1> ;
   186                              <1> ;■戻り値	: 無し
   187                              <1> ;************************************************************************
   188                              <1> rtc_int_en:
   189                              <1> 		;---------------------------------------
   190                              <1> 		; 【スタックフレームの構築】
   191                              <1> 		;---------------------------------------
   192                              <1> 												; ------|--------
   193                              <1> 												;    + 8| ビット
   194                              <1> 												; ------|--------
   195                              <1> 												;    + 4| EIP（戻り番地）
   196 00001107 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   197 00001108 89E5                <1> 		mov		ebp, esp						; ------+--------
   198                              <1> 
   199                              <1> 		;---------------------------------------
   200                              <1> 		; 【レジスタの保存】
   201                              <1> 		;---------------------------------------
   202 0000110A 50                  <1> 		push	eax
   203                              <1> 
   204                              <1> 		;---------------------------------------
   205                              <1> 		; 割り込み許可設定
   206                              <1> 		;---------------------------------------
   207                              <1> 		outp	0x70, 0x0B						; outp(0x70, AL);   // レジスタBを選択
    72 0000110B B00B                <2>  mov al, %2
    73 0000110D E670                <2>  out %1, al
   208                              <1> 
   209 0000110F E471                <1> 		in		al, 0x71						; AL  = port(0x71); // レジスタBの
   210 00001111 0A4508              <1> 		or		al, [ebp + 8]					; AL |= ビット;     // 指定されたビットをセット
   211                              <1> 
   212 00001114 E671                <1> 		out		0x71, al						; outp(0x71, AL);   // レジスタBに書き込み
   213                              <1> 
   214                              <1> 		;---------------------------------------
   215                              <1> 		; 【レジスタの復帰】
   216                              <1> 		;---------------------------------------
   217 00001116 58                  <1> 		pop		eax
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 【スタックフレームの破棄】
   221                              <1> 		;---------------------------------------
   222 00001117 89EC                <1> 		mov		esp, ebp
   223 00001119 5D                  <1> 		pop		ebp
   224                              <1> 
   225 0000111A C3                  <1> 		ret
   226                              <1> 
   227                              <1> 
   228                              <1> ;************************************************************************
   229                              <1> ;	割り込み処理：RTC
   230                              <1> ;************************************************************************
   231                              <1> int_rtc:
   232                              <1> 		;---------------------------------------
   233                              <1> 		; 【レジスタの保存】
   234                              <1> 		;---------------------------------------
   235 0000111B 60                  <1> 		pusha
   236 0000111C 1E                  <1> 		push	ds
   237 0000111D 06                  <1> 		push	es
   238                              <1> 
   239                              <1> 		;---------------------------------------
   240                              <1> 		; データ用セグメントセレクタの設定
   241                              <1> 		;---------------------------------------
   242 0000111E 66B81000            <1> 		mov		ax, 0x0010						; 
   243 00001122 8ED8                <1> 		mov		ds, ax							; 
   244 00001124 8EC0                <1> 		mov		es, ax							; 
   245                              <1> 
   246                              <1> 		;---------------------------------------
   247                              <1> 		; RTCから時刻を取得
   248                              <1> 		;---------------------------------------
   249 00001126 68[3C020000]E846FD- <1> 		cdecl	rtc_get_time, RTC_TIME			; EAX = get_time(&RTC_TIME);
   249 0000112E FFFF6683C404        <1>
   250                              <1> 												; 
   251                              <1> 		;---------------------------------------
   252                              <1> 		; RTCの割り込み要因を取得
   253                              <1> 		;---------------------------------------
   254                              <1> 		outp	0x70, 0x0C						; outp(0x70, 0x0C); // レジスタCを選択
    72 00001134 B00C                <2>  mov al, %2
    73 00001136 E670                <2>  out %1, al
   255 00001138 E471                <1> 		in		al, 0x71						; AL = inp();
   256                              <1> 
   257                              <1> 		;---------------------------------------
   258                              <1> 		; 割り込みフラグをクリア(EOI)
   259                              <1> 		;---------------------------------------
   260                              <1> 		outp	0xA0, 0x20						; outp(0xA0, EOI); // スレーブPIC
    72 0000113A B020                <2>  mov al, %2
    73 0000113C E6A0                <2>  out %1, al
   261                              <1> 		outp	0x20, 0x20						; outp(0x20, EOI); // マスタPIC
    72 0000113E B020                <2>  mov al, %2
    73 00001140 E620                <2>  out %1, al
   262                              <1> 
   263                              <1> 		;---------------------------------------
   264                              <1> 		; 【レジスタの復帰】
   265                              <1> 		;---------------------------------------
   266 00001142 07                  <1> 		pop		es								; 
   267 00001143 1F                  <1> 		pop		ds								; 
   268 00001144 61                  <1> 		popa									; 
   269                              <1> 
   270 00001145 CF                  <1> 		iret									; 割り込み処理の終了
   271                              <1> 
   178                                  %include	"../modules/protect/int_keyboard.s"
   179                              <1> ;************************************************************************
   180                              <1> ;	割り込み処理：キーボード
   181                              <1> ;------------------------------------------------------------------------
   182                              <1> ;	KBC（キーボードコントローラ）からキーコードを取得して、
   183                              <1> ;	専用のリングバッファに保存する。
   184                              <1> ;************************************************************************
   185                              <1> int_keyboard:
   186                              <1> 		;---------------------------------------
   187                              <1> 		; 【レジスタの保存】
   188                              <1> 		;---------------------------------------
   189 00001146 60                  <1> 		pusha
   190 00001147 1E                  <1> 		push	ds
   191 00001148 06                  <1> 		push	es
   192                              <1> 
   193                              <1> 		;---------------------------------------
   194                              <1> 		; データ用セグメントの設定
   195                              <1> 		;---------------------------------------
   196 00001149 66B81000            <1> 		mov		ax, 0x0010						; 
   197 0000114D 8ED8                <1> 		mov		ds, ax							; 
   198 0000114F 8EC0                <1> 		mov		es, ax							; 
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		; KBCのバッファ読み取り
   202                              <1> 		;---------------------------------------
   203 00001151 E460                <1> 		in		al, 0x60						; AL = キーコードの取得
   204                              <1> 
   205                              <1> 		;---------------------------------------
   206                              <1> 		; キーコードの保存
   207                              <1> 		;---------------------------------------
   208 00001153 5068[6C110000]E856- <1> 		cdecl	ring_wr, _KEY_BUFF, eax			; ring_wr(_KEY_BUFF, EAX); // キーコードの保存
   208 0000115B 0000006683C408      <1>
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 割り込み終了コマンド送信
   212                              <1> 		;---------------------------------------
   213                              <1> 		outp	0x20, 0x20						; outp(); // マスタPIC:EOIコマンド
    72 00001162 B020                <2>  mov al, %2
    73 00001164 E620                <2>  out %1, al
   214                              <1> 
   215                              <1> 		;---------------------------------------
   216                              <1> 		; 【レジスタの復帰】
   217                              <1> 		;---------------------------------------
   218 00001166 07                  <1> 		pop		es								; 
   219 00001167 1F                  <1> 		pop		ds								; 
   220 00001168 61                  <1> 		popa
   221                              <1> 
   222 00001169 CF                  <1> 		iret									; 割り込みからの復帰
   223                              <1> 
   224 0000116A 00<rep 2h>          <1> ALIGN 4, db 0
   225 0000116C 00<rep 18h>         <1> _KEY_BUFF:	times ring_buff_size db 0
   226                              <1> 
   179                                  %include	"../modules/protect/ring_buff.s"
   180                              <1> ;************************************************************************
   181                              <1> ;	リングバッファからデータを取得
   182                              <1> ;========================================================================
   183                              <1> ;■書式		: DWORD ring_rd(buff, data);
   184                              <1> ;
   185                              <1> ;■引数
   186                              <1> ;	buff	: リングバッファ
   187                              <1> ;	data	: 読み込んだデータの保存先アドレス
   188                              <1> ;
   189                              <1> ;■戻り値	: データあり(0以外)、データ無し(0)
   190                              <1> ;************************************************************************
   191                              <1> ring_rd:
   192                              <1> 		;---------------------------------------
   193                              <1> 		; 【スタックフレームの構築】
   194                              <1> 		;---------------------------------------
   195                              <1> 												; ------|--------
   196                              <1> 												;    +12| リングデータ
   197                              <1> 												;    + 8| データアドレス
   198                              <1> 												; ------|--------
   199                              <1> 												;    + 4| EIP（戻り番地）
   200 00001184 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   201 00001185 89E5                <1> 		mov		ebp, esp						; ------+--------
   202                              <1> 
   203                              <1> 		;---------------------------------------
   204                              <1> 		; 【レジスタの保存】
   205                              <1> 		;---------------------------------------
   206 00001187 53                  <1> 		push	ebx
   207 00001188 56                  <1> 		push	esi
   208 00001189 57                  <1> 		push	edi
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 引数を取得
   212                              <1> 		;---------------------------------------
   213 0000118A 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   214 0000118D 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = データアドレス;
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; 読み込み位置を確認
   218                              <1> 		;---------------------------------------
   219 00001190 B800000000          <1> 		mov		eax, 0							; EAX = 0;          // データ無し
   220 00001195 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;         // 読み込み位置
   221 00001197 3B5E04              <1> 		cmp		ebx, [esi + ring_buff.wp]		; if (EBX != wp)    // 書き込み位置と異なる
   222 0000119A 7411                <1> 		je		.10E							; {
   223                              <1> 												;   
   224 0000119C 8A441E08            <1> 		mov		al, [esi + ring_buff.item + ebx] ;   AL = BUFF[rp]; // キーコードを保存
   225                              <1> 												;   
   226 000011A0 8807                <1> 		mov		[edi], al						;   [EDI] = AL;     // データを保存
   227                              <1> 												;   
   228 000011A2 43                  <1> 		inc		ebx								;   EBX++;          // 次の読み込み位置
   229 000011A3 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= 0x0F     // サイズの制限
   230 000011A6 891E                <1> 		mov		[esi + ring_buff.rp], ebx		;   rp = EBX;       // 読み込み位置を保存
   231                              <1> 												;   
   232 000011A8 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // データあり
   233                              <1> .10E:											; }
   234                              <1> 
   235                              <1> 		;---------------------------------------
   236                              <1> 		; 【レジスタの復帰】
   237                              <1> 		;---------------------------------------
   238 000011AD 5F                  <1> 		pop		edi
   239 000011AE 5E                  <1> 		pop		esi
   240 000011AF 5B                  <1> 		pop		ebx
   241                              <1> 
   242                              <1> 		;---------------------------------------
   243                              <1> 		; 【スタックフレームの破棄】
   244                              <1> 		;---------------------------------------
   245 000011B0 89EC                <1> 		mov		esp, ebp
   246 000011B2 5D                  <1> 		pop		ebp
   247                              <1> 
   248 000011B3 C3                  <1> 		ret
   249                              <1> 
   250                              <1> ;************************************************************************
   251                              <1> ;	リングバッファにデータを格納
   252                              <1> ;========================================================================
   253                              <1> ;■書式		: DWORD ring_wr(buff, data);
   254                              <1> ;
   255                              <1> ;■引数
   256                              <1> ;	buff	: リングバッファ
   257                              <1> ;	data	: 書き込むデータ
   258                              <1> ;
   259                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   260                              <1> ;************************************************************************
   261                              <1> ring_wr:
   262                              <1> 		;---------------------------------------
   263                              <1> 		; 【スタックフレームの構築】
   264                              <1> 		;---------------------------------------
   265                              <1> 												; ------|--------
   266                              <1> 												;    +12| リングデータ
   267                              <1> 												;    + 8| データ
   268                              <1> 												; ------|--------
   269                              <1> 												;    + 4| EIP（戻り番地）
   270 000011B4 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   271 000011B5 89E5                <1> 		mov		ebp, esp						; ------+--------
   272                              <1> 
   273                              <1> 		;---------------------------------------
   274                              <1> 		; 【レジスタの保存】
   275                              <1> 		;---------------------------------------
   276 000011B7 53                  <1> 		push	ebx
   277 000011B8 51                  <1> 		push	ecx
   278 000011B9 56                  <1> 		push	esi
   279                              <1> 
   280                              <1> 		;---------------------------------------
   281                              <1> 		; 引数を取得
   282                              <1> 		;---------------------------------------
   283 000011BA 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   284                              <1> 
   285                              <1> 		;---------------------------------------
   286                              <1> 		; 書き込み位置を確認
   287                              <1> 		;---------------------------------------
   288 000011BD B800000000          <1> 		mov		eax, 0							; EAX  = 0;         // 失敗
   289 000011C2 8B5E04              <1> 		mov		ebx, [esi + ring_buff.wp]		; EBX  = wp;        // 書き込み位置
   290 000011C5 89D9                <1> 		mov		ecx, ebx						; ECX  = EBX;
   291 000011C7 41                  <1> 		inc		ecx								; ECX++;            // 次の書き込み位置
   292 000011C8 83E10F              <1> 		and		ecx, RING_INDEX_MASK			; ECX &= 0x0F       // サイズの制限
   293                              <1> 												; 
   294 000011CB 3B0E                <1> 		cmp		ecx, [esi + ring_buff.rp]		; if (ECX != rp)    // 読み込み位置と異なる
   295 000011CD 740F                <1> 		je		.10E							; {
   296                              <1> 												; 
   297 000011CF 8A450C              <1> 		mov		al, [ebp +12]					;   AL = データ;
   298                              <1> 												; 
   299 000011D2 88441E08            <1> 		mov		[esi + ring_buff.item + ebx], al ;   BUFF[wp] = AL; // キーコードを保存
   300 000011D6 894E04              <1> 		mov		[esi + ring_buff.wp], ecx		;   wp = ECX;       // 書き込み位置を保存
   301 000011D9 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // 成功
   302                              <1> .10E:											; }
   303                              <1> 
   304                              <1> 		;---------------------------------------
   305                              <1> 		; 【レジスタの復帰】
   306                              <1> 		;---------------------------------------
   307 000011DE 5E                  <1> 		pop		esi
   308 000011DF 59                  <1> 		pop		ecx
   309 000011E0 5B                  <1> 		pop		ebx
   310                              <1> 
   311                              <1> 		;---------------------------------------
   312                              <1> 		; 【スタックフレームの破棄】
   313                              <1> 		;---------------------------------------
   314 000011E1 89EC                <1> 		mov		esp, ebp
   315 000011E3 5D                  <1> 		pop		ebp
   316                              <1> 
   317 000011E4 C3                  <1> 		ret
   318                              <1> 
   319                              <1> ;************************************************************************
   320                              <1> ;	リングバッファ内要素の表示
   321                              <1> ;========================================================================
   322                              <1> ;■書式		: void ring_show(col, row, buff);
   323                              <1> ;
   324                              <1> ;■引数
   325                              <1> ;	col		: 列
   326                              <1> ;	row		: 行
   327                              <1> ;	buff	: リングバッファ
   328                              <1> ;
   329                              <1> ;■戻り値	: 無し
   330                              <1> ;************************************************************************
   331                              <1> draw_key:
   332                              <1> 		;---------------------------------------
   333                              <1> 		; 【スタックフレームの構築】
   334                              <1> 		;---------------------------------------
   335                              <1> 												; ------|--------
   336                              <1> 												; EBP+16| リングバッファ
   337                              <1> 												; EBP+12| Y（行）
   338                              <1> 												; EBP+ 8| X（列）
   339                              <1> 												; ------|--------
   340 000011E5 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   341 000011E6 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   342                              <1> 												; ------|--------
   343                              <1> 
   344                              <1> 		;---------------------------------------
   345                              <1> 		; 【レジスタの保存】
   346                              <1> 		;---------------------------------------
   347 000011E8 60                  <1> 		pusha
   348                              <1> 
   349                              <1> 		;---------------------------------------
   350                              <1> 		; 引数を取得
   351                              <1> 		;---------------------------------------
   352 000011E9 8B5508              <1> 		mov		edx, [ebp + 8]					; EDX = X（列）;
   353 000011EC 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）;
   354 000011EF 8B7510              <1> 		mov		esi, [ebp +16]					; ESI = リングバッファ;
   355                              <1> 
   356                              <1> 		;---------------------------------------
   357                              <1> 		; リングバッファの情報を取得
   358                              <1> 		;---------------------------------------
   359 000011F2 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;             // 読み込み位置
   360 000011F4 8D7608              <1> 		lea		esi, [esi + ring_buff.item]		; ESI = &KEY_BUFF[EBX];
   361 000011F7 B910000000          <1> 		mov		ecx, RING_ITEM_SIZE				; ECX = RING_ITEM_SIZE; // 要素数
   362                              <1> 
   363                              <1> 		;---------------------------------------
   364                              <1> 		; 文字に変換しながら表示
   365                              <1> 		;---------------------------------------
   366                              <1> .10L:											; do
   367                              <1> 												; {
   368 000011FC 4B                  <1> 		dec		ebx								;   EBX--; // 読み込み位置
   369 000011FD 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= RING_INDEX_MASK;
   370 00001200 8A041E              <1> 		mov		al, [esi + ebx]					;   EAX  = KEY_BUFF[EBX];
   371                              <1> 												;   
   372 00001203 6A046A106A0268-     <1> 		cdecl	itoa, eax, .tmp, 2, 16, 0b0100	;   // キーコードを文字列に変換
   372 0000120A [34120000]50E8D9FB- <1>
   372 00001212 FFFF6683C414        <1>
   373 00001218 68[34120000]6A0257- <1> 		cdecl	draw_str, edx, edi, 0x02, .tmp	;   // 変換した文字列を表示
   373 00001220 52E81FF9FFFF6683C4- <1>
   373 00001229 10                  <1>
   374                              <1> 												;   
   375 0000122A 83C203              <1> 		add		edx, 3							;   // 表示位置を更新（3文字分）
   376                              <1> 												;   
   377 0000122D E2CD                <1> 		loop	.10L							;   
   378                              <1> .10E:											; } while (ECX--);
   379                              <1> 
   380                              <1> 		;---------------------------------------
   381                              <1> 		; 【レジスタの復帰】
   382                              <1> 		;---------------------------------------
   383 0000122F 61                  <1> 		popa
   384                              <1> 
   385                              <1> 		;---------------------------------------
   386                              <1> 		; 【スタックフレームの破棄】
   387                              <1> 		;---------------------------------------
   388 00001230 89EC                <1> 		mov		esp, ebp
   389 00001232 5D                  <1> 		pop		ebp
   390                              <1> 
   391 00001233 C3                  <1> 		ret
   392                              <1> 
   393 00001234 2D2D2000            <1> .tmp	db "-- ", 0
   180                                  %include	"../modules/protect/timer.s"
   181                              <1> ;************************************************************************
   182                              <1> ;	タイマーの設定
   183                              <1> ;------------------------------------------------------------------------
   184                              <1> ;	タイマー（カウンタ0）割り込み許可
   185                              <1> ;========================================================================
   186                              <1> ;■書式		: void int_en_timer0(void);
   187                              <1> ;
   188                              <1> ;■引数		: 無し
   189                              <1> ;
   190                              <1> ;■戻り値	: 無し
   191                              <1> ;************************************************************************
   192                              <1> int_en_timer0:
   193                              <1> 		;---------------------------------------
   194                              <1> 		; 【レジスタの保存】
   195                              <1> 		;---------------------------------------
   196 00001238 50                  <1> 		push	eax
   197                              <1> 
   198                              <1> 		;---------------------------------------
   199                              <1> 		;	8254 Timer
   200                              <1> 		;	0x2e9c(11932)=10[ms] @ CLK=1,193,182[Hz]
   201                              <1> 		;---------------------------------------
   202                              <1> 		 outp	 0x43, 0b_00_11_010_0			; // カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    72 00001239 B034                <2>  mov al, %2
    73 0000123B E643                <2>  out %1, al
   203                              <1> 		 outp	 0x40, 0x9C						; // 下位バイト
    72 0000123D B09C                <2>  mov al, %2
    73 0000123F E640                <2>  out %1, al
   204                              <1> 		 outp	 0x40, 0x2E						; // 上位バイト
    72 00001241 B02E                <2>  mov al, %2
    73 00001243 E640                <2>  out %1, al
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; 【レジスタの復帰】
   208                              <1> 		;---------------------------------------
   209 00001245 58                  <1> 		pop		eax
   210                              <1> 
   211 00001246 C3                  <1> 		ret
   212                              <1> 
   181                                  %include	"../modules/protect/draw_rotation_bar.s"
   182                              <1> ;************************************************************************
   183                              <1> ;	画面左下に、回転する棒を表示
   184                              <1> ;========================================================================
   185                              <1> ;■書式		: void draw_rotation_bar(void);
   186                              <1> ;
   187                              <1> ;■引数		: 無し
   188                              <1> ;
   189                              <1> ;■戻り値	: 無し
   190                              <1> ;************************************************************************
   191                              <1> draw_rotation_bar:
   192                              <1> 		;---------------------------------------
   193                              <1> 		; 【レジスタの保存】
   194                              <1> 		;---------------------------------------
   195 00001247 50                  <1> 		push	eax
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; タイマー割り込みカウンタを確認
   199                              <1> 		;---------------------------------------
   200 00001248 A1[D8060000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX  = タイマー割り込みカウンタ
   201 0000124D C1E804              <1> 		shr		eax, 4							; EAX /= 4;    // 16で除算
   202 00001250 3B05[78120000]      <1> 		cmp		eax, [.index]					; if (EAX != 前回値)
   203 00001256 741E                <1> 		je		.10E							; {
   204                              <1> 												;   
   205 00001258 A3[78120000]        <1> 		mov		[.index], eax					;   前回値 = EAX;
   206 0000125D 83E003              <1> 		and		eax, 0x03						;   EAX &= 0x03; // 0～3に限定
   207                              <1> 												;   
   208 00001260 8A80[7C120000]      <1> 		mov		al, [.table + eax]				;   AL = table[index];
   209 00001266 506A0F6A1D6A00E8AD- <1> 		cdecl	draw_char, 0, 29, 0x000F, eax	;   draw_char(); // 文字を表示
   209 0000126F F7FFFF6683C410      <1>
   210                              <1> 												;   
   211                              <1> .10E:											; }
   212                              <1> 
   213                              <1> 		;---------------------------------------
   214                              <1> 		; 【レジスタの復帰】
   215                              <1> 		;---------------------------------------
   216 00001276 58                  <1> 		pop		eax
   217                              <1> 
   218 00001277 C3                  <1> 		ret
   219                              <1> 
   220                              <1> ALIGN 4, db 0
   221 00001278 00000000            <1> .index:		dd 0								; 前回値
   222 0000127C 7C2F2D5C            <1> .table:		db	"|/-\"							; 表示キャラクタ
   223                              <1> 
   182                                  %include	"../modules/protect/call_gate.s"
   183                              <1> ;************************************************************************
   184                              <1> ;	コールゲート関数
   185                              <1> ;************************************************************************
   186                              <1> call_gate:
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 【スタックフレームの構築】
   189                              <1> 		;---------------------------------------
   190                              <1> 												; ------|--------
   191                              <1> 												; EBP+12| X（列）
   192                              <1> 												; EBP+16| Y（行）
   193                              <1> 												; EBP+20| 色
   194                              <1> 												; EBP+24| 文字
   195                              <1> 												; ---------------
   196                              <1> 												; EBP+ 8| CS（コードセグメント）
   197 00001280 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   198 00001281 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   199                              <1> 												; ---------------
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 【レジスタの保存】
   202                              <1> 		;---------------------------------------
   203 00001283 60                  <1> 		pusha
   204 00001284 1E                  <1> 		push	ds
   205 00001285 06                  <1> 		push	es
   206                              <1> 
   207                              <1> 		;---------------------------------------
   208                              <1> 		; データ用セグメントの設定
   209                              <1> 		;---------------------------------------
   210 00001286 66B81000            <1> 		mov		ax, 0x0010						; 
   211 0000128A 8ED8                <1> 		mov		ds, ax							; 
   212 0000128C 8EC0                <1> 		mov		es, ax							; 
   213                              <1> 
   214                              <1> 		;---------------------------------------
   215                              <1> 		; 文字を表示
   216                              <1> 		;---------------------------------------
   217 0000128E 8B450C              <1> 		mov		eax, dword [ebp +12]			; EAX = X（列）;
   218 00001291 8B5D10              <1> 		mov		ebx, dword [ebp +16]			; EBX = Y（行）;
   219 00001294 8B4D14              <1> 		mov		ecx, dword [ebp +20]			; ECX = 色;
   220 00001297 8B5518              <1> 		mov		edx, dword [ebp +24]			; EDX = 文字;
   221 0000129A 52515350E8A2F8FFFF- <1> 		cdecl	draw_str, eax, ebx , ecx, edx	; draw_str();
   221 000012A3 6683C410            <1>
   222                              <1> 
   223                              <1> 		;---------------------------------------
   224                              <1> 		; 【レジスタの復帰】
   225                              <1> 		;---------------------------------------
   226 000012A7 07                  <1> 		pop		es								; 
   227 000012A8 1F                  <1> 		pop		ds								; 
   228 000012A9 61                  <1> 		popa									; 
   229                              <1> 
   230                              <1> 		;---------------------------------------
   231                              <1> 		; 【スタックフレームの破棄】
   232                              <1> 		;---------------------------------------
   233 000012AA 89EC                <1> 		mov		esp, ebp
   234 000012AC 5D                  <1> 		pop		ebp
   235                              <1> 
   236 000012AD CA1000              <1> 		retf	4 * 4
   237                              <1> 
   183                                  %include	"../modules/protect/trap_gate.s"
   184                              <1> ;************************************************************************
   185                              <1> ;	システムコール：1文字出力
   186                              <1> ;************************************************************************
   187                              <1> trap_gate_81:
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 1文字出力
   190                              <1> 		;---------------------------------------
   191 000012B0 50535251E866F7FFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	; // 1文字出力
   191 000012B9 6683C410            <1>
   192                              <1> 
   193 000012BD CF                  <1> 		iret
   194                              <1> 
   195                              <1> ;************************************************************************
   196                              <1> ;	システムコール：点の描画
   197                              <1> ;************************************************************************
   198                              <1> trap_gate_82:
   199                              <1> 		;---------------------------------------
   200                              <1> 		; 点の描画
   201                              <1> 		;---------------------------------------
   202 000012BE 535251E837F9FFFF66- <1> 		cdecl	draw_pixel, ecx, edx, ebx		; // 点の描画
   202 000012C7 83C40C              <1>
   203                              <1> 
   204 000012CA CF                  <1> 		iret
   205                              <1> 
   184                                  %include	"../modules/protect/test_and_set.s"
   185                              <1> ;************************************************************************
   186                              <1> ;	RTCから時刻データを取得する
   187                              <1> ;========================================================================
   188                              <1> ;■書式		: void test_and_set(local);
   189                              <1> ;
   190                              <1> ;■引数
   191                              <1> ;	local	: ローカル変数のアドレス
   192                              <1> ;
   193                              <1> ;■戻り値	: 無し
   194                              <1> ;************************************************************************
   195                              <1> test_and_set:
   196                              <1> 		;---------------------------------------
   197                              <1> 		; 【スタックフレームの構築】
   198                              <1> 		;---------------------------------------
   199                              <1> 												; EBP+ 8| ローカル変数のアドレス
   200                              <1> 												; ------+----------------
   201 000012CB 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   202 000012CC 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   203                              <1> 												; ------+----------------
   204                              <1> 
   205                              <1> 		;---------------------------------------
   206                              <1> 		; 【レジスタの保存】
   207                              <1> 		;---------------------------------------
   208 000012CE 50                  <1> 		push	eax
   209 000012CF 53                  <1> 		push	ebx
   210                              <1> 
   211                              <1> 		;---------------------------------------
   212                              <1> 		; テストアンドセット
   213                              <1> 		;---------------------------------------
   214 000012D0 B800000000          <1> 		mov		eax, 0							; local  = 0;
   215 000012D5 8B5D08              <1> 		mov		ebx, [ebp + 8]					; global = アドレス;
   216                              <1> 
   217                              <1> .10L:											; for ( ; ; )
   218                              <1> 												; {
   219 000012D8 F00FAB03            <1> 		lock bts [ebx], eax						;   CF = TEST_AND_SET(IN_USE, 1);
   220 000012DC 7307                <1> 		jnc		.10E							;   if (0 == CF)
   221                              <1> 												;     break;
   222                              <1> 												;   
   223                              <1> .12L:											;   for ( ; ; )
   224                              <1> 												;   {
   225 000012DE 0FA303              <1> 		bt		[ebx], eax						;     CF = TEST(IN_USE, 1);
   226 000012E1 72FB                <1> 		jc		.12L							;     if (0 == CF)
   227                              <1> 												;       break;
   228 000012E3 EBF3                <1> 		jmp		.10L							;   }
   229                              <1> .10E:											; }
   230                              <1> 
   231                              <1> 		;---------------------------------------
   232                              <1> 		; 【レジスタの復帰】
   233                              <1> 		;---------------------------------------
   234 000012E5 5B                  <1> 		pop		ebx
   235 000012E6 58                  <1> 		pop		eax
   236                              <1> 
   237                              <1> 		;---------------------------------------
   238                              <1> 		; 【スタックフレームの破棄】
   239                              <1> 		;---------------------------------------
   240 000012E7 89EC                <1> 		mov		esp, ebp
   241 000012E9 5D                  <1> 		pop		ebp
   242                              <1> 
   243 000012EA C3                  <1> 		ret
   244                              <1> 
   185                                  %include	"../modules/protect/int_nm.s"
   186                              <1> ;************************************************************************
   187                              <1> ;	割り込み処理：#NM(DNA:デバイス使用不可)
   188                              <1> ;************************************************************************
   189                              <1> int_nm:
   190                              <1> 		;---------------------------------------
   191                              <1> 		; 【レジスタの保存】
   192                              <1> 		;---------------------------------------
   193 000012EB 60                  <1> 		pusha
   194 000012EC 1E                  <1> 		push	ds
   195 000012ED 06                  <1> 		push	es
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; カーネル用セレクタを設定
   199                              <1> 		;---------------------------------------
   200 000012EE 66B81000            <1> 		mov		ax, DS_KERNEL					;
   201 000012F2 8ED8                <1> 		mov		ds, ax							;
   202 000012F4 8EC0                <1> 		mov		es, ax							;
   203                              <1> 
   204                              <1> 		;---------------------------------------
   205                              <1> 		; タスクスイッチフラグをクリア
   206                              <1> 		;---------------------------------------
   207 000012F6 0F06                <1> 		clts									; CR0.TS = 0;
   208                              <1> 
   209                              <1> 		;---------------------------------------
   210                              <1> 		; 前回/今回FPUを使用するタスク
   211                              <1> 		;---------------------------------------
   212 000012F8 8B3D[44130000]      <1> 		mov		edi, [.last_tss]				; EDI = 前回FPUを使用したタスクのTSS
   213 000012FE 0F00CE              <1> 		str		esi								; ESI = 今回FPUを使用したタスクのTSS
   214 00001301 83E6F8              <1> 		and		esi, ~0x0007					; // 特権レベルをマスク
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; FPUの初回利用をチェック
   218                              <1> 		;---------------------------------------
   219 00001304 83FF00              <1> 		cmp		edi, 0							; if (0 != EDI)     // 前回使用したタスク
   220 00001307 7420                <1> 		je		.10F							; {
   221                              <1> 												;   
   222 00001309 39FE                <1> 		cmp		esi, edi						;   if (ESI != EDI) // 異なるタスク
   223 0000130B 741A                <1> 		je		.12E							;   {
   224                              <1> 												;     
   225 0000130D FA                  <1> 		cli										;     // 割り込み禁止
   226                              <1> 
   227                              <1> 		;---------------------------------------
   228                              <1> 		; 前回のFPUコンテキストを保存
   229                              <1> 		;---------------------------------------
   230 0000130E 89FB                <1> 		mov		ebx, edi						;     // 前回のタスク
   231 00001310 E833000000          <1> 		call	get_tss_base					;     // TSSアドレスを取得
   232 00001315 E841000000          <1> 		call	save_fpu_context				;     // FPUのコンテキストを保存
   233                              <1> 
   234                              <1> 		;---------------------------------------
   235                              <1> 		; 今回のFPUコンテキストを復帰
   236                              <1> 		;---------------------------------------
   237 0000131A 89F3                <1> 		mov		ebx, esi						;     // 今回のタスク
   238 0000131C E827000000          <1> 		call	get_tss_base					;     // TSSアドレスを取得
   239 00001321 E843000000          <1> 		call	load_fpu_context				;     // FPUのコンテキストを復帰
   240                              <1> 												;     
   241 00001326 FB                  <1> 		sti										;     // 割り込み許可
   242                              <1> .12E:											;   }
   243 00001327 EB0E                <1> 		jmp		.10E							; }
   244                              <1> .10F:											; else
   245                              <1> 												; {
   246                              <1> 												;   
   247 00001329 FA                  <1> 		cli										;   // 割り込み禁止
   248                              <1> 
   249                              <1> 		;---------------------------------------
   250                              <1> 		; 今回のFPUコンテキストを復帰
   251                              <1> 		;---------------------------------------
   252 0000132A 89F3                <1> 		mov		ebx, esi						;   // 今回のタスク
   253 0000132C E817000000          <1> 		call	get_tss_base					;   // 現在のタスクのTSSアドレスを取得
   254 00001331 E833000000          <1> 		call	load_fpu_context				;   // FPUのコンテキストを復帰
   255                              <1> 												;   
   256 00001336 FB                  <1> 		sti										;   // 割り込み許可
   257                              <1> .10E:											; }
   258                              <1> 												; 
   259 00001337 8935[44130000]      <1> 		mov		[.last_tss], esi				; // FPUを使用したタスクを保存
   260                              <1> 
   261                              <1> 		;---------------------------------------
   262                              <1> 		; 【レジスタの復帰】
   263                              <1> 		;---------------------------------------
   264 0000133D 07                  <1> 		pop		es
   265 0000133E 1F                  <1> 		pop		ds
   266 0000133F 61                  <1> 		popa
   267                              <1> 
   268 00001340 CF                  <1> 		iret
   269                              <1> 
   270 00001341 00<rep 3h>          <1> ALIGN 4, db 0
   271 00001344 00000000            <1> .last_tss:	dd		0
   272                              <1> 
   273                              <1> ;************************************************************************
   274                              <1> ; GDTのセレクタのベースアドレスを取得
   275                              <1> ;------------------------------------------------------------------[IN]--
   276                              <1> ;	EBX : セレクタ
   277                              <1> ;-----------------------------------------------------------------[OUT]--
   278                              <1> ;	EAX : ベースアドレス
   279                              <1> ;************************************************************************
   280                              <1> get_tss_base:
   281 00001348 8B83[A2050000]      <1> 		mov		eax, [GDT + ebx + 2]			; EAX   = TSS[23: 0];
   282 0000134E C1E008              <1> 		shl		eax, 8							; EAX <<= 8;
   283 00001351 8A83[A7050000]      <1>         mov     al,  [GDT + ebx + 7]            ;  AL   = TSS[31:24];
   284 00001357 C1C808              <1> 		ror		eax, 8							; EAX >>= 8;
   285                              <1> 
   286 0000135A C3                  <1> 		ret
   287                              <1> 
   288                              <1> ;************************************************************************
   289                              <1> ; FPUのコンテキストを保存
   290                              <1> ;------------------------------------------------------------------[IN]--
   291                              <1> ;	EAX : TSSの先頭アドレス
   292                              <1> ;************************************************************************
   293                              <1> save_fpu_context:
   294 0000135B DD7068              <1> 		fnsave	[eax + 104]						; // FPUコンテキストを保存
   295 0000135E C780D4000000010000- <1> 		mov		[eax + 104 + 108], dword 1		; saved = 1;
   295 00001367 00                  <1>
   296                              <1> 
   297 00001368 C3                  <1> 		ret
   298                              <1> 
   299                              <1> ;************************************************************************
   300                              <1> ; FPUのコンテキストを復帰
   301                              <1> ;------------------------------------------------------------------[IN]--
   302                              <1> ;	EAX : TSSの先頭アドレス
   303                              <1> ;************************************************************************
   304                              <1> load_fpu_context:
   305 00001369 83B8D400000000      <1> 		cmp		[eax + 104 + 108], dword 0		; if (0 == saved)
   306 00001370 7504                <1> 		jne		.10F							; {
   307 00001372 DBE3                <1> 		fninit									;    // FPUの初期化
   308 00001374 EB03                <1> 		jmp		.10E							; }
   309                              <1> .10F:											; else
   310                              <1> 												; {
   311 00001376 DD6068              <1> 		frstor	[eax + 104]						;   // FPUコンテキストを復帰
   312                              <1> .10E:											; }
   313 00001379 C3                  <1> 		ret
   314                              <1> 
   186                                  %include	"../modules/protect/wait_tick.s"
   187                              <1> ;************************************************************************
   188                              <1> ;	ウェイト
   189                              <1> ;------------------------------------------------------------------------
   190                              <1> ;	指定された回数、システム割り込みが発生するまで待つ
   191                              <1> ;========================================================================
   192                              <1> ;■書式		: void wait_tick(tick);
   193                              <1> ;
   194                              <1> ;■引数
   195                              <1> ;	tick	: システム割り込み回数
   196                              <1> ;
   197                              <1> ;■戻り値	: 無し
   198                              <1> ;************************************************************************
   199                              <1> wait_tick:
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 【スタックフレームの構築】
   202                              <1> 		;---------------------------------------
   203                              <1> 												; ---------------
   204                              <1> 												; EBP+ 8| ウェイト
   205                              <1> 												; ---------------
   206 0000137A 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   207 0000137B 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   208                              <1> 												; ------|--------
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 【レジスタの保存】
   212                              <1> 		;---------------------------------------
   213 0000137D 50                  <1> 		push	eax
   214 0000137E 51                  <1> 		push	ecx
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; ウェイト
   218                              <1> 		;---------------------------------------
   219 0000137F 8B4D08              <1> 		mov		ecx, [ebp +  8]					; ECX = ウェイト回数
   220 00001382 A1[D8060000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX = TIMER;
   221                              <1> 												; do
   222                              <1> 												; {
   223 00001387 3905[D8060000]      <1> .10L:	cmp		[TIMER_COUNT], eax				;   while (TIMER != EAX)
   224 0000138D 74F8                <1> 		je		.10L							;     ;
   225 0000138F 40                  <1> 		inc		eax								;   EAX++;
   226 00001390 E2F5                <1> 		loop	.10L							; } while (--ECX);
   227                              <1> 
   228                              <1> 		;---------------------------------------
   229                              <1> 		; レジスタの復帰
   230                              <1> 		;---------------------------------------
   231 00001392 59                  <1> 		pop		ecx
   232 00001393 58                  <1> 		pop		eax
   233                              <1> 
   234                              <1> 		;---------------------------------------
   235                              <1> 		; スタックフレームの破棄
   236                              <1> 		;---------------------------------------
   237 00001394 89EC                <1> 		mov		esp, ebp
   238 00001396 5D                  <1> 		pop		ebp
   239                              <1> 
   240 00001397 C3                  <1> 		ret
   241                              <1> 
   187                                  
   188                                  ;************************************************************************
   189                                  ;	パディング
   190                                  ;************************************************************************
   191 00001398 00<rep C68h>            		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
   192                                  
