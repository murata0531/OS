     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  %define	USE_SYSTEM_CALL
     8                                  %define	USE_TEST_AND_SET
     9                                  
    10                                  ;************************************************************************
    11                                  ;	マクロ
    12                                  ;************************************************************************
    13                                  %include	"../include/define.s"
    14                              <1> ;************************************************************************
    15                              <1> ;	メモリイメージ
    16                              <1> ;************************************************************************
    17                              <1> 
    18                              <1> 		;---------------------------------------
    19                              <1> 		;           |            | 
    20                              <1> 		;           |____________| 
    21                              <1> 		; 0000_7A00 |            | ( 512) スタック
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0000_7C00 |            | (  8K) ブート
    24                              <1> 		;           =            = 
    25                              <1> 		;           |____________| 
    26                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    27                              <1> 		;           =            = 
    28                              <1> 		;           |____________| 
    29                              <1> 		; 0000_BC00 |////////////| 
    30                              <1> 		;           =            = 
    31                              <1> 		;           |____________| 
    32                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    33                              <1> 		;           |____________| 
    34                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    35                              <1> 		;           |____________| 
    36                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    37                              <1> 		;           |            | 
    38                              <1> 		;           =            = 
    39                              <1> 		;           |____________| 
    40                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    41                              <1> 		;           |            | （各タスク1K）
    42                              <1> 		;           =            = 
    43                              <1> 		;           |____________| 
    44                              <1> 		; 0010_5000 |            | Dir
    45                              <1> 		;      6000 |____________| Page
    46                              <1> 		; 0010_7000 |            | Dir
    47                              <1> 		;      8000 |____________| Page
    48                              <1> 		; 0010_9000 |////////////| 
    49                              <1> 		;           |            | 
    50                              <1> 
    51                              <1> 
    52                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    53                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    54                              <1> 
    55                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    56                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    57                              <1> 
    58                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    59                              <1> 
    60                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    61                              <1> 
    62                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    63                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    64                              <1> 
    65                              <1> 		E820_RECORD_SIZE	equ		20
    66                              <1> 
    67                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    68                              <1> 
    69                              <1> 
    70                              <1> 		STACK_BASE			equ		0x0010_3000		; タスク用スタックエリア
    71                              <1> 		STACK_SIZE			equ		1024			; スタックサイズ
    72                              <1> 
    73                              <1> 		SP_TASK_0			equ		STACK_BASE + (STACK_SIZE * 1)
    74                              <1> 		SP_TASK_1			equ		STACK_BASE + (STACK_SIZE * 2)
    75                              <1> 		SP_TASK_2			equ		STACK_BASE + (STACK_SIZE * 3)
    76                              <1> 		SP_TASK_3			equ		STACK_BASE + (STACK_SIZE * 4)
    77                              <1> 		SP_TASK_4			equ		STACK_BASE + (STACK_SIZE * 5)
    78                              <1> 		SP_TASK_5			equ		STACK_BASE + (STACK_SIZE * 6)
    79                              <1> 		SP_TASK_6			equ		STACK_BASE + (STACK_SIZE * 7)
    80                              <1> 
    81                              <1> 		CR3_BASE			equ		0x0010_5000		; ページ変換テーブル：タスク3用
    82                              <1> 
    83                              <1> 		PARAM_TASK_4		equ		0x0010_8000		; 描画パラメータ：タスク4用
    84                              <1> 		PARAM_TASK_5		equ		0x0010_9000		; 描画パラメータ：タスク5用
    85                              <1> 		PARAM_TASK_6		equ		0x0010_A000		; 描画パラメータ：タスク6用
    86                              <1> 
    87                              <1> 		CR3_TASK_4			equ		0x0020_0000		; ページ変換テーブル：タスク4用
    88                              <1> 		CR3_TASK_5			equ		0x0020_2000		; ページ変換テーブル：タスク5用
    89                              <1> 		CR3_TASK_6			equ		0x0020_4000		; ページ変換テーブル：タスク6用
    90                              <1> 
    14                                  %include	"../include/macro.s"
    15                              <1> ;************************************************************************
    16                              <1> ; 関数呼び出し用マクロ
    17                              <1> ;
    18                              <1> ; 使い方：
    19                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    20                              <1> ;
    21                              <1> ;************************************************************************
    22                              <1> %macro  cdecl 1-*.nolist
    23                              <1> 
    24                              <1> 	%rep  %0 - 1
    25                              <1> 		push	%{-1:-1}
    26                              <1> 		%rotate -1
    27                              <1> 	%endrep 
    28                              <1> 	%rotate -1
    29                              <1> 
    30                              <1> 		call	%1
    31                              <1> 
    32                              <1> 	%if 1 < %0
    33                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    34                              <1> 	%endif
    35                              <1> 
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> ;************************************************************************
    39                              <1> ; 割り込みベクタ設定用
    40                              <1> ;
    41                              <1> ; 使い方：
    42                              <1> ;	set_vect	ベクタ番号, 割り込み処理 [, フラグ]
    43                              <1> ;
    44                              <1> ;************************************************************************
    45                              <1> %macro  set_vect 1-*.nolist
    46                              <1> 		push	eax
    47                              <1> 		push	edi
    48                              <1> 
    49                              <1> 		mov		edi, VECT_BASE + (%1 * 8)		; ベクタアドレス;
    50                              <1> 		mov		eax, %2
    51                              <1> 
    52                              <1> 	%if 3 == %0
    53                              <1> 		mov		[edi + 4], %3					; フラグ
    54                              <1> 	%endif
    55                              <1> 
    56                              <1> 		mov		[edi + 0], ax					; 例外アドレス[15: 0]
    57                              <1> 		shr		eax, 16							; 
    58                              <1> 		mov		[edi + 6], ax					; 例外アドレス[31:16]
    59                              <1> 
    60                              <1> 		pop		edi
    61                              <1> 		pop		eax
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> ;************************************************************************
    65                              <1> ; ポート出力用
    66                              <1> ;
    67                              <1> ; 使い方：
    68                              <1> ;	outp	ポート番号, 出力値
    69                              <1> ;
    70                              <1> ;************************************************************************
    71                              <1> %macro  outp 2
    72                              <1> 		mov		al, %2
    73                              <1> 		out		%1, al
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> ;************************************************************************
    77                              <1> ; ディスクリプタの情報を設定
    78                              <1> ;
    79                              <1> ; 使い方：
    80                              <1> ;	set_desc	ディスクリプタ, ベース
    81                              <1> ;
    82                              <1> ;************************************************************************
    83                              <1> %macro  set_desc 2-* 
    84                              <1> 		push	eax
    85                              <1> 		push	edi
    86                              <1> 
    87                              <1> 		mov		edi, %1							; ディスクリプタアドレス
    88                              <1> 		mov		eax, %2							; ベースアドレス
    89                              <1> 
    90                              <1> 	%if 3 == %0
    91                              <1> 		mov		[edi + 0], %3					; リミット
    92                              <1> 	%endif
    93                              <1> 
    94                              <1> 		mov		[edi + 2], ax					; ベース（[15: 0]）
    95                              <1> 		shr		eax, 16							; 
    96                              <1> 		mov		[edi + 4], al					; ベース（[23:16]）
    97                              <1> 		mov		[edi + 7], ah					; ベース（[31:24]）
    98                              <1> 
    99                              <1> 		pop		edi
   100                              <1> 		pop		eax
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> ;************************************************************************
   104                              <1> ; ゲートディスクリプタのオフセットを設定
   105                              <1> ;
   106                              <1> ; 使い方：
   107                              <1> ;	set_gate	ディスクリプタ, オフセット
   108                              <1> ;
   109                              <1> ;************************************************************************
   110                              <1> %macro  set_gate 2-* 
   111                              <1> 		push	eax
   112                              <1> 		push	edi
   113                              <1> 
   114                              <1> 		mov		edi, %1							; ディスクリプタアドレス
   115                              <1> 		mov		eax, %2							; ベースアドレス
   116                              <1> 
   117                              <1> 		mov		[edi + 0], ax					; ベース（[15: 0]）
   118                              <1> 		shr		eax, 16							; 
   119                              <1> 		mov		[edi + 6], ax					; ベース（[31:16]）
   120                              <1> 
   121                              <1> 		pop		edi
   122                              <1> 		pop		eax
   123                              <1> %endmacro
   124                              <1> 
   125                              <1> ;************************************************************************
   126                              <1> ;	構造体
   127                              <1> ;************************************************************************
   128                              <1> 
   129                              <1> ;-----------------------------------------------
   130                              <1> ;	ドライブパラメータ
   131                              <1> ;-----------------------------------------------
   132                              <1> struc drive
   133 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
   134 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
   135 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
   136 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
   137                              <1> endstruc
   138                              <1> 
   139                              <1> ;-----------------------------------------------
   140                              <1> ;	リングバッファ
   141                              <1> ;-----------------------------------------------
   142                              <1> %define		RING_ITEM_SIZE		(1 << 4)
   143                              <1> %define		RING_INDEX_MASK		(RING_ITEM_SIZE - 1)
   144                              <1> 
   145                              <1> struc ring_buff
   146 00000000 ????????            <1> 		.rp				resd	1				; RP:書き込み位置
   147 00000004 ????????            <1> 		.wp				resd	1				; WP:読み込み位置
   148 00000008 <res 10h>           <1> 		.item			resb	RING_ITEM_SIZE	; バッファ
   149                              <1> endstruc
   150                              <1> 
   151                              <1> ;-----------------------------------------------
   152                              <1> ;	バラ曲線描画パラメータ
   153                              <1> ;-----------------------------------------------
   154                              <1> struc rose
   155 00000000 ????????            <1> 		.x0				resd	1				; 左上座標：X0
   156 00000004 ????????            <1> 		.y0				resd	1				; 左上座標：Y0
   157 00000008 ????????            <1> 		.x1				resd	1				; 右下座標：X1
   158 0000000C ????????            <1> 		.y1				resd	1				; 右下座標：Y1
   159                              <1> 
   160 00000010 ????????            <1> 		.n				resd	1				; 変数：n
   161 00000014 ????????            <1> 		.d				resd	1				; 変数：d
   162                              <1> 
   163 00000018 ????????            <1> 		.color_x		resd	1				; 描画色：X軸
   164 0000001C ????????            <1> 		.color_y		resd	1				; 描画色：Y軸
   165 00000020 ????????            <1> 		.color_z		resd	1				; 描画色：枠
   166 00000024 ????????            <1> 		.color_s		resd	1				; 描画色：文字
   167 00000028 ????????            <1> 		.color_f		resd	1				; 描画色：グラフ描画色
   168 0000002C ????????            <1> 		.color_b		resd	1				; 描画色：グラフ消去色
   169                              <1> 
   170 00000030 <res 10h>           <1> 		.title			resb	16				; タイトル
   171                              <1> endstruc
   172                              <1> 
    15                                  
    16                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    17                                  
    18                                  [BITS 32]
    19                                  ;************************************************************************
    20                                  ;	エントリポイント
    21                                  ;************************************************************************
    22                                  kernel:
    23                                  		;---------------------------------------
    24                                  		; フォントアドレスを取得
    25                                  		;---------------------------------------
    26 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    27 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    28 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    29 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    30 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    31 00000011 A3[A0020000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    32                                  
    33                                  		;---------------------------------------
    34                                  		; TSSディスクリプタの設定
    35                                  		;---------------------------------------
    36                                  		set_desc	GDT.tss_0, TSS_0			; // タスク0用TSSの設定
    84 00000016 50                  <1>  push eax
    85 00000017 57                  <1>  push edi
    86                              <1> 
    87 00000018 BF[B0080000]        <1>  mov edi, %1
    88 0000001D B8[A8020000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000022 66894702            <1>  mov [edi + 2], ax
    95 00000026 C1E810              <1>  shr eax, 16
    96 00000029 884704              <1>  mov [edi + 4], al
    97 0000002C 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 0000002F 5F                  <1>  pop edi
   100 00000030 58                  <1>  pop eax
    37                                  		set_desc	GDT.tss_1, TSS_1			; // タスク1用TSSの設定
    84 00000031 50                  <1>  push eax
    85 00000032 57                  <1>  push edi
    86                              <1> 
    87 00000033 BF[B8080000]        <1>  mov edi, %1
    88 00000038 B8[80030000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 0000003D 66894702            <1>  mov [edi + 2], ax
    95 00000041 C1E810              <1>  shr eax, 16
    96 00000044 884704              <1>  mov [edi + 4], al
    97 00000047 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 0000004A 5F                  <1>  pop edi
   100 0000004B 58                  <1>  pop eax
    38                                  		set_desc	GDT.tss_2, TSS_2			; // タスク2用TSSの設定
    84 0000004C 50                  <1>  push eax
    85 0000004D 57                  <1>  push edi
    86                              <1> 
    87 0000004E BF[C0080000]        <1>  mov edi, %1
    88 00000053 B8[58040000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000058 66894702            <1>  mov [edi + 2], ax
    95 0000005C C1E810              <1>  shr eax, 16
    96 0000005F 884704              <1>  mov [edi + 4], al
    97 00000062 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 00000065 5F                  <1>  pop edi
   100 00000066 58                  <1>  pop eax
    39                                  		set_desc	GDT.tss_3, TSS_3			; // タスク3用TSSの設定
    84 00000067 50                  <1>  push eax
    85 00000068 57                  <1>  push edi
    86                              <1> 
    87 00000069 BF[C8080000]        <1>  mov edi, %1
    88 0000006E B8[30050000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000073 66894702            <1>  mov [edi + 2], ax
    95 00000077 C1E810              <1>  shr eax, 16
    96 0000007A 884704              <1>  mov [edi + 4], al
    97 0000007D 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 00000080 5F                  <1>  pop edi
   100 00000081 58                  <1>  pop eax
    40                                  		set_desc	GDT.tss_4, TSS_4			; // タスク4用TSSの設定
    84 00000082 50                  <1>  push eax
    85 00000083 57                  <1>  push edi
    86                              <1> 
    87 00000084 BF[D0080000]        <1>  mov edi, %1
    88 00000089 B8[08060000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 0000008E 66894702            <1>  mov [edi + 2], ax
    95 00000092 C1E810              <1>  shr eax, 16
    96 00000095 884704              <1>  mov [edi + 4], al
    97 00000098 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 0000009B 5F                  <1>  pop edi
   100 0000009C 58                  <1>  pop eax
    41                                  		set_desc	GDT.tss_5, TSS_5			; // タスク5用TSSの設定
    84 0000009D 50                  <1>  push eax
    85 0000009E 57                  <1>  push edi
    86                              <1> 
    87 0000009F BF[D8080000]        <1>  mov edi, %1
    88 000000A4 B8[E0060000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 000000A9 66894702            <1>  mov [edi + 2], ax
    95 000000AD C1E810              <1>  shr eax, 16
    96 000000B0 884704              <1>  mov [edi + 4], al
    97 000000B3 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 000000B6 5F                  <1>  pop edi
   100 000000B7 58                  <1>  pop eax
    42                                  		set_desc	GDT.tss_6, TSS_6			; // タスク6用TSSの設定
    84 000000B8 50                  <1>  push eax
    85 000000B9 57                  <1>  push edi
    86                              <1> 
    87 000000BA BF[E0080000]        <1>  mov edi, %1
    88 000000BF B8[B8070000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 000000C4 66894702            <1>  mov [edi + 2], ax
    95 000000C8 C1E810              <1>  shr eax, 16
    96 000000CB 884704              <1>  mov [edi + 4], al
    97 000000CE 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 000000D1 5F                  <1>  pop edi
   100 000000D2 58                  <1>  pop eax
    43                                  
    44                                  		;---------------------------------------
    45                                  		; コールゲートの設定
    46                                  		;---------------------------------------
    47                                  		set_gate	GDT.call_gate, call_gate	; // コールゲートの設定
   111 000000D3 50                  <1>  push eax
   112 000000D4 57                  <1>  push edi
   113                              <1> 
   114 000000D5 BF[E8080000]        <1>  mov edi, %1
   115 000000DA B8[88170000]        <1>  mov eax, %2
   116                              <1> 
   117 000000DF 668907              <1>  mov [edi + 0], ax
   118 000000E2 C1E810              <1>  shr eax, 16
   119 000000E5 66894706            <1>  mov [edi + 6], ax
   120                              <1> 
   121 000000E9 5F                  <1>  pop edi
   122 000000EA 58                  <1>  pop eax
    48                                  
    49                                  		;---------------------------------------
    50                                  		; LDTの設定
    51                                  		;---------------------------------------
    52                                  		set_desc	GDT.ldt, LDT, word LDT_LIMIT
    84 000000EB 50                  <1>  push eax
    85 000000EC 57                  <1>  push edi
    86                              <1> 
    87 000000ED BF[A8080000]        <1>  mov edi, %1
    88 000000F2 B8[F6080000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91 000000F7 66C7075F00          <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 000000FC 66894702            <1>  mov [edi + 2], ax
    95 00000100 C1E810              <1>  shr eax, 16
    96 00000103 884704              <1>  mov [edi + 4], al
    97 00000106 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 00000109 5F                  <1>  pop edi
   100 0000010A 58                  <1>  pop eax
    53                                  
    54                                  		;---------------------------------------
    55                                  		; GDTをロード（再設定）
    56                                  		;---------------------------------------
    57 0000010B 0F0115[F0080000]        		lgdt	[GDTR]							; // グローバルディスクリプタテーブルをロード
    58                                  
    59                                  		;---------------------------------------
    60                                  		; スタックの設定
    61                                  		;---------------------------------------
    62 00000112 BC00341000              		mov		esp, SP_TASK_0					; // タスク0用のスタックを設定
    63                                  
    64                                  		;---------------------------------------
    65                                  		; タスクレジスタの初期化
    66                                  		;---------------------------------------
    67 00000117 66B82000                		mov		ax, SS_TASK_0
    68 0000011B 0F00D8                  		ltr		ax								; // タスクレジスタの設定
    69                                  
    70                                  		;---------------------------------------
    71                                  		; 初期化
    72                                  		;---------------------------------------
    73 0000011E E83B130000              		cdecl	init_int						; // 割り込みベクタの初期化
    74 00000123 E8BC140000              		cdecl	init_pic						; // 割り込みコントローラの初期化
    75 00000128 E829080000              		cdecl	init_page						; // ページングの初期化
    76                                  
    77 0000012D 5057BF00001000B8-       		set_vect	0x00, int_zero_div			; // 割り込み処理の登録：0除算
    77 00000135 [C6150000]668907C1-
    77 0000013D E810668947065F58   
    78 00000145 5057BF38001000B8-       		set_vect	0x07, int_nm				; // 割り込み処理の登録：デバイス使用不可
    78 0000014D [F3170000]668907C1-
    78 00000155 E810668947065F58   
    79 0000015D 5057BF70001000B8-       		set_vect	0x0E, int_pf				; // 割り込み処理の登録：ページフォルト
    79 00000165 [B80A0000]668907C1-
    79 0000016D E810668947065F58   
    80 00000175 5057BF00011000B8-       		set_vect	0x20, int_timer				; // 割り込み処理の登録：タイマー
    80 0000017D [330A0000]668907C1-
    80 00000185 E810668947065F58   
    81 0000018D 5057BF08011000B8-       		set_vect	0x21, int_keyboard			; // 割り込み処理の登録：KBC
    81 00000195 [4E160000]668907C1-
    81 0000019D E810668947065F58   
    82 000001A5 5057BF40011000B8-       		set_vect	0x28, int_rtc				; // 割り込み処理の登録：RTC
    82 000001AD [23160000]668907C1-
    82 000001B5 E810668947065F58   
    83 000001BD 5057BF08041000B8-       		set_vect	0x81, trap_gate_81, word 0xEF00	; // トラップゲートの登録：1文字出力
    83 000001C5 [B8170000]66C74704-
    83 000001CD 00EF668907C1E81066-
    83 000001D6 8947065F58         
    84 000001DB 5057BF10041000B8-       		set_vect	0x82, trap_gate_82, word 0xEF00	; // トラップゲートの登録：点の描画
    84 000001E3 [C6170000]66C74704-
    84 000001EB 00EF668907C1E81066-
    84 000001F4 8947065F58         
    85                                  
    86                                  		;---------------------------------------
    87                                  		; デバイスの割り込み許可
    88                                  		;---------------------------------------
    89 000001F9 6A10E80F1400006683-     		cdecl	rtc_int_en, 0x10				; rtc_int_en(UIE); // 更新サイクル終了割り込み許可
    89 00000202 C404               
    90 00000204 E837150000              		cdecl	int_en_timer0					; // タイマー（カウンタ0）割り込み許可
    91                                  
    92                                  		;---------------------------------------
    93                                  		; IMR(割り込みマスクレジスタ)の設定
    94                                  		;---------------------------------------
    95                                  		outp	0x21, 0b_1111_1000				; // 割り込み有効：スレーブPIC/KBC/タイマー
    72 00000209 B0F8                <1>  mov al, %2
    73 0000020B E621                <1>  out %1, al
    96                                  		outp	0xA1, 0b_1111_1110				; // 割り込み有効：RTC
    72 0000020D B0FE                <1>  mov al, %2
    73 0000020F E6A1                <1>  out %1, al
    97                                  
    98                                  		;---------------------------------------
    99                                  		; ページングを有効化
   100                                  		;---------------------------------------
   101 00000211 B800501000              		mov		eax, CR3_BASE					;
   102 00000216 0F22D8                  		mov		cr3, eax						; // ページテーブルの登録
   103                                  
   104 00000219 0F20C0                  		mov		eax, cr0						; // PGビットをセット
   105 0000021C 0D00000080              		or		eax, (1 << 31)					; CR0 |= PG;
   106 00000221 0F22C0                  		mov		cr0, eax						; 
   107 00000224 EB00                    		jmp		$ + 2							; FLUSH();
   108                                  
   109                                  		;---------------------------------------
   110                                  		; CPUの割り込み許可
   111                                  		;---------------------------------------
   112 00000226 FB                      		sti										; // 割り込み許可
   113                                  
   114                                  		;---------------------------------------
   115                                  		; フォントの一覧表示
   116                                  		;---------------------------------------
   117 00000227 6A0D6A3FE8D80D0000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
   117 00000230 6683C408           
   118 00000234 6A046A3FE84E0E0000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
   118 0000023D 6683C408           
   119                                  
   120                                  		;---------------------------------------
   121                                  		; 文字列の表示
   122                                  		;---------------------------------------
   123 00000241 68[89020000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
   123 00000249 00006A0E6A19E8F90D-
   123 00000252 00006683C410       
   124                                  
   125                                  .10L:											; while (;;)
   126                                  												; {
   127                                  		;---------------------------------------
   128                                  		; 回転する棒を表示
   129                                  		;---------------------------------------
   130 00000258 E8F2140000              		cdecl	draw_rotation_bar				;   // 回転する棒を表示
   131                                  
   132                                  		;---------------------------------------
   133                                  		; キーコードの取得
   134                                  		;---------------------------------------
   135 0000025D 68[9C020000]68-         		cdecl	ring_rd, _KEY_BUFF, .int_key	;   EAX = ring_rd(buff, &int_key);
   135 00000263 [74160000]E8201400-
   135 0000026B 006683C408         
   136 00000270 83F800                  		cmp		eax, 0							;   if (EAX == 0)
   137 00000273 7412                    		je		.10E							;   {
   138                                  												;   
   139                                  		;---------------------------------------
   140                                  		; キーコードの表示
   141                                  		;---------------------------------------
   142 00000275 68[74160000]6A1D6A-     		cdecl	draw_key, 2, 29, _KEY_BUFF		;     ring_show(key_buff); // 全要素を表示
   142 0000027D 02E86A1400006683C4-
   142 00000286 0C                 
   143                                  .10E:											;   }
   144 00000287 EBCF                    		jmp		.10L							; }
   145                                  
   146 00000289 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
   146 00000292 65726E656C212000   
   147                                  
   148 0000029A 00<rep 2h>              ALIGN 4, db 0
   149 0000029C 00000000                .int_key:	dd	0
   150                                  
   151                                  ALIGN 4, db 0
   152 000002A0 00000000                FONT_ADR:	dd	0
   153 000002A4 00000000                RTC_TIME:	dd	0
   154                                  
   155                                  ;************************************************************************
   156                                  ;	タスク
   157                                  ;************************************************************************
   158                                  %include	"descriptor.s"
   159                              <1> ;************************************************************************
   160                              <1> ;	TSS
   161                              <1> ;************************************************************************
   162                              <1> TSS_0:
   163 000002A8 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   164 000002AC 00321000            <1> .esp0:			dd	SP_TASK_0 - 512				;*  4:ESP0
   165 000002B0 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   166 000002B4 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   167 000002B8 00000000            <1> .ss1:			dd	0							;* 16:
   168 000002BC 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   169 000002C0 00000000            <1> .ss2:			dd	0							;* 24:
   170 000002C4 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
   171 000002C8 00000000            <1> .eip:			dd	0							;  32:EIP
   172 000002CC 00000000            <1> .eflags:		dd	0							;  36:EFLAGS
   173 000002D0 00000000            <1> .eax:			dd	0							;  40:EAX
   174 000002D4 00000000            <1> .ecx:			dd	0							;  44:ECX
   175 000002D8 00000000            <1> .edx:			dd	0							;  48:EDX
   176 000002DC 00000000            <1> .ebx:			dd	0							;  52:EBX
   177 000002E0 00000000            <1> .esp:			dd	0							;  56:ESP
   178 000002E4 00000000            <1> .ebp:			dd	0							;  60:EBP
   179 000002E8 00000000            <1> .esi:			dd	0							;  64:ESI
   180 000002EC 00000000            <1> .edi:			dd	0							;  68:EDI
   181 000002F0 00000000            <1> .es:			dd	0							;  72:ES
   182 000002F4 00000000            <1> .cs:			dd	0							;  76:CS
   183 000002F8 00000000            <1> .ss:			dd	0							;  80:SS
   184 000002FC 00000000            <1> .ds:			dd	0							;  84:DS
   185 00000300 00000000            <1> .fs:			dd	0							;  88:FS
   186 00000304 00000000            <1> .gs:			dd	0							;  92:GS
   187 00000308 00000000            <1> .ldt:			dd	0							;* 96:LDTセグメントセレクタ
   188 0000030C 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   189 00000310 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   190                              <1> 
   191                              <1> TSS_1:
   192 00000380 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   193 00000384 00361000            <1> .esp0:			dd	SP_TASK_1 - 512				;*  4:ESP0
   194 00000388 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   195 0000038C 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   196 00000390 00000000            <1> .ss1:			dd	0							;* 16:
   197 00000394 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   198 00000398 00000000            <1> .ss2:			dd	0							;* 24:
   199 0000039C 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
   200 000003A0 [260B0000]          <1> .eip:			dd	task_1						;  32:EIP
   201 000003A4 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   202 000003A8 00000000            <1> .eax:			dd	0							;  40:EAX
   203 000003AC 00000000            <1> .ecx:			dd	0							;  44:ECX
   204 000003B0 00000000            <1> .edx:			dd	0							;  48:EDX
   205 000003B4 00000000            <1> .ebx:			dd	0							;  52:EBX
   206 000003B8 00381000            <1> .esp:			dd	SP_TASK_1					;  56:ESP
   207 000003BC 00000000            <1> .ebp:			dd	0							;  60:EBP
   208 000003C0 00000000            <1> .esi:			dd	0							;  64:ESI
   209 000003C4 00000000            <1> .edi:			dd	0							;  68:EDI
   210 000003C8 27000000            <1> .es:			dd	DS_TASK_1					;  72:ES
   211 000003CC 1F000000            <1> .cs:			dd	CS_TASK_1					;  76:CS
   212 000003D0 27000000            <1> .ss:			dd	DS_TASK_1					;  80:SS
   213 000003D4 27000000            <1> .ds:			dd	DS_TASK_1					;  84:DS
   214 000003D8 27000000            <1> .fs:			dd	DS_TASK_1					;  88:FS
   215 000003DC 27000000            <1> .gs:			dd	DS_TASK_1					;  92:GS
   216 000003E0 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   217 000003E4 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   218 000003E8 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   219                              <1> 
   220                              <1> TSS_2:
   221 00000458 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   222 0000045C 003A1000            <1> .esp0:			dd	SP_TASK_2 - 512				;*  4:ESP0
   223 00000460 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   224 00000464 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   225 00000468 00000000            <1> .ss1:			dd	0							;* 16:
   226 0000046C 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   227 00000470 00000000            <1> .ss2:			dd	0							;* 24:
   228 00000474 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
   229 00000478 [5B0B0000]          <1> .eip:			dd	task_2						;  32:EIP
   230 0000047C 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   231 00000480 00000000            <1> .eax:			dd	0							;  40:EAX
   232 00000484 00000000            <1> .ecx:			dd	0							;  44:ECX
   233 00000488 00000000            <1> .edx:			dd	0							;  48:EDX
   234 0000048C 00000000            <1> .ebx:			dd	0							;  52:EBX
   235 00000490 003C1000            <1> .esp:			dd	SP_TASK_2					;  56:ESP
   236 00000494 00000000            <1> .ebp:			dd	0							;  60:EBP
   237 00000498 00000000            <1> .esi:			dd	0							;  64:ESI
   238 0000049C 00000000            <1> .edi:			dd	0							;  68:EDI
   239 000004A0 37000000            <1> .es:			dd	DS_TASK_2					;  72:ES
   240 000004A4 2F000000            <1> .cs:			dd	CS_TASK_2					;  76:CS
   241 000004A8 37000000            <1> .ss:			dd	DS_TASK_2					;  80:SS
   242 000004AC 37000000            <1> .ds:			dd	DS_TASK_2					;  84:DS
   243 000004B0 37000000            <1> .fs:			dd	DS_TASK_2					;  88:FS
   244 000004B4 37000000            <1> .gs:			dd	DS_TASK_2					;  92:GS
   245 000004B8 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   246 000004BC 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   247 000004C0 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   248                              <1> 
   249                              <1> TSS_3:
   250 00000530 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   251 00000534 003E1000            <1> .esp0:			dd	SP_TASK_3 - 512				;*  4:ESP0
   252 00000538 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   253 0000053C 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   254 00000540 00000000            <1> .ss1:			dd	0							;* 16:
   255 00000544 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   256 00000548 00000000            <1> .ss2:			dd	0							;* 24:
   257 0000054C 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
   258 00000550 [2C0C0000]          <1> .eip:			dd	task_3						;  32:EIP
   259 00000554 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   260 00000558 00000000            <1> .eax:			dd	0							;  40:EAX
   261 0000055C 00000000            <1> .ecx:			dd	0							;  44:ECX
   262 00000560 00000000            <1> .edx:			dd	0							;  48:EDX
   263 00000564 00000000            <1> .ebx:			dd	0							;  52:EBX
   264 00000568 00401000            <1> .esp:			dd	SP_TASK_3					;  56:ESP
   265 0000056C 00000000            <1> .ebp:			dd	0							;  60:EBP
   266 00000570 00000000            <1> .esi:			dd	0							;  64:ESI
   267 00000574 00000000            <1> .edi:			dd	0							;  68:EDI
   268 00000578 47000000            <1> .es:			dd	DS_TASK_3					;  72:ES
   269 0000057C 3F000000            <1> .cs:			dd	CS_TASK_3					;  76:CS
   270 00000580 47000000            <1> .ss:			dd	DS_TASK_3					;  80:SS
   271 00000584 47000000            <1> .ds:			dd	DS_TASK_3					;  84:DS
   272 00000588 47000000            <1> .fs:			dd	DS_TASK_3					;  88:FS
   273 0000058C 47000000            <1> .gs:			dd	DS_TASK_3					;  92:GS
   274 00000590 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   275 00000594 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   276 00000598 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   277                              <1> 
   278                              <1> TSS_4:
   279 00000608 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   280 0000060C 00421000            <1> .esp0:			dd	SP_TASK_4 - 512				;*  4:ESP0
   281 00000610 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   282 00000614 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   283 00000618 00000000            <1> .ss1:			dd	0							;* 16:
   284 0000061C 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   285 00000620 00000000            <1> .ss2:			dd	0							;* 24:
   286 00000624 00002000            <1> .cr3:			dd	CR3_TASK_4					;  28:CR3(PDBR)
   287 00000628 [2C0C0000]          <1> .eip:			dd	task_3						;  32:EIP
   288 0000062C 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   289 00000630 00000000            <1> .eax:			dd	0							;  40:EAX
   290 00000634 00000000            <1> .ecx:			dd	0							;  44:ECX
   291 00000638 00000000            <1> .edx:			dd	0							;  48:EDX
   292 0000063C 00000000            <1> .ebx:			dd	0							;  52:EBX
   293 00000640 00441000            <1> .esp:			dd	SP_TASK_4					;  56:ESP
   294 00000644 00000000            <1> .ebp:			dd	0							;  60:EBP
   295 00000648 00000000            <1> .esi:			dd	0							;  64:ESI
   296 0000064C 00000000            <1> .edi:			dd	0							;  68:EDI
   297 00000650 4F000000            <1> .es:			dd	DS_TASK_4					;  72:ES
   298 00000654 3F000000            <1> .cs:			dd	CS_TASK_3					;  76:CS
   299 00000658 4F000000            <1> .ss:			dd	DS_TASK_4					;  80:SS
   300 0000065C 4F000000            <1> .ds:			dd	DS_TASK_4					;  84:DS
   301 00000660 4F000000            <1> .fs:			dd	DS_TASK_4					;  88:FS
   302 00000664 4F000000            <1> .gs:			dd	DS_TASK_4					;  92:GS
   303 00000668 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   304 0000066C 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   305 00000670 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   306                              <1> 
   307                              <1> TSS_5:
   308 000006E0 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   309 000006E4 00461000            <1> .esp0:			dd	SP_TASK_5 - 512				;*  4:ESP0
   310 000006E8 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   311 000006EC 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   312 000006F0 00000000            <1> .ss1:			dd	0							;* 16:
   313 000006F4 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   314 000006F8 00000000            <1> .ss2:			dd	0							;* 24:
   315 000006FC 00202000            <1> .cr3:			dd	CR3_TASK_5					;  28:CR3(PDBR)
   316 00000700 [2C0C0000]          <1> .eip:			dd	task_3						;  32:EIP
   317 00000704 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   318 00000708 00000000            <1> .eax:			dd	0							;  40:EAX
   319 0000070C 00000000            <1> .ecx:			dd	0							;  44:ECX
   320 00000710 00000000            <1> .edx:			dd	0							;  48:EDX
   321 00000714 00000000            <1> .ebx:			dd	0							;  52:EBX
   322 00000718 00481000            <1> .esp:			dd	SP_TASK_5					;  56:ESP
   323 0000071C 00000000            <1> .ebp:			dd	0							;  60:EBP
   324 00000720 00000000            <1> .esi:			dd	0							;  64:ESI
   325 00000724 00000000            <1> .edi:			dd	0							;  68:EDI
   326 00000728 57000000            <1> .es:			dd	DS_TASK_5					;  72:ES
   327 0000072C 3F000000            <1> .cs:			dd	CS_TASK_3					;  76:CS
   328 00000730 57000000            <1> .ss:			dd	DS_TASK_5					;  80:SS
   329 00000734 57000000            <1> .ds:			dd	DS_TASK_5					;  84:DS
   330 00000738 57000000            <1> .fs:			dd	DS_TASK_5					;  88:FS
   331 0000073C 57000000            <1> .gs:			dd	DS_TASK_5					;  92:GS
   332 00000740 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   333 00000744 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   334 00000748 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   335                              <1> 
   336                              <1> TSS_6:
   337 000007B8 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   338 000007BC 004A1000            <1> .esp0:			dd	SP_TASK_6 - 512				;*  4:ESP0
   339 000007C0 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   340 000007C4 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   341 000007C8 00000000            <1> .ss1:			dd	0							;* 16:
   342 000007CC 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   343 000007D0 00000000            <1> .ss2:			dd	0							;* 24:
   344 000007D4 00402000            <1> .cr3:			dd	CR3_TASK_6					;  28:CR3(PDBR)
   345 000007D8 [2C0C0000]          <1> .eip:			dd	task_3						;  32:EIP
   346 000007DC 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   347 000007E0 00000000            <1> .eax:			dd	0							;  40:EAX
   348 000007E4 00000000            <1> .ecx:			dd	0							;  44:ECX
   349 000007E8 00000000            <1> .edx:			dd	0							;  48:EDX
   350 000007EC 00000000            <1> .ebx:			dd	0							;  52:EBX
   351 000007F0 004C1000            <1> .esp:			dd	SP_TASK_6					;  56:ESP
   352 000007F4 00000000            <1> .ebp:			dd	0							;  60:EBP
   353 000007F8 00000000            <1> .esi:			dd	0							;  64:ESI
   354 000007FC 00000000            <1> .edi:			dd	0							;  68:EDI
   355 00000800 5F000000            <1> .es:			dd	DS_TASK_6					;  72:ES
   356 00000804 3F000000            <1> .cs:			dd	CS_TASK_3					;  76:CS
   357 00000808 5F000000            <1> .ss:			dd	DS_TASK_6					;  80:SS
   358 0000080C 5F000000            <1> .ds:			dd	DS_TASK_6					;  84:DS
   359 00000810 5F000000            <1> .fs:			dd	DS_TASK_6					;  88:FS
   360 00000814 5F000000            <1> .gs:			dd	DS_TASK_6					;  92:GS
   361 00000818 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   362 0000081C 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   363 00000820 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   364                              <1> 
   365                              <1> 
   366                              <1> ;************************************************************************
   367                              <1> ;	グローバルディスクリプタテーブル
   368                              <1> ;************************************************************************
   369 00000890 0000000000000000    <1> GDT:			dq	0x0000000000000000			; NULL
   370 00000898 FFFF0000009ACF00    <1> .cs_kernel:		dq	0x00CF9A000000FFFF			; CODE 4G
   371 000008A0 FFFF00000092CF00    <1> .ds_kernel:		dq	0x00CF92000000FFFF			; DATA 4G
   372 000008A8 0000000000820000    <1> .ldt			dq	0x0000820000000000			; LDTディスクリプタ
   373 000008B0 6700000000890000    <1> .tss_0:			dq	0x0000890000000067			; TSSディスクリプタ
   374 000008B8 6700000000890000    <1> .tss_1:			dq	0x0000890000000067			; TSSディスクリプタ
   375 000008C0 6700000000890000    <1> .tss_2:			dq	0x0000890000000067			; TSSディスクリプタ
   376 000008C8 6700000000890000    <1> .tss_3:			dq	0x0000890000000067			; TSSディスクリプタ
   377 000008D0 6700000000890000    <1> .tss_4:			dq	0x0000890000000067			; TSSディスクリプタ
   378 000008D8 6700000000890000    <1> .tss_5:			dq	0x0000890000000067			; TSSディスクリプタ
   379 000008E0 6700000000890000    <1> .tss_6:			dq	0x0000890000000067			; TSSディスクリプタ
   380 000008E8 0000080004EC0000    <1> .call_gate:		dq	0x0000EC0400080000			; 386コールゲート(DPL=3, count=4, SEL=8)
   381                              <1> .end:
   382                              <1> 
   383                              <1> CS_KERNEL		equ	.cs_kernel	- GDT
   384                              <1> DS_KERNEL		equ	.ds_kernel	- GDT
   385                              <1> SS_LDT			equ	.ldt		- GDT
   386                              <1> SS_TASK_0		equ	.tss_0		- GDT
   387                              <1> SS_TASK_1		equ	.tss_1		- GDT
   388                              <1> SS_TASK_2		equ	.tss_2		- GDT
   389                              <1> SS_TASK_3		equ	.tss_3		- GDT
   390                              <1> SS_TASK_4		equ	.tss_4		- GDT
   391                              <1> SS_TASK_5		equ	.tss_5		- GDT
   392                              <1> SS_TASK_6		equ	.tss_6		- GDT
   393                              <1> SS_GATE_0		equ	.call_gate	- GDT
   394                              <1> 
   395 000008F0 5F00                <1> GDTR:	dw 		GDT.end - GDT - 1
   396 000008F2 [90080000]          <1> 		dd 		GDT
   397                              <1> 
   398                              <1> 
   399                              <1> ;************************************************************************
   400                              <1> ;	ローカルディスクリプタテーブル
   401                              <1> ;************************************************************************
   402 000008F6 0000000000000000    <1> LDT:			dq	0x0000000000000000			; NULL
   403 000008FE FFFF0000009ACF00    <1> .cs_task_0:		dq	0x00CF9A000000FFFF			; CODE 4G
   404 00000906 FFFF00000092CF00    <1> .ds_task_0:		dq	0x00CF92000000FFFF			; DATA 4G
   405 0000090E FFFF000000FACF00    <1> .cs_task_1:		dq	0x00CFFA000000FFFF			; CODE 4G
   406 00000916 FFFF000000F2CF00    <1> .ds_task_1:		dq	0x00CFF2000000FFFF			; DATA 4G
   407 0000091E FFFF000000FACF00    <1> .cs_task_2:		dq	0x00CFFA000000FFFF			; CODE 4G
   408 00000926 FFFF000000F2CF00    <1> .ds_task_2:		dq	0x00CFF2000000FFFF			; DATA 4G
   409 0000092E FFFF000000FACF00    <1> .cs_task_3:		dq	0x00CFFA000000FFFF			; CODE 4G
   410 00000936 FFFF000000F2CF00    <1> .ds_task_3:		dq	0x00CFF2000000FFFF			; DATA 4G
   411 0000093E FFFF000000F2CF00    <1> .ds_task_4:		dq	0x00CFF2000000FFFF			; DATA 4G
   412 00000946 FFFF000000F2CF00    <1> .ds_task_5:		dq	0x00CFF2000000FFFF			; DATA 4G
   413 0000094E FFFF000000F2CF00    <1> .ds_task_6:		dq	0x00CFF2000000FFFF			; DATA 4G
   414                              <1> .end:
   415                              <1> 
   416                              <1> CS_TASK_0		equ	(.cs_task_0 - LDT) | 4		; タスク0用CSセレクタ
   417                              <1> DS_TASK_0		equ	(.ds_task_0 - LDT) | 4		; タスク0用DSセレクタ
   418                              <1> CS_TASK_1		equ	(.cs_task_1 - LDT) | 4 | 3	; タスク1用CSセレクタ
   419                              <1> DS_TASK_1		equ	(.ds_task_1 - LDT) | 4 | 3	; タスク1用DSセレクタ
   420                              <1> CS_TASK_2		equ	(.cs_task_2 - LDT) | 4 | 3	; タスク2用CSセレクタ
   421                              <1> DS_TASK_2		equ	(.ds_task_2 - LDT) | 4 | 3	; タスク2用DSセレクタ
   422                              <1> CS_TASK_3		equ	(.cs_task_3 - LDT) | 4 | 3	; タスク3用CSセレクタ
   423                              <1> DS_TASK_3		equ	(.ds_task_3 - LDT) | 4 | 3	; タスク3用DSセレクタ
   424                              <1> DS_TASK_4		equ	(.ds_task_4 - LDT) | 4 | 3	; タスク4用DSセレクタ
   425                              <1> DS_TASK_5		equ	(.ds_task_5 - LDT) | 4 | 3	; タスク5用DSセレクタ
   426                              <1> DS_TASK_6		equ	(.ds_task_6 - LDT) | 4 | 3	; タスク6用DSセレクタ
   427                              <1> 
   428                              <1> LDT_LIMIT		equ	.end		- LDT - 1
   429                              <1> 
   430                              <1> 
   159                                  %include	"modules/paging.s"
   160                              <1> ;************************************************************************
   161                              <1> ;	ページの初期化
   162                              <1> ;
   163                              <1> 		;---------------------------------------
   164                              <1> 		;          |____________| 
   165                              <1> 		; 0010_5000|       (4K) | ディレクトリテーブル
   166                              <1> 		;          =            = 
   167                              <1> 		;          |____________| 
   168                              <1> 		; 0010_6000|       (4K) | ページテーブル
   169                              <1> 		;          =            = 
   170                              <1> 		;          |____________| 
   171                              <1> 		; 0010_7000|       (4K) | ページフォルト用
   172                              <1> 		;          =            = 
   173                              <1> 		;          |____________| 
   174                              <1> 		;          |            | 
   175                              <1> ;
   176                              <1> ;************************************************************************
   177                              <1> init_page:
   178                              <1> 		;---------------------------------------
   179                              <1> 		; 【レジスタの保存】
   180                              <1> 		;---------------------------------------
   181 00000956 60                  <1> 		pusha
   182                              <1> 
   183                              <1> 		;---------------------------------------
   184                              <1> 		; ページ変換テーブルの作成
   185                              <1> 		;---------------------------------------
   186 00000957 6800501000E8970000- <1> 		cdecl	page_set_4m, CR3_BASE			; // ページ変換テーブルの作成：タスク3用
   186 00000960 006683C404          <1>
   187 00000965 6800002000E8890000- <1> 		cdecl	page_set_4m, CR3_TASK_4			; // ページ変換テーブルの作成：タスク4用
   187 0000096E 006683C404          <1>
   188 00000973 6800202000E87B0000- <1> 		cdecl	page_set_4m, CR3_TASK_5			; // ページ変換テーブルの作成：タスク5用
   188 0000097C 006683C404          <1>
   189 00000981 6800402000E86D0000- <1> 		cdecl	page_set_4m, CR3_TASK_6			; // ページ変換テーブルの作成：タスク6用
   189 0000098A 006683C404          <1>
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; ページテーブルの設定（不在）
   193                              <1> 		;---------------------------------------
   194 0000098F C7051C641000000000- <1> 		mov		[0x0010_6000 + 0x107 * 4], dword 0	; // 0x0010_7000をページ不在に設定
   194 00000998 00                  <1>
   195                              <1> 
   196                              <1> 		;---------------------------------------
   197                              <1> 		; アドレス変換設定
   198                              <1> 		;---------------------------------------
   199 00000999 C7051C142000078010- <1> 		mov		[0x0020_1000 + 0x107 * 4], dword PARAM_TASK_4 + 7 ; // アドレス変換：タスク4用
   199 000009A2 00                  <1>
   200 000009A3 C7051C342000079010- <1> 		mov		[0x0020_3000 + 0x107 * 4], dword PARAM_TASK_5 + 7 ; // アドレス変換：タスク5用
   200 000009AC 00                  <1>
   201 000009AD C7051C54200007A010- <1> 		mov		[0x0020_5000 + 0x107 * 4], dword PARAM_TASK_6 + 7 ; // アドレス変換：タスク6用
   201 000009B6 00                  <1>
   202                              <1> 
   203                              <1> 		;---------------------------------------
   204                              <1> 		; 描画パラメータの設定
   205                              <1> 		;---------------------------------------
   206 000009B7 6A4068[6C0D0000]68- <1> 		cdecl	memcpy, PARAM_TASK_4, DRAW_PARAM.t4, rose_size	; 描画パラメータ：タスク4用
   206 000009BF 00801000E8D80E0000- <1>
   206 000009C8 6683C40C            <1>
   207 000009CC 6A4068[AC0D0000]68- <1> 		cdecl	memcpy, PARAM_TASK_5, DRAW_PARAM.t5, rose_size	; 描画パラメータ：タスク5用
   207 000009D4 00901000E8C30E0000- <1>
   207 000009DD 6683C40C            <1>
   208 000009E1 6A4068[EC0D0000]68- <1> 		cdecl	memcpy, PARAM_TASK_6, DRAW_PARAM.t6, rose_size	; 描画パラメータ：タスク6用
   208 000009E9 00A01000E8AE0E0000- <1>
   208 000009F2 6683C40C            <1>
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 【レジスタの復帰】
   212                              <1> 		;---------------------------------------
   213 000009F6 61                  <1> 		popa
   214                              <1> 
   215 000009F7 C3                  <1> 		ret
   216                              <1> 
   217                              <1> 
   218                              <1> ;************************************************************************
   219                              <1> ;	
   220                              <1> ;************************************************************************
   221                              <1> page_set_4m:
   222                              <1> 		;---------------------------------------
   223                              <1> 		; 【スタックフレームの構築】
   224                              <1> 		;---------------------------------------
   225                              <1> 												; ------|--------
   226 000009F8 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   227 000009F9 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   228                              <1> 												; ------|--------
   229                              <1> 												;    + 8| ページテーブル作成位置
   230                              <1> 												; ------|--------
   231                              <1> 		;---------------------------------------
   232                              <1> 		; 【レジスタの保存】
   233                              <1> 		;---------------------------------------
   234 000009FB 60                  <1> 		pusha
   235                              <1> 
   236                              <1> 		;---------------------------------------
   237                              <1> 		; ページディレクトリの作成(P=0)
   238                              <1> 		;---------------------------------------
   239 000009FC FC                  <1> 		cld										; // DFクリア（+方向）
   240 000009FD 8B7D08              <1> 		mov		edi, [ebp + 8]					; EDI = ページディレクトリの先頭;
   241 00000A00 B800000000          <1> 		mov		eax, 0x00000000					; EAX = 0 ; // P = 0
   242 00000A05 B900040000          <1> 		mov		ecx, 1024						; count = 1024;
   243 00000A0A F3AB                <1> 		rep stosd								; whlie (count--) *dst++ = 属性;
   244                              <1> 
   245                              <1> 		;---------------------------------------
   246                              <1> 		; 先頭のエントリを設定
   247                              <1> 		;---------------------------------------
   248 00000A0C 89F8                <1> 		mov		eax, edi						; EAX  = EDI;   // ページディレクトリの直後
   249 00000A0E 2500F0FFFF          <1> 		and		eax, ~0x0000_0FFF				; EAX &= ~0FFF; // 物理アドレスの指定
   250 00000A13 83C807              <1> 		or		eax,  7							; EAX |=  7;    // RWの許可
   251 00000A16 898700F0FFFF        <1> 		mov		[edi - (1024 * 4)], eax			; // 先頭のエントリを設定
   252                              <1> 
   253                              <1> 		;---------------------------------------
   254                              <1> 		; ページテーブルの設定（リニア）
   255                              <1> 		;---------------------------------------
   256 00000A1C B807000000          <1> 		mov		eax, 0x00000007					; // 物理アドレスの指定とRWの許可
   257 00000A21 B900040000          <1> 		mov		ecx, 1024						; count = 1024;
   258                              <1> 												; do
   259                              <1> .10L:											; {
   260 00000A26 AB                  <1> 		stosd									;   *dst++  = 属性;
   261 00000A27 0500100000          <1> 		add		eax, 0x00001000					;    adr   += 0x1000;
   262 00000A2C E2F8                <1> 		loop	.10L							; } while (--count);
   263                              <1> 
   264                              <1> 		;---------------------------------------
   265                              <1> 		; 【レジスタの復帰】
   266                              <1> 		;---------------------------------------
   267 00000A2E 61                  <1> 		popa
   268                              <1> 
   269                              <1> 		;---------------------------------------
   270                              <1> 		; 【スタックフレームの破棄】
   271                              <1> 		;---------------------------------------
   272 00000A2F 89EC                <1> 		mov		esp, ebp
   273 00000A31 5D                  <1> 		pop		ebp
   274                              <1> 
   275 00000A32 C3                  <1> 		ret
   276                              <1> 
   160                                  %include	"modules/int_timer.s"
   161                              <1> ;************************************************************************
   162                              <1> ;	例外:タイマー
   163                              <1> ;************************************************************************
   164                              <1> int_timer:
   165                              <1> 		;---------------------------------------
   166                              <1> 		; 【レジスタの保存】
   167                              <1> 		;---------------------------------------
   168 00000A33 60                  <1> 		pusha
   169 00000A34 1E                  <1> 		push	ds
   170 00000A35 06                  <1> 		push	es
   171                              <1> 
   172                              <1> 		;---------------------------------------
   173                              <1> 		; データ用セグメントの設定
   174                              <1> 		;---------------------------------------
   175 00000A36 66B81000            <1> 		mov		ax, 0x0010						; 
   176 00000A3A 8ED8                <1> 		mov		ds, ax							; 
   177 00000A3C 8EC0                <1> 		mov		es, ax							; 
   178                              <1> 
   179                              <1> 		;---------------------------------------
   180                              <1> 		; TICK
   181                              <1> 		;---------------------------------------
   182 00000A3E FF05[B40A0000]      <1> 		inc		dword [TIMER_COUNT]				; TIMER_COUNT++; // 割り込み回数の更新
   183                              <1> 
   184                              <1> 		;---------------------------------------
   185                              <1> 		; 割り込みフラグをクリア(EOI)
   186                              <1> 		;---------------------------------------
   187                              <1> 		outp	0x20, 0x20						; // マスタPIC:EOIコマンド
    72 00000A44 B020                <2>  mov al, %2
    73 00000A46 E620                <2>  out %1, al
   188                              <1> 
   189                              <1> 		;---------------------------------------
   190                              <1> 		; タスクの切り替え
   191                              <1> 		;---------------------------------------
   192 00000A48 660F00C8            <1> 		str		ax								; AX = TR; // 現在のタスクレジスタ
   193 00000A4C 6683F820            <1> 		cmp		ax, SS_TASK_0					; case (AX)
   194 00000A50 7427                <1> 		je		.11L							; {
   195 00000A52 6683F828            <1> 		cmp		ax, SS_TASK_1					;   
   196 00000A56 742A                <1> 		je		.12L							;   
   197 00000A58 6683F830            <1> 		cmp		ax, SS_TASK_2					;   
   198 00000A5C 742D                <1> 		je		.13L							;   
   199 00000A5E 6683F838            <1> 		cmp		ax, SS_TASK_3					;   
   200 00000A62 7430                <1> 		je		.14L							;   
   201 00000A64 6683F840            <1> 		cmp		ax, SS_TASK_4					;   
   202 00000A68 7433                <1> 		je		.15L							;   
   203 00000A6A 6683F848            <1> 		cmp		ax, SS_TASK_5					;   
   204 00000A6E 7436                <1> 		je		.16L							;   
   205                              <1> 												;   default:
   206 00000A70 EA000000002000      <1> 		jmp		SS_TASK_0:0						;     // タスク0に切り替え
   207 00000A77 EB36                <1> 		jmp		.10E							;     break;
   208                              <1> 												;     
   209                              <1> .11L:											;   case SS_TASK_0:
   210 00000A79 EA000000002800      <1> 		jmp		SS_TASK_1:0						;     // タスク1に切り替え
   211 00000A80 EB2D                <1> 		jmp		.10E							;     break;
   212                              <1> 												;     
   213                              <1> .12L:											;   case SS_TASK_1:
   214 00000A82 EA000000003000      <1> 		jmp		SS_TASK_2:0						;     // タスク2に切り替え
   215 00000A89 EB24                <1> 		jmp		.10E							;     break;
   216                              <1> 												;     
   217                              <1> .13L:											;   case SS_TASK_2:
   218 00000A8B EA000000003800      <1> 		jmp		SS_TASK_3:0						;     // タスク3に切り替え
   219 00000A92 EB1B                <1> 		jmp		.10E							;     break;
   220                              <1> 												;     
   221                              <1> .14L:											;   case SS_TASK_3:
   222 00000A94 EA000000004000      <1> 		jmp		SS_TASK_4:0						;     // タスク4に切り替え
   223 00000A9B EB12                <1> 		jmp		.10E							;     break;
   224                              <1> 												;     
   225                              <1> .15L:											;   case SS_TASK_4:
   226 00000A9D EA000000004800      <1> 		jmp		SS_TASK_5:0						;     // タスク5に切り替え
   227 00000AA4 EB09                <1> 		jmp		.10E							;     break;
   228                              <1> 												;     
   229                              <1> .16L:											;   case SS_TASK_5:
   230 00000AA6 EA000000005000      <1> 		jmp		SS_TASK_6:0						;     // タスク6に切り替え
   231 00000AAD EB00                <1> 		jmp		.10E							;     break;
   232                              <1> .10E:											; }
   233                              <1> 
   234                              <1> 		;---------------------------------------
   235                              <1> 		; 【レジスタの復帰】
   236                              <1> 		;---------------------------------------
   237 00000AAF 07                  <1> 		pop		es								; 
   238 00000AB0 1F                  <1> 		pop		ds								; 
   239 00000AB1 61                  <1> 		popa
   240                              <1> 
   241 00000AB2 CF                  <1> 		iret
   242                              <1> 
   243 00000AB3 00                  <1> ALIGN 4, db 0
   244 00000AB4 00000000            <1> TIMER_COUNT:	dd	0
   245                              <1> 
   161                                  %include	"modules/int_pf.s"
   162                              <1> ;************************************************************************
   163                              <1> ;	
   164                              <1> ;************************************************************************
   165                              <1> int_pf:
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 【スタックフレームの構築】
   168                              <1> 		;---------------------------------------
   169                              <1> 												; ------|--------
   170                              <1> 												; EBP+16| EFLAGS
   171                              <1> 												; EBP+12| CS
   172                              <1> 												; EBP+ 8| EIP（戻り番地）
   173 00000AB8 55                  <1> 		push	ebp								; EBP+ 4| エラーコード
   174 00000AB9 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   175                              <1> 												; ---------------
   176                              <1> 		;---------------------------------------
   177                              <1> 		; 【レジスタの保存】
   178                              <1> 		;---------------------------------------
   179 00000ABB 60                  <1> 		pusha									; 
   180 00000ABC 1E                  <1> 		push	ds								; 
   181 00000ABD 06                  <1> 		push	es								; 
   182                              <1> 
   183                              <1> 		;---------------------------------------
   184                              <1> 		; データ用セグメントの設定
   185                              <1> 		;---------------------------------------
   186 00000ABE 66B81000            <1> 		mov		ax, 0x0010						; 
   187 00000AC2 8ED8                <1> 		mov		ds, ax							; 
   188 00000AC4 8EC0                <1> 		mov		es, ax							; 
   189                              <1> 
   190                              <1> 		;---------------------------------------
   191                              <1> 		; 例外を生成したアドレスの確認
   192                              <1> 		;---------------------------------------
   193 00000AC6 0F20D0              <1> 		mov		eax, cr2						; // CR2
   194 00000AC9 2500F0FFFF          <1> 		and		eax, ~0x0FFF					; // 4Kバイト以内のアクセス
   195 00000ACE 3D00701000          <1> 		cmp		eax, 0x0010_7000				; ptr = アクセスアドレス;
   196 00000AD3 7521                <1> 		jne		.10F							; if (0x0010_7000 == ptr)
   197                              <1> 												; {
   198                              <1> 		;---------------------------------------
   199                              <1> 		; ページの有効化
   200                              <1> 		;---------------------------------------
   201 00000AD5 C7051C641000077010- <1> 		mov		[0x00106000 + 0x107 * 4], dword 0x00107007	; // ページの有効化
   201 00000ADE 00                  <1>
   202                              <1> 
   203                              <1> 		;---------------------------------------
   204                              <1> 		; 描画パラメータの設定
   205                              <1> 		;---------------------------------------
   206 00000ADF 6A4068[2C0D0000]68- <1> 		cdecl	memcpy, 0x0010_7000, DRAW_PARAM, rose_size	; 描画パラメータ：タスク3用
   206 00000AE7 00701000E8B00D0000- <1>
   206 00000AF0 6683C40C            <1>
   207                              <1> 												; }
   208 00000AF4 EB15                <1> 		jmp		.10E							; else
   209                              <1> .10F:											; {
   210                              <1> 		;---------------------------------------
   211                              <1> 		; スタックの調整
   212                              <1> 		;---------------------------------------
   213 00000AF6 83C404              <1> 		add		esp, 4							; pop es
   214 00000AF9 83C404              <1> 		add		esp, 4							; pop ds
   215 00000AFC 61                  <1> 		popa									; 
   216 00000AFD 5D                  <1> 		pop		ebp								; 
   217                              <1> 
   218                              <1> 		;---------------------------------------
   219                              <1> 		; タスク終了処理
   220                              <1> 		;---------------------------------------
   221 00000AFE 9C                  <1> 		pushf									; // EFLAGS
   222 00000AFF 0E                  <1> 		push	cs								; // CS
   223 00000B00 68[8F140000]        <1> 		push	int_stop						; // スタック表示処理
   224                              <1> 
   225 00000B05 B8[150B0000]        <1> 		mov		eax, .s0						; // 割り込み種別
   226 00000B0A CF                  <1> 		iret
   227                              <1> .10E:											; }
   228                              <1> 		;---------------------------------------
   229                              <1> 		; 【レジスタの復帰】
   230                              <1> 		;---------------------------------------
   231 00000B0B 07                  <1> 		pop		es								; 
   232 00000B0C 1F                  <1> 		pop		ds								; 
   233 00000B0D 61                  <1> 		popa									; 
   234                              <1> 
   235                              <1> 		;---------------------------------------
   236                              <1> 		; 【スタックフレームの破棄】
   237                              <1> 		;---------------------------------------
   238 00000B0E 89EC                <1> 		mov		esp, ebp
   239 00000B10 5D                  <1> 		pop		ebp
   240                              <1> 
   241                              <1> 		;---------------------------------------
   242                              <1> 		; エラーコードの破棄
   243                              <1> 		;---------------------------------------
   244 00000B11 83C404              <1> 		add		esp, 4							; // エラーコードの破棄
   245                              <1> 
   246 00000B14 CF                  <1> 		iret
   247                              <1> 
   248 00000B15 203C20504147452046- <1> .s0		db	" < PAGE FAULT > ", 0
   248 00000B1E 41554C54203E2000    <1>
   249                              <1> 
   162                                  %include	"tasks/task_1.s"
   163                              <1> ;************************************************************************
   164                              <1> ;	TASK-1
   165                              <1> ;************************************************************************
   166                              <1> task_1:
   167                              <1> 		;---------------------------------------
   168                              <1> 		; 文字列の表示
   169                              <1> 		;---------------------------------------
   170 00000B26 68[540B0000]6A076A- <1> 		cdecl	draw_str, 63, 0, 0x07, .s0		; draw_str();
   170 00000B2E 006A3FE81705000066- <1>
   170 00000B37 83C410              <1>
   171                              <1> 
   172                              <1> .10L:											; while (;;)
   173                              <1> 												; {
   174                              <1> 		;---------------------------------------
   175                              <1> 		; 時刻の表示
   176                              <1> 		;---------------------------------------
   177 00000B3A A1[A4020000]        <1> 		mov		eax, [RTC_TIME]					;   // 時刻の取得
   178 00000B3F 5068000700006A006A- <1> 		cdecl	draw_time, 72, 0, 0x0700, eax	;   // 時刻の表示
   178 00000B48 48E8710800006683C4- <1>
   178 00000B51 10                  <1>
   179                              <1> 
   180 00000B52 EBE6                <1> 		jmp		.10L							; }
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; データ
   184                              <1> 		;---------------------------------------
   185 00000B54 5461736B2D3100      <1> .s0		db	"Task-1", 0
   186                              <1> 
   163                                  %include	"tasks/task_2.s"
   164                              <1> 
   165                              <1> ;************************************************************************
   166                              <1> ;	TASK
   167                              <1> ;************************************************************************
   168                              <1> task_2:
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 文字列の表示
   171                              <1> 		;---------------------------------------
   172 00000B5B 68[1E0C0000]6A076A- <1> 		cdecl	draw_str, 63, 1, 0x07, .s0		; draw_str(.s0);
   172 00000B63 016A3FE8E204000066- <1>
   172 00000B6C 83C410              <1>
   173                              <1> 
   174                              <1> 		;---------------------------------------
   175                              <1> 		; 初期化
   176                              <1> 		;---------------------------------------
   177                              <1> 												; ---------+---------+---------|---------|---------|---------|
   178                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   179                              <1> 												; ---------+---------+---------|---------|---------|---------|
   180 00000B6F DB05[0C0C0000]      <1> 		fild	dword [.c1000]					;     1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   181 00000B75 D9EB                <1> 		fldpi									;       pi |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   182 00000B77 DA35[100C0000]      <1> 		fidiv	dword [.c180]					;   pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   183 00000B7D D9EB                <1> 		fldpi									;       pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   184 00000B7F DCC0                <1> 		fadd	st0, st0						;     2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   185 00000B81 D9EE                <1> 		fldz									;   θ = 0 |    2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
   186                              <1> 												; ---------+---------+---------|---------|---------|---------|
   187                              <1> 												;   θ = 0 |    2*pi |d=pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
   188                              <1> 												; ---------+---------+---------|---------|---------|---------|
   189                              <1> 
   190                              <1> 		;---------------------------------------
   191                              <1> 		; メインループ
   192                              <1> 		;---------------------------------------
   193                              <1> .10L:											; for ( ; ; )
   194                              <1> 												; {
   195                              <1> 		;---------------------------------------
   196                              <1> 		; sin(t)
   197                              <1> 		;---------------------------------------
   198                              <1> 												; ---------+---------+---------|---------|---------|---------|
   199                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   200                              <1> 												; ---------+---------+---------|---------|---------|---------|
   201                              <1> 												;       θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   202                              <1> 												; ---------+---------+---------|---------|---------|---------|
   203 00000B83 D8C2                <1> 		fadd	st0, st2						;   θ + d |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   204 00000B85 D9F8                <1> 		fprem									;   MOD(θ)|    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   205 00000B87 D9C0                <1> 		fld		st0								;       θ |      θ |    2*pi |       d |    1000 |xxxxxxxxx|
   206 00000B89 D9FE                <1> 		fsin									;   sin(θ)|      θ |    2*pi |       d |    1000 |xxxxxxxxx|
   207 00000B8B D8CC                <1> 		fmul	st0, st4						;ST4sin(θ)|      θ |    2*pi |       d |    1000 |xxxxxxxxx|
   208                              <1> 												; ---------+---------+---------|---------|---------|---------|
   209 00000B8D DF35[140C0000]      <1> 		fbstp	[.bcd]							;       θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   210                              <1> 												; ---------+---------+---------|---------|---------|---------|
   211                              <1> 
   212 00000B93 A1[140C0000]        <1> 		mov		eax, [.bcd]						;   EAX = 1000 * sin(t);
   213 00000B98 89C3                <1> 		mov		ebx, eax						;   EBX = EAX;
   214                              <1> 
   215 00000B9A 250F0F0000          <1> 		and		eax, 0x0F0F						;   // 上位4ビットをマスク
   216 00000B9F 0D30300000          <1> 		or		eax, 0x3030						;   // 上位4ビットに0x3を設定
   217                              <1> 
   218 00000BA4 C1EB04              <1> 		shr		ebx, 4							;   EBX >>= 4;
   219 00000BA7 81E30F0F0000        <1> 		and		ebx, 0x0F0F						;   // 上位4ビットをマスク
   220 00000BAD 81CB30300000        <1> 		or		ebx, 0x3030						;   // 上位4ビットに0x3を設定
   221                              <1> 
   222 00000BB3 883D[260C0000]      <1> 		mov		[.s2 + 0], bh					;   // 1桁目
   223 00000BB9 8825[280C0000]      <1> 		mov		[.s3 + 0], ah					;   // 小数1桁目
   224 00000BBF 881D[290C0000]      <1> 		mov		[.s3 + 1], bl					;   // 小数2桁目
   225 00000BC5 A2[2A0C0000]        <1> 		mov		[.s3 + 2], al					;   // 小数3桁目
   226                              <1> 
   227 00000BCA B807000000          <1> 		mov		eax, 7							;   // 符号の表示
   228 00000BCF 0FA305[1D0C0000]    <1> 		bt		[.bcd + 9], eax					;   CF = bcd[9] & 0x80;
   229 00000BD6 7209                <1> 		jc		.10F							;   if (CF)
   230                              <1> 												;   {
   231 00000BD8 C605[250C0000]2B    <1> 		mov		[.s1 + 0], byte '+'				;     *s1 = '+';
   232 00000BDF EB07                <1> 		jmp		.10E							;   }
   233                              <1> .10F:											;   else
   234                              <1> 												;   {
   235 00000BE1 C605[250C0000]2D    <1> 		mov		[.s1 + 0], byte '-'				;     *s1 = '-';
   236                              <1> .10E:											;   }
   237                              <1> 
   238 00000BE8 68[250C0000]6A076A- <1> 		cdecl	draw_str, 72, 1, 0x07, .s1		; draw_str(.s1);
   238 00000BF0 016A48E85504000066- <1>
   238 00000BF9 83C410              <1>
   239                              <1> 
   240                              <1> 		;---------------------------------------
   241                              <1> 		; ウェイト
   242                              <1> 		;---------------------------------------
   243 00000BFC 6A14E87F0C00006683- <1> 		cdecl	wait_tick, 20					;   wait_tick(20);
   243 00000C05 C404                <1>
   244                              <1> 
   245 00000C07 E977FFFFFF          <1> 		jmp		.10L							; }
   246                              <1> 
   247                              <1> 
   248                              <1> ALIGN 4, db 0
   249 00000C0C E8030000            <1> .c1000:		dd	1000
   250 00000C10 B4000000            <1> .c180:		dd	180
   251                              <1> 
   252 00000C14 00<rep Ah>          <1> .bcd:	times 10 db	0x00
   253                              <1> 
   254 00000C1E 5461736B2D3200      <1> .s0		db	"Task-2", 0
   255 00000C25 2D                  <1> .s1:	db	"-"
   256 00000C26 302E                <1> .s2:	db	"0."
   257 00000C28 30303000            <1> .s3:	db	"000", 0
   258                              <1> 
   164                                  %include	"tasks/task_3.s"
   165                              <1> ;************************************************************************
   166                              <1> ;	TASK
   167                              <1> ;************************************************************************
   168                              <1> task_3:
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 【スタックフレームの構築】
   171                              <1> 		;---------------------------------------
   172 00000C2C 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   173                              <1> 												; ---------------
   174 00000C2E 6A00                <1> 		push	dword 0							;    - 4| x0 = 0; // X座標原点
   175 00000C30 6A00                <1> 		push	dword 0							;    - 8| y0 = 0; // Y座標原点
   176 00000C32 6A00                <1> 		push	dword 0							;    -12| x  = 0; // X座標描画
   177 00000C34 6A00                <1> 		push	dword 0							;    -16| y  = 0; // Y座標描画
   178 00000C36 6A00                <1> 		push	dword 0							;    -20| r  = 0; // 角度
   179                              <1> 
   180                              <1> 		;---------------------------------------
   181                              <1> 		; 初期化
   182                              <1> 		;---------------------------------------
   183 00000C38 BE00701000          <1> 		mov		esi, 0x0010_7000				; ESI = 描画パラメータ
   184                              <1> 
   185                              <1> 		;---------------------------------------
   186                              <1> 		; タイトル表示
   187                              <1> 		;---------------------------------------
   188 00000C3D 8B06                <1> 		mov		eax, [esi + rose.x0]			; X0座標
   189 00000C3F 8B5E04              <1> 		mov		ebx, [esi + rose.y0]			; Y0座標
   190                              <1> 
   191 00000C42 C1E803              <1> 		shr		eax, 3							; EAX = EAX /  8; // X座標を文字位置に変換
   192 00000C45 C1EB04              <1> 		shr		ebx, 4							; EBX = EBX / 16; // Y座標を文字位置に変換
   193 00000C48 4B                  <1> 		dec		ebx								; // 1文字分上に移動
   194 00000C49 8B4E24              <1> 		mov		ecx, [esi + rose.color_s]		; 文字色
   195 00000C4C 8D5630              <1> 		lea		edx, [esi + rose.title]			; タイトル
   196                              <1> 
   197 00000C4F 52515350E8F5030000- <1> 		cdecl	draw_str, eax, ebx, ecx, edx	; draw_str();
   197 00000C58 6683C410            <1>
   198                              <1> 
   199                              <1> 		;---------------------------------------
   200                              <1> 		; X軸の中点
   201                              <1> 		;---------------------------------------
   202 00000C5C 8B06                <1> 		mov		eax, [esi + rose.x0]			; EAX  = X0座標
   203 00000C5E 8B5E08              <1> 		mov		ebx, [esi + rose.x1]			; EBX  = X1座標
   204 00000C61 29C3                <1> 		sub		ebx, eax						; EBX  = (X1 - X0);
   205 00000C63 D1EB                <1> 		shr		ebx, 1							; EBX /= 2;
   206 00000C65 01C3                <1> 		add		ebx, eax						; EBX += X0
   207 00000C67 895DFC              <1> 		mov		[ebp - 4], ebx					; x0 = EBX; // X座標原点;
   208                              <1> 
   209                              <1> 		;---------------------------------------
   210                              <1> 		; Y軸の中点
   211                              <1> 		;---------------------------------------
   212 00000C6A 8B4604              <1> 		mov		eax, [esi + rose.y0]			; EAX  = Y0座標
   213 00000C6D 8B5E0C              <1> 		mov		ebx, [esi + rose.y1]			; EBX  = Y1座標
   214 00000C70 29C3                <1> 		sub		ebx, eax						; EBX  = (Y1 - Y0);
   215 00000C72 D1EB                <1> 		shr		ebx, 1							; EBX /= 2;
   216 00000C74 01C3                <1> 		add		ebx, eax						; EBX += Y0
   217 00000C76 895DF8              <1> 		mov		[ebp - 8], ebx					; y0 = EBX; // Y座標原点;
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; X軸の描画
   221                              <1> 		;---------------------------------------
   222 00000C79 8B06                <1> 		mov		eax, [esi + rose.x0]			; EAX = X0座標;
   223 00000C7B 8B5DF8              <1> 		mov		ebx, [ebp - 8]					; EBX = Y軸の中点;
   224 00000C7E 8B4E08              <1> 		mov		ecx, [esi + rose.x1]			; ECX = X1座標;
   225                              <1> 
   226 00000C81 FF761853515350E853- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]	; X軸
   226 00000C8A 0500006683C414      <1>
   227                              <1> 
   228                              <1> 		;---------------------------------------
   229                              <1> 		; Y軸の描画
   230                              <1> 		;---------------------------------------
   231 00000C91 8B4604              <1> 		mov		eax, [esi + rose.y0]			; Y0座標
   232 00000C94 8B5DFC              <1> 		mov		ebx, [ebp - 4]					; EBX = X軸の中点;
   233 00000C97 8B4E0C              <1> 		mov		ecx, [esi + rose.y1]			; Y1座標
   234                              <1> 
   235 00000C9A FF761C51535053E83A- <1> 		cdecl	draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]	; Y軸
   235 00000CA3 0500006683C414      <1>
   236                              <1> 
   237                              <1> 		;---------------------------------------
   238                              <1> 		; 枠の描画
   239                              <1> 		;---------------------------------------
   240 00000CAA 8B06                <1> 		mov		eax, [esi + rose.x0]			; X0座標
   241 00000CAC 8B5E04              <1> 		mov		ebx, [esi + rose.y0]			; Y0座標
   242 00000CAF 8B4E08              <1> 		mov		ecx, [esi + rose.x1]			; X1座標
   243 00000CB2 8B560C              <1> 		mov		edx, [esi + rose.y1]			; Y1座標
   244                              <1> 
   245 00000CB5 FF762052515350E8CE- <1> 		cdecl	draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]	; 枠
   245 00000CBE 0500006683C414      <1>
   246                              <1> 
   247                              <1> 		;---------------------------------------
   248                              <1> 		; 振幅をX軸の約95%とする
   249                              <1> 		;---------------------------------------
   250 00000CC5 8B4608              <1> 		mov		eax, [esi + rose.x1]			; EAX  = X1座標;
   251 00000CC8 2B06                <1> 		sub		eax, [esi + rose.x0]			; EAX -= X0座標;
   252 00000CCA D1E8                <1> 		shr		eax, 1							; EAX /= 2;      // 半分
   253 00000CCC 89C3                <1> 		mov		ebx, eax						; EBX  = EAX;
   254 00000CCE C1EB04              <1> 		shr		ebx, 4							; EBX /= 16;
   255 00000CD1 29D8                <1> 		sub		eax, ebx						; EAX -= EBX;
   256                              <1> 
   257                              <1> 		;---------------------------------------
   258                              <1> 		; FPUの初期化(バラ曲線の初期化)
   259                              <1> 		;---------------------------------------
   260 00000CD3 FF7614FF761050E84D- <1> 		cdecl	fpu_rose_init										, eax											, dword [esi + rose.n]							, dword [esi + rose.d]
   260 00000CDC 0100006683C40C      <1>
   264                              <1> 
   265                              <1> 		;---------------------------------------
   266                              <1> 		; メインループ
   267                              <1> 		;---------------------------------------
   268                              <1> .10L:											; for ( ; ; )
   269                              <1> 												; {
   270                              <1> 		;---------------------------------------
   271                              <1> 		; 座標計算
   272                              <1> 		;---------------------------------------
   273 00000CE3 8D5DF4              <1> 		lea		ebx, [ebp -12]					;   EBX = &x;
   274 00000CE6 8D4DF0              <1> 		lea		ecx, [ebp -16]					;   ECX = &y;
   275 00000CE9 8B45EC              <1> 		mov		eax, [ebp -20]					;   EAX = r;
   276                              <1> 
   277 00000CEC 505153E85201000066- <1> 		cdecl	fpu_rose_update										, ebx											, ecx											, eax
   277 00000CF5 83C40C              <1>
   281                              <1> 
   282                              <1> 		;---------------------------------------
   283                              <1> 		; 角度更新(r = r % 36000)
   284                              <1> 		;---------------------------------------
   285 00000CF8 BA00000000          <1> 		mov		edx, 0							;   EDX = 0;
   286 00000CFD 40                  <1> 		inc		eax								;   EAX++;
   287 00000CFE BBA08C0000          <1> 		mov		ebx, 360 * 100					;   DBX = 36000
   288 00000D03 F7F3                <1> 		div		ebx								;   EDX = EDX:EAX % EBX;
   289 00000D05 8955EC              <1> 		mov		[ebp -20], edx
   290                              <1> 
   291                              <1> 		;---------------------------------------
   292                              <1> 		; ドット描画
   293                              <1> 		;---------------------------------------
   294 00000D08 8B4DF4              <1> 		mov		ecx, [ebp -12]					;   ECX = X座標
   295 00000D0B 8B55F0              <1> 		mov		edx, [ebp -16]					;   ECX = Y座標
   296                              <1> 
   297 00000D0E 034DFC              <1> 		add		ecx, [ebp - 4]					;   ECX += X座標原点;
   298 00000D11 0355F8              <1> 		add		edx, [ebp - 8]					;   EDX += Y座標原点;
   299                              <1> 
   300 00000D14 8B5E28              <1> 		mov		ebx, [esi + rose.color_f]		;   EBX = 表示色;
   301 00000D17 CD82                <1> 		int		0x82							;   sys_call_82(表示色, X, Y);
   302                              <1> 
   303                              <1> 		;---------------------------------------
   304                              <1> 		; ウェイト
   305                              <1> 		;---------------------------------------
   306 00000D19 6A02E8620B00006683- <1> 		cdecl	wait_tick, 2					;   wait_tick(2);
   306 00000D22 C404                <1>
   307                              <1> 
   308                              <1> 		;---------------------------------------
   309                              <1> 		; ドット描画(消去)
   310                              <1> 		;---------------------------------------
   311 00000D24 8B5E2C              <1> 		mov		ebx, [esi + rose.color_b]		;   EBX = 背景色;
   312 00000D27 CD82                <1> 		int		0x82							;   sys_call_82(背景色, X, Y);
   313                              <1> 
   314                              <1> 
   315 00000D29 EBB8                <1>         jmp     .10L                            ; }
   316                              <1> 
   317                              <1> 
   318 00000D2B 00                  <1> ALIGN 4, db 0
   319                              <1> DRAW_PARAM:										; 描画パラメータ
   320                              <1> .t3:
   321                              <1> 	istruc	rose
   322 00000D2C 20000000            <1> 		at	rose.x0,		dd		 32			; 左上座標：X0
   323 00000D30 20000000            <1> 		at	rose.y0,		dd		 32			; 左上座標：Y0
   324 00000D34 D0000000            <1> 		at	rose.x1,		dd		208			; 右下座標：X1
   325 00000D38 D0000000            <1> 		at	rose.y1,		dd		208			; 右下座標：Y1
   326                              <1> 
   327 00000D3C 02000000            <1> 		at	rose.n,			dd		2			; 変数：n
   328 00000D40 01000000            <1> 		at	rose.d,			dd		1			; 変数：d
   329                              <1> 
   330 00000D44 07000000            <1> 		at	rose.color_x,	dd		0x0007		; 描画色：X軸
   331 00000D48 07000000            <1> 		at	rose.color_y,	dd		0x0007		; 描画色：Y軸
   332 00000D4C 0F000000            <1> 		at	rose.color_z,	dd		0x000F		; 描画色：枠
   333 00000D50 0F030000            <1> 		at	rose.color_s,	dd		0x030F		; 描画色：文字
   334 00000D54 0F000000            <1> 		at	rose.color_f,	dd		0x000F		; 描画色：グラフ描画色
   335 00000D58 03000000            <1> 		at	rose.color_b,	dd		0x0003		; 描画色：グラフ消去色
   336                              <1> 
   337 00000D5C 5461736B2D3300      <1> 		at	rose.title,		db		"Task-3", 0	; タイトル
   338 00000D63 00<rep 9h>          <1> 	iend
   339                              <1> 
   340                              <1> .t4:
   341                              <1> 	istruc	rose
   342 00000D6C F8000000            <1> 		at	rose.x0,		dd		248			; 左上座標：X0
   343 00000D70 20000000            <1> 		at	rose.y0,		dd		 32			; 左上座標：Y0
   344 00000D74 A8010000            <1> 		at	rose.x1,		dd		424			; 右下座標：X1
   345 00000D78 D0000000            <1> 		at	rose.y1,		dd		208			; 右下座標：Y1
   346                              <1> 
   347 00000D7C 03000000            <1> 		at	rose.n,			dd		3			; 変数：n
   348 00000D80 01000000            <1> 		at	rose.d,			dd		1			; 変数：d
   349                              <1> 
   350 00000D84 07000000            <1> 		at	rose.color_x,	dd		0x0007		; 描画色：X軸
   351 00000D88 07000000            <1> 		at	rose.color_y,	dd		0x0007		; 描画色：Y軸
   352 00000D8C 0F000000            <1> 		at	rose.color_z,	dd		0x000F		; 描画色：枠
   353 00000D90 0F040000            <1> 		at	rose.color_s,	dd		0x040F		; 描画色：文字
   354 00000D94 0F000000            <1> 		at	rose.color_f,	dd		0x000F		; 描画色：グラフ描画色
   355 00000D98 04000000            <1> 		at	rose.color_b,	dd		0x0004		; 描画色：グラフ消去色
   356                              <1> 
   357 00000D9C 5461736B2D3400      <1> 		at	rose.title,		db		"Task-4", 0	; タイトル
   358 00000DA3 00<rep 9h>          <1> 	iend
   359                              <1> 
   360                              <1> .t5:
   361                              <1> 	istruc	rose
   362 00000DAC 20000000            <1> 		at	rose.x0,		dd		 32			; 左上座標：X0
   363 00000DB0 10010000            <1> 		at	rose.y0,		dd		272			; 左上座標：Y0
   364 00000DB4 D0000000            <1> 		at	rose.x1,		dd		208			; 右下座標：X1
   365 00000DB8 C0010000            <1> 		at	rose.y1,		dd		448			; 右下座標：Y1
   366                              <1> 
   367 00000DBC 02000000            <1> 		at	rose.n,			dd		2			; 変数：n
   368 00000DC0 06000000            <1> 		at	rose.d,			dd		6			; 変数：d
   369                              <1> 
   370 00000DC4 07000000            <1> 		at	rose.color_x,	dd		0x0007		; 描画色：X軸
   371 00000DC8 07000000            <1> 		at	rose.color_y,	dd		0x0007		; 描画色：Y軸
   372 00000DCC 0F000000            <1> 		at	rose.color_z,	dd		0x000F		; 描画色：枠
   373 00000DD0 0F050000            <1> 		at	rose.color_s,	dd		0x050F		; 描画色：文字
   374 00000DD4 0F000000            <1> 		at	rose.color_f,	dd		0x000F		; 描画色：グラフ描画色
   375 00000DD8 05000000            <1> 		at	rose.color_b,	dd		0x0005		; 描画色：グラフ消去色
   376                              <1> 
   377 00000DDC 5461736B2D3500      <1> 		at	rose.title,		db		"Task-5", 0	; タイトル
   378 00000DE3 00<rep 9h>          <1> 	iend
   379                              <1> 
   380                              <1> .t6:
   381                              <1> 	istruc	rose
   382 00000DEC F8000000            <1> 		at	rose.x0,		dd		248			; 左上座標：X0
   383 00000DF0 10010000            <1> 		at	rose.y0,		dd		272			; 左上座標：Y0
   384 00000DF4 A8010000            <1> 		at	rose.x1,		dd		424			; 右下座標：X1
   385 00000DF8 C0010000            <1> 		at	rose.y1,		dd		448			; 右下座標：Y1
   386                              <1> 
   387 00000DFC 04000000            <1> 		at	rose.n,			dd		4			; 変数：n
   388 00000E00 06000000            <1> 		at	rose.d,			dd		6			; 変数：d
   389                              <1> 
   390 00000E04 07000000            <1> 		at	rose.color_x,	dd		0x0007		; 描画色：X軸
   391 00000E08 07000000            <1> 		at	rose.color_y,	dd		0x0007		; 描画色：Y軸
   392 00000E0C 0F000000            <1> 		at	rose.color_z,	dd		0x000F		; 描画色：枠
   393 00000E10 0F060000            <1> 		at	rose.color_s,	dd		0x060F		; 描画色：文字
   394 00000E14 0F000000            <1> 		at	rose.color_f,	dd		0x000F		; 描画色：グラフ描画色
   395 00000E18 06000000            <1> 		at	rose.color_b,	dd		0x0006		; 描画色：グラフ消去色
   396                              <1> 
   397 00000E1C 5461736B2D3600      <1> 		at	rose.title,		db		"Task-6", 0	; タイトル
   398 00000E23 00<rep 9h>          <1> 	iend
   399                              <1> 
   400                              <1> 
   401                              <1> 
   402                              <1> 
   403                              <1> ;************************************************************************
   404                              <1> ;	バラ曲線：初期化
   405                              <1> ;------------------------------------------------------------------------
   406                              <1> ;	バラ曲線を描画するためにFPUのレジスタを初期化する
   407                              <1> ;
   408                              <1> ;	Z = A * sin(nθ)
   409                              <1> ;	  = A * sin( (n/d) * ((π/180) * t) )
   410                              <1> ;
   411                              <1> ;	このグラフを描画するために、X/Y座標を次の様に計算する
   412                              <1> ;
   413                              <1> ;	x = A * sin(nθ) * cos(θ)
   414                              <1> ;	y = A * sin(nθ) * sin(θ)
   415                              <1> ;
   416                              <1> ;	この時、kは(n / d)で指定する。また、ラディアン = 度 * (π / 180)
   417                              <1> ;	である事から、r = π / 180を先に計算しておく
   418                              <1> ;========================================================================
   419                              <1> ;■書式		: void fpu_rose_init(A, n, d);
   420                              <1> ;
   421                              <1> ;■引数
   422                              <1> ;	DWORD	: A
   423                              <1> ;	DWORD	: n
   424                              <1> ;	DWORD	: d
   425                              <1> ;
   426                              <1> ;■戻り値	: 無し
   427                              <1> ;************************************************************************
   428                              <1> fpu_rose_init:
   429                              <1> 		;---------------------------------------
   430                              <1> 		; 【スタックフレームの構築】
   431                              <1> 		;---------------------------------------
   432                              <1> 												; ------|--------
   433                              <1> 												;    +16| d
   434                              <1> 												;    +12| n
   435                              <1> 												;    + 8| A
   436                              <1> 												; ---------------
   437 00000E2C 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   438 00000E2D 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   439                              <1> 												; ---------------
   440 00000E2F 68B4000000          <1> 		push	dword 180						;    - 4| dword i = 180;
   441                              <1> 
   442                              <1> 		;---------------------------------------
   443                              <1> 		; FPUを使った処理
   444                              <1> 		;
   445                              <1> 		; A(振幅), k(n/d),r(度→ラディアン)を
   446                              <1> 		; FPU内のレジスタにスタックしておく
   447                              <1> 		;---------------------------------------
   448                              <1> 												; ---------+---------+---------|---------|---------|---------|
   449                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   450                              <1> 												; ---------+---------+---------|---------|---------|---------|
   451 00000E34 D9EB                <1> 		fldpi									;   pi     |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   452 00000E36 DA75FC              <1> 		fidiv	dword [ebp - 4]					;   pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   453 00000E39 DB450C              <1> 		fild	dword [ebp +12]					;        n |  pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   454 00000E3C DA7510              <1> 		fidiv	dword [ebp +16]					;      n/d |         |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   455 00000E3F DB4508              <1> 		fild	dword [ebp + 8]					;        A |     n/d |  pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   456                              <1> 												; ---------+---------+---------|---------|---------|---------|
   457                              <1> 												;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   458                              <1> 												; ---------+---------+---------|---------|---------|---------|
   459                              <1> 		;---------------------------------------
   460                              <1> 		; スタックフレームの破棄
   461                              <1> 		;---------------------------------------
   462 00000E42 89EC                <1> 		mov		esp, ebp
   463 00000E44 5D                  <1> 		pop		ebp
   464                              <1> 
   465 00000E45 C3                  <1> 		ret
   466                              <1> 
   467                              <1> ;************************************************************************
   468                              <1> ;	バラ曲線：計算
   469                              <1> ;------------------------------------------------------------------------
   470                              <1> ;	角度を引数として受け取り、座標を計算する。
   471                              <1> ;	（他のパラメータはFPUレジスタに設定済みと仮定）
   472                              <1> ;========================================================================
   473                              <1> ;■書式		: void fpu_rose_update(t, X, Y);
   474                              <1> ;
   475                              <1> ;■引数
   476                              <1> ;	DWORD	: 角度[度]
   477                              <1> ;	DWORD	: Y座標へのポインタ
   478                              <1> ;	DWORD	: X座標へのポインタ
   479                              <1> ;
   480                              <1> ;■戻り値	: 無し
   481                              <1> ;************************************************************************
   482                              <1> fpu_rose_update:
   483                              <1> 		;---------------------------------------
   484                              <1> 		; 【スタックフレームの構築】
   485                              <1> 		;---------------------------------------
   486                              <1> 												; ---------------
   487                              <1> 												; EBP+16| t(角度)
   488                              <1> 												; EBP+12| Y(float)
   489                              <1> 												; EBP+ 8| X(float)
   490                              <1> 												; ---------------
   491 00000E46 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   492 00000E47 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   493                              <1> 												; ------|--------
   494                              <1> 
   495                              <1> 		;---------------------------------------
   496                              <1> 		; 【レジスタの保存】
   497                              <1> 		;---------------------------------------
   498 00000E49 50                  <1> 		push	eax
   499 00000E4A 53                  <1> 		push	ebx
   500                              <1> 
   501                              <1> 		;---------------------------------------
   502                              <1> 		; X/Yの保存先を設定
   503                              <1> 		;---------------------------------------
   504 00000E4B 8B4508              <1> 		mov		eax, [ebp +  8]					; EAX = pX; // X座標へのポインタ
   505 00000E4E 8B5D0C              <1> 		mov		ebx, [ebp + 12]					; EBX = pY; // Y座標へのポインタ
   506                              <1> 
   507                              <1> 		;---------------------------------------
   508                              <1> 		; FPUを使った処理
   509                              <1> 		; 
   510                              <1> 		; 既にスタックしてある値を元に
   511                              <1> 		; t(角度)から座標を計算する
   512                              <1> 		;---------------------------------------
   513                              <1> 												; ---------+---------+---------|---------|---------|---------|
   514                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   515                              <1> 												; ---------+---------+---------|---------|---------|---------|
   516 00000E51 DB4510              <1> 		fild	dword [ebp +16]					;        t |       A |       k |       r |xxxxxxxxx|xxxxxxxxx|
   517 00000E54 D8CB                <1> 		fmul	st0, st3						;       rt |         |         |         |         |         |
   518 00000E56 D9C0                <1> 		fld		st0								;       rt |      rt |       A |       k |       r |xxxxxxxxx|
   519                              <1> 												; ---------+---------+---------|---------|---------|---------|
   520                              <1> 		; rt を θと置き換える					;       θ |      θ |       A |       k |       r |         |
   521                              <1> 												; ---------+---------+---------|---------|---------|---------|
   522 00000E58 D9FB                <1> 		fsincos									;   cos(θ)|  sin(θ)|      θ |       A |       k |       r |
   523 00000E5A D9CA                <1> 		fxch	st2								;       θ |         |  cos(θ)|         |         |         |
   524 00000E5C D8CC                <1> 		fmul	st0, st4						;      kθ |         |         |         |         |         |
   525 00000E5E D9FE                <1> 		fsin									;  sin(kθ)|         |         |         |         |         |
   526 00000E60 D8CB                <1> 		fmul	st0, st3						; Asin(kθ)|         |         |         |         |         |
   527                              <1> 												; ---------+---------+---------|---------|---------|---------|
   528                              <1> 												; Asin(kθ)|  sin(θ)|  cos(θ)|       A |       k |       r |
   529                              <1> 												; ---------+---------+---------|---------|---------|---------|
   530                              <1> 		;---------------------------------------
   531                              <1> 		; x =  A * sin(kθ) * cos(θ);
   532                              <1> 		;---------------------------------------
   533                              <1> 												; ---------+---------+---------|---------|---------|---------|
   534                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   535                              <1> 												; ---------+---------+---------|---------|---------|---------|
   536                              <1> 												; Asin(kθ)|  sin(θ)|  cos(θ)|       A |       k |       r |
   537 00000E62 D9CA                <1> 		fxch	st2								;   cos(θ)|         |Asin(kθ)|         |         |         |
   538 00000E64 D8CA                <1> 		fmul	st0, st2						;        x |         |         |         |         |         |
   539 00000E66 DB18                <1> 		fistp	dword [eax]						;   sin(θ)|Asin(kθ)|       A |       k |       r |xxxxxxxxx|
   540                              <1> 												; ---------+---------+---------|---------|---------|---------|
   541                              <1> 		;---------------------------------------
   542                              <1> 		; y = -A * sin(kθ) * sin(θ);
   543                              <1> 		;---------------------------------------
   544                              <1> 												; ---------+---------+---------|---------|---------|---------|
   545                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   546                              <1> 												; ---------+---------+---------|---------|---------|---------|
   547                              <1> 												;   sin(θ)|Asin(kθ)|       A |       k |       r |xxxxxxxxx|
   548 00000E68 DEC9                <1> 		fmulp	st1, st0						;        y |       A |       k |       r |xxxxxxxxx|xxxxxxxxx|
   549 00000E6A D9E0                <1> 		fchs									;       -y |         |         |         |xxxxxxxxx|xxxxxxxxx|
   550 00000E6C DB1B                <1> 		fistp	dword [ebx]						;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   551                              <1> 												; ---------+---------+---------|---------|---------|---------|
   552                              <1> 		;---------------------------------------
   553                              <1> 		; レジスタの復帰
   554                              <1> 		;---------------------------------------
   555 00000E6E 5B                  <1> 		pop		ebx
   556 00000E6F 58                  <1> 		pop		eax
   557                              <1> 
   558                              <1> 		;---------------------------------------
   559                              <1> 		; スタックフレームの破棄
   560                              <1> 		;---------------------------------------
   561 00000E70 89EC                <1> 		mov		esp, ebp
   562 00000E72 5D                  <1> 		pop		ebp
   563                              <1> 
   564 00000E73 C3                  <1> 		ret
   565                              <1> 
   165                                  
   166                                  ;************************************************************************
   167                                  ;	モジュール
   168                                  ;************************************************************************
   169                                  %include	"../modules/protect/vga.s"
   170                              <1> ;************************************************************************
   171                              <1> ;	読み込みプレーンの選択
   172                              <1> ;========================================================================
   173                              <1> ;■書式		: void vga_set_read_plane(plane);
   174                              <1> ;
   175                              <1> ;■引数
   176                              <1> ;	plane	: 読み込みプレーン
   177                              <1> ;
   178                              <1> ;■戻り値	: 無し
   179                              <1> ;************************************************************************
   180                              <1> vga_set_read_plane:
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 【スタックフレームの構築】
   183                              <1> 		;---------------------------------------
   184                              <1> 												; EBP+ 8| プレーン（インデックス）
   185                              <1> 												; ------+----------------
   186 00000E74 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   187 00000E75 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   188                              <1> 												; ------+----------------
   189                              <1> 
   190                              <1> 		;---------------------------------------
   191                              <1> 		; 【レジスタの保存】
   192                              <1> 		;---------------------------------------
   193 00000E77 50                  <1> 		push	eax
   194 00000E78 52                  <1> 		push	edx
   195                              <1> 
   196                              <1> 		;---------------------------------------
   197                              <1> 		; 読み込みプレーンの選択
   198                              <1> 		;---------------------------------------
   199 00000E79 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
   200 00000E7C 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
   201 00000E7F B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
   202 00000E81 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
   203 00000E85 66EF                <1> 		out		dx, ax							; // ポート出力
   204                              <1> 
   205                              <1> 		;---------------------------------------
   206                              <1> 		; 【レジスタの復帰】
   207                              <1> 		;---------------------------------------
   208 00000E87 5A                  <1> 		pop		edx
   209 00000E88 58                  <1> 		pop		eax
   210                              <1> 
   211                              <1> 		;---------------------------------------
   212                              <1> 		; 【スタックフレームの破棄】
   213                              <1> 		;---------------------------------------
   214 00000E89 89EC                <1> 		mov		esp, ebp
   215 00000E8B 5D                  <1> 		pop		ebp
   216                              <1> 
   217 00000E8C C3                  <1> 		ret
   218                              <1> 
   219                              <1> 
   220                              <1> ;************************************************************************
   221                              <1> ;	書き込みプレーンを選択
   222                              <1> ;========================================================================
   223                              <1> ;■書式		: void vga_set_write_plane(plane);
   224                              <1> ;
   225                              <1> ;■引数
   226                              <1> ;	plane	: 書き込みプレーン
   227                              <1> ;
   228                              <1> ;■戻り値	: 無し
   229                              <1> ;************************************************************************
   230                              <1> vga_set_write_plane:
   231                              <1> 		;---------------------------------------
   232                              <1> 		; 【スタックフレームの構築】
   233                              <1> 		;---------------------------------------
   234                              <1> 												; EBP+ 8| プレーン（ビット指定）
   235                              <1> 												; ------+----------------
   236 00000E8D 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   237 00000E8E 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   238                              <1> 												; ------+----------------
   239                              <1> 
   240                              <1> 		;---------------------------------------
   241                              <1> 		; 【レジスタの保存】
   242                              <1> 		;---------------------------------------
   243 00000E90 50                  <1> 		push	eax
   244 00000E91 52                  <1> 		push	edx
   245                              <1> 
   246                              <1> 		;---------------------------------------
   247                              <1> 		; 書き込みプレーンの選択
   248                              <1> 		;---------------------------------------
   249 00000E92 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
   250 00000E95 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
   251 00000E98 B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
   252 00000E9A 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
   253 00000E9E 66EF                <1> 		out		dx, ax							; // ポート出力
   254                              <1> 
   255                              <1> 		;---------------------------------------
   256                              <1> 		; 【レジスタの復帰】
   257                              <1> 		;---------------------------------------
   258 00000EA0 5A                  <1> 		pop		edx
   259 00000EA1 58                  <1> 		pop		eax
   260                              <1> 
   261                              <1> 		;---------------------------------------
   262                              <1> 		; 【スタックフレームの破棄】
   263                              <1> 		;---------------------------------------
   264 00000EA2 89EC                <1> 		mov		esp, ebp
   265 00000EA4 5D                  <1> 		pop		ebp
   266                              <1> 
   267 00000EA5 C3                  <1> 		ret
   268                              <1> 
   269                              <1> 
   270                              <1> ;************************************************************************
   271                              <1> ;	フォントの書き込み
   272                              <1> ;========================================================================
   273                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   274                              <1> ;
   275                              <1> ;■引数
   276                              <1> ;	font	: FONTアドレス
   277                              <1> ;	vram	: VRAMアドレス
   278                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   279                              <1> ;	color	: 描画色
   280                              <1> ;
   281                              <1> ;■戻り値	: 無し
   282                              <1> ;************************************************************************
   283                              <1> vram_font_copy:
   284                              <1> 		;---------------------------------------
   285                              <1> 		; 【スタックフレームの構築】
   286                              <1> 		;---------------------------------------
   287                              <1> 												; EBP+20| 色（背景/前景色）
   288                              <1> 												; EBP+16| プレーン（ビット指定）
   289                              <1> 												; EBP+12| VRAMアドレス
   290                              <1> 												; EBP+ 8| FONTアドレス
   291                              <1> 												; ------+----------------
   292 00000EA6 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   293 00000EA7 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   294                              <1> 												; ------+----------------
   295                              <1> 
   296                              <1> 		;---------------------------------------
   297                              <1> 		; 【レジスタの保存】
   298                              <1> 		;---------------------------------------
   299 00000EA9 50                  <1> 		push	eax
   300 00000EAA 53                  <1> 		push	ebx
   301 00000EAB 51                  <1> 		push	ecx
   302 00000EAC 52                  <1> 		push	edx
   303 00000EAD 56                  <1> 		push	esi
   304 00000EAE 57                  <1> 		push	edi
   305                              <1> 
   306                              <1> 		;---------------------------------------
   307                              <1> 		; 【処理の開始】
   308                              <1> 		;---------------------------------------
   309 00000EAF 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   310 00000EB2 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   311 00000EB5 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   312 00000EB9 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   313                              <1> 
   314 00000EBD 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   315 00000EBF 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   316 00000EC2 FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   317                              <1> 
   318 00000EC4 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   319 00000EC6 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   320 00000EC9 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   321                              <1> 
   322                              <1> 		;---------------------------------------
   323                              <1> 		; 16ドットフォントのコピー
   324                              <1> 		;---------------------------------------
   325 00000ECB FC                  <1> 		cld										; DF  = 0; // アドレス加算
   326                              <1> 
   327 00000ECC B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   328                              <1> .10L:											; do
   329                              <1> 												; {
   330                              <1> 		;---------------------------------------
   331                              <1> 		; フォントマスクの作成
   332                              <1> 		;---------------------------------------
   333 00000ED1 AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   334 00000ED2 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   335 00000ED4 F6D4                <1> 		not		ah								;   
   336                              <1> 
   337                              <1> 		;---------------------------------------
   338                              <1> 		; 前景色
   339                              <1> 		;---------------------------------------
   340 00000ED6 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   341                              <1> 
   342                              <1> 		;---------------------------------------
   343                              <1> 		; 背景色
   344                              <1> 		;---------------------------------------
   345 00000ED8 F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   346 00000EDE 7404                <1> 		jz		.11F							;   {
   347 00000EE0 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   348 00000EE2 EB02                <1> 		jmp		.11E							;   }
   349                              <1> .11F:											;   else
   350                              <1> 												;   {
   351 00000EE4 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   352                              <1> .11E:											;   }
   353                              <1> 
   354                              <1> 		;---------------------------------------
   355                              <1> 		; 前景色と背景色を合成
   356                              <1> 		;---------------------------------------
   357 00000EE6 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   358                              <1> 
   359                              <1> 		;---------------------------------------
   360                              <1> 		; 新しい値を出力
   361                              <1> 		;---------------------------------------
   362 00000EE8 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   363                              <1> 
   364 00000EEA 83C750              <1> 		add		edi, 80							;   EDI += 80;
   365 00000EED E2E2                <1> 		loop	.10L							; } while (--ECX);
   366                              <1> .10E:											; 
   367                              <1> 
   368                              <1> 		;---------------------------------------
   369                              <1> 		; 【レジスタの復帰】
   370                              <1> 		;---------------------------------------
   371 00000EEF 5F                  <1> 		pop		edi
   372 00000EF0 5E                  <1> 		pop		esi
   373 00000EF1 5A                  <1> 		pop		edx
   374 00000EF2 59                  <1> 		pop		ecx
   375 00000EF3 5B                  <1> 		pop		ebx
   376 00000EF4 58                  <1> 		pop		eax
   377                              <1> 
   378                              <1> 		;---------------------------------------
   379                              <1> 		; 【スタックフレームの破棄】
   380                              <1> 		;---------------------------------------
   381 00000EF5 89EC                <1> 		mov		esp, ebp
   382 00000EF7 5D                  <1> 		pop		ebp
   383                              <1> 
   384 00000EF8 C3                  <1> 		ret
   385                              <1> 
   386                              <1> 
   387                              <1> ;************************************************************************
   388                              <1> ;	ビットパターンの書き込み
   389                              <1> ;========================================================================
   390                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   391                              <1> ;
   392                              <1> ;■引数
   393                              <1> ;	bit		: 出力ビットパターン
   394                              <1> ;	vram	: VRAMアドレス
   395                              <1> ;	flag	: 1:セット, 0:クリア
   396                              <1> ;
   397                              <1> ;■戻り値	: 無し
   398                              <1> ;************************************************************************
   399                              <1> vram_bit_copy:
   400                              <1> 		;---------------------------------------
   401                              <1> 		; 【スタックフレームの構築】
   402                              <1> 		;---------------------------------------
   403                              <1> 												; EBP+20| 色（背景/前景色）
   404                              <1> 												; EBP+16| プレーン（ビット指定）
   405                              <1> 												; EBP+12| VRAMアドレス
   406                              <1> 												; EBP+ 8| 出力ビットパターン
   407                              <1> 												; ------+----------------
   408 00000EF9 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   409 00000EFA 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   410                              <1> 												; ------+----------------
   411                              <1> 
   412                              <1> 		;---------------------------------------
   413                              <1> 		; 【レジスタの保存】
   414                              <1> 		;---------------------------------------
   415 00000EFC 50                  <1> 		push	eax
   416 00000EFD 53                  <1> 		push	ebx
   417 00000EFE 57                  <1> 		push	edi
   418                              <1> 
   419                              <1> 		;---------------------------------------
   420                              <1> 		; 【処理の開始】
   421                              <1> 		;---------------------------------------
   422 00000EFF 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   423 00000F02 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   424 00000F06 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   425                              <1> 
   426 00000F0A 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   427 00000F0C 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   428 00000F0F FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   429                              <1> 
   430                              <1> 		;---------------------------------------
   431                              <1> 		; マスクデータの作成
   432                              <1> 		;---------------------------------------
   433 00000F11 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   434 00000F14 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   435 00000F16 F6D4                <1> 		not		ah								; 
   436                              <1> 
   437                              <1> 		;---------------------------------------
   438                              <1> 		; 現在値の出力を取得
   439                              <1> 		;---------------------------------------
   440 00000F18 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   441 00000F1A 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   442 00000F1C 08E0                <1> 		or		al, ah							; AL |= AH;
   443                              <1> 
   444                              <1> 		;---------------------------------------
   445                              <1> 		; 新しい値を出力
   446                              <1> 		;---------------------------------------
   447 00000F1E 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   448                              <1> 
   449                              <1> 		;---------------------------------------
   450                              <1> 		; 【レジスタの復帰】
   451                              <1> 		;---------------------------------------
   452 00000F20 5F                  <1> 		pop		edi
   453 00000F21 5B                  <1> 		pop		ebx
   454 00000F22 58                  <1> 		pop		eax
   455                              <1> 
   456                              <1> 		;---------------------------------------
   457                              <1> 		; 【スタックフレームの破棄】
   458                              <1> 		;---------------------------------------
   459 00000F23 89EC                <1> 		mov		esp, ebp
   460 00000F25 5D                  <1> 		pop		ebp
   461                              <1> 
   462 00000F26 C3                  <1> 		ret
   170                                  %include	"../modules/protect/draw_char.s"
   171                              <1> ;************************************************************************
   172                              <1> ;	文字の表示
   173                              <1> ;------------------------------------------------------------------------
   174                              <1> ;	グラフィックスモードでテキストを表示
   175                              <1> ;========================================================================
   176                              <1> ;■書式		: void draw_char(col, row, color, ch);
   177                              <1> ;
   178                              <1> ;■引数
   179                              <1> ;	col		: 列（0～79）
   180                              <1> ;	row		: 行（0～29）
   181                              <1> ;	color	: 描画色
   182                              <1> ;	ch		: 文字
   183                              <1> ;
   184                              <1> ;■戻り値	: 無し
   185                              <1> ;************************************************************************
   186                              <1> draw_char:
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 【スタックフレームの構築】
   189                              <1> 		;---------------------------------------
   190                              <1> 												; ------|--------
   191                              <1> 												; EBP+20| 文字
   192                              <1> 												; EBP+16| 色
   193                              <1> 												; EBP+12| Y（行）
   194                              <1> 												; EBP+ 8| X（列）
   195                              <1> 												; ------+----------------
   196 00000F27 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   197 00000F28 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   198                              <1> 												; ------+----------------
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 【レジスタの保存】
   202                              <1> 		;---------------------------------------
   203 00000F2A 50                  <1> 		push	eax
   204 00000F2B 53                  <1> 		push	ebx
   205 00000F2C 51                  <1> 		push	ecx
   206 00000F2D 52                  <1> 		push	edx
   207 00000F2E 56                  <1> 		push	esi
   208 00000F2F 57                  <1> 		push	edi
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; テストアンドセット
   212                              <1> 		;---------------------------------------
   213                              <1> %ifdef	USE_TEST_AND_SET
   214 00000F30 68[04100000]E89908- <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   214 00000F38 00006683C404        <1>
   215                              <1> %endif
   216                              <1> 
   217                              <1> 		;---------------------------------------
   218                              <1> 		; コピー元フォントアドレスを設定
   219                              <1> 		;---------------------------------------
   220 00000F3E 0FB67514            <1> 		movzx	esi, byte [ebp +20]				; CL  = 文字コード;
   221 00000F42 C1E604              <1> 		shl		esi, 4							; CL *= 16; // 1文字16バイト
   222 00000F45 0335[A0020000]      <1> 		add		esi, [FONT_ADR]					; ESI = フォントアドレス;
   223                              <1> 
   224                              <1> 		;---------------------------------------
   225                              <1> 		; コピー先アドレスを取得
   226                              <1> 		; Adr = 0xA0000 + (640 / 8 * 16) * y + x
   227                              <1> 		;---------------------------------------
   228 00000F4B 8B7D0C              <1> 		mov		edi, [ebp +12]					; Y（行）
   229 00000F4E C1E708              <1> 		shl		edi, 8							; EDI = Y * 256;
   230 00000F51 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA0000]	; EDI = Y *   4 + Y;
   231 00000F58 037D08              <1> 		add		edi, [ebp + 8]					; X（列）
   232                              <1> 
   233                              <1> 		;---------------------------------------
   234                              <1> 		; 1文字分のフォントを出力
   235                              <1> 		;---------------------------------------
   236 00000F5B 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
   237                              <1> 
   238 00000F5F 6A03E80EFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
   238 00000F68 C404                <1>
   239 00000F6A 6A08E81CFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
   239 00000F73 C404                <1>
   240 00000F75 536A085756E827FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
   240 00000F7E FF6683C410          <1>
   241                              <1> 
   242 00000F83 6A02E8EAFEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
   242 00000F8C C404                <1>
   243 00000F8E 6A04E8F8FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
   243 00000F97 C404                <1>
   244 00000F99 536A045756E803FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
   244 00000FA2 FF6683C410          <1>
   245                              <1> 
   246 00000FA7 6A01E8C6FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
   246 00000FB0 C404                <1>
   247 00000FB2 6A02E8D4FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
   247 00000FBB C404                <1>
   248 00000FBD 536A025756E8DFFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
   248 00000FC6 FF6683C410          <1>
   249                              <1> 
   250 00000FCB 6A00E8A2FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
   250 00000FD4 C404                <1>
   251 00000FD6 6A01E8B0FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
   251 00000FDF C404                <1>
   252 00000FE1 536A015756E8BBFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
   252 00000FEA FF6683C410          <1>
   253                              <1> 
   254                              <1> %ifdef	USE_TEST_AND_SET
   255                              <1> 		;---------------------------------------
   256                              <1> 		; テストアンドセット
   257                              <1> 		;---------------------------------------
   258 00000FEF C705[04100000]0000- <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   258 00000FF7 0000                <1>
   259                              <1> %endif
   260                              <1> 
   261                              <1> 		;---------------------------------------
   262                              <1> 		; 【レジスタの復帰】
   263                              <1> 		;---------------------------------------
   264 00000FF9 5F                  <1> 		pop		edi
   265 00000FFA 5E                  <1> 		pop		esi
   266 00000FFB 5A                  <1> 		pop		edx
   267 00000FFC 59                  <1> 		pop		ecx
   268 00000FFD 5B                  <1> 		pop		ebx
   269 00000FFE 58                  <1> 		pop		eax
   270                              <1> 
   271                              <1> 		;---------------------------------------
   272                              <1> 		; 【スタックフレームの破棄】
   273                              <1> 		;---------------------------------------
   274 00000FFF 89EC                <1> 		mov		esp, ebp
   275 00001001 5D                  <1> 		pop		ebp
   276                              <1> 
   277 00001002 C3                  <1> 		ret
   278                              <1> 
   279                              <1> %ifdef USE_TEST_AND_SET
   280 00001003 00                  <1> ALIGN 4, db 0
   281 00001004 00000000            <1> IN_USE:	dd	0
   282                              <1> %endif
   283                              <1> 
   171                                  %include	"../modules/protect/draw_font.s"
   172                              <1> ;************************************************************************
   173                              <1> ;	フォント一覧を表示
   174                              <1> ;========================================================================
   175                              <1> ;■書式		: void draw_font(col, row);
   176                              <1> ;
   177                              <1> ;■引数
   178                              <1> ;	col		: 列
   179                              <1> ;	row		: 行
   180                              <1> ;
   181                              <1> ;■戻り値	: 無し
   182                              <1> ;************************************************************************
   183                              <1> draw_font:
   184                              <1> 		;---------------------------------------
   185                              <1> 		; 【スタックフレームの構築】
   186                              <1> 		;---------------------------------------
   187                              <1> 												; ------|--------
   188                              <1> 												; EBP+12| Y（行）
   189                              <1> 												; EBP+ 8| X（列）
   190                              <1> 												; ---------------
   191 00001008 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   192 00001009 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   193                              <1> 												; ---------------
   194                              <1> 
   195                              <1> 		;---------------------------------------
   196                              <1> 		; 【レジスタの保存】
   197                              <1> 		;---------------------------------------
   198 0000100B 50                  <1> 		push	eax
   199 0000100C 53                  <1> 		push	ebx
   200 0000100D 51                  <1> 		push	ecx
   201 0000100E 52                  <1> 		push	edx
   202 0000100F 56                  <1> 		push	esi
   203 00001010 57                  <1> 		push	edi
   204                              <1> 
   205                              <1> 		;---------------------------------------
   206                              <1> 		; 表示位置
   207                              <1> 		;---------------------------------------
   208 00001011 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   209 00001014 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   210                              <1> 
   211                              <1> 		;---------------------------------------
   212                              <1> 		; フォント一覧を表示
   213                              <1> 		;---------------------------------------
   214 00001017 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   215 0000101C 81F900010000        <1> .10L:	cmp		ecx, 256						;      ECX < 256;
   216 00001022 731F                <1> 		jae		.10E							; 
   217                              <1> 												;      ECX++)
   218                              <1> 												; {
   219                              <1> 												;   // 桁位置の計算
   220 00001024 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   221 00001026 83E00F              <1> 		and		eax, 0x0F						;   EAX &= 0x0F
   222 00001029 01F0                <1> 		add		eax, esi						;   EAX += X;
   223                              <1> 												;   
   224                              <1> 												;   // 行位置の計算
   225 0000102B 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   226 0000102D C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
   227 00001030 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   228                              <1> 
   229 00001032 516A075350E8EBFEFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
   229 0000103B FF6683C410          <1>
   230                              <1> 
   231 00001040 41                  <1> 		inc		ecx								;   // for (... ECX++)
   232 00001041 EBD9                <1> 		jmp		.10L							; 
   233                              <1> .10E:											; }
   234                              <1> 
   235                              <1> 		;---------------------------------------
   236                              <1> 		; 【レジスタの復帰】
   237                              <1> 		;---------------------------------------
   238 00001043 5F                  <1> 		pop		edi
   239 00001044 5E                  <1> 		pop		esi
   240 00001045 5A                  <1> 		pop		edx
   241 00001046 59                  <1> 		pop		ecx
   242 00001047 5B                  <1> 		pop		ebx
   243 00001048 58                  <1> 		pop		eax
   244                              <1> 
   245                              <1> 		;---------------------------------------
   246                              <1> 		; 【スタックフレームの破棄】
   247                              <1> 		;---------------------------------------
   248 00001049 89EC                <1> 		mov		esp, ebp
   249 0000104B 5D                  <1> 		pop		ebp
   250                              <1> 
   251 0000104C C3                  <1> 		ret
   252                              <1> 
   172                                  %include	"../modules/protect/draw_str.s"
   173                              <1> ;************************************************************************
   174                              <1> ;	文字列の表示
   175                              <1> ;========================================================================
   176                              <1> ;■書式		: void draw_str(col, row, color, p);
   177                              <1> ;
   178                              <1> ;■引数
   179                              <1> ;	col		: 列
   180                              <1> ;	row		: 行
   181                              <1> ;	color	: 描画色
   182                              <1> ;	p		: 文字列のアドレス
   183                              <1> ;
   184                              <1> ;■戻り値	: 無し
   185                              <1> ;************************************************************************
   186                              <1> draw_str:
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 【スタックフレームの構築】
   189                              <1> 		;---------------------------------------
   190                              <1> 												; ------|--------
   191                              <1> 												; EBP+20| *p（文字列のアドレス）
   192                              <1> 												; EBP+16| color（色）
   193                              <1> 												; EBP+12| row（行）
   194                              <1> 												; EBP+ 8| col（列）
   195                              <1> 												; ---------------
   196 0000104D 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   197 0000104E 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   198                              <1> 												; ---------------
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 【レジスタの保存】
   202                              <1> 		;---------------------------------------
   203 00001050 50                  <1> 		push	eax
   204 00001051 53                  <1> 		push	ebx
   205 00001052 51                  <1> 		push	ecx
   206 00001053 52                  <1> 		push	edx
   207 00001054 56                  <1> 		push	esi
   208                              <1> 
   209                              <1> 		;---------------------------------------
   210                              <1> 		; 文字列の表示
   211                              <1> 		;---------------------------------------
   212 00001055 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
   213 00001058 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
   214 0000105B 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
   215 0000105F 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
   216                              <1> 
   217 00001062 FC                  <1> 		cld										; DF = 0; // アドレス加算
   218                              <1> .10L:											; do
   219                              <1> 												; {
   220 00001063 AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
   221 00001064 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   222 00001066 741A                <1> 		je		.10E							;     break;
   223                              <1> 
   224                              <1> 		;---------------------------------------
   225                              <1> 		; 1文字表示
   226                              <1> 		;---------------------------------------
   227                              <1> %ifdef	USE_SYSTEM_CALL
   228 00001068 CD81                <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
   229                              <1> %else
   230                              <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
   231                              <1> %endif
   232                              <1> 
   233                              <1> 		; 次の文字の位置を調整
   234 0000106A 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
   235 0000106B 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
   236 0000106E 7C10                <1> 		jl		.12E							;   {
   237 00001070 B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
   238 00001075 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
   239 00001076 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
   240 00001079 7C05                <1> 		jl		.12E							;     {
   241 0000107B BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
   242                              <1> 												;     }
   243                              <1> .12E:											;   }
   244 00001080 EBE1                <1> 		jmp		.10L							;   
   245                              <1> .10E:											; } while (1);
   246                              <1> 
   247                              <1> 		;---------------------------------------
   248                              <1> 		; 【レジスタの復帰】
   249                              <1> 		;---------------------------------------
   250 00001082 5E                  <1> 		pop		esi
   251 00001083 5A                  <1> 		pop		edx
   252 00001084 59                  <1> 		pop		ecx
   253 00001085 5B                  <1> 		pop		ebx
   254 00001086 58                  <1> 		pop		eax
   255                              <1> 
   256                              <1> 		;---------------------------------------
   257                              <1> 		; 【スタックフレームの破棄】
   258                              <1> 		;---------------------------------------
   259 00001087 89EC                <1> 		mov		esp, ebp
   260 00001089 5D                  <1> 		pop		ebp
   261                              <1> 
   262 0000108A C3                  <1> 		ret
   263                              <1> 
   173                                  %include	"../modules/protect/draw_color_bar.s"
   174                              <1> ;************************************************************************
   175                              <1> ;	カラーバーの表示
   176                              <1> ;========================================================================
   177                              <1> ;■書式		: void draw_color_bar(col, row);
   178                              <1> ;
   179                              <1> ;■引数
   180                              <1> ;	col		: 列
   181                              <1> ;	row		: 行
   182                              <1> ;
   183                              <1> ;■戻り値	: 無し
   184                              <1> ;************************************************************************
   185                              <1> draw_color_bar:
   186                              <1> 		;---------------------------------------
   187                              <1> 		; 【スタックフレームの構築】
   188                              <1> 		;---------------------------------------
   189                              <1> 												; ------|--------
   190                              <1> 												; EBP+ 8| X（列）
   191                              <1> 												; EBP+12| Y（行）
   192                              <1> 												; ---------------
   193 0000108B 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   194 0000108C 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   195                              <1> 												; ---------------
   196                              <1> 		;---------------------------------------
   197                              <1> 		; 【レジスタの保存】
   198                              <1> 		;---------------------------------------
   199 0000108E 50                  <1> 		push	eax
   200 0000108F 53                  <1> 		push	ebx
   201 00001090 51                  <1> 		push	ecx
   202 00001091 52                  <1> 		push	edx
   203 00001092 56                  <1> 		push	esi
   204 00001093 57                  <1> 		push	edi
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; 表示位置
   208                              <1> 		;---------------------------------------
   209 00001094 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   210 00001097 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   211                              <1> 
   212                              <1> 		;---------------------------------------
   213                              <1> 		; カラーバーを表示
   214                              <1> 		;---------------------------------------
   215 0000109A B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   216 0000109F 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
   217 000010A2 732E                <1> 		jae		.10E							; 
   218                              <1> 												;      ECX++)
   219                              <1> 												; {
   220                              <1> 												;   // 桁位置の計算
   221 000010A4 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   222 000010A6 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
   223 000010A9 C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
   224 000010AC 01F0                <1> 		add		eax, esi						;   EAX += X;
   225                              <1> 												;   
   226                              <1> 												;   // 行位置の計算
   227 000010AE 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   228 000010B0 D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
   229 000010B2 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   230                              <1> 												;   
   231                              <1> 												;   // 表示色の取得
   232 000010B4 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
   233 000010B6 D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
   234 000010B8 8B92[E5100000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
   235                              <1> 
   236 000010BE 68[DC100000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
   236 000010C6 E882FFFFFF6683C410  <1>
   237                              <1> 
   238 000010CF 41                  <1> 		inc		ecx								;   // for (... ECX++)
   239 000010D0 EBCD                <1> 		jmp		.10L							; 
   240                              <1> .10E:											; }
   241                              <1> 
   242                              <1> 		;---------------------------------------
   243                              <1> 		; 【レジスタの復帰】
   244                              <1> 		;---------------------------------------
   245 000010D2 5F                  <1> 		pop		edi
   246 000010D3 5E                  <1> 		pop		esi
   247 000010D4 5A                  <1> 		pop		edx
   248 000010D5 59                  <1> 		pop		ecx
   249 000010D6 5B                  <1> 		pop		ebx
   250 000010D7 58                  <1> 		pop		eax
   251                              <1> 
   252                              <1> 		;---------------------------------------
   253                              <1> 		; 【スタックフレームの破棄】
   254                              <1> 		;---------------------------------------
   255 000010D8 89EC                <1> 		mov		esp, ebp
   256 000010DA 5D                  <1> 		pop		ebp
   257                              <1> 
   258 000010DB C3                  <1> 		ret
   259                              <1> 
   260 000010DC 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
   261                              <1> 
   262 000010E5 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
   263 000010E9 00010009            <1> 		dw	0x0100, 0x0900
   264 000010ED 0002000A            <1> 		dw	0x0200, 0x0A00
   265 000010F1 0003000B            <1> 		dw	0x0300, 0x0B00
   266 000010F5 0004000C            <1> 		dw	0x0400, 0x0C00
   267 000010F9 0005000D            <1> 		dw	0x0500, 0x0D00
   268 000010FD 0006000E            <1> 		dw	0x0600, 0x0E00
   269 00001101 0007000F            <1> 		dw	0x0700, 0x0F00
   270                              <1> 
   174                                  %include	"../modules/protect/draw_pixel.s"
   175                              <1> ;************************************************************************
   176                              <1> ;	ピクセルの描画
   177                              <1> ;========================================================================
   178                              <1> ;■書式		: void draw_pixel(X, Y, color);
   179                              <1> ;
   180                              <1> ;■引数
   181                              <1> ;	X		: X座標
   182                              <1> ;	Y		: Y座標
   183                              <1> ;	color	: 描画色
   184                              <1> ;
   185                              <1> ;■戻り値	: 無し
   186                              <1> ;************************************************************************
   187                              <1> draw_pixel:
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 【スタックフレームの構築】
   190                              <1> 		;---------------------------------------
   191                              <1> 												; ------|--------
   192                              <1> 												; EBP+16| 色
   193                              <1> 												; EBP+12| Y
   194                              <1> 												; EBP+ 8| X
   195                              <1> 												; ------|--------
   196 00001105 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   197 00001106 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   198                              <1> 												; ------+--------
   199                              <1> 		;---------------------------------------
   200                              <1> 		; 【レジスタの保存】
   201                              <1> 		;---------------------------------------
   202 00001108 50                  <1> 		push	eax
   203 00001109 53                  <1> 		push	ebx
   204 0000110A 51                  <1> 		push	ecx
   205 0000110B 57                  <1> 		push	edi
   206                              <1> 
   207                              <1> 		;---------------------------------------
   208                              <1> 		; Y座標を80倍する（640/8）
   209                              <1> 		;---------------------------------------
   210 0000110C 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI  = Y座標
   211 0000110F C1E704              <1> 		shl		edi, 4							; EDI *= 16;
   212 00001112 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA_0000]	; EDI  = 0xA00000[EDI * 4 + EDI];
   213                              <1> 
   214                              <1> 		;---------------------------------------
   215                              <1> 		; X座標を1/8して加算
   216                              <1> 		;---------------------------------------
   217 00001119 8B5D08              <1> 		mov		ebx, [ebp + 8]					; EBX  = X座標;
   218 0000111C 89D9                <1> 		mov		ecx, ebx						; ECX  = X座標;（一時保存）
   219 0000111E C1EB03              <1> 		shr		ebx, 3							; EBX /= 8;
   220 00001121 01DF                <1> 		add		edi, ebx						; EDI += EBX;
   221                              <1> 
   222                              <1> 		;---------------------------------------
   223                              <1> 		; X座標を8で割った余りからビット位置を計算
   224                              <1> 		; (0=0x80, 1=0x40,... 7=0x01)
   225                              <1> 		;---------------------------------------
   226 00001123 83E107              <1> 		and		ecx, 0x07						; ECX = X & 0x07;
   227 00001126 BB80000000          <1> 		mov		ebx, 0x80						; EBX = 0x80;
   228 0000112B D3EB                <1> 		shr		ebx, cl							; EBX >>= ECX;
   229                              <1> 
   230                              <1> 		;---------------------------------------
   231                              <1> 		; 色指定
   232                              <1> 		;---------------------------------------
   233 0000112D 8B4D10              <1> 		mov		ecx, [ebp +16]					; // 表示色
   234                              <1> 
   235                              <1> %ifdef	USE_TEST_AND_SET
   236 00001130 68[04100000]E89906- <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   236 00001138 00006683C404        <1>
   237                              <1> %endif
   238                              <1> 
   239                              <1> 		;---------------------------------------
   240                              <1> 		; プレーン毎に出力
   241                              <1> 		;---------------------------------------
   242 0000113E 6A03E82FFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 輝度(I)プレーンを選択
   242 00001147 C404                <1>
   243 00001149 6A08E83DFDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 輝度(I)プレーンを選択
   243 00001152 C404                <1>
   244 00001154 516A085753E89BFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
   244 0000115D FF6683C410          <1>
   245                              <1> 
   246 00001162 6A02E80BFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 赤(R)プレーンを選択
   246 0000116B C404                <1>
   247 0000116D 6A04E819FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 赤(R)プレーンを選択
   247 00001176 C404                <1>
   248 00001178 516A045753E877FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
   248 00001181 FF6683C410          <1>
   249                              <1> 
   250 00001186 6A01E8E7FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 緑(G)プレーンを選択
   250 0000118F C404                <1>
   251 00001191 6A02E8F5FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 緑(G)プレーンを選択
   251 0000119A C404                <1>
   252 0000119C 516A025753E853FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
   252 000011A5 FF6683C410          <1>
   253                              <1> 
   254 000011AA 6A00E8C3FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 青(B)プレーンを選択
   254 000011B3 C404                <1>
   255 000011B5 6A01E8D1FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 青(B)プレーンを選択
   255 000011BE C404                <1>
   256 000011C0 516A015753E82FFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
   256 000011C9 FF6683C410          <1>
   257                              <1> 
   258                              <1> 
   259                              <1> %ifdef	USE_TEST_AND_SET
   260                              <1> 		;---------------------------------------
   261                              <1> 		; テストアンドセット
   262                              <1> 		;---------------------------------------
   263 000011CE C705[04100000]0000- <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   263 000011D6 0000                <1>
   264                              <1> %endif
   265                              <1> 
   266                              <1> 		;---------------------------------------
   267                              <1> 		; 【レジスタの復帰】
   268                              <1> 		;---------------------------------------
   269 000011D8 5F                  <1> 		pop		edi
   270 000011D9 59                  <1> 		pop		ecx
   271 000011DA 5B                  <1> 		pop		ebx
   272 000011DB 58                  <1> 		pop		eax
   273                              <1> 
   274                              <1> 		;---------------------------------------
   275                              <1> 		; 【スタックフレームの破棄】
   276                              <1> 		;---------------------------------------
   277 000011DC 89EC                <1> 		mov		esp, ebp
   278 000011DE 5D                  <1> 		pop		ebp
   279                              <1> 
   280 000011DF C3                  <1> 		ret
   281                              <1> 
   175                                  %include	"../modules/protect/draw_line.s"
   176                              <1> ;************************************************************************
   177                              <1> ;	直線の描画
   178                              <1> ;========================================================================
   179                              <1> ;■書式		: void draw_line(X0, Y0, X1, Y1, color);
   180                              <1> ;
   181                              <1> ;■引数
   182                              <1> ;	X0		: 始点のX座標
   183                              <1> ;	Y0		: 始点のY座標
   184                              <1> ;	X1		: 終点のX座標
   185                              <1> ;	Y1		: 終点のY座標
   186                              <1> ;	color	: 描画色
   187                              <1> ;
   188                              <1> ;■戻り値	: 無し
   189                              <1> ;************************************************************************
   190                              <1> draw_line:
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 【スタックフレームの構築】
   193                              <1> 		;---------------------------------------
   194                              <1> 												; ---------------
   195                              <1> 												;    +24| 色
   196                              <1> 												;    +20| Y1
   197                              <1> 												;    +16| X1
   198                              <1> 												;    +12| Y0
   199                              <1> 												;    + 8| X0
   200                              <1> 												; ---------------
   201 000011E0 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   202 000011E1 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   203                              <1> 												; ---------------
   204 000011E3 6A00                <1> 		push	dword 0							;    - 4| sum   = 0; // 相対軸の積算値
   205 000011E5 6A00                <1> 		push	dword 0							;    - 8| x0    = 0; // X座標
   206 000011E7 6A00                <1> 		push	dword 0							;    -12| dx    = 0; // X増分
   207 000011E9 6A00                <1> 		push	dword 0							;    -16| inc_x = 0; // X座標増分(1 or -1)
   208 000011EB 6A00                <1> 		push	dword 0							;    -20| y0    = 0; // Y座標
   209 000011ED 6A00                <1> 		push	dword 0							;    -24| dy    = 0; // Y増分
   210 000011EF 6A00                <1> 		push	dword 0							;    -28| inc_y = 0; // Y座標増分(1 or -1)
   211                              <1> 												; ------|--------
   212                              <1> 
   213                              <1> 		;---------------------------------------
   214                              <1> 		; 【レジスタの保存】
   215                              <1> 		;---------------------------------------
   216 000011F1 50                  <1> 		push	eax
   217 000011F2 53                  <1> 		push	ebx
   218 000011F3 51                  <1> 		push	ecx
   219 000011F4 52                  <1> 		push	edx
   220 000011F5 56                  <1> 		push	esi
   221 000011F6 57                  <1> 		push	edi
   222                              <1> 
   223                              <1> 		;---------------------------------------
   224                              <1> 		; 幅を計算（X軸）
   225                              <1> 		;---------------------------------------
   226 000011F7 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   227 000011FA 8B5D10              <1> 		mov		ebx, [ebp +16]					; EBX = X1;
   228 000011FD 29C3                <1> 		sub		ebx, eax						; EBX = X1 - X0; // 幅
   229 000011FF 7D09                <1> 		jge		.10F							; if (幅 < 0)
   230                              <1> 												; {
   231 00001201 F7DB                <1> 		neg		ebx								;   幅   *= -1;
   232 00001203 BEFFFFFFFF          <1> 		mov		esi, -1							;   // X座標の増分
   233 00001208 EB05                <1> 		jmp		.10E							; }
   234                              <1> .10F:											; else
   235                              <1> 												; {
   236 0000120A BE01000000          <1> 		mov		esi, 1							;   // X座標の増分
   237                              <1> .10E:											; }
   238                              <1> 
   239                              <1> 		;---------------------------------------
   240                              <1> 		; 高さを計算（Y軸）
   241                              <1> 		;---------------------------------------
   242 0000120F 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX = Y0
   243 00001212 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1
   244 00001215 29CA                <1> 		sub		edx, ecx						; EDX = Y1 - Y0; // 高さ
   245 00001217 7D09                <1> 		jge		.20F							; if (高さ < 0)
   246                              <1> 												; {
   247 00001219 F7DA                <1> 		neg		edx								;   高さ *= -1;
   248 0000121B BFFFFFFFFF          <1> 		mov		edi, -1							;   // Y座標の増分
   249 00001220 EB05                <1> 		jmp		.20E							; }
   250                              <1> .20F:											; else
   251                              <1> 												; {
   252 00001222 BF01000000          <1> 		mov		edi, 1							;   // Y座標の増分
   253                              <1> .20E:											; }
   254                              <1> 
   255                              <1> 		;---------------------------------------
   256                              <1> 		; X軸
   257                              <1> 		;---------------------------------------
   258 00001227 8945F8              <1> 		mov		[ebp - 8], eax					;   // X軸:開始座標
   259 0000122A 895DF4              <1> 		mov		[ebp -12], ebx					;   // X軸:描画幅
   260 0000122D 8975F0              <1> 		mov		[ebp -16], esi					;   // X軸:増分(基準軸：1 or -1)
   261                              <1> 
   262                              <1> 		;---------------------------------------
   263                              <1> 		; Y軸
   264                              <1> 		;---------------------------------------
   265 00001230 894DEC              <1> 		mov		[ebp -20], ecx					;   // Y軸:開始座標
   266 00001233 8955E8              <1> 		mov		[ebp -24], edx					;   // Y軸:描画幅
   267 00001236 897DE4              <1> 		mov		[ebp -28], edi					;   // Y軸:増分(基準軸：1 or -1)
   268                              <1> 
   269                              <1> 		;---------------------------------------
   270                              <1> 		; 基準軸を決める
   271                              <1> 		;---------------------------------------
   272 00001239 39D3                <1> 		cmp		ebx, edx						; if (幅 <= 高さ)
   273 0000123B 7F08                <1> 		jg		.22F							; {
   274                              <1> 												;   
   275 0000123D 8D75EC              <1> 		lea		esi, [ebp -20]					;   // Y軸が基準軸
   276 00001240 8D7DF8              <1> 		lea		edi, [ebp - 8]					;   // X軸が相対軸
   277                              <1> 												;   
   278 00001243 EB06                <1> 		jmp		.22E							; }
   279                              <1> .22F:											; else
   280                              <1> 												; {
   281 00001245 8D75F8              <1> 		lea		esi, [ebp - 8]					;   // X軸が基準軸
   282 00001248 8D7DEC              <1> 		lea		edi, [ebp -20]					;   // Y軸が相対軸
   283                              <1> .22E:											; }
   284                              <1> 
   285                              <1> 		;---------------------------------------
   286                              <1> 		; 繰り返し回数(基準軸のドット数)
   287                              <1> 		;---------------------------------------
   288 0000124B 8B4EFC              <1> 		mov		ecx, [esi - 4]					; ECX = 基準軸描画幅;
   289 0000124E 83F900              <1> 		cmp		ecx, 0							; if (0 == ECX)
   290 00001251 7505                <1> 		jnz		.30E							; {
   291 00001253 B901000000          <1> 		mov		ecx, 1							;   ECX = 1;
   292                              <1> .30E:											; }
   293                              <1> 
   294                              <1> 		;---------------------------------------
   295                              <1> 		; 線を描画
   296                              <1> 		;---------------------------------------
   297                              <1> .50L:											; do
   298                              <1> 												; {
   299                              <1> %ifdef	USE_SYSTEM_CALL
   300 00001258 89C8                <1> 		mov		eax, ecx						;   // 繰り返し回数を保存
   301                              <1> 
   302 0000125A 8B5D18              <1> 		mov		ebx, [ebp +24]					;   EBX = 表示色;
   303 0000125D 8B4DF8              <1> 		mov		ecx, [ebp - 8]					;   ECX = X座標;
   304 00001260 8B55EC              <1> 		mov		edx, [ebp -20]					;   EDX = Y座標;
   305 00001263 CD82                <1> 		int		0x82							;   sys_call(1, X, Y, 色, 文字); BX(C), CX(X), DX(Y)
   306                              <1> 
   307 00001265 89C1                <1> 		mov		ecx, eax
   308                              <1> %else
   309                              <1> 		cdecl	draw_pixel, dword [ebp - 8], 							dword [ebp -20], 							dword [ebp +24]		;   // 点の描画
   312                              <1> %endif
   313                              <1> 												;   // 基準軸を更新(1ドット分)
   314 00001267 8B46F8              <1> 		mov		eax, [esi - 8]					;   EAX = 基準軸増分(1 or -1);
   315 0000126A 0106                <1> 		add		[esi - 0], eax					;   
   316                              <1> 
   317                              <1> 												;   // 相対軸を更新
   318 0000126C 8B45FC              <1> 		mov		eax, [ebp - 4]					;   EAX  = sum; // 相対軸の積算値;
   319 0000126F 0347FC              <1> 		add		eax, [edi - 4]					;   EAX += dy;  // 増分(相対軸の描画幅)
   320 00001272 8B5EFC              <1> 		mov		ebx, [esi - 4]					;   EBX  = dx;  // 増分(基準軸の描画幅)
   321                              <1> 
   322 00001275 39D8                <1> 		cmp		eax, ebx						;   if (積算値 <= 相対軸の増分)
   323 00001277 7C07                <1> 		jl		.52E							;   {
   324 00001279 29D8                <1> 		sub		eax, ebx						;     EAX -= EBX; // 積算値から相対軸の増分を減算
   325                              <1> 												;     
   326                              <1> 												;     // 相対軸の座標を更新(1ドット分)
   327 0000127B 8B5FF8              <1> 		mov		ebx, [edi - 8]					;     EBX =  相対軸増分;
   328 0000127E 011F                <1> 		add		[edi - 0], ebx					;     
   329                              <1> .52E:											;   }
   330 00001280 8945FC              <1> 		mov		[ebp - 4], eax					;   // 積算値を更新
   331                              <1> 												;   
   332 00001283 E2D3                <1> 		loop	.50L							;   
   333                              <1> .50E:											; } while (ループ回数--);
   334                              <1> 
   335                              <1> 		;---------------------------------------
   336                              <1> 		; 【レジスタの復帰】
   337                              <1> 		;---------------------------------------
   338 00001285 5F                  <1> 		pop		edi
   339 00001286 5E                  <1> 		pop		esi
   340 00001287 5A                  <1> 		pop		edx
   341 00001288 59                  <1> 		pop		ecx
   342 00001289 5B                  <1> 		pop		ebx
   343 0000128A 58                  <1> 		pop		eax
   344                              <1> 
   345                              <1> 		;---------------------------------------
   346                              <1> 		; 【スタックフレームの破棄】
   347                              <1> 		;---------------------------------------
   348 0000128B 89EC                <1> 		mov		esp, ebp
   349 0000128D 5D                  <1> 		pop		ebp
   350                              <1> 
   351 0000128E C3                  <1> 		ret
   352                              <1> 
   176                                  %include	"../modules/protect/draw_rect.s"
   177                              <1> ;************************************************************************
   178                              <1> ;	矩形の描画
   179                              <1> ;========================================================================
   180                              <1> ;■書式		: void draw_rect(X0, Y0, X1, Y1, color);
   181                              <1> ;
   182                              <1> ;■引数
   183                              <1> ;	X0		: 始点のX座標
   184                              <1> ;	Y0		: 始点のY座標
   185                              <1> ;	X1		: 終点のX座標
   186                              <1> ;	Y1		: 終点のY座標
   187                              <1> ;	color	: 描画色
   188                              <1> ;
   189                              <1> ;■戻り値	: 無し
   190                              <1> ;************************************************************************
   191                              <1> draw_rect:
   192                              <1> 		;---------------------------------------
   193                              <1> 		; 【スタックフレームの構築】
   194                              <1> 		;---------------------------------------
   195                              <1> 												; ------|--------
   196                              <1> 												; EBP+24| 色
   197                              <1> 												; EBP+20| Y1
   198                              <1> 												; EBP+16| X1
   199                              <1> 												; EBP+12| Y0
   200                              <1> 												; EBP+ 8| X0
   201                              <1> 												; ---------------
   202 0000128F 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   203 00001290 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   204                              <1> 												; ------|--------
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; 【レジスタの保存】
   208                              <1> 		;---------------------------------------
   209 00001292 50                  <1> 		push		eax
   210 00001293 53                  <1> 		push		ebx
   211 00001294 51                  <1> 		push		ecx
   212 00001295 52                  <1> 		push		edx
   213 00001296 56                  <1> 		push		esi
   214                              <1> 
   215                              <1> 		;---------------------------------------
   216                              <1> 		; 矩形を描画
   217                              <1> 		;---------------------------------------
   218 00001297 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   219 0000129A 8B5D0C              <1> 		mov		ebx, [ebp +12]					; EBX = Y0;
   220 0000129D 8B4D10              <1> 		mov		ecx, [ebp +16]					; ECX = X1;
   221 000012A0 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1;
   222 000012A3 8B7518              <1> 		mov		esi, [ebp +24]					; ESI = 色;
   223                              <1> 
   224                              <1> 		;---------------------------------------
   225                              <1> 		; 座標軸の大小を確定
   226                              <1> 		;---------------------------------------
   227 000012A6 39C8                <1> 		cmp		eax, ecx						; if (X1 < X0)
   228 000012A8 7C01                <1> 		jl		.10E							; {
   229 000012AA 91                  <1> 		xchg	eax, ecx						;   X0とX1を入れ替える;
   230                              <1> .10E:											; }
   231                              <1> 
   232 000012AB 39D3                <1> 		cmp		ebx, edx						; if (Y1 < Y0)
   233 000012AD 7C02                <1> 		jl		.20E							; {
   234 000012AF 87DA                <1> 		xchg	ebx, edx						;   Y0とY1を入れ替える;
   235                              <1> .20E:											; }
   236                              <1> 
   237                              <1> 		;---------------------------------------
   238                              <1> 		; 矩形を描画
   239                              <1> 		;---------------------------------------
   240 000012B1 5653515350E825FFFF- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, esi	; 上線
   240 000012BA FF6683C414          <1>
   241 000012BF 5652505350E817FFFF- <1> 		cdecl	draw_line, eax, ebx, eax, edx, esi	; 左線
   241 000012C8 FF6683C414          <1>
   242                              <1> 
   243 000012CD 4A                  <1> 		dec		edx									; EDX--; // 下線は1ドット上げる
   244 000012CE 5652515250E808FFFF- <1> 		cdecl	draw_line, eax, edx, ecx, edx, esi	; 下線
   244 000012D7 FF6683C414          <1>
   245 000012DC 42                  <1> 		inc		edx
   246                              <1> 
   247 000012DD 49                  <1> 		dec		ecx									; ECX--; // 右線は1ドット左に移動
   248 000012DE 5652515351E8F8FEFF- <1> 		cdecl	draw_line, ecx, ebx, ecx, edx, esi	; 右線
   248 000012E7 FF6683C414          <1>
   249                              <1> 
   250                              <1> 		;---------------------------------------
   251                              <1> 		; 【レジスタの復帰】
   252                              <1> 		;---------------------------------------
   253 000012EC 5E                  <1> 		pop		esi
   254 000012ED 5A                  <1> 		pop		edx
   255 000012EE 59                  <1> 		pop		ecx
   256 000012EF 5B                  <1> 		pop		ebx
   257 000012F0 58                  <1> 		pop		eax
   258                              <1> 
   259                              <1> 		;---------------------------------------
   260                              <1> 		; 【スタックフレームの破棄】
   261                              <1> 		;---------------------------------------
   262 000012F1 89EC                <1> 		mov		esp, ebp
   263 000012F3 5D                  <1> 		pop		ebp
   264                              <1> 
   265 000012F4 C3                  <1> 		ret
   177                                  %include	"../modules/protect/itoa.s"
   178                              <1> ;************************************************************************
   179                              <1> ;	数値を文字に変換
   180                              <1> ;========================================================================
   181                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
   182                              <1> ;
   183                              <1> ;■引数
   184                              <1> ;	num		: 変換する数値
   185                              <1> ;	buff	: 保存先バッファアドレス
   186                              <1> ;	size	: 保存先バッファサイズ
   187                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
   188                              <1> ;	flags	: フラグ
   189                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
   190                              <1> ;			:      : 0=空白を' '（スペース）で埋める
   191                              <1> ;			:   B1 : 1=＋/-符号を表示する
   192                              <1> ;			:      : 0=＋/-符号を表示しない
   193                              <1> ;			:   B0 : 1=符号付き正数として扱う
   194                              <1> ;			:      : 0=符号無し正数として扱う
   195                              <1> ;
   196                              <1> ;■戻り値	: 無し
   197                              <1> ;************************************************************************
   198                              <1> itoa:
   199                              <1> 		;---------------------------------------
   200                              <1> 		; 【スタックフレームの構築】
   201                              <1> 		;---------------------------------------
   202                              <1> 												; ------|--------
   203                              <1> 												;    +24| フラグ
   204                              <1> 												;    +20| 基数
   205                              <1> 												;    +16| バッファサイズ
   206                              <1> 												;    +12| バッファアドレス
   207                              <1> 												;    + 8| 数値
   208                              <1> 												; ------|--------
   209                              <1> 												;    + 4| EIP（戻り番地）
   210 000012F5 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   211 000012F6 89E5                <1> 		mov		ebp, esp						; ------+--------
   212                              <1> 
   213                              <1> 		;---------------------------------------
   214                              <1> 		; 【レジスタの保存】
   215                              <1> 		;---------------------------------------
   216 000012F8 50                  <1> 		push	eax
   217 000012F9 53                  <1> 		push	ebx
   218 000012FA 51                  <1> 		push	ecx
   219 000012FB 52                  <1> 		push	edx
   220 000012FC 56                  <1> 		push	esi
   221 000012FD 57                  <1> 		push	edi
   222                              <1> 
   223                              <1> 		;---------------------------------------
   224                              <1> 		; 引数を取得
   225                              <1> 		;---------------------------------------
   226 000012FE 8B4508              <1> 		mov		eax, [ebp + 8]					; val  = 数値;
   227 00001301 8B750C              <1> 		mov		esi, [ebp +12]					; dst  = バッファアドレス;
   228 00001304 8B4D10              <1> 		mov		ecx, [ebp +16]					; size = 残りバッファサイズ;
   229                              <1> 
   230 00001307 89F7                <1> 		mov		edi, esi						; // バッファの最後尾
   231 00001309 01CF                <1> 		add		edi, ecx						; dst  = &dst[size - 1];
   232 0000130B 4F                  <1> 		dec		edi								; 
   233                              <1> 
   234 0000130C 8B5D18              <1> 		mov		ebx, [ebp +24]					; flags = オプション;
   235                              <1> 
   236                              <1> 		;---------------------------------------
   237                              <1> 		; 符号付き判定
   238                              <1> 		;---------------------------------------
   239 0000130F F7C301000000        <1> 		test	ebx, 0b0001						; if (flags & 0x01)// 符号付き
   240 00001315 7408                <1> .10Q:	je		.10E							; {
   241 00001317 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   242 0000131A 7D03                <1> .12Q:	jge		.12E							;   {
   243 0000131C 83CB02              <1> 		or		ebx, 0b0010						;     flags |=  2; // 符号表示
   244                              <1> .12E:											;   }
   245                              <1> .10E:											; }
   246                              <1> 
   247                              <1> 		;---------------------------------------
   248                              <1> 		; 符号出力判定
   249                              <1> 		;---------------------------------------
   250 0000131F F7C302000000        <1> 		test	ebx, 0b0010						; if (flags & 0x02)// 符号出力判定
   251 00001325 7410                <1> .20Q:	je		.20E							; {
   252 00001327 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   253 0000132A 7D07                <1> .22Q:	jge		.22F							;   {
   254 0000132C F7D8                <1> 		neg		eax								;     val *= -1;   // 符号反転
   255 0000132E C6062D              <1> 		mov		[esi], byte '-'					;     *dst = '-';  // 符号表示
   256 00001331 EB03                <1> 		jmp		.22E							;   }
   257                              <1> .22F:											;   else
   258                              <1> 												;   {
   259 00001333 C6062B              <1> 		mov		[esi], byte '+'					;     *dst = '+';  // 符号表示
   260                              <1> .22E:											;   }
   261 00001336 49                  <1> 		dec		ecx								;   size--;        // 残りバッファサイズの減算
   262                              <1> .20E:											; }
   263                              <1> 
   264                              <1> 		;---------------------------------------
   265                              <1> 		; ASCII変換
   266                              <1> 		;---------------------------------------
   267 00001337 8B5D14              <1> 		mov		ebx, [ebp +20]					; BX = 基数;
   268                              <1> .30L:											; do
   269                              <1> 												; {
   270 0000133A BA00000000          <1> 		mov		edx, 0							;   
   271 0000133F F7F3                <1> 		div		ebx								;   DX = DX:AX % 基数;
   272                              <1> 												;   AX = DX:AX / 基数;
   273                              <1> 												;   
   274 00001341 89D6                <1> 		mov		esi, edx						;   // テーブル参照
   275 00001343 8A96[6E130000]      <1> 		mov		dl, byte [.ascii + esi]			;   DL = ASCII[DX];
   276                              <1> 												;   
   277 00001349 8817                <1> 		mov		[edi], dl						;   *dst = DL;
   278 0000134B 4F                  <1> 		dec		edi								;   dst--;
   279                              <1> 												;   
   280 0000134C 83F800              <1> 		cmp		eax, 0							;   
   281 0000134F E0E9                <1> 		loopnz	.30L							; } while (AX);
   282                              <1> .30E:
   283                              <1> 
   284                              <1> 		;---------------------------------------
   285                              <1> 		; 空欄を埋める
   286                              <1> 		;---------------------------------------
   287 00001351 83F900              <1> 		cmp		ecx, 0							; if (size)
   288 00001354 740E                <1> .40Q:	je		.40E							; {
   289 00001356 B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   290 00001358 66837D1804          <1> 		cmp		[ebp +24], word 0b0100			;   if (flags & 0x04)
   291 0000135D 7502                <1> .42Q:	jne		.42E							;   {
   292 0000135F B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   293                              <1> .42E:											;   }
   294 00001361 FD                  <1> 		std										;   // DF = 1（-方向）
   295 00001362 F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   296                              <1> .40E:											; }
   297                              <1> 
   298                              <1> 		;---------------------------------------
   299                              <1> 		; 【レジスタの復帰】
   300                              <1> 		;---------------------------------------
   301 00001364 5F                  <1> 		pop		edi
   302 00001365 5E                  <1> 		pop		esi
   303 00001366 5A                  <1> 		pop		edx
   304 00001367 59                  <1> 		pop		ecx
   305 00001368 5B                  <1> 		pop		ebx
   306 00001369 58                  <1> 		pop		eax
   307                              <1> 
   308                              <1> 		;---------------------------------------
   309                              <1> 		; 【スタックフレームの破棄】
   310                              <1> 		;---------------------------------------
   311 0000136A 89EC                <1> 		mov		esp, ebp
   312 0000136C 5D                  <1> 		pop		ebp
   313                              <1> 
   314 0000136D C3                  <1> 		ret
   315                              <1> 
   316 0000136E 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   316 00001377 39414243444546      <1>
   317                              <1> 
   178                                  %include	"../modules/protect/rtc.s"
   179                              <1> ;************************************************************************
   180                              <1> ;	RTCから時刻データを取得する
   181                              <1> ;========================================================================
   182                              <1> ;■書式		: DWORD rtc_get_time(dst);
   183                              <1> ;
   184                              <1> ;■引数
   185                              <1> ;	dst		: 保存先アドレス
   186                              <1> ;
   187                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   188                              <1> ;************************************************************************
   189                              <1> rtc_get_time:
   190                              <1> 		;---------------------------------------
   191                              <1> 		; 【スタックフレームの構築】
   192                              <1> 		;---------------------------------------
   193                              <1> 												; ------|--------
   194                              <1> 												; EBP+ 8| 保存先アドレス
   195                              <1> 												; ---------------
   196 0000137E 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   197 0000137F 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   198                              <1> 												; ---------------
   199                              <1> 		;---------------------------------------
   200                              <1> 		; 【レジスタの保存】
   201                              <1> 		;---------------------------------------
   202 00001381 53                  <1> 		push	ebx
   203                              <1> 
   204                              <1> 		;---------------------------------------
   205                              <1> 		; RTCから時刻を取得
   206                              <1> 		;---------------------------------------
   207 00001382 B00A                <1> 		mov		al, 0x0A						; // レジスタA
   208 00001384 E670                <1> 		out		0x70, al						; outp(0x70, AL);
   209 00001386 E471                <1> 		in		al, 0x71						; AL = レジスタA;
   210 00001388 A880                <1> 		test	al, 0x80						; if (DM & UIP) // 更新中
   211 0000138A 7407                <1> 		je		.10F							; {
   212 0000138C B801000000          <1> 		mov		eax, 1							;   ret = 1; // データ更新中
   213 00001391 EB27                <1> 		jmp		.10E							; }
   214                              <1> .10F:											; else
   215                              <1> 												; {
   216                              <1> 												;   // RAM[0x04]:時
   217 00001393 B004                <1> 		mov		al, 0x04						;   AL = 0x04;
   218 00001395 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   219 00001397 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 時データ
   220                              <1> 												;   
   221 00001399 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   222                              <1> 												;   
   223                              <1> 												;   // RAM[0x02]:分
   224 0000139C B002                <1> 		mov		al, 0x02						;   AL = 0x02;
   225 0000139E E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   226 000013A0 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 分データ
   227                              <1> 												;   
   228 000013A2 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   229                              <1> 												;   
   230                              <1> 												;   // RAM[0x00]:秒
   231 000013A5 B000                <1> 		mov		al, 0x00						;   AL = 0x00;
   232 000013A7 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   233 000013A9 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 秒データ
   234                              <1> 												;   
   235 000013AB 25FFFFFF00          <1> 		and		eax, 0x00_FF_FF_FF				;   // 下位3バイトのみ有効
   236                              <1> 												;   
   237 000013B0 8B5D08              <1> 		mov		ebx, [ebp + 8]					;   dst = 保存先;
   238 000013B3 8903                <1> 		mov		[ebx], eax						;   [dst] = 時刻;
   239                              <1> 												;   
   240 000013B5 B800000000          <1> 		mov		eax, 0							;   ret = 0; // 正常終了
   241                              <1> .10E:											; }
   242                              <1> 
   243                              <1> 		;---------------------------------------
   244                              <1> 		; 【レジスタの復帰】
   245                              <1> 		;---------------------------------------
   246 000013BA 5B                  <1> 		pop		ebx
   247                              <1> 
   248                              <1> 		;---------------------------------------
   249                              <1> 		; 【スタックフレームの破棄】
   250                              <1> 		;---------------------------------------
   251 000013BB 89EC                <1> 		mov		esp, ebp
   252 000013BD 5D                  <1> 		pop		ebp
   253                              <1> 
   254 000013BE C3                  <1> 		ret
   255                              <1> 
   179                                  %include	"../modules/protect/draw_time.s"
   180                              <1> ;************************************************************************
   181                              <1> ;	時刻の表示
   182                              <1> ;========================================================================
   183                              <1> ;■書式		: void draw_time(col, row, color, time);
   184                              <1> ;
   185                              <1> ;■引数
   186                              <1> ;	col		: 列
   187                              <1> ;	row		: 行
   188                              <1> ;	color	: 描画色
   189                              <1> ;	time	: 時刻データ
   190                              <1> ;
   191                              <1> ;■戻り値	: 無し
   192                              <1> ;************************************************************************
   193                              <1> draw_time:
   194                              <1> 		;---------------------------------------
   195                              <1> 		; 【スタックフレームの構築】
   196                              <1> 		;---------------------------------------
   197                              <1> 												; ------|--------
   198                              <1> 												; EBP+20| 時刻データ
   199                              <1> 												; EBP+16| 色
   200                              <1> 												; EBP+12| Y（行）
   201                              <1> 												; EBP+ 8| X（列）
   202                              <1> 												; ---------------
   203 000013BF 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   204 000013C0 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   205                              <1> 												; ---------------
   206                              <1> 		;---------------------------------------
   207                              <1> 		; 【レジスタの保存】
   208                              <1> 		;---------------------------------------
   209 000013C2 50                  <1> 		push	eax
   210 000013C3 53                  <1> 		push	ebx
   211                              <1> 
   212                              <1> 		;---------------------------------------
   213                              <1> 		; 
   214                              <1> 		;---------------------------------------
   215 000013C4 8B4514              <1> 		mov		eax, [ebp +20]					; EAX = 時刻データ;
   216 000013C7 3B05[44140000]      <1> 		cmp		eax, [.last]					; if (今回 != 前回)
   217 000013CD 7467                <1> 		je		.10E							; {
   218                              <1> 												;   
   219 000013CF A3[44140000]        <1> 		mov		[.last], eax					;   // 前回の時刻値を更新
   220                              <1> 												;   
   221 000013D4 BB00000000          <1> 		mov		ebx, 0							;   EBX = 0;
   222 000013D9 88C3                <1> 		mov		bl, al							;   EBX = 秒;
   223 000013DB 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .sec, 2, 16, 0b0100	;   // 時刻を文字列に変換
   223 000013E2 [52140000]53E809FF- <1>
   223 000013EA FFFF6683C414        <1>
   224                              <1> 
   225 000013F0 88E3                <1> 		mov		bl, ah							;   EBX = 分;
   226 000013F2 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .min, 2, 16, 0b0100	;   // 時刻を文字列に変換
   226 000013F9 [4F140000]53E8F2FE- <1>
   226 00001401 FFFF6683C414        <1>
   227                              <1> 
   228 00001407 C1E810              <1> 		shr		eax, 16							;   EBX = 時;
   229 0000140A 6A046A106A0268-     <1> 		cdecl	itoa, eax, .hour, 2, 16, 0b0100	;   // 時刻を文字列に変換
   229 00001411 [4C140000]50E8DAFE- <1>
   229 00001419 FFFF6683C414        <1>
   230                              <1> 
   231                              <1> 												;   // 時刻を表示
   232 0000141F 68[4C140000]FF7510- <1> 		cdecl	draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
   232 00001427 FF750CFF7508E81BFC- <1>
   232 00001430 FFFF6683C410        <1>
   233                              <1> 												;     
   234                              <1> 												;   }
   235                              <1> .10E:											; }
   236                              <1> 
   237                              <1> 		;---------------------------------------
   238                              <1> 		; 【レジスタの復帰】
   239                              <1> 		;---------------------------------------
   240 00001436 5B                  <1> 		pop		ebx
   241 00001437 58                  <1> 		pop		eax
   242                              <1> 
   243                              <1> 		;---------------------------------------
   244                              <1> 		; 【スタックフレームの破棄】
   245                              <1> 		;---------------------------------------
   246 00001438 89EC                <1> 		mov		esp, ebp
   247 0000143A 5D                  <1> 		pop		ebp
   248                              <1> 
   249 0000143B C3                  <1> 		ret
   250                              <1> 
   251                              <1> ALIGN 2, db 0
   252 0000143C 0000000000000000    <1> .temp:	dq	0
   253 00001444 0000000000000000    <1> .last:	dq	0
   254 0000144C 5A5A3A              <1> .hour:	db	"ZZ:"
   255 0000144F 5A5A3A              <1> .min:	db	"ZZ:"
   256 00001452 5A5A00              <1> .sec:	db	"ZZ", 0
   257                              <1> 
   180                                  %include	"../modules/protect/interrupt.s"
   181                              <1> ;************************************************************************
   182                              <1> ;	割り込みベクタの初期化
   183                              <1> ;************************************************************************
   184 00001455 90<rep 3h>          <1> ALIGN 4
   185 00001458 FF07                <1> IDTR:	dw 		8 * 256 - 1					; idt_limit
   186 0000145A 00001000            <1> 		dd 		VECT_BASE					; idt location
   187                              <1> 
   188                              <1> ;************************************************************************
   189                              <1> ;	割り込みテーブルを初期化
   190                              <1> ;------------------------------------------------------------------------
   191                              <1> ;	
   192                              <1> ;	まず、全ての割り込みアドレスにデフォルト処理を設定すし、その後、
   193                              <1> ;	必要な割り込みだけ設定しなおす。
   194                              <1> ;	
   195                              <1> ;	割り込みアドレスは、VECT_BASEで指定され、256の割り込みがあるので
   196                              <1> ;	0x0800バイト占有することになる。
   197                              <1> ;	
   198                              <1> ;	           |____________| _V___
   199                              <1> ;	  VECT_BASE| IntDefault |  |   
   200                              <1> ;	           | IntDefault |  | 8 * 256
   201                              <1> ;	           |      :     |  |   
   202                              <1> ;	           |____________| _|___
   203                              <1> ;	      +0800|////////////|
   204                              <1> ;	           |            |
   205                              <1> ;	
   206                              <1> ;	一つの割り込み設定は8バイトで構成される。
   207                              <1> ;	
   208                              <1> ;	           |____________|____________| 
   209                              <1> ;	        [0]| Address Lo[15: 0]       | 
   210                              <1> ;	        [2]| Selector                | 
   211                              <1> ;	        [4]| Flags                   | 
   212                              <1> ;	        [6]|_Address Lo[32:16]_______| 
   213                              <1> ;	           |/////////////////////////| 
   214                              <1> ;	           |            |            | 
   215                              <1> ;	
   216                              <1> ;========================================================================
   217                              <1> ;■書式		: void init_int(void);
   218                              <1> ;
   219                              <1> ;■引数		: 無し
   220                              <1> ;
   221                              <1> ;■戻り値	: 無し
   222                              <1> ;************************************************************************
   223                              <1> init_int:
   224                              <1> 		;---------------------------------------
   225                              <1> 		; 【レジスタの保存】
   226                              <1> 		;---------------------------------------
   227 0000145E 50                  <1> 		push	eax
   228 0000145F 53                  <1> 		push	ebx
   229 00001460 51                  <1> 		push	ecx
   230 00001461 57                  <1> 		push	edi
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; 全ての割り込みにデフォルト処理を設定
   234                              <1> 		;---------------------------------------
   235 00001462 8D05[A8150000]      <1> 		lea		eax, [int_default]				; EAX   = 割り込み処理アドレス;
   236 00001468 BB008E0800          <1> 		mov		ebx, 0x0008_8E00				; EBX   = セグメントセレクタ;
   237 0000146D 6693                <1> 		xchg	ax, bx							; // 下位ワードを交換
   238                              <1> 
   239 0000146F B900010000          <1> 		mov		ecx, 256						; ECX   = 割り込みベクタ数
   240 00001474 BF00001000          <1> 		mov		edi, VECT_BASE					; EDI   = 割り込みベクタテーブル
   241                              <1> 
   242                              <1> .10L:											; do
   243                              <1> 												; {
   244 00001479 891F                <1> 		mov		[edi + 0], ebx					;   [EDI + 0] = 割り込みディスクリプタ（下位）
   245 0000147B 894704              <1> 		mov		[edi + 4], eax					;   [EDI + 4] = 割り込みディスクリプタ（上位）
   246 0000147E 83C708              <1> 		add		edi, 8							;   EDI += 8;
   247 00001481 E2F6                <1> 		loop	.10L							; } while (ECX--);
   248                              <1> 
   249                              <1> 		;---------------------------------------
   250                              <1> 		; 割り込みディスクリプタの設定
   251                              <1> 		;---------------------------------------
   252 00001483 0F011D[58140000]    <1> 		lidt	[IDTR]							; // 割り込みディスクリプタテーブルをロード
   253                              <1> 
   254                              <1> 		;---------------------------------------
   255                              <1> 		; 【レジスタの復帰】
   256                              <1> 		;---------------------------------------
   257 0000148A 5F                  <1> 		pop		edi
   258 0000148B 59                  <1> 		pop		ecx
   259 0000148C 5B                  <1> 		pop		ebx
   260 0000148D 58                  <1> 		pop		eax
   261                              <1> 
   262 0000148E C3                  <1> 		ret
   263                              <1> 
   264                              <1> ;************************************************************************
   265                              <1> ;	スタックの内容を表示して無限ループを実行
   266                              <1> ;************************************************************************
   267                              <1> int_stop:
   268 0000148F FB                  <1> 		sti										; // 割り込み許可
   269                              <1> 
   270                              <1> 		;---------------------------------------
   271                              <1> 		; EAXで示される文字列を表示
   272                              <1> 		;---------------------------------------
   273 00001490 50680F0600006A0F6A- <1> 		cdecl	draw_str, 25, 15, 0x060F, eax	; draw_str(EAX);
   273 00001499 19E8AEFBFFFF6683C4- <1>
   273 000014A2 10                  <1>
   274                              <1> 
   275                              <1> 		;---------------------------------------
   276                              <1> 		; スタックのデータを文字列に変換
   277                              <1> 		;---------------------------------------
   278 000014A3 8B0424              <1> 		mov		eax, [esp + 0]					; EAX = ESP[ 0];
   279 000014A6 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p1, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   279 000014AD [6B150000]50E83EFE- <1>
   279 000014B5 FFFF6683C414        <1>
   280                              <1> 
   281 000014BB 8B442404            <1> 		mov		eax, [esp + 4]					; EAX = ESP[ 4];
   282 000014BF 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p2, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   282 000014C6 [7C150000]50E825FE- <1>
   282 000014CE FFFF6683C414        <1>
   283                              <1> 
   284 000014D4 8B442408            <1> 		mov		eax, [esp + 8]					; EAX = ESP[ 8];
   285 000014D8 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p3, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   285 000014DF [8D150000]50E80CFE- <1>
   285 000014E7 FFFF6683C414        <1>
   286                              <1> 
   287 000014ED 8B44240C            <1> 		mov		eax, [esp +12]					; EAX = ESP[12];
   288 000014F1 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p4, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   288 000014F8 [9E150000]50E8F3FD- <1>
   288 00001500 FFFF6683C414        <1>
   289                              <1> 
   290                              <1> 		;---------------------------------------
   291                              <1> 		; 文字列の表示
   292                              <1> 		;---------------------------------------
   293 00001506 68[64150000]68040F- <1> 		cdecl	draw_str, 25, 16, 0x0F04, .s1	; draw_str("ESP+ 0:-------- ");
   293 0000150E 00006A106A19E834FB- <1>
   293 00001517 FFFF6683C410        <1>
   294 0000151D 68[75150000]68040F- <1> 		cdecl	draw_str, 25, 17, 0x0F04, .s2	; draw_str("   + 4:-------- ");
   294 00001525 00006A116A19E81DFB- <1>
   294 0000152E FFFF6683C410        <1>
   295 00001534 68[86150000]68040F- <1> 		cdecl	draw_str, 25, 18, 0x0F04, .s3	; draw_str("   + 8:-------- ");
   295 0000153C 00006A126A19E806FB- <1>
   295 00001545 FFFF6683C410        <1>
   296 0000154B 68[97150000]68040F- <1> 		cdecl	draw_str, 25, 19, 0x0F04, .s4	; draw_str("   +12:-------- ");
   296 00001553 00006A136A19E8EFFA- <1>
   296 0000155C FFFF6683C410        <1>
   297                              <1> 
   298                              <1> 		;---------------------------------------
   299                              <1> 		; 無限ループ
   300                              <1> 		;---------------------------------------
   301 00001562 EBFE                <1> 		jmp		$								; while (1) ; // 無限ループ
   302                              <1> 
   303 00001564 4553502B20303A      <1> .s1		db	"ESP+ 0:"
   304 0000156B 5F5F5F5F5F5F5F5F20- <1> .p1		db	"________ ", 0
   304 00001574 00                  <1>
   305 00001575 2020202B20343A      <1> .s2		db	"   + 4:"
   306 0000157C 5F5F5F5F5F5F5F5F20- <1> .p2		db	"________ ", 0
   306 00001585 00                  <1>
   307 00001586 2020202B20383A      <1> .s3		db	"   + 8:"
   308 0000158D 5F5F5F5F5F5F5F5F20- <1> .p3		db	"________ ", 0
   308 00001596 00                  <1>
   309 00001597 2020202B31323A      <1> .s4		db	"   +12:"
   310 0000159E 5F5F5F5F5F5F5F5F20- <1> .p4		db	"________ ", 0
   310 000015A7 00                  <1>
   311                              <1> 
   312                              <1> ;************************************************************************
   313                              <1> ;	割り込み処理：デフォルトの処理
   314                              <1> ;************************************************************************
   315                              <1> int_default:
   316 000015A8 9C                  <1> 		pushf									; // EFLAGS(IF==0)
   317 000015A9 0E                  <1> 		push	cs								; // CS
   318 000015AA 68[8F140000]        <1> 		push	int_stop						; // スタック表示処理
   319                              <1> 
   320 000015AF B8[B5150000]        <1> 		mov		eax, .s0						; // 割り込み種別
   321 000015B4 CF                  <1> 		iret
   322                              <1> 
   323 000015B5 203C2020202053544F- <1> .s0		db	" <    STOP    > ", 0
   323 000015BE 50202020203E2000    <1>
   324                              <1> 
   325                              <1> ;************************************************************************
   326                              <1> ;	割り込み処理：ゼロ除算
   327                              <1> ;************************************************************************
   328                              <1> int_zero_div:
   329 000015C6 9C                  <1> 		pushf									; // EFLAGS
   330 000015C7 0E                  <1> 		push	cs								; // CS
   331 000015C8 68[8F140000]        <1> 		push	int_stop						; // スタック表示処理
   332                              <1> 
   333 000015CD B8[D3150000]        <1> 		mov		eax, .s0						; // 割り込み種別
   334 000015D2 CF                  <1> 		iret
   335                              <1> 
   336 000015D3 203C20205A45524F20- <1> .s0		db	" <  ZERO DIV  > ", 0
   336 000015DC 44495620203E2000    <1>
   337                              <1> 
   181                                  %include	"../modules/protect/pic.s"
   182                              <1> ;************************************************************************
   183                              <1> ;	割り込みコントローラの初期化
   184                              <1> ;========================================================================
   185                              <1> ;■書式		: void init_pic(void);
   186                              <1> ;
   187                              <1> ;■引数		: 無し
   188                              <1> ;
   189                              <1> ;■戻り値	: 無し
   190                              <1> ;************************************************************************
   191                              <1> init_pic:
   192                              <1> 		;---------------------------------------
   193                              <1> 		; 【レジスタの保存】
   194                              <1> 		;---------------------------------------
   195 000015E4 50                  <1> 		push	eax
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; マスタPICの設定
   199                              <1> 		;---------------------------------------
   200                              <1> 		outp	0x20, 0x11						; // MASTER.ICW1 = 0x11;
    72 000015E5 B011                <2>  mov al, %2
    73 000015E7 E620                <2>  out %1, al
   201                              <1> 		outp	0x21, 0x20						; // MASTER.ICW2 = 0x20;
    72 000015E9 B020                <2>  mov al, %2
    73 000015EB E621                <2>  out %1, al
   202                              <1> 		outp	0x21, 0x04						; // MASTER.ICW3 = 0x04;
    72 000015ED B004                <2>  mov al, %2
    73 000015EF E621                <2>  out %1, al
   203                              <1> 		outp	0x21, 0x01						; // MASTER.ICW4 = 0x01;
    72 000015F1 B001                <2>  mov al, %2
    73 000015F3 E621                <2>  out %1, al
   204                              <1> 		outp	0x21, 0xFF						; // マスタ割り込みマスク
    72 000015F5 B0FF                <2>  mov al, %2
    73 000015F7 E621                <2>  out %1, al
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; スレーブPICの設定
   208                              <1> 		;---------------------------------------
   209                              <1> 		outp	0xA0, 0x11						; // SLAVE.ICW1  = 0x11;
    72 000015F9 B011                <2>  mov al, %2
    73 000015FB E6A0                <2>  out %1, al
   210                              <1> 		outp	0xA1, 0x28						; // SLAVE.ICW2  = 0x28;
    72 000015FD B028                <2>  mov al, %2
    73 000015FF E6A1                <2>  out %1, al
   211                              <1> 		outp	0xA1, 0x02						; // SLAVE.ICW3  = 0x02;
    72 00001601 B002                <2>  mov al, %2
    73 00001603 E6A1                <2>  out %1, al
   212                              <1> 		outp	0xA1, 0x01						; // SLAVE.ICW4  = 0x01;
    72 00001605 B001                <2>  mov al, %2
    73 00001607 E6A1                <2>  out %1, al
   213                              <1> 		outp	0xA1, 0xFF						; // スレーブ割り込みマスク
    72 00001609 B0FF                <2>  mov al, %2
    73 0000160B E6A1                <2>  out %1, al
   214                              <1> 
   215                              <1> 		;---------------------------------------
   216                              <1> 		; 【レジスタの復帰】
   217                              <1> 		;---------------------------------------
   218 0000160D 58                  <1> 		pop		eax
   219                              <1> 
   220 0000160E C3                  <1> 		ret
   221                              <1> 
   182                                  %include	"../modules/protect/int_rtc.s"
   183                              <1> ;************************************************************************
   184                              <1> ;	RTCの割り込み許可設定
   185                              <1> ;========================================================================
   186                              <1> ;■書式		: void rtc_int_en(bit);
   187                              <1> ;
   188                              <1> ;■引数
   189                              <1> ;	bit		: 割り込みを許可するビット
   190                              <1> ;
   191                              <1> ;■戻り値	: 無し
   192                              <1> ;************************************************************************
   193                              <1> rtc_int_en:
   194                              <1> 		;---------------------------------------
   195                              <1> 		; 【スタックフレームの構築】
   196                              <1> 		;---------------------------------------
   197                              <1> 												; ------|--------
   198                              <1> 												;    + 8| ビット
   199                              <1> 												; ------|--------
   200                              <1> 												;    + 4| EIP（戻り番地）
   201 0000160F 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   202 00001610 89E5                <1> 		mov		ebp, esp						; ------+--------
   203                              <1> 
   204                              <1> 		;---------------------------------------
   205                              <1> 		; 【レジスタの保存】
   206                              <1> 		;---------------------------------------
   207 00001612 50                  <1> 		push	eax
   208                              <1> 
   209                              <1> 		;---------------------------------------
   210                              <1> 		; 割り込み許可設定
   211                              <1> 		;---------------------------------------
   212                              <1> 		outp	0x70, 0x0B						; outp(0x70, AL);   // レジスタBを選択
    72 00001613 B00B                <2>  mov al, %2
    73 00001615 E670                <2>  out %1, al
   213                              <1> 
   214 00001617 E471                <1> 		in		al, 0x71						; AL  = port(0x71); // レジスタBの
   215 00001619 0A4508              <1> 		or		al, [ebp + 8]					; AL |= ビット;     // 指定されたビットをセット
   216                              <1> 
   217 0000161C E671                <1> 		out		0x71, al						; outp(0x71, AL);   // レジスタBに書き込み
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 【レジスタの復帰】
   221                              <1> 		;---------------------------------------
   222 0000161E 58                  <1> 		pop		eax
   223                              <1> 
   224                              <1> 		;---------------------------------------
   225                              <1> 		; 【スタックフレームの破棄】
   226                              <1> 		;---------------------------------------
   227 0000161F 89EC                <1> 		mov		esp, ebp
   228 00001621 5D                  <1> 		pop		ebp
   229                              <1> 
   230 00001622 C3                  <1> 		ret
   231                              <1> 
   232                              <1> 
   233                              <1> ;************************************************************************
   234                              <1> ;	割り込み処理：RTC
   235                              <1> ;************************************************************************
   236                              <1> int_rtc:
   237                              <1> 		;---------------------------------------
   238                              <1> 		; 【レジスタの保存】
   239                              <1> 		;---------------------------------------
   240 00001623 60                  <1> 		pusha
   241 00001624 1E                  <1> 		push	ds
   242 00001625 06                  <1> 		push	es
   243                              <1> 
   244                              <1> 		;---------------------------------------
   245                              <1> 		; データ用セグメントセレクタの設定
   246                              <1> 		;---------------------------------------
   247 00001626 66B81000            <1> 		mov		ax, 0x0010						; 
   248 0000162A 8ED8                <1> 		mov		ds, ax							; 
   249 0000162C 8EC0                <1> 		mov		es, ax							; 
   250                              <1> 
   251                              <1> 		;---------------------------------------
   252                              <1> 		; RTCから時刻を取得
   253                              <1> 		;---------------------------------------
   254 0000162E 68[A4020000]E846FD- <1> 		cdecl	rtc_get_time, RTC_TIME			; EAX = get_time(&RTC_TIME);
   254 00001636 FFFF6683C404        <1>
   255                              <1> 												; 
   256                              <1> 		;---------------------------------------
   257                              <1> 		; RTCの割り込み要因を取得
   258                              <1> 		;---------------------------------------
   259                              <1> 		outp	0x70, 0x0C						; outp(0x70, 0x0C); // レジスタCを選択
    72 0000163C B00C                <2>  mov al, %2
    73 0000163E E670                <2>  out %1, al
   260 00001640 E471                <1> 		in		al, 0x71						; AL = inp();
   261                              <1> 
   262                              <1> 		;---------------------------------------
   263                              <1> 		; 割り込みフラグをクリア(EOI)
   264                              <1> 		;---------------------------------------
   265                              <1> 		outp	0xA0, 0x20						; outp(0xA0, EOI); // スレーブPIC
    72 00001642 B020                <2>  mov al, %2
    73 00001644 E6A0                <2>  out %1, al
   266                              <1> 		outp	0x20, 0x20						; outp(0x20, EOI); // マスタPIC
    72 00001646 B020                <2>  mov al, %2
    73 00001648 E620                <2>  out %1, al
   267                              <1> 
   268                              <1> 		;---------------------------------------
   269                              <1> 		; 【レジスタの復帰】
   270                              <1> 		;---------------------------------------
   271 0000164A 07                  <1> 		pop		es								; 
   272 0000164B 1F                  <1> 		pop		ds								; 
   273 0000164C 61                  <1> 		popa									; 
   274                              <1> 
   275 0000164D CF                  <1> 		iret									; 割り込み処理の終了
   276                              <1> 
   183                                  %include	"../modules/protect/int_keyboard.s"
   184                              <1> ;************************************************************************
   185                              <1> ;	割り込み処理：キーボード
   186                              <1> ;------------------------------------------------------------------------
   187                              <1> ;	KBC（キーボードコントローラ）からキーコードを取得して、
   188                              <1> ;	専用のリングバッファに保存する。
   189                              <1> ;************************************************************************
   190                              <1> int_keyboard:
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 【レジスタの保存】
   193                              <1> 		;---------------------------------------
   194 0000164E 60                  <1> 		pusha
   195 0000164F 1E                  <1> 		push	ds
   196 00001650 06                  <1> 		push	es
   197                              <1> 
   198                              <1> 		;---------------------------------------
   199                              <1> 		; データ用セグメントの設定
   200                              <1> 		;---------------------------------------
   201 00001651 66B81000            <1> 		mov		ax, 0x0010						; 
   202 00001655 8ED8                <1> 		mov		ds, ax							; 
   203 00001657 8EC0                <1> 		mov		es, ax							; 
   204                              <1> 
   205                              <1> 		;---------------------------------------
   206                              <1> 		; KBCのバッファ読み取り
   207                              <1> 		;---------------------------------------
   208 00001659 E460                <1> 		in		al, 0x60						; AL = キーコードの取得
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; キーコードの保存
   212                              <1> 		;---------------------------------------
   213 0000165B 5068[74160000]E856- <1> 		cdecl	ring_wr, _KEY_BUFF, eax			; ring_wr(_KEY_BUFF, EAX); // キーコードの保存
   213 00001663 0000006683C408      <1>
   214                              <1> 
   215                              <1> 		;---------------------------------------
   216                              <1> 		; 割り込み終了コマンド送信
   217                              <1> 		;---------------------------------------
   218                              <1> 		outp	0x20, 0x20						; outp(); // マスタPIC:EOIコマンド
    72 0000166A B020                <2>  mov al, %2
    73 0000166C E620                <2>  out %1, al
   219                              <1> 
   220                              <1> 		;---------------------------------------
   221                              <1> 		; 【レジスタの復帰】
   222                              <1> 		;---------------------------------------
   223 0000166E 07                  <1> 		pop		es								; 
   224 0000166F 1F                  <1> 		pop		ds								; 
   225 00001670 61                  <1> 		popa
   226                              <1> 
   227 00001671 CF                  <1> 		iret									; 割り込みからの復帰
   228                              <1> 
   229 00001672 00<rep 2h>          <1> ALIGN 4, db 0
   230 00001674 00<rep 18h>         <1> _KEY_BUFF:	times ring_buff_size db 0
   231                              <1> 
   184                                  %include	"../modules/protect/ring_buff.s"
   185                              <1> ;************************************************************************
   186                              <1> ;	リングバッファからデータを取得
   187                              <1> ;========================================================================
   188                              <1> ;■書式		: DWORD ring_rd(buff, data);
   189                              <1> ;
   190                              <1> ;■引数
   191                              <1> ;	buff	: リングバッファ
   192                              <1> ;	data	: 読み込んだデータの保存先アドレス
   193                              <1> ;
   194                              <1> ;■戻り値	: データあり(0以外)、データ無し(0)
   195                              <1> ;************************************************************************
   196                              <1> ring_rd:
   197                              <1> 		;---------------------------------------
   198                              <1> 		; 【スタックフレームの構築】
   199                              <1> 		;---------------------------------------
   200                              <1> 												; ------|--------
   201                              <1> 												;    +12| リングデータ
   202                              <1> 												;    + 8| データアドレス
   203                              <1> 												; ------|--------
   204                              <1> 												;    + 4| EIP（戻り番地）
   205 0000168C 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   206 0000168D 89E5                <1> 		mov		ebp, esp						; ------+--------
   207                              <1> 
   208                              <1> 		;---------------------------------------
   209                              <1> 		; 【レジスタの保存】
   210                              <1> 		;---------------------------------------
   211 0000168F 53                  <1> 		push	ebx
   212 00001690 56                  <1> 		push	esi
   213 00001691 57                  <1> 		push	edi
   214                              <1> 
   215                              <1> 		;---------------------------------------
   216                              <1> 		; 引数を取得
   217                              <1> 		;---------------------------------------
   218 00001692 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   219 00001695 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = データアドレス;
   220                              <1> 
   221                              <1> 		;---------------------------------------
   222                              <1> 		; 読み込み位置を確認
   223                              <1> 		;---------------------------------------
   224 00001698 B800000000          <1> 		mov		eax, 0							; EAX = 0;          // データ無し
   225 0000169D 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;         // 読み込み位置
   226 0000169F 3B5E04              <1> 		cmp		ebx, [esi + ring_buff.wp]		; if (EBX != wp)    // 書き込み位置と異なる
   227 000016A2 7411                <1> 		je		.10E							; {
   228                              <1> 												;   
   229 000016A4 8A441E08            <1> 		mov		al, [esi + ring_buff.item + ebx] ;   AL = BUFF[rp]; // キーコードを保存
   230                              <1> 												;   
   231 000016A8 8807                <1> 		mov		[edi], al						;   [EDI] = AL;     // データを保存
   232                              <1> 												;   
   233 000016AA 43                  <1> 		inc		ebx								;   EBX++;          // 次の読み込み位置
   234 000016AB 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= 0x0F     // サイズの制限
   235 000016AE 891E                <1> 		mov		[esi + ring_buff.rp], ebx		;   rp = EBX;       // 読み込み位置を保存
   236                              <1> 												;   
   237 000016B0 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // データあり
   238                              <1> .10E:											; }
   239                              <1> 
   240                              <1> 		;---------------------------------------
   241                              <1> 		; 【レジスタの復帰】
   242                              <1> 		;---------------------------------------
   243 000016B5 5F                  <1> 		pop		edi
   244 000016B6 5E                  <1> 		pop		esi
   245 000016B7 5B                  <1> 		pop		ebx
   246                              <1> 
   247                              <1> 		;---------------------------------------
   248                              <1> 		; 【スタックフレームの破棄】
   249                              <1> 		;---------------------------------------
   250 000016B8 89EC                <1> 		mov		esp, ebp
   251 000016BA 5D                  <1> 		pop		ebp
   252                              <1> 
   253 000016BB C3                  <1> 		ret
   254                              <1> 
   255                              <1> ;************************************************************************
   256                              <1> ;	リングバッファにデータを格納
   257                              <1> ;========================================================================
   258                              <1> ;■書式		: DWORD ring_wr(buff, data);
   259                              <1> ;
   260                              <1> ;■引数
   261                              <1> ;	buff	: リングバッファ
   262                              <1> ;	data	: 書き込むデータ
   263                              <1> ;
   264                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   265                              <1> ;************************************************************************
   266                              <1> ring_wr:
   267                              <1> 		;---------------------------------------
   268                              <1> 		; 【スタックフレームの構築】
   269                              <1> 		;---------------------------------------
   270                              <1> 												; ------|--------
   271                              <1> 												;    +12| リングデータ
   272                              <1> 												;    + 8| データ
   273                              <1> 												; ------|--------
   274                              <1> 												;    + 4| EIP（戻り番地）
   275 000016BC 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   276 000016BD 89E5                <1> 		mov		ebp, esp						; ------+--------
   277                              <1> 
   278                              <1> 		;---------------------------------------
   279                              <1> 		; 【レジスタの保存】
   280                              <1> 		;---------------------------------------
   281 000016BF 53                  <1> 		push	ebx
   282 000016C0 51                  <1> 		push	ecx
   283 000016C1 56                  <1> 		push	esi
   284                              <1> 
   285                              <1> 		;---------------------------------------
   286                              <1> 		; 引数を取得
   287                              <1> 		;---------------------------------------
   288 000016C2 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   289                              <1> 
   290                              <1> 		;---------------------------------------
   291                              <1> 		; 書き込み位置を確認
   292                              <1> 		;---------------------------------------
   293 000016C5 B800000000          <1> 		mov		eax, 0							; EAX  = 0;         // 失敗
   294 000016CA 8B5E04              <1> 		mov		ebx, [esi + ring_buff.wp]		; EBX  = wp;        // 書き込み位置
   295 000016CD 89D9                <1> 		mov		ecx, ebx						; ECX  = EBX;
   296 000016CF 41                  <1> 		inc		ecx								; ECX++;            // 次の書き込み位置
   297 000016D0 83E10F              <1> 		and		ecx, RING_INDEX_MASK			; ECX &= 0x0F       // サイズの制限
   298                              <1> 												; 
   299 000016D3 3B0E                <1> 		cmp		ecx, [esi + ring_buff.rp]		; if (ECX != rp)    // 読み込み位置と異なる
   300 000016D5 740F                <1> 		je		.10E							; {
   301                              <1> 												; 
   302 000016D7 8A450C              <1> 		mov		al, [ebp +12]					;   AL = データ;
   303                              <1> 												; 
   304 000016DA 88441E08            <1> 		mov		[esi + ring_buff.item + ebx], al ;   BUFF[wp] = AL; // キーコードを保存
   305 000016DE 894E04              <1> 		mov		[esi + ring_buff.wp], ecx		;   wp = ECX;       // 書き込み位置を保存
   306 000016E1 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // 成功
   307                              <1> .10E:											; }
   308                              <1> 
   309                              <1> 		;---------------------------------------
   310                              <1> 		; 【レジスタの復帰】
   311                              <1> 		;---------------------------------------
   312 000016E6 5E                  <1> 		pop		esi
   313 000016E7 59                  <1> 		pop		ecx
   314 000016E8 5B                  <1> 		pop		ebx
   315                              <1> 
   316                              <1> 		;---------------------------------------
   317                              <1> 		; 【スタックフレームの破棄】
   318                              <1> 		;---------------------------------------
   319 000016E9 89EC                <1> 		mov		esp, ebp
   320 000016EB 5D                  <1> 		pop		ebp
   321                              <1> 
   322 000016EC C3                  <1> 		ret
   323                              <1> 
   324                              <1> ;************************************************************************
   325                              <1> ;	リングバッファ内要素の表示
   326                              <1> ;========================================================================
   327                              <1> ;■書式		: void ring_show(col, row, buff);
   328                              <1> ;
   329                              <1> ;■引数
   330                              <1> ;	col		: 列
   331                              <1> ;	row		: 行
   332                              <1> ;	buff	: リングバッファ
   333                              <1> ;
   334                              <1> ;■戻り値	: 無し
   335                              <1> ;************************************************************************
   336                              <1> draw_key:
   337                              <1> 		;---------------------------------------
   338                              <1> 		; 【スタックフレームの構築】
   339                              <1> 		;---------------------------------------
   340                              <1> 												; ------|--------
   341                              <1> 												; EBP+16| リングバッファ
   342                              <1> 												; EBP+12| Y（行）
   343                              <1> 												; EBP+ 8| X（列）
   344                              <1> 												; ------|--------
   345 000016ED 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   346 000016EE 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   347                              <1> 												; ------|--------
   348                              <1> 
   349                              <1> 		;---------------------------------------
   350                              <1> 		; 【レジスタの保存】
   351                              <1> 		;---------------------------------------
   352 000016F0 60                  <1> 		pusha
   353                              <1> 
   354                              <1> 		;---------------------------------------
   355                              <1> 		; 引数を取得
   356                              <1> 		;---------------------------------------
   357 000016F1 8B5508              <1> 		mov		edx, [ebp + 8]					; EDX = X（列）;
   358 000016F4 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）;
   359 000016F7 8B7510              <1> 		mov		esi, [ebp +16]					; ESI = リングバッファ;
   360                              <1> 
   361                              <1> 		;---------------------------------------
   362                              <1> 		; リングバッファの情報を取得
   363                              <1> 		;---------------------------------------
   364 000016FA 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;             // 読み込み位置
   365 000016FC 8D7608              <1> 		lea		esi, [esi + ring_buff.item]		; ESI = &KEY_BUFF[EBX];
   366 000016FF B910000000          <1> 		mov		ecx, RING_ITEM_SIZE				; ECX = RING_ITEM_SIZE; // 要素数
   367                              <1> 
   368                              <1> 		;---------------------------------------
   369                              <1> 		; 文字に変換しながら表示
   370                              <1> 		;---------------------------------------
   371                              <1> .10L:											; do
   372                              <1> 												; {
   373 00001704 4B                  <1> 		dec		ebx								;   EBX--; // 読み込み位置
   374 00001705 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= RING_INDEX_MASK;
   375 00001708 8A041E              <1> 		mov		al, [esi + ebx]					;   EAX  = KEY_BUFF[EBX];
   376                              <1> 												;   
   377 0000170B 6A046A106A0268-     <1> 		cdecl	itoa, eax, .tmp, 2, 16, 0b0100	;   // キーコードを文字列に変換
   377 00001712 [3C170000]50E8D9FB- <1>
   377 0000171A FFFF6683C414        <1>
   378 00001720 68[3C170000]6A0257- <1> 		cdecl	draw_str, edx, edi, 0x02, .tmp	;   // 変換した文字列を表示
   378 00001728 52E81FF9FFFF6683C4- <1>
   378 00001731 10                  <1>
   379                              <1> 												;   
   380 00001732 83C203              <1> 		add		edx, 3							;   // 表示位置を更新（3文字分）
   381                              <1> 												;   
   382 00001735 E2CD                <1> 		loop	.10L							;   
   383                              <1> .10E:											; } while (ECX--);
   384                              <1> 
   385                              <1> 		;---------------------------------------
   386                              <1> 		; 【レジスタの復帰】
   387                              <1> 		;---------------------------------------
   388 00001737 61                  <1> 		popa
   389                              <1> 
   390                              <1> 		;---------------------------------------
   391                              <1> 		; 【スタックフレームの破棄】
   392                              <1> 		;---------------------------------------
   393 00001738 89EC                <1> 		mov		esp, ebp
   394 0000173A 5D                  <1> 		pop		ebp
   395                              <1> 
   396 0000173B C3                  <1> 		ret
   397                              <1> 
   398 0000173C 2D2D2000            <1> .tmp	db "-- ", 0
   185                                  %include	"../modules/protect/timer.s"
   186                              <1> ;************************************************************************
   187                              <1> ;	タイマーの設定
   188                              <1> ;------------------------------------------------------------------------
   189                              <1> ;	タイマー（カウンタ0）割り込み許可
   190                              <1> ;========================================================================
   191                              <1> ;■書式		: void int_en_timer0(void);
   192                              <1> ;
   193                              <1> ;■引数		: 無し
   194                              <1> ;
   195                              <1> ;■戻り値	: 無し
   196                              <1> ;************************************************************************
   197                              <1> int_en_timer0:
   198                              <1> 		;---------------------------------------
   199                              <1> 		; 【レジスタの保存】
   200                              <1> 		;---------------------------------------
   201 00001740 50                  <1> 		push	eax
   202                              <1> 
   203                              <1> 		;---------------------------------------
   204                              <1> 		;	8254 Timer
   205                              <1> 		;	0x2e9c(11932)=10[ms] @ CLK=1,193,182[Hz]
   206                              <1> 		;---------------------------------------
   207                              <1> 		 outp	 0x43, 0b_00_11_010_0			; // カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    72 00001741 B034                <2>  mov al, %2
    73 00001743 E643                <2>  out %1, al
   208                              <1> 		 outp	 0x40, 0x9C						; // 下位バイト
    72 00001745 B09C                <2>  mov al, %2
    73 00001747 E640                <2>  out %1, al
   209                              <1> 		 outp	 0x40, 0x2E						; // 上位バイト
    72 00001749 B02E                <2>  mov al, %2
    73 0000174B E640                <2>  out %1, al
   210                              <1> 
   211                              <1> 		;---------------------------------------
   212                              <1> 		; 【レジスタの復帰】
   213                              <1> 		;---------------------------------------
   214 0000174D 58                  <1> 		pop		eax
   215                              <1> 
   216 0000174E C3                  <1> 		ret
   217                              <1> 
   186                                  %include	"../modules/protect/draw_rotation_bar.s"
   187                              <1> ;************************************************************************
   188                              <1> ;	画面左下に、回転する棒を表示
   189                              <1> ;========================================================================
   190                              <1> ;■書式		: void draw_rotation_bar(void);
   191                              <1> ;
   192                              <1> ;■引数		: 無し
   193                              <1> ;
   194                              <1> ;■戻り値	: 無し
   195                              <1> ;************************************************************************
   196                              <1> draw_rotation_bar:
   197                              <1> 		;---------------------------------------
   198                              <1> 		; 【レジスタの保存】
   199                              <1> 		;---------------------------------------
   200 0000174F 50                  <1> 		push	eax
   201                              <1> 
   202                              <1> 		;---------------------------------------
   203                              <1> 		; タイマー割り込みカウンタを確認
   204                              <1> 		;---------------------------------------
   205 00001750 A1[B40A0000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX  = タイマー割り込みカウンタ
   206 00001755 C1E804              <1> 		shr		eax, 4							; EAX /= 4;    // 16で除算
   207 00001758 3B05[80170000]      <1> 		cmp		eax, [.index]					; if (EAX != 前回値)
   208 0000175E 741E                <1> 		je		.10E							; {
   209                              <1> 												;   
   210 00001760 A3[80170000]        <1> 		mov		[.index], eax					;   前回値 = EAX;
   211 00001765 83E003              <1> 		and		eax, 0x03						;   EAX &= 0x03; // 0～3に限定
   212                              <1> 												;   
   213 00001768 8A80[84170000]      <1> 		mov		al, [.table + eax]				;   AL = table[index];
   214 0000176E 506A0F6A1D6A00E8AD- <1> 		cdecl	draw_char, 0, 29, 0x000F, eax	;   draw_char(); // 文字を表示
   214 00001777 F7FFFF6683C410      <1>
   215                              <1> 												;   
   216                              <1> .10E:											; }
   217                              <1> 
   218                              <1> 		;---------------------------------------
   219                              <1> 		; 【レジスタの復帰】
   220                              <1> 		;---------------------------------------
   221 0000177E 58                  <1> 		pop		eax
   222                              <1> 
   223 0000177F C3                  <1> 		ret
   224                              <1> 
   225                              <1> ALIGN 4, db 0
   226 00001780 00000000            <1> .index:		dd 0								; 前回値
   227 00001784 7C2F2D5C            <1> .table:		db	"|/-\"							; 表示キャラクタ
   228                              <1> 
   187                                  %include	"../modules/protect/call_gate.s"
   188                              <1> ;************************************************************************
   189                              <1> ;	コールゲート関数
   190                              <1> ;************************************************************************
   191                              <1> call_gate:
   192                              <1> 		;---------------------------------------
   193                              <1> 		; 【スタックフレームの構築】
   194                              <1> 		;---------------------------------------
   195                              <1> 												; ------|--------
   196                              <1> 												; EBP+12| X（列）
   197                              <1> 												; EBP+16| Y（行）
   198                              <1> 												; EBP+20| 色
   199                              <1> 												; EBP+24| 文字
   200                              <1> 												; ---------------
   201                              <1> 												; EBP+ 8| CS（コードセグメント）
   202 00001788 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   203 00001789 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   204                              <1> 												; ---------------
   205                              <1> 		;---------------------------------------
   206                              <1> 		; 【レジスタの保存】
   207                              <1> 		;---------------------------------------
   208 0000178B 60                  <1> 		pusha
   209 0000178C 1E                  <1> 		push	ds
   210 0000178D 06                  <1> 		push	es
   211                              <1> 
   212                              <1> 		;---------------------------------------
   213                              <1> 		; データ用セグメントの設定
   214                              <1> 		;---------------------------------------
   215 0000178E 66B81000            <1> 		mov		ax, 0x0010						; 
   216 00001792 8ED8                <1> 		mov		ds, ax							; 
   217 00001794 8EC0                <1> 		mov		es, ax							; 
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 文字を表示
   221                              <1> 		;---------------------------------------
   222 00001796 8B450C              <1> 		mov		eax, dword [ebp +12]			; EAX = X（列）;
   223 00001799 8B5D10              <1> 		mov		ebx, dword [ebp +16]			; EBX = Y（行）;
   224 0000179C 8B4D14              <1> 		mov		ecx, dword [ebp +20]			; ECX = 色;
   225 0000179F 8B5518              <1> 		mov		edx, dword [ebp +24]			; EDX = 文字;
   226 000017A2 52515350E8A2F8FFFF- <1> 		cdecl	draw_str, eax, ebx , ecx, edx	; draw_str();
   226 000017AB 6683C410            <1>
   227                              <1> 
   228                              <1> 		;---------------------------------------
   229                              <1> 		; 【レジスタの復帰】
   230                              <1> 		;---------------------------------------
   231 000017AF 07                  <1> 		pop		es								; 
   232 000017B0 1F                  <1> 		pop		ds								; 
   233 000017B1 61                  <1> 		popa									; 
   234                              <1> 
   235                              <1> 		;---------------------------------------
   236                              <1> 		; 【スタックフレームの破棄】
   237                              <1> 		;---------------------------------------
   238 000017B2 89EC                <1> 		mov		esp, ebp
   239 000017B4 5D                  <1> 		pop		ebp
   240                              <1> 
   241 000017B5 CA1000              <1> 		retf	4 * 4
   242                              <1> 
   188                                  %include	"../modules/protect/trap_gate.s"
   189                              <1> ;************************************************************************
   190                              <1> ;	システムコール：1文字出力
   191                              <1> ;************************************************************************
   192                              <1> trap_gate_81:
   193                              <1> 		;---------------------------------------
   194                              <1> 		; 1文字出力
   195                              <1> 		;---------------------------------------
   196 000017B8 50535251E866F7FFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	; // 1文字出力
   196 000017C1 6683C410            <1>
   197                              <1> 
   198 000017C5 CF                  <1> 		iret
   199                              <1> 
   200                              <1> ;************************************************************************
   201                              <1> ;	システムコール：点の描画
   202                              <1> ;************************************************************************
   203                              <1> trap_gate_82:
   204                              <1> 		;---------------------------------------
   205                              <1> 		; 点の描画
   206                              <1> 		;---------------------------------------
   207 000017C6 535251E837F9FFFF66- <1> 		cdecl	draw_pixel, ecx, edx, ebx		; // 点の描画
   207 000017CF 83C40C              <1>
   208                              <1> 
   209 000017D2 CF                  <1> 		iret
   210                              <1> 
   189                                  %include	"../modules/protect/test_and_set.s"
   190                              <1> ;************************************************************************
   191                              <1> ;	RTCから時刻データを取得する
   192                              <1> ;========================================================================
   193                              <1> ;■書式		: void test_and_set(local);
   194                              <1> ;
   195                              <1> ;■引数
   196                              <1> ;	local	: ローカル変数のアドレス
   197                              <1> ;
   198                              <1> ;■戻り値	: 無し
   199                              <1> ;************************************************************************
   200                              <1> test_and_set:
   201                              <1> 		;---------------------------------------
   202                              <1> 		; 【スタックフレームの構築】
   203                              <1> 		;---------------------------------------
   204                              <1> 												; EBP+ 8| ローカル変数のアドレス
   205                              <1> 												; ------+----------------
   206 000017D3 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   207 000017D4 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   208                              <1> 												; ------+----------------
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 【レジスタの保存】
   212                              <1> 		;---------------------------------------
   213 000017D6 50                  <1> 		push	eax
   214 000017D7 53                  <1> 		push	ebx
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; テストアンドセット
   218                              <1> 		;---------------------------------------
   219 000017D8 B800000000          <1> 		mov		eax, 0							; local  = 0;
   220 000017DD 8B5D08              <1> 		mov		ebx, [ebp + 8]					; global = アドレス;
   221                              <1> 
   222                              <1> .10L:											; for ( ; ; )
   223                              <1> 												; {
   224 000017E0 F00FAB03            <1> 		lock bts [ebx], eax						;   CF = TEST_AND_SET(IN_USE, 1);
   225 000017E4 7307                <1> 		jnc		.10E							;   if (0 == CF)
   226                              <1> 												;     break;
   227                              <1> 												;   
   228                              <1> .12L:											;   for ( ; ; )
   229                              <1> 												;   {
   230 000017E6 0FA303              <1> 		bt		[ebx], eax						;     CF = TEST(IN_USE, 1);
   231 000017E9 72FB                <1> 		jc		.12L							;     if (0 == CF)
   232                              <1> 												;       break;
   233 000017EB EBF3                <1> 		jmp		.10L							;   }
   234                              <1> .10E:											; }
   235                              <1> 
   236                              <1> 		;---------------------------------------
   237                              <1> 		; 【レジスタの復帰】
   238                              <1> 		;---------------------------------------
   239 000017ED 5B                  <1> 		pop		ebx
   240 000017EE 58                  <1> 		pop		eax
   241                              <1> 
   242                              <1> 		;---------------------------------------
   243                              <1> 		; 【スタックフレームの破棄】
   244                              <1> 		;---------------------------------------
   245 000017EF 89EC                <1> 		mov		esp, ebp
   246 000017F1 5D                  <1> 		pop		ebp
   247                              <1> 
   248 000017F2 C3                  <1> 		ret
   249                              <1> 
   190                                  %include	"../modules/protect/int_nm.s"
   191                              <1> ;************************************************************************
   192                              <1> ;	割り込み処理：#NM(DNA:デバイス使用不可)
   193                              <1> ;************************************************************************
   194                              <1> int_nm:
   195                              <1> 		;---------------------------------------
   196                              <1> 		; 【レジスタの保存】
   197                              <1> 		;---------------------------------------
   198 000017F3 60                  <1> 		pusha
   199 000017F4 1E                  <1> 		push	ds
   200 000017F5 06                  <1> 		push	es
   201                              <1> 
   202                              <1> 		;---------------------------------------
   203                              <1> 		; カーネル用セレクタを設定
   204                              <1> 		;---------------------------------------
   205 000017F6 66B81000            <1> 		mov		ax, DS_KERNEL					;
   206 000017FA 8ED8                <1> 		mov		ds, ax							;
   207 000017FC 8EC0                <1> 		mov		es, ax							;
   208                              <1> 
   209                              <1> 		;---------------------------------------
   210                              <1> 		; タスクスイッチフラグをクリア
   211                              <1> 		;---------------------------------------
   212 000017FE 0F06                <1> 		clts									; CR0.TS = 0;
   213                              <1> 
   214                              <1> 		;---------------------------------------
   215                              <1> 		; 前回/今回FPUを使用するタスク
   216                              <1> 		;---------------------------------------
   217 00001800 8B3D[4C180000]      <1> 		mov		edi, [.last_tss]				; EDI = 前回FPUを使用したタスクのTSS
   218 00001806 0F00CE              <1> 		str		esi								; ESI = 今回FPUを使用したタスクのTSS
   219 00001809 83E6F8              <1> 		and		esi, ~0x0007					; // 特権レベルをマスク
   220                              <1> 
   221                              <1> 		;---------------------------------------
   222                              <1> 		; FPUの初回利用をチェック
   223                              <1> 		;---------------------------------------
   224 0000180C 83FF00              <1> 		cmp		edi, 0							; if (0 != EDI)     // 前回使用したタスク
   225 0000180F 7420                <1> 		je		.10F							; {
   226                              <1> 												;   
   227 00001811 39FE                <1> 		cmp		esi, edi						;   if (ESI != EDI) // 異なるタスク
   228 00001813 741A                <1> 		je		.12E							;   {
   229                              <1> 												;     
   230 00001815 FA                  <1> 		cli										;     // 割り込み禁止
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; 前回のFPUコンテキストを保存
   234                              <1> 		;---------------------------------------
   235 00001816 89FB                <1> 		mov		ebx, edi						;     // 前回のタスク
   236 00001818 E833000000          <1> 		call	get_tss_base					;     // TSSアドレスを取得
   237 0000181D E841000000          <1> 		call	save_fpu_context				;     // FPUのコンテキストを保存
   238                              <1> 
   239                              <1> 		;---------------------------------------
   240                              <1> 		; 今回のFPUコンテキストを復帰
   241                              <1> 		;---------------------------------------
   242 00001822 89F3                <1> 		mov		ebx, esi						;     // 今回のタスク
   243 00001824 E827000000          <1> 		call	get_tss_base					;     // TSSアドレスを取得
   244 00001829 E843000000          <1> 		call	load_fpu_context				;     // FPUのコンテキストを復帰
   245                              <1> 												;     
   246 0000182E FB                  <1> 		sti										;     // 割り込み許可
   247                              <1> .12E:											;   }
   248 0000182F EB0E                <1> 		jmp		.10E							; }
   249                              <1> .10F:											; else
   250                              <1> 												; {
   251                              <1> 												;   
   252 00001831 FA                  <1> 		cli										;   // 割り込み禁止
   253                              <1> 
   254                              <1> 		;---------------------------------------
   255                              <1> 		; 今回のFPUコンテキストを復帰
   256                              <1> 		;---------------------------------------
   257 00001832 89F3                <1> 		mov		ebx, esi						;   // 今回のタスク
   258 00001834 E817000000          <1> 		call	get_tss_base					;   // 現在のタスクのTSSアドレスを取得
   259 00001839 E833000000          <1> 		call	load_fpu_context				;   // FPUのコンテキストを復帰
   260                              <1> 												;   
   261 0000183E FB                  <1> 		sti										;   // 割り込み許可
   262                              <1> .10E:											; }
   263                              <1> 												; 
   264 0000183F 8935[4C180000]      <1> 		mov		[.last_tss], esi				; // FPUを使用したタスクを保存
   265                              <1> 
   266                              <1> 		;---------------------------------------
   267                              <1> 		; 【レジスタの復帰】
   268                              <1> 		;---------------------------------------
   269 00001845 07                  <1> 		pop		es
   270 00001846 1F                  <1> 		pop		ds
   271 00001847 61                  <1> 		popa
   272                              <1> 
   273 00001848 CF                  <1> 		iret
   274                              <1> 
   275 00001849 00<rep 3h>          <1> ALIGN 4, db 0
   276 0000184C 00000000            <1> .last_tss:	dd		0
   277                              <1> 
   278                              <1> ;************************************************************************
   279                              <1> ; GDTのセレクタのベースアドレスを取得
   280                              <1> ;------------------------------------------------------------------[IN]--
   281                              <1> ;	EBX : セレクタ
   282                              <1> ;-----------------------------------------------------------------[OUT]--
   283                              <1> ;	EAX : ベースアドレス
   284                              <1> ;************************************************************************
   285                              <1> get_tss_base:
   286 00001850 8B83[92080000]      <1> 		mov		eax, [GDT + ebx + 2]			; EAX   = TSS[23: 0];
   287 00001856 C1E008              <1> 		shl		eax, 8							; EAX <<= 8;
   288 00001859 8A83[97080000]      <1>         mov     al,  [GDT + ebx + 7]            ;  AL   = TSS[31:24];
   289 0000185F C1C808              <1> 		ror		eax, 8							; EAX >>= 8;
   290                              <1> 
   291 00001862 C3                  <1> 		ret
   292                              <1> 
   293                              <1> ;************************************************************************
   294                              <1> ; FPUのコンテキストを保存
   295                              <1> ;------------------------------------------------------------------[IN]--
   296                              <1> ;	EAX : TSSの先頭アドレス
   297                              <1> ;************************************************************************
   298                              <1> save_fpu_context:
   299 00001863 DD7068              <1> 		fnsave	[eax + 104]						; // FPUコンテキストを保存
   300 00001866 C780D4000000010000- <1> 		mov		[eax + 104 + 108], dword 1		; saved = 1;
   300 0000186F 00                  <1>
   301                              <1> 
   302 00001870 C3                  <1> 		ret
   303                              <1> 
   304                              <1> ;************************************************************************
   305                              <1> ; FPUのコンテキストを復帰
   306                              <1> ;------------------------------------------------------------------[IN]--
   307                              <1> ;	EAX : TSSの先頭アドレス
   308                              <1> ;************************************************************************
   309                              <1> load_fpu_context:
   310 00001871 83B8D400000000      <1> 		cmp		[eax + 104 + 108], dword 0		; if (0 == saved)
   311 00001878 7504                <1> 		jne		.10F							; {
   312 0000187A DBE3                <1> 		fninit									;    // FPUの初期化
   313 0000187C EB03                <1> 		jmp		.10E							; }
   314                              <1> .10F:											; else
   315                              <1> 												; {
   316 0000187E DD6068              <1> 		frstor	[eax + 104]						;   // FPUコンテキストを復帰
   317                              <1> .10E:											; }
   318 00001881 C3                  <1> 		ret
   319                              <1> 
   191                                  %include	"../modules/protect/wait_tick.s"
   192                              <1> ;************************************************************************
   193                              <1> ;	ウェイト
   194                              <1> ;------------------------------------------------------------------------
   195                              <1> ;	指定された回数、システム割り込みが発生するまで待つ
   196                              <1> ;========================================================================
   197                              <1> ;■書式		: void wait_tick(tick);
   198                              <1> ;
   199                              <1> ;■引数
   200                              <1> ;	tick	: システム割り込み回数
   201                              <1> ;
   202                              <1> ;■戻り値	: 無し
   203                              <1> ;************************************************************************
   204                              <1> wait_tick:
   205                              <1> 		;---------------------------------------
   206                              <1> 		; 【スタックフレームの構築】
   207                              <1> 		;---------------------------------------
   208                              <1> 												; ---------------
   209                              <1> 												; EBP+ 8| ウェイト
   210                              <1> 												; ---------------
   211 00001882 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   212 00001883 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   213                              <1> 												; ------|--------
   214                              <1> 
   215                              <1> 		;---------------------------------------
   216                              <1> 		; 【レジスタの保存】
   217                              <1> 		;---------------------------------------
   218 00001885 50                  <1> 		push	eax
   219 00001886 51                  <1> 		push	ecx
   220                              <1> 
   221                              <1> 		;---------------------------------------
   222                              <1> 		; ウェイト
   223                              <1> 		;---------------------------------------
   224 00001887 8B4D08              <1> 		mov		ecx, [ebp +  8]					; ECX = ウェイト回数
   225 0000188A A1[B40A0000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX = TIMER;
   226                              <1> 												; do
   227                              <1> 												; {
   228 0000188F 3905[B40A0000]      <1> .10L:	cmp		[TIMER_COUNT], eax				;   while (TIMER != EAX)
   229 00001895 74F8                <1> 		je		.10L							;     ;
   230 00001897 40                  <1> 		inc		eax								;   EAX++;
   231 00001898 E2F5                <1> 		loop	.10L							; } while (--ECX);
   232                              <1> 
   233                              <1> 		;---------------------------------------
   234                              <1> 		; レジスタの復帰
   235                              <1> 		;---------------------------------------
   236 0000189A 59                  <1> 		pop		ecx
   237 0000189B 58                  <1> 		pop		eax
   238                              <1> 
   239                              <1> 		;---------------------------------------
   240                              <1> 		; スタックフレームの破棄
   241                              <1> 		;---------------------------------------
   242 0000189C 89EC                <1> 		mov		esp, ebp
   243 0000189E 5D                  <1> 		pop		ebp
   244                              <1> 
   245 0000189F C3                  <1> 		ret
   246                              <1> 
   192                                  %include	"../modules/protect/memcpy.s"
   193                              <1> ;************************************************************************
   194                              <1> ;	メモリのコピー
   195                              <1> ;========================================================================
   196                              <1> ;■書式		: void memcpy(dst, src, size);
   197                              <1> ;
   198                              <1> ;■引数
   199                              <1> ;	dst		: コピー先
   200                              <1> ;	src		: コピー元
   201                              <1> ;	size	: バイト数
   202                              <1> ;
   203                              <1> ;■戻り値	: 無し
   204                              <1> ;************************************************************************
   205                              <1> memcpy:
   206                              <1> 		;---------------------------------------
   207                              <1> 		; 【スタックフレームの構築】
   208                              <1> 		;---------------------------------------
   209                              <1> 												; EBP+16| バイト数
   210                              <1> 												; EBP+12| コピー元
   211                              <1> 												; EBP+ 8| コピー先
   212                              <1> 												; ------|--------
   213 000018A0 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   214 000018A1 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   215                              <1> 												; ------|--------
   216                              <1> 		;---------------------------------------
   217                              <1> 		; 【レジスタの保存】
   218                              <1> 		;---------------------------------------
   219 000018A3 51                  <1> 		push	ecx
   220 000018A4 56                  <1> 		push	esi
   221 000018A5 57                  <1> 		push	edi
   222                              <1> 
   223                              <1> 		;---------------------------------------
   224                              <1> 		; バイト単位でのコピー
   225                              <1> 		;---------------------------------------
   226 000018A6 FC                  <1> 		cld										; DF   = 0; // +方向
   227 000018A7 8B7D08              <1> 		mov		edi, [ebp + 8]					; EDI  = コピー先;
   228 000018AA 8B750C              <1> 		mov		esi, [ebp +12]					; EDI  = コピー元;
   229 000018AD 8B4D10              <1> 		mov		ecx, [ebp +16]					; EDI  = バイト数;
   230 000018B0 F3A4                <1> 		rep movsb								; while (*EDI++ = *ESI++) ;
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; 【レジスタの復帰】
   234                              <1> 		;---------------------------------------
   235 000018B2 5F                  <1> 		pop		edi
   236 000018B3 5E                  <1> 		pop		esi
   237 000018B4 59                  <1> 		pop		ecx
   238                              <1> 
   239                              <1> 		;---------------------------------------
   240                              <1> 		; 【スタックフレームの破棄】
   241                              <1> 		;---------------------------------------
   242 000018B5 89EC                <1> 		mov		esp, ebp
   243 000018B7 5D                  <1> 		pop		ebp
   244                              <1> 
   245 000018B8 C3                  <1> 		ret
   246                              <1> 
   193                                  
   194                                  ;************************************************************************
   195                                  ;	パディング
   196                                  ;************************************************************************
   197 000018B9 00<rep 747h>            		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
   198                                  
