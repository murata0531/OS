     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  ;************************************************************************
     8                                  ;	マクロ
     9                                  ;************************************************************************
    10                                  %include	"../include/define.s"
    11                              <1> ;************************************************************************
    12                              <1> ;	メモリイメージ
    13                              <1> ;************************************************************************
    14                              <1> 
    15                              <1> 		;---------------------------------------
    16                              <1> 		;           |            | 
    17                              <1> 		;           |____________| 
    18                              <1> 		; 0000_7A00 |            | ( 512) スタック
    19                              <1> 		;           |____________| 
    20                              <1> 		; 0000_7C00 |            | (  8K) ブート
    21                              <1> 		;           =            = 
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    24                              <1> 		;           =            = 
    25                              <1> 		;           |____________| 
    26                              <1> 		; 0000_BC00 |////////////| 
    27                              <1> 		;           =            = 
    28                              <1> 		;           |____________| 
    29                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    32                              <1> 		;           |____________| 
    33                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    34                              <1> 		;           |            | 
    35                              <1> 		;           =            = 
    36                              <1> 		;           |____________| 
    37                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    38                              <1> 		;           |            | （各タスク1K）
    39                              <1> 		;           =            = 
    40                              <1> 		;           |____________| 
    41                              <1> 		; 0010_5000 |            | Dir
    42                              <1> 		;      6000 |____________| Page
    43                              <1> 		; 0010_7000 |            | Dir
    44                              <1> 		;      8000 |____________| Page
    45                              <1> 		; 0010_9000 |////////////| 
    46                              <1> 		;           |            | 
    47                              <1> 
    48                              <1> 
    49                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    50                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    51                              <1> 
    52                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    53                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    54                              <1> 
    55                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    56                              <1> 
    57                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    58                              <1> 
    59                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    60                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    61                              <1> 
    62                              <1> 		E820_RECORD_SIZE	equ		20
    63                              <1> 
    64                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    11                                  %include	"../include/macro.s"
    12                              <1> ;************************************************************************
    13                              <1> ; 関数呼び出し用マクロ
    14                              <1> ;
    15                              <1> ; 使い方：
    16                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    17                              <1> ;
    18                              <1> ;************************************************************************
    19                              <1> %macro  cdecl 1-*.nolist
    20                              <1> 
    21                              <1> 	%rep  %0 - 1
    22                              <1> 		push	%{-1:-1}
    23                              <1> 		%rotate -1
    24                              <1> 	%endrep 
    25                              <1> 	%rotate -1
    26                              <1> 
    27                              <1> 		call	%1
    28                              <1> 
    29                              <1> 	%if 1 < %0
    30                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    31                              <1> 	%endif
    32                              <1> 
    33                              <1> %endmacro
    34                              <1> 
    35                              <1> ;************************************************************************
    36                              <1> ; 割り込みベクタ設定用
    37                              <1> ;
    38                              <1> ; 使い方：
    39                              <1> ;	set_vect	ベクタ番号, 割り込み処理 [, フラグ]
    40                              <1> ;
    41                              <1> ;************************************************************************
    42                              <1> %macro  set_vect 1-*.nolist
    43                              <1> 		push	eax
    44                              <1> 		push	edi
    45                              <1> 
    46                              <1> 		mov		edi, VECT_BASE + (%1 * 8)		; ベクタアドレス;
    47                              <1> 		mov		eax, %2
    48                              <1> 
    49                              <1> 	%if 3 == %0
    50                              <1> 		mov		[edi + 4], %3					; フラグ
    51                              <1> 	%endif
    52                              <1> 
    53                              <1> 		mov		[edi + 0], ax					; 例外アドレス[15: 0]
    54                              <1> 		shr		eax, 16							; 
    55                              <1> 		mov		[edi + 6], ax					; 例外アドレス[31:16]
    56                              <1> 
    57                              <1> 		pop		edi
    58                              <1> 		pop		eax
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> ;************************************************************************
    62                              <1> ; ポート出力用
    63                              <1> ;
    64                              <1> ; 使い方：
    65                              <1> ;	outp	ポート番号, 出力値
    66                              <1> ;
    67                              <1> ;************************************************************************
    68                              <1> %macro  outp 2
    69                              <1> 		mov		al, %2
    70                              <1> 		out		%1, al
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> ;************************************************************************
    74                              <1> ; ディスクリプタの情報を設定
    75                              <1> ;
    76                              <1> ; 使い方：
    77                              <1> ;	set_desc	ディスクリプタ, ベース
    78                              <1> ;
    79                              <1> ;************************************************************************
    80                              <1> %macro  set_desc 2-* 
    81                              <1> 		push	eax
    82                              <1> 		push	edi
    83                              <1> 
    84                              <1> 		mov		edi, %1							; ディスクリプタアドレス
    85                              <1> 		mov		eax, %2							; ベースアドレス
    86                              <1> 
    87                              <1> 	%if 3 == %0
    88                              <1> 		mov		[edi + 0], %3					; リミット
    89                              <1> 	%endif
    90                              <1> 
    91                              <1> 		mov		[edi + 2], ax					; ベース（[15: 0]）
    92                              <1> 		shr		eax, 16							; 
    93                              <1> 		mov		[edi + 4], al					; ベース（[23:16]）
    94                              <1> 		mov		[edi + 7], ah					; ベース（[31:24]）
    95                              <1> 
    96                              <1> 		pop		edi
    97                              <1> 		pop		eax
    98                              <1> %endmacro
    99                              <1> 
   100                              <1> ;************************************************************************
   101                              <1> ; ゲートディスクリプタのオフセットを設定
   102                              <1> ;
   103                              <1> ; 使い方：
   104                              <1> ;	set_gate	ディスクリプタ, オフセット
   105                              <1> ;
   106                              <1> ;************************************************************************
   107                              <1> %macro  set_gate 2-* 
   108                              <1> 		push	eax
   109                              <1> 		push	edi
   110                              <1> 
   111                              <1> 		mov		edi, %1							; ディスクリプタアドレス
   112                              <1> 		mov		eax, %2							; ベースアドレス
   113                              <1> 
   114                              <1> 		mov		[edi + 0], ax					; ベース（[15: 0]）
   115                              <1> 		shr		eax, 16							; 
   116                              <1> 		mov		[edi + 6], ax					; ベース（[31:16]）
   117                              <1> 
   118                              <1> 		pop		edi
   119                              <1> 		pop		eax
   120                              <1> %endmacro
   121                              <1> 
   122                              <1> ;************************************************************************
   123                              <1> ;	構造体
   124                              <1> ;************************************************************************
   125                              <1> 
   126                              <1> ;-----------------------------------------------
   127                              <1> ;	ドライブパラメータ
   128                              <1> ;-----------------------------------------------
   129                              <1> struc drive
   130 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
   131 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
   132 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
   133 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
   134                              <1> endstruc
   135                              <1> 
   136                              <1> ;-----------------------------------------------
   137                              <1> ;	リングバッファ
   138                              <1> ;-----------------------------------------------
   139                              <1> %define		RING_ITEM_SIZE		(1 << 4)
   140                              <1> %define		RING_INDEX_MASK		(RING_ITEM_SIZE - 1)
   141                              <1> 
   142                              <1> struc ring_buff
   143 00000000 ????????            <1> 		.rp				resd	1				; RP:書き込み位置
   144 00000004 ????????            <1> 		.wp				resd	1				; WP:読み込み位置
   145 00000008 <res 10h>           <1> 		.item			resb	RING_ITEM_SIZE	; バッファ
   146                              <1> endstruc
   147                              <1> 
   148                              <1> ;-----------------------------------------------
   149                              <1> ;	バラ曲線描画パラメータ
   150                              <1> ;-----------------------------------------------
   151                              <1> struc rose
   152 00000000 ????????            <1> 		.x0				resd	1				; 左上座標：X0
   153 00000004 ????????            <1> 		.y0				resd	1				; 左上座標：Y0
   154 00000008 ????????            <1> 		.x1				resd	1				; 右下座標：X1
   155 0000000C ????????            <1> 		.y1				resd	1				; 右下座標：Y1
   156                              <1> 
   157 00000010 ????????            <1> 		.n				resd	1				; 変数：n
   158 00000014 ????????            <1> 		.d				resd	1				; 変数：d
   159                              <1> 
   160 00000018 ????????            <1> 		.color_x		resd	1				; 描画色：X軸
   161 0000001C ????????            <1> 		.color_y		resd	1				; 描画色：Y軸
   162 00000020 ????????            <1> 		.color_z		resd	1				; 描画色：枠
   163 00000024 ????????            <1> 		.color_s		resd	1				; 描画色：文字
   164 00000028 ????????            <1> 		.color_f		resd	1				; 描画色：グラフ描画色
   165 0000002C ????????            <1> 		.color_b		resd	1				; 描画色：グラフ消去色
   166                              <1> 
   167 00000030 <res 10h>           <1> 		.title			resb	16				; タイトル
   168                              <1> endstruc
   169                              <1> 
    12                                  
    13                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    14                                  
    15                                  [BITS 32]
    16                                  ;************************************************************************
    17                                  ;	エントリポイント
    18                                  ;************************************************************************
    19                                  kernel:
    20                                  		;---------------------------------------
    21                                  		; フォントアドレスを取得
    22                                  		;---------------------------------------
    23 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    24 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    25 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    26 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    27 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    28 00000011 A3[28010000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    29                                  
    30                                  		;---------------------------------------
    31                                  		; 初期化
    32                                  		;---------------------------------------
    33 00000016 E8D7060000              		cdecl	init_int						; // 割り込みベクタの初期化
    34 0000001B E858080000              		cdecl	init_pic						; // 割り込みコントローラの初期化
    35                                  
    36 00000020 5057BF00001000B8-       		set_vect	0x00, int_zero_div			; // 割り込み処理の登録：0除算
    36 00000028 [5A080000]668907C1-
    36 00000030 E810668947065F58   
    37 00000038 5057BF00011000B8-       		set_vect	0x20, int_timer				; // 割り込み処理の登録：タイマー
    37 00000040 [D4090000]668907C1-
    37 00000048 E810668947065F58   
    38 00000050 5057BF08011000B8-       		set_vect	0x21, int_keyboard			; // 割り込み処理の登録：KBC
    38 00000058 [E2080000]668907C1-
    38 00000060 E810668947065F58   
    39 00000068 5057BF40011000B8-       		set_vect	0x28, int_rtc				; // 割り込み処理の登録：RTC
    39 00000070 [B7080000]668907C1-
    39 00000078 E810668947065F58   
    40                                  
    41                                  		;---------------------------------------
    42                                  		; デバイスの割り込み許可
    43                                  		;---------------------------------------
    44 00000080 6A10E81C0800006683-     		cdecl	rtc_int_en, 0x10				; rtc_int_en(UIE); // 更新サイクル終了割り込み許可
    44 00000089 C404               
    45 0000008B E864090000              		cdecl	int_en_timer0					; // タイマー（カウンタ0）割り込み許可
    46                                  
    47                                  		;---------------------------------------
    48                                  		; IMR(割り込みマスクレジスタ)の設定
    49                                  		;---------------------------------------
    50                                  		outp	0x21, 0b_1111_1000				; // 割り込み有効：スレーブPIC/KBC/タイマー
    69 00000090 B0F8                <1>  mov al, %2
    70 00000092 E621                <1>  out %1, al
    51                                  		outp	0xA1, 0b_1111_1110				; // 割り込み有効：RTC
    69 00000094 B0FE                <1>  mov al, %2
    70 00000096 E6A1                <1>  out %1, al
    52                                  
    53                                  		;---------------------------------------
    54                                  		; CPUの割り込み許可
    55                                  		;---------------------------------------
    56 00000098 FB                      		sti										; // 割り込み許可
    57                                  
    58                                  		;---------------------------------------
    59                                  		; フォントの一覧表示
    60                                  		;---------------------------------------
    61 00000099 6A0D6A3FE805020000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
    61 000000A2 6683C408           
    62 000000A6 6A046A3FE886020000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
    62 000000AF 6683C408           
    63                                  
    64                                  		;---------------------------------------
    65                                  		; 文字列の表示
    66                                  		;---------------------------------------
    67 000000B3 68[13010000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
    67 000000BB 00006A0E6A19E82602-
    67 000000C4 00006683C410       
    68                                  
    69                                  .10L:											; while (;;)
    70                                  												; {
    71                                  		;---------------------------------------
    72                                  		; 時刻の表示
    73                                  		;---------------------------------------
    74 000000CA A1[2C010000]            		mov		eax, [RTC_TIME]					;   // 時刻の取得
    75 000000CF 5068000700006A006A-     		cdecl	draw_time, 72, 0, 0x0700, eax	;   // 時刻の表示
    75 000000D8 48E8760500006683C4-
    75 000000E1 10                 
    76                                  
    77                                  		;---------------------------------------
    78                                  		; 回転する棒を表示
    79                                  		;---------------------------------------
    80 000000E2 E81C090000              		cdecl	draw_rotation_bar				;   // 回転する棒を表示
    81                                  
    82                                  		;---------------------------------------
    83                                  		; キーコードの取得
    84                                  		;---------------------------------------
    85 000000E7 68[24010000]68-         		cdecl	ring_rd, _KEY_BUFF, .int_key	;   EAX = ring_rd(buff, &int_key);
    85 000000ED [08090000]E82A0800-
    85 000000F5 006683C408         
    86 000000FA 83F800                  		cmp		eax, 0							;   if (EAX == 0)
    87 000000FD 7412                    		je		.10E							;   {
    88                                  												;   
    89                                  		;---------------------------------------
    90                                  		; キーコードの表示
    91                                  		;---------------------------------------
    92 000000FF 68[08090000]6A1D6A-     		cdecl	draw_key, 2, 29, _KEY_BUFF		;     ring_show(key_buff); // 全要素を表示
    92 00000107 02E8740800006683C4-
    92 00000110 0C                 
    93                                  .10E:											;   }
    94 00000111 EBB7                    		jmp		.10L							; }
    95                                  
    96 00000113 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
    96 0000011C 65726E656C212000   
    97                                  
    98                                  ALIGN 4, db 0
    99 00000124 00000000                .int_key:	dd	0
   100                                  
   101                                  ALIGN 4, db 0
   102 00000128 00000000                FONT_ADR:	dd	0
   103 0000012C 00000000                RTC_TIME:	dd	0
   104                                  
   105                                  ;************************************************************************
   106                                  ;	モジュール
   107                                  ;************************************************************************
   108                                  %include	"../modules/protect/vga.s"
   109                              <1> ;************************************************************************
   110                              <1> ;	読み込みプレーンの選択
   111                              <1> ;========================================================================
   112                              <1> ;■書式		: void vga_set_read_plane(plane);
   113                              <1> ;
   114                              <1> ;■引数
   115                              <1> ;	plane	: 読み込みプレーン
   116                              <1> ;
   117                              <1> ;■戻り値	: 無し
   118                              <1> ;************************************************************************
   119                              <1> vga_set_read_plane:
   120                              <1> 		;---------------------------------------
   121                              <1> 		; 【スタックフレームの構築】
   122                              <1> 		;---------------------------------------
   123                              <1> 												; EBP+ 8| プレーン（インデックス）
   124                              <1> 												; ------+----------------
   125 00000130 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   126 00000131 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   127                              <1> 												; ------+----------------
   128                              <1> 
   129                              <1> 		;---------------------------------------
   130                              <1> 		; 【レジスタの保存】
   131                              <1> 		;---------------------------------------
   132 00000133 50                  <1> 		push	eax
   133 00000134 52                  <1> 		push	edx
   134                              <1> 
   135                              <1> 		;---------------------------------------
   136                              <1> 		; 読み込みプレーンの選択
   137                              <1> 		;---------------------------------------
   138 00000135 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
   139 00000138 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
   140 0000013B B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
   141 0000013D 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
   142 00000141 66EF                <1> 		out		dx, ax							; // ポート出力
   143                              <1> 
   144                              <1> 		;---------------------------------------
   145                              <1> 		; 【レジスタの復帰】
   146                              <1> 		;---------------------------------------
   147 00000143 5A                  <1> 		pop		edx
   148 00000144 58                  <1> 		pop		eax
   149                              <1> 
   150                              <1> 		;---------------------------------------
   151                              <1> 		; 【スタックフレームの破棄】
   152                              <1> 		;---------------------------------------
   153 00000145 89EC                <1> 		mov		esp, ebp
   154 00000147 5D                  <1> 		pop		ebp
   155                              <1> 
   156 00000148 C3                  <1> 		ret
   157                              <1> 
   158                              <1> 
   159                              <1> ;************************************************************************
   160                              <1> ;	書き込みプレーンを選択
   161                              <1> ;========================================================================
   162                              <1> ;■書式		: void vga_set_write_plane(plane);
   163                              <1> ;
   164                              <1> ;■引数
   165                              <1> ;	plane	: 書き込みプレーン
   166                              <1> ;
   167                              <1> ;■戻り値	: 無し
   168                              <1> ;************************************************************************
   169                              <1> vga_set_write_plane:
   170                              <1> 		;---------------------------------------
   171                              <1> 		; 【スタックフレームの構築】
   172                              <1> 		;---------------------------------------
   173                              <1> 												; EBP+ 8| プレーン（ビット指定）
   174                              <1> 												; ------+----------------
   175 00000149 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   176 0000014A 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   177                              <1> 												; ------+----------------
   178                              <1> 
   179                              <1> 		;---------------------------------------
   180                              <1> 		; 【レジスタの保存】
   181                              <1> 		;---------------------------------------
   182 0000014C 50                  <1> 		push	eax
   183 0000014D 52                  <1> 		push	edx
   184                              <1> 
   185                              <1> 		;---------------------------------------
   186                              <1> 		; 書き込みプレーンの選択
   187                              <1> 		;---------------------------------------
   188 0000014E 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
   189 00000151 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
   190 00000154 B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
   191 00000156 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
   192 0000015A 66EF                <1> 		out		dx, ax							; // ポート出力
   193                              <1> 
   194                              <1> 		;---------------------------------------
   195                              <1> 		; 【レジスタの復帰】
   196                              <1> 		;---------------------------------------
   197 0000015C 5A                  <1> 		pop		edx
   198 0000015D 58                  <1> 		pop		eax
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 【スタックフレームの破棄】
   202                              <1> 		;---------------------------------------
   203 0000015E 89EC                <1> 		mov		esp, ebp
   204 00000160 5D                  <1> 		pop		ebp
   205                              <1> 
   206 00000161 C3                  <1> 		ret
   207                              <1> 
   208                              <1> 
   209                              <1> ;************************************************************************
   210                              <1> ;	フォントの書き込み
   211                              <1> ;========================================================================
   212                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   213                              <1> ;
   214                              <1> ;■引数
   215                              <1> ;	font	: FONTアドレス
   216                              <1> ;	vram	: VRAMアドレス
   217                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   218                              <1> ;	color	: 描画色
   219                              <1> ;
   220                              <1> ;■戻り値	: 無し
   221                              <1> ;************************************************************************
   222                              <1> vram_font_copy:
   223                              <1> 		;---------------------------------------
   224                              <1> 		; 【スタックフレームの構築】
   225                              <1> 		;---------------------------------------
   226                              <1> 												; EBP+20| 色（背景/前景色）
   227                              <1> 												; EBP+16| プレーン（ビット指定）
   228                              <1> 												; EBP+12| VRAMアドレス
   229                              <1> 												; EBP+ 8| FONTアドレス
   230                              <1> 												; ------+----------------
   231 00000162 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   232 00000163 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   233                              <1> 												; ------+----------------
   234                              <1> 
   235                              <1> 		;---------------------------------------
   236                              <1> 		; 【レジスタの保存】
   237                              <1> 		;---------------------------------------
   238 00000165 50                  <1> 		push	eax
   239 00000166 53                  <1> 		push	ebx
   240 00000167 51                  <1> 		push	ecx
   241 00000168 52                  <1> 		push	edx
   242 00000169 56                  <1> 		push	esi
   243 0000016A 57                  <1> 		push	edi
   244                              <1> 
   245                              <1> 		;---------------------------------------
   246                              <1> 		; 【処理の開始】
   247                              <1> 		;---------------------------------------
   248 0000016B 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   249 0000016E 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   250 00000171 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   251 00000175 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   252                              <1> 
   253 00000179 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   254 0000017B 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   255 0000017E FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   256                              <1> 
   257 00000180 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   258 00000182 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   259 00000185 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   260                              <1> 
   261                              <1> 		;---------------------------------------
   262                              <1> 		; 16ドットフォントのコピー
   263                              <1> 		;---------------------------------------
   264 00000187 FC                  <1> 		cld										; DF  = 0; // アドレス加算
   265                              <1> 
   266 00000188 B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   267                              <1> .10L:											; do
   268                              <1> 												; {
   269                              <1> 		;---------------------------------------
   270                              <1> 		; フォントマスクの作成
   271                              <1> 		;---------------------------------------
   272 0000018D AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   273 0000018E 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   274 00000190 F6D4                <1> 		not		ah								;   
   275                              <1> 
   276                              <1> 		;---------------------------------------
   277                              <1> 		; 前景色
   278                              <1> 		;---------------------------------------
   279 00000192 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   280                              <1> 
   281                              <1> 		;---------------------------------------
   282                              <1> 		; 背景色
   283                              <1> 		;---------------------------------------
   284 00000194 F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   285 0000019A 7404                <1> 		jz		.11F							;   {
   286 0000019C 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   287 0000019E EB02                <1> 		jmp		.11E							;   }
   288                              <1> .11F:											;   else
   289                              <1> 												;   {
   290 000001A0 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   291                              <1> .11E:											;   }
   292                              <1> 
   293                              <1> 		;---------------------------------------
   294                              <1> 		; 前景色と背景色を合成
   295                              <1> 		;---------------------------------------
   296 000001A2 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   297                              <1> 
   298                              <1> 		;---------------------------------------
   299                              <1> 		; 新しい値を出力
   300                              <1> 		;---------------------------------------
   301 000001A4 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   302                              <1> 
   303 000001A6 83C750              <1> 		add		edi, 80							;   EDI += 80;
   304 000001A9 E2E2                <1> 		loop	.10L							; } while (--ECX);
   305                              <1> .10E:											; 
   306                              <1> 
   307                              <1> 		;---------------------------------------
   308                              <1> 		; 【レジスタの復帰】
   309                              <1> 		;---------------------------------------
   310 000001AB 5F                  <1> 		pop		edi
   311 000001AC 5E                  <1> 		pop		esi
   312 000001AD 5A                  <1> 		pop		edx
   313 000001AE 59                  <1> 		pop		ecx
   314 000001AF 5B                  <1> 		pop		ebx
   315 000001B0 58                  <1> 		pop		eax
   316                              <1> 
   317                              <1> 		;---------------------------------------
   318                              <1> 		; 【スタックフレームの破棄】
   319                              <1> 		;---------------------------------------
   320 000001B1 89EC                <1> 		mov		esp, ebp
   321 000001B3 5D                  <1> 		pop		ebp
   322                              <1> 
   323 000001B4 C3                  <1> 		ret
   324                              <1> 
   325                              <1> 
   326                              <1> ;************************************************************************
   327                              <1> ;	ビットパターンの書き込み
   328                              <1> ;========================================================================
   329                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   330                              <1> ;
   331                              <1> ;■引数
   332                              <1> ;	bit		: 出力ビットパターン
   333                              <1> ;	vram	: VRAMアドレス
   334                              <1> ;	flag	: 1:セット, 0:クリア
   335                              <1> ;
   336                              <1> ;■戻り値	: 無し
   337                              <1> ;************************************************************************
   338                              <1> vram_bit_copy:
   339                              <1> 		;---------------------------------------
   340                              <1> 		; 【スタックフレームの構築】
   341                              <1> 		;---------------------------------------
   342                              <1> 												; EBP+20| 色（背景/前景色）
   343                              <1> 												; EBP+16| プレーン（ビット指定）
   344                              <1> 												; EBP+12| VRAMアドレス
   345                              <1> 												; EBP+ 8| 出力ビットパターン
   346                              <1> 												; ------+----------------
   347 000001B5 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   348 000001B6 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   349                              <1> 												; ------+----------------
   350                              <1> 
   351                              <1> 		;---------------------------------------
   352                              <1> 		; 【レジスタの保存】
   353                              <1> 		;---------------------------------------
   354 000001B8 50                  <1> 		push	eax
   355 000001B9 53                  <1> 		push	ebx
   356 000001BA 57                  <1> 		push	edi
   357                              <1> 
   358                              <1> 		;---------------------------------------
   359                              <1> 		; 【処理の開始】
   360                              <1> 		;---------------------------------------
   361 000001BB 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   362 000001BE 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   363 000001C2 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   364                              <1> 
   365 000001C6 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   366 000001C8 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   367 000001CB FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   368                              <1> 
   369                              <1> 		;---------------------------------------
   370                              <1> 		; マスクデータの作成
   371                              <1> 		;---------------------------------------
   372 000001CD 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   373 000001D0 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   374 000001D2 F6D4                <1> 		not		ah								; 
   375                              <1> 
   376                              <1> 		;---------------------------------------
   377                              <1> 		; 現在値の出力を取得
   378                              <1> 		;---------------------------------------
   379 000001D4 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   380 000001D6 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   381 000001D8 08E0                <1> 		or		al, ah							; AL |= AH;
   382                              <1> 
   383                              <1> 		;---------------------------------------
   384                              <1> 		; 新しい値を出力
   385                              <1> 		;---------------------------------------
   386 000001DA 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   387                              <1> 
   388                              <1> 		;---------------------------------------
   389                              <1> 		; 【レジスタの復帰】
   390                              <1> 		;---------------------------------------
   391 000001DC 5F                  <1> 		pop		edi
   392 000001DD 5B                  <1> 		pop		ebx
   393 000001DE 58                  <1> 		pop		eax
   394                              <1> 
   395                              <1> 		;---------------------------------------
   396                              <1> 		; 【スタックフレームの破棄】
   397                              <1> 		;---------------------------------------
   398 000001DF 89EC                <1> 		mov		esp, ebp
   399 000001E1 5D                  <1> 		pop		ebp
   400                              <1> 
   401 000001E2 C3                  <1> 		ret
   109                                  %include	"../modules/protect/draw_char.s"
   110                              <1> ;************************************************************************
   111                              <1> ;	文字の表示
   112                              <1> ;------------------------------------------------------------------------
   113                              <1> ;	グラフィックスモードでテキストを表示
   114                              <1> ;========================================================================
   115                              <1> ;■書式		: void draw_char(col, row, color, ch);
   116                              <1> ;
   117                              <1> ;■引数
   118                              <1> ;	col		: 列（0～79）
   119                              <1> ;	row		: 行（0～29）
   120                              <1> ;	color	: 描画色
   121                              <1> ;	ch		: 文字
   122                              <1> ;
   123                              <1> ;■戻り値	: 無し
   124                              <1> ;************************************************************************
   125                              <1> draw_char:
   126                              <1> 		;---------------------------------------
   127                              <1> 		; 【スタックフレームの構築】
   128                              <1> 		;---------------------------------------
   129                              <1> 												; ------|--------
   130                              <1> 												; EBP+20| 文字
   131                              <1> 												; EBP+16| 色
   132                              <1> 												; EBP+12| Y（行）
   133                              <1> 												; EBP+ 8| X（列）
   134                              <1> 												; ------+----------------
   135 000001E3 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   136 000001E4 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   137                              <1> 												; ------+----------------
   138                              <1> 
   139                              <1> 		;---------------------------------------
   140                              <1> 		; 【レジスタの保存】
   141                              <1> 		;---------------------------------------
   142 000001E6 50                  <1> 		push	eax
   143 000001E7 53                  <1> 		push	ebx
   144 000001E8 51                  <1> 		push	ecx
   145 000001E9 52                  <1> 		push	edx
   146 000001EA 56                  <1> 		push	esi
   147 000001EB 57                  <1> 		push	edi
   148                              <1> 
   149                              <1> 		;---------------------------------------
   150                              <1> 		; テストアンドセット
   151                              <1> 		;---------------------------------------
   152                              <1> %ifdef	USE_TEST_AND_SET
   153                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   154                              <1> %endif
   155                              <1> 
   156                              <1> 		;---------------------------------------
   157                              <1> 		; コピー元フォントアドレスを設定
   158                              <1> 		;---------------------------------------
   159 000001EC 0FB67514            <1> 		movzx	esi, byte [ebp +20]				; CL  = 文字コード;
   160 000001F0 C1E604              <1> 		shl		esi, 4							; CL *= 16; // 1文字16バイト
   161 000001F3 0335[28010000]      <1> 		add		esi, [FONT_ADR]					; ESI = フォントアドレス;
   162                              <1> 
   163                              <1> 		;---------------------------------------
   164                              <1> 		; コピー先アドレスを取得
   165                              <1> 		; Adr = 0xA0000 + (640 / 8 * 16) * y + x
   166                              <1> 		;---------------------------------------
   167 000001F9 8B7D0C              <1> 		mov		edi, [ebp +12]					; Y（行）
   168 000001FC C1E708              <1> 		shl		edi, 8							; EDI = Y * 256;
   169 000001FF 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA0000]	; EDI = Y *   4 + Y;
   170 00000206 037D08              <1> 		add		edi, [ebp + 8]					; X（列）
   171                              <1> 
   172                              <1> 		;---------------------------------------
   173                              <1> 		; 1文字分のフォントを出力
   174                              <1> 		;---------------------------------------
   175 00000209 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
   176                              <1> 
   177 0000020D 6A03E81CFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
   177 00000216 C404                <1>
   178 00000218 6A08E82AFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
   178 00000221 C404                <1>
   179 00000223 536A085756E835FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
   179 0000022C FF6683C410          <1>
   180                              <1> 
   181 00000231 6A02E8F8FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
   181 0000023A C404                <1>
   182 0000023C 6A04E806FFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
   182 00000245 C404                <1>
   183 00000247 536A045756E811FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
   183 00000250 FF6683C410          <1>
   184                              <1> 
   185 00000255 6A01E8D4FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
   185 0000025E C404                <1>
   186 00000260 6A02E8E2FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
   186 00000269 C404                <1>
   187 0000026B 536A025756E8EDFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
   187 00000274 FF6683C410          <1>
   188                              <1> 
   189 00000279 6A00E8B0FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
   189 00000282 C404                <1>
   190 00000284 6A01E8BEFEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
   190 0000028D C404                <1>
   191 0000028F 536A015756E8C9FEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
   191 00000298 FF6683C410          <1>
   192                              <1> 
   193                              <1> %ifdef	USE_TEST_AND_SET
   194                              <1> 		;---------------------------------------
   195                              <1> 		; テストアンドセット
   196                              <1> 		;---------------------------------------
   197                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   198                              <1> %endif
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 【レジスタの復帰】
   202                              <1> 		;---------------------------------------
   203 0000029D 5F                  <1> 		pop		edi
   204 0000029E 5E                  <1> 		pop		esi
   205 0000029F 5A                  <1> 		pop		edx
   206 000002A0 59                  <1> 		pop		ecx
   207 000002A1 5B                  <1> 		pop		ebx
   208 000002A2 58                  <1> 		pop		eax
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 【スタックフレームの破棄】
   212                              <1> 		;---------------------------------------
   213 000002A3 89EC                <1> 		mov		esp, ebp
   214 000002A5 5D                  <1> 		pop		ebp
   215                              <1> 
   216 000002A6 C3                  <1> 		ret
   217                              <1> 
   218                              <1> %ifdef USE_TEST_AND_SET
   219                              <1> ALIGN 4, db 0
   220                              <1> IN_USE:	dd	0
   221                              <1> %endif
   222                              <1> 
   110                                  %include	"../modules/protect/draw_font.s"
   111                              <1> ;************************************************************************
   112                              <1> ;	フォント一覧を表示
   113                              <1> ;========================================================================
   114                              <1> ;■書式		: void draw_font(col, row);
   115                              <1> ;
   116                              <1> ;■引数
   117                              <1> ;	col		: 列
   118                              <1> ;	row		: 行
   119                              <1> ;
   120                              <1> ;■戻り値	: 無し
   121                              <1> ;************************************************************************
   122                              <1> draw_font:
   123                              <1> 		;---------------------------------------
   124                              <1> 		; 【スタックフレームの構築】
   125                              <1> 		;---------------------------------------
   126                              <1> 												; ------|--------
   127                              <1> 												; EBP+12| Y（行）
   128                              <1> 												; EBP+ 8| X（列）
   129                              <1> 												; ---------------
   130 000002A7 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   131 000002A8 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   132                              <1> 												; ---------------
   133                              <1> 
   134                              <1> 		;---------------------------------------
   135                              <1> 		; 【レジスタの保存】
   136                              <1> 		;---------------------------------------
   137 000002AA 50                  <1> 		push	eax
   138 000002AB 53                  <1> 		push	ebx
   139 000002AC 51                  <1> 		push	ecx
   140 000002AD 52                  <1> 		push	edx
   141 000002AE 56                  <1> 		push	esi
   142 000002AF 57                  <1> 		push	edi
   143                              <1> 
   144                              <1> 		;---------------------------------------
   145                              <1> 		; 表示位置
   146                              <1> 		;---------------------------------------
   147 000002B0 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   148 000002B3 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   149                              <1> 
   150                              <1> 		;---------------------------------------
   151                              <1> 		; フォント一覧を表示
   152                              <1> 		;---------------------------------------
   153 000002B6 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   154 000002BB 81F900010000        <1> .10L:	cmp		ecx, 256						;      ECX < 256;
   155 000002C1 731F                <1> 		jae		.10E							; 
   156                              <1> 												;      ECX++)
   157                              <1> 												; {
   158                              <1> 												;   // 桁位置の計算
   159 000002C3 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   160 000002C5 83E00F              <1> 		and		eax, 0x0F						;   EAX &= 0x0F
   161 000002C8 01F0                <1> 		add		eax, esi						;   EAX += X;
   162                              <1> 												;   
   163                              <1> 												;   // 行位置の計算
   164 000002CA 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   165 000002CC C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
   166 000002CF 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   167                              <1> 
   168 000002D1 516A075350E808FFFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
   168 000002DA FF6683C410          <1>
   169                              <1> 
   170 000002DF 41                  <1> 		inc		ecx								;   // for (... ECX++)
   171 000002E0 EBD9                <1> 		jmp		.10L							; 
   172                              <1> .10E:											; }
   173                              <1> 
   174                              <1> 		;---------------------------------------
   175                              <1> 		; 【レジスタの復帰】
   176                              <1> 		;---------------------------------------
   177 000002E2 5F                  <1> 		pop		edi
   178 000002E3 5E                  <1> 		pop		esi
   179 000002E4 5A                  <1> 		pop		edx
   180 000002E5 59                  <1> 		pop		ecx
   181 000002E6 5B                  <1> 		pop		ebx
   182 000002E7 58                  <1> 		pop		eax
   183                              <1> 
   184                              <1> 		;---------------------------------------
   185                              <1> 		; 【スタックフレームの破棄】
   186                              <1> 		;---------------------------------------
   187 000002E8 89EC                <1> 		mov		esp, ebp
   188 000002EA 5D                  <1> 		pop		ebp
   189                              <1> 
   190 000002EB C3                  <1> 		ret
   191                              <1> 
   111                                  %include	"../modules/protect/draw_str.s"
   112                              <1> ;************************************************************************
   113                              <1> ;	文字列の表示
   114                              <1> ;========================================================================
   115                              <1> ;■書式		: void draw_str(col, row, color, p);
   116                              <1> ;
   117                              <1> ;■引数
   118                              <1> ;	col		: 列
   119                              <1> ;	row		: 行
   120                              <1> ;	color	: 描画色
   121                              <1> ;	p		: 文字列のアドレス
   122                              <1> ;
   123                              <1> ;■戻り値	: 無し
   124                              <1> ;************************************************************************
   125                              <1> draw_str:
   126                              <1> 		;---------------------------------------
   127                              <1> 		; 【スタックフレームの構築】
   128                              <1> 		;---------------------------------------
   129                              <1> 												; ------|--------
   130                              <1> 												; EBP+20| *p（文字列のアドレス）
   131                              <1> 												; EBP+16| color（色）
   132                              <1> 												; EBP+12| row（行）
   133                              <1> 												; EBP+ 8| col（列）
   134                              <1> 												; ---------------
   135 000002EC 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   136 000002ED 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   137                              <1> 												; ---------------
   138                              <1> 
   139                              <1> 		;---------------------------------------
   140                              <1> 		; 【レジスタの保存】
   141                              <1> 		;---------------------------------------
   142 000002EF 50                  <1> 		push	eax
   143 000002F0 53                  <1> 		push	ebx
   144 000002F1 51                  <1> 		push	ecx
   145 000002F2 52                  <1> 		push	edx
   146 000002F3 56                  <1> 		push	esi
   147                              <1> 
   148                              <1> 		;---------------------------------------
   149                              <1> 		; 文字列の表示
   150                              <1> 		;---------------------------------------
   151 000002F4 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
   152 000002F7 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
   153 000002FA 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
   154 000002FE 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
   155                              <1> 
   156 00000301 FC                  <1> 		cld										; DF = 0; // アドレス加算
   157                              <1> .10L:											; do
   158                              <1> 												; {
   159 00000302 AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
   160 00000303 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   161 00000305 7425                <1> 		je		.10E							;     break;
   162                              <1> 
   163                              <1> 		;---------------------------------------
   164                              <1> 		; 1文字表示
   165                              <1> 		;---------------------------------------
   166                              <1> %ifdef	USE_SYSTEM_CALL
   167                              <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
   168                              <1> %else
   169 00000307 50535251E8D3FEFFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
   169 00000310 6683C410            <1>
   170                              <1> %endif
   171                              <1> 
   172                              <1> 		; 次の文字の位置を調整
   173 00000314 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
   174 00000315 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
   175 00000318 7C10                <1> 		jl		.12E							;   {
   176 0000031A B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
   177 0000031F 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
   178 00000320 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
   179 00000323 7C05                <1> 		jl		.12E							;     {
   180 00000325 BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
   181                              <1> 												;     }
   182                              <1> .12E:											;   }
   183 0000032A EBD6                <1> 		jmp		.10L							;   
   184                              <1> .10E:											; } while (1);
   185                              <1> 
   186                              <1> 		;---------------------------------------
   187                              <1> 		; 【レジスタの復帰】
   188                              <1> 		;---------------------------------------
   189 0000032C 5E                  <1> 		pop		esi
   190 0000032D 5A                  <1> 		pop		edx
   191 0000032E 59                  <1> 		pop		ecx
   192 0000032F 5B                  <1> 		pop		ebx
   193 00000330 58                  <1> 		pop		eax
   194                              <1> 
   195                              <1> 		;---------------------------------------
   196                              <1> 		; 【スタックフレームの破棄】
   197                              <1> 		;---------------------------------------
   198 00000331 89EC                <1> 		mov		esp, ebp
   199 00000333 5D                  <1> 		pop		ebp
   200                              <1> 
   201 00000334 C3                  <1> 		ret
   202                              <1> 
   112                                  %include	"../modules/protect/draw_color_bar.s"
   113                              <1> ;************************************************************************
   114                              <1> ;	カラーバーの表示
   115                              <1> ;========================================================================
   116                              <1> ;■書式		: void draw_color_bar(col, row);
   117                              <1> ;
   118                              <1> ;■引数
   119                              <1> ;	col		: 列
   120                              <1> ;	row		: 行
   121                              <1> ;
   122                              <1> ;■戻り値	: 無し
   123                              <1> ;************************************************************************
   124                              <1> draw_color_bar:
   125                              <1> 		;---------------------------------------
   126                              <1> 		; 【スタックフレームの構築】
   127                              <1> 		;---------------------------------------
   128                              <1> 												; ------|--------
   129                              <1> 												; EBP+ 8| X（列）
   130                              <1> 												; EBP+12| Y（行）
   131                              <1> 												; ---------------
   132 00000335 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   133 00000336 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   134                              <1> 												; ---------------
   135                              <1> 		;---------------------------------------
   136                              <1> 		; 【レジスタの保存】
   137                              <1> 		;---------------------------------------
   138 00000338 50                  <1> 		push	eax
   139 00000339 53                  <1> 		push	ebx
   140 0000033A 51                  <1> 		push	ecx
   141 0000033B 52                  <1> 		push	edx
   142 0000033C 56                  <1> 		push	esi
   143 0000033D 57                  <1> 		push	edi
   144                              <1> 
   145                              <1> 		;---------------------------------------
   146                              <1> 		; 表示位置
   147                              <1> 		;---------------------------------------
   148 0000033E 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   149 00000341 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   150                              <1> 
   151                              <1> 		;---------------------------------------
   152                              <1> 		; カラーバーを表示
   153                              <1> 		;---------------------------------------
   154 00000344 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   155 00000349 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
   156 0000034C 732E                <1> 		jae		.10E							; 
   157                              <1> 												;      ECX++)
   158                              <1> 												; {
   159                              <1> 												;   // 桁位置の計算
   160 0000034E 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   161 00000350 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
   162 00000353 C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
   163 00000356 01F0                <1> 		add		eax, esi						;   EAX += X;
   164                              <1> 												;   
   165                              <1> 												;   // 行位置の計算
   166 00000358 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   167 0000035A D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
   168 0000035C 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   169                              <1> 												;   
   170                              <1> 												;   // 表示色の取得
   171 0000035E 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
   172 00000360 D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
   173 00000362 8B92[8F030000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
   174                              <1> 
   175 00000368 68[86030000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
   175 00000370 E877FFFFFF6683C410  <1>
   176                              <1> 
   177 00000379 41                  <1> 		inc		ecx								;   // for (... ECX++)
   178 0000037A EBCD                <1> 		jmp		.10L							; 
   179                              <1> .10E:											; }
   180                              <1> 
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 【レジスタの復帰】
   183                              <1> 		;---------------------------------------
   184 0000037C 5F                  <1> 		pop		edi
   185 0000037D 5E                  <1> 		pop		esi
   186 0000037E 5A                  <1> 		pop		edx
   187 0000037F 59                  <1> 		pop		ecx
   188 00000380 5B                  <1> 		pop		ebx
   189 00000381 58                  <1> 		pop		eax
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 【スタックフレームの破棄】
   193                              <1> 		;---------------------------------------
   194 00000382 89EC                <1> 		mov		esp, ebp
   195 00000384 5D                  <1> 		pop		ebp
   196                              <1> 
   197 00000385 C3                  <1> 		ret
   198                              <1> 
   199 00000386 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
   200                              <1> 
   201 0000038F 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
   202 00000393 00010009            <1> 		dw	0x0100, 0x0900
   203 00000397 0002000A            <1> 		dw	0x0200, 0x0A00
   204 0000039B 0003000B            <1> 		dw	0x0300, 0x0B00
   205 0000039F 0004000C            <1> 		dw	0x0400, 0x0C00
   206 000003A3 0005000D            <1> 		dw	0x0500, 0x0D00
   207 000003A7 0006000E            <1> 		dw	0x0600, 0x0E00
   208 000003AB 0007000F            <1> 		dw	0x0700, 0x0F00
   209                              <1> 
   113                                  %include	"../modules/protect/draw_pixel.s"
   114                              <1> ;************************************************************************
   115                              <1> ;	ピクセルの描画
   116                              <1> ;========================================================================
   117                              <1> ;■書式		: void draw_pixel(X, Y, color);
   118                              <1> ;
   119                              <1> ;■引数
   120                              <1> ;	X		: X座標
   121                              <1> ;	Y		: Y座標
   122                              <1> ;	color	: 描画色
   123                              <1> ;
   124                              <1> ;■戻り値	: 無し
   125                              <1> ;************************************************************************
   126                              <1> draw_pixel:
   127                              <1> 		;---------------------------------------
   128                              <1> 		; 【スタックフレームの構築】
   129                              <1> 		;---------------------------------------
   130                              <1> 												; ------|--------
   131                              <1> 												; EBP+16| 色
   132                              <1> 												; EBP+12| Y
   133                              <1> 												; EBP+ 8| X
   134                              <1> 												; ------|--------
   135 000003AF 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   136 000003B0 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   137                              <1> 												; ------+--------
   138                              <1> 		;---------------------------------------
   139                              <1> 		; 【レジスタの保存】
   140                              <1> 		;---------------------------------------
   141 000003B2 50                  <1> 		push	eax
   142 000003B3 53                  <1> 		push	ebx
   143 000003B4 51                  <1> 		push	ecx
   144 000003B5 57                  <1> 		push	edi
   145                              <1> 
   146                              <1> 		;---------------------------------------
   147                              <1> 		; Y座標を80倍する（640/8）
   148                              <1> 		;---------------------------------------
   149 000003B6 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI  = Y座標
   150 000003B9 C1E704              <1> 		shl		edi, 4							; EDI *= 16;
   151 000003BC 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA_0000]	; EDI  = 0xA00000[EDI * 4 + EDI];
   152                              <1> 
   153                              <1> 		;---------------------------------------
   154                              <1> 		; X座標を1/8して加算
   155                              <1> 		;---------------------------------------
   156 000003C3 8B5D08              <1> 		mov		ebx, [ebp + 8]					; EBX  = X座標;
   157 000003C6 89D9                <1> 		mov		ecx, ebx						; ECX  = X座標;（一時保存）
   158 000003C8 C1EB03              <1> 		shr		ebx, 3							; EBX /= 8;
   159 000003CB 01DF                <1> 		add		edi, ebx						; EDI += EBX;
   160                              <1> 
   161                              <1> 		;---------------------------------------
   162                              <1> 		; X座標を8で割った余りからビット位置を計算
   163                              <1> 		; (0=0x80, 1=0x40,... 7=0x01)
   164                              <1> 		;---------------------------------------
   165 000003CD 83E107              <1> 		and		ecx, 0x07						; ECX = X & 0x07;
   166 000003D0 BB80000000          <1> 		mov		ebx, 0x80						; EBX = 0x80;
   167 000003D5 D3EB                <1> 		shr		ebx, cl							; EBX >>= ECX;
   168                              <1> 
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 色指定
   171                              <1> 		;---------------------------------------
   172 000003D7 8B4D10              <1> 		mov		ecx, [ebp +16]					; // 表示色
   173                              <1> 
   174                              <1> %ifdef	USE_TEST_AND_SET
   175                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   176                              <1> %endif
   177                              <1> 
   178                              <1> 		;---------------------------------------
   179                              <1> 		; プレーン毎に出力
   180                              <1> 		;---------------------------------------
   181 000003DA 6A03E84FFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 輝度(I)プレーンを選択
   181 000003E3 C404                <1>
   182 000003E5 6A08E85DFDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 輝度(I)プレーンを選択
   182 000003EE C404                <1>
   183 000003F0 516A085753E8BBFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
   183 000003F9 FF6683C410          <1>
   184                              <1> 
   185 000003FE 6A02E82BFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 赤(R)プレーンを選択
   185 00000407 C404                <1>
   186 00000409 6A04E839FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 赤(R)プレーンを選択
   186 00000412 C404                <1>
   187 00000414 516A045753E897FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
   187 0000041D FF6683C410          <1>
   188                              <1> 
   189 00000422 6A01E807FDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 緑(G)プレーンを選択
   189 0000042B C404                <1>
   190 0000042D 6A02E815FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 緑(G)プレーンを選択
   190 00000436 C404                <1>
   191 00000438 516A025753E873FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
   191 00000441 FF6683C410          <1>
   192                              <1> 
   193 00000446 6A00E8E3FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 青(B)プレーンを選択
   193 0000044F C404                <1>
   194 00000451 6A01E8F1FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 青(B)プレーンを選択
   194 0000045A C404                <1>
   195 0000045C 516A015753E84FFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
   195 00000465 FF6683C410          <1>
   196                              <1> 
   197                              <1> 
   198                              <1> %ifdef	USE_TEST_AND_SET
   199                              <1> 		;---------------------------------------
   200                              <1> 		; テストアンドセット
   201                              <1> 		;---------------------------------------
   202                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   203                              <1> %endif
   204                              <1> 
   205                              <1> 		;---------------------------------------
   206                              <1> 		; 【レジスタの復帰】
   207                              <1> 		;---------------------------------------
   208 0000046A 5F                  <1> 		pop		edi
   209 0000046B 59                  <1> 		pop		ecx
   210 0000046C 5B                  <1> 		pop		ebx
   211 0000046D 58                  <1> 		pop		eax
   212                              <1> 
   213                              <1> 		;---------------------------------------
   214                              <1> 		; 【スタックフレームの破棄】
   215                              <1> 		;---------------------------------------
   216 0000046E 89EC                <1> 		mov		esp, ebp
   217 00000470 5D                  <1> 		pop		ebp
   218                              <1> 
   219 00000471 C3                  <1> 		ret
   220                              <1> 
   114                                  %include	"../modules/protect/draw_line.s"
   115                              <1> ;************************************************************************
   116                              <1> ;	直線の描画
   117                              <1> ;========================================================================
   118                              <1> ;■書式		: void draw_line(X0, Y0, X1, Y1, color);
   119                              <1> ;
   120                              <1> ;■引数
   121                              <1> ;	X0		: 始点のX座標
   122                              <1> ;	Y0		: 始点のY座標
   123                              <1> ;	X1		: 終点のX座標
   124                              <1> ;	Y1		: 終点のY座標
   125                              <1> ;	color	: 描画色
   126                              <1> ;
   127                              <1> ;■戻り値	: 無し
   128                              <1> ;************************************************************************
   129                              <1> draw_line:
   130                              <1> 		;---------------------------------------
   131                              <1> 		; 【スタックフレームの構築】
   132                              <1> 		;---------------------------------------
   133                              <1> 												; ---------------
   134                              <1> 												;    +24| 色
   135                              <1> 												;    +20| Y1
   136                              <1> 												;    +16| X1
   137                              <1> 												;    +12| Y0
   138                              <1> 												;    + 8| X0
   139                              <1> 												; ---------------
   140 00000472 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   141 00000473 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   142                              <1> 												; ---------------
   143 00000475 6A00                <1> 		push	dword 0							;    - 4| sum   = 0; // 相対軸の積算値
   144 00000477 6A00                <1> 		push	dword 0							;    - 8| x0    = 0; // X座標
   145 00000479 6A00                <1> 		push	dword 0							;    -12| dx    = 0; // X増分
   146 0000047B 6A00                <1> 		push	dword 0							;    -16| inc_x = 0; // X座標増分(1 or -1)
   147 0000047D 6A00                <1> 		push	dword 0							;    -20| y0    = 0; // Y座標
   148 0000047F 6A00                <1> 		push	dword 0							;    -24| dy    = 0; // Y増分
   149 00000481 6A00                <1> 		push	dword 0							;    -28| inc_y = 0; // Y座標増分(1 or -1)
   150                              <1> 												; ------|--------
   151                              <1> 
   152                              <1> 		;---------------------------------------
   153                              <1> 		; 【レジスタの保存】
   154                              <1> 		;---------------------------------------
   155 00000483 50                  <1> 		push	eax
   156 00000484 53                  <1> 		push	ebx
   157 00000485 51                  <1> 		push	ecx
   158 00000486 52                  <1> 		push	edx
   159 00000487 56                  <1> 		push	esi
   160 00000488 57                  <1> 		push	edi
   161                              <1> 
   162                              <1> 		;---------------------------------------
   163                              <1> 		; 幅を計算（X軸）
   164                              <1> 		;---------------------------------------
   165 00000489 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   166 0000048C 8B5D10              <1> 		mov		ebx, [ebp +16]					; EBX = X1;
   167 0000048F 29C3                <1> 		sub		ebx, eax						; EBX = X1 - X0; // 幅
   168 00000491 7D09                <1> 		jge		.10F							; if (幅 < 0)
   169                              <1> 												; {
   170 00000493 F7DB                <1> 		neg		ebx								;   幅   *= -1;
   171 00000495 BEFFFFFFFF          <1> 		mov		esi, -1							;   // X座標の増分
   172 0000049A EB05                <1> 		jmp		.10E							; }
   173                              <1> .10F:											; else
   174                              <1> 												; {
   175 0000049C BE01000000          <1> 		mov		esi, 1							;   // X座標の増分
   176                              <1> .10E:											; }
   177                              <1> 
   178                              <1> 		;---------------------------------------
   179                              <1> 		; 高さを計算（Y軸）
   180                              <1> 		;---------------------------------------
   181 000004A1 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX = Y0
   182 000004A4 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1
   183 000004A7 29CA                <1> 		sub		edx, ecx						; EDX = Y1 - Y0; // 高さ
   184 000004A9 7D09                <1> 		jge		.20F							; if (高さ < 0)
   185                              <1> 												; {
   186 000004AB F7DA                <1> 		neg		edx								;   高さ *= -1;
   187 000004AD BFFFFFFFFF          <1> 		mov		edi, -1							;   // Y座標の増分
   188 000004B2 EB05                <1> 		jmp		.20E							; }
   189                              <1> .20F:											; else
   190                              <1> 												; {
   191 000004B4 BF01000000          <1> 		mov		edi, 1							;   // Y座標の増分
   192                              <1> .20E:											; }
   193                              <1> 
   194                              <1> 		;---------------------------------------
   195                              <1> 		; X軸
   196                              <1> 		;---------------------------------------
   197 000004B9 8945F8              <1> 		mov		[ebp - 8], eax					;   // X軸:開始座標
   198 000004BC 895DF4              <1> 		mov		[ebp -12], ebx					;   // X軸:描画幅
   199 000004BF 8975F0              <1> 		mov		[ebp -16], esi					;   // X軸:増分(基準軸：1 or -1)
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; Y軸
   203                              <1> 		;---------------------------------------
   204 000004C2 894DEC              <1> 		mov		[ebp -20], ecx					;   // Y軸:開始座標
   205 000004C5 8955E8              <1> 		mov		[ebp -24], edx					;   // Y軸:描画幅
   206 000004C8 897DE4              <1> 		mov		[ebp -28], edi					;   // Y軸:増分(基準軸：1 or -1)
   207                              <1> 
   208                              <1> 		;---------------------------------------
   209                              <1> 		; 基準軸を決める
   210                              <1> 		;---------------------------------------
   211 000004CB 39D3                <1> 		cmp		ebx, edx						; if (幅 <= 高さ)
   212 000004CD 7F08                <1> 		jg		.22F							; {
   213                              <1> 												;   
   214 000004CF 8D75EC              <1> 		lea		esi, [ebp -20]					;   // Y軸が基準軸
   215 000004D2 8D7DF8              <1> 		lea		edi, [ebp - 8]					;   // X軸が相対軸
   216                              <1> 												;   
   217 000004D5 EB06                <1> 		jmp		.22E							; }
   218                              <1> .22F:											; else
   219                              <1> 												; {
   220 000004D7 8D75F8              <1> 		lea		esi, [ebp - 8]					;   // X軸が基準軸
   221 000004DA 8D7DEC              <1> 		lea		edi, [ebp -20]					;   // Y軸が相対軸
   222                              <1> .22E:											; }
   223                              <1> 
   224                              <1> 		;---------------------------------------
   225                              <1> 		; 繰り返し回数(基準軸のドット数)
   226                              <1> 		;---------------------------------------
   227 000004DD 8B4EFC              <1> 		mov		ecx, [esi - 4]					; ECX = 基準軸描画幅;
   228 000004E0 83F900              <1> 		cmp		ecx, 0							; if (0 == ECX)
   229 000004E3 7505                <1> 		jnz		.30E							; {
   230 000004E5 B901000000          <1> 		mov		ecx, 1							;   ECX = 1;
   231                              <1> .30E:											; }
   232                              <1> 
   233                              <1> 		;---------------------------------------
   234                              <1> 		; 線を描画
   235                              <1> 		;---------------------------------------
   236                              <1> .50L:											; do
   237                              <1> 												; {
   238                              <1> %ifdef	USE_SYSTEM_CALL
   239                              <1> 		mov		eax, ecx						;   // 繰り返し回数を保存
   240                              <1> 
   241                              <1> 		mov		ebx, [ebp +24]					;   EBX = 表示色;
   242                              <1> 		mov		ecx, [ebp - 8]					;   ECX = X座標;
   243                              <1> 		mov		edx, [ebp -20]					;   EDX = Y座標;
   244                              <1> 		int		0x82							;   sys_call(1, X, Y, 色, 文字); BX(C), CX(X), DX(Y)
   245                              <1> 
   246                              <1> 		mov		ecx, eax
   247                              <1> %else
   248 000004EA FF7518FF75ECFF75F8- <1> 		cdecl	draw_pixel, dword [ebp - 8], 							dword [ebp -20], 							dword [ebp +24]		;   // 点の描画
   248 000004F3 E8B7FEFFFF6683C40C  <1>
   251                              <1> %endif
   252                              <1> 												;   // 基準軸を更新(1ドット分)
   253 000004FC 8B46F8              <1> 		mov		eax, [esi - 8]					;   EAX = 基準軸増分(1 or -1);
   254 000004FF 0106                <1> 		add		[esi - 0], eax					;   
   255                              <1> 
   256                              <1> 												;   // 相対軸を更新
   257 00000501 8B45FC              <1> 		mov		eax, [ebp - 4]					;   EAX  = sum; // 相対軸の積算値;
   258 00000504 0347FC              <1> 		add		eax, [edi - 4]					;   EAX += dy;  // 増分(相対軸の描画幅)
   259 00000507 8B5EFC              <1> 		mov		ebx, [esi - 4]					;   EBX  = dx;  // 増分(基準軸の描画幅)
   260                              <1> 
   261 0000050A 39D8                <1> 		cmp		eax, ebx						;   if (積算値 <= 相対軸の増分)
   262 0000050C 7C07                <1> 		jl		.52E							;   {
   263 0000050E 29D8                <1> 		sub		eax, ebx						;     EAX -= EBX; // 積算値から相対軸の増分を減算
   264                              <1> 												;     
   265                              <1> 												;     // 相対軸の座標を更新(1ドット分)
   266 00000510 8B5FF8              <1> 		mov		ebx, [edi - 8]					;     EBX =  相対軸増分;
   267 00000513 011F                <1> 		add		[edi - 0], ebx					;     
   268                              <1> .52E:											;   }
   269 00000515 8945FC              <1> 		mov		[ebp - 4], eax					;   // 積算値を更新
   270                              <1> 												;   
   271 00000518 E2D0                <1> 		loop	.50L							;   
   272                              <1> .50E:											; } while (ループ回数--);
   273                              <1> 
   274                              <1> 		;---------------------------------------
   275                              <1> 		; 【レジスタの復帰】
   276                              <1> 		;---------------------------------------
   277 0000051A 5F                  <1> 		pop		edi
   278 0000051B 5E                  <1> 		pop		esi
   279 0000051C 5A                  <1> 		pop		edx
   280 0000051D 59                  <1> 		pop		ecx
   281 0000051E 5B                  <1> 		pop		ebx
   282 0000051F 58                  <1> 		pop		eax
   283                              <1> 
   284                              <1> 		;---------------------------------------
   285                              <1> 		; 【スタックフレームの破棄】
   286                              <1> 		;---------------------------------------
   287 00000520 89EC                <1> 		mov		esp, ebp
   288 00000522 5D                  <1> 		pop		ebp
   289                              <1> 
   290 00000523 C3                  <1> 		ret
   291                              <1> 
   115                                  %include	"../modules/protect/draw_rect.s"
   116                              <1> ;************************************************************************
   117                              <1> ;	矩形の描画
   118                              <1> ;========================================================================
   119                              <1> ;■書式		: void draw_rect(X0, Y0, X1, Y1, color);
   120                              <1> ;
   121                              <1> ;■引数
   122                              <1> ;	X0		: 始点のX座標
   123                              <1> ;	Y0		: 始点のY座標
   124                              <1> ;	X1		: 終点のX座標
   125                              <1> ;	Y1		: 終点のY座標
   126                              <1> ;	color	: 描画色
   127                              <1> ;
   128                              <1> ;■戻り値	: 無し
   129                              <1> ;************************************************************************
   130                              <1> draw_rect:
   131                              <1> 		;---------------------------------------
   132                              <1> 		; 【スタックフレームの構築】
   133                              <1> 		;---------------------------------------
   134                              <1> 												; ------|--------
   135                              <1> 												; EBP+24| 色
   136                              <1> 												; EBP+20| Y1
   137                              <1> 												; EBP+16| X1
   138                              <1> 												; EBP+12| Y0
   139                              <1> 												; EBP+ 8| X0
   140                              <1> 												; ---------------
   141 00000524 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   142 00000525 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   143                              <1> 												; ------|--------
   144                              <1> 
   145                              <1> 		;---------------------------------------
   146                              <1> 		; 【レジスタの保存】
   147                              <1> 		;---------------------------------------
   148 00000527 50                  <1> 		push		eax
   149 00000528 53                  <1> 		push		ebx
   150 00000529 51                  <1> 		push		ecx
   151 0000052A 52                  <1> 		push		edx
   152 0000052B 56                  <1> 		push		esi
   153                              <1> 
   154                              <1> 		;---------------------------------------
   155                              <1> 		; 矩形を描画
   156                              <1> 		;---------------------------------------
   157 0000052C 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   158 0000052F 8B5D0C              <1> 		mov		ebx, [ebp +12]					; EBX = Y0;
   159 00000532 8B4D10              <1> 		mov		ecx, [ebp +16]					; ECX = X1;
   160 00000535 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1;
   161 00000538 8B7518              <1> 		mov		esi, [ebp +24]					; ESI = 色;
   162                              <1> 
   163                              <1> 		;---------------------------------------
   164                              <1> 		; 座標軸の大小を確定
   165                              <1> 		;---------------------------------------
   166 0000053B 39C8                <1> 		cmp		eax, ecx						; if (X1 < X0)
   167 0000053D 7C01                <1> 		jl		.10E							; {
   168 0000053F 91                  <1> 		xchg	eax, ecx						;   X0とX1を入れ替える;
   169                              <1> .10E:											; }
   170                              <1> 
   171 00000540 39D3                <1> 		cmp		ebx, edx						; if (Y1 < Y0)
   172 00000542 7C02                <1> 		jl		.20E							; {
   173 00000544 87DA                <1> 		xchg	ebx, edx						;   Y0とY1を入れ替える;
   174                              <1> .20E:											; }
   175                              <1> 
   176                              <1> 		;---------------------------------------
   177                              <1> 		; 矩形を描画
   178                              <1> 		;---------------------------------------
   179 00000546 5653515350E822FFFF- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, esi	; 上線
   179 0000054F FF6683C414          <1>
   180 00000554 5652505350E814FFFF- <1> 		cdecl	draw_line, eax, ebx, eax, edx, esi	; 左線
   180 0000055D FF6683C414          <1>
   181                              <1> 
   182 00000562 4A                  <1> 		dec		edx									; EDX--; // 下線は1ドット上げる
   183 00000563 5652515250E805FFFF- <1> 		cdecl	draw_line, eax, edx, ecx, edx, esi	; 下線
   183 0000056C FF6683C414          <1>
   184 00000571 42                  <1> 		inc		edx
   185                              <1> 
   186 00000572 49                  <1> 		dec		ecx									; ECX--; // 右線は1ドット左に移動
   187 00000573 5652515351E8F5FEFF- <1> 		cdecl	draw_line, ecx, ebx, ecx, edx, esi	; 右線
   187 0000057C FF6683C414          <1>
   188                              <1> 
   189                              <1> 		;---------------------------------------
   190                              <1> 		; 【レジスタの復帰】
   191                              <1> 		;---------------------------------------
   192 00000581 5E                  <1> 		pop		esi
   193 00000582 5A                  <1> 		pop		edx
   194 00000583 59                  <1> 		pop		ecx
   195 00000584 5B                  <1> 		pop		ebx
   196 00000585 58                  <1> 		pop		eax
   197                              <1> 
   198                              <1> 		;---------------------------------------
   199                              <1> 		; 【スタックフレームの破棄】
   200                              <1> 		;---------------------------------------
   201 00000586 89EC                <1> 		mov		esp, ebp
   202 00000588 5D                  <1> 		pop		ebp
   203                              <1> 
   204 00000589 C3                  <1> 		ret
   116                                  %include	"../modules/protect/itoa.s"
   117                              <1> ;************************************************************************
   118                              <1> ;	数値を文字に変換
   119                              <1> ;========================================================================
   120                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
   121                              <1> ;
   122                              <1> ;■引数
   123                              <1> ;	num		: 変換する数値
   124                              <1> ;	buff	: 保存先バッファアドレス
   125                              <1> ;	size	: 保存先バッファサイズ
   126                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
   127                              <1> ;	flags	: フラグ
   128                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
   129                              <1> ;			:      : 0=空白を' '（スペース）で埋める
   130                              <1> ;			:   B1 : 1=＋/-符号を表示する
   131                              <1> ;			:      : 0=＋/-符号を表示しない
   132                              <1> ;			:   B0 : 1=符号付き正数として扱う
   133                              <1> ;			:      : 0=符号無し正数として扱う
   134                              <1> ;
   135                              <1> ;■戻り値	: 無し
   136                              <1> ;************************************************************************
   137                              <1> itoa:
   138                              <1> 		;---------------------------------------
   139                              <1> 		; 【スタックフレームの構築】
   140                              <1> 		;---------------------------------------
   141                              <1> 												; ------|--------
   142                              <1> 												;    +24| フラグ
   143                              <1> 												;    +20| 基数
   144                              <1> 												;    +16| バッファサイズ
   145                              <1> 												;    +12| バッファアドレス
   146                              <1> 												;    + 8| 数値
   147                              <1> 												; ------|--------
   148                              <1> 												;    + 4| EIP（戻り番地）
   149 0000058A 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   150 0000058B 89E5                <1> 		mov		ebp, esp						; ------+--------
   151                              <1> 
   152                              <1> 		;---------------------------------------
   153                              <1> 		; 【レジスタの保存】
   154                              <1> 		;---------------------------------------
   155 0000058D 50                  <1> 		push	eax
   156 0000058E 53                  <1> 		push	ebx
   157 0000058F 51                  <1> 		push	ecx
   158 00000590 52                  <1> 		push	edx
   159 00000591 56                  <1> 		push	esi
   160 00000592 57                  <1> 		push	edi
   161                              <1> 
   162                              <1> 		;---------------------------------------
   163                              <1> 		; 引数を取得
   164                              <1> 		;---------------------------------------
   165 00000593 8B4508              <1> 		mov		eax, [ebp + 8]					; val  = 数値;
   166 00000596 8B750C              <1> 		mov		esi, [ebp +12]					; dst  = バッファアドレス;
   167 00000599 8B4D10              <1> 		mov		ecx, [ebp +16]					; size = 残りバッファサイズ;
   168                              <1> 
   169 0000059C 89F7                <1> 		mov		edi, esi						; // バッファの最後尾
   170 0000059E 01CF                <1> 		add		edi, ecx						; dst  = &dst[size - 1];
   171 000005A0 4F                  <1> 		dec		edi								; 
   172                              <1> 
   173 000005A1 8B5D18              <1> 		mov		ebx, [ebp +24]					; flags = オプション;
   174                              <1> 
   175                              <1> 		;---------------------------------------
   176                              <1> 		; 符号付き判定
   177                              <1> 		;---------------------------------------
   178 000005A4 F7C301000000        <1> 		test	ebx, 0b0001						; if (flags & 0x01)// 符号付き
   179 000005AA 7408                <1> .10Q:	je		.10E							; {
   180 000005AC 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   181 000005AF 7D03                <1> .12Q:	jge		.12E							;   {
   182 000005B1 83CB02              <1> 		or		ebx, 0b0010						;     flags |=  2; // 符号表示
   183                              <1> .12E:											;   }
   184                              <1> .10E:											; }
   185                              <1> 
   186                              <1> 		;---------------------------------------
   187                              <1> 		; 符号出力判定
   188                              <1> 		;---------------------------------------
   189 000005B4 F7C302000000        <1> 		test	ebx, 0b0010						; if (flags & 0x02)// 符号出力判定
   190 000005BA 7410                <1> .20Q:	je		.20E							; {
   191 000005BC 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   192 000005BF 7D07                <1> .22Q:	jge		.22F							;   {
   193 000005C1 F7D8                <1> 		neg		eax								;     val *= -1;   // 符号反転
   194 000005C3 C6062D              <1> 		mov		[esi], byte '-'					;     *dst = '-';  // 符号表示
   195 000005C6 EB03                <1> 		jmp		.22E							;   }
   196                              <1> .22F:											;   else
   197                              <1> 												;   {
   198 000005C8 C6062B              <1> 		mov		[esi], byte '+'					;     *dst = '+';  // 符号表示
   199                              <1> .22E:											;   }
   200 000005CB 49                  <1> 		dec		ecx								;   size--;        // 残りバッファサイズの減算
   201                              <1> .20E:											; }
   202                              <1> 
   203                              <1> 		;---------------------------------------
   204                              <1> 		; ASCII変換
   205                              <1> 		;---------------------------------------
   206 000005CC 8B5D14              <1> 		mov		ebx, [ebp +20]					; BX = 基数;
   207                              <1> .30L:											; do
   208                              <1> 												; {
   209 000005CF BA00000000          <1> 		mov		edx, 0							;   
   210 000005D4 F7F3                <1> 		div		ebx								;   DX = DX:AX % 基数;
   211                              <1> 												;   AX = DX:AX / 基数;
   212                              <1> 												;   
   213 000005D6 89D6                <1> 		mov		esi, edx						;   // テーブル参照
   214 000005D8 8A96[03060000]      <1> 		mov		dl, byte [.ascii + esi]			;   DL = ASCII[DX];
   215                              <1> 												;   
   216 000005DE 8817                <1> 		mov		[edi], dl						;   *dst = DL;
   217 000005E0 4F                  <1> 		dec		edi								;   dst--;
   218                              <1> 												;   
   219 000005E1 83F800              <1> 		cmp		eax, 0							;   
   220 000005E4 E0E9                <1> 		loopnz	.30L							; } while (AX);
   221                              <1> .30E:
   222                              <1> 
   223                              <1> 		;---------------------------------------
   224                              <1> 		; 空欄を埋める
   225                              <1> 		;---------------------------------------
   226 000005E6 83F900              <1> 		cmp		ecx, 0							; if (size)
   227 000005E9 740E                <1> .40Q:	je		.40E							; {
   228 000005EB B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   229 000005ED 66837D1804          <1> 		cmp		[ebp +24], word 0b0100			;   if (flags & 0x04)
   230 000005F2 7502                <1> .42Q:	jne		.42E							;   {
   231 000005F4 B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   232                              <1> .42E:											;   }
   233 000005F6 FD                  <1> 		std										;   // DF = 1（-方向）
   234 000005F7 F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   235                              <1> .40E:											; }
   236                              <1> 
   237                              <1> 		;---------------------------------------
   238                              <1> 		; 【レジスタの復帰】
   239                              <1> 		;---------------------------------------
   240 000005F9 5F                  <1> 		pop		edi
   241 000005FA 5E                  <1> 		pop		esi
   242 000005FB 5A                  <1> 		pop		edx
   243 000005FC 59                  <1> 		pop		ecx
   244 000005FD 5B                  <1> 		pop		ebx
   245 000005FE 58                  <1> 		pop		eax
   246                              <1> 
   247                              <1> 		;---------------------------------------
   248                              <1> 		; 【スタックフレームの破棄】
   249                              <1> 		;---------------------------------------
   250 000005FF 89EC                <1> 		mov		esp, ebp
   251 00000601 5D                  <1> 		pop		ebp
   252                              <1> 
   253 00000602 C3                  <1> 		ret
   254                              <1> 
   255 00000603 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   255 0000060C 39414243444546      <1>
   256                              <1> 
   117                                  %include	"../modules/protect/rtc.s"
   118                              <1> ;************************************************************************
   119                              <1> ;	RTCから時刻データを取得する
   120                              <1> ;========================================================================
   121                              <1> ;■書式		: DWORD rtc_get_time(dst);
   122                              <1> ;
   123                              <1> ;■引数
   124                              <1> ;	dst		: 保存先アドレス
   125                              <1> ;
   126                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   127                              <1> ;************************************************************************
   128                              <1> rtc_get_time:
   129                              <1> 		;---------------------------------------
   130                              <1> 		; 【スタックフレームの構築】
   131                              <1> 		;---------------------------------------
   132                              <1> 												; ------|--------
   133                              <1> 												; EBP+ 8| 保存先アドレス
   134                              <1> 												; ---------------
   135 00000613 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   136 00000614 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   137                              <1> 												; ---------------
   138                              <1> 		;---------------------------------------
   139                              <1> 		; 【レジスタの保存】
   140                              <1> 		;---------------------------------------
   141 00000616 53                  <1> 		push	ebx
   142                              <1> 
   143                              <1> 		;---------------------------------------
   144                              <1> 		; RTCから時刻を取得
   145                              <1> 		;---------------------------------------
   146 00000617 B00A                <1> 		mov		al, 0x0A						; // レジスタA
   147 00000619 E670                <1> 		out		0x70, al						; outp(0x70, AL);
   148 0000061B E471                <1> 		in		al, 0x71						; AL = レジスタA;
   149 0000061D A880                <1> 		test	al, 0x80						; if (DM & UIP) // 更新中
   150 0000061F 7407                <1> 		je		.10F							; {
   151 00000621 B801000000          <1> 		mov		eax, 1							;   ret = 1; // データ更新中
   152 00000626 EB27                <1> 		jmp		.10E							; }
   153                              <1> .10F:											; else
   154                              <1> 												; {
   155                              <1> 												;   // RAM[0x04]:時
   156 00000628 B004                <1> 		mov		al, 0x04						;   AL = 0x04;
   157 0000062A E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   158 0000062C E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 時データ
   159                              <1> 												;   
   160 0000062E C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   161                              <1> 												;   
   162                              <1> 												;   // RAM[0x02]:分
   163 00000631 B002                <1> 		mov		al, 0x02						;   AL = 0x02;
   164 00000633 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   165 00000635 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 分データ
   166                              <1> 												;   
   167 00000637 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   168                              <1> 												;   
   169                              <1> 												;   // RAM[0x00]:秒
   170 0000063A B000                <1> 		mov		al, 0x00						;   AL = 0x00;
   171 0000063C E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   172 0000063E E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 秒データ
   173                              <1> 												;   
   174 00000640 25FFFFFF00          <1> 		and		eax, 0x00_FF_FF_FF				;   // 下位3バイトのみ有効
   175                              <1> 												;   
   176 00000645 8B5D08              <1> 		mov		ebx, [ebp + 8]					;   dst = 保存先;
   177 00000648 8903                <1> 		mov		[ebx], eax						;   [dst] = 時刻;
   178                              <1> 												;   
   179 0000064A B800000000          <1> 		mov		eax, 0							;   ret = 0; // 正常終了
   180                              <1> .10E:											; }
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; 【レジスタの復帰】
   184                              <1> 		;---------------------------------------
   185 0000064F 5B                  <1> 		pop		ebx
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 【スタックフレームの破棄】
   189                              <1> 		;---------------------------------------
   190 00000650 89EC                <1> 		mov		esp, ebp
   191 00000652 5D                  <1> 		pop		ebp
   192                              <1> 
   193 00000653 C3                  <1> 		ret
   194                              <1> 
   118                                  %include	"../modules/protect/draw_time.s"
   119                              <1> ;************************************************************************
   120                              <1> ;	時刻の表示
   121                              <1> ;========================================================================
   122                              <1> ;■書式		: void draw_time(col, row, color, time);
   123                              <1> ;
   124                              <1> ;■引数
   125                              <1> ;	col		: 列
   126                              <1> ;	row		: 行
   127                              <1> ;	color	: 描画色
   128                              <1> ;	time	: 時刻データ
   129                              <1> ;
   130                              <1> ;■戻り値	: 無し
   131                              <1> ;************************************************************************
   132                              <1> draw_time:
   133                              <1> 		;---------------------------------------
   134                              <1> 		; 【スタックフレームの構築】
   135                              <1> 		;---------------------------------------
   136                              <1> 												; ------|--------
   137                              <1> 												; EBP+20| 時刻データ
   138                              <1> 												; EBP+16| 色
   139                              <1> 												; EBP+12| Y（行）
   140                              <1> 												; EBP+ 8| X（列）
   141                              <1> 												; ---------------
   142 00000654 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   143 00000655 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   144                              <1> 												; ---------------
   145                              <1> 		;---------------------------------------
   146                              <1> 		; 【レジスタの保存】
   147                              <1> 		;---------------------------------------
   148 00000657 50                  <1> 		push	eax
   149 00000658 53                  <1> 		push	ebx
   150                              <1> 
   151                              <1> 		;---------------------------------------
   152                              <1> 		; 
   153                              <1> 		;---------------------------------------
   154 00000659 8B4514              <1> 		mov		eax, [ebp +20]					; EAX = 時刻データ;
   155 0000065C 3B05[DA060000]      <1> 		cmp		eax, [.last]					; if (今回 != 前回)
   156 00000662 7467                <1> 		je		.10E							; {
   157                              <1> 												;   
   158 00000664 A3[DA060000]        <1> 		mov		[.last], eax					;   // 前回の時刻値を更新
   159                              <1> 												;   
   160 00000669 BB00000000          <1> 		mov		ebx, 0							;   EBX = 0;
   161 0000066E 88C3                <1> 		mov		bl, al							;   EBX = 秒;
   162 00000670 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .sec, 2, 16, 0b0100	;   // 時刻を文字列に変換
   162 00000677 [E8060000]53E809FF- <1>
   162 0000067F FFFF6683C414        <1>
   163                              <1> 
   164 00000685 88E3                <1> 		mov		bl, ah							;   EBX = 分;
   165 00000687 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .min, 2, 16, 0b0100	;   // 時刻を文字列に変換
   165 0000068E [E5060000]53E8F2FE- <1>
   165 00000696 FFFF6683C414        <1>
   166                              <1> 
   167 0000069C C1E810              <1> 		shr		eax, 16							;   EBX = 時;
   168 0000069F 6A046A106A0268-     <1> 		cdecl	itoa, eax, .hour, 2, 16, 0b0100	;   // 時刻を文字列に変換
   168 000006A6 [E2060000]50E8DAFE- <1>
   168 000006AE FFFF6683C414        <1>
   169                              <1> 
   170                              <1> 												;   // 時刻を表示
   171 000006B4 68[E2060000]FF7510- <1> 		cdecl	draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
   171 000006BC FF750CFF7508E825FC- <1>
   171 000006C5 FFFF6683C410        <1>
   172                              <1> 												;     
   173                              <1> 												;   }
   174                              <1> .10E:											; }
   175                              <1> 
   176                              <1> 		;---------------------------------------
   177                              <1> 		; 【レジスタの復帰】
   178                              <1> 		;---------------------------------------
   179 000006CB 5B                  <1> 		pop		ebx
   180 000006CC 58                  <1> 		pop		eax
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; 【スタックフレームの破棄】
   184                              <1> 		;---------------------------------------
   185 000006CD 89EC                <1> 		mov		esp, ebp
   186 000006CF 5D                  <1> 		pop		ebp
   187                              <1> 
   188 000006D0 C3                  <1> 		ret
   189                              <1> 
   190 000006D1 00                  <1> ALIGN 2, db 0
   191 000006D2 0000000000000000    <1> .temp:	dq	0
   192 000006DA 0000000000000000    <1> .last:	dq	0
   193 000006E2 5A5A3A              <1> .hour:	db	"ZZ:"
   194 000006E5 5A5A3A              <1> .min:	db	"ZZ:"
   195 000006E8 5A5A00              <1> .sec:	db	"ZZ", 0
   196                              <1> 
   119                                  %include	"../modules/protect/interrupt.s"
   120                              <1> ;************************************************************************
   121                              <1> ;	割り込みベクタの初期化
   122                              <1> ;************************************************************************
   123 000006EB 90                  <1> ALIGN 4
   124 000006EC FF07                <1> IDTR:	dw 		8 * 256 - 1					; idt_limit
   125 000006EE 00001000            <1> 		dd 		VECT_BASE					; idt location
   126                              <1> 
   127                              <1> ;************************************************************************
   128                              <1> ;	割り込みテーブルを初期化
   129                              <1> ;------------------------------------------------------------------------
   130                              <1> ;	
   131                              <1> ;	まず、全ての割り込みアドレスにデフォルト処理を設定すし、その後、
   132                              <1> ;	必要な割り込みだけ設定しなおす。
   133                              <1> ;	
   134                              <1> ;	割り込みアドレスは、VECT_BASEで指定され、256の割り込みがあるので
   135                              <1> ;	0x0800バイト占有することになる。
   136                              <1> ;	
   137                              <1> ;	           |____________| _V___
   138                              <1> ;	  VECT_BASE| IntDefault |  |   
   139                              <1> ;	           | IntDefault |  | 8 * 256
   140                              <1> ;	           |      :     |  |   
   141                              <1> ;	           |____________| _|___
   142                              <1> ;	      +0800|////////////|
   143                              <1> ;	           |            |
   144                              <1> ;	
   145                              <1> ;	一つの割り込み設定は8バイトで構成される。
   146                              <1> ;	
   147                              <1> ;	           |____________|____________| 
   148                              <1> ;	        [0]| Address Lo[15: 0]       | 
   149                              <1> ;	        [2]| Selector                | 
   150                              <1> ;	        [4]| Flags                   | 
   151                              <1> ;	        [6]|_Address Lo[32:16]_______| 
   152                              <1> ;	           |/////////////////////////| 
   153                              <1> ;	           |            |            | 
   154                              <1> ;	
   155                              <1> ;========================================================================
   156                              <1> ;■書式		: void init_int(void);
   157                              <1> ;
   158                              <1> ;■引数		: 無し
   159                              <1> ;
   160                              <1> ;■戻り値	: 無し
   161                              <1> ;************************************************************************
   162                              <1> init_int:
   163                              <1> 		;---------------------------------------
   164                              <1> 		; 【レジスタの保存】
   165                              <1> 		;---------------------------------------
   166 000006F2 50                  <1> 		push	eax
   167 000006F3 53                  <1> 		push	ebx
   168 000006F4 51                  <1> 		push	ecx
   169 000006F5 57                  <1> 		push	edi
   170                              <1> 
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 全ての割り込みにデフォルト処理を設定
   173                              <1> 		;---------------------------------------
   174 000006F6 8D05[3C080000]      <1> 		lea		eax, [int_default]				; EAX   = 割り込み処理アドレス;
   175 000006FC BB008E0800          <1> 		mov		ebx, 0x0008_8E00				; EBX   = セグメントセレクタ;
   176 00000701 6693                <1> 		xchg	ax, bx							; // 下位ワードを交換
   177                              <1> 
   178 00000703 B900010000          <1> 		mov		ecx, 256						; ECX   = 割り込みベクタ数
   179 00000708 BF00001000          <1> 		mov		edi, VECT_BASE					; EDI   = 割り込みベクタテーブル
   180                              <1> 
   181                              <1> .10L:											; do
   182                              <1> 												; {
   183 0000070D 891F                <1> 		mov		[edi + 0], ebx					;   [EDI + 0] = 割り込みディスクリプタ（下位）
   184 0000070F 894704              <1> 		mov		[edi + 4], eax					;   [EDI + 4] = 割り込みディスクリプタ（上位）
   185 00000712 83C708              <1> 		add		edi, 8							;   EDI += 8;
   186 00000715 E2F6                <1> 		loop	.10L							; } while (ECX--);
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 割り込みディスクリプタの設定
   190                              <1> 		;---------------------------------------
   191 00000717 0F011D[EC060000]    <1> 		lidt	[IDTR]							; // 割り込みディスクリプタテーブルをロード
   192                              <1> 
   193                              <1> 		;---------------------------------------
   194                              <1> 		; 【レジスタの復帰】
   195                              <1> 		;---------------------------------------
   196 0000071E 5F                  <1> 		pop		edi
   197 0000071F 59                  <1> 		pop		ecx
   198 00000720 5B                  <1> 		pop		ebx
   199 00000721 58                  <1> 		pop		eax
   200                              <1> 
   201 00000722 C3                  <1> 		ret
   202                              <1> 
   203                              <1> ;************************************************************************
   204                              <1> ;	スタックの内容を表示して無限ループを実行
   205                              <1> ;************************************************************************
   206                              <1> int_stop:
   207 00000723 FB                  <1> 		sti										; // 割り込み許可
   208                              <1> 
   209                              <1> 		;---------------------------------------
   210                              <1> 		; EAXで示される文字列を表示
   211                              <1> 		;---------------------------------------
   212 00000724 50680F0600006A0F6A- <1> 		cdecl	draw_str, 25, 15, 0x060F, eax	; draw_str(EAX);
   212 0000072D 19E8B9FBFFFF6683C4- <1>
   212 00000736 10                  <1>
   213                              <1> 
   214                              <1> 		;---------------------------------------
   215                              <1> 		; スタックのデータを文字列に変換
   216                              <1> 		;---------------------------------------
   217 00000737 8B0424              <1> 		mov		eax, [esp + 0]					; EAX = ESP[ 0];
   218 0000073A 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p1, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   218 00000741 [FF070000]50E83FFE- <1>
   218 00000749 FFFF6683C414        <1>
   219                              <1> 
   220 0000074F 8B442404            <1> 		mov		eax, [esp + 4]					; EAX = ESP[ 4];
   221 00000753 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p2, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   221 0000075A [10080000]50E826FE- <1>
   221 00000762 FFFF6683C414        <1>
   222                              <1> 
   223 00000768 8B442408            <1> 		mov		eax, [esp + 8]					; EAX = ESP[ 8];
   224 0000076C 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p3, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   224 00000773 [21080000]50E80DFE- <1>
   224 0000077B FFFF6683C414        <1>
   225                              <1> 
   226 00000781 8B44240C            <1> 		mov		eax, [esp +12]					; EAX = ESP[12];
   227 00000785 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p4, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   227 0000078C [32080000]50E8F4FD- <1>
   227 00000794 FFFF6683C414        <1>
   228                              <1> 
   229                              <1> 		;---------------------------------------
   230                              <1> 		; 文字列の表示
   231                              <1> 		;---------------------------------------
   232 0000079A 68[F8070000]68040F- <1> 		cdecl	draw_str, 25, 16, 0x0F04, .s1	; draw_str("ESP+ 0:-------- ");
   232 000007A2 00006A106A19E83FFB- <1>
   232 000007AB FFFF6683C410        <1>
   233 000007B1 68[09080000]68040F- <1> 		cdecl	draw_str, 25, 17, 0x0F04, .s2	; draw_str("   + 4:-------- ");
   233 000007B9 00006A116A19E828FB- <1>
   233 000007C2 FFFF6683C410        <1>
   234 000007C8 68[1A080000]68040F- <1> 		cdecl	draw_str, 25, 18, 0x0F04, .s3	; draw_str("   + 8:-------- ");
   234 000007D0 00006A126A19E811FB- <1>
   234 000007D9 FFFF6683C410        <1>
   235 000007DF 68[2B080000]68040F- <1> 		cdecl	draw_str, 25, 19, 0x0F04, .s4	; draw_str("   +12:-------- ");
   235 000007E7 00006A136A19E8FAFA- <1>
   235 000007F0 FFFF6683C410        <1>
   236                              <1> 
   237                              <1> 		;---------------------------------------
   238                              <1> 		; 無限ループ
   239                              <1> 		;---------------------------------------
   240 000007F6 EBFE                <1> 		jmp		$								; while (1) ; // 無限ループ
   241                              <1> 
   242 000007F8 4553502B20303A      <1> .s1		db	"ESP+ 0:"
   243 000007FF 5F5F5F5F5F5F5F5F20- <1> .p1		db	"________ ", 0
   243 00000808 00                  <1>
   244 00000809 2020202B20343A      <1> .s2		db	"   + 4:"
   245 00000810 5F5F5F5F5F5F5F5F20- <1> .p2		db	"________ ", 0
   245 00000819 00                  <1>
   246 0000081A 2020202B20383A      <1> .s3		db	"   + 8:"
   247 00000821 5F5F5F5F5F5F5F5F20- <1> .p3		db	"________ ", 0
   247 0000082A 00                  <1>
   248 0000082B 2020202B31323A      <1> .s4		db	"   +12:"
   249 00000832 5F5F5F5F5F5F5F5F20- <1> .p4		db	"________ ", 0
   249 0000083B 00                  <1>
   250                              <1> 
   251                              <1> ;************************************************************************
   252                              <1> ;	割り込み処理：デフォルトの処理
   253                              <1> ;************************************************************************
   254                              <1> int_default:
   255 0000083C 9C                  <1> 		pushf									; // EFLAGS(IF==0)
   256 0000083D 0E                  <1> 		push	cs								; // CS
   257 0000083E 68[23070000]        <1> 		push	int_stop						; // スタック表示処理
   258                              <1> 
   259 00000843 B8[49080000]        <1> 		mov		eax, .s0						; // 割り込み種別
   260 00000848 CF                  <1> 		iret
   261                              <1> 
   262 00000849 203C2020202053544F- <1> .s0		db	" <    STOP    > ", 0
   262 00000852 50202020203E2000    <1>
   263                              <1> 
   264                              <1> ;************************************************************************
   265                              <1> ;	割り込み処理：ゼロ除算
   266                              <1> ;************************************************************************
   267                              <1> int_zero_div:
   268 0000085A 9C                  <1> 		pushf									; // EFLAGS
   269 0000085B 0E                  <1> 		push	cs								; // CS
   270 0000085C 68[23070000]        <1> 		push	int_stop						; // スタック表示処理
   271                              <1> 
   272 00000861 B8[67080000]        <1> 		mov		eax, .s0						; // 割り込み種別
   273 00000866 CF                  <1> 		iret
   274                              <1> 
   275 00000867 203C20205A45524F20- <1> .s0		db	" <  ZERO DIV  > ", 0
   275 00000870 44495620203E2000    <1>
   276                              <1> 
   120                                  %include	"../modules/protect/pic.s"
   121                              <1> ;************************************************************************
   122                              <1> ;	割り込みコントローラの初期化
   123                              <1> ;========================================================================
   124                              <1> ;■書式		: void init_pic(void);
   125                              <1> ;
   126                              <1> ;■引数		: 無し
   127                              <1> ;
   128                              <1> ;■戻り値	: 無し
   129                              <1> ;************************************************************************
   130                              <1> init_pic:
   131                              <1> 		;---------------------------------------
   132                              <1> 		; 【レジスタの保存】
   133                              <1> 		;---------------------------------------
   134 00000878 50                  <1> 		push	eax
   135                              <1> 
   136                              <1> 		;---------------------------------------
   137                              <1> 		; マスタPICの設定
   138                              <1> 		;---------------------------------------
   139                              <1> 		outp	0x20, 0x11						; // MASTER.ICW1 = 0x11;
    69 00000879 B011                <2>  mov al, %2
    70 0000087B E620                <2>  out %1, al
   140                              <1> 		outp	0x21, 0x20						; // MASTER.ICW2 = 0x20;
    69 0000087D B020                <2>  mov al, %2
    70 0000087F E621                <2>  out %1, al
   141                              <1> 		outp	0x21, 0x04						; // MASTER.ICW3 = 0x04;
    69 00000881 B004                <2>  mov al, %2
    70 00000883 E621                <2>  out %1, al
   142                              <1> 		outp	0x21, 0x01						; // MASTER.ICW4 = 0x01;
    69 00000885 B001                <2>  mov al, %2
    70 00000887 E621                <2>  out %1, al
   143                              <1> 		outp	0x21, 0xFF						; // マスタ割り込みマスク
    69 00000889 B0FF                <2>  mov al, %2
    70 0000088B E621                <2>  out %1, al
   144                              <1> 
   145                              <1> 		;---------------------------------------
   146                              <1> 		; スレーブPICの設定
   147                              <1> 		;---------------------------------------
   148                              <1> 		outp	0xA0, 0x11						; // SLAVE.ICW1  = 0x11;
    69 0000088D B011                <2>  mov al, %2
    70 0000088F E6A0                <2>  out %1, al
   149                              <1> 		outp	0xA1, 0x28						; // SLAVE.ICW2  = 0x28;
    69 00000891 B028                <2>  mov al, %2
    70 00000893 E6A1                <2>  out %1, al
   150                              <1> 		outp	0xA1, 0x02						; // SLAVE.ICW3  = 0x02;
    69 00000895 B002                <2>  mov al, %2
    70 00000897 E6A1                <2>  out %1, al
   151                              <1> 		outp	0xA1, 0x01						; // SLAVE.ICW4  = 0x01;
    69 00000899 B001                <2>  mov al, %2
    70 0000089B E6A1                <2>  out %1, al
   152                              <1> 		outp	0xA1, 0xFF						; // スレーブ割り込みマスク
    69 0000089D B0FF                <2>  mov al, %2
    70 0000089F E6A1                <2>  out %1, al
   153                              <1> 
   154                              <1> 		;---------------------------------------
   155                              <1> 		; 【レジスタの復帰】
   156                              <1> 		;---------------------------------------
   157 000008A1 58                  <1> 		pop		eax
   158                              <1> 
   159 000008A2 C3                  <1> 		ret
   160                              <1> 
   121                                  %include	"../modules/protect/int_rtc.s"
   122                              <1> ;************************************************************************
   123                              <1> ;	RTCの割り込み許可設定
   124                              <1> ;========================================================================
   125                              <1> ;■書式		: void rtc_int_en(bit);
   126                              <1> ;
   127                              <1> ;■引数
   128                              <1> ;	bit		: 割り込みを許可するビット
   129                              <1> ;
   130                              <1> ;■戻り値	: 無し
   131                              <1> ;************************************************************************
   132                              <1> rtc_int_en:
   133                              <1> 		;---------------------------------------
   134                              <1> 		; 【スタックフレームの構築】
   135                              <1> 		;---------------------------------------
   136                              <1> 												; ------|--------
   137                              <1> 												;    + 8| ビット
   138                              <1> 												; ------|--------
   139                              <1> 												;    + 4| EIP（戻り番地）
   140 000008A3 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   141 000008A4 89E5                <1> 		mov		ebp, esp						; ------+--------
   142                              <1> 
   143                              <1> 		;---------------------------------------
   144                              <1> 		; 【レジスタの保存】
   145                              <1> 		;---------------------------------------
   146 000008A6 50                  <1> 		push	eax
   147                              <1> 
   148                              <1> 		;---------------------------------------
   149                              <1> 		; 割り込み許可設定
   150                              <1> 		;---------------------------------------
   151                              <1> 		outp	0x70, 0x0B						; outp(0x70, AL);   // レジスタBを選択
    69 000008A7 B00B                <2>  mov al, %2
    70 000008A9 E670                <2>  out %1, al
   152                              <1> 
   153 000008AB E471                <1> 		in		al, 0x71						; AL  = port(0x71); // レジスタBの
   154 000008AD 0A4508              <1> 		or		al, [ebp + 8]					; AL |= ビット;     // 指定されたビットをセット
   155                              <1> 
   156 000008B0 E671                <1> 		out		0x71, al						; outp(0x71, AL);   // レジスタBに書き込み
   157                              <1> 
   158                              <1> 		;---------------------------------------
   159                              <1> 		; 【レジスタの復帰】
   160                              <1> 		;---------------------------------------
   161 000008B2 58                  <1> 		pop		eax
   162                              <1> 
   163                              <1> 		;---------------------------------------
   164                              <1> 		; 【スタックフレームの破棄】
   165                              <1> 		;---------------------------------------
   166 000008B3 89EC                <1> 		mov		esp, ebp
   167 000008B5 5D                  <1> 		pop		ebp
   168                              <1> 
   169 000008B6 C3                  <1> 		ret
   170                              <1> 
   171                              <1> 
   172                              <1> ;************************************************************************
   173                              <1> ;	割り込み処理：RTC
   174                              <1> ;************************************************************************
   175                              <1> int_rtc:
   176                              <1> 		;---------------------------------------
   177                              <1> 		; 【レジスタの保存】
   178                              <1> 		;---------------------------------------
   179 000008B7 60                  <1> 		pusha
   180 000008B8 1E                  <1> 		push	ds
   181 000008B9 06                  <1> 		push	es
   182                              <1> 
   183                              <1> 		;---------------------------------------
   184                              <1> 		; データ用セグメントセレクタの設定
   185                              <1> 		;---------------------------------------
   186 000008BA 66B81000            <1> 		mov		ax, 0x0010						; 
   187 000008BE 8ED8                <1> 		mov		ds, ax							; 
   188 000008C0 8EC0                <1> 		mov		es, ax							; 
   189                              <1> 
   190                              <1> 		;---------------------------------------
   191                              <1> 		; RTCから時刻を取得
   192                              <1> 		;---------------------------------------
   193 000008C2 68[2C010000]E847FD- <1> 		cdecl	rtc_get_time, RTC_TIME			; EAX = get_time(&RTC_TIME);
   193 000008CA FFFF6683C404        <1>
   194                              <1> 												; 
   195                              <1> 		;---------------------------------------
   196                              <1> 		; RTCの割り込み要因を取得
   197                              <1> 		;---------------------------------------
   198                              <1> 		outp	0x70, 0x0C						; outp(0x70, 0x0C); // レジスタCを選択
    69 000008D0 B00C                <2>  mov al, %2
    70 000008D2 E670                <2>  out %1, al
   199 000008D4 E471                <1> 		in		al, 0x71						; AL = inp();
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; 割り込みフラグをクリア(EOI)
   203                              <1> 		;---------------------------------------
   204                              <1> 		outp	0xA0, 0x20						; outp(0xA0, EOI); // スレーブPIC
    69 000008D6 B020                <2>  mov al, %2
    70 000008D8 E6A0                <2>  out %1, al
   205                              <1> 		outp	0x20, 0x20						; outp(0x20, EOI); // マスタPIC
    69 000008DA B020                <2>  mov al, %2
    70 000008DC E620                <2>  out %1, al
   206                              <1> 
   207                              <1> 		;---------------------------------------
   208                              <1> 		; 【レジスタの復帰】
   209                              <1> 		;---------------------------------------
   210 000008DE 07                  <1> 		pop		es								; 
   211 000008DF 1F                  <1> 		pop		ds								; 
   212 000008E0 61                  <1> 		popa									; 
   213                              <1> 
   214 000008E1 CF                  <1> 		iret									; 割り込み処理の終了
   215                              <1> 
   122                                  %include	"../modules/protect/int_keyboard.s"
   123                              <1> ;************************************************************************
   124                              <1> ;	割り込み処理：キーボード
   125                              <1> ;------------------------------------------------------------------------
   126                              <1> ;	KBC（キーボードコントローラ）からキーコードを取得して、
   127                              <1> ;	専用のリングバッファに保存する。
   128                              <1> ;************************************************************************
   129                              <1> int_keyboard:
   130                              <1> 		;---------------------------------------
   131                              <1> 		; 【レジスタの保存】
   132                              <1> 		;---------------------------------------
   133 000008E2 60                  <1> 		pusha
   134 000008E3 1E                  <1> 		push	ds
   135 000008E4 06                  <1> 		push	es
   136                              <1> 
   137                              <1> 		;---------------------------------------
   138                              <1> 		; データ用セグメントの設定
   139                              <1> 		;---------------------------------------
   140 000008E5 66B81000            <1> 		mov		ax, 0x0010						; 
   141 000008E9 8ED8                <1> 		mov		ds, ax							; 
   142 000008EB 8EC0                <1> 		mov		es, ax							; 
   143                              <1> 
   144                              <1> 		;---------------------------------------
   145                              <1> 		; KBCのバッファ読み取り
   146                              <1> 		;---------------------------------------
   147 000008ED E460                <1> 		in		al, 0x60						; AL = キーコードの取得
   148                              <1> 
   149                              <1> 		;---------------------------------------
   150                              <1> 		; キーコードの保存
   151                              <1> 		;---------------------------------------
   152 000008EF 5068[08090000]E856- <1> 		cdecl	ring_wr, _KEY_BUFF, eax			; ring_wr(_KEY_BUFF, EAX); // キーコードの保存
   152 000008F7 0000006683C408      <1>
   153                              <1> 
   154                              <1> 		;---------------------------------------
   155                              <1> 		; 割り込み終了コマンド送信
   156                              <1> 		;---------------------------------------
   157                              <1> 		outp	0x20, 0x20						; outp(); // マスタPIC:EOIコマンド
    69 000008FE B020                <2>  mov al, %2
    70 00000900 E620                <2>  out %1, al
   158                              <1> 
   159                              <1> 		;---------------------------------------
   160                              <1> 		; 【レジスタの復帰】
   161                              <1> 		;---------------------------------------
   162 00000902 07                  <1> 		pop		es								; 
   163 00000903 1F                  <1> 		pop		ds								; 
   164 00000904 61                  <1> 		popa
   165                              <1> 
   166 00000905 CF                  <1> 		iret									; 割り込みからの復帰
   167                              <1> 
   168 00000906 00<rep 2h>          <1> ALIGN 4, db 0
   169 00000908 00<rep 18h>         <1> _KEY_BUFF:	times ring_buff_size db 0
   170                              <1> 
   123                                  %include	"../modules/protect/ring_buff.s"
   124                              <1> ;************************************************************************
   125                              <1> ;	リングバッファからデータを取得
   126                              <1> ;========================================================================
   127                              <1> ;■書式		: DWORD ring_rd(buff, data);
   128                              <1> ;
   129                              <1> ;■引数
   130                              <1> ;	buff	: リングバッファ
   131                              <1> ;	data	: 読み込んだデータの保存先アドレス
   132                              <1> ;
   133                              <1> ;■戻り値	: データあり(0以外)、データ無し(0)
   134                              <1> ;************************************************************************
   135                              <1> ring_rd:
   136                              <1> 		;---------------------------------------
   137                              <1> 		; 【スタックフレームの構築】
   138                              <1> 		;---------------------------------------
   139                              <1> 												; ------|--------
   140                              <1> 												;    +12| リングデータ
   141                              <1> 												;    + 8| データアドレス
   142                              <1> 												; ------|--------
   143                              <1> 												;    + 4| EIP（戻り番地）
   144 00000920 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   145 00000921 89E5                <1> 		mov		ebp, esp						; ------+--------
   146                              <1> 
   147                              <1> 		;---------------------------------------
   148                              <1> 		; 【レジスタの保存】
   149                              <1> 		;---------------------------------------
   150 00000923 53                  <1> 		push	ebx
   151 00000924 56                  <1> 		push	esi
   152 00000925 57                  <1> 		push	edi
   153                              <1> 
   154                              <1> 		;---------------------------------------
   155                              <1> 		; 引数を取得
   156                              <1> 		;---------------------------------------
   157 00000926 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   158 00000929 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = データアドレス;
   159                              <1> 
   160                              <1> 		;---------------------------------------
   161                              <1> 		; 読み込み位置を確認
   162                              <1> 		;---------------------------------------
   163 0000092C B800000000          <1> 		mov		eax, 0							; EAX = 0;          // データ無し
   164 00000931 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;         // 読み込み位置
   165 00000933 3B5E04              <1> 		cmp		ebx, [esi + ring_buff.wp]		; if (EBX != wp)    // 書き込み位置と異なる
   166 00000936 7411                <1> 		je		.10E							; {
   167                              <1> 												;   
   168 00000938 8A441E08            <1> 		mov		al, [esi + ring_buff.item + ebx] ;   AL = BUFF[rp]; // キーコードを保存
   169                              <1> 												;   
   170 0000093C 8807                <1> 		mov		[edi], al						;   [EDI] = AL;     // データを保存
   171                              <1> 												;   
   172 0000093E 43                  <1> 		inc		ebx								;   EBX++;          // 次の読み込み位置
   173 0000093F 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= 0x0F     // サイズの制限
   174 00000942 891E                <1> 		mov		[esi + ring_buff.rp], ebx		;   rp = EBX;       // 読み込み位置を保存
   175                              <1> 												;   
   176 00000944 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // データあり
   177                              <1> .10E:											; }
   178                              <1> 
   179                              <1> 		;---------------------------------------
   180                              <1> 		; 【レジスタの復帰】
   181                              <1> 		;---------------------------------------
   182 00000949 5F                  <1> 		pop		edi
   183 0000094A 5E                  <1> 		pop		esi
   184 0000094B 5B                  <1> 		pop		ebx
   185                              <1> 
   186                              <1> 		;---------------------------------------
   187                              <1> 		; 【スタックフレームの破棄】
   188                              <1> 		;---------------------------------------
   189 0000094C 89EC                <1> 		mov		esp, ebp
   190 0000094E 5D                  <1> 		pop		ebp
   191                              <1> 
   192 0000094F C3                  <1> 		ret
   193                              <1> 
   194                              <1> ;************************************************************************
   195                              <1> ;	リングバッファにデータを格納
   196                              <1> ;========================================================================
   197                              <1> ;■書式		: DWORD ring_wr(buff, data);
   198                              <1> ;
   199                              <1> ;■引数
   200                              <1> ;	buff	: リングバッファ
   201                              <1> ;	data	: 書き込むデータ
   202                              <1> ;
   203                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   204                              <1> ;************************************************************************
   205                              <1> ring_wr:
   206                              <1> 		;---------------------------------------
   207                              <1> 		; 【スタックフレームの構築】
   208                              <1> 		;---------------------------------------
   209                              <1> 												; ------|--------
   210                              <1> 												;    +12| リングデータ
   211                              <1> 												;    + 8| データ
   212                              <1> 												; ------|--------
   213                              <1> 												;    + 4| EIP（戻り番地）
   214 00000950 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   215 00000951 89E5                <1> 		mov		ebp, esp						; ------+--------
   216                              <1> 
   217                              <1> 		;---------------------------------------
   218                              <1> 		; 【レジスタの保存】
   219                              <1> 		;---------------------------------------
   220 00000953 53                  <1> 		push	ebx
   221 00000954 51                  <1> 		push	ecx
   222 00000955 56                  <1> 		push	esi
   223                              <1> 
   224                              <1> 		;---------------------------------------
   225                              <1> 		; 引数を取得
   226                              <1> 		;---------------------------------------
   227 00000956 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   228                              <1> 
   229                              <1> 		;---------------------------------------
   230                              <1> 		; 書き込み位置を確認
   231                              <1> 		;---------------------------------------
   232 00000959 B800000000          <1> 		mov		eax, 0							; EAX  = 0;         // 失敗
   233 0000095E 8B5E04              <1> 		mov		ebx, [esi + ring_buff.wp]		; EBX  = wp;        // 書き込み位置
   234 00000961 89D9                <1> 		mov		ecx, ebx						; ECX  = EBX;
   235 00000963 41                  <1> 		inc		ecx								; ECX++;            // 次の書き込み位置
   236 00000964 83E10F              <1> 		and		ecx, RING_INDEX_MASK			; ECX &= 0x0F       // サイズの制限
   237                              <1> 												; 
   238 00000967 3B0E                <1> 		cmp		ecx, [esi + ring_buff.rp]		; if (ECX != rp)    // 読み込み位置と異なる
   239 00000969 740F                <1> 		je		.10E							; {
   240                              <1> 												; 
   241 0000096B 8A450C              <1> 		mov		al, [ebp +12]					;   AL = データ;
   242                              <1> 												; 
   243 0000096E 88441E08            <1> 		mov		[esi + ring_buff.item + ebx], al ;   BUFF[wp] = AL; // キーコードを保存
   244 00000972 894E04              <1> 		mov		[esi + ring_buff.wp], ecx		;   wp = ECX;       // 書き込み位置を保存
   245 00000975 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // 成功
   246                              <1> .10E:											; }
   247                              <1> 
   248                              <1> 		;---------------------------------------
   249                              <1> 		; 【レジスタの復帰】
   250                              <1> 		;---------------------------------------
   251 0000097A 5E                  <1> 		pop		esi
   252 0000097B 59                  <1> 		pop		ecx
   253 0000097C 5B                  <1> 		pop		ebx
   254                              <1> 
   255                              <1> 		;---------------------------------------
   256                              <1> 		; 【スタックフレームの破棄】
   257                              <1> 		;---------------------------------------
   258 0000097D 89EC                <1> 		mov		esp, ebp
   259 0000097F 5D                  <1> 		pop		ebp
   260                              <1> 
   261 00000980 C3                  <1> 		ret
   262                              <1> 
   263                              <1> ;************************************************************************
   264                              <1> ;	リングバッファ内要素の表示
   265                              <1> ;========================================================================
   266                              <1> ;■書式		: void ring_show(col, row, buff);
   267                              <1> ;
   268                              <1> ;■引数
   269                              <1> ;	col		: 列
   270                              <1> ;	row		: 行
   271                              <1> ;	buff	: リングバッファ
   272                              <1> ;
   273                              <1> ;■戻り値	: 無し
   274                              <1> ;************************************************************************
   275                              <1> draw_key:
   276                              <1> 		;---------------------------------------
   277                              <1> 		; 【スタックフレームの構築】
   278                              <1> 		;---------------------------------------
   279                              <1> 												; ------|--------
   280                              <1> 												; EBP+16| リングバッファ
   281                              <1> 												; EBP+12| Y（行）
   282                              <1> 												; EBP+ 8| X（列）
   283                              <1> 												; ------|--------
   284 00000981 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   285 00000982 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   286                              <1> 												; ------|--------
   287                              <1> 
   288                              <1> 		;---------------------------------------
   289                              <1> 		; 【レジスタの保存】
   290                              <1> 		;---------------------------------------
   291 00000984 60                  <1> 		pusha
   292                              <1> 
   293                              <1> 		;---------------------------------------
   294                              <1> 		; 引数を取得
   295                              <1> 		;---------------------------------------
   296 00000985 8B5508              <1> 		mov		edx, [ebp + 8]					; EDX = X（列）;
   297 00000988 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）;
   298 0000098B 8B7510              <1> 		mov		esi, [ebp +16]					; ESI = リングバッファ;
   299                              <1> 
   300                              <1> 		;---------------------------------------
   301                              <1> 		; リングバッファの情報を取得
   302                              <1> 		;---------------------------------------
   303 0000098E 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;             // 読み込み位置
   304 00000990 8D7608              <1> 		lea		esi, [esi + ring_buff.item]		; ESI = &KEY_BUFF[EBX];
   305 00000993 B910000000          <1> 		mov		ecx, RING_ITEM_SIZE				; ECX = RING_ITEM_SIZE; // 要素数
   306                              <1> 
   307                              <1> 		;---------------------------------------
   308                              <1> 		; 文字に変換しながら表示
   309                              <1> 		;---------------------------------------
   310                              <1> .10L:											; do
   311                              <1> 												; {
   312 00000998 4B                  <1> 		dec		ebx								;   EBX--; // 読み込み位置
   313 00000999 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= RING_INDEX_MASK;
   314 0000099C 8A041E              <1> 		mov		al, [esi + ebx]					;   EAX  = KEY_BUFF[EBX];
   315                              <1> 												;   
   316 0000099F 6A046A106A0268-     <1> 		cdecl	itoa, eax, .tmp, 2, 16, 0b0100	;   // キーコードを文字列に変換
   316 000009A6 [D0090000]50E8DAFB- <1>
   316 000009AE FFFF6683C414        <1>
   317 000009B4 68[D0090000]6A0257- <1> 		cdecl	draw_str, edx, edi, 0x02, .tmp	;   // 変換した文字列を表示
   317 000009BC 52E82AF9FFFF6683C4- <1>
   317 000009C5 10                  <1>
   318                              <1> 												;   
   319 000009C6 83C203              <1> 		add		edx, 3							;   // 表示位置を更新（3文字分）
   320                              <1> 												;   
   321 000009C9 E2CD                <1> 		loop	.10L							;   
   322                              <1> .10E:											; } while (ECX--);
   323                              <1> 
   324                              <1> 		;---------------------------------------
   325                              <1> 		; 【レジスタの復帰】
   326                              <1> 		;---------------------------------------
   327 000009CB 61                  <1> 		popa
   328                              <1> 
   329                              <1> 		;---------------------------------------
   330                              <1> 		; 【スタックフレームの破棄】
   331                              <1> 		;---------------------------------------
   332 000009CC 89EC                <1> 		mov		esp, ebp
   333 000009CE 5D                  <1> 		pop		ebp
   334                              <1> 
   335 000009CF C3                  <1> 		ret
   336                              <1> 
   337 000009D0 2D2D2000            <1> .tmp	db "-- ", 0
   124                                  
   125                                  %include	"modules/int_timer.s"
   126                              <1> ;************************************************************************
   127                              <1> ;	例外:タイマー
   128                              <1> ;************************************************************************
   129                              <1> int_timer:
   130                              <1> 		;---------------------------------------
   131                              <1> 		; 【レジスタの保存】
   132                              <1> 		;---------------------------------------
   133 000009D4 60                  <1> 		pusha
   134 000009D5 1E                  <1> 		push	ds
   135 000009D6 06                  <1> 		push	es
   136                              <1> 
   137                              <1> 		;---------------------------------------
   138                              <1> 		; データ用セグメントの設定
   139                              <1> 		;---------------------------------------
   140 000009D7 66B81000            <1> 		mov		ax, 0x0010						; 
   141 000009DB 8ED8                <1> 		mov		ds, ax							; 
   142 000009DD 8EC0                <1> 		mov		es, ax							; 
   143                              <1> 
   144                              <1> 		;---------------------------------------
   145                              <1> 		; TICK
   146                              <1> 		;---------------------------------------
   147 000009DF FF05[F0090000]      <1> 		inc		dword [TIMER_COUNT]				; TIMER_COUNT++; // 割り込み回数の更新
   148                              <1> 
   149                              <1> 		;---------------------------------------
   150                              <1> 		; 割り込みフラグをクリア(EOI)
   151                              <1> 		;---------------------------------------
   152                              <1> 		outp	0x20, 0x20						; // マスタPIC:EOIコマンド
    69 000009E5 B020                <2>  mov al, %2
    70 000009E7 E620                <2>  out %1, al
   153                              <1> 
   154                              <1> 		;---------------------------------------
   155                              <1> 		; 【レジスタの復帰】
   156                              <1> 		;---------------------------------------
   157 000009E9 07                  <1> 		pop		es								; 
   158 000009EA 1F                  <1> 		pop		ds								; 
   159 000009EB 61                  <1> 		popa
   160                              <1> 
   161 000009EC CF                  <1> 		iret
   162                              <1> 
   163 000009ED 00<rep 3h>          <1> ALIGN 4, db 0
   164 000009F0 00000000            <1> TIMER_COUNT:	dd	0
   165                              <1> 
   126                                  %include	"../modules/protect/timer.s"
   127                              <1> ;************************************************************************
   128                              <1> ;	タイマーの設定
   129                              <1> ;------------------------------------------------------------------------
   130                              <1> ;	タイマー（カウンタ0）割り込み許可
   131                              <1> ;========================================================================
   132                              <1> ;■書式		: void int_en_timer0(void);
   133                              <1> ;
   134                              <1> ;■引数		: 無し
   135                              <1> ;
   136                              <1> ;■戻り値	: 無し
   137                              <1> ;************************************************************************
   138                              <1> int_en_timer0:
   139                              <1> 		;---------------------------------------
   140                              <1> 		; 【レジスタの保存】
   141                              <1> 		;---------------------------------------
   142 000009F4 50                  <1> 		push	eax
   143                              <1> 
   144                              <1> 		;---------------------------------------
   145                              <1> 		;	8254 Timer
   146                              <1> 		;	0x2e9c(11932)=10[ms] @ CLK=1,193,182[Hz]
   147                              <1> 		;---------------------------------------
   148                              <1> 		 outp	 0x43, 0b_00_11_010_0			; // カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    69 000009F5 B034                <2>  mov al, %2
    70 000009F7 E643                <2>  out %1, al
   149                              <1> 		 outp	 0x40, 0x9C						; // 下位バイト
    69 000009F9 B09C                <2>  mov al, %2
    70 000009FB E640                <2>  out %1, al
   150                              <1> 		 outp	 0x40, 0x2E						; // 上位バイト
    69 000009FD B02E                <2>  mov al, %2
    70 000009FF E640                <2>  out %1, al
   151                              <1> 
   152                              <1> 		;---------------------------------------
   153                              <1> 		; 【レジスタの復帰】
   154                              <1> 		;---------------------------------------
   155 00000A01 58                  <1> 		pop		eax
   156                              <1> 
   157 00000A02 C3                  <1> 		ret
   158                              <1> 
   127                                  %include	"../modules/protect/draw_rotation_bar.s"
   128                              <1> ;************************************************************************
   129                              <1> ;	画面左下に、回転する棒を表示
   130                              <1> ;========================================================================
   131                              <1> ;■書式		: void draw_rotation_bar(void);
   132                              <1> ;
   133                              <1> ;■引数		: 無し
   134                              <1> ;
   135                              <1> ;■戻り値	: 無し
   136                              <1> ;************************************************************************
   137                              <1> draw_rotation_bar:
   138                              <1> 		;---------------------------------------
   139                              <1> 		; 【レジスタの保存】
   140                              <1> 		;---------------------------------------
   141 00000A03 50                  <1> 		push	eax
   142                              <1> 
   143                              <1> 		;---------------------------------------
   144                              <1> 		; タイマー割り込みカウンタを確認
   145                              <1> 		;---------------------------------------
   146 00000A04 A1[F0090000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX  = タイマー割り込みカウンタ
   147 00000A09 C1E804              <1> 		shr		eax, 4							; EAX /= 4;    // 16で除算
   148 00000A0C 3B05[340A0000]      <1> 		cmp		eax, [.index]					; if (EAX != 前回値)
   149 00000A12 741E                <1> 		je		.10E							; {
   150                              <1> 												;   
   151 00000A14 A3[340A0000]        <1> 		mov		[.index], eax					;   前回値 = EAX;
   152 00000A19 83E003              <1> 		and		eax, 0x03						;   EAX &= 0x03; // 0～3に限定
   153                              <1> 												;   
   154 00000A1C 8A80[380A0000]      <1> 		mov		al, [.table + eax]				;   AL = table[index];
   155 00000A22 506A0F6A1D6A00E8B5- <1> 		cdecl	draw_char, 0, 29, 0x000F, eax	;   draw_char(); // 文字を表示
   155 00000A2B F7FFFF6683C410      <1>
   156                              <1> 												;   
   157                              <1> .10E:											; }
   158                              <1> 
   159                              <1> 		;---------------------------------------
   160                              <1> 		; 【レジスタの復帰】
   161                              <1> 		;---------------------------------------
   162 00000A32 58                  <1> 		pop		eax
   163                              <1> 
   164 00000A33 C3                  <1> 		ret
   165                              <1> 
   166                              <1> ALIGN 4, db 0
   167 00000A34 00000000            <1> .index:		dd 0								; 前回値
   168 00000A38 7C2F2D5C            <1> .table:		db	"|/-\"							; 表示キャラクタ
   169                              <1> 
   128                                  
   129                                  ;************************************************************************
   130                                  ;	パディング
   131                                  ;************************************************************************
   132 00000A3C 00<rep 15C4h>           		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
   133                                  
