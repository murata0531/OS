     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  ;************************************************************************
     8                                  ;	マクロ
     9                                  ;************************************************************************
    10                                  %include	"../include/define.s"
    11                              <1> ;************************************************************************
    12                              <1> ;	メモリイメージ
    13                              <1> ;************************************************************************
    14                              <1> 
    15                              <1> 		;---------------------------------------
    16                              <1> 		;           |            | 
    17                              <1> 		;           |____________| 
    18                              <1> 		; 0000_7A00 |            | ( 512) スタック
    19                              <1> 		;           |____________| 
    20                              <1> 		; 0000_7C00 |            | (  8K) ブート
    21                              <1> 		;           =            = 
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    24                              <1> 		;           =            = 
    25                              <1> 		;           |____________| 
    26                              <1> 		; 0000_BC00 |////////////| 
    27                              <1> 		;           =            = 
    28                              <1> 		;           |____________| 
    29                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    32                              <1> 		;           |____________| 
    33                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    34                              <1> 		;           |            | 
    35                              <1> 		;           =            = 
    36                              <1> 		;           |____________| 
    37                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    38                              <1> 		;           |            | （各タスク1K）
    39                              <1> 		;           =            = 
    40                              <1> 		;           |____________| 
    41                              <1> 		; 0010_5000 |            | Dir
    42                              <1> 		;      6000 |____________| Page
    43                              <1> 		; 0010_7000 |            | Dir
    44                              <1> 		;      8000 |____________| Page
    45                              <1> 		; 0010_9000 |////////////| 
    46                              <1> 		;           |            | 
    47                              <1> 
    48                              <1> 
    49                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    50                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    51                              <1> 
    52                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    53                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    54                              <1> 
    55                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    56                              <1> 
    57                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    58                              <1> 
    59                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    60                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    61                              <1> 
    62                              <1> 		E820_RECORD_SIZE	equ		20
    63                              <1> 
    64                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    11                                  %include	"../include/macro.s"
    12                              <1> ;************************************************************************
    13                              <1> ; 関数呼び出し用マクロ
    14                              <1> ;
    15                              <1> ; 使い方：
    16                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    17                              <1> ;
    18                              <1> ;************************************************************************
    19                              <1> 
    20                              <1> %macro cdecl 1-*.nolist
    21                              <1> 
    22                              <1>     %rep %0 - 1
    23                              <1>         push    %{-1:-1}
    24                              <1>         %rotate -1
    25                              <1>     %endrep
    26                              <1>     %rotate -1
    27                              <1> 
    28                              <1>         call    %1
    29                              <1> 
    30                              <1>     %if 1 < %0
    31                              <1>         add     sp,(__BITS__ >> 3) * (%0 - 1)
    32                              <1>     %endif
    33                              <1> 
    34                              <1> %endmacro
    35                              <1> 
    36                              <1> ;************************************************************************
    37                              <1> ;	構造体
    38                              <1> ;************************************************************************
    39                              <1> 
    40                              <1> ;-----------------------------------------------
    41                              <1> ;	ドライブパラメータ
    42                              <1> ;-----------------------------------------------
    43                              <1> struc drive
    44 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
    45 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
    46 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
    47 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
    48                              <1> endstruc
    12                                  
    13                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    14                                  
    15                                  [BITS 32]
    16                                  ;************************************************************************
    17                                  ;	エントリポイント
    18                                  ;************************************************************************
    19                                  kernel:
    20                                  		;---------------------------------------
    21                                  		; フォントアドレスを取得
    22                                  		;---------------------------------------
    23 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    24 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    25 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    26 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    27 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    28 00000011 A3[5C000000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    29                                  
    30                                  		;---------------------------------------
    31                                  		; フォントの一覧表示
    32                                  		;---------------------------------------
    33 00000016 6A0D6A3FE8B8010000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
    33 0000001F 6683C408           
    34 00000023 6A046A3FE839020000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
    34 0000002C 6683C408           
    35                                  
    36                                  		;---------------------------------------
    37                                  		; 文字列の表示
    38                                  		;---------------------------------------
    39 00000030 68[49000000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
    39 00000038 00006A0E6A19E8D901-
    39 00000041 00006683C410       
    40                                  
    41                                  		;---------------------------------------
    42                                  		; 処理の終了
    43                                  		;---------------------------------------
    44 00000047 EBFE                    		jmp		$								; while (1) ; // 無限ループ
    45                                  
    46 00000049 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
    46 00000052 65726E656C212000   
    47                                  
    48 0000005A 00<rep 2h>              ALIGN 4, db 0
    49 0000005C 00000000                FONT_ADR:	dd	0
    50                                  
    51                                  ;************************************************************************
    52                                  ;	モジュール
    53                                  ;************************************************************************
    54                                  %include	"../modules/protect/vga.s"
    55                              <1> ;************************************************************************
    56                              <1> ;	読み込みプレーンの選択
    57                              <1> ;========================================================================
    58                              <1> ;■書式		: void vga_set_read_plane(plane);
    59                              <1> ;
    60                              <1> ;■引数
    61                              <1> ;	plane	: 読み込みプレーン
    62                              <1> ;
    63                              <1> ;■戻り値	: 無し
    64                              <1> ;************************************************************************
    65                              <1> vga_set_read_plane:
    66                              <1> 		;---------------------------------------
    67                              <1> 		; 【スタックフレームの構築】
    68                              <1> 		;---------------------------------------
    69                              <1> 												; EBP+ 8| プレーン（インデックス）
    70                              <1> 												; ------+----------------
    71 00000060 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    72 00000061 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    73                              <1> 												; ------+----------------
    74                              <1> 
    75                              <1> 		;---------------------------------------
    76                              <1> 		; 【レジスタの保存】
    77                              <1> 		;---------------------------------------
    78 00000063 50                  <1> 		push	eax
    79 00000064 52                  <1> 		push	edx
    80                              <1> 
    81                              <1> 		;---------------------------------------
    82                              <1> 		; 読み込みプレーンの選択
    83                              <1> 		;---------------------------------------
    84 00000065 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
    85 00000068 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
    86 0000006B B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
    87 0000006D 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
    88 00000071 66EF                <1> 		out		dx, ax							; // ポート出力
    89                              <1> 
    90                              <1> 		;---------------------------------------
    91                              <1> 		; 【レジスタの復帰】
    92                              <1> 		;---------------------------------------
    93 00000073 5A                  <1> 		pop		edx
    94 00000074 58                  <1> 		pop		eax
    95                              <1> 
    96                              <1> 		;---------------------------------------
    97                              <1> 		; 【スタックフレームの破棄】
    98                              <1> 		;---------------------------------------
    99 00000075 89EC                <1> 		mov		esp, ebp
   100 00000077 5D                  <1> 		pop		ebp
   101                              <1> 
   102 00000078 C3                  <1> 		ret
   103                              <1> 
   104                              <1> 
   105                              <1> ;************************************************************************
   106                              <1> ;	書き込みプレーンを選択
   107                              <1> ;========================================================================
   108                              <1> ;■書式		: void vga_set_write_plane(plane);
   109                              <1> ;
   110                              <1> ;■引数
   111                              <1> ;	plane	: 書き込みプレーン
   112                              <1> ;
   113                              <1> ;■戻り値	: 無し
   114                              <1> ;************************************************************************
   115                              <1> vga_set_write_plane:
   116                              <1> 		;---------------------------------------
   117                              <1> 		; 【スタックフレームの構築】
   118                              <1> 		;---------------------------------------
   119                              <1> 												; EBP+ 8| プレーン（ビット指定）
   120                              <1> 												; ------+----------------
   121 00000079 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   122 0000007A 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   123                              <1> 												; ------+----------------
   124                              <1> 
   125                              <1> 		;---------------------------------------
   126                              <1> 		; 【レジスタの保存】
   127                              <1> 		;---------------------------------------
   128 0000007C 50                  <1> 		push	eax
   129 0000007D 52                  <1> 		push	edx
   130                              <1> 
   131                              <1> 		;---------------------------------------
   132                              <1> 		; 書き込みプレーンの選択
   133                              <1> 		;---------------------------------------
   134 0000007E 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
   135 00000081 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
   136 00000084 B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
   137 00000086 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
   138 0000008A 66EF                <1> 		out		dx, ax							; // ポート出力
   139                              <1> 
   140                              <1> 		;---------------------------------------
   141                              <1> 		; 【レジスタの復帰】
   142                              <1> 		;---------------------------------------
   143 0000008C 5A                  <1> 		pop		edx
   144 0000008D 58                  <1> 		pop		eax
   145                              <1> 
   146                              <1> 		;---------------------------------------
   147                              <1> 		; 【スタックフレームの破棄】
   148                              <1> 		;---------------------------------------
   149 0000008E 89EC                <1> 		mov		esp, ebp
   150 00000090 5D                  <1> 		pop		ebp
   151                              <1> 
   152 00000091 C3                  <1> 		ret
   153                              <1> 
   154                              <1> 
   155                              <1> ;************************************************************************
   156                              <1> ;	フォントの書き込み
   157                              <1> ;========================================================================
   158                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   159                              <1> ;
   160                              <1> ;■引数
   161                              <1> ;	font	: FONTアドレス
   162                              <1> ;	vram	: VRAMアドレス
   163                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   164                              <1> ;	color	: 描画色
   165                              <1> ;
   166                              <1> ;■戻り値	: 無し
   167                              <1> ;************************************************************************
   168                              <1> vram_font_copy:
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 【スタックフレームの構築】
   171                              <1> 		;---------------------------------------
   172                              <1> 												; EBP+20| 色（背景/前景色）
   173                              <1> 												; EBP+16| プレーン（ビット指定）
   174                              <1> 												; EBP+12| VRAMアドレス
   175                              <1> 												; EBP+ 8| FONTアドレス
   176                              <1> 												; ------+----------------
   177 00000092 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   178 00000093 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   179                              <1> 												; ------+----------------
   180                              <1> 
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 【レジスタの保存】
   183                              <1> 		;---------------------------------------
   184 00000095 50                  <1> 		push	eax
   185 00000096 53                  <1> 		push	ebx
   186 00000097 51                  <1> 		push	ecx
   187 00000098 52                  <1> 		push	edx
   188 00000099 56                  <1> 		push	esi
   189 0000009A 57                  <1> 		push	edi
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 【処理の開始】
   193                              <1> 		;---------------------------------------
   194 0000009B 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   195 0000009E 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   196 000000A1 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   197 000000A5 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   198                              <1> 
   199 000000A9 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   200 000000AB 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   201 000000AE FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   202                              <1> 
   203 000000B0 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   204 000000B2 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   205 000000B5 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   206                              <1> 
   207                              <1> 		;---------------------------------------
   208                              <1> 		; 16ドットフォントのコピー
   209                              <1> 		;---------------------------------------
   210 000000B7 FC                  <1> 		cld										; DF  = 0; // アドレス加算
   211                              <1> 
   212 000000B8 B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   213                              <1> .10L:											; do
   214                              <1> 												; {
   215                              <1> 		;---------------------------------------
   216                              <1> 		; フォントマスクの作成
   217                              <1> 		;---------------------------------------
   218 000000BD AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   219 000000BE 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   220 000000C0 F6D4                <1> 		not		ah								;   
   221                              <1> 
   222                              <1> 		;---------------------------------------
   223                              <1> 		; 前景色
   224                              <1> 		;---------------------------------------
   225 000000C2 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   226                              <1> 
   227                              <1> 		;---------------------------------------
   228                              <1> 		; 背景色
   229                              <1> 		;---------------------------------------
   230 000000C4 F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   231 000000CA 7404                <1> 		jz		.11F							;   {
   232 000000CC 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   233 000000CE EB02                <1> 		jmp		.11E							;   }
   234                              <1> .11F:											;   else
   235                              <1> 												;   {
   236 000000D0 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   237                              <1> .11E:											;   }
   238                              <1> 
   239                              <1> 		;---------------------------------------
   240                              <1> 		; 前景色と背景色を合成
   241                              <1> 		;---------------------------------------
   242 000000D2 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   243                              <1> 
   244                              <1> 		;---------------------------------------
   245                              <1> 		; 新しい値を出力
   246                              <1> 		;---------------------------------------
   247 000000D4 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   248                              <1> 
   249 000000D6 83C750              <1> 		add		edi, 80							;   EDI += 80;
   250 000000D9 E2E2                <1> 		loop	.10L							; } while (--ECX);
   251                              <1> .10E:											; 
   252                              <1> 
   253                              <1> 		;---------------------------------------
   254                              <1> 		; 【レジスタの復帰】
   255                              <1> 		;---------------------------------------
   256 000000DB 5F                  <1> 		pop		edi
   257 000000DC 5E                  <1> 		pop		esi
   258 000000DD 5A                  <1> 		pop		edx
   259 000000DE 59                  <1> 		pop		ecx
   260 000000DF 5B                  <1> 		pop		ebx
   261 000000E0 58                  <1> 		pop		eax
   262                              <1> 
   263                              <1> 		;---------------------------------------
   264                              <1> 		; 【スタックフレームの破棄】
   265                              <1> 		;---------------------------------------
   266 000000E1 89EC                <1> 		mov		esp, ebp
   267 000000E3 5D                  <1> 		pop		ebp
   268                              <1> 
   269 000000E4 C3                  <1> 		ret
   270                              <1> 
   271                              <1> 
   272                              <1> ;************************************************************************
   273                              <1> ;	ビットパターンの書き込み
   274                              <1> ;========================================================================
   275                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   276                              <1> ;
   277                              <1> ;■引数
   278                              <1> ;	bit		: 出力ビットパターン
   279                              <1> ;	vram	: VRAMアドレス
   280                              <1> ;	flag	: 1:セット, 0:クリア
   281                              <1> ;
   282                              <1> ;■戻り値	: 無し
   283                              <1> ;************************************************************************
   284                              <1> vram_bit_copy:
   285                              <1> 		;---------------------------------------
   286                              <1> 		; 【スタックフレームの構築】
   287                              <1> 		;---------------------------------------
   288                              <1> 												; EBP+20| 色（背景/前景色）
   289                              <1> 												; EBP+16| プレーン（ビット指定）
   290                              <1> 												; EBP+12| VRAMアドレス
   291                              <1> 												; EBP+ 8| 出力ビットパターン
   292                              <1> 												; ------+----------------
   293 000000E5 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   294 000000E6 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   295                              <1> 												; ------+----------------
   296                              <1> 
   297                              <1> 		;---------------------------------------
   298                              <1> 		; 【レジスタの保存】
   299                              <1> 		;---------------------------------------
   300 000000E8 50                  <1> 		push	eax
   301 000000E9 53                  <1> 		push	ebx
   302 000000EA 57                  <1> 		push	edi
   303                              <1> 
   304                              <1> 		;---------------------------------------
   305                              <1> 		; 【処理の開始】
   306                              <1> 		;---------------------------------------
   307 000000EB 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   308 000000EE 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   309 000000F2 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   310                              <1> 
   311 000000F6 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   312 000000F8 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   313 000000FB FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   314                              <1> 
   315                              <1> 		;---------------------------------------
   316                              <1> 		; マスクデータの作成
   317                              <1> 		;---------------------------------------
   318 000000FD 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   319 00000100 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   320 00000102 F6D4                <1> 		not		ah								; 
   321                              <1> 
   322                              <1> 		;---------------------------------------
   323                              <1> 		; 現在値の出力を取得
   324                              <1> 		;---------------------------------------
   325 00000104 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   326 00000106 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   327 00000108 08E0                <1> 		or		al, ah							; AL |= AH;
   328                              <1> 
   329                              <1> 		;---------------------------------------
   330                              <1> 		; 新しい値を出力
   331                              <1> 		;---------------------------------------
   332 0000010A 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   333                              <1> 
   334                              <1> 		;---------------------------------------
   335                              <1> 		; 【レジスタの復帰】
   336                              <1> 		;---------------------------------------
   337 0000010C 5F                  <1> 		pop		edi
   338 0000010D 5B                  <1> 		pop		ebx
   339 0000010E 58                  <1> 		pop		eax
   340                              <1> 
   341                              <1> 		;---------------------------------------
   342                              <1> 		; 【スタックフレームの破棄】
   343                              <1> 		;---------------------------------------
   344 0000010F 89EC                <1> 		mov		esp, ebp
   345 00000111 5D                  <1> 		pop		ebp
   346                              <1> 
   347 00000112 C3                  <1> 		ret
    55                                  %include	"../modules/protect/draw_char.s"
    56                              <1> ;************************************************************************
    57                              <1> ;	文字の表示
    58                              <1> ;------------------------------------------------------------------------
    59                              <1> ;	グラフィックスモードでテキストを表示
    60                              <1> ;========================================================================
    61                              <1> ;■書式		: void draw_char(col, row, color, ch);
    62                              <1> ;
    63                              <1> ;■引数
    64                              <1> ;	col		: 列（0～79）
    65                              <1> ;	row		: 行（0～29）
    66                              <1> ;	color	: 描画色
    67                              <1> ;	ch		: 文字
    68                              <1> ;
    69                              <1> ;■戻り値	: 無し
    70                              <1> ;************************************************************************
    71                              <1> draw_char:
    72                              <1> 		;---------------------------------------
    73                              <1> 		; 【スタックフレームの構築】
    74                              <1> 		;---------------------------------------
    75                              <1> 												; ------|--------
    76                              <1> 												; EBP+20| 文字
    77                              <1> 												; EBP+16| 色
    78                              <1> 												; EBP+12| Y（行）
    79                              <1> 												; EBP+ 8| X（列）
    80                              <1> 												; ------+----------------
    81 00000113 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    82 00000114 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    83                              <1> 												; ------+----------------
    84                              <1> 
    85                              <1> 		;---------------------------------------
    86                              <1> 		; 【レジスタの保存】
    87                              <1> 		;---------------------------------------
    88 00000116 50                  <1> 		push	eax
    89 00000117 53                  <1> 		push	ebx
    90 00000118 51                  <1> 		push	ecx
    91 00000119 52                  <1> 		push	edx
    92 0000011A 56                  <1> 		push	esi
    93 0000011B 57                  <1> 		push	edi
    94                              <1> 
    95                              <1> 		;---------------------------------------
    96                              <1> 		; テストアンドセット
    97                              <1> 		;---------------------------------------
    98                              <1> %ifdef	USE_TEST_AND_SET
    99                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   100                              <1> %endif
   101                              <1> 
   102                              <1> 		;---------------------------------------
   103                              <1> 		; コピー元フォントアドレスを設定
   104                              <1> 		;---------------------------------------
   105 0000011C 0FB67514            <1> 		movzx	esi, byte [ebp +20]				; CL  = 文字コード;
   106 00000120 C1E604              <1> 		shl		esi, 4							; CL *= 16; // 1文字16バイト
   107 00000123 0335[5C000000]      <1> 		add		esi, [FONT_ADR]					; ESI = フォントアドレス;
   108                              <1> 
   109                              <1> 		;---------------------------------------
   110                              <1> 		; コピー先アドレスを取得
   111                              <1> 		; Adr = 0xA0000 + (640 / 8 * 16) * y + x
   112                              <1> 		;---------------------------------------
   113 00000129 8B7D0C              <1> 		mov		edi, [ebp +12]					; Y（行）
   114 0000012C C1E708              <1> 		shl		edi, 8							; EDI = Y * 256;
   115 0000012F 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA0000]	; EDI = Y *   4 + Y;
   116 00000136 037D08              <1> 		add		edi, [ebp + 8]					; X（列）
   117                              <1> 
   118                              <1> 		;---------------------------------------
   119                              <1> 		; 1文字分のフォントを出力
   120                              <1> 		;---------------------------------------
   121 00000139 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
   122                              <1> 
   123 0000013D 6A03E81CFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
   123 00000146 C404                <1>
   124 00000148 6A08E82AFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
   124 00000151 C404                <1>
   125 00000153 536A085756E835FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
   125 0000015C FF6683C410          <1>
   126                              <1> 
   127 00000161 6A02E8F8FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
   127 0000016A C404                <1>
   128 0000016C 6A04E806FFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
   128 00000175 C404                <1>
   129 00000177 536A045756E811FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
   129 00000180 FF6683C410          <1>
   130                              <1> 
   131 00000185 6A01E8D4FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
   131 0000018E C404                <1>
   132 00000190 6A02E8E2FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
   132 00000199 C404                <1>
   133 0000019B 536A025756E8EDFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
   133 000001A4 FF6683C410          <1>
   134                              <1> 
   135 000001A9 6A00E8B0FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
   135 000001B2 C404                <1>
   136 000001B4 6A01E8BEFEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
   136 000001BD C404                <1>
   137 000001BF 536A015756E8C9FEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
   137 000001C8 FF6683C410          <1>
   138                              <1> 
   139                              <1> %ifdef	USE_TEST_AND_SET
   140                              <1> 		;---------------------------------------
   141                              <1> 		; テストアンドセット
   142                              <1> 		;---------------------------------------
   143                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   144                              <1> %endif
   145                              <1> 
   146                              <1> 		;---------------------------------------
   147                              <1> 		; 【レジスタの復帰】
   148                              <1> 		;---------------------------------------
   149 000001CD 5F                  <1> 		pop		edi
   150 000001CE 5E                  <1> 		pop		esi
   151 000001CF 5A                  <1> 		pop		edx
   152 000001D0 59                  <1> 		pop		ecx
   153 000001D1 5B                  <1> 		pop		ebx
   154 000001D2 58                  <1> 		pop		eax
   155                              <1> 
   156                              <1> 		;---------------------------------------
   157                              <1> 		; 【スタックフレームの破棄】
   158                              <1> 		;---------------------------------------
   159 000001D3 89EC                <1> 		mov		esp, ebp
   160 000001D5 5D                  <1> 		pop		ebp
   161                              <1> 
   162 000001D6 C3                  <1> 		ret
   163                              <1> 
   164                              <1> %ifdef USE_TEST_AND_SET
   165                              <1> ALIGN 4, db 0
   166                              <1> IN_USE:	dd	0
   167                              <1> %endif
   168                              <1> 
    56                                  %include	"../modules/protect/draw_font.s"
    57                              <1> ;************************************************************************
    58                              <1> ;	フォント一覧を表示
    59                              <1> ;========================================================================
    60                              <1> ;■書式		: void draw_font(col, row);
    61                              <1> ;
    62                              <1> ;■引数
    63                              <1> ;	col		: 列
    64                              <1> ;	row		: 行
    65                              <1> ;
    66                              <1> ;■戻り値	: 無し
    67                              <1> ;************************************************************************
    68                              <1> draw_font:
    69                              <1> 		;---------------------------------------
    70                              <1> 		; 【スタックフレームの構築】
    71                              <1> 		;---------------------------------------
    72                              <1> 												; ------|--------
    73                              <1> 												; EBP+12| Y（行）
    74                              <1> 												; EBP+ 8| X（列）
    75                              <1> 												; ---------------
    76 000001D7 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    77 000001D8 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    78                              <1> 												; ---------------
    79                              <1> 
    80                              <1> 		;---------------------------------------
    81                              <1> 		; 【レジスタの保存】
    82                              <1> 		;---------------------------------------
    83 000001DA 50                  <1> 		push	eax
    84 000001DB 53                  <1> 		push	ebx
    85 000001DC 51                  <1> 		push	ecx
    86 000001DD 52                  <1> 		push	edx
    87 000001DE 56                  <1> 		push	esi
    88 000001DF 57                  <1> 		push	edi
    89                              <1> 
    90                              <1> 		;---------------------------------------
    91                              <1> 		; 表示位置
    92                              <1> 		;---------------------------------------
    93 000001E0 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
    94 000001E3 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
    95                              <1> 
    96                              <1> 		;---------------------------------------
    97                              <1> 		; フォント一覧を表示
    98                              <1> 		;---------------------------------------
    99 000001E6 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   100 000001EB 81F900010000        <1> .10L:	cmp		ecx, 256						;      ECX < 256;
   101 000001F1 731F                <1> 		jae		.10E							; 
   102                              <1> 												;      ECX++)
   103                              <1> 												; {
   104                              <1> 												;   // 桁位置の計算
   105 000001F3 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   106 000001F5 83E00F              <1> 		and		eax, 0x0F						;   EAX &= 0x0F
   107 000001F8 01F0                <1> 		add		eax, esi						;   EAX += X;
   108                              <1> 												;   
   109                              <1> 												;   // 行位置の計算
   110 000001FA 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   111 000001FC C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
   112 000001FF 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   113                              <1> 
   114 00000201 516A075350E808FFFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
   114 0000020A FF6683C410          <1>
   115                              <1> 
   116 0000020F 41                  <1> 		inc		ecx								;   // for (... ECX++)
   117 00000210 EBD9                <1> 		jmp		.10L							; 
   118                              <1> .10E:											; }
   119                              <1> 
   120                              <1> 		;---------------------------------------
   121                              <1> 		; 【レジスタの復帰】
   122                              <1> 		;---------------------------------------
   123 00000212 5F                  <1> 		pop		edi
   124 00000213 5E                  <1> 		pop		esi
   125 00000214 5A                  <1> 		pop		edx
   126 00000215 59                  <1> 		pop		ecx
   127 00000216 5B                  <1> 		pop		ebx
   128 00000217 58                  <1> 		pop		eax
   129                              <1> 
   130                              <1> 		;---------------------------------------
   131                              <1> 		; 【スタックフレームの破棄】
   132                              <1> 		;---------------------------------------
   133 00000218 89EC                <1> 		mov		esp, ebp
   134 0000021A 5D                  <1> 		pop		ebp
   135                              <1> 
   136 0000021B C3                  <1> 		ret
   137                              <1> 
    57                                  %include	"../modules/protect/draw_str.s"
    58                              <1> ;************************************************************************
    59                              <1> ;	文字列の表示
    60                              <1> ;========================================================================
    61                              <1> ;■書式		: void draw_str(col, row, color, p);
    62                              <1> ;
    63                              <1> ;■引数
    64                              <1> ;	col		: 列
    65                              <1> ;	row		: 行
    66                              <1> ;	color	: 描画色
    67                              <1> ;	p		: 文字列のアドレス
    68                              <1> ;
    69                              <1> ;■戻り値	: 無し
    70                              <1> ;************************************************************************
    71                              <1> draw_str:
    72                              <1> 		;---------------------------------------
    73                              <1> 		; 【スタックフレームの構築】
    74                              <1> 		;---------------------------------------
    75                              <1> 												; ------|--------
    76                              <1> 												; EBP+20| *p（文字列のアドレス）
    77                              <1> 												; EBP+16| color（色）
    78                              <1> 												; EBP+12| row（行）
    79                              <1> 												; EBP+ 8| col（列）
    80                              <1> 												; ---------------
    81 0000021C 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    82 0000021D 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    83                              <1> 												; ---------------
    84                              <1> 
    85                              <1> 		;---------------------------------------
    86                              <1> 		; 【レジスタの保存】
    87                              <1> 		;---------------------------------------
    88 0000021F 50                  <1> 		push	eax
    89 00000220 53                  <1> 		push	ebx
    90 00000221 51                  <1> 		push	ecx
    91 00000222 52                  <1> 		push	edx
    92 00000223 56                  <1> 		push	esi
    93                              <1> 
    94                              <1> 		;---------------------------------------
    95                              <1> 		; 文字列の表示
    96                              <1> 		;---------------------------------------
    97 00000224 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
    98 00000227 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
    99 0000022A 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
   100 0000022E 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
   101                              <1> 
   102 00000231 FC                  <1> 		cld										; DF = 0; // アドレス加算
   103                              <1> .10L:											; do
   104                              <1> 												; {
   105 00000232 AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
   106 00000233 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   107 00000235 7425                <1> 		je		.10E							;     break;
   108                              <1> 
   109                              <1> 		;---------------------------------------
   110                              <1> 		; 1文字表示
   111                              <1> 		;---------------------------------------
   112                              <1> %ifdef	USE_SYSTEM_CALL
   113                              <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
   114                              <1> %else
   115 00000237 50535251E8D3FEFFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
   115 00000240 6683C410            <1>
   116                              <1> %endif
   117                              <1> 
   118                              <1> 		; 次の文字の位置を調整
   119 00000244 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
   120 00000245 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
   121 00000248 7C10                <1> 		jl		.12E							;   {
   122 0000024A B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
   123 0000024F 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
   124 00000250 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
   125 00000253 7C05                <1> 		jl		.12E							;     {
   126 00000255 BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
   127                              <1> 												;     }
   128                              <1> .12E:											;   }
   129 0000025A EBD6                <1> 		jmp		.10L							;   
   130                              <1> .10E:											; } while (1);
   131                              <1> 
   132                              <1> 		;---------------------------------------
   133                              <1> 		; 【レジスタの復帰】
   134                              <1> 		;---------------------------------------
   135 0000025C 5E                  <1> 		pop		esi
   136 0000025D 5A                  <1> 		pop		edx
   137 0000025E 59                  <1> 		pop		ecx
   138 0000025F 5B                  <1> 		pop		ebx
   139 00000260 58                  <1> 		pop		eax
   140                              <1> 
   141                              <1> 		;---------------------------------------
   142                              <1> 		; 【スタックフレームの破棄】
   143                              <1> 		;---------------------------------------
   144 00000261 89EC                <1> 		mov		esp, ebp
   145 00000263 5D                  <1> 		pop		ebp
   146                              <1> 
   147 00000264 C3                  <1> 		ret
   148                              <1> 
    58                                  %include	"../modules/protect/draw_color_bar.s"
    59                              <1> ;************************************************************************
    60                              <1> ;	カラーバーの表示
    61                              <1> ;========================================================================
    62                              <1> ;■書式		: void draw_color_bar(col, row);
    63                              <1> ;
    64                              <1> ;■引数
    65                              <1> ;	col		: 列
    66                              <1> ;	row		: 行
    67                              <1> ;
    68                              <1> ;■戻り値	: 無し
    69                              <1> ;************************************************************************
    70                              <1> draw_color_bar:
    71                              <1> 		;---------------------------------------
    72                              <1> 		; 【スタックフレームの構築】
    73                              <1> 		;---------------------------------------
    74                              <1> 												; ------|--------
    75                              <1> 												; EBP+ 8| X（列）
    76                              <1> 												; EBP+12| Y（行）
    77                              <1> 												; ---------------
    78 00000265 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    79 00000266 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    80                              <1> 												; ---------------
    81                              <1> 		;---------------------------------------
    82                              <1> 		; 【レジスタの保存】
    83                              <1> 		;---------------------------------------
    84 00000268 50                  <1> 		push	eax
    85 00000269 53                  <1> 		push	ebx
    86 0000026A 51                  <1> 		push	ecx
    87 0000026B 52                  <1> 		push	edx
    88 0000026C 56                  <1> 		push	esi
    89 0000026D 57                  <1> 		push	edi
    90                              <1> 
    91                              <1> 		;---------------------------------------
    92                              <1> 		; 表示位置
    93                              <1> 		;---------------------------------------
    94 0000026E 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
    95 00000271 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
    96                              <1> 
    97                              <1> 		;---------------------------------------
    98                              <1> 		; カラーバーを表示
    99                              <1> 		;---------------------------------------
   100 00000274 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   101 00000279 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
   102 0000027C 732E                <1> 		jae		.10E							; 
   103                              <1> 												;      ECX++)
   104                              <1> 												; {
   105                              <1> 												;   // 桁位置の計算
   106 0000027E 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   107 00000280 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
   108 00000283 C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
   109 00000286 01F0                <1> 		add		eax, esi						;   EAX += X;
   110                              <1> 												;   
   111                              <1> 												;   // 行位置の計算
   112 00000288 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   113 0000028A D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
   114 0000028C 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   115                              <1> 												;   
   116                              <1> 												;   // 表示色の取得
   117 0000028E 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
   118 00000290 D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
   119 00000292 8B92[BF020000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
   120                              <1> 
   121 00000298 68[B6020000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
   121 000002A0 E877FFFFFF6683C410  <1>
   122                              <1> 
   123 000002A9 41                  <1> 		inc		ecx								;   // for (... ECX++)
   124 000002AA EBCD                <1> 		jmp		.10L							; 
   125                              <1> .10E:											; }
   126                              <1> 
   127                              <1> 		;---------------------------------------
   128                              <1> 		; 【レジスタの復帰】
   129                              <1> 		;---------------------------------------
   130 000002AC 5F                  <1> 		pop		edi
   131 000002AD 5E                  <1> 		pop		esi
   132 000002AE 5A                  <1> 		pop		edx
   133 000002AF 59                  <1> 		pop		ecx
   134 000002B0 5B                  <1> 		pop		ebx
   135 000002B1 58                  <1> 		pop		eax
   136                              <1> 
   137                              <1> 		;---------------------------------------
   138                              <1> 		; 【スタックフレームの破棄】
   139                              <1> 		;---------------------------------------
   140 000002B2 89EC                <1> 		mov		esp, ebp
   141 000002B4 5D                  <1> 		pop		ebp
   142                              <1> 
   143 000002B5 C3                  <1> 		ret
   144                              <1> 
   145 000002B6 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
   146                              <1> 
   147 000002BF 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
   148 000002C3 00010009            <1> 		dw	0x0100, 0x0900
   149 000002C7 0002000A            <1> 		dw	0x0200, 0x0A00
   150 000002CB 0003000B            <1> 		dw	0x0300, 0x0B00
   151 000002CF 0004000C            <1> 		dw	0x0400, 0x0C00
   152 000002D3 0005000D            <1> 		dw	0x0500, 0x0D00
   153 000002D7 0006000E            <1> 		dw	0x0600, 0x0E00
   154 000002DB 0007000F            <1> 		dw	0x0700, 0x0F00
   155                              <1> 
    59                                  
    60                                  ;************************************************************************
    61                                  ;	パディング
    62                                  ;************************************************************************
    63 000002DF 00<rep 1D21h>           		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
    64                                  
