     1                                  ;************************************************************************
     2                                  ;	BIOSでロードされる最初のセクタ
     3                                  ;	
     4                                  ;	プログラム全体を通して、セグメントの値は0x0000とする。
     5                                  ;	(DS==ES==0)
     6                                  ;	
     7                                  ;************************************************************************
     8                                  
     9                                  ;************************************************************************
    10                                  ;	マクロ
    11                                  ;************************************************************************
    12                                  %include	"../include/define.s"
    13                              <1> ;************************************************************************
    14                              <1> ;	メモリイメージ
    15                              <1> ;************************************************************************
    16                              <1> 
    17                              <1> 		;---------------------------------------
    18                              <1> 		;           |            | 
    19                              <1> 		;           |____________| 
    20                              <1> 		; 0000_7A00 |            | ( 512) スタック
    21                              <1> 		;           |____________| 
    22                              <1> 		; 0000_7C00 |            | (  8K) ブート
    23                              <1> 		;           =            = 
    24                              <1> 		;           |____________| 
    25                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    26                              <1> 		;           =            = 
    27                              <1> 		;           |____________| 
    28                              <1> 		; 0000_BC00 |////////////| 
    29                              <1> 		;           =            = 
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    32                              <1> 		;           |____________| 
    33                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    34                              <1> 		;           |____________| 
    35                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    36                              <1> 		;           |            | 
    37                              <1> 		;           =            = 
    38                              <1> 		;           |____________| 
    39                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    40                              <1> 		;           |            | （各タスク1K）
    41                              <1> 		;           =            = 
    42                              <1> 		;           |____________| 
    43                              <1> 		; 0010_5000 |            | Dir
    44                              <1> 		;      6000 |____________| Page
    45                              <1> 		; 0010_7000 |            | Dir
    46                              <1> 		;      8000 |____________| Page
    47                              <1> 		; 0010_9000 |////////////| 
    48                              <1> 		;           |            | 
    49                              <1> 
    50                              <1> 
    51                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    52                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    53                              <1> 
    54                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    55                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    56                              <1> 
    57                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    58                              <1> 
    59                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    60                              <1> 
    61                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    62                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    63                              <1> 
    64                              <1> 		E820_RECORD_SIZE	equ		20
    65                              <1> 
    66                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    13                                  %include	"../include/macro.s"
    14                              <1> ;************************************************************************
    15                              <1> ; 関数呼び出し用マクロ
    16                              <1> ;
    17                              <1> ; 使い方：
    18                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    19                              <1> ;
    20                              <1> ;************************************************************************
    21                              <1> 
    22                              <1> %macro cdecl 1-*.nolist
    23                              <1> 
    24                              <1>     %rep %0 - 1
    25                              <1>         push    %{-1:-1}
    26                              <1>         %rotate -1
    27                              <1>     %endrep
    28                              <1>     %rotate -1
    29                              <1> 
    30                              <1>         call    %1
    31                              <1> 
    32                              <1>     %if 1 < %0
    33                              <1>         add     sp,(__BITS__ >> 3) * (%0 - 1)
    34                              <1>     %endif
    35                              <1> 
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> ;************************************************************************
    39                              <1> ;	構造体
    40                              <1> ;************************************************************************
    41                              <1> 
    42                              <1> ;-----------------------------------------------
    43                              <1> ;	ドライブパラメータ
    44                              <1> ;-----------------------------------------------
    45                              <1> struc drive
    46 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
    47 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
    48 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
    49 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
    50                              <1> endstruc
    14                                  
    15                                  		ORG		BOOT_LOAD						; ロードアドレスをアセンブラに指示
    16                                  
    17                                  ;************************************************************************
    18                                  ;	エントリポイント
    19                                  ;************************************************************************
    20                                  entry:
    21                                  		;---------------------------------------
    22                                  		; BPB(BIOS Parameter Block)
    23                                  		;---------------------------------------
    24 00000000 EB58                    		jmp		ipl								; IPLへジャンプ
    25 00000002 90<rep 58h>             		times	90 - ($ - $$) db 0x90			; 
    26                                  
    27                                  		;---------------------------------------
    28                                  		; IPL(Initial Program Loader)
    29                                  		;---------------------------------------
    30                                  ipl:
    31 0000005A FA                      		cli										; // 割り込み禁止
    32                                  
    33 0000005B B80000                  		mov		ax, 0x0000						; AX = 0x0000;
    34 0000005E 8ED8                    		mov		ds, ax							; DS = 0x0000;
    35 00000060 8EC0                    		mov		es, ax							; ES = 0x0000;
    36 00000062 8ED0                    		mov		ss, ax							; SS = 0x0000;
    37 00000064 BC007C                  		mov		sp, BOOT_LOAD					; SP = 0x7C00;
    38                                  
    39 00000067 FB                      		sti										; // 割り込み許可
    40                                  
    41 00000068 8816[B800]              		mov		[BOOT + drive.no], dl			; ブートドライブを保存
    42                                  
    43                                  		;---------------------------------------
    44                                  		; 文字列を表示
    45                                  		;---------------------------------------
    46 0000006C 68[9900]E84E0083C4-     		cdecl	puts, .s0						; puts(.s0);
    46 00000074 02                 
    47                                  
    48                                  		;---------------------------------------
    49                                  		; 残りのセクタを全て読み込む
    50                                  		;---------------------------------------
    51 00000075 BB0F00                  		mov		bx, BOOT_SECT - 1				; BX = 残りのブートセクタ数;
    52 00000078 B9007E                  		mov		cx, BOOT_LOAD + SECT_SIZE		; CX = 次のロードアドレス;
    53                                  
    54 0000007B 515368[B800]E89B00-     		cdecl	read_chs, BOOT, bx, cx			; AX = read_chs(.chs, bx, cx);
    54 00000083 83C406             
    55                                  
    56 00000086 39D8                    		cmp		ax, bx							; if (AX != 残りのセクタ数)
    57 00000088 740C                    .10Q:	jz		.10E							; {
    58 0000008A 68[A600]E8300083C4-     .10T:	cdecl	puts, .e0						;   puts(.e0);
    58 00000092 02                 
    59 00000093 E84900                  		call	reboot							;   reboot(); // 再起動
    60                                  .10E:											; }
    61                                  
    62                                  		;---------------------------------------
    63                                  		; 次のステージへ移行
    64                                  		;---------------------------------------
    65 00000096 E9D505                  		jmp		stage_2							; ブート処理の第2ステージ
    66                                  
    67                                  		;---------------------------------------
    68                                  		; データ
    69                                  		;---------------------------------------
    70 00000099 426F6F74696E672E2E-     .s0		db	"Booting...", 0x0A, 0x0D, 0
    70 000000A2 2E0A0D00           
    71 000000A6 4572726F723A736563-     .e0		db	"Error:sector read", 0
    71 000000AF 746F72207265616400 
    72                                  
    73                                  ;************************************************************************
    74                                  ;	ブートドライブに関する情報
    75                                  ;************************************************************************
    76                                  ALIGN 2, db 0
    77                                  BOOT:											; ブートドライブに関する情報
    78                                  	istruc	drive
    79 000000B8 0000                    		at	drive.no,		dw	0				; ドライブ番号
    80 000000BA 0000                    		at	drive.cyln,		dw	0				; C:シリンダ
    81 000000BC 0000                    		at	drive.head,		dw	0				; H:ヘッド
    82 000000BE 0200                    		at	drive.sect,		dw	2				; S:セクタ
    83                                  	iend
    84                                  
    85                                  ;************************************************************************
    86                                  ;	モジュール
    87                                  ;************************************************************************
    88                                  %include	"../modules/real/puts.s"
    89                              <1> ;************************************************************************
    90                              <1> ;	文字列表示
    91                              <1> ;------------------------------------------------------------------------
    92                              <1> ;	BIOS を使用
    93                              <1> ;========================================================================
    94                              <1> ;■書式		: void puts(str);
    95                              <1> ;
    96                              <1> ;■引数
    97                              <1> ;	str		: 文字列のアドレス
    98                              <1> ;
    99                              <1> ;■戻り値	: 無し
   100                              <1> ;************************************************************************
   101                              <1> puts:
   102                              <1> 		;---------------------------------------
   103                              <1> 		; 【スタックフレームの構築】
   104                              <1> 		;---------------------------------------
   105                              <1> 												; ------|--------
   106                              <1> 												;    + 4| 文字列のアドレス
   107                              <1> 												;    + 2| IP（戻り番地）
   108 000000C0 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   109 000000C1 89E5                <1> 		mov		bp, sp							; ------+--------
   110                              <1> 
   111                              <1> 		;---------------------------------------
   112                              <1> 		; 【レジスタの保存】
   113                              <1> 		;---------------------------------------
   114 000000C3 50                  <1> 		push	ax
   115 000000C4 53                  <1> 		push	bx
   116 000000C5 56                  <1> 		push	si
   117                              <1> 
   118                              <1> 		;---------------------------------------
   119                              <1> 		; 引数を取得
   120                              <1> 		;---------------------------------------
   121 000000C6 8B7604              <1> 		mov		si, [bp + 4]					; SI = 文字列のアドレス;
   122                              <1> 
   123                              <1> 		;---------------------------------------
   124                              <1> 		; 【処理の開始】
   125                              <1> 		;---------------------------------------
   126 000000C9 B40E                <1> 		mov		ah, 0x0E						; // テレタイプ式1文字出力
   127 000000CB BB0000              <1> 		mov		bx, 0x0000						; // ページ番号と文字色を0に設定
   128 000000CE FC                  <1> 		cld										; DF = 0; // アドレス加算
   129                              <1> .10L:											; do
   130                              <1> 												; {
   131 000000CF AC                  <1> 		lodsb									;   AL = *SI++;
   132                              <1> 												;   
   133 000000D0 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   134 000000D2 7404                <1> 		je		.10E							;     break;
   135                              <1> 												;   
   136 000000D4 CD10                <1> 		int		0x10							;   Int10(0x0E, AL); // 文字出力
   137 000000D6 EBF7                <1> 		jmp		.10L							;   
   138                              <1> .10E:											; } while (1);
   139                              <1> 
   140                              <1> 		;---------------------------------------
   141                              <1> 		; 【レジスタの復帰】
   142                              <1> 		;---------------------------------------
   143 000000D8 5E                  <1> 		pop		si
   144 000000D9 5B                  <1> 		pop		bx
   145 000000DA 58                  <1> 		pop		ax
   146                              <1> 
   147                              <1> 		;---------------------------------------
   148                              <1> 		; 【スタックフレームの破棄】
   149                              <1> 		;---------------------------------------
   150 000000DB 89EC                <1> 		mov		sp, bp
   151 000000DD 5D                  <1> 		pop		bp
   152                              <1> 
   153 000000DE C3                  <1> 		ret
   154                              <1> 
    89                                  %include	"../modules/real/reboot.s"
    90                              <1> ;************************************************************************
    91                              <1> ;	メッセージを表示して再起動を行う
    92                              <1> ;========================================================================
    93                              <1> ;■書式		: void reboot(void);
    94                              <1> ;
    95                              <1> ;■引数		: 無し
    96                              <1> ;
    97                              <1> ;■戻り値;	: 無し
    98                              <1> ;************************************************************************
    99                              <1> reboot:
   100                              <1> 		;---------------------------------------
   101                              <1> 		; メッセージを表示
   102                              <1> 		;---------------------------------------
   103 000000DF 68[FB00]E8DBFF83C4- <1> 		cdecl	puts, .s0						; // 再起動メッセージを表示
   103 000000E7 02                  <1>
   104                              <1> 
   105                              <1> 		;---------------------------------------
   106                              <1> 		; キー入力待ち
   107                              <1> 		;---------------------------------------
   108                              <1> .10L:											; do
   109                              <1> 												; {
   110 000000E8 B410                <1> 		mov		ah, 0x10						;   // キー入力待ち
   111 000000EA CD16                <1> 		int		0x16							;   AL = BIOS(0x16, 0x10);
   112                              <1> 												;   
   113 000000EC 3C20                <1> 		cmp		al, ' '							;   ZF = AL == ' ';
   114 000000EE 75F8                <1> 		jne		.10L							; } while (!ZF);
   115                              <1> 
   116                              <1> 		;---------------------------------------
   117                              <1> 		; 改行を出力
   118                              <1> 		;---------------------------------------
   119 000000F0 68[1901]E8CAFF83C4- <1> 		cdecl	puts, .s1						; 改行
   119 000000F8 02                  <1>
   120                              <1> 
   121                              <1> 		;---------------------------------------
   122                              <1> 		; 再起動
   123                              <1> 		;---------------------------------------
   124 000000F9 CD19                <1> 		int		0x19							; BIOS(0x19);       // reboot();
   125                              <1> 
   126                              <1> 		;---------------------------------------
   127                              <1> 		; 文字列データ
   128                              <1> 		;---------------------------------------
   129 000000FB 0A0D50757368205350- <1> .s0		db	0x0A, 0x0D, "Push SPACE key to reboot...", 0
   129 00000104 414345206B65792074- <1>
   129 0000010D 6F207265626F6F742E- <1>
   129 00000116 2E2E00              <1>
   130 00000119 0A0D0A0D00          <1> .s1		db	0x0A, 0x0D, 0x0A, 0x0D, 0
   131                              <1> 
    90                                  %include	"../modules/real/read_chs.s"
    91                              <1> ;************************************************************************
    92                              <1> ;	セクタ読み込み（CHS指定）
    93                              <1> ;------------------------------------------------------------------------
    94                              <1> ;	BIOSコール（INT13 AH=0x02）を使ったセクタ読み出し
    95                              <1> ;========================================================================
    96                              <1> ;■書式		: WORD read_chs(drive, sect, dst);
    97                              <1> ;
    98                              <1> ;■引数
    99                              <1> ;	drive	: drive構造体のアドレス
   100                              <1> ;	sect	: 読み出しセクタ数
   101                              <1> ;	dst		: 読み出し先アドレス
   102                              <1> ;
   103                              <1> ;■戻り値	: 読み込んだセクタ数
   104                              <1> ;************************************************************************
   105                              <1> read_chs:
   106                              <1> 		;---------------------------------------
   107                              <1> 		; 【スタックフレームの構築】
   108                              <1> 		;---------------------------------------
   109                              <1> 												; ------|--------
   110                              <1> 												;    + 8| コピー先
   111                              <1> 												;    + 6| セクタ数
   112                              <1> 												;    + 4| パラメータバッファ
   113                              <1> 												; ------+----------------
   114                              <1> 												;    + 2| IP（戻り番地）
   115 0000011E 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   116 0000011F 89E5                <1> 		mov		bp, sp							; ------+--------
   117 00000121 6A03                <1> 		push	3								;    - 2| retry = 3; // リトライ回数
   118 00000123 6A00                <1> 		push	0								;    - 4| sect  = 0; // 読み込みセクタ数
   119                              <1> 
   120                              <1> 		;---------------------------------------
   121                              <1> 		; 【レジスタの保存】
   122                              <1> 		;---------------------------------------
   123 00000125 53                  <1> 		push	bx
   124 00000126 51                  <1> 		push	cx
   125 00000127 52                  <1> 		push	dx
   126 00000128 06                  <1> 		push	es
   127 00000129 56                  <1> 		push	si
   128                              <1> 
   129                              <1> 		;---------------------------------------
   130                              <1> 		; 【処理の開始】
   131                              <1> 		;---------------------------------------
   132 0000012A 8B7604              <1> 		mov		si, [bp + 4]					; SI = SRCバッファ;
   133                              <1> 
   134                              <1> 		;---------------------------------------
   135                              <1> 		; CXレジスタの設定
   136                              <1> 		;（BIOSコールの呼び出しに適した形に変換）
   137                              <1> 		;---------------------------------------
   138 0000012D 8A6C02              <1> 		mov		ch, [si + drive.cyln + 0]		; CH   = シリンダ番号（下位バイト）
   139 00000130 8A4C03              <1> 		mov		cl, [si + drive.cyln + 1]		; CL   = シリンダ番号（上位バイト）
   140 00000133 C0E106              <1> 		shl		cl, 6							; CL <<= 6; // 最上位2ビットにシフト
   141 00000136 0A4C06              <1> 		or		cl, [si + drive.sect]			; CL  |= セクタ番号;
   142                              <1> 
   143                              <1> 		;---------------------------------------
   144                              <1> 		; セクタ読み込み
   145                              <1> 		;---------------------------------------
   146 00000139 8A7404              <1> 		mov		dh, [si + drive.head]			; DH = ヘッド番号;
   147 0000013C 8A14                <1> 		mov		dl, [si + 0]					; DL = ドライブ番号;
   148 0000013E B80000              <1> 		mov		ax, 0x0000						; AX = 0x0000;
   149 00000141 8EC0                <1> 		mov		es, ax							; ES = セグメント
   150 00000143 8B5E08              <1> 		mov		bx, [bp + 8]					; BX = コピー先;
   151                              <1> .10L:											; do
   152                              <1> 												; {
   153 00000146 B402                <1> 		mov		ah, 0x02						;   AH = セクタ読み込み
   154 00000148 8A4606              <1> 		mov		al, [bp + 6]					;   AL = セクタ数
   155                              <1> 												;   
   156 0000014B CD13                <1> 		int		0x13							;   CF = BIOS(0x13, 0x02);
   157 0000014D 7304                <1> 		jnc		.11E							;   if (CF)
   158                              <1> 												;   {
   159 0000014F B000                <1> 		mov		al, 0							;     AL = 0;
   160 00000151 EB0C                <1> 		jmp		.10E							;     break;
   161                              <1> .11E:											;   }
   162                              <1> 												;   
   163 00000153 3C00                <1> 		cmp		al, 0							;   if (読み込んだセクタがあれば)
   164 00000155 7508                <1> 		jne		.10E							;     break;
   165                              <1> 												;   
   166 00000157 B80000              <1> 		mov		ax, 0							;   ret = 0; // 戻り値を設定
   167 0000015A FF4EFE              <1> 		dec		word [bp - 2]					; }
   168 0000015D 75E7                <1> 		jnz		.10L							; while (--retry);
   169                              <1> .10E:
   170 0000015F B400                <1> 		mov		ah, 0							; AH = 0; // ステータス情報は破棄
   171                              <1> 
   172                              <1> 		;---------------------------------------
   173                              <1> 		; 【レジスタの復帰】
   174                              <1> 		;---------------------------------------
   175 00000161 5E                  <1> 		pop		si
   176 00000162 07                  <1> 		pop		es
   177 00000163 5A                  <1> 		pop		dx
   178 00000164 59                  <1> 		pop		cx
   179 00000165 5B                  <1> 		pop		bx
   180                              <1> 
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 【スタックフレームの破棄】
   183                              <1> 		;---------------------------------------
   184 00000166 89EC                <1> 		mov		sp, bp
   185 00000168 5D                  <1> 		pop		bp
   186                              <1> 
   187 00000169 C3                  <1> 		ret
   188                              <1> 
    91                                  
    92                                  ;************************************************************************
    93                                  ;	ブートフラグ（先頭512バイトの終了）
    94                                  ;************************************************************************
    95 0000016A 00<rep 94h>             		times	510 - ($ - $$) db 0x00
    96 000001FE 55AA                    		db	0x55, 0xAA
    97                                  
    98                                  ;************************************************************************
    99                                  ;	リアルモード時に取得した情報
   100                                  ;************************************************************************
   101                                  FONT:											; フォント
   102 00000200 0000                    .seg:	dw	0
   103 00000202 0000                    .off:	dw	0
   104                                  ACPI_DATA:										; ACPI data
   105 00000204 00000000                .adr:	dd	0									; ACPI data address
   106 00000208 00000000                .len:	dd	0									; ACPI data length
   107                                  
   108                                  ;************************************************************************
   109                                  ;	モジュール（先頭512バイト以降に配置）
   110                                  ;************************************************************************
   111                                  %include	"../modules/real/itoa.s"
   112                              <1> ;************************************************************************
   113                              <1> ;	数値を文字に変換
   114                              <1> ;========================================================================
   115                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
   116                              <1> ;
   117                              <1> ;■引数
   118                              <1> ;	num		: 変換する数値
   119                              <1> ;	buff	: 保存先バッファアドレス
   120                              <1> ;	size	: 保存先バッファサイズ
   121                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
   122                              <1> ;	flags	: フラグ
   123                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
   124                              <1> ;			:      : 0=空白を' '（スペース）で埋める
   125                              <1> ;			:   B1 : 1=＋/-符号を表示する
   126                              <1> ;			:      : 0=＋/-符号を表示しない
   127                              <1> ;			:   B0 : 1=符号付き正数として扱う
   128                              <1> ;			:      : 0=符号無し正数として扱う
   129                              <1> ;
   130                              <1> ;■戻り値	: 無し
   131                              <1> ;************************************************************************
   132                              <1> itoa:
   133                              <1> 		;---------------------------------------
   134                              <1> 		; 【スタックフレームの構築】
   135                              <1> 		;---------------------------------------
   136                              <1> 												; ------|--------
   137                              <1> 												;    +12| フラグ
   138                              <1> 												;    +10| 基数
   139                              <1> 												;    + 8| バッファサイズ
   140                              <1> 												;    + 6| バッファアドレス
   141                              <1> 												;    + 4| 数値
   142                              <1> 												; ------|--------
   143                              <1> 												;    + 2| IP（戻り番地）
   144 0000020C 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   145 0000020D 89E5                <1> 		mov		bp, sp							; ------+--------
   146                              <1> 
   147                              <1> 		;---------------------------------------
   148                              <1> 		; 【レジスタの保存】
   149                              <1> 		;---------------------------------------
   150 0000020F 50                  <1> 		push	ax
   151 00000210 53                  <1> 		push	bx
   152 00000211 51                  <1> 		push	cx
   153 00000212 52                  <1> 		push	dx
   154 00000213 56                  <1> 		push	si
   155 00000214 57                  <1> 		push	di
   156                              <1> 
   157                              <1> 		;---------------------------------------
   158                              <1> 		; 引数を取得
   159                              <1> 		;---------------------------------------
   160 00000215 8B4604              <1> 		mov		ax, [bp + 4]					; val  = 数値;
   161 00000218 8B7606              <1> 		mov		si, [bp + 6]					; dst  = バッファアドレス;
   162 0000021B 8B4E08              <1> 		mov		cx, [bp + 8]					; size = 残りバッファサイズ;
   163                              <1> 
   164 0000021E 89F7                <1> 		mov		di, si							; // バッファの最後尾
   165 00000220 01CF                <1> 		add		di, cx							; dst  = &dst[size - 1];
   166 00000222 4F                  <1> 		dec		di								; 
   167                              <1> 
   168 00000223 8B5E0C              <1> 		mov		bx, [bp +12]					; flags = オプション;
   169                              <1> 
   170                              <1> 		;---------------------------------------
   171                              <1> 		; 符号付き判定
   172                              <1> 		;---------------------------------------
   173 00000226 F7C30100            <1> 		test	bx, 0b0001						; if (flags & 0x01)// 符号付き
   174 0000022A 7408                <1> .10Q:	je		.10E							; {
   175 0000022C 83F800              <1> 		cmp		ax, 0							;   if (val < 0)
   176 0000022F 7D03                <1> .12Q:	jge		.12E							;   {
   177 00000231 83CB02              <1> 		or		bx, 0b0010						;     flags |=  2; // 符号表示
   178                              <1> .12E:											;   }
   179                              <1> .10E:											; }
   180                              <1> 
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 符号出力判定
   183                              <1> 		;---------------------------------------
   184 00000234 F7C30200            <1> 		test	bx, 0b0010						; if (flags & 0x02)// 符号出力判定
   185 00000238 7410                <1> .20Q:	je		.20E							; {
   186 0000023A 83F800              <1> 		cmp		ax, 0							;   if (val < 0)
   187 0000023D 7D07                <1> .22Q:	jge		.22F							;   {
   188 0000023F F7D8                <1> 		neg		ax								;     val *= -1;   // 符号反転
   189 00000241 C6042D              <1> 		mov		[si], byte '-'					;     *dst = '-';  // 符号表示
   190 00000244 EB03                <1> 		jmp		.22E							;   }
   191                              <1> .22F:											;   else
   192                              <1> 												;   {
   193 00000246 C6042B              <1> 		mov		[si], byte '+'					;     *dst = '+';  // 符号表示
   194                              <1> .22E:											;   }
   195 00000249 49                  <1> 		dec		cx								;   size--;        // 残りバッファサイズの減算
   196                              <1> .20E:											; }
   197                              <1> 
   198                              <1> 		;---------------------------------------
   199                              <1> 		; ASCII変換
   200                              <1> 		;---------------------------------------
   201 0000024A 8B5E0A              <1> 		mov		bx, [bp +10]					; BX = 基数;
   202                              <1> .30L:											; do
   203                              <1> 												; {
   204 0000024D BA0000              <1> 		mov		dx, 0							;   
   205 00000250 F7F3                <1> 		div		bx								;   DX = DX:AX % 基数;
   206                              <1> 												;   AX = DX:AX / 基数;
   207                              <1> 												;   
   208 00000252 89D6                <1> 		mov		si, dx							;   // テーブル参照
   209 00000254 8A94[7C02]          <1> 		mov		dl, byte [.ascii + si]			;   DL = ASCII[DX];
   210                              <1> 												;   
   211 00000258 8815                <1> 		mov		[di], dl						;   *dst = DL;
   212 0000025A 4F                  <1> 		dec		di								;   dst--;
   213                              <1> 												;   
   214 0000025B 83F800              <1> 		cmp		ax, 0							;   
   215 0000025E E0ED                <1> 		loopnz	.30L							; } while (AX);
   216                              <1> .30E:
   217                              <1> 
   218                              <1> 		;---------------------------------------
   219                              <1> 		; 空欄を埋める
   220                              <1> 		;---------------------------------------
   221 00000260 83F900              <1> 		cmp		cx, 0							; if (size)
   222 00000263 740D                <1> .40Q:	je		.40E							; {
   223 00000265 B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   224 00000267 837E0C04            <1> 		cmp		[bp +12], word 0b0100			;   if (flags & 0x04)
   225 0000026B 7502                <1> .42Q:	jne		.42E							;   {
   226 0000026D B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   227                              <1> .42E:											;   }
   228 0000026F FD                  <1> 		std										;   // DF = 1（-方向）
   229 00000270 F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   230                              <1> .40E:											; }
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; 【レジスタの復帰】
   234                              <1> 		;---------------------------------------
   235 00000272 5F                  <1> 		pop		di
   236 00000273 5E                  <1> 		pop		si
   237 00000274 5A                  <1> 		pop		dx
   238 00000275 59                  <1> 		pop		cx
   239 00000276 5B                  <1> 		pop		bx
   240 00000277 58                  <1> 		pop		ax
   241                              <1> 
   242                              <1> 		;---------------------------------------
   243                              <1> 		; 【スタックフレームの破棄】
   244                              <1> 		;---------------------------------------
   245 00000278 89EC                <1> 		mov		sp, bp
   246 0000027A 5D                  <1> 		pop		bp
   247                              <1> 
   248 0000027B C3                  <1> 		ret
   249                              <1> 
   250 0000027C 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   250 00000285 39414243444546      <1>
   251                              <1> 
   112                                  %include	"../modules/real/get_drive_param.s"
   113                              <1> ;************************************************************************
   114                              <1> ;	ドライブ情報の取得(LBA変換に必要な情報)
   115                              <1> ;------------------------------------------------------------------------
   116                              <1> ;	アクセス可能な最大セクタをdrive構造体に設定する
   117                              <1> ;	注）ドライブ番号（drive.no）を設定後に呼び出す事
   118                              <1> ;========================================================================
   119                              <1> ;■書式		: WORD get_drive_param(drive);
   120                              <1> ;
   121                              <1> ;■引数
   122                              <1> ;	drive	: drive構造体のアドレス
   123                              <1> ;
   124                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   125                              <1> ;************************************************************************
   126                              <1> get_drive_param:
   127                              <1> 		;---------------------------------------
   128                              <1> 		; 【スタックフレームの構築】
   129                              <1> 		;---------------------------------------
   130                              <1> 												; ------|--------
   131                              <1> 												;    + 4| パラメータバッファ
   132                              <1> 												;    + 2| IP（戻り番地）
   133 0000028C 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   134 0000028D 89E5                <1> 		mov		bp, sp							; ------+--------
   135                              <1> 
   136                              <1> 		;---------------------------------------
   137                              <1> 		; 【レジスタの保存】
   138                              <1> 		;---------------------------------------
   139 0000028F 53                  <1> 		push	bx
   140 00000290 51                  <1> 		push	cx
   141 00000291 06                  <1> 		push	es
   142 00000292 56                  <1> 		push	si
   143 00000293 57                  <1> 		push	di
   144                              <1> 
   145                              <1> 		;---------------------------------------
   146                              <1> 		; 【処理の開始】
   147                              <1> 		;---------------------------------------
   148 00000294 8B7604              <1> 		mov		si, [bp + 4]					; SI = バッファ
   149                              <1> 
   150 00000297 B80000              <1> 		mov		ax, 0							; Disk Base Table Pointerの初期化
   151 0000029A 8EC0                <1> 		mov		es, ax							; ES = 0;
   152 0000029C 89C7                <1> 		mov		di, ax							; DI = 0;
   153                              <1> 
   154 0000029E B408                <1> 		mov		ah, 0x08						; // get drive parameters 
   155 000002A0 8A14                <1> 		mov		dl, [si + drive.no]				; DL = ドライブ番号
   156 000002A2 CD13                <1> 		int		0x13							; CF = BIOS(0x13, 0x08);
   157 000002A4 721B                <1> .10Q:	jc		.10F							; if (0 == CF)
   158                              <1> .10T:											; {
   159 000002A6 88C8                <1> 		mov		al, cl							;   AX = セクタ数
   160 000002A8 83E03F              <1> 		and		ax, 0x3F						;   // 下位6ビットのみ有効
   161                              <1> 
   162 000002AB C0E906              <1> 		shr		cl, 6							;   CX = シリンダ数
   163 000002AE C1C908              <1> 		ror		cx, 8							;   
   164 000002B1 41                  <1> 		inc		cx								;   
   165                              <1> 
   166 000002B2 0FB6DE              <1> 		movzx	bx, dh							;   BX = ヘッド数（1ベース）
   167 000002B5 43                  <1> 		inc		bx								;   
   168                              <1> 
   169 000002B6 894C02              <1> 		mov		[si + drive.cyln], cx			;   drive.syln = CX; // C:シリンダ数
   170 000002B9 895C04              <1> 		mov		[si + drive.head], bx			;   drive.head = BX; // H:ヘッド数
   171 000002BC 894406              <1> 		mov		[si + drive.sect], ax			;   drive.sect = AX; // S:セクタ数
   172                              <1> 
   173 000002BF EB03                <1> 		jmp		.10E							; }
   174                              <1> .10F:											; else
   175                              <1> 												; {
   176 000002C1 B80000              <1> 		mov		ax, 0							;   AX = 0; // 失敗
   177                              <1> .10E:											; }
   178                              <1> 
   179                              <1> 		;---------------------------------------
   180                              <1> 		; 【レジスタの復帰】
   181                              <1> 		;---------------------------------------
   182 000002C4 5F                  <1> 		pop		di
   183 000002C5 5E                  <1> 		pop		si
   184 000002C6 07                  <1> 		pop		es
   185 000002C7 59                  <1> 		pop		cx
   186 000002C8 5B                  <1> 		pop		bx
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 【スタックフレームの破棄】
   190                              <1> 		;---------------------------------------
   191 000002C9 89EC                <1> 		mov		sp, bp
   192 000002CB 5D                  <1> 		pop		bp
   193                              <1> 
   194 000002CC C3                  <1> 		ret
   195                              <1> 
   113                                  %include	"../modules/real/get_font_adr.s"
   114                              <1> ;************************************************************************
   115                              <1> ;	BIOSフォントアドレスを取得
   116                              <1> ;------------------------------------------------------------------------
   117                              <1> ;	フォント8x16ドットのフォントアドレスを取得
   118                              <1> ;========================================================================
   119                              <1> ;■書式		: void get_font_adr(adr);
   120                              <1> ;
   121                              <1> ;■引数
   122                              <1> ;	adr		: フォントアドレス格納位置
   123                              <1> ;
   124                              <1> ;■戻り値;	: 無し
   125                              <1> ;************************************************************************
   126                              <1> get_font_adr:
   127                              <1> 		;---------------------------------------
   128                              <1> 		; 【スタックフレームの構築】
   129                              <1> 		;---------------------------------------
   130                              <1> 												; ------|--------
   131                              <1> 												;    + 4| パラメータバッファ
   132                              <1> 												;    + 2| IP（戻り番地）
   133 000002CD 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   134 000002CE 89E5                <1> 		mov		bp, sp							; ------+--------
   135                              <1> 
   136                              <1> 		;---------------------------------------
   137                              <1> 		; 【レジスタの保存】
   138                              <1> 		;---------------------------------------
   139 000002D0 50                  <1> 		push	ax
   140 000002D1 53                  <1> 		push	bx
   141 000002D2 56                  <1> 		push	si
   142 000002D3 06                  <1> 		push	es
   143 000002D4 55                  <1> 		push	bp
   144                              <1> 
   145                              <1> 		;---------------------------------------
   146                              <1> 		; 引数を取得
   147                              <1> 		;---------------------------------------
   148 000002D5 8B7604              <1> 		mov		si, [bp + 4]					; dst  =FONTアドレスの保存先;
   149                              <1> 
   150                              <1> 		;---------------------------------------
   151                              <1> 		; フォントアドレスの取得
   152                              <1> 		;---------------------------------------
   153 000002D8 B83011              <1> 		mov		ax, 0x1130						; // フォントアドレスの取得
   154 000002DB B706                <1> 		mov		bh, 0x06						; 8x16 font (vga/mcga) 
   155 000002DD CD10                <1> 		int		10h								; ES:BP=FONT ADDRESS
   156                              <1> 
   157                              <1> 		;---------------------------------------
   158                              <1> 		; FONTアドレスを保存
   159                              <1> 		;---------------------------------------
   160 000002DF 8C04                <1> 		mov		[si + 0], es					; dst[0] = セグメント;
   161 000002E1 896C02              <1> 		mov		[si + 2], bp					; dst[1] = オフセット;
   162                              <1> 
   163                              <1> 		;---------------------------------------
   164                              <1> 		; 【レジスタの復帰】
   165                              <1> 		;---------------------------------------
   166 000002E4 5D                  <1> 		pop		bp
   167 000002E5 07                  <1> 		pop		es
   168 000002E6 5E                  <1> 		pop		si
   169 000002E7 5B                  <1> 		pop		bx
   170 000002E8 58                  <1> 		pop		ax
   171                              <1> 
   172                              <1> 		;---------------------------------------
   173                              <1> 		; 【スタックフレームの破棄】
   174                              <1> 		;---------------------------------------
   175 000002E9 89EC                <1> 		mov		sp, bp
   176 000002EB 5D                  <1> 		pop		bp
   177                              <1> 
   178 000002EC C3                  <1> 		ret
   179                              <1> 
   114                                  %include	"../modules/real/get_mem_info.s"
   115                              <1> ;************************************************************************
   116                              <1> ;	メモリ情報の表示
   117                              <1> ;------------------------------------------------------------------------
   118                              <1> ;	ACPIデータのアドレスと長さをグローバル変数に保存する
   119                              <1> ;========================================================================
   120                              <1> ;■書式		: void get_mem_info(void);
   121                              <1> ;
   122                              <1> ;■引数		: 無し
   123                              <1> ;
   124                              <1> ;■戻り値;	: 無し
   125                              <1> ;************************************************************************
   126                              <1> get_mem_info:
   127                              <1> 		;---------------------------------------
   128                              <1> 		; 【レジスタの保存】
   129                              <1> 		;---------------------------------------
   130 000002ED 6650                <1> 		push	eax
   131 000002EF 6653                <1> 		push	ebx
   132 000002F1 6651                <1> 		push	ecx
   133 000002F3 6652                <1> 		push	edx
   134 000002F5 56                  <1> 		push	si
   135 000002F6 57                  <1> 		push	di
   136 000002F7 55                  <1> 		push	bp
   137                              <1> 
   138                              <1> 		;---------------------------------------
   139                              <1> 		; 【処理の開始】
   140                              <1> 		;---------------------------------------
   141 000002F8 68[8C03]E8C2FD83C4- <1> 		cdecl	puts, .s0						; // ヘッダを表示
   141 00000300 02                  <1>
   142                              <1> 
   143 00000301 BD0000              <1> 		mov		bp, 0							; lines = 0; // 行数
   144 00000304 66BB00000000        <1> 		mov		ebx, 0							; index = 0; // インデックスを初期化
   145                              <1> .10L:											; do
   146                              <1> 												; {
   147 0000030A 66B820E80000        <1> 		mov		eax, 0x0000E820					;   EAX   = 0xE820
   148                              <1> 												;   EBX   = インデックス
   149 00000310 66B914000000        <1> 		mov		ecx, E820_RECORD_SIZE			;   ECX   = 要求バイト数
   150 00000316 66BA50414D53        <1> 		mov 	edx, 'PAMS'						;   EDX   = 'SMAP';
   151 0000031C BF[1804]            <1> 		mov		di, .b0							;   ES:DI = バッファ
   152 0000031F CD15                <1> 		int		0x15							;   BIOS(0x15, 0xE820);
   153                              <1> 
   154                              <1> 		; コマンドに対応か？
   155 00000321 663D50414D53        <1> 		cmp		eax, 'PAMS'						;   if ('SMAP' != EAX)
   156 00000327 7402                <1> 		je		.12E							;   {
   157 00000329 EB4C                <1> 		jmp		.10E							;     break; // コマンド未対応
   158                              <1> .12E:											;   }
   159                              <1> 
   160                              <1> 		; エラー無し？							;   if (CF)
   161 0000032B 7302                <1> 		jnc		.14E							;   {
   162 0000032D EB48                <1> 		jmp		.10E							;     break; // エラー発生
   163                              <1> .14E:											;   }
   164                              <1> 
   165                              <1> 		; 1レコード分のメモリ情報を表示
   166 0000032F 57E8F90083C402      <1> 		cdecl	put_mem_info, di				;   1レコード分のメモリ情報を表示
   167                              <1> 
   168                              <1> 		; ACPI dataのアドレスを取得
   169 00000336 668B4510            <1> 		mov		eax, [di + 16]					;   EAX = レコードタイプ;
   170 0000033A 6683F803            <1> 		cmp		eax, 3							;   if (3 == EAX) // ACPI data
   171 0000033E 750F                <1> 		jne		.15E							;   {
   172                              <1> 												;     
   173 00000340 668B05              <1> 		mov		eax, [di +  0]					;     EAX   = BASEアドレス;
   174 00000343 66A3[0402]          <1> 		mov		[ACPI_DATA.adr], eax			;     ACPI_DATA.adr = EAX;
   175                              <1> 												;     
   176 00000347 668B4508            <1> 		mov		eax, [di +  8]					;     EAX   = Length;
   177 0000034B 66A3[0802]          <1> 		mov		[ACPI_DATA.len], eax			;     ACPI_DATA.len = EAX;
   178                              <1> .15E:											;   }
   179                              <1> 
   180 0000034F 6683FB00            <1> 		cmp		ebx, 0							;   if (0 != EBX)
   181 00000353 741C                <1> 		jz		.16E							;   {
   182                              <1> 												;     
   183 00000355 45                  <1> 		inc		bp								;     lines++;
   184 00000356 83E507              <1> 		and		bp, 0x07						;     lines &= 0x07;
   185 00000359 7516                <1> 		jnz		.16E							;     if (0 == lines)
   186                              <1> 												;     {
   187 0000035B 68[FF03]E85FFD83C4- <1> 		cdecl	puts, .s2						;       // 中断メッセージを表示
   187 00000363 02                  <1>
   188                              <1> 												;       
   189 00000364 B410                <1> 		mov		ah, 0x10						;       // キー入力待ち
   190 00000366 CD16                <1> 		int		0x16							;       AL = BIOS(0x16, 0x10);
   191                              <1> 												;       
   192 00000368 68[0A04]E852FD83C4- <1> 		cdecl	puts, .s3						;       // 中断メッセージを消去
   192 00000370 02                  <1>
   193                              <1> 												;     }
   194                              <1> .16E:											;   }
   195                              <1> 												;   
   196 00000371 6683FB00            <1> 		cmp		ebx, 0							;   
   197 00000375 7593                <1> 		jne		.10L							; }
   198                              <1> .10E:											; while (0 != EBX);
   199                              <1> 
   200 00000377 68[CF03]E843FD83C4- <1> 		cdecl	puts, .s1						; // フッダを表示
   200 0000037F 02                  <1>
   201                              <1> 
   202                              <1> 		;---------------------------------------
   203                              <1> 		; 【レジスタの復帰】
   204                              <1> 		;---------------------------------------
   205 00000380 5D                  <1> 		pop		bp
   206 00000381 5F                  <1> 		pop		di
   207 00000382 5E                  <1> 		pop		si
   208 00000383 665A                <1> 		pop		edx
   209 00000385 6659                <1> 		pop		ecx
   210 00000387 665B                <1> 		pop		ebx
   211 00000389 6658                <1> 		pop		eax
   212                              <1> 
   213 0000038B C3                  <1> 		ret
   214                              <1> 
   215 0000038C 2045383230204D656D- <1> .s0:	db " E820 Memory Map:", 0x0A, 0x0D
   215 00000395 6F7279204D61703A0A- <1>
   215 0000039E 0D                  <1>
   216 0000039F 20426173655F5F5F5F- <1> 		db " Base_____________ Length___________ Type____", 0x0A, 0x0D, 0
   216 000003A8 5F5F5F5F5F5F5F5F5F- <1>
   216 000003B1 204C656E6774685F5F- <1>
   216 000003BA 5F5F5F5F5F5F5F5F5F- <1>
   216 000003C3 20547970655F5F5F5F- <1>
   216 000003CC 0A0D00              <1>
   217 000003CF 202D2D2D2D2D2D2D2D- <1> .s1:	db " ----------------- ----------------- --------", 0x0A, 0x0D, 0
   217 000003D8 2D2D2D2D2D2D2D2D2D- <1>
   217 000003E1 202D2D2D2D2D2D2D2D- <1>
   217 000003EA 2D2D2D2D2D2D2D2D2D- <1>
   217 000003F3 202D2D2D2D2D2D2D2D- <1>
   217 000003FC 0A0D00              <1>
   218 000003FF 203C6D6F72652E2E2E- <1> .s2:	db " <more...>", 0
   218 00000408 3E00                <1>
   219 0000040A 0D2020202020202020- <1> .s3:	db 0x0D, "          ", 0x0D, 0
   219 00000413 20200D00            <1>
   220                              <1> 
   221 00000417 00                  <1> ALIGN 4, db 0
   222 00000418 00<rep 14h>         <1> .b0:	times E820_RECORD_SIZE db 0
   223                              <1> 
   224                              <1> ;************************************************************************
   225                              <1> ;	メモリ情報の表示
   226                              <1> ;========================================================================
   227                              <1> ;■書式		: void put_mem_info(adr);
   228                              <1> ;
   229                              <1> ;■引数
   230                              <1> ;	adr		: メモリ情報を参照するアドレス
   231                              <1> ;
   232                              <1> ;■戻り値;	: 無し
   233                              <1> ;************************************************************************
   234                              <1> put_mem_info:
   235                              <1> 		;---------------------------------------
   236                              <1> 		; 【スタックフレームの構築】
   237                              <1> 		;---------------------------------------
   238                              <1> 												;    + 4| バッファアドレス
   239                              <1> 												;    + 2| IP（戻り番地）
   240 0000042C 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   241 0000042D 89E5                <1> 		mov		bp, sp							; ------+--------
   242                              <1> 
   243                              <1> 		;---------------------------------------
   244                              <1> 		; 【レジスタの保存】
   245                              <1> 		;---------------------------------------
   246 0000042F 53                  <1> 		push	bx
   247 00000430 56                  <1> 		push	si
   248                              <1> 
   249                              <1> 		;---------------------------------------
   250                              <1> 		; 引数を取得
   251                              <1> 		;---------------------------------------
   252 00000431 8B7604              <1> 		mov		si, [bp + 4]					; SI = バッファアドレス;
   253                              <1> 
   254                              <1> 		;---------------------------------------
   255                              <1> 		; レコードの表示
   256                              <1> 		;---------------------------------------
   257                              <1> 
   258                              <1> 		; Base(64bit)
   259 00000434 6A046A106A0468-     <1> 		cdecl	itoa, word [si + 6], .p2 + 0, 4, 16, 0b0100
   259 0000043B [0B05]FF7406E8C9FD- <1>
   259 00000443 83C40A              <1>
   260 00000446 6A046A106A0468-     <1> 		cdecl	itoa, word [si + 4], .p2 + 4, 4, 16, 0b0100
   260 0000044D [0F05]FF7404E8B7FD- <1>
   260 00000455 83C40A              <1>
   261 00000458 6A046A106A0468-     <1> 		cdecl	itoa, word [si + 2], .p3 + 0, 4, 16, 0b0100
   261 0000045F [1405]FF7402E8A5FD- <1>
   261 00000467 83C40A              <1>
   262 0000046A 6A046A106A0468-     <1> 		cdecl	itoa, word [si + 0], .p3 + 4, 4, 16, 0b0100
   262 00000471 [1805]FF34E894FD83- <1>
   262 00000479 C40A                <1>
   263                              <1> 
   264                              <1> 		; Length(64bit)
   265 0000047B 6A046A106A0468-     <1> 		cdecl	itoa, word [si +14], .p4 + 0, 4, 16, 0b0100
   265 00000482 [1D05]FF740EE882FD- <1>
   265 0000048A 83C40A              <1>
   266 0000048D 6A046A106A0468-     <1> 		cdecl	itoa, word [si +12], .p4 + 4, 4, 16, 0b0100
   266 00000494 [2105]FF740CE870FD- <1>
   266 0000049C 83C40A              <1>
   267 0000049F 6A046A106A0468-     <1> 		cdecl	itoa, word [si +10], .p5 + 0, 4, 16, 0b0100
   267 000004A6 [2605]FF740AE85EFD- <1>
   267 000004AE 83C40A              <1>
   268 000004B1 6A046A106A0468-     <1> 		cdecl	itoa, word [si + 8], .p5 + 4, 4, 16, 0b0100
   268 000004B8 [2A05]FF7408E84CFD- <1>
   268 000004C0 83C40A              <1>
   269                              <1> 
   270                              <1> 		; Type(32bit)
   271 000004C3 6A046A106A0468-     <1> 		cdecl	itoa, word [si +18], .p6 + 0, 4, 16, 0b0100
   271 000004CA [2F05]FF7412E83AFD- <1>
   271 000004D2 83C40A              <1>
   272 000004D5 6A046A106A0468-     <1> 		cdecl	itoa, word [si +16], .p6 + 4, 4, 16, 0b0100
   272 000004DC [3305]FF7410E828FD- <1>
   272 000004E4 83C40A              <1>
   273                              <1> 
   274 000004E7 68[0A05]E8D3FB83C4- <1> 		cdecl	puts, .s1						;   // レコード情報を表示
   274 000004EF 02                  <1>
   275                              <1> 
   276 000004F0 8B5C10              <1> 		mov		bx, [si +16]					;   // タイプを文字列で表示
   277 000004F3 83E307              <1> 		and		bx, 0x07						;   BX  = Type(0～5)
   278 000004F6 D1E3                <1> 		shl		bx, 1							;   BX *= 2;   // 要素サイズに変換
   279 000004F8 81C3[8C05]          <1> 		add		bx, .t0							;   BX += .t0; // テーブルの先頭アドレスを加算
   280 000004FC FF37E8BFFB83C402    <1> 		cdecl	puts, word [bx]					;   puts(*BX);
   281                              <1> 
   282                              <1> 		;---------------------------------------
   283                              <1> 		; 【レジスタの復帰】
   284                              <1> 		;---------------------------------------
   285 00000504 5E                  <1> 		pop		si
   286 00000505 5B                  <1> 		pop		bx
   287                              <1> 
   288                              <1> 		;---------------------------------------
   289                              <1> 		; 【スタックフレームの破棄】
   290                              <1> 		;---------------------------------------
   291 00000506 89EC                <1> 		mov		sp, bp
   292 00000508 5D                  <1> 		pop		bp
   293                              <1> 
   294 00000509 C3                  <1> 		ret;
   295                              <1> 
   296 0000050A 20                  <1> .s1:	db " "
   297 0000050B 5A5A5A5A5A5A5A5A5F  <1> .p2:	db "ZZZZZZZZ_"
   298 00000514 5A5A5A5A5A5A5A5A20  <1> .p3:	db "ZZZZZZZZ "
   299 0000051D 5A5A5A5A5A5A5A5A5F  <1> .p4:	db "ZZZZZZZZ_"
   300 00000526 5A5A5A5A5A5A5A5A20  <1> .p5:	db "ZZZZZZZZ "
   301 0000052F 5A5A5A5A5A5A5A5A00  <1> .p6:	db "ZZZZZZZZ", 0
   302                              <1> 
   303 00000538 2028556E6B6E6F776E- <1> .s4:	db " (Unknown)", 0x0A, 0x0D, 0
   303 00000541 290A0D00            <1>
   304 00000545 2028757361626C6529- <1> .s5:	db " (usable)", 0x0A, 0x0D, 0
   304 0000054E 0A0D00              <1>
   305 00000551 202872657365727665- <1> .s6:	db " (reserved)", 0x0A, 0x0D, 0
   305 0000055A 64290A0D00          <1>
   306 0000055F 202841435049206461- <1> .s7:	db " (ACPI data)", 0x0A, 0x0D, 0
   306 00000568 7461290A0D00        <1>
   307 0000056E 202841435049204E56- <1> .s8:	db " (ACPI NVS)", 0x0A, 0x0D, 0
   307 00000577 53290A0D00          <1>
   308 0000057C 2028626164206D656D- <1> .s9:	db " (bad memory)", 0x0A, 0x0D, 0
   308 00000585 6F7279290A0D00      <1>
   309                              <1> 
   310 0000058C [3805][4505][5105]- <1> .t0:	dw .s4, .s5, .s6, .s7, .s8, .s9, .s4, .s4
   310 00000592 [5F05][6E05][7C05]- <1>
   310 00000598 [3805][3805]        <1>
   311                              <1> 
   115                                  %include	"../modules/real/kbc.s"
   116                              <1> ;************************************************************************
   117                              <1> ;	KBCの出力バッファに書き込む
   118                              <1> ;========================================================================
   119                              <1> ;■書式		: WORD KBC_Data_Write(data);
   120                              <1> ;
   121                              <1> ;■引数
   122                              <1> ;	data	: 書き込みデータ
   123                              <1> ;
   124                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   125                              <1> ;************************************************************************
   126                              <1> KBC_Data_Write:
   127                              <1>                 ;---------------------------------------
   128                              <1>                 ; 【スタックフレームの構築】
   129                              <1>                 ;---------------------------------------
   130                              <1>                                                         
   131                              <1>                                                         ;    + 4| データ
   132                              <1>                                                         ;    + 2| IP（戻り番地）
   133 0000059C 55                  <1>                 push	bp								;  BP+ 0| BP（元の値）
   134 0000059D 89E5                <1>                 mov		bp, sp							; ------+--------
   135                              <1> 
   136                              <1>                 ;---------------------------------------
   137                              <1>                 ; 【レジスタの保存】
   138                              <1>                 ;---------------------------------------
   139 0000059F 51                  <1>                 push	cx
   140                              <1> 
   141                              <1>                 ;---------------------------------------
   142                              <1>                 ; データ書き込み
   143                              <1>                 ;---------------------------------------
   144 000005A0 B90000              <1>                 mov		cx, 0							; CX = 0; // 最大カウント値
   145                              <1>         .10L:											; do
   146                              <1>                                                         ; {
   147 000005A3 E464                <1>                 in		al, 0x64						;   AL = inp(0x64); // KBCステータス
   148 000005A5 A802                <1>                 test    al, 0x02						;   ZF = AL & 0x02; // 書き込み可能？
   149 000005A7 E0FA                <1>                 loopnz	.10L							; } while (--CX && !ZF);
   150                              <1>                                                         ; 
   151 000005A9 83F900              <1>                 cmp		cx, 0							; if (CX) // 未タイムアウト
   152 000005AC 7405                <1>                 jz		.20E							; {
   153                              <1>                                                         ;   
   154 000005AE 8A4604              <1>                 mov		al, [bp + 4]					;   AL = データ;
   155 000005B1 E660                <1>                 out    	0x60, al						;   outp(0x60, AL);
   156                              <1>         .20E:											; }
   157                              <1>                                                         ; 
   158 000005B3 89C8                <1>                 mov		ax, cx							; return CX;
   159                              <1> 
   160                              <1>                 ;---------------------------------------
   161                              <1>                 ; 【レジスタの復帰】
   162                              <1>                 ;---------------------------------------
   163 000005B5 59                  <1>                 pop		cx
   164                              <1> 
   165                              <1>                 ;---------------------------------------
   166                              <1>                 ; 【スタックフレームの破棄】
   167                              <1>                 ;---------------------------------------
   168 000005B6 89EC                <1>                 mov		sp, bp
   169 000005B8 5D                  <1>                 pop		bp
   170                              <1> 
   171 000005B9 C3                  <1>                 ret
   172                              <1> 
   173                              <1> 
   174                              <1> ;************************************************************************
   175                              <1> ;	KBCの出力バッファを読み込む
   176                              <1> ;========================================================================
   177                              <1> ;■書式		: WORD KBC_Data_Read(data);
   178                              <1> ;
   179                              <1> ;■引数
   180                              <1> ;	data	: 読み込みデータ格納アドレス
   181                              <1> ;
   182                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   183                              <1> ;************************************************************************
   184                              <1> KBC_Data_Read:
   185                              <1> 
   186                              <1>                 ;---------------------------------------
   187                              <1>                 ; 【スタックフレームの構築】
   188                              <1>                 ;---------------------------------------
   189                              <1>                                                         ;    + 4| 格納アドレス
   190                              <1>                                                         ;    + 2| IP（戻り番地）
   191 000005BA 55                  <1>                 push	bp								;  BP+ 0| BP（元の値）
   192 000005BB 89E5                <1>                 mov		bp, sp							; ------+--------
   193                              <1> 
   194                              <1>                 ;---------------------------------------
   195                              <1>                 ; 【レジスタの保存】
   196                              <1>                 ;---------------------------------------
   197 000005BD 51                  <1>                 push	cx
   198 000005BE 57                  <1>                 push	di
   199                              <1> 
   200                              <1>                 ;---------------------------------------
   201                              <1>                 ; データ読み込み
   202                              <1>                 ;---------------------------------------
   203 000005BF B90000              <1>                 mov		cx, 0							; CX = 0; // 最大カウント値
   204                              <1>         .10L:											; do
   205                              <1>                                                         ; {
   206 000005C2 E464                <1>                 in		al, 0x64						;   AL = inp(0x64); // KBCステータス
   207 000005C4 A801                <1>                 test    al, 0x01						;   ZF = AL & 0x01; // 読み込み可能？
   208 000005C6 E1FA                <1>                 loopz	.10L							; } while (--CX && ZF);
   209                              <1>                                                         ;   
   210 000005C8 83F900              <1>                 cmp		cx, 0							; if (CX) // 未タイムアウト
   211 000005CB 7409                <1>                 jz		.20E							; {
   212                              <1>                                                         ;   
   213 000005CD B400                <1>                 mov		ah, 0x00						;   AH = 0x00;
   214 000005CF E460                <1>                 in     	al, 0x60						;   AL = inp(0x60); // データ取得
   215                              <1>                                                         ;   
   216 000005D1 8B7E04              <1>                 mov		di, [bp + 4]					;   DI    = adr;
   217 000005D4 8905                <1>                 mov		[di + 0], ax					;   DI[0] = AX;
   218                              <1>         .20E:											; }
   219                              <1>                                                         ; 
   220 000005D6 89C8                <1>                 mov		ax, cx		                    ;  return CX;
   221                              <1> 
   222                              <1>                 ;---------------------------------------
   223                              <1>                 ; 【レジスタの復帰】
   224                              <1>                 ;---------------------------------------
   225 000005D8 5F                  <1>                 pop		di
   226 000005D9 59                  <1>                 pop		cx
   227                              <1> 
   228                              <1>                 ;---------------------------------------
   229                              <1>                 ; 【スタックフレームの破棄】
   230                              <1>                 ;---------------------------------------
   231 000005DA 89EC                <1>                 mov		sp, bp
   232 000005DC 5D                  <1>                 pop		bp
   233                              <1> 
   234 000005DD C3                  <1>                 ret
   235                              <1> 
   236                              <1> 
   237                              <1> ;************************************************************************
   238                              <1> ;	KBCにコマンドを出力
   239                              <1> ;========================================================================
   240                              <1> ;■書式		: WORD KBC_Cmd_Write(cmd);
   241                              <1> ;
   242                              <1> ;■引数
   243                              <1> ;	cmd		: コマンド
   244                              <1> ;
   245                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   246                              <1> ;************************************************************************
   247                              <1> KBC_Cmd_Write:
   248                              <1>                 ;---------------------------------------
   249                              <1>                 ; 【スタックフレームの構築】
   250                              <1>                 ;---------------------------------------
   251                              <1>                                                         ;    + 4| コマンド
   252                              <1>                                                         ;    + 2| IP（戻り番地）
   253 000005DE 55                  <1>                 push	bp								;  BP+ 0| BP（元の値）
   254 000005DF 89E5                <1>                 mov		bp, sp							; ------+--------
   255                              <1> 
   256                              <1>                 ;---------------------------------------
   257                              <1>                 ; 【レジスタの保存】
   258                              <1>                 ;---------------------------------------
   259 000005E1 51                  <1>                 push	cx
   260                              <1> 
   261                              <1>                 ;---------------------------------------
   262                              <1>                 ; コマンド書き込み
   263                              <1>                 ;---------------------------------------
   264 000005E2 B90000              <1>                 mov		cx, 0							; CX = 0; // 最大カウント値
   265                              <1>         .10L:											; do
   266                              <1>                                                         ; {
   267 000005E5 E464                <1>                 in		al, 0x64						;   AL = inp(0x64); // KBCステータス
   268 000005E7 A802                <1>                 test    al, 0x02						;   ZF = AL & 0x02; // 書き込み可能？
   269 000005E9 E0FA                <1>                 loopnz	.10L							; } while (--CX && !ZF);
   270                              <1>                                                         ; 
   271 000005EB 83F900              <1>                 cmp		cx, 0							; if (CX) // 未タイムアウト
   272 000005EE 7405                <1>                 jz		.20E							; {
   273                              <1>                                                         ;   
   274 000005F0 8A4604              <1>                 mov		al, [bp + 4]					;   AL = コマンド;
   275 000005F3 E664                <1>                 out    	0x64, al						;   outp(0x64, AL);
   276                              <1>         .20E:											; }
   277                              <1> 
   278 000005F5 89C8                <1>                 mov		ax, cx							; return CX;
   279                              <1> 
   280                              <1>                 ;---------------------------------------
   281                              <1>                 ; 【レジスタの復帰】
   282                              <1>                 ;---------------------------------------
   283 000005F7 59                  <1>                 pop		cx
   284                              <1> 
   285                              <1>                 ;---------------------------------------
   286                              <1>                 ; 【スタックフレームの破棄】
   287                              <1>                 ;---------------------------------------
   288 000005F8 89EC                <1>                 mov		sp, bp
   289 000005FA 5D                  <1>                 pop		bp
   290                              <1> 
   291 000005FB C3                  <1>                 ret
   116                                  %include	"../modules/real/lba_chs.s"
   117                              <1> ;************************************************************************
   118                              <1> ;	LBAをCHSに変換
   119                              <1> ;------------------------------------------------------------------------
   120                              <1> ;	事前にデバイスパラメータを取得しておく
   121                              <1> ;========================================================================
   122                              <1> ;■書式		: void lba_chs(drive, drv_chs, lba);
   123                              <1> ;
   124                              <1> ;■引数
   125                              <1> ;	drive	: drive構造体のアドレス
   126                              <1> ;			:（ドライブパラメータが格納されている）
   127                              <1> ;	drv_chs	: drive構造体のアドレス
   128                              <1> ;			:（変換後のシリンダ番号、ヘッド番号そしてセクタ番号を保存する）
   129                              <1> ;	lba		: LBA
   130                              <1> ;
   131                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   132                              <1> ;************************************************************************
   133                              <1> lba_chs:
   134                              <1> 		;---------------------------------------
   135                              <1> 		; 【スタックフレームの構築】
   136                              <1> 		;---------------------------------------
   137                              <1> 												; ------|--------
   138                              <1> 												;    + 8| LBA（2バイト）
   139                              <1> 												;    + 6| drv_chsドライブ情報
   140                              <1> 												;    + 4| driveドライブ情報
   141                              <1> 												; ------+--------
   142                              <1> 												;    + 2| IP（戻り番地）
   143 000005FC 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   144 000005FD 89E5                <1> 		mov		bp, sp							; ------+--------
   145                              <1> 
   146                              <1> 		;---------------------------------------
   147                              <1> 		; 【レジスタの保存】
   148                              <1> 		;---------------------------------------
   149 000005FF 50                  <1> 		push	ax
   150 00000600 53                  <1> 		push	bx
   151 00000601 52                  <1> 		push	dx
   152 00000602 56                  <1> 		push	si
   153 00000603 57                  <1> 		push	di
   154                              <1> 
   155                              <1>         ;---------------------------------------
   156                              <1> 		; 【処理の開始】
   157                              <1> 		;---------------------------------------
   158 00000604 8B7604              <1> 		mov		si, [bp + 4]					; SI  = driveバッファ;
   159 00000607 8B7E06              <1> 		mov		di, [bp + 6]					; DI  = drv_chsバッファ;
   160                              <1> 
   161                              <1> 		; シリンダあたりのセクタ数を計算（ヘッド数×セクタ数）
   162 0000060A 8A4404              <1> 		mov		al,  [si + drive.head]			; AL = 最大ヘッド数;
   163 0000060D F66406              <1> 		mul		byte [si + drive.sect]			; AX = 最大ヘッド数 * 最大セクタ数;
   164 00000610 89C3                <1> 		mov		bx, ax							; BX = シリンダあたりのセクタ数;
   165                              <1> 
   166                              <1> 		; シリンダ番号を取得するために
   167                              <1> 		; LBAをシリンダあたりのセクタ数で除算
   168 00000612 BA0000              <1> 		mov		dx, 0							; DX = LBA（上位2バイト）
   169 00000615 8B4608              <1> 		mov		ax,  [bp + 8]					; AX = LBA（下位2バイト）
   170 00000618 F7F3                <1> 		div		bx								; DX = DX:AX % BX; // 残り
   171                              <1> 												; AX = DX:AX / BX; // シリンダ番号
   172                              <1> 
   173 0000061A 894502              <1> 		mov		[di + drive.cyln], ax			; drv_chs.cyln = シリンダ番号;
   174                              <1> 
   175                              <1> 		; ヘッド位置を取得するために
   176                              <1> 		; あまりをトラックあたりのセクタ数で除算
   177 0000061D 89D0                <1> 		mov		ax, dx							; AX = 残り
   178 0000061F F67406              <1> 		div		byte [si + drive.sect]			; AH = AX % 最大セクタ数; // セクタ番号
   179                              <1> 												; AL = AX / 最大セクタ数; // ヘッド番号
   180                              <1> 
   181 00000622 0FB6D4              <1> 		movzx	dx, ah							; DX = セクタ番号
   182 00000625 42                  <1> 		inc		dx								; （セクタは1始まりなので+1）
   183                              <1> 
   184 00000626 B400                <1> 		mov		ah, 0x00						; AX = ヘッド位置
   185                              <1> 
   186 00000628 894504              <1> 		mov		[di + drive.head], ax			; drv_chs.head = ヘッド番号;
   187 0000062B 895506              <1> 		mov		[di + drive.sect], dx			; drv_chs.sect = セクタ番号;
   188                              <1> 
   189                              <1> 		;---------------------------------------
   190                              <1> 		; 【レジスタの復帰】
   191                              <1> 		;---------------------------------------
   192 0000062E 5F                  <1> 		pop		di
   193 0000062F 5E                  <1> 		pop		si
   194 00000630 5A                  <1> 		pop		dx
   195 00000631 5B                  <1> 		pop		bx
   196 00000632 58                  <1> 		pop		ax
   197                              <1> 
   198                              <1> 		;---------------------------------------
   199                              <1> 		; 【スタックフレームの破棄】
   200                              <1> 		;---------------------------------------
   201 00000633 89EC                <1> 		mov		sp, bp
   202 00000635 5D                  <1> 		pop		bp
   203                              <1> 
   204 00000636 C3                  <1> 		ret
   205                              <1> 
   117                                  %include	"../modules/real/read_lba.s"
   118                              <1> ;************************************************************************
   119                              <1> ;	セクタ読み込み(LBA指定)
   120                              <1> ;------------------------------------------------------------------------
   121                              <1> ;	事前にドライブパラメータを取得しておく
   122                              <1> ;========================================================================
   123                              <1> ;■書式		: WORD read_lba(drive, lba, sect, dst);
   124                              <1> ;
   125                              <1> ;■引数
   126                              <1> ;	drive	: drive構造体のアドレス
   127                              <1> ;			:（ドライブパラメータが格納されている）
   128                              <1> ;	lba		: LBA
   129                              <1> ;	sect	: 読み出しセクタ数
   130                              <1> ;	dst		: 読み出し先アドレス
   131                              <1> ;
   132                              <1> ;■戻り値	: 読み込んだセクタ数
   133                              <1> ;************************************************************************
   134                              <1> read_lba:
   135                              <1> 		;---------------------------------------
   136                              <1> 		; 【スタックフレームの構築】
   137                              <1> 		;---------------------------------------
   138                              <1> 												; ------|--------
   139                              <1> 												;    +10| コピー先
   140                              <1> 												;    + 8| セクタ数
   141                              <1> 												;    + 6| LBA（2バイト）
   142                              <1> 												;    + 4| ドライブ情報
   143                              <1> 												; ------+--------
   144                              <1> 												;    + 2| IP（戻り番地）
   145 00000637 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   146 00000638 89E5                <1> 		mov		bp, sp							; ------+--------
   147                              <1> 
   148                              <1>         ;---------------------------------------
   149                              <1> 		; 【レジスタの保存】
   150                              <1> 		;---------------------------------------
   151 0000063A 56                  <1> 		push	si
   152                              <1> 
   153                              <1> 		;---------------------------------------
   154                              <1> 		; 【処理の開始】
   155                              <1> 		;---------------------------------------
   156 0000063B 8B7604              <1> 		mov		si, [bp + 4]					; SI = ドライブ情報;
   157                              <1> 
   158                              <1> 		;---------------------------------------
   159                              <1> 		; LBA→CHS変換
   160                              <1> 		;---------------------------------------
   161 0000063E 8B4606              <1> 		mov		ax, [bp + 6]					; AX = LBA;
   162 00000641 5068[6606]56E8B3FF- <1> 		cdecl	lba_chs, si, .chs, ax			; lba_chs(drive, .chs, AX);
   162 00000649 83C406              <1>
   163                              <1> 
   164                              <1> 		;---------------------------------------
   165                              <1> 		; ドライブ番号のコピー
   166                              <1> 		;---------------------------------------
   167 0000064C 8A04                <1> 		mov		al, [si + drive.no]				; 
   168 0000064E A2[6606]            <1> 		mov		[.chs + drive.no], al			; ドライブ番号
   169                              <1> 
   170                              <1> 		;---------------------------------------
   171                              <1> 		; セクタの読み込み
   172                              <1> 		;---------------------------------------
   173 00000651 FF760AFF760868-     <1> 		cdecl	read_chs, .chs, word [bp + 8], word [bp +10]
   173 00000658 [6606]E8C1FA83C406  <1>
   174                              <1> 												; AX = read_chs(.chs, セクタ数, ofs);
   175                              <1> 
   176                              <1> 		;---------------------------------------
   177                              <1> 		; 【レジスタの復帰】
   178                              <1> 		;---------------------------------------
   179 00000660 5E                  <1> 		pop		si
   180                              <1> 
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 【スタックフレームの破棄】
   183                              <1> 		;---------------------------------------
   184 00000661 89EC                <1> 		mov		sp, bp
   185 00000663 5D                  <1> 		pop		bp
   186                              <1> 
   187 00000664 C3                  <1> 		ret
   188                              <1> 
   189 00000665 90                  <1> ALIGN 2
   190 00000666 00<rep 8h>          <1> .chs:	times drive_size	db	0				; 読み込みセクタに関する情報
   118                                  
   119                                  ;************************************************************************
   120                                  ;	ブート処理の第2ステージ
   121                                  ;************************************************************************
   122                                  stage_2:
   123                                  		;---------------------------------------
   124                                  		; 文字列を表示
   125                                  		;---------------------------------------
   126 0000066E 68[E806]E84CFA83C4-     		cdecl	puts, .s0						; puts(.s0);
   126 00000676 02                 
   127                                  
   128                                  		;---------------------------------------
   129                                  		; ドライブ情報を取得
   130                                  		;---------------------------------------
   131 00000677 68[B800]E80FFC83C4-     		cdecl	get_drive_param, BOOT			; get_drive_param(DX, BOOT.CYLN);
   131 0000067F 02                 
   132 00000680 83F800                  		cmp		ax, 0							; if (0 == AX)
   133 00000683 750C                    .10Q:	jne		.10E							; {
   134 00000685 68[1F07]E835FA83C4-     .10T:	cdecl	puts, .e0						;   puts(.e0);
   134 0000068D 02                 
   135 0000068E E84EFA                  		call	reboot							;   reboot(); // 再起動
   136                                  .10E:											; }
   137                                  
   138                                  		;---------------------------------------
   139                                  		; ドライブ情報を表示
   140                                  		;---------------------------------------
   141 00000691 A1[B800]                		mov		ax, [BOOT + drive.no]			; AX = ブートドライブ;
   142 00000694 6A046A106A0268-         		cdecl	itoa, ax, .p1, 2, 16, 0b0100	; 
   142 0000069B [0007]50E86BFB83C4-
   142 000006A3 0A                 
   143 000006A4 A1[BA00]                		mov		ax, [BOOT + drive.cyln]			; 
   144 000006A7 6A046A106A0468-         		cdecl	itoa, ax, .p2, 4, 16, 0b0100	; 
   144 000006AE [0807]50E858FB83C4-
   144 000006B6 0A                 
   145 000006B7 A1[BC00]                		mov		ax, [BOOT + drive.head]			; AX = ヘッド数;
   146 000006BA 6A046A106A0268-         		cdecl	itoa, ax, .p3, 2, 16, 0b0100	; 
   146 000006C1 [1207]50E845FB83C4-
   146 000006C9 0A                 
   147 000006CA A1[BE00]                		mov		ax, [BOOT + drive.sect]			; AX = トラックあたりのセクタ数;
   148 000006CD 6A046A106A0268-         		cdecl	itoa, ax, .p4, 2, 16, 0b0100	; 
   148 000006D4 [1A07]50E832FB83C4-
   148 000006DC 0A                 
   149 000006DD 68[F706]E8DDF983C4-     		cdecl	puts, .s1
   149 000006E5 02                 
   150                                  
   151                                  		;---------------------------------------
   152                                  		; 次のステージへ移行
   153                                  		;---------------------------------------
   154 000006E6 EB52                    		jmp		stage_3rd						; 次のステージへ移行
   155                                  
   156                                  		;---------------------------------------
   157                                  		; データ
   158                                  		;---------------------------------------
   159 000006E8 326E64207374616765-     .s0		db	"2nd stage...", 0x0A, 0x0D, 0
   159 000006F1 2E2E2E0A0D00       
   160                                  
   161 000006F7 2044726976653A3078      .s1		db	" Drive:0x"
   162 00000700 20202C20433A3078        .p1		db	"  , C:0x"
   163 00000708 202020202C20483A30-     .p2		db	"    , H:0x"
   163 00000711 78                 
   164 00000712 20202C20533A3078        .p3		db	"  , S:0x"
   165 0000071A 20200A0D00              .p4		db	"  ", 0x0A, 0x0D, 0
   166                                  
   167 0000071F 43616E277420676574-     .e0		db	"Can't get drive parameter.", 0
   167 00000728 206472697665207061-
   167 00000731 72616D657465722E00 
   168                                  
   169                                  ;************************************************************************
   170                                  ;	ブート処理の第3ステージ
   171                                  ;************************************************************************
   172                                  stage_3rd:
   173                                  		;---------------------------------------
   174                                  		; 文字列を表示
   175                                  		;---------------------------------------
   176 0000073A 68[B707]E880F983C4-     		cdecl	puts, .s0
   176 00000742 02                 
   177                                  
   178                                  		;---------------------------------------
   179                                  		; プロテクトモードで使用するフォントは、
   180                                  		; BIOSに内蔵されたものを流用する
   181                                  		;---------------------------------------
   182 00000743 68[0002]E884FB83C4-     		cdecl	get_font_adr, FONT				; // BIOSのフォントアドレスを取得
   182 0000074B 02                 
   183                                  
   184                                  		;---------------------------------------
   185                                  		; フォントアドレスの表示
   186                                  		;---------------------------------------
   187 0000074C 6A046A106A0468-         		cdecl	itoa, word [FONT.seg], .p1, 4, 16, 0b0100
   187 00000753 [D407]FF36[0002]E8-
   187 0000075A B0FA83C40A         
   188 0000075F 6A046A106A0468-         		cdecl	itoa, word [FONT.off], .p2, 4, 16, 0b0100
   188 00000766 [D907]FF36[0202]E8-
   188 0000076D 9DFA83C40A         
   189 00000772 68[C607]E848F983C4-     		cdecl	puts, .s1
   189 0000077A 02                 
   190                                  
   191                                  		;---------------------------------------
   192                                  		; メモリ情報の取得と表示
   193                                  		;---------------------------------------
   194 0000077B E86FFB                  		cdecl	get_mem_info					; get_mem_info();
   195                                  
   196 0000077E 66A1[0402]              		mov		eax, [ACPI_DATA.adr]			; EAX = ACPI_DATA.adr;
   197 00000782 6683F800                		cmp		eax, 0							; if (EAX)
   198 00000786 742D                    		je		.10E							; {
   199                                  
   200 00000788 6A046A106A0468-         		cdecl	itoa, ax, .p4, 4, 16, 0b0100	;   itoa(AX); // 下位アドレスを変換
   200 0000078F [F207]50E877FA83C4-
   200 00000797 0A                 
   201 00000798 66C1E810                		shr		eax, 16							;   EAX >>= 16;
   202 0000079C 6A046A106A0468-         		cdecl	itoa, ax, .p3, 4, 16, 0b0100	;   itoa(AX); // 上位アドレスを変換
   202 000007A3 [EE07]50E863FA83C4-
   202 000007AB 0A                 
   203                                  
   204 000007AC 68[E307]E80EF983C4-     		cdecl	puts, .s2						;   puts(.s2); // アドレスを表示
   204 000007B4 02                 
   205                                  .10E:											; }
   206                                  
   207                                  		;---------------------------------------
   208                                  		; 次のステージへ移行
   209                                  		;---------------------------------------
   210 000007B5 EB42                    		jmp		stage_4							; 次のステージへ移行
   211                                  
   212                                  		;---------------------------------------
   213                                  		; データ
   214                                  		;---------------------------------------
   215 000007B7 337264207374616765-     .s0:	db	"3rd stage...", 0x0A, 0x0D, 0
   215 000007C0 2E2E2E0A0D00       
   216                                  
   217 000007C6 20466F6E7420416464-     .s1:	db	" Font Address="
   217 000007CF 726573733D         
   218 000007D4 5A5A5A5A3A              .p1:	db	"ZZZZ:"
   219 000007D9 5A5A5A5A0A0D00          .p2:	db	"ZZZZ", 0x0A, 0x0D, 0
   220 000007E0 0A0D00                  		db	0x0A, 0x0D, 0
   221                                  
   222 000007E3 204143504920646174-     .s2:	db	" ACPI data="
   222 000007EC 613D               
   223 000007EE 5A5A5A5A                .p3:	db	"ZZZZ"
   224 000007F2 5A5A5A5A0A0D00          .p4:	db	"ZZZZ", 0x0A, 0x0D, 0
   225                                  
   226                                  ;************************************************************************
   227                                  ;	ブート処理の第4ステージ
   228                                  ;************************************************************************
   229                                  stage_4:
   230                                  		;---------------------------------------
   231                                  		; 文字列を表示
   232                                  		;---------------------------------------
   233 000007F9 68[CD08]E8C1F883C4-     		cdecl	puts, .s0
   233 00000801 02                 
   234                                  
   235                                  		;---------------------------------------
   236                                  		; A20ゲートの有効化
   237                                  		;---------------------------------------
   238 00000802 FA                      		cli										;   // 割り込み禁止
   239                                  												;   
   240 00000803 68AD00E8D5FD83C402      		cdecl	KBC_Cmd_Write, 0xAD				;   // キーボード無効化
   241                                  												;   
   242 0000080C 68D000E8CCFD83C402      		cdecl	KBC_Cmd_Write, 0xD0				;   // 出力ポート読み出しコマンド
   243 00000815 68[1609]E89FFD83C4-     		cdecl	KBC_Data_Read, .key				;   // 出力ポートデータ
   243 0000081D 02                 
   244                                  												;   
   245 0000081E 8A1E[1609]              		mov		bl, [.key]						;   BL  = key;
   246 00000822 80CB02                  		or		bl, 0x02						;   BL |= 0x02; // A20ゲート有効化
   247                                  												;   
   248 00000825 68D100E8B3FD83C402      		cdecl	KBC_Cmd_Write, 0xD1				;   // 出力ポート書き込みコマンド
   249 0000082E 53E86AFD83C402          		cdecl	KBC_Data_Write, bx				;   // 出力ポートデータ
   250                                  												;   
   251 00000835 68AE00E8A3FD83C402      		cdecl	KBC_Cmd_Write, 0xAE				;   // キーボード有効化
   252                                  												;   
   253 0000083E FB                      		sti										;   // 割り込み許可
   254                                  
   255                                  		;---------------------------------------
   256                                  		; 文字列を表示
   257                                  		;---------------------------------------
   258 0000083F 68[DC08]E87BF883C4-     		cdecl	puts, .s1
   258 00000847 02                 
   259                                  
   260                                  		;---------------------------------------
   261                                  		; キーボードLEDのテスト
   262                                  		;---------------------------------------
   263 00000848 68[F108]E872F883C4-     		cdecl	puts, .s2						; 
   263 00000850 02                 
   264                                  
   265 00000851 BB0000                  		mov		bx, 0							; CX = LEDの初期値;
   266                                  .10L:											; do
   267                                  												; {
   268 00000854 B400                    		mov		ah, 0x00						;   // キー入力待ち
   269 00000856 CD16                    		int		0x16							;   AL = BIOS(0x16, 0x00);
   270                                  												;   
   271 00000858 3C31                    		cmp		al, '1'							;   if (AL < '1')
   272 0000085A 7266                    		jb		.10E							;     break;
   273                                  												;   
   274 0000085C 3C33                    		cmp		al, '3'							;   if ('3' < AL)
   275 0000085E 7762                    		ja		.10E							;     break;
   276                                  												;   
   277 00000860 88C1                    		mov		cl, al							;   CL   = キー入力;
   278 00000862 FEC9                    		dec		cl								;   CL  -= 1;       // 1減算
   279 00000864 80E103                  		and		cl, 0x03						;   CL  &= 0x03;    // 0～2に制限
   280 00000867 B80100                  		mov		ax, 0x0001						;   AX   = 0x0001;  // ビット変換用
   281 0000086A D3E0                    		shl		ax, cl							;   AX <<= CL;      // 0～2ビット左シフト
   282 0000086C 31C3                    		xor		bx, ax							;   BX  ^= AX;      // ビット反転
   283                                  
   284                                  		;---------------------------------------
   285                                  		; LEDコマンドの送信
   286                                  		;---------------------------------------
   287 0000086E FA                      		cli										;   // 割り込み禁止
   288                                  												;   
   289 0000086F 68AD00E869FD83C402      		cdecl	KBC_Cmd_Write, 0xAD				;   // キーボード無効化
   290                                  												;   
   291 00000878 68ED00E81EFD83C402      		cdecl	KBC_Data_Write, 0xED			;   // LEDコマンド
   292 00000881 68[1609]E833FD83C4-     		cdecl	KBC_Data_Read, .key				;   // 受信応答
   292 00000889 02                 
   293                                  												;   
   294 0000088A 803E[1609]FA            		cmp		[.key], byte 0xFA				;   if (0xFA == key)
   295 0000088F 7509                    		jne		.11F							;   {
   296                                  												;     
   297 00000891 53E807FD83C402          		cdecl	KBC_Data_Write, bx				;     // LEDデータ出力
   298                                  												;   }
   299 00000898 EB1C                    		jmp		.11E							;   else
   300                                  .11F:											;   {
   301 0000089A 6A046A106A0268-         		cdecl	itoa, word [.key], .e1, 2, 16, 0b0100
   301 000008A1 [1209]FF36[1609]E8-
   301 000008A8 62F983C40A         
   302 000008AD 68[1109]E80DF883C4-     		cdecl	puts, .e0						;     // 受信コードを表示
   302 000008B5 02                 
   303                                  .11E:											;   }
   304                                  												;   
   305 000008B6 68AE00E822FD83C402      		cdecl	KBC_Cmd_Write, 0xAE				;   // キーボード有効化
   306                                  												;   
   307 000008BF FB                      		sti										;   // 割り込み許可
   308                                  												;   
   309 000008C0 EB92                    		jmp		.10L							; } while (1);
   310                                  .10E:
   311                                  
   312                                  		;---------------------------------------
   313                                  		; 文字列を表示
   314                                  		;---------------------------------------
   315 000008C2 68[0709]E8F8F783C4-     		cdecl	puts, .s3
   315 000008CA 02                 
   316                                  
   317                                  		;---------------------------------------
   318                                  		; 次のステージへ移行
   319                                  		;---------------------------------------
   320 000008CB EB4B                    		jmp		stage_5							; 次のステージへ移行
   321                                  
   322 000008CD 347468207374616765-     .s0:	db	"4th stage...", 0x0A, 0x0D, 0
   322 000008D6 2E2E2E0A0D00       
   323 000008DC 204132302047617465-     .s1:	db	" A20 Gate Enabled.", 0x0A, 0x0D, 0
   323 000008E5 20456E61626C65642E-
   323 000008EE 0A0D00             
   324 000008F1 204B6579626F617264-     .s2:	db	" Keyboard LED Test...", 0
   324 000008FA 204C45442054657374-
   324 00000903 2E2E2E00           
   325 00000907 2028646F6E65290A0D-     .s3:	db	" (done)", 0x0A, 0x0D, 0
   325 00000910 00                 
   326 00000911 5B                      .e0:	db	"["
   327 00000912 5A5A5D00                .e1:	db	"ZZ]", 0
   328                                  
   329 00000916 0000                    .key:	dw	0
   330                                  
   331                                  ;************************************************************************
   332                                  ;	ブート処理の第5ステージ
   333                                  ;************************************************************************
   334                                  stage_5:
   335                                  		;---------------------------------------
   336                                  		; 文字列を表示
   337                                  		;---------------------------------------
   338 00000918 68[4409]E8A2F783C4-     		cdecl	puts, .s0
   338 00000920 02                 
   339                                  
   340                                  		;---------------------------------------
   341                                  		; カーネルを読み込む
   342                                  		;---------------------------------------
   343 00000921 68009C6A106A1068-       		cdecl	read_lba, BOOT, BOOT_SECT, KERNEL_SECT, BOOT_END
   343 00000929 [B800]E809FD83C408 
   344                                  												; AX = read_lba(.lba, ...);
   345 00000931 83F810                  		cmp		ax, KERNEL_SECT					; if (AX != CX)
   346 00000934 740C                    .10Q:	jz		.10E							; {
   347 00000936 68[5309]E884F783C4-     .10T:	cdecl	puts, .e0						;   puts(.e0);
   347 0000093E 02                 
   348 0000093F E89DF7                  		call	reboot							;   reboot(); // 再起動
   349                                  .10E:											; }
   350                                  												; 
   351                                  
   352                                  		;---------------------------------------
   353                                  		; 処理の終了
   354                                  		;---------------------------------------
   355 00000942 EBFE                    		jmp		$								; while (1) ; // 無限ループ
   356                                  
   357 00000944 357468207374616765-     .s0		db	"5th stage...", 0x0A, 0x0D, 0
   357 0000094D 2E2E2E0A0D00       
   358 00000953 204661696C75726520-     .e0		db	" Failure load kernel...", 0x0A, 0x0D, 0
   358 0000095C 6C6F6164206B65726E-
   358 00000965 656C2E2E2E0A0D00   
   359                                  
   360                                  
   361                                  ;************************************************************************
   362                                  ;	パディング
   363                                  ;************************************************************************
   364 0000096D 00<rep 1693h>           		times BOOT_SIZE - ($ - $$)		db	0	; パディング
   365                                  
