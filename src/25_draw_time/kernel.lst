     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  ;************************************************************************
     8                                  ;	マクロ
     9                                  ;************************************************************************
    10                                  %include	"../include/define.s"
    11                              <1> ;************************************************************************
    12                              <1> ;	メモリイメージ
    13                              <1> ;************************************************************************
    14                              <1> 
    15                              <1> 		;---------------------------------------
    16                              <1> 		;           |            | 
    17                              <1> 		;           |____________| 
    18                              <1> 		; 0000_7A00 |            | ( 512) スタック
    19                              <1> 		;           |____________| 
    20                              <1> 		; 0000_7C00 |            | (  8K) ブート
    21                              <1> 		;           =            = 
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    24                              <1> 		;           =            = 
    25                              <1> 		;           |____________| 
    26                              <1> 		; 0000_BC00 |////////////| 
    27                              <1> 		;           =            = 
    28                              <1> 		;           |____________| 
    29                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    32                              <1> 		;           |____________| 
    33                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    34                              <1> 		;           |            | 
    35                              <1> 		;           =            = 
    36                              <1> 		;           |____________| 
    37                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    38                              <1> 		;           |            | （各タスク1K）
    39                              <1> 		;           =            = 
    40                              <1> 		;           |____________| 
    41                              <1> 		; 0010_5000 |            | Dir
    42                              <1> 		;      6000 |____________| Page
    43                              <1> 		; 0010_7000 |            | Dir
    44                              <1> 		;      8000 |____________| Page
    45                              <1> 		; 0010_9000 |////////////| 
    46                              <1> 		;           |            | 
    47                              <1> 
    48                              <1> 
    49                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    50                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    51                              <1> 
    52                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    53                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    54                              <1> 
    55                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    56                              <1> 
    57                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    58                              <1> 
    59                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    60                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    61                              <1> 
    62                              <1> 		E820_RECORD_SIZE	equ		20
    63                              <1> 
    64                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    11                                  %include	"../include/macro.s"
    12                              <1> ;************************************************************************
    13                              <1> ; 関数呼び出し用マクロ
    14                              <1> ;
    15                              <1> ; 使い方：
    16                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    17                              <1> ;
    18                              <1> ;************************************************************************
    19                              <1> 
    20                              <1> %macro cdecl 1-*.nolist
    21                              <1> 
    22                              <1>     %rep %0 - 1
    23                              <1>         push    %{-1:-1}
    24                              <1>         %rotate -1
    25                              <1>     %endrep
    26                              <1>     %rotate -1
    27                              <1> 
    28                              <1>         call    %1
    29                              <1> 
    30                              <1>     %if 1 < %0
    31                              <1>         add     sp,(__BITS__ >> 3) * (%0 - 1)
    32                              <1>     %endif
    33                              <1> 
    34                              <1> %endmacro
    35                              <1> 
    36                              <1> ;************************************************************************
    37                              <1> ;	構造体
    38                              <1> ;************************************************************************
    39                              <1> 
    40                              <1> ;-----------------------------------------------
    41                              <1> ;	ドライブパラメータ
    42                              <1> ;-----------------------------------------------
    43                              <1> struc drive
    44 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
    45 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
    46 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
    47 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
    48                              <1> endstruc
    12                                  
    13                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    14                                  
    15                                  [BITS 32]
    16                                  ;************************************************************************
    17                                  ;	エントリポイント
    18                                  ;************************************************************************
    19                                  kernel:
    20                                  		;---------------------------------------
    21                                  		; フォントアドレスを取得
    22                                  		;---------------------------------------
    23 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    24 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    25 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    26 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    27 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    28 00000011 A3[84000000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    29                                  
    30                                  		;---------------------------------------
    31                                  		; フォントの一覧表示
    32                                  		;---------------------------------------
    33 00000016 6A0D6A3FE8E4010000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
    33 0000001F 6683C408           
    34 00000023 6A046A3FE865020000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
    34 0000002C 6683C408           
    35                                  
    36                                  		;---------------------------------------
    37                                  		; 文字列の表示
    38                                  		;---------------------------------------
    39 00000030 68[71000000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
    39 00000038 00006A0E6A19E80502-
    39 00000041 00006683C410       
    40                                  
    41                                  		;---------------------------------------
    42                                  		; 時刻の表示
    43                                  		;---------------------------------------
    44                                  .10L:											; do
    45                                  												; {
    46 00000047 68[88000000]E81E05-     		cdecl	rtc_get_time, RTC_TIME			;   EAX = get_time(&RTC_TIME);
    46 0000004F 00006683C404       
    47 00000055 FF35[88000000]6800-     		cdecl	draw_time, 72, 0, 0x0700,									dword [RTC_TIME]
    47 0000005D 0700006A006A48E847-
    47 00000066 0500006683C410     
    49 0000006D EBD8                    		jmp		.10L							; } while (1);
    50                                  
    51                                  		;---------------------------------------
    52                                  		; 処理の終了
    53                                  		;---------------------------------------
    54 0000006F EBFE                    		jmp		$								; while (1) ; // 無限ループ
    55                                  
    56 00000071 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
    56 0000007A 65726E656C212000   
    57                                  
    58 00000082 00<rep 2h>              ALIGN 4, db 0
    59 00000084 00000000                FONT_ADR:	dd	0
    60 00000088 00000000                RTC_TIME:	dd	0
    61                                  
    62                                  ;************************************************************************
    63                                  ;	モジュール
    64                                  ;************************************************************************
    65                                  %include	"../modules/protect/vga.s"
    66                              <1> ;************************************************************************
    67                              <1> ;	読み込みプレーンの選択
    68                              <1> ;========================================================================
    69                              <1> ;■書式		: void vga_set_read_plane(plane);
    70                              <1> ;
    71                              <1> ;■引数
    72                              <1> ;	plane	: 読み込みプレーン
    73                              <1> ;
    74                              <1> ;■戻り値	: 無し
    75                              <1> ;************************************************************************
    76                              <1> vga_set_read_plane:
    77                              <1> 		;---------------------------------------
    78                              <1> 		; 【スタックフレームの構築】
    79                              <1> 		;---------------------------------------
    80                              <1> 												; EBP+ 8| プレーン（インデックス）
    81                              <1> 												; ------+----------------
    82 0000008C 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    83 0000008D 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    84                              <1> 												; ------+----------------
    85                              <1> 
    86                              <1> 		;---------------------------------------
    87                              <1> 		; 【レジスタの保存】
    88                              <1> 		;---------------------------------------
    89 0000008F 50                  <1> 		push	eax
    90 00000090 52                  <1> 		push	edx
    91                              <1> 
    92                              <1> 		;---------------------------------------
    93                              <1> 		; 読み込みプレーンの選択
    94                              <1> 		;---------------------------------------
    95 00000091 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
    96 00000094 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
    97 00000097 B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
    98 00000099 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
    99 0000009D 66EF                <1> 		out		dx, ax							; // ポート出力
   100                              <1> 
   101                              <1> 		;---------------------------------------
   102                              <1> 		; 【レジスタの復帰】
   103                              <1> 		;---------------------------------------
   104 0000009F 5A                  <1> 		pop		edx
   105 000000A0 58                  <1> 		pop		eax
   106                              <1> 
   107                              <1> 		;---------------------------------------
   108                              <1> 		; 【スタックフレームの破棄】
   109                              <1> 		;---------------------------------------
   110 000000A1 89EC                <1> 		mov		esp, ebp
   111 000000A3 5D                  <1> 		pop		ebp
   112                              <1> 
   113 000000A4 C3                  <1> 		ret
   114                              <1> 
   115                              <1> 
   116                              <1> ;************************************************************************
   117                              <1> ;	書き込みプレーンを選択
   118                              <1> ;========================================================================
   119                              <1> ;■書式		: void vga_set_write_plane(plane);
   120                              <1> ;
   121                              <1> ;■引数
   122                              <1> ;	plane	: 書き込みプレーン
   123                              <1> ;
   124                              <1> ;■戻り値	: 無し
   125                              <1> ;************************************************************************
   126                              <1> vga_set_write_plane:
   127                              <1> 		;---------------------------------------
   128                              <1> 		; 【スタックフレームの構築】
   129                              <1> 		;---------------------------------------
   130                              <1> 												; EBP+ 8| プレーン（ビット指定）
   131                              <1> 												; ------+----------------
   132 000000A5 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   133 000000A6 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   134                              <1> 												; ------+----------------
   135                              <1> 
   136                              <1> 		;---------------------------------------
   137                              <1> 		; 【レジスタの保存】
   138                              <1> 		;---------------------------------------
   139 000000A8 50                  <1> 		push	eax
   140 000000A9 52                  <1> 		push	edx
   141                              <1> 
   142                              <1> 		;---------------------------------------
   143                              <1> 		; 書き込みプレーンの選択
   144                              <1> 		;---------------------------------------
   145 000000AA 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
   146 000000AD 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
   147 000000B0 B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
   148 000000B2 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
   149 000000B6 66EF                <1> 		out		dx, ax							; // ポート出力
   150                              <1> 
   151                              <1> 		;---------------------------------------
   152                              <1> 		; 【レジスタの復帰】
   153                              <1> 		;---------------------------------------
   154 000000B8 5A                  <1> 		pop		edx
   155 000000B9 58                  <1> 		pop		eax
   156                              <1> 
   157                              <1> 		;---------------------------------------
   158                              <1> 		; 【スタックフレームの破棄】
   159                              <1> 		;---------------------------------------
   160 000000BA 89EC                <1> 		mov		esp, ebp
   161 000000BC 5D                  <1> 		pop		ebp
   162                              <1> 
   163 000000BD C3                  <1> 		ret
   164                              <1> 
   165                              <1> 
   166                              <1> ;************************************************************************
   167                              <1> ;	フォントの書き込み
   168                              <1> ;========================================================================
   169                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   170                              <1> ;
   171                              <1> ;■引数
   172                              <1> ;	font	: FONTアドレス
   173                              <1> ;	vram	: VRAMアドレス
   174                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   175                              <1> ;	color	: 描画色
   176                              <1> ;
   177                              <1> ;■戻り値	: 無し
   178                              <1> ;************************************************************************
   179                              <1> vram_font_copy:
   180                              <1> 		;---------------------------------------
   181                              <1> 		; 【スタックフレームの構築】
   182                              <1> 		;---------------------------------------
   183                              <1> 												; EBP+20| 色（背景/前景色）
   184                              <1> 												; EBP+16| プレーン（ビット指定）
   185                              <1> 												; EBP+12| VRAMアドレス
   186                              <1> 												; EBP+ 8| FONTアドレス
   187                              <1> 												; ------+----------------
   188 000000BE 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   189 000000BF 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   190                              <1> 												; ------+----------------
   191                              <1> 
   192                              <1> 		;---------------------------------------
   193                              <1> 		; 【レジスタの保存】
   194                              <1> 		;---------------------------------------
   195 000000C1 50                  <1> 		push	eax
   196 000000C2 53                  <1> 		push	ebx
   197 000000C3 51                  <1> 		push	ecx
   198 000000C4 52                  <1> 		push	edx
   199 000000C5 56                  <1> 		push	esi
   200 000000C6 57                  <1> 		push	edi
   201                              <1> 
   202                              <1> 		;---------------------------------------
   203                              <1> 		; 【処理の開始】
   204                              <1> 		;---------------------------------------
   205 000000C7 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   206 000000CA 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   207 000000CD 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   208 000000D1 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   209                              <1> 
   210 000000D5 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   211 000000D7 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   212 000000DA FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   213                              <1> 
   214 000000DC 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   215 000000DE 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   216 000000E1 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   217                              <1> 
   218                              <1> 		;---------------------------------------
   219                              <1> 		; 16ドットフォントのコピー
   220                              <1> 		;---------------------------------------
   221 000000E3 FC                  <1> 		cld										; DF  = 0; // アドレス加算
   222                              <1> 
   223 000000E4 B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   224                              <1> .10L:											; do
   225                              <1> 												; {
   226                              <1> 		;---------------------------------------
   227                              <1> 		; フォントマスクの作成
   228                              <1> 		;---------------------------------------
   229 000000E9 AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   230 000000EA 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   231 000000EC F6D4                <1> 		not		ah								;   
   232                              <1> 
   233                              <1> 		;---------------------------------------
   234                              <1> 		; 前景色
   235                              <1> 		;---------------------------------------
   236 000000EE 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   237                              <1> 
   238                              <1> 		;---------------------------------------
   239                              <1> 		; 背景色
   240                              <1> 		;---------------------------------------
   241 000000F0 F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   242 000000F6 7404                <1> 		jz		.11F							;   {
   243 000000F8 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   244 000000FA EB02                <1> 		jmp		.11E							;   }
   245                              <1> .11F:											;   else
   246                              <1> 												;   {
   247 000000FC 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   248                              <1> .11E:											;   }
   249                              <1> 
   250                              <1> 		;---------------------------------------
   251                              <1> 		; 前景色と背景色を合成
   252                              <1> 		;---------------------------------------
   253 000000FE 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   254                              <1> 
   255                              <1> 		;---------------------------------------
   256                              <1> 		; 新しい値を出力
   257                              <1> 		;---------------------------------------
   258 00000100 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   259                              <1> 
   260 00000102 83C750              <1> 		add		edi, 80							;   EDI += 80;
   261 00000105 E2E2                <1> 		loop	.10L							; } while (--ECX);
   262                              <1> .10E:											; 
   263                              <1> 
   264                              <1> 		;---------------------------------------
   265                              <1> 		; 【レジスタの復帰】
   266                              <1> 		;---------------------------------------
   267 00000107 5F                  <1> 		pop		edi
   268 00000108 5E                  <1> 		pop		esi
   269 00000109 5A                  <1> 		pop		edx
   270 0000010A 59                  <1> 		pop		ecx
   271 0000010B 5B                  <1> 		pop		ebx
   272 0000010C 58                  <1> 		pop		eax
   273                              <1> 
   274                              <1> 		;---------------------------------------
   275                              <1> 		; 【スタックフレームの破棄】
   276                              <1> 		;---------------------------------------
   277 0000010D 89EC                <1> 		mov		esp, ebp
   278 0000010F 5D                  <1> 		pop		ebp
   279                              <1> 
   280 00000110 C3                  <1> 		ret
   281                              <1> 
   282                              <1> 
   283                              <1> ;************************************************************************
   284                              <1> ;	ビットパターンの書き込み
   285                              <1> ;========================================================================
   286                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   287                              <1> ;
   288                              <1> ;■引数
   289                              <1> ;	bit		: 出力ビットパターン
   290                              <1> ;	vram	: VRAMアドレス
   291                              <1> ;	flag	: 1:セット, 0:クリア
   292                              <1> ;
   293                              <1> ;■戻り値	: 無し
   294                              <1> ;************************************************************************
   295                              <1> vram_bit_copy:
   296                              <1> 		;---------------------------------------
   297                              <1> 		; 【スタックフレームの構築】
   298                              <1> 		;---------------------------------------
   299                              <1> 												; EBP+20| 色（背景/前景色）
   300                              <1> 												; EBP+16| プレーン（ビット指定）
   301                              <1> 												; EBP+12| VRAMアドレス
   302                              <1> 												; EBP+ 8| 出力ビットパターン
   303                              <1> 												; ------+----------------
   304 00000111 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   305 00000112 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   306                              <1> 												; ------+----------------
   307                              <1> 
   308                              <1> 		;---------------------------------------
   309                              <1> 		; 【レジスタの保存】
   310                              <1> 		;---------------------------------------
   311 00000114 50                  <1> 		push	eax
   312 00000115 53                  <1> 		push	ebx
   313 00000116 57                  <1> 		push	edi
   314                              <1> 
   315                              <1> 		;---------------------------------------
   316                              <1> 		; 【処理の開始】
   317                              <1> 		;---------------------------------------
   318 00000117 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   319 0000011A 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   320 0000011E 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   321                              <1> 
   322 00000122 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   323 00000124 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   324 00000127 FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   325                              <1> 
   326                              <1> 		;---------------------------------------
   327                              <1> 		; マスクデータの作成
   328                              <1> 		;---------------------------------------
   329 00000129 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   330 0000012C 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   331 0000012E F6D4                <1> 		not		ah								; 
   332                              <1> 
   333                              <1> 		;---------------------------------------
   334                              <1> 		; 現在値の出力を取得
   335                              <1> 		;---------------------------------------
   336 00000130 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   337 00000132 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   338 00000134 08E0                <1> 		or		al, ah							; AL |= AH;
   339                              <1> 
   340                              <1> 		;---------------------------------------
   341                              <1> 		; 新しい値を出力
   342                              <1> 		;---------------------------------------
   343 00000136 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   344                              <1> 
   345                              <1> 		;---------------------------------------
   346                              <1> 		; 【レジスタの復帰】
   347                              <1> 		;---------------------------------------
   348 00000138 5F                  <1> 		pop		edi
   349 00000139 5B                  <1> 		pop		ebx
   350 0000013A 58                  <1> 		pop		eax
   351                              <1> 
   352                              <1> 		;---------------------------------------
   353                              <1> 		; 【スタックフレームの破棄】
   354                              <1> 		;---------------------------------------
   355 0000013B 89EC                <1> 		mov		esp, ebp
   356 0000013D 5D                  <1> 		pop		ebp
   357                              <1> 
   358 0000013E C3                  <1> 		ret
    66                                  %include	"../modules/protect/draw_char.s"
    67                              <1> ;************************************************************************
    68                              <1> ;	文字の表示
    69                              <1> ;------------------------------------------------------------------------
    70                              <1> ;	グラフィックスモードでテキストを表示
    71                              <1> ;========================================================================
    72                              <1> ;■書式		: void draw_char(col, row, color, ch);
    73                              <1> ;
    74                              <1> ;■引数
    75                              <1> ;	col		: 列（0～79）
    76                              <1> ;	row		: 行（0～29）
    77                              <1> ;	color	: 描画色
    78                              <1> ;	ch		: 文字
    79                              <1> ;
    80                              <1> ;■戻り値	: 無し
    81                              <1> ;************************************************************************
    82                              <1> draw_char:
    83                              <1> 		;---------------------------------------
    84                              <1> 		; 【スタックフレームの構築】
    85                              <1> 		;---------------------------------------
    86                              <1> 												; ------|--------
    87                              <1> 												; EBP+20| 文字
    88                              <1> 												; EBP+16| 色
    89                              <1> 												; EBP+12| Y（行）
    90                              <1> 												; EBP+ 8| X（列）
    91                              <1> 												; ------+----------------
    92 0000013F 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    93 00000140 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    94                              <1> 												; ------+----------------
    95                              <1> 
    96                              <1> 		;---------------------------------------
    97                              <1> 		; 【レジスタの保存】
    98                              <1> 		;---------------------------------------
    99 00000142 50                  <1> 		push	eax
   100 00000143 53                  <1> 		push	ebx
   101 00000144 51                  <1> 		push	ecx
   102 00000145 52                  <1> 		push	edx
   103 00000146 56                  <1> 		push	esi
   104 00000147 57                  <1> 		push	edi
   105                              <1> 
   106                              <1> 		;---------------------------------------
   107                              <1> 		; テストアンドセット
   108                              <1> 		;---------------------------------------
   109                              <1> %ifdef	USE_TEST_AND_SET
   110                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   111                              <1> %endif
   112                              <1> 
   113                              <1> 		;---------------------------------------
   114                              <1> 		; コピー元フォントアドレスを設定
   115                              <1> 		;---------------------------------------
   116 00000148 0FB67514            <1> 		movzx	esi, byte [ebp +20]				; CL  = 文字コード;
   117 0000014C C1E604              <1> 		shl		esi, 4							; CL *= 16; // 1文字16バイト
   118 0000014F 0335[84000000]      <1> 		add		esi, [FONT_ADR]					; ESI = フォントアドレス;
   119                              <1> 
   120                              <1> 		;---------------------------------------
   121                              <1> 		; コピー先アドレスを取得
   122                              <1> 		; Adr = 0xA0000 + (640 / 8 * 16) * y + x
   123                              <1> 		;---------------------------------------
   124 00000155 8B7D0C              <1> 		mov		edi, [ebp +12]					; Y（行）
   125 00000158 C1E708              <1> 		shl		edi, 8							; EDI = Y * 256;
   126 0000015B 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA0000]	; EDI = Y *   4 + Y;
   127 00000162 037D08              <1> 		add		edi, [ebp + 8]					; X（列）
   128                              <1> 
   129                              <1> 		;---------------------------------------
   130                              <1> 		; 1文字分のフォントを出力
   131                              <1> 		;---------------------------------------
   132 00000165 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
   133                              <1> 
   134 00000169 6A03E81CFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
   134 00000172 C404                <1>
   135 00000174 6A08E82AFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
   135 0000017D C404                <1>
   136 0000017F 536A085756E835FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
   136 00000188 FF6683C410          <1>
   137                              <1> 
   138 0000018D 6A02E8F8FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
   138 00000196 C404                <1>
   139 00000198 6A04E806FFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
   139 000001A1 C404                <1>
   140 000001A3 536A045756E811FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
   140 000001AC FF6683C410          <1>
   141                              <1> 
   142 000001B1 6A01E8D4FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
   142 000001BA C404                <1>
   143 000001BC 6A02E8E2FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
   143 000001C5 C404                <1>
   144 000001C7 536A025756E8EDFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
   144 000001D0 FF6683C410          <1>
   145                              <1> 
   146 000001D5 6A00E8B0FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
   146 000001DE C404                <1>
   147 000001E0 6A01E8BEFEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
   147 000001E9 C404                <1>
   148 000001EB 536A015756E8C9FEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
   148 000001F4 FF6683C410          <1>
   149                              <1> 
   150                              <1> %ifdef	USE_TEST_AND_SET
   151                              <1> 		;---------------------------------------
   152                              <1> 		; テストアンドセット
   153                              <1> 		;---------------------------------------
   154                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   155                              <1> %endif
   156                              <1> 
   157                              <1> 		;---------------------------------------
   158                              <1> 		; 【レジスタの復帰】
   159                              <1> 		;---------------------------------------
   160 000001F9 5F                  <1> 		pop		edi
   161 000001FA 5E                  <1> 		pop		esi
   162 000001FB 5A                  <1> 		pop		edx
   163 000001FC 59                  <1> 		pop		ecx
   164 000001FD 5B                  <1> 		pop		ebx
   165 000001FE 58                  <1> 		pop		eax
   166                              <1> 
   167                              <1> 		;---------------------------------------
   168                              <1> 		; 【スタックフレームの破棄】
   169                              <1> 		;---------------------------------------
   170 000001FF 89EC                <1> 		mov		esp, ebp
   171 00000201 5D                  <1> 		pop		ebp
   172                              <1> 
   173 00000202 C3                  <1> 		ret
   174                              <1> 
   175                              <1> %ifdef USE_TEST_AND_SET
   176                              <1> ALIGN 4, db 0
   177                              <1> IN_USE:	dd	0
   178                              <1> %endif
   179                              <1> 
    67                                  %include	"../modules/protect/draw_font.s"
    68                              <1> ;************************************************************************
    69                              <1> ;	フォント一覧を表示
    70                              <1> ;========================================================================
    71                              <1> ;■書式		: void draw_font(col, row);
    72                              <1> ;
    73                              <1> ;■引数
    74                              <1> ;	col		: 列
    75                              <1> ;	row		: 行
    76                              <1> ;
    77                              <1> ;■戻り値	: 無し
    78                              <1> ;************************************************************************
    79                              <1> draw_font:
    80                              <1> 		;---------------------------------------
    81                              <1> 		; 【スタックフレームの構築】
    82                              <1> 		;---------------------------------------
    83                              <1> 												; ------|--------
    84                              <1> 												; EBP+12| Y（行）
    85                              <1> 												; EBP+ 8| X（列）
    86                              <1> 												; ---------------
    87 00000203 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    88 00000204 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    89                              <1> 												; ---------------
    90                              <1> 
    91                              <1> 		;---------------------------------------
    92                              <1> 		; 【レジスタの保存】
    93                              <1> 		;---------------------------------------
    94 00000206 50                  <1> 		push	eax
    95 00000207 53                  <1> 		push	ebx
    96 00000208 51                  <1> 		push	ecx
    97 00000209 52                  <1> 		push	edx
    98 0000020A 56                  <1> 		push	esi
    99 0000020B 57                  <1> 		push	edi
   100                              <1> 
   101                              <1> 		;---------------------------------------
   102                              <1> 		; 表示位置
   103                              <1> 		;---------------------------------------
   104 0000020C 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   105 0000020F 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   106                              <1> 
   107                              <1> 		;---------------------------------------
   108                              <1> 		; フォント一覧を表示
   109                              <1> 		;---------------------------------------
   110 00000212 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   111 00000217 81F900010000        <1> .10L:	cmp		ecx, 256						;      ECX < 256;
   112 0000021D 731F                <1> 		jae		.10E							; 
   113                              <1> 												;      ECX++)
   114                              <1> 												; {
   115                              <1> 												;   // 桁位置の計算
   116 0000021F 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   117 00000221 83E00F              <1> 		and		eax, 0x0F						;   EAX &= 0x0F
   118 00000224 01F0                <1> 		add		eax, esi						;   EAX += X;
   119                              <1> 												;   
   120                              <1> 												;   // 行位置の計算
   121 00000226 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   122 00000228 C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
   123 0000022B 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   124                              <1> 
   125 0000022D 516A075350E808FFFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
   125 00000236 FF6683C410          <1>
   126                              <1> 
   127 0000023B 41                  <1> 		inc		ecx								;   // for (... ECX++)
   128 0000023C EBD9                <1> 		jmp		.10L							; 
   129                              <1> .10E:											; }
   130                              <1> 
   131                              <1> 		;---------------------------------------
   132                              <1> 		; 【レジスタの復帰】
   133                              <1> 		;---------------------------------------
   134 0000023E 5F                  <1> 		pop		edi
   135 0000023F 5E                  <1> 		pop		esi
   136 00000240 5A                  <1> 		pop		edx
   137 00000241 59                  <1> 		pop		ecx
   138 00000242 5B                  <1> 		pop		ebx
   139 00000243 58                  <1> 		pop		eax
   140                              <1> 
   141                              <1> 		;---------------------------------------
   142                              <1> 		; 【スタックフレームの破棄】
   143                              <1> 		;---------------------------------------
   144 00000244 89EC                <1> 		mov		esp, ebp
   145 00000246 5D                  <1> 		pop		ebp
   146                              <1> 
   147 00000247 C3                  <1> 		ret
   148                              <1> 
    68                                  %include	"../modules/protect/draw_str.s"
    69                              <1> ;************************************************************************
    70                              <1> ;	文字列の表示
    71                              <1> ;========================================================================
    72                              <1> ;■書式		: void draw_str(col, row, color, p);
    73                              <1> ;
    74                              <1> ;■引数
    75                              <1> ;	col		: 列
    76                              <1> ;	row		: 行
    77                              <1> ;	color	: 描画色
    78                              <1> ;	p		: 文字列のアドレス
    79                              <1> ;
    80                              <1> ;■戻り値	: 無し
    81                              <1> ;************************************************************************
    82                              <1> draw_str:
    83                              <1> 		;---------------------------------------
    84                              <1> 		; 【スタックフレームの構築】
    85                              <1> 		;---------------------------------------
    86                              <1> 												; ------|--------
    87                              <1> 												; EBP+20| *p（文字列のアドレス）
    88                              <1> 												; EBP+16| color（色）
    89                              <1> 												; EBP+12| row（行）
    90                              <1> 												; EBP+ 8| col（列）
    91                              <1> 												; ---------------
    92 00000248 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    93 00000249 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    94                              <1> 												; ---------------
    95                              <1> 
    96                              <1> 		;---------------------------------------
    97                              <1> 		; 【レジスタの保存】
    98                              <1> 		;---------------------------------------
    99 0000024B 50                  <1> 		push	eax
   100 0000024C 53                  <1> 		push	ebx
   101 0000024D 51                  <1> 		push	ecx
   102 0000024E 52                  <1> 		push	edx
   103 0000024F 56                  <1> 		push	esi
   104                              <1> 
   105                              <1> 		;---------------------------------------
   106                              <1> 		; 文字列の表示
   107                              <1> 		;---------------------------------------
   108 00000250 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
   109 00000253 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
   110 00000256 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
   111 0000025A 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
   112                              <1> 
   113 0000025D FC                  <1> 		cld										; DF = 0; // アドレス加算
   114                              <1> .10L:											; do
   115                              <1> 												; {
   116 0000025E AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
   117 0000025F 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   118 00000261 7425                <1> 		je		.10E							;     break;
   119                              <1> 
   120                              <1> 		;---------------------------------------
   121                              <1> 		; 1文字表示
   122                              <1> 		;---------------------------------------
   123                              <1> %ifdef	USE_SYSTEM_CALL
   124                              <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
   125                              <1> %else
   126 00000263 50535251E8D3FEFFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
   126 0000026C 6683C410            <1>
   127                              <1> %endif
   128                              <1> 
   129                              <1> 		; 次の文字の位置を調整
   130 00000270 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
   131 00000271 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
   132 00000274 7C10                <1> 		jl		.12E							;   {
   133 00000276 B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
   134 0000027B 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
   135 0000027C 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
   136 0000027F 7C05                <1> 		jl		.12E							;     {
   137 00000281 BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
   138                              <1> 												;     }
   139                              <1> .12E:											;   }
   140 00000286 EBD6                <1> 		jmp		.10L							;   
   141                              <1> .10E:											; } while (1);
   142                              <1> 
   143                              <1> 		;---------------------------------------
   144                              <1> 		; 【レジスタの復帰】
   145                              <1> 		;---------------------------------------
   146 00000288 5E                  <1> 		pop		esi
   147 00000289 5A                  <1> 		pop		edx
   148 0000028A 59                  <1> 		pop		ecx
   149 0000028B 5B                  <1> 		pop		ebx
   150 0000028C 58                  <1> 		pop		eax
   151                              <1> 
   152                              <1> 		;---------------------------------------
   153                              <1> 		; 【スタックフレームの破棄】
   154                              <1> 		;---------------------------------------
   155 0000028D 89EC                <1> 		mov		esp, ebp
   156 0000028F 5D                  <1> 		pop		ebp
   157                              <1> 
   158 00000290 C3                  <1> 		ret
   159                              <1> 
    69                                  %include	"../modules/protect/draw_color_bar.s"
    70                              <1> ;************************************************************************
    71                              <1> ;	カラーバーの表示
    72                              <1> ;========================================================================
    73                              <1> ;■書式		: void draw_color_bar(col, row);
    74                              <1> ;
    75                              <1> ;■引数
    76                              <1> ;	col		: 列
    77                              <1> ;	row		: 行
    78                              <1> ;
    79                              <1> ;■戻り値	: 無し
    80                              <1> ;************************************************************************
    81                              <1> draw_color_bar:
    82                              <1> 		;---------------------------------------
    83                              <1> 		; 【スタックフレームの構築】
    84                              <1> 		;---------------------------------------
    85                              <1> 												; ------|--------
    86                              <1> 												; EBP+ 8| X（列）
    87                              <1> 												; EBP+12| Y（行）
    88                              <1> 												; ---------------
    89 00000291 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    90 00000292 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    91                              <1> 												; ---------------
    92                              <1> 		;---------------------------------------
    93                              <1> 		; 【レジスタの保存】
    94                              <1> 		;---------------------------------------
    95 00000294 50                  <1> 		push	eax
    96 00000295 53                  <1> 		push	ebx
    97 00000296 51                  <1> 		push	ecx
    98 00000297 52                  <1> 		push	edx
    99 00000298 56                  <1> 		push	esi
   100 00000299 57                  <1> 		push	edi
   101                              <1> 
   102                              <1> 		;---------------------------------------
   103                              <1> 		; 表示位置
   104                              <1> 		;---------------------------------------
   105 0000029A 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   106 0000029D 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   107                              <1> 
   108                              <1> 		;---------------------------------------
   109                              <1> 		; カラーバーを表示
   110                              <1> 		;---------------------------------------
   111 000002A0 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   112 000002A5 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
   113 000002A8 732E                <1> 		jae		.10E							; 
   114                              <1> 												;      ECX++)
   115                              <1> 												; {
   116                              <1> 												;   // 桁位置の計算
   117 000002AA 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   118 000002AC 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
   119 000002AF C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
   120 000002B2 01F0                <1> 		add		eax, esi						;   EAX += X;
   121                              <1> 												;   
   122                              <1> 												;   // 行位置の計算
   123 000002B4 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   124 000002B6 D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
   125 000002B8 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   126                              <1> 												;   
   127                              <1> 												;   // 表示色の取得
   128 000002BA 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
   129 000002BC D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
   130 000002BE 8B92[EB020000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
   131                              <1> 
   132 000002C4 68[E2020000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
   132 000002CC E877FFFFFF6683C410  <1>
   133                              <1> 
   134 000002D5 41                  <1> 		inc		ecx								;   // for (... ECX++)
   135 000002D6 EBCD                <1> 		jmp		.10L							; 
   136                              <1> .10E:											; }
   137                              <1> 
   138                              <1> 		;---------------------------------------
   139                              <1> 		; 【レジスタの復帰】
   140                              <1> 		;---------------------------------------
   141 000002D8 5F                  <1> 		pop		edi
   142 000002D9 5E                  <1> 		pop		esi
   143 000002DA 5A                  <1> 		pop		edx
   144 000002DB 59                  <1> 		pop		ecx
   145 000002DC 5B                  <1> 		pop		ebx
   146 000002DD 58                  <1> 		pop		eax
   147                              <1> 
   148                              <1> 		;---------------------------------------
   149                              <1> 		; 【スタックフレームの破棄】
   150                              <1> 		;---------------------------------------
   151 000002DE 89EC                <1> 		mov		esp, ebp
   152 000002E0 5D                  <1> 		pop		ebp
   153                              <1> 
   154 000002E1 C3                  <1> 		ret
   155                              <1> 
   156 000002E2 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
   157                              <1> 
   158 000002EB 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
   159 000002EF 00010009            <1> 		dw	0x0100, 0x0900
   160 000002F3 0002000A            <1> 		dw	0x0200, 0x0A00
   161 000002F7 0003000B            <1> 		dw	0x0300, 0x0B00
   162 000002FB 0004000C            <1> 		dw	0x0400, 0x0C00
   163 000002FF 0005000D            <1> 		dw	0x0500, 0x0D00
   164 00000303 0006000E            <1> 		dw	0x0600, 0x0E00
   165 00000307 0007000F            <1> 		dw	0x0700, 0x0F00
   166                              <1> 
    70                                  %include	"../modules/protect/draw_pixel.s"
    71                              <1> ;************************************************************************
    72                              <1> ;	ピクセルの描画
    73                              <1> ;========================================================================
    74                              <1> ;■書式		: void draw_pixel(X, Y, color);
    75                              <1> ;
    76                              <1> ;■引数
    77                              <1> ;	X		: X座標
    78                              <1> ;	Y		: Y座標
    79                              <1> ;	color	: 描画色
    80                              <1> ;
    81                              <1> ;■戻り値	: 無し
    82                              <1> ;************************************************************************
    83                              <1> draw_pixel:
    84                              <1> 		;---------------------------------------
    85                              <1> 		; 【スタックフレームの構築】
    86                              <1> 		;---------------------------------------
    87                              <1> 												; ------|--------
    88                              <1> 												; EBP+16| 色
    89                              <1> 												; EBP+12| Y
    90                              <1> 												; EBP+ 8| X
    91                              <1> 												; ------|--------
    92 0000030B 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    93 0000030C 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    94                              <1> 												; ------+--------
    95                              <1> 		;---------------------------------------
    96                              <1> 		; 【レジスタの保存】
    97                              <1> 		;---------------------------------------
    98 0000030E 50                  <1> 		push	eax
    99 0000030F 53                  <1> 		push	ebx
   100 00000310 51                  <1> 		push	ecx
   101 00000311 57                  <1> 		push	edi
   102                              <1> 
   103                              <1> 		;---------------------------------------
   104                              <1> 		; Y座標を80倍する（640/8）
   105                              <1> 		;---------------------------------------
   106 00000312 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI  = Y座標
   107 00000315 C1E704              <1> 		shl		edi, 4							; EDI *= 16;
   108 00000318 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA_0000]	; EDI  = 0xA00000[EDI * 4 + EDI];
   109                              <1> 
   110                              <1> 		;---------------------------------------
   111                              <1> 		; X座標を1/8して加算
   112                              <1> 		;---------------------------------------
   113 0000031F 8B5D08              <1> 		mov		ebx, [ebp + 8]					; EBX  = X座標;
   114 00000322 89D9                <1> 		mov		ecx, ebx						; ECX  = X座標;（一時保存）
   115 00000324 C1EB03              <1> 		shr		ebx, 3							; EBX /= 8;
   116 00000327 01DF                <1> 		add		edi, ebx						; EDI += EBX;
   117                              <1> 
   118                              <1> 		;---------------------------------------
   119                              <1> 		; X座標を8で割った余りからビット位置を計算
   120                              <1> 		; (0=0x80, 1=0x40,... 7=0x01)
   121                              <1> 		;---------------------------------------
   122 00000329 83E107              <1> 		and		ecx, 0x07						; ECX = X & 0x07;
   123 0000032C BB80000000          <1> 		mov		ebx, 0x80						; EBX = 0x80;
   124 00000331 D3EB                <1> 		shr		ebx, cl							; EBX >>= ECX;
   125                              <1> 
   126                              <1> 		;---------------------------------------
   127                              <1> 		; 色指定
   128                              <1> 		;---------------------------------------
   129 00000333 8B4D10              <1> 		mov		ecx, [ebp +16]					; // 表示色
   130                              <1> 
   131                              <1> %ifdef	USE_TEST_AND_SET
   132                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   133                              <1> %endif
   134                              <1> 
   135                              <1> 		;---------------------------------------
   136                              <1> 		; プレーン毎に出力
   137                              <1> 		;---------------------------------------
   138 00000336 6A03E84FFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 輝度(I)プレーンを選択
   138 0000033F C404                <1>
   139 00000341 6A08E85DFDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 輝度(I)プレーンを選択
   139 0000034A C404                <1>
   140 0000034C 516A085753E8BBFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
   140 00000355 FF6683C410          <1>
   141                              <1> 
   142 0000035A 6A02E82BFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 赤(R)プレーンを選択
   142 00000363 C404                <1>
   143 00000365 6A04E839FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 赤(R)プレーンを選択
   143 0000036E C404                <1>
   144 00000370 516A045753E897FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
   144 00000379 FF6683C410          <1>
   145                              <1> 
   146 0000037E 6A01E807FDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 緑(G)プレーンを選択
   146 00000387 C404                <1>
   147 00000389 6A02E815FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 緑(G)プレーンを選択
   147 00000392 C404                <1>
   148 00000394 516A025753E873FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
   148 0000039D FF6683C410          <1>
   149                              <1> 
   150 000003A2 6A00E8E3FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 青(B)プレーンを選択
   150 000003AB C404                <1>
   151 000003AD 6A01E8F1FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 青(B)プレーンを選択
   151 000003B6 C404                <1>
   152 000003B8 516A015753E84FFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
   152 000003C1 FF6683C410          <1>
   153                              <1> 
   154                              <1> 
   155                              <1> %ifdef	USE_TEST_AND_SET
   156                              <1> 		;---------------------------------------
   157                              <1> 		; テストアンドセット
   158                              <1> 		;---------------------------------------
   159                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   160                              <1> %endif
   161                              <1> 
   162                              <1> 		;---------------------------------------
   163                              <1> 		; 【レジスタの復帰】
   164                              <1> 		;---------------------------------------
   165 000003C6 5F                  <1> 		pop		edi
   166 000003C7 59                  <1> 		pop		ecx
   167 000003C8 5B                  <1> 		pop		ebx
   168 000003C9 58                  <1> 		pop		eax
   169                              <1> 
   170                              <1> 		;---------------------------------------
   171                              <1> 		; 【スタックフレームの破棄】
   172                              <1> 		;---------------------------------------
   173 000003CA 89EC                <1> 		mov		esp, ebp
   174 000003CC 5D                  <1> 		pop		ebp
   175                              <1> 
   176 000003CD C3                  <1> 		ret
   177                              <1> 
    71                                  %include	"../modules/protect/draw_line.s"
    72                              <1> ;************************************************************************
    73                              <1> ;	直線の描画
    74                              <1> ;========================================================================
    75                              <1> ;■書式		: void draw_line(X0, Y0, X1, Y1, color);
    76                              <1> ;
    77                              <1> ;■引数
    78                              <1> ;	X0		: 始点のX座標
    79                              <1> ;	Y0		: 始点のY座標
    80                              <1> ;	X1		: 終点のX座標
    81                              <1> ;	Y1		: 終点のY座標
    82                              <1> ;	color	: 描画色
    83                              <1> ;
    84                              <1> ;■戻り値	: 無し
    85                              <1> ;************************************************************************
    86                              <1> draw_line:
    87                              <1> 		;---------------------------------------
    88                              <1> 		; 【スタックフレームの構築】
    89                              <1> 		;---------------------------------------
    90                              <1> 												; ---------------
    91                              <1> 												;    +24| 色
    92                              <1> 												;    +20| Y1
    93                              <1> 												;    +16| X1
    94                              <1> 												;    +12| Y0
    95                              <1> 												;    + 8| X0
    96                              <1> 												; ---------------
    97 000003CE 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    98 000003CF 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    99                              <1> 												; ---------------
   100 000003D1 6A00                <1> 		push	dword 0							;    - 4| sum   = 0; // 相対軸の積算値
   101 000003D3 6A00                <1> 		push	dword 0							;    - 8| x0    = 0; // X座標
   102 000003D5 6A00                <1> 		push	dword 0							;    -12| dx    = 0; // X増分
   103 000003D7 6A00                <1> 		push	dword 0							;    -16| inc_x = 0; // X座標増分(1 or -1)
   104 000003D9 6A00                <1> 		push	dword 0							;    -20| y0    = 0; // Y座標
   105 000003DB 6A00                <1> 		push	dword 0							;    -24| dy    = 0; // Y増分
   106 000003DD 6A00                <1> 		push	dword 0							;    -28| inc_y = 0; // Y座標増分(1 or -1)
   107                              <1> 												; ------|--------
   108                              <1> 
   109                              <1> 		;---------------------------------------
   110                              <1> 		; 【レジスタの保存】
   111                              <1> 		;---------------------------------------
   112 000003DF 50                  <1> 		push	eax
   113 000003E0 53                  <1> 		push	ebx
   114 000003E1 51                  <1> 		push	ecx
   115 000003E2 52                  <1> 		push	edx
   116 000003E3 56                  <1> 		push	esi
   117 000003E4 57                  <1> 		push	edi
   118                              <1> 
   119                              <1> 		;---------------------------------------
   120                              <1> 		; 幅を計算（X軸）
   121                              <1> 		;---------------------------------------
   122 000003E5 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   123 000003E8 8B5D10              <1> 		mov		ebx, [ebp +16]					; EBX = X1;
   124 000003EB 29C3                <1> 		sub		ebx, eax						; EBX = X1 - X0; // 幅
   125 000003ED 7D09                <1> 		jge		.10F							; if (幅 < 0)
   126                              <1> 												; {
   127 000003EF F7DB                <1> 		neg		ebx								;   幅   *= -1;
   128 000003F1 BEFFFFFFFF          <1> 		mov		esi, -1							;   // X座標の増分
   129 000003F6 EB05                <1> 		jmp		.10E							; }
   130                              <1> .10F:											; else
   131                              <1> 												; {
   132 000003F8 BE01000000          <1> 		mov		esi, 1							;   // X座標の増分
   133                              <1> .10E:											; }
   134                              <1> 
   135                              <1> 		;---------------------------------------
   136                              <1> 		; 高さを計算（Y軸）
   137                              <1> 		;---------------------------------------
   138 000003FD 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX = Y0
   139 00000400 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1
   140 00000403 29CA                <1> 		sub		edx, ecx						; EDX = Y1 - Y0; // 高さ
   141 00000405 7D09                <1> 		jge		.20F							; if (高さ < 0)
   142                              <1> 												; {
   143 00000407 F7DA                <1> 		neg		edx								;   高さ *= -1;
   144 00000409 BFFFFFFFFF          <1> 		mov		edi, -1							;   // Y座標の増分
   145 0000040E EB05                <1> 		jmp		.20E							; }
   146                              <1> .20F:											; else
   147                              <1> 												; {
   148 00000410 BF01000000          <1> 		mov		edi, 1							;   // Y座標の増分
   149                              <1> .20E:											; }
   150                              <1> 
   151                              <1> 		;---------------------------------------
   152                              <1> 		; X軸
   153                              <1> 		;---------------------------------------
   154 00000415 8945F8              <1> 		mov		[ebp - 8], eax					;   // X軸:開始座標
   155 00000418 895DF4              <1> 		mov		[ebp -12], ebx					;   // X軸:描画幅
   156 0000041B 8975F0              <1> 		mov		[ebp -16], esi					;   // X軸:増分(基準軸：1 or -1)
   157                              <1> 
   158                              <1> 		;---------------------------------------
   159                              <1> 		; Y軸
   160                              <1> 		;---------------------------------------
   161 0000041E 894DEC              <1> 		mov		[ebp -20], ecx					;   // Y軸:開始座標
   162 00000421 8955E8              <1> 		mov		[ebp -24], edx					;   // Y軸:描画幅
   163 00000424 897DE4              <1> 		mov		[ebp -28], edi					;   // Y軸:増分(基準軸：1 or -1)
   164                              <1> 
   165                              <1> 		;---------------------------------------
   166                              <1> 		; 基準軸を決める
   167                              <1> 		;---------------------------------------
   168 00000427 39D3                <1> 		cmp		ebx, edx						; if (幅 <= 高さ)
   169 00000429 7F08                <1> 		jg		.22F							; {
   170                              <1> 												;   
   171 0000042B 8D75EC              <1> 		lea		esi, [ebp -20]					;   // Y軸が基準軸
   172 0000042E 8D7DF8              <1> 		lea		edi, [ebp - 8]					;   // X軸が相対軸
   173                              <1> 												;   
   174 00000431 EB06                <1> 		jmp		.22E							; }
   175                              <1> .22F:											; else
   176                              <1> 												; {
   177 00000433 8D75F8              <1> 		lea		esi, [ebp - 8]					;   // X軸が基準軸
   178 00000436 8D7DEC              <1> 		lea		edi, [ebp -20]					;   // Y軸が相対軸
   179                              <1> .22E:											; }
   180                              <1> 
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 繰り返し回数(基準軸のドット数)
   183                              <1> 		;---------------------------------------
   184 00000439 8B4EFC              <1> 		mov		ecx, [esi - 4]					; ECX = 基準軸描画幅;
   185 0000043C 83F900              <1> 		cmp		ecx, 0							; if (0 == ECX)
   186 0000043F 7505                <1> 		jnz		.30E							; {
   187 00000441 B901000000          <1> 		mov		ecx, 1							;   ECX = 1;
   188                              <1> .30E:											; }
   189                              <1> 
   190                              <1> 		;---------------------------------------
   191                              <1> 		; 線を描画
   192                              <1> 		;---------------------------------------
   193                              <1> .50L:											; do
   194                              <1> 												; {
   195                              <1> %ifdef	USE_SYSTEM_CALL
   196                              <1> 		mov		eax, ecx						;   // 繰り返し回数を保存
   197                              <1> 
   198                              <1> 		mov		ebx, [ebp +24]					;   EBX = 表示色;
   199                              <1> 		mov		ecx, [ebp - 8]					;   ECX = X座標;
   200                              <1> 		mov		edx, [ebp -20]					;   EDX = Y座標;
   201                              <1> 		int		0x82							;   sys_call(1, X, Y, 色, 文字); BX(C), CX(X), DX(Y)
   202                              <1> 
   203                              <1> 		mov		ecx, eax
   204                              <1> %else
   205 00000446 FF7518FF75ECFF75F8- <1> 		cdecl	draw_pixel, dword [ebp - 8], 							dword [ebp -20], 							dword [ebp +24]		;   // 点の描画
   205 0000044F E8B7FEFFFF6683C40C  <1>
   208                              <1> %endif
   209                              <1> 												;   // 基準軸を更新(1ドット分)
   210 00000458 8B46F8              <1> 		mov		eax, [esi - 8]					;   EAX = 基準軸増分(1 or -1);
   211 0000045B 0106                <1> 		add		[esi - 0], eax					;   
   212                              <1> 
   213                              <1> 												;   // 相対軸を更新
   214 0000045D 8B45FC              <1> 		mov		eax, [ebp - 4]					;   EAX  = sum; // 相対軸の積算値;
   215 00000460 0347FC              <1> 		add		eax, [edi - 4]					;   EAX += dy;  // 増分(相対軸の描画幅)
   216 00000463 8B5EFC              <1> 		mov		ebx, [esi - 4]					;   EBX  = dx;  // 増分(基準軸の描画幅)
   217                              <1> 
   218 00000466 39D8                <1> 		cmp		eax, ebx						;   if (積算値 <= 相対軸の増分)
   219 00000468 7C07                <1> 		jl		.52E							;   {
   220 0000046A 29D8                <1> 		sub		eax, ebx						;     EAX -= EBX; // 積算値から相対軸の増分を減算
   221                              <1> 												;     
   222                              <1> 												;     // 相対軸の座標を更新(1ドット分)
   223 0000046C 8B5FF8              <1> 		mov		ebx, [edi - 8]					;     EBX =  相対軸増分;
   224 0000046F 011F                <1> 		add		[edi - 0], ebx					;     
   225                              <1> .52E:											;   }
   226 00000471 8945FC              <1> 		mov		[ebp - 4], eax					;   // 積算値を更新
   227                              <1> 												;   
   228 00000474 E2D0                <1> 		loop	.50L							;   
   229                              <1> .50E:											; } while (ループ回数--);
   230                              <1> 
   231                              <1> 		;---------------------------------------
   232                              <1> 		; 【レジスタの復帰】
   233                              <1> 		;---------------------------------------
   234 00000476 5F                  <1> 		pop		edi
   235 00000477 5E                  <1> 		pop		esi
   236 00000478 5A                  <1> 		pop		edx
   237 00000479 59                  <1> 		pop		ecx
   238 0000047A 5B                  <1> 		pop		ebx
   239 0000047B 58                  <1> 		pop		eax
   240                              <1> 
   241                              <1> 		;---------------------------------------
   242                              <1> 		; 【スタックフレームの破棄】
   243                              <1> 		;---------------------------------------
   244 0000047C 89EC                <1> 		mov		esp, ebp
   245 0000047E 5D                  <1> 		pop		ebp
   246                              <1> 
   247 0000047F C3                  <1> 		ret
   248                              <1> 
    72                                  %include	"../modules/protect/draw_rect.s"
    73                              <1> ;************************************************************************
    74                              <1> ;	矩形の描画
    75                              <1> ;========================================================================
    76                              <1> ;■書式		: void draw_rect(X0, Y0, X1, Y1, color);
    77                              <1> ;
    78                              <1> ;■引数
    79                              <1> ;	X0		: 始点のX座標
    80                              <1> ;	Y0		: 始点のY座標
    81                              <1> ;	X1		: 終点のX座標
    82                              <1> ;	Y1		: 終点のY座標
    83                              <1> ;	color	: 描画色
    84                              <1> ;
    85                              <1> ;■戻り値	: 無し
    86                              <1> ;************************************************************************
    87                              <1> draw_rect:
    88                              <1> 		;---------------------------------------
    89                              <1> 		; 【スタックフレームの構築】
    90                              <1> 		;---------------------------------------
    91                              <1> 												; ------|--------
    92                              <1> 												; EBP+24| 色
    93                              <1> 												; EBP+20| Y1
    94                              <1> 												; EBP+16| X1
    95                              <1> 												; EBP+12| Y0
    96                              <1> 												; EBP+ 8| X0
    97                              <1> 												; ---------------
    98 00000480 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    99 00000481 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   100                              <1> 												; ------|--------
   101                              <1> 
   102                              <1> 		;---------------------------------------
   103                              <1> 		; 【レジスタの保存】
   104                              <1> 		;---------------------------------------
   105 00000483 50                  <1> 		push		eax
   106 00000484 53                  <1> 		push		ebx
   107 00000485 51                  <1> 		push		ecx
   108 00000486 52                  <1> 		push		edx
   109 00000487 56                  <1> 		push		esi
   110                              <1> 
   111                              <1> 		;---------------------------------------
   112                              <1> 		; 矩形を描画
   113                              <1> 		;---------------------------------------
   114 00000488 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   115 0000048B 8B5D0C              <1> 		mov		ebx, [ebp +12]					; EBX = Y0;
   116 0000048E 8B4D10              <1> 		mov		ecx, [ebp +16]					; ECX = X1;
   117 00000491 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1;
   118 00000494 8B7518              <1> 		mov		esi, [ebp +24]					; ESI = 色;
   119                              <1> 
   120                              <1> 		;---------------------------------------
   121                              <1> 		; 座標軸の大小を確定
   122                              <1> 		;---------------------------------------
   123 00000497 39C8                <1> 		cmp		eax, ecx						; if (X1 < X0)
   124 00000499 7C01                <1> 		jl		.10E							; {
   125 0000049B 91                  <1> 		xchg	eax, ecx						;   X0とX1を入れ替える;
   126                              <1> .10E:											; }
   127                              <1> 
   128 0000049C 39D3                <1> 		cmp		ebx, edx						; if (Y1 < Y0)
   129 0000049E 7C02                <1> 		jl		.20E							; {
   130 000004A0 87DA                <1> 		xchg	ebx, edx						;   Y0とY1を入れ替える;
   131                              <1> .20E:											; }
   132                              <1> 
   133                              <1> 		;---------------------------------------
   134                              <1> 		; 矩形を描画
   135                              <1> 		;---------------------------------------
   136 000004A2 5653515350E822FFFF- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, esi	; 上線
   136 000004AB FF6683C414          <1>
   137 000004B0 5652505350E814FFFF- <1> 		cdecl	draw_line, eax, ebx, eax, edx, esi	; 左線
   137 000004B9 FF6683C414          <1>
   138                              <1> 
   139 000004BE 4A                  <1> 		dec		edx									; EDX--; // 下線は1ドット上げる
   140 000004BF 5652515250E805FFFF- <1> 		cdecl	draw_line, eax, edx, ecx, edx, esi	; 下線
   140 000004C8 FF6683C414          <1>
   141 000004CD 42                  <1> 		inc		edx
   142                              <1> 
   143 000004CE 49                  <1> 		dec		ecx									; ECX--; // 右線は1ドット左に移動
   144 000004CF 5652515351E8F5FEFF- <1> 		cdecl	draw_line, ecx, ebx, ecx, edx, esi	; 右線
   144 000004D8 FF6683C414          <1>
   145                              <1> 
   146                              <1> 		;---------------------------------------
   147                              <1> 		; 【レジスタの復帰】
   148                              <1> 		;---------------------------------------
   149 000004DD 5E                  <1> 		pop		esi
   150 000004DE 5A                  <1> 		pop		edx
   151 000004DF 59                  <1> 		pop		ecx
   152 000004E0 5B                  <1> 		pop		ebx
   153 000004E1 58                  <1> 		pop		eax
   154                              <1> 
   155                              <1> 		;---------------------------------------
   156                              <1> 		; 【スタックフレームの破棄】
   157                              <1> 		;---------------------------------------
   158 000004E2 89EC                <1> 		mov		esp, ebp
   159 000004E4 5D                  <1> 		pop		ebp
   160                              <1> 
   161 000004E5 C3                  <1> 		ret
    73                                  %include	"../modules/protect/itoa.s"
    74                              <1> ;************************************************************************
    75                              <1> ;	数値を文字に変換
    76                              <1> ;========================================================================
    77                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
    78                              <1> ;
    79                              <1> ;■引数
    80                              <1> ;	num		: 変換する数値
    81                              <1> ;	buff	: 保存先バッファアドレス
    82                              <1> ;	size	: 保存先バッファサイズ
    83                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
    84                              <1> ;	flags	: フラグ
    85                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
    86                              <1> ;			:      : 0=空白を' '（スペース）で埋める
    87                              <1> ;			:   B1 : 1=＋/-符号を表示する
    88                              <1> ;			:      : 0=＋/-符号を表示しない
    89                              <1> ;			:   B0 : 1=符号付き正数として扱う
    90                              <1> ;			:      : 0=符号無し正数として扱う
    91                              <1> ;
    92                              <1> ;■戻り値	: 無し
    93                              <1> ;************************************************************************
    94                              <1> itoa:
    95                              <1> 		;---------------------------------------
    96                              <1> 		; 【スタックフレームの構築】
    97                              <1> 		;---------------------------------------
    98                              <1> 												; ------|--------
    99                              <1> 												;    +24| フラグ
   100                              <1> 												;    +20| 基数
   101                              <1> 												;    +16| バッファサイズ
   102                              <1> 												;    +12| バッファアドレス
   103                              <1> 												;    + 8| 数値
   104                              <1> 												; ------|--------
   105                              <1> 												;    + 4| EIP（戻り番地）
   106 000004E6 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   107 000004E7 89E5                <1> 		mov		ebp, esp						; ------+--------
   108                              <1> 
   109                              <1> 		;---------------------------------------
   110                              <1> 		; 【レジスタの保存】
   111                              <1> 		;---------------------------------------
   112 000004E9 50                  <1> 		push	eax
   113 000004EA 53                  <1> 		push	ebx
   114 000004EB 51                  <1> 		push	ecx
   115 000004EC 52                  <1> 		push	edx
   116 000004ED 56                  <1> 		push	esi
   117 000004EE 57                  <1> 		push	edi
   118                              <1> 
   119                              <1> 		;---------------------------------------
   120                              <1> 		; 引数を取得
   121                              <1> 		;---------------------------------------
   122 000004EF 8B4508              <1> 		mov		eax, [ebp + 8]					; val  = 数値;
   123 000004F2 8B750C              <1> 		mov		esi, [ebp +12]					; dst  = バッファアドレス;
   124 000004F5 8B4D10              <1> 		mov		ecx, [ebp +16]					; size = 残りバッファサイズ;
   125                              <1> 
   126 000004F8 89F7                <1> 		mov		edi, esi						; // バッファの最後尾
   127 000004FA 01CF                <1> 		add		edi, ecx						; dst  = &dst[size - 1];
   128 000004FC 4F                  <1> 		dec		edi								; 
   129                              <1> 
   130 000004FD 8B5D18              <1> 		mov		ebx, [ebp +24]					; flags = オプション;
   131                              <1> 
   132                              <1> 		;---------------------------------------
   133                              <1> 		; 符号付き判定
   134                              <1> 		;---------------------------------------
   135 00000500 F7C301000000        <1> 		test	ebx, 0b0001						; if (flags & 0x01)// 符号付き
   136 00000506 7408                <1> .10Q:	je		.10E							; {
   137 00000508 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   138 0000050B 7D03                <1> .12Q:	jge		.12E							;   {
   139 0000050D 83CB02              <1> 		or		ebx, 0b0010						;     flags |=  2; // 符号表示
   140                              <1> .12E:											;   }
   141                              <1> .10E:											; }
   142                              <1> 
   143                              <1> 		;---------------------------------------
   144                              <1> 		; 符号出力判定
   145                              <1> 		;---------------------------------------
   146 00000510 F7C302000000        <1> 		test	ebx, 0b0010						; if (flags & 0x02)// 符号出力判定
   147 00000516 7410                <1> .20Q:	je		.20E							; {
   148 00000518 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   149 0000051B 7D07                <1> .22Q:	jge		.22F							;   {
   150 0000051D F7D8                <1> 		neg		eax								;     val *= -1;   // 符号反転
   151 0000051F C6062D              <1> 		mov		[esi], byte '-'					;     *dst = '-';  // 符号表示
   152 00000522 EB03                <1> 		jmp		.22E							;   }
   153                              <1> .22F:											;   else
   154                              <1> 												;   {
   155 00000524 C6062B              <1> 		mov		[esi], byte '+'					;     *dst = '+';  // 符号表示
   156                              <1> .22E:											;   }
   157 00000527 49                  <1> 		dec		ecx								;   size--;        // 残りバッファサイズの減算
   158                              <1> .20E:											; }
   159                              <1> 
   160                              <1> 		;---------------------------------------
   161                              <1> 		; ASCII変換
   162                              <1> 		;---------------------------------------
   163 00000528 8B5D14              <1> 		mov		ebx, [ebp +20]					; BX = 基数;
   164                              <1> .30L:											; do
   165                              <1> 												; {
   166 0000052B BA00000000          <1> 		mov		edx, 0							;   
   167 00000530 F7F3                <1> 		div		ebx								;   DX = DX:AX % 基数;
   168                              <1> 												;   AX = DX:AX / 基数;
   169                              <1> 												;   
   170 00000532 89D6                <1> 		mov		esi, edx						;   // テーブル参照
   171 00000534 8A96[5F050000]      <1> 		mov		dl, byte [.ascii + esi]			;   DL = ASCII[DX];
   172                              <1> 												;   
   173 0000053A 8817                <1> 		mov		[edi], dl						;   *dst = DL;
   174 0000053C 4F                  <1> 		dec		edi								;   dst--;
   175                              <1> 												;   
   176 0000053D 83F800              <1> 		cmp		eax, 0							;   
   177 00000540 E0E9                <1> 		loopnz	.30L							; } while (AX);
   178                              <1> .30E:
   179                              <1> 
   180                              <1> 		;---------------------------------------
   181                              <1> 		; 空欄を埋める
   182                              <1> 		;---------------------------------------
   183 00000542 83F900              <1> 		cmp		ecx, 0							; if (size)
   184 00000545 740E                <1> .40Q:	je		.40E							; {
   185 00000547 B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   186 00000549 66837D1804          <1> 		cmp		[ebp +24], word 0b0100			;   if (flags & 0x04)
   187 0000054E 7502                <1> .42Q:	jne		.42E							;   {
   188 00000550 B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   189                              <1> .42E:											;   }
   190 00000552 FD                  <1> 		std										;   // DF = 1（-方向）
   191 00000553 F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   192                              <1> .40E:											; }
   193                              <1> 
   194                              <1> 		;---------------------------------------
   195                              <1> 		; 【レジスタの復帰】
   196                              <1> 		;---------------------------------------
   197 00000555 5F                  <1> 		pop		edi
   198 00000556 5E                  <1> 		pop		esi
   199 00000557 5A                  <1> 		pop		edx
   200 00000558 59                  <1> 		pop		ecx
   201 00000559 5B                  <1> 		pop		ebx
   202 0000055A 58                  <1> 		pop		eax
   203                              <1> 
   204                              <1> 		;---------------------------------------
   205                              <1> 		; 【スタックフレームの破棄】
   206                              <1> 		;---------------------------------------
   207 0000055B 89EC                <1> 		mov		esp, ebp
   208 0000055D 5D                  <1> 		pop		ebp
   209                              <1> 
   210 0000055E C3                  <1> 		ret
   211                              <1> 
   212 0000055F 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   212 00000568 39414243444546      <1>
   213                              <1> 
    74                                  %include	"../modules/protect/rtc.s"
    75                              <1> ;************************************************************************
    76                              <1> ;	RTCから時刻データを取得する
    77                              <1> ;========================================================================
    78                              <1> ;■書式		: DWORD rtc_get_time(dst);
    79                              <1> ;
    80                              <1> ;■引数
    81                              <1> ;	dst		: 保存先アドレス
    82                              <1> ;
    83                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
    84                              <1> ;************************************************************************
    85                              <1> rtc_get_time:
    86                              <1> 		;---------------------------------------
    87                              <1> 		; 【スタックフレームの構築】
    88                              <1> 		;---------------------------------------
    89                              <1> 												; ------|--------
    90                              <1> 												; EBP+ 8| 保存先アドレス
    91                              <1> 												; ---------------
    92 0000056F 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    93 00000570 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    94                              <1> 												; ---------------
    95                              <1> 		;---------------------------------------
    96                              <1> 		; 【レジスタの保存】
    97                              <1> 		;---------------------------------------
    98 00000572 53                  <1> 		push	ebx
    99                              <1> 
   100                              <1> 		;---------------------------------------
   101                              <1> 		; RTCから時刻を取得
   102                              <1> 		;---------------------------------------
   103 00000573 B00A                <1> 		mov		al, 0x0A						; // レジスタA
   104 00000575 E670                <1> 		out		0x70, al						; outp(0x70, AL);
   105 00000577 E471                <1> 		in		al, 0x71						; AL = レジスタA;
   106 00000579 A880                <1> 		test	al, 0x80						; if (DM & UIP) // 更新中
   107 0000057B 7407                <1> 		je		.10F							; {
   108 0000057D B801000000          <1> 		mov		eax, 1							;   ret = 1; // データ更新中
   109 00000582 EB27                <1> 		jmp		.10E							; }
   110                              <1> .10F:											; else
   111                              <1> 												; {
   112                              <1> 												;   // RAM[0x04]:時
   113 00000584 B004                <1> 		mov		al, 0x04						;   AL = 0x04;
   114 00000586 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   115 00000588 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 時データ
   116                              <1> 												;   
   117 0000058A C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   118                              <1> 												;   
   119                              <1> 												;   // RAM[0x02]:分
   120 0000058D B002                <1> 		mov		al, 0x02						;   AL = 0x02;
   121 0000058F E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   122 00000591 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 分データ
   123                              <1> 												;   
   124 00000593 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   125                              <1> 												;   
   126                              <1> 												;   // RAM[0x00]:秒
   127 00000596 B000                <1> 		mov		al, 0x00						;   AL = 0x00;
   128 00000598 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   129 0000059A E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 秒データ
   130                              <1> 												;   
   131 0000059C 25FFFFFF00          <1> 		and		eax, 0x00_FF_FF_FF				;   // 下位3バイトのみ有効
   132                              <1> 												;   
   133 000005A1 8B5D08              <1> 		mov		ebx, [ebp + 8]					;   dst = 保存先;
   134 000005A4 8903                <1> 		mov		[ebx], eax						;   [dst] = 時刻;
   135                              <1> 												;   
   136 000005A6 B800000000          <1> 		mov		eax, 0							;   ret = 0; // 正常終了
   137                              <1> .10E:											; }
   138                              <1> 
   139                              <1> 		;---------------------------------------
   140                              <1> 		; 【レジスタの復帰】
   141                              <1> 		;---------------------------------------
   142 000005AB 5B                  <1> 		pop		ebx
   143                              <1> 
   144                              <1> 		;---------------------------------------
   145                              <1> 		; 【スタックフレームの破棄】
   146                              <1> 		;---------------------------------------
   147 000005AC 89EC                <1> 		mov		esp, ebp
   148 000005AE 5D                  <1> 		pop		ebp
   149                              <1> 
   150 000005AF C3                  <1> 		ret
   151                              <1> 
    75                                  %include	"../modules/protect/draw_time.s"
    76                              <1> ;************************************************************************
    77                              <1> ;	時刻の表示
    78                              <1> ;========================================================================
    79                              <1> ;■書式		: void draw_time(col, row, color, time);
    80                              <1> ;
    81                              <1> ;■引数
    82                              <1> ;	col		: 列
    83                              <1> ;	row		: 行
    84                              <1> ;	color	: 描画色
    85                              <1> ;	time	: 時刻データ
    86                              <1> ;
    87                              <1> ;■戻り値	: 無し
    88                              <1> ;************************************************************************
    89                              <1> draw_time:
    90                              <1> 		;---------------------------------------
    91                              <1> 		; 【スタックフレームの構築】
    92                              <1> 		;---------------------------------------
    93                              <1> 												; ------|--------
    94                              <1> 												; EBP+20| 時刻データ
    95                              <1> 												; EBP+16| 色
    96                              <1> 												; EBP+12| Y（行）
    97                              <1> 												; EBP+ 8| X（列）
    98                              <1> 												; ---------------
    99 000005B0 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   100 000005B1 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   101                              <1> 												; ---------------
   102                              <1> 		;---------------------------------------
   103                              <1> 		; 【レジスタの保存】
   104                              <1> 		;---------------------------------------
   105 000005B3 50                  <1> 		push	eax
   106 000005B4 53                  <1> 		push	ebx
   107                              <1> 
   108                              <1> 		;---------------------------------------
   109                              <1> 		; 
   110                              <1> 		;---------------------------------------
   111 000005B5 8B4514              <1> 		mov		eax, [ebp +20]					; EAX = 時刻データ;
   112 000005B8 3B05[36060000]      <1> 		cmp		eax, [.last]					; if (今回 != 前回)
   113 000005BE 7467                <1> 		je		.10E							; {
   114                              <1> 												;   
   115 000005C0 A3[36060000]        <1> 		mov		[.last], eax					;   // 前回の時刻値を更新
   116                              <1> 												;   
   117 000005C5 BB00000000          <1> 		mov		ebx, 0							;   EBX = 0;
   118 000005CA 88C3                <1> 		mov		bl, al							;   EBX = 秒;
   119 000005CC 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .sec, 2, 16, 0b0100	;   // 時刻を文字列に変換
   119 000005D3 [44060000]53E809FF- <1>
   119 000005DB FFFF6683C414        <1>
   120                              <1> 
   121 000005E1 88E3                <1> 		mov		bl, ah							;   EBX = 分;
   122 000005E3 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .min, 2, 16, 0b0100	;   // 時刻を文字列に変換
   122 000005EA [41060000]53E8F2FE- <1>
   122 000005F2 FFFF6683C414        <1>
   123                              <1> 
   124 000005F8 C1E810              <1> 		shr		eax, 16							;   EBX = 時;
   125 000005FB 6A046A106A0268-     <1> 		cdecl	itoa, eax, .hour, 2, 16, 0b0100	;   // 時刻を文字列に変換
   125 00000602 [3E060000]50E8DAFE- <1>
   125 0000060A FFFF6683C414        <1>
   126                              <1> 
   127                              <1> 												;   // 時刻を表示
   128 00000610 68[3E060000]FF7510- <1> 		cdecl	draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
   128 00000618 FF750CFF7508E825FC- <1>
   128 00000621 FFFF6683C410        <1>
   129                              <1> 												;     
   130                              <1> 												;   }
   131                              <1> .10E:											; }
   132                              <1> 
   133                              <1> 		;---------------------------------------
   134                              <1> 		; 【レジスタの復帰】
   135                              <1> 		;---------------------------------------
   136 00000627 5B                  <1> 		pop		ebx
   137 00000628 58                  <1> 		pop		eax
   138                              <1> 
   139                              <1> 		;---------------------------------------
   140                              <1> 		; 【スタックフレームの破棄】
   141                              <1> 		;---------------------------------------
   142 00000629 89EC                <1> 		mov		esp, ebp
   143 0000062B 5D                  <1> 		pop		ebp
   144                              <1> 
   145 0000062C C3                  <1> 		ret
   146                              <1> 
   147 0000062D 00                  <1> ALIGN 2, db 0
   148 0000062E 0000000000000000    <1> .temp:	dq	0
   149 00000636 0000000000000000    <1> .last:	dq	0
   150 0000063E 5A5A3A              <1> .hour:	db	"ZZ:"
   151 00000641 5A5A3A              <1> .min:	db	"ZZ:"
   152 00000644 5A5A00              <1> .sec:	db	"ZZ", 0
   153                              <1> 
    76                                  
    77                                  ;************************************************************************
    78                                  ;	パディング
    79                                  ;************************************************************************
    80 00000647 00<rep 19B9h>           		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
    81                                  
