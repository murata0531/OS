     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  %define	USE_SYSTEM_CALL
     8                                  %define	USE_TEST_AND_SET
     9                                  
    10                                  ;************************************************************************
    11                                  ;	マクロ
    12                                  ;************************************************************************
    13                                  %include	"../include/define.s"
    14                              <1> ;************************************************************************
    15                              <1> ;	メモリイメージ
    16                              <1> ;************************************************************************
    17                              <1> 
    18                              <1> 		;---------------------------------------
    19                              <1> 		;           |            | 
    20                              <1> 		;           |____________| 
    21                              <1> 		; 0000_7A00 |            | ( 512) スタック
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0000_7C00 |            | (  8K) ブート
    24                              <1> 		;           =            = 
    25                              <1> 		;           |____________| 
    26                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    27                              <1> 		;           =            = 
    28                              <1> 		;           |____________| 
    29                              <1> 		; 0000_BC00 |////////////| 
    30                              <1> 		;           =            = 
    31                              <1> 		;           |____________| 
    32                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    33                              <1> 		;           |____________| 
    34                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    35                              <1> 		;           |____________| 
    36                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    37                              <1> 		;           |            | 
    38                              <1> 		;           =            = 
    39                              <1> 		;           |____________| 
    40                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    41                              <1> 		;           |            | （各タスク1K）
    42                              <1> 		;           =            = 
    43                              <1> 		;           |____________| 
    44                              <1> 		; 0010_5000 |            | Dir
    45                              <1> 		;      6000 |____________| Page
    46                              <1> 		; 0010_7000 |            | Dir
    47                              <1> 		;      8000 |____________| Page
    48                              <1> 		; 0010_9000 |////////////| 
    49                              <1> 		;           |            | 
    50                              <1> 
    51                              <1> 
    52                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    53                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    54                              <1> 
    55                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    56                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    57                              <1> 
    58                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    59                              <1> 
    60                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    61                              <1> 
    62                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    63                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    64                              <1> 
    65                              <1> 		E820_RECORD_SIZE	equ		20
    66                              <1> 
    67                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    68                              <1> 
    69                              <1> 		STACK_BASE			equ		0x0010_3000		; タスク用スタックエリア
    70                              <1> 		STACK_SIZE			equ		1024			; スタックサイズ
    71                              <1> 
    72                              <1> 		SP_TASK_0			equ		STACK_BASE + (STACK_SIZE * 1)
    73                              <1> 		SP_TASK_1			equ		STACK_BASE + (STACK_SIZE * 2)
    74                              <1> 		SP_TASK_2			equ		STACK_BASE + (STACK_SIZE * 3)
    75                              <1> 		SP_TASK_3			equ		STACK_BASE + (STACK_SIZE * 4)
    76                              <1> 		SP_TASK_4			equ		STACK_BASE + (STACK_SIZE * 5)
    77                              <1> 		SP_TASK_5			equ		STACK_BASE + (STACK_SIZE * 6)
    78                              <1> 		SP_TASK_6			equ		STACK_BASE + (STACK_SIZE * 7)
    79                              <1> 
    80                              <1> 		CR3_BASE			equ		0x0010_5000		; ページ変換テーブル：タスク3用
    81                              <1> 
    82                              <1> 		PARAM_TASK_4		equ		0x0010_8000		; 描画パラメータ：タスク4用
    83                              <1> 		PARAM_TASK_5		equ		0x0010_9000		; 描画パラメータ：タスク5用
    84                              <1> 		PARAM_TASK_6		equ		0x0010_A000		; 描画パラメータ：タスク6用
    85                              <1> 
    86                              <1> 		CR3_TASK_4			equ		0x0020_0000		; ページ変換テーブル：タスク4用
    87                              <1> 		CR3_TASK_5			equ		0x0020_2000		; ページ変換テーブル：タスク5用
    88                              <1> 		CR3_TASK_6			equ		0x0020_4000		; ページ変換テーブル：タスク6用
    14                                  %include	"../include/macro.s"
    15                              <1> ;************************************************************************
    16                              <1> ; 関数呼び出し用マクロ
    17                              <1> ;
    18                              <1> ; 使い方：
    19                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    20                              <1> ;
    21                              <1> ;************************************************************************
    22                              <1> %macro  cdecl 1-*.nolist
    23                              <1> 
    24                              <1> 	%rep  %0 - 1
    25                              <1> 		push	%{-1:-1}
    26                              <1> 		%rotate -1
    27                              <1> 	%endrep 
    28                              <1> 	%rotate -1
    29                              <1> 
    30                              <1> 		call	%1
    31                              <1> 
    32                              <1> 	%if 1 < %0
    33                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    34                              <1> 	%endif
    35                              <1> 
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> ;************************************************************************
    39                              <1> ; 割り込みベクタ設定用
    40                              <1> ;
    41                              <1> ; 使い方：
    42                              <1> ;	set_vect	ベクタ番号, 割り込み処理 [, フラグ]
    43                              <1> ;
    44                              <1> ;************************************************************************
    45                              <1> %macro  set_vect 1-*.nolist
    46                              <1> 		push	eax
    47                              <1> 		push	edi
    48                              <1> 
    49                              <1> 		mov		edi, VECT_BASE + (%1 * 8)		; ベクタアドレス;
    50                              <1> 		mov		eax, %2
    51                              <1> 
    52                              <1> 	%if 3 == %0
    53                              <1> 		mov		[edi + 4], %3					; フラグ
    54                              <1> 	%endif
    55                              <1> 
    56                              <1> 		mov		[edi + 0], ax					; 例外アドレス[15: 0]
    57                              <1> 		shr		eax, 16							; 
    58                              <1> 		mov		[edi + 6], ax					; 例外アドレス[31:16]
    59                              <1> 
    60                              <1> 		pop		edi
    61                              <1> 		pop		eax
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> ;************************************************************************
    65                              <1> ; ポート出力用
    66                              <1> ;
    67                              <1> ; 使い方：
    68                              <1> ;	outp	ポート番号, 出力値
    69                              <1> ;
    70                              <1> ;************************************************************************
    71                              <1> %macro  outp 2
    72                              <1> 		mov		al, %2
    73                              <1> 		out		%1, al
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> ;************************************************************************
    77                              <1> ; ディスクリプタの情報を設定
    78                              <1> ;
    79                              <1> ; 使い方：
    80                              <1> ;	set_desc	ディスクリプタ, ベース
    81                              <1> ;
    82                              <1> ;************************************************************************
    83                              <1> %macro  set_desc 2-* 
    84                              <1> 		push	eax
    85                              <1> 		push	edi
    86                              <1> 
    87                              <1> 		mov		edi, %1							; ディスクリプタアドレス
    88                              <1> 		mov		eax, %2							; ベースアドレス
    89                              <1> 
    90                              <1> 	%if 3 == %0
    91                              <1> 		mov		[edi + 0], %3					; リミット
    92                              <1> 	%endif
    93                              <1> 
    94                              <1> 		mov		[edi + 2], ax					; ベース（[15: 0]）
    95                              <1> 		shr		eax, 16							; 
    96                              <1> 		mov		[edi + 4], al					; ベース（[23:16]）
    97                              <1> 		mov		[edi + 7], ah					; ベース（[31:24]）
    98                              <1> 
    99                              <1> 		pop		edi
   100                              <1> 		pop		eax
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> ;************************************************************************
   104                              <1> ; ゲートディスクリプタのオフセットを設定
   105                              <1> ;
   106                              <1> ; 使い方：
   107                              <1> ;	set_gate	ディスクリプタ, オフセット
   108                              <1> ;
   109                              <1> ;************************************************************************
   110                              <1> %macro  set_gate 2-* 
   111                              <1> 		push	eax
   112                              <1> 		push	edi
   113                              <1> 
   114                              <1> 		mov		edi, %1							; ディスクリプタアドレス
   115                              <1> 		mov		eax, %2							; ベースアドレス
   116                              <1> 
   117                              <1> 		mov		[edi + 0], ax					; ベース（[15: 0]）
   118                              <1> 		shr		eax, 16							; 
   119                              <1> 		mov		[edi + 6], ax					; ベース（[31:16]）
   120                              <1> 
   121                              <1> 		pop		edi
   122                              <1> 		pop		eax
   123                              <1> %endmacro
   124                              <1> 
   125                              <1> ;************************************************************************
   126                              <1> ;	構造体
   127                              <1> ;************************************************************************
   128                              <1> 
   129                              <1> ;-----------------------------------------------
   130                              <1> ;	ドライブパラメータ
   131                              <1> ;-----------------------------------------------
   132                              <1> struc drive
   133 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
   134 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
   135 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
   136 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
   137                              <1> endstruc
   138                              <1> 
   139                              <1> ;-----------------------------------------------
   140                              <1> ;	リングバッファ
   141                              <1> ;-----------------------------------------------
   142                              <1> %define		RING_ITEM_SIZE		(1 << 4)
   143                              <1> %define		RING_INDEX_MASK		(RING_ITEM_SIZE - 1)
   144                              <1> 
   145                              <1> struc ring_buff
   146 00000000 ????????            <1> 		.rp				resd	1				; RP:書き込み位置
   147 00000004 ????????            <1> 		.wp				resd	1				; WP:読み込み位置
   148 00000008 <res 10h>           <1> 		.item			resb	RING_ITEM_SIZE	; バッファ
   149                              <1> endstruc
   150                              <1> 
   151                              <1> ;-----------------------------------------------
   152                              <1> ;	バラ曲線描画パラメータ
   153                              <1> ;-----------------------------------------------
   154                              <1> struc rose
   155 00000000 ????????            <1> 		.x0				resd	1				; 左上座標：X0
   156 00000004 ????????            <1> 		.y0				resd	1				; 左上座標：Y0
   157 00000008 ????????            <1> 		.x1				resd	1				; 右下座標：X1
   158 0000000C ????????            <1> 		.y1				resd	1				; 右下座標：Y1
   159                              <1> 
   160 00000010 ????????            <1> 		.n				resd	1				; 変数：n
   161 00000014 ????????            <1> 		.d				resd	1				; 変数：d
   162                              <1> 
   163 00000018 ????????            <1> 		.color_x		resd	1				; 描画色：X軸
   164 0000001C ????????            <1> 		.color_y		resd	1				; 描画色：Y軸
   165 00000020 ????????            <1> 		.color_z		resd	1				; 描画色：枠
   166 00000024 ????????            <1> 		.color_s		resd	1				; 描画色：文字
   167 00000028 ????????            <1> 		.color_f		resd	1				; 描画色：グラフ描画色
   168 0000002C ????????            <1> 		.color_b		resd	1				; 描画色：グラフ消去色
   169                              <1> 
   170 00000030 <res 10h>           <1> 		.title			resb	16				; タイトル
   171                              <1> endstruc
   172                              <1> 
    15                                  
    16                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    17                                  
    18                                  [BITS 32]
    19                                  ;************************************************************************
    20                                  ;	エントリポイント
    21                                  ;************************************************************************
    22                                  kernel:
    23                                  		;---------------------------------------
    24                                  		; フォントアドレスを取得
    25                                  		;---------------------------------------
    26 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    27 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    28 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    29 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    30 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    31 00000011 A3[50020000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    32                                  
    33                                  		;---------------------------------------
    34                                  		; TSSディスクリプタの設定
    35                                  		;---------------------------------------
    36                                  		set_desc	GDT.tss_0, TSS_0			; // タスク0用TSSの設定
    84 00000016 50                  <1>  push eax
    85 00000017 57                  <1>  push edi
    86                              <1> 
    87 00000018 BF[D8050000]        <1>  mov edi, %1
    88 0000001D B8[58020000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000022 66894702            <1>  mov [edi + 2], ax
    95 00000026 C1E810              <1>  shr eax, 16
    96 00000029 884704              <1>  mov [edi + 4], al
    97 0000002C 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 0000002F 5F                  <1>  pop edi
   100 00000030 58                  <1>  pop eax
    37                                  		set_desc	GDT.tss_1, TSS_1			; // タスク1用TSSの設定
    84 00000031 50                  <1>  push eax
    85 00000032 57                  <1>  push edi
    86                              <1> 
    87 00000033 BF[E0050000]        <1>  mov edi, %1
    88 00000038 B8[30030000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 0000003D 66894702            <1>  mov [edi + 2], ax
    95 00000041 C1E810              <1>  shr eax, 16
    96 00000044 884704              <1>  mov [edi + 4], al
    97 00000047 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 0000004A 5F                  <1>  pop edi
   100 0000004B 58                  <1>  pop eax
    38                                  		set_desc	GDT.tss_2, TSS_2			; // タスク2用TSSの設定
    84 0000004C 50                  <1>  push eax
    85 0000004D 57                  <1>  push edi
    86                              <1> 
    87 0000004E BF[E8050000]        <1>  mov edi, %1
    88 00000053 B8[08040000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000058 66894702            <1>  mov [edi + 2], ax
    95 0000005C C1E810              <1>  shr eax, 16
    96 0000005F 884704              <1>  mov [edi + 4], al
    97 00000062 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 00000065 5F                  <1>  pop edi
   100 00000066 58                  <1>  pop eax
    39                                  		set_desc	GDT.tss_3, TSS_3			; // タスク3用TSSの設定
    84 00000067 50                  <1>  push eax
    85 00000068 57                  <1>  push edi
    86                              <1> 
    87 00000069 BF[F0050000]        <1>  mov edi, %1
    88 0000006E B8[E0040000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000073 66894702            <1>  mov [edi + 2], ax
    95 00000077 C1E810              <1>  shr eax, 16
    96 0000007A 884704              <1>  mov [edi + 4], al
    97 0000007D 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 00000080 5F                  <1>  pop edi
   100 00000081 58                  <1>  pop eax
    40                                  
    41                                  		;---------------------------------------
    42                                  		; コールゲートの設定
    43                                  		;---------------------------------------
    44                                  		set_gate	GDT.call_gate, call_gate	; // コールゲートの設定
   111 00000082 50                  <1>  push eax
   112 00000083 57                  <1>  push edi
   113                              <1> 
   114 00000084 BF[F8050000]        <1>  mov edi, %1
   115 00000089 B8[0C130000]        <1>  mov eax, %2
   116                              <1> 
   117 0000008E 668907              <1>  mov [edi + 0], ax
   118 00000091 C1E810              <1>  shr eax, 16
   119 00000094 66894706            <1>  mov [edi + 6], ax
   120                              <1> 
   121 00000098 5F                  <1>  pop edi
   122 00000099 58                  <1>  pop eax
    45                                  
    46                                  		;---------------------------------------
    47                                  		; LDTの設定
    48                                  		;---------------------------------------
    49                                  		set_desc	GDT.ldt, LDT, word LDT_LIMIT
    84 0000009A 50                  <1>  push eax
    85 0000009B 57                  <1>  push edi
    86                              <1> 
    87 0000009C BF[D0050000]        <1>  mov edi, %1
    88 000000A1 B8[06060000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91 000000A6 66C7074700          <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 000000AB 66894702            <1>  mov [edi + 2], ax
    95 000000AF C1E810              <1>  shr eax, 16
    96 000000B2 884704              <1>  mov [edi + 4], al
    97 000000B5 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 000000B8 5F                  <1>  pop edi
   100 000000B9 58                  <1>  pop eax
    50                                  
    51                                  		;---------------------------------------
    52                                  		; GDTをロード（再設定）
    53                                  		;---------------------------------------
    54 000000BA 0F0115[00060000]        		lgdt	[GDTR]							; // グローバルディスクリプタテーブルをロード
    55                                  
    56                                  		;---------------------------------------
    57                                  		; スタックの設定
    58                                  		;---------------------------------------
    59 000000C1 BC00341000              		mov		esp, SP_TASK_0					; // タスク0用のスタックを設定
    60                                  
    61                                  		;---------------------------------------
    62                                  		; タスクレジスタの初期化
    63                                  		;---------------------------------------
    64 000000C6 66B82000                		mov		ax, SS_TASK_0
    65 000000CA 0F00D8                  		ltr		ax								; // タスクレジスタの設定
    66                                  
    67                                  		;---------------------------------------
    68                                  		; 初期化
    69                                  		;---------------------------------------
    70 000000CD E8100F0000              		cdecl	init_int						; // 割り込みベクタの初期化
    71 000000D2 E891100000              		cdecl	init_pic						; // 割り込みコントローラの初期化
    72 000000D7 E872050000              		cdecl	init_page						; // ページングの初期化
    73                                  
    74 000000DC 5057BF00001000B8-       		set_vect	0x00, int_zero_div			; // 割り込み処理の登録：0除算
    74 000000E4 [4A110000]668907C1-
    74 000000EC E810668947065F58   
    75 000000F4 5057BF38001000B8-       		set_vect	0x07, int_nm				; // 割り込み処理の登録：デバイス使用不可
    75 000000FC [77130000]668907C1-
    75 00000104 E810668947065F58   
    76 0000010C 5057BF70001000B8-       		set_vect	0x0E, int_pf				; // 割り込み処理の登録：ページフォルト
    76 00000114 [FC060000]668907C1-
    76 0000011C E810668947065F58   
    77 00000124 5057BF00011000B8-       		set_vect	0x20, int_timer				; // 割り込み処理の登録：タイマー
    77 0000012C [A4060000]668907C1-
    77 00000134 E810668947065F58   
    78 0000013C 5057BF08011000B8-       		set_vect	0x21, int_keyboard			; // 割り込み処理の登録：KBC
    78 00000144 [D2110000]668907C1-
    78 0000014C E810668947065F58   
    79 00000154 5057BF40011000B8-       		set_vect	0x28, int_rtc				; // 割り込み処理の登録：RTC
    79 0000015C [A7110000]668907C1-
    79 00000164 E810668947065F58   
    80 0000016C 5057BF08041000B8-       		set_vect	0x81, trap_gate_81, word 0xEF00	; // トラップゲートの登録：1文字出力
    80 00000174 [3C130000]66C74704-
    80 0000017C 00EF668907C1E81066-
    80 00000185 8947065F58         
    81 0000018A 5057BF10041000B8-       		set_vect	0x82, trap_gate_82, word 0xEF00	; // トラップゲートの登録：点の描画
    81 00000192 [4A130000]66C74704-
    81 0000019A 00EF668907C1E81066-
    81 000001A3 8947065F58         
    82                                  
    83                                  		;---------------------------------------
    84                                  		; デバイスの割り込み許可
    85                                  		;---------------------------------------
    86 000001A8 6A10E8E40F00006683-     		cdecl	rtc_int_en, 0x10				; rtc_int_en(UIE); // 更新サイクル終了割り込み許可
    86 000001B1 C404               
    87 000001B3 E80C110000              		cdecl	int_en_timer0					; // タイマー（カウンタ0）割り込み許可
    88                                  
    89                                  		;---------------------------------------
    90                                  		; IMR(割り込みマスクレジスタ)の設定
    91                                  		;---------------------------------------
    92                                  		outp	0x21, 0b_1111_1000				; // 割り込み有効：スレーブPIC/KBC/タイマー
    72 000001B8 B0F8                <1>  mov al, %2
    73 000001BA E621                <1>  out %1, al
    93                                  		outp	0xA1, 0b_1111_1110				; // 割り込み有効：RTC
    72 000001BC B0FE                <1>  mov al, %2
    73 000001BE E6A1                <1>  out %1, al
    94                                  
    95                                  		;---------------------------------------
    96                                  		; ページングを有効化
    97                                  		;---------------------------------------
    98 000001C0 B800501000              		mov		eax, CR3_BASE					;
    99 000001C5 0F22D8                  		mov		cr3, eax						; // ページテーブルの登録
   100                                  
   101 000001C8 0F20C0                  		mov		eax, cr0						; // PGビットをセット
   102 000001CB 0D00000080              		or		eax, (1 << 31)					; CR0 |= PG;
   103 000001D0 0F22C0                  		mov		cr0, eax						; 
   104 000001D3 EB00                    		jmp		$ + 2							; FLUSH();
   105                                  
   106                                  		;---------------------------------------
   107                                  		; CPUの割り込み許可
   108                                  		;---------------------------------------
   109 000001D5 FB                      		sti										; // 割り込み許可
   110                                  
   111                                  		;---------------------------------------
   112                                  		; フォントの一覧表示
   113                                  		;---------------------------------------
   114 000001D6 6A0D6A3FE8AD090000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
   114 000001DF 6683C408           
   115 000001E3 6A046A3FE8230A0000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
   115 000001EC 6683C408           
   116                                  
   117                                  		;---------------------------------------
   118                                  		; 文字列の表示
   119                                  		;---------------------------------------
   120 000001F0 68[38020000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
   120 000001F8 00006A0E6A19E8CE09-
   120 00000201 00006683C410       
   121                                  
   122                                  .10L:											; while (;;)
   123                                  												; {
   124                                  		;---------------------------------------
   125                                  		; 回転する棒を表示
   126                                  		;---------------------------------------
   127 00000207 E8C7100000              		cdecl	draw_rotation_bar				;   // 回転する棒を表示
   128                                  
   129                                  		;---------------------------------------
   130                                  		; キーコードの取得
   131                                  		;---------------------------------------
   132 0000020C 68[4C020000]68-         		cdecl	ring_rd, _KEY_BUFF, .int_key	;   EAX = ring_rd(buff, &int_key);
   132 00000212 [F8110000]E8F50F00-
   132 0000021A 006683C408         
   133 0000021F 83F800                  		cmp		eax, 0							;   if (EAX == 0)
   134 00000222 7412                    		je		.10E							;   {
   135                                  												;   
   136                                  		;---------------------------------------
   137                                  		; キーコードの表示
   138                                  		;---------------------------------------
   139 00000224 68[F8110000]6A1D6A-     		cdecl	draw_key, 2, 29, _KEY_BUFF		;     ring_show(key_buff); // 全要素を表示
   139 0000022C 02E83F1000006683C4-
   139 00000235 0C                 
   140                                  .10E:											;   }
   141 00000236 EBCF                    		jmp		.10L							; }
   142                                  
   143 00000238 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
   143 00000241 65726E656C212000   
   144                                  
   145 00000249 00<rep 3h>              ALIGN 4, db 0
   146 0000024C 00000000                .int_key:	dd	0
   147                                  
   148                                  ALIGN 4, db 0
   149 00000250 00000000                FONT_ADR:	dd	0
   150 00000254 00000000                RTC_TIME:	dd	0
   151                                  
   152                                  ;************************************************************************
   153                                  ;	タスク
   154                                  ;************************************************************************
   155                                  %include	"descriptor.s"
   156                              <1> ;************************************************************************
   157                              <1> ;	TSS
   158                              <1> ;************************************************************************
   159                              <1> TSS_0:
   160 00000258 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   161 0000025C 00321000            <1> .esp0:			dd	SP_TASK_0 - 512				;*  4:ESP0
   162 00000260 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   163 00000264 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   164 00000268 00000000            <1> .ss1:			dd	0							;* 16:
   165 0000026C 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   166 00000270 00000000            <1> .ss2:			dd	0							;* 24:
   167 00000274 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
   168 00000278 00000000            <1> .eip:			dd	0							;  32:EIP
   169 0000027C 00000000            <1> .eflags:		dd	0							;  36:EFLAGS
   170 00000280 00000000            <1> .eax:			dd	0							;  40:EAX
   171 00000284 00000000            <1> .ecx:			dd	0							;  44:ECX
   172 00000288 00000000            <1> .edx:			dd	0							;  48:EDX
   173 0000028C 00000000            <1> .ebx:			dd	0							;  52:EBX
   174 00000290 00000000            <1> .esp:			dd	0							;  56:ESP
   175 00000294 00000000            <1> .ebp:			dd	0							;  60:EBP
   176 00000298 00000000            <1> .esi:			dd	0							;  64:ESI
   177 0000029C 00000000            <1> .edi:			dd	0							;  68:EDI
   178 000002A0 00000000            <1> .es:			dd	0							;  72:ES
   179 000002A4 00000000            <1> .cs:			dd	0							;  76:CS
   180 000002A8 00000000            <1> .ss:			dd	0							;  80:SS
   181 000002AC 00000000            <1> .ds:			dd	0							;  84:DS
   182 000002B0 00000000            <1> .fs:			dd	0							;  88:FS
   183 000002B4 00000000            <1> .gs:			dd	0							;  92:GS
   184 000002B8 00000000            <1> .ldt:			dd	0							;* 96:LDTセグメントセレクタ
   185 000002BC 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   186 000002C0 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   187                              <1> 
   188                              <1> TSS_1:
   189 00000330 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   190 00000334 00361000            <1> .esp0:			dd	SP_TASK_1 - 512				;*  4:ESP0
   191 00000338 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   192 0000033C 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   193 00000340 00000000            <1> .ss1:			dd	0							;* 16:
   194 00000344 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   195 00000348 00000000            <1> .ss2:			dd	0							;* 24:
   196 0000034C 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
   197 00000350 [6A070000]          <1> .eip:			dd	task_1						;  32:EIP
   198 00000354 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   199 00000358 00000000            <1> .eax:			dd	0							;  40:EAX
   200 0000035C 00000000            <1> .ecx:			dd	0							;  44:ECX
   201 00000360 00000000            <1> .edx:			dd	0							;  48:EDX
   202 00000364 00000000            <1> .ebx:			dd	0							;  52:EBX
   203 00000368 00381000            <1> .esp:			dd	SP_TASK_1					;  56:ESP
   204 0000036C 00000000            <1> .ebp:			dd	0							;  60:EBP
   205 00000370 00000000            <1> .esi:			dd	0							;  64:ESI
   206 00000374 00000000            <1> .edi:			dd	0							;  68:EDI
   207 00000378 27000000            <1> .es:			dd	DS_TASK_1					;  72:ES
   208 0000037C 1F000000            <1> .cs:			dd	CS_TASK_1					;  76:CS
   209 00000380 27000000            <1> .ss:			dd	DS_TASK_1					;  80:SS
   210 00000384 27000000            <1> .ds:			dd	DS_TASK_1					;  84:DS
   211 00000388 27000000            <1> .fs:			dd	DS_TASK_1					;  88:FS
   212 0000038C 27000000            <1> .gs:			dd	DS_TASK_1					;  92:GS
   213 00000390 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   214 00000394 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   215 00000398 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   216                              <1> 
   217                              <1> TSS_2:
   218 00000408 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   219 0000040C 003A1000            <1> .esp0:			dd	SP_TASK_2 - 512				;*  4:ESP0
   220 00000410 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   221 00000414 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   222 00000418 00000000            <1> .ss1:			dd	0							;* 16:
   223 0000041C 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   224 00000420 00000000            <1> .ss2:			dd	0							;* 24:
   225 00000424 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
   226 00000428 [9F070000]          <1> .eip:			dd	task_2						;  32:EIP
   227 0000042C 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   228 00000430 00000000            <1> .eax:			dd	0							;  40:EAX
   229 00000434 00000000            <1> .ecx:			dd	0							;  44:ECX
   230 00000438 00000000            <1> .edx:			dd	0							;  48:EDX
   231 0000043C 00000000            <1> .ebx:			dd	0							;  52:EBX
   232 00000440 003C1000            <1> .esp:			dd	SP_TASK_2					;  56:ESP
   233 00000444 00000000            <1> .ebp:			dd	0							;  60:EBP
   234 00000448 00000000            <1> .esi:			dd	0							;  64:ESI
   235 0000044C 00000000            <1> .edi:			dd	0							;  68:EDI
   236 00000450 37000000            <1> .es:			dd	DS_TASK_2					;  72:ES
   237 00000454 2F000000            <1> .cs:			dd	CS_TASK_2					;  76:CS
   238 00000458 37000000            <1> .ss:			dd	DS_TASK_2					;  80:SS
   239 0000045C 37000000            <1> .ds:			dd	DS_TASK_2					;  84:DS
   240 00000460 37000000            <1> .fs:			dd	DS_TASK_2					;  88:FS
   241 00000464 37000000            <1> .gs:			dd	DS_TASK_2					;  92:GS
   242 00000468 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   243 0000046C 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   244 00000470 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   245                              <1> 
   246                              <1> TSS_3:
   247 000004E0 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   248 000004E4 003E1000            <1> .esp0:			dd	SP_TASK_3 - 512				;*  4:ESP0
   249 000004E8 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   250 000004EC 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   251 000004F0 00000000            <1> .ss1:			dd	0							;* 16:
   252 000004F4 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   253 000004F8 00000000            <1> .ss2:			dd	0							;* 24:
   254 000004FC 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
   255 00000500 [70080000]          <1> .eip:			dd	task_3						;  32:EIP
   256 00000504 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   257 00000508 00000000            <1> .eax:			dd	0							;  40:EAX
   258 0000050C 00000000            <1> .ecx:			dd	0							;  44:ECX
   259 00000510 00000000            <1> .edx:			dd	0							;  48:EDX
   260 00000514 00000000            <1> .ebx:			dd	0							;  52:EBX
   261 00000518 00401000            <1> .esp:			dd	SP_TASK_3					;  56:ESP
   262 0000051C 00000000            <1> .ebp:			dd	0							;  60:EBP
   263 00000520 00000000            <1> .esi:			dd	0							;  64:ESI
   264 00000524 00000000            <1> .edi:			dd	0							;  68:EDI
   265 00000528 47000000            <1> .es:			dd	DS_TASK_3					;  72:ES
   266 0000052C 3F000000            <1> .cs:			dd	CS_TASK_3					;  76:CS
   267 00000530 47000000            <1> .ss:			dd	DS_TASK_3					;  80:SS
   268 00000534 47000000            <1> .ds:			dd	DS_TASK_3					;  84:DS
   269 00000538 47000000            <1> .fs:			dd	DS_TASK_3					;  88:FS
   270 0000053C 47000000            <1> .gs:			dd	DS_TASK_3					;  92:GS
   271 00000540 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   272 00000544 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   273 00000548 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   274                              <1> 
   275                              <1> 
   276                              <1> ;************************************************************************
   277                              <1> ;	グローバルディスクリプタテーブル
   278                              <1> ;************************************************************************
   279 000005B8 0000000000000000    <1> GDT:			dq	0x0000000000000000			; NULL
   280 000005C0 FFFF0000009ACF00    <1> .cs_kernel:		dq	0x00CF9A000000FFFF			; CODE 4G
   281 000005C8 FFFF00000092CF00    <1> .ds_kernel:		dq	0x00CF92000000FFFF			; DATA 4G
   282 000005D0 0000000000820000    <1> .ldt			dq	0x0000820000000000			; LDTディスクリプタ
   283 000005D8 6700000000890000    <1> .tss_0:			dq	0x0000890000000067			; TSSディスクリプタ
   284 000005E0 6700000000890000    <1> .tss_1:			dq	0x0000890000000067			; TSSディスクリプタ
   285 000005E8 6700000000890000    <1> .tss_2:			dq	0x0000890000000067			; TSSディスクリプタ
   286 000005F0 6700000000890000    <1> .tss_3:			dq	0x0000890000000067			; TSSディスクリプタ
   287 000005F8 0000080004EC0000    <1> .call_gate:		dq	0x0000EC0400080000			; 386コールゲート(DPL=3, count=4, SEL=8)
   288                              <1> .end:
   289                              <1> 
   290                              <1> CS_KERNEL		equ	.cs_kernel	- GDT
   291                              <1> DS_KERNEL		equ	.ds_kernel	- GDT
   292                              <1> SS_LDT			equ	.ldt		- GDT
   293                              <1> SS_TASK_0		equ	.tss_0		- GDT
   294                              <1> SS_TASK_1		equ	.tss_1		- GDT
   295                              <1> SS_TASK_2		equ	.tss_2		- GDT
   296                              <1> SS_TASK_3		equ	.tss_3		- GDT
   297                              <1> SS_GATE_0		equ	.call_gate	- GDT
   298                              <1> 
   299 00000600 4700                <1> GDTR:	dw 		GDT.end - GDT - 1
   300 00000602 [B8050000]          <1> 		dd 		GDT
   301                              <1> 
   302                              <1> 
   303                              <1> ;************************************************************************
   304                              <1> ;	ローカルディスクリプタテーブル
   305                              <1> ;************************************************************************
   306 00000606 0000000000000000    <1> LDT:			dq	0x0000000000000000			; NULL
   307 0000060E FFFF0000009ACF00    <1> .cs_task_0:		dq	0x00CF9A000000FFFF			; CODE 4G
   308 00000616 FFFF00000092CF00    <1> .ds_task_0:		dq	0x00CF92000000FFFF			; DATA 4G
   309 0000061E FFFF000000FACF00    <1> .cs_task_1:		dq	0x00CFFA000000FFFF			; CODE 4G
   310 00000626 FFFF000000F2CF00    <1> .ds_task_1:		dq	0x00CFF2000000FFFF			; DATA 4G
   311 0000062E FFFF000000FACF00    <1> .cs_task_2:		dq	0x00CFFA000000FFFF			; CODE 4G
   312 00000636 FFFF000000F2CF00    <1> .ds_task_2:		dq	0x00CFF2000000FFFF			; DATA 4G
   313 0000063E FFFF000000FACF00    <1> .cs_task_3:		dq	0x00CFFA000000FFFF			; CODE 4G
   314 00000646 FFFF000000F2CF00    <1> .ds_task_3:		dq	0x00CFF2000000FFFF			; DATA 4G
   315                              <1> .end:
   316                              <1> 
   317                              <1> CS_TASK_0		equ	(.cs_task_0 - LDT) | 4		; タスク0用CSセレクタ
   318                              <1> DS_TASK_0		equ	(.ds_task_0 - LDT) | 4		; タスク0用DSセレクタ
   319                              <1> CS_TASK_1		equ	(.cs_task_1 - LDT) | 4 | 3	; タスク1用CSセレクタ
   320                              <1> DS_TASK_1		equ	(.ds_task_1 - LDT) | 4 | 3	; タスク1用DSセレクタ
   321                              <1> CS_TASK_2		equ	(.cs_task_2 - LDT) | 4 | 3	; タスク2用CSセレクタ
   322                              <1> DS_TASK_2		equ	(.ds_task_2 - LDT) | 4 | 3	; タスク2用DSセレクタ
   323                              <1> CS_TASK_3		equ	(.cs_task_3 - LDT) | 4 | 3	; タスク3用CSセレクタ
   324                              <1> DS_TASK_3		equ	(.ds_task_3 - LDT) | 4 | 3	; タスク3用DSセレクタ
   325                              <1> 
   326                              <1> LDT_LIMIT		equ	.end		- LDT - 1
   327                              <1> 
   328                              <1> 
   156                                  %include	"modules/paging.s"
   157                              <1> ;************************************************************************
   158                              <1> ;	ページの初期化
   159                              <1> ;
   160                              <1> 		;---------------------------------------
   161                              <1> 		;          |____________| 
   162                              <1> 		; 0010_5000|       (4K) | ディレクトリテーブル
   163                              <1> 		;          =            = 
   164                              <1> 		;          |____________| 
   165                              <1> 		; 0010_6000|       (4K) | ページテーブル
   166                              <1> 		;          =            = 
   167                              <1> 		;          |____________| 
   168                              <1> 		; 0010_7000|       (4K) | ページフォルト用
   169                              <1> 		;          =            = 
   170                              <1> 		;          |____________| 
   171                              <1> 		;          |            | 
   172                              <1> ;
   173                              <1> ;************************************************************************
   174                              <1> init_page:
   175                              <1> 		;---------------------------------------
   176                              <1> 		; 【レジスタの保存】
   177                              <1> 		;---------------------------------------
   178 0000064E 60                  <1> 		pusha
   179                              <1> 
   180                              <1> 		;---------------------------------------
   181                              <1> 		; ページ変換テーブルの作成
   182                              <1> 		;---------------------------------------
   183 0000064F 6800501000E8100000- <1> 		cdecl	page_set_4m, CR3_BASE			; // ページ変換テーブルの作成：タスク3用
   183 00000658 006683C404          <1>
   184                              <1> 
   185                              <1> 		;---------------------------------------
   186                              <1> 		; ページテーブルの設定（不在）
   187                              <1> 		;---------------------------------------
   188 0000065D C7051C641000000000- <1> 		mov		[0x0010_6000 + 0x107 * 4], dword 0	; // 0x0010_7000をページ不在に設定
   188 00000666 00                  <1>
   189                              <1> 
   190                              <1> 		;---------------------------------------
   191                              <1> 		; 【レジスタの復帰】
   192                              <1> 		;---------------------------------------
   193 00000667 61                  <1> 		popa
   194                              <1> 
   195 00000668 C3                  <1> 		ret
   196                              <1> 
   197                              <1> 
   198                              <1> ;************************************************************************
   199                              <1> ;	
   200                              <1> ;************************************************************************
   201                              <1> page_set_4m:
   202                              <1> 		;---------------------------------------
   203                              <1> 		; 【スタックフレームの構築】
   204                              <1> 		;---------------------------------------
   205                              <1> 												; ------|--------
   206 00000669 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   207 0000066A 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   208                              <1> 												; ------|--------
   209                              <1> 												;    + 8| ページテーブル作成位置
   210                              <1> 												; ------|--------
   211                              <1> 		;---------------------------------------
   212                              <1> 		; 【レジスタの保存】
   213                              <1> 		;---------------------------------------
   214 0000066C 60                  <1> 		pusha
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; ページディレクトリの作成(P=0)
   218                              <1> 		;---------------------------------------
   219 0000066D FC                  <1> 		cld										; // DFクリア（+方向）
   220 0000066E 8B7D08              <1> 		mov		edi, [ebp + 8]					; EDI = ページディレクトリの先頭;
   221 00000671 B800000000          <1> 		mov		eax, 0x00000000					; EAX = 0 ; // P = 0
   222 00000676 B900040000          <1> 		mov		ecx, 1024						; count = 1024;
   223 0000067B F3AB                <1> 		rep stosd								; whlie (count--) *dst++ = 属性;
   224                              <1> 
   225                              <1> 		;---------------------------------------
   226                              <1> 		; 先頭のエントリを設定
   227                              <1> 		;---------------------------------------
   228 0000067D 89F8                <1> 		mov		eax, edi						; EAX  = EDI;   // ページディレクトリの直後
   229 0000067F 2500F0FFFF          <1> 		and		eax, ~0x0000_0FFF				; EAX &= ~0FFF; // 物理アドレスの指定
   230 00000684 83C807              <1> 		or		eax,  7							; EAX |=  7;    // RWの許可
   231 00000687 898700F0FFFF        <1> 		mov		[edi - (1024 * 4)], eax			; // 先頭のエントリを設定
   232                              <1> 
   233                              <1> 		;---------------------------------------
   234                              <1> 		; ページテーブルの設定（リニア）
   235                              <1> 		;---------------------------------------
   236 0000068D B807000000          <1> 		mov		eax, 0x00000007					; // 物理アドレスの指定とRWの許可
   237 00000692 B900040000          <1> 		mov		ecx, 1024						; count = 1024;
   238                              <1> 												; do
   239                              <1> .10L:											; {
   240 00000697 AB                  <1> 		stosd									;   *dst++  = 属性;
   241 00000698 0500100000          <1> 		add		eax, 0x00001000					;    adr   += 0x1000;
   242 0000069D E2F8                <1> 		loop	.10L							; } while (--count);
   243                              <1> 
   244                              <1> 		;---------------------------------------
   245                              <1> 		; 【レジスタの復帰】
   246                              <1> 		;---------------------------------------
   247 0000069F 61                  <1> 		popa
   248                              <1> 
   249                              <1> 		;---------------------------------------
   250                              <1> 		; 【スタックフレームの破棄】
   251                              <1> 		;---------------------------------------
   252 000006A0 89EC                <1> 		mov		esp, ebp
   253 000006A2 5D                  <1> 		pop		ebp
   254                              <1> 
   255 000006A3 C3                  <1> 		ret
   256                              <1> 
   157                                  %include	"modules/int_timer.s"
   158                              <1> ;************************************************************************
   159                              <1> ;	例外:タイマー
   160                              <1> ;************************************************************************
   161                              <1> int_timer:
   162                              <1> 		;---------------------------------------
   163                              <1> 		; 【レジスタの保存】
   164                              <1> 		;---------------------------------------
   165 000006A4 60                  <1> 		pusha
   166 000006A5 1E                  <1> 		push	ds
   167 000006A6 06                  <1> 		push	es
   168                              <1> 
   169                              <1> 		;---------------------------------------
   170                              <1> 		; データ用セグメントの設定
   171                              <1> 		;---------------------------------------
   172 000006A7 66B81000            <1> 		mov		ax, 0x0010						; 
   173 000006AB 8ED8                <1> 		mov		ds, ax							; 
   174 000006AD 8EC0                <1> 		mov		es, ax							; 
   175                              <1> 
   176                              <1> 		;---------------------------------------
   177                              <1> 		; TICK
   178                              <1> 		;---------------------------------------
   179 000006AF FF05[F8060000]      <1> 		inc		dword [TIMER_COUNT]				; TIMER_COUNT++; // 割り込み回数の更新
   180                              <1> 
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 割り込みフラグをクリア(EOI)
   183                              <1> 		;---------------------------------------
   184                              <1> 		outp	0x20, 0x20						; // マスタPIC:EOIコマンド
    72 000006B5 B020                <2>  mov al, %2
    73 000006B7 E620                <2>  out %1, al
   185                              <1> 
   186                              <1> 		;---------------------------------------
   187                              <1> 		; タスクの切り替え
   188                              <1> 		;---------------------------------------
   189 000006B9 660F00C8            <1> 		str		ax								; AX = TR; // 現在のタスクレジスタ
   190 000006BD 6683F820            <1> 		cmp		ax, SS_TASK_0					; case (AX)
   191 000006C1 7415                <1> 		je		.11L							; {
   192 000006C3 6683F828            <1> 		cmp		ax, SS_TASK_1					;   
   193 000006C7 7418                <1> 		je		.12L							;   
   194 000006C9 6683F830            <1> 		cmp		ax, SS_TASK_2					;   
   195 000006CD 741B                <1> 		je		.13L							;   
   196                              <1> 												;   default:
   197 000006CF EA000000002000      <1> 		jmp		SS_TASK_0:0						;     // タスク0に切り替え
   198 000006D6 EB1B                <1> 		jmp		.10E							;     break;
   199                              <1> 												;     
   200                              <1> .11L:											;   case SS_TASK_0:
   201 000006D8 EA000000002800      <1> 		jmp		SS_TASK_1:0						;     // タスク1に切り替え
   202 000006DF EB12                <1> 		jmp		.10E							;     break;
   203                              <1> 												;     
   204                              <1> .12L:											;   case SS_TASK_1:
   205 000006E1 EA000000003000      <1> 		jmp		SS_TASK_2:0						;     // タスク2に切り替え
   206 000006E8 EB09                <1> 		jmp		.10E							;     break;
   207                              <1> 												;     
   208                              <1> .13L:											;   case SS_TASK_2:
   209 000006EA EA000000003800      <1> 		jmp		SS_TASK_3:0						;     // タスク3に切り替え
   210 000006F1 EB00                <1> 		jmp		.10E							;     break;
   211                              <1> .10E:											; }
   212                              <1> 
   213                              <1> 		;---------------------------------------
   214                              <1> 		; 【レジスタの復帰】
   215                              <1> 		;---------------------------------------
   216 000006F3 07                  <1> 		pop		es								; 
   217 000006F4 1F                  <1> 		pop		ds								; 
   218 000006F5 61                  <1> 		popa
   219                              <1> 
   220 000006F6 CF                  <1> 		iret
   221                              <1> 
   222 000006F7 00                  <1> ALIGN 4, db 0
   223 000006F8 00000000            <1> TIMER_COUNT:	dd	0
   224                              <1> 
   158                                  %include	"modules/int_pf.s"
   159                              <1> ;************************************************************************
   160                              <1> ;	
   161                              <1> ;************************************************************************
   162                              <1> int_pf:
   163                              <1> 		;---------------------------------------
   164                              <1> 		; 【スタックフレームの構築】
   165                              <1> 		;---------------------------------------
   166                              <1> 												; ------|--------
   167                              <1> 												; EBP+16| EFLAGS
   168                              <1> 												; EBP+12| CS
   169                              <1> 												; EBP+ 8| EIP（戻り番地）
   170 000006FC 55                  <1> 		push	ebp								; EBP+ 4| エラーコード
   171 000006FD 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   172                              <1> 												; ---------------
   173                              <1> 		;---------------------------------------
   174                              <1> 		; 【レジスタの保存】
   175                              <1> 		;---------------------------------------
   176 000006FF 60                  <1> 		pusha									; 
   177 00000700 1E                  <1> 		push	ds								; 
   178 00000701 06                  <1> 		push	es								; 
   179                              <1> 
   180                              <1> 		;---------------------------------------
   181                              <1> 		; データ用セグメントの設定
   182                              <1> 		;---------------------------------------
   183 00000702 66B81000            <1> 		mov		ax, 0x0010						; 
   184 00000706 8ED8                <1> 		mov		ds, ax							; 
   185 00000708 8EC0                <1> 		mov		es, ax							; 
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 例外を生成したアドレスの確認
   189                              <1> 		;---------------------------------------
   190 0000070A 0F20D0              <1> 		mov		eax, cr2						; // CR2
   191 0000070D 2500F0FFFF          <1> 		and		eax, ~0x0FFF					; // 4Kバイト以内のアクセス
   192 00000712 3D00701000          <1> 		cmp		eax, 0x0010_7000				; ptr = アクセスアドレス;
   193 00000717 7521                <1> 		jne		.10F							; if (0x0010_7000 == ptr)
   194                              <1> 												; {
   195                              <1> 		;---------------------------------------
   196                              <1> 		; ページの有効化
   197                              <1> 		;---------------------------------------
   198 00000719 C7051C641000077010- <1> 		mov		[0x00106000 + 0x107 * 4], dword 0x00107007	; // ページの有効化
   198 00000722 00                  <1>
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 描画パラメータの設定
   202                              <1> 		;---------------------------------------
   203 00000723 6A4068[70090000]68- <1> 		cdecl	memcpy, 0x0010_7000, DRAW_PARAM, rose_size	; 描画パラメータ：タスク3用
   203 0000072B 00701000E8F00C0000- <1>
   203 00000734 6683C40C            <1>
   204                              <1> 												; }
   205 00000738 EB15                <1> 		jmp		.10E							; else
   206                              <1> .10F:											; {
   207                              <1> 		;---------------------------------------
   208                              <1> 		; スタックの調整
   209                              <1> 		;---------------------------------------
   210 0000073A 83C404              <1> 		add		esp, 4							; pop es
   211 0000073D 83C404              <1> 		add		esp, 4							; pop ds
   212 00000740 61                  <1> 		popa									; 
   213 00000741 5D                  <1> 		pop		ebp								; 
   214                              <1> 
   215                              <1> 		;---------------------------------------
   216                              <1> 		; タスク終了処理
   217                              <1> 		;---------------------------------------
   218 00000742 9C                  <1> 		pushf									; // EFLAGS
   219 00000743 0E                  <1> 		push	cs								; // CS
   220 00000744 68[13100000]        <1> 		push	int_stop						; // スタック表示処理
   221                              <1> 
   222 00000749 B8[59070000]        <1> 		mov		eax, .s0						; // 割り込み種別
   223 0000074E CF                  <1> 		iret
   224                              <1> .10E:											; }
   225                              <1> 		;---------------------------------------
   226                              <1> 		; 【レジスタの復帰】
   227                              <1> 		;---------------------------------------
   228 0000074F 07                  <1> 		pop		es								; 
   229 00000750 1F                  <1> 		pop		ds								; 
   230 00000751 61                  <1> 		popa									; 
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; 【スタックフレームの破棄】
   234                              <1> 		;---------------------------------------
   235 00000752 89EC                <1> 		mov		esp, ebp
   236 00000754 5D                  <1> 		pop		ebp
   237                              <1> 
   238                              <1> 		;---------------------------------------
   239                              <1> 		; エラーコードの破棄
   240                              <1> 		;---------------------------------------
   241 00000755 83C404              <1> 		add		esp, 4							; // エラーコードの破棄
   242                              <1> 
   243 00000758 CF                  <1> 		iret
   244                              <1> 
   245 00000759 203C20504147452046- <1> .s0		db	" < PAGE FAULT > ", 0
   245 00000762 41554C54203E2000    <1>
   246                              <1> 
   159                                  %include	"tasks/task_1.s"
   160                              <1> ;************************************************************************
   161                              <1> ;	TASK-1
   162                              <1> ;************************************************************************
   163                              <1> task_1:
   164                              <1> 		;---------------------------------------
   165                              <1> 		; 文字列の表示
   166                              <1> 		;---------------------------------------
   167 0000076A 68[98070000]6A076A- <1> 		cdecl	draw_str, 63, 0, 0x07, .s0		; draw_str();
   167 00000772 006A3FE85704000066- <1>
   167 0000077B 83C410              <1>
   168                              <1> 
   169                              <1> .10L:											; while (;;)
   170                              <1> 												; {
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 時刻の表示
   173                              <1> 		;---------------------------------------
   174 0000077E A1[54020000]        <1> 		mov		eax, [RTC_TIME]					;   // 時刻の取得
   175 00000783 5068000700006A006A- <1> 		cdecl	draw_time, 72, 0, 0x0700, eax	;   // 時刻の表示
   175 0000078C 48E8B10700006683C4- <1>
   175 00000795 10                  <1>
   176                              <1> 
   177 00000796 EBE6                <1> 		jmp		.10L							; }
   178                              <1> 
   179                              <1> 		;---------------------------------------
   180                              <1> 		; データ
   181                              <1> 		;---------------------------------------
   182 00000798 5461736B2D3100      <1> .s0		db	"Task-1", 0
   183                              <1> 
   160                                  %include	"tasks/task_2.s"
   161                              <1> 
   162                              <1> ;************************************************************************
   163                              <1> ;	TASK
   164                              <1> ;************************************************************************
   165                              <1> task_2:
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 文字列の表示
   168                              <1> 		;---------------------------------------
   169 0000079F 68[62080000]6A076A- <1> 		cdecl	draw_str, 63, 1, 0x07, .s0		; draw_str(.s0);
   169 000007A7 016A3FE82204000066- <1>
   169 000007B0 83C410              <1>
   170                              <1> 
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 初期化
   173                              <1> 		;---------------------------------------
   174                              <1> 												; ---------+---------+---------|---------|---------|---------|
   175                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   176                              <1> 												; ---------+---------+---------|---------|---------|---------|
   177 000007B3 DB05[50080000]      <1> 		fild	dword [.c1000]					;     1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   178 000007B9 D9EB                <1> 		fldpi									;       pi |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   179 000007BB DA35[54080000]      <1> 		fidiv	dword [.c180]					;   pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   180 000007C1 D9EB                <1> 		fldpi									;       pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   181 000007C3 DCC0                <1> 		fadd	st0, st0						;     2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   182 000007C5 D9EE                <1> 		fldz									;   θ = 0 |    2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
   183                              <1> 												; ---------+---------+---------|---------|---------|---------|
   184                              <1> 												;   θ = 0 |    2*pi |d=pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
   185                              <1> 												; ---------+---------+---------|---------|---------|---------|
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; メインループ
   189                              <1> 		;---------------------------------------
   190                              <1> .10L:											; for ( ; ; )
   191                              <1> 												; {
   192                              <1> 		;---------------------------------------
   193                              <1> 		; sin(t)
   194                              <1> 		;---------------------------------------
   195                              <1> 												; ---------+---------+---------|---------|---------|---------|
   196                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   197                              <1> 												; ---------+---------+---------|---------|---------|---------|
   198                              <1> 												;       θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   199                              <1> 												; ---------+---------+---------|---------|---------|---------|
   200 000007C7 D8C2                <1> 		fadd	st0, st2						;   θ + d |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   201 000007C9 D9F8                <1> 		fprem									;   MOD(θ)|    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   202 000007CB D9C0                <1> 		fld		st0								;       θ |      θ |    2*pi |       d |    1000 |xxxxxxxxx|
   203 000007CD D9FE                <1> 		fsin									;   sin(θ)|      θ |    2*pi |       d |    1000 |xxxxxxxxx|
   204 000007CF D8CC                <1> 		fmul	st0, st4						;ST4sin(θ)|      θ |    2*pi |       d |    1000 |xxxxxxxxx|
   205                              <1> 												; ---------+---------+---------|---------|---------|---------|
   206 000007D1 DF35[58080000]      <1> 		fbstp	[.bcd]							;       θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   207                              <1> 												; ---------+---------+---------|---------|---------|---------|
   208                              <1> 
   209 000007D7 A1[58080000]        <1> 		mov		eax, [.bcd]						;   EAX = 1000 * sin(t);
   210 000007DC 89C3                <1> 		mov		ebx, eax						;   EBX = EAX;
   211                              <1> 
   212 000007DE 250F0F0000          <1> 		and		eax, 0x0F0F						;   // 上位4ビットをマスク
   213 000007E3 0D30300000          <1> 		or		eax, 0x3030						;   // 上位4ビットに0x3を設定
   214                              <1> 
   215 000007E8 C1EB04              <1> 		shr		ebx, 4							;   EBX >>= 4;
   216 000007EB 81E30F0F0000        <1> 		and		ebx, 0x0F0F						;   // 上位4ビットをマスク
   217 000007F1 81CB30300000        <1> 		or		ebx, 0x3030						;   // 上位4ビットに0x3を設定
   218                              <1> 
   219 000007F7 883D[6A080000]      <1> 		mov		[.s2 + 0], bh					;   // 1桁目
   220 000007FD 8825[6C080000]      <1> 		mov		[.s3 + 0], ah					;   // 小数1桁目
   221 00000803 881D[6D080000]      <1> 		mov		[.s3 + 1], bl					;   // 小数2桁目
   222 00000809 A2[6E080000]        <1> 		mov		[.s3 + 2], al					;   // 小数3桁目
   223                              <1> 
   224 0000080E B807000000          <1> 		mov		eax, 7							;   // 符号の表示
   225 00000813 0FA305[61080000]    <1> 		bt		[.bcd + 9], eax					;   CF = bcd[9] & 0x80;
   226 0000081A 7209                <1> 		jc		.10F							;   if (CF)
   227                              <1> 												;   {
   228 0000081C C605[69080000]2B    <1> 		mov		[.s1 + 0], byte '+'				;     *s1 = '+';
   229 00000823 EB07                <1> 		jmp		.10E							;   }
   230                              <1> .10F:											;   else
   231                              <1> 												;   {
   232 00000825 C605[69080000]2D    <1> 		mov		[.s1 + 0], byte '-'				;     *s1 = '-';
   233                              <1> .10E:											;   }
   234                              <1> 
   235 0000082C 68[69080000]6A076A- <1> 		cdecl	draw_str, 72, 1, 0x07, .s1		; draw_str(.s1);
   235 00000834 016A48E89503000066- <1>
   235 0000083D 83C410              <1>
   236                              <1> 
   237                              <1> 		;---------------------------------------
   238                              <1> 		; ウェイト
   239                              <1> 		;---------------------------------------
   240 00000840 6A14E8BF0B00006683- <1> 		cdecl	wait_tick, 20					;   wait_tick(20);
   240 00000849 C404                <1>
   241                              <1> 
   242 0000084B E977FFFFFF          <1> 		jmp		.10L							; }
   243                              <1> 
   244                              <1> 
   245                              <1> ALIGN 4, db 0
   246 00000850 E8030000            <1> .c1000:		dd	1000
   247 00000854 B4000000            <1> .c180:		dd	180
   248                              <1> 
   249 00000858 00<rep Ah>          <1> .bcd:	times 10 db	0x00
   250                              <1> 
   251 00000862 5461736B2D3200      <1> .s0		db	"Task-2", 0
   252 00000869 2D                  <1> .s1:	db	"-"
   253 0000086A 302E                <1> .s2:	db	"0."
   254 0000086C 30303000            <1> .s3:	db	"000", 0
   255                              <1> 
   161                                  %include	"tasks/task_3.s"
   162                              <1> ;************************************************************************
   163                              <1> ;	TASK
   164                              <1> ;************************************************************************
   165                              <1> task_3:
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 【スタックフレームの構築】
   168                              <1> 		;---------------------------------------
   169 00000870 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   170                              <1> 												; ---------------
   171 00000872 6A00                <1> 		push	dword 0							;    - 4| x0 = 0; // X座標原点
   172 00000874 6A00                <1> 		push	dword 0							;    - 8| y0 = 0; // Y座標原点
   173 00000876 6A00                <1> 		push	dword 0							;    -12| x  = 0; // X座標描画
   174 00000878 6A00                <1> 		push	dword 0							;    -16| y  = 0; // Y座標描画
   175 0000087A 6A00                <1> 		push	dword 0							;    -20| r  = 0; // 角度
   176                              <1> 
   177                              <1> 		;---------------------------------------
   178                              <1> 		; 初期化
   179                              <1> 		;---------------------------------------
   180 0000087C BE00701000          <1> 		mov		esi, 0x0010_7000				; ESI = 描画パラメータ
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; タイトル表示
   184                              <1> 		;---------------------------------------
   185 00000881 8B06                <1> 		mov		eax, [esi + rose.x0]			; X0座標
   186 00000883 8B5E04              <1> 		mov		ebx, [esi + rose.y0]			; Y0座標
   187                              <1> 
   188 00000886 C1E803              <1> 		shr		eax, 3							; EAX = EAX /  8; // X座標を文字位置に変換
   189 00000889 C1EB04              <1> 		shr		ebx, 4							; EBX = EBX / 16; // Y座標を文字位置に変換
   190 0000088C 4B                  <1> 		dec		ebx								; // 1文字分上に移動
   191 0000088D 8B4E24              <1> 		mov		ecx, [esi + rose.color_s]		; 文字色
   192 00000890 8D5630              <1> 		lea		edx, [esi + rose.title]			; タイトル
   193                              <1> 
   194 00000893 52515350E835030000- <1> 		cdecl	draw_str, eax, ebx, ecx, edx	; draw_str();
   194 0000089C 6683C410            <1>
   195                              <1> 
   196                              <1> 		;---------------------------------------
   197                              <1> 		; X軸の中点
   198                              <1> 		;---------------------------------------
   199 000008A0 8B06                <1> 		mov		eax, [esi + rose.x0]			; EAX  = X0座標
   200 000008A2 8B5E08              <1> 		mov		ebx, [esi + rose.x1]			; EBX  = X1座標
   201 000008A5 29C3                <1> 		sub		ebx, eax						; EBX  = (X1 - X0);
   202 000008A7 D1EB                <1> 		shr		ebx, 1							; EBX /= 2;
   203 000008A9 01C3                <1> 		add		ebx, eax						; EBX += X0
   204 000008AB 895DFC              <1> 		mov		[ebp - 4], ebx					; x0 = EBX; // X座標原点;
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; Y軸の中点
   208                              <1> 		;---------------------------------------
   209 000008AE 8B4604              <1> 		mov		eax, [esi + rose.y0]			; EAX  = Y0座標
   210 000008B1 8B5E0C              <1> 		mov		ebx, [esi + rose.y1]			; EBX  = Y1座標
   211 000008B4 29C3                <1> 		sub		ebx, eax						; EBX  = (Y1 - Y0);
   212 000008B6 D1EB                <1> 		shr		ebx, 1							; EBX /= 2;
   213 000008B8 01C3                <1> 		add		ebx, eax						; EBX += Y0
   214 000008BA 895DF8              <1> 		mov		[ebp - 8], ebx					; y0 = EBX; // Y座標原点;
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; X軸の描画
   218                              <1> 		;---------------------------------------
   219 000008BD 8B06                <1> 		mov		eax, [esi + rose.x0]			; EAX = X0座標;
   220 000008BF 8B5DF8              <1> 		mov		ebx, [ebp - 8]					; EBX = Y軸の中点;
   221 000008C2 8B4E08              <1> 		mov		ecx, [esi + rose.x1]			; ECX = X1座標;
   222                              <1> 
   223 000008C5 FF761853515350E893- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]	; X軸
   223 000008CE 0400006683C414      <1>
   224                              <1> 
   225                              <1> 		;---------------------------------------
   226                              <1> 		; Y軸の描画
   227                              <1> 		;---------------------------------------
   228 000008D5 8B4604              <1> 		mov		eax, [esi + rose.y0]			; Y0座標
   229 000008D8 8B5DFC              <1> 		mov		ebx, [ebp - 4]					; EBX = X軸の中点;
   230 000008DB 8B4E0C              <1> 		mov		ecx, [esi + rose.y1]			; Y1座標
   231                              <1> 
   232 000008DE FF761C51535053E87A- <1> 		cdecl	draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]	; Y軸
   232 000008E7 0400006683C414      <1>
   233                              <1> 
   234                              <1> 		;---------------------------------------
   235                              <1> 		; 枠の描画
   236                              <1> 		;---------------------------------------
   237 000008EE 8B06                <1> 		mov		eax, [esi + rose.x0]			; X0座標
   238 000008F0 8B5E04              <1> 		mov		ebx, [esi + rose.y0]			; Y0座標
   239 000008F3 8B4E08              <1> 		mov		ecx, [esi + rose.x1]			; X1座標
   240 000008F6 8B560C              <1> 		mov		edx, [esi + rose.y1]			; Y1座標
   241                              <1> 
   242 000008F9 FF762052515350E80E- <1> 		cdecl	draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]	; 枠
   242 00000902 0500006683C414      <1>
   243                              <1> 
   244                              <1> 		;---------------------------------------
   245                              <1> 		; 振幅をX軸の約95%とする
   246                              <1> 		;---------------------------------------
   247 00000909 8B4608              <1> 		mov		eax, [esi + rose.x1]			; EAX  = X1座標;
   248 0000090C 2B06                <1> 		sub		eax, [esi + rose.x0]			; EAX -= X0座標;
   249 0000090E D1E8                <1> 		shr		eax, 1							; EAX /= 2;      // 半分
   250 00000910 89C3                <1> 		mov		ebx, eax						; EBX  = EAX;
   251 00000912 C1EB04              <1> 		shr		ebx, 4							; EBX /= 16;
   252 00000915 29D8                <1> 		sub		eax, ebx						; EAX -= EBX;
   253                              <1> 
   254                              <1> 		;---------------------------------------
   255                              <1> 		; FPUの初期化(バラ曲線の初期化)
   256                              <1> 		;---------------------------------------
   257 00000917 FF7614FF761050E88D- <1> 		cdecl	fpu_rose_init										, eax											, dword [esi + rose.n]							, dword [esi + rose.d]
   257 00000920 0000006683C40C      <1>
   261                              <1> 
   262                              <1> 		;---------------------------------------
   263                              <1> 		; メインループ
   264                              <1> 		;---------------------------------------
   265                              <1> .10L:											; for ( ; ; )
   266                              <1> 												; {
   267                              <1> 		;---------------------------------------
   268                              <1> 		; 座標計算
   269                              <1> 		;---------------------------------------
   270 00000927 8D5DF4              <1> 		lea		ebx, [ebp -12]					;   EBX = &x;
   271 0000092A 8D4DF0              <1> 		lea		ecx, [ebp -16]					;   ECX = &y;
   272 0000092D 8B45EC              <1> 		mov		eax, [ebp -20]					;   EAX = r;
   273                              <1> 
   274 00000930 505153E89200000066- <1> 		cdecl	fpu_rose_update										, ebx											, ecx											, eax
   274 00000939 83C40C              <1>
   278                              <1> 
   279                              <1> 		;---------------------------------------
   280                              <1> 		; 角度更新(r = r % 36000)
   281                              <1> 		;---------------------------------------
   282 0000093C BA00000000          <1> 		mov		edx, 0							;   EDX = 0;
   283 00000941 40                  <1> 		inc		eax								;   EAX++;
   284 00000942 BBA08C0000          <1> 		mov		ebx, 360 * 100					;   DBX = 36000
   285 00000947 F7F3                <1> 		div		ebx								;   EDX = EDX:EAX % EBX;
   286 00000949 8955EC              <1> 		mov		[ebp -20], edx
   287                              <1> 
   288                              <1> 		;---------------------------------------
   289                              <1> 		; ドット描画
   290                              <1> 		;---------------------------------------
   291 0000094C 8B4DF4              <1> 		mov		ecx, [ebp -12]					;   ECX = X座標
   292 0000094F 8B55F0              <1> 		mov		edx, [ebp -16]					;   ECX = Y座標
   293                              <1> 
   294 00000952 034DFC              <1> 		add		ecx, [ebp - 4]					;   ECX += X座標原点;
   295 00000955 0355F8              <1> 		add		edx, [ebp - 8]					;   EDX += Y座標原点;
   296                              <1> 
   297 00000958 8B5E28              <1> 		mov		ebx, [esi + rose.color_f]		;   EBX = 表示色;
   298 0000095B CD82                <1> 		int		0x82							;   sys_call_82(表示色, X, Y);
   299                              <1> 
   300                              <1> 		;---------------------------------------
   301                              <1> 		; ウェイト
   302                              <1> 		;---------------------------------------
   303 0000095D 6A02E8A20A00006683- <1> 		cdecl	wait_tick, 2					;   wait_tick(2);
   303 00000966 C404                <1>
   304                              <1> 
   305                              <1> 		;---------------------------------------
   306                              <1> 		; ドット描画(消去)
   307                              <1> 		;---------------------------------------
   308 00000968 8B5E2C              <1> 		mov		ebx, [esi + rose.color_b]		;   EBX = 背景色;
   309 0000096B CD82                <1> 		int		0x82							;   sys_call_82(背景色, X, Y);
   310                              <1> 
   311                              <1> 
   312 0000096D EBB8                <1>         jmp     .10L                            ; }
   313                              <1> 
   314                              <1> 
   315 0000096F 00                  <1> ALIGN 4, db 0
   316                              <1> DRAW_PARAM:										; 描画パラメータ
   317                              <1> 	istruc	rose
   318 00000970 10000000            <1> 		at	rose.x0,		dd		 16			; 左上座標：X0
   319 00000974 20000000            <1> 		at	rose.y0,		dd		 32			; 左上座標：Y0
   320 00000978 A0010000            <1> 		at	rose.x1,		dd		416			; 右下座標：X1
   321 0000097C B0010000            <1> 		at	rose.y1,		dd		432			; 右下座標：Y1
   322                              <1> 
   323 00000980 05000000            <1> 		at	rose.n,			dd		5			; 変数：n
   324 00000984 02000000            <1> 		at	rose.d,			dd		2			; 変数：d
   325                              <1> 
   326 00000988 07000000            <1> 		at	rose.color_x,	dd		0x0007		; 描画色：X軸
   327 0000098C 07000000            <1> 		at	rose.color_y,	dd		0x0007		; 描画色：Y軸
   328 00000990 0F000000            <1> 		at	rose.color_z,	dd		0x000F		; 描画色：枠
   329 00000994 0F010000            <1> 		at	rose.color_s,	dd		0x010F		; 描画色：文字
   330 00000998 0F000000            <1> 		at	rose.color_f,	dd		0x000F		; 描画色：グラフ描画色
   331 0000099C 06000000            <1> 		at	rose.color_b,	dd		0x0006		; 描画色：グラフ消去色
   332                              <1> 
   333 000009A0 5461736B2D3300      <1> 		at	rose.title,		db		"Task-3", 0	; タイトル
   334                              <1> 
   335 000009A7 00<rep 9h>          <1> 	iend
   336                              <1> 
   337                              <1> 
   338                              <1> ;************************************************************************
   339                              <1> ;	バラ曲線：初期化
   340                              <1> ;------------------------------------------------------------------------
   341                              <1> ;	バラ曲線を描画するためにFPUのレジスタを初期化する
   342                              <1> ;
   343                              <1> ;	Z = A * sin(nθ)
   344                              <1> ;	  = A * sin( (n/d) * ((π/180) * t) )
   345                              <1> ;
   346                              <1> ;	このグラフを描画するために、X/Y座標を次の様に計算する
   347                              <1> ;
   348                              <1> ;	x = A * sin(nθ) * cos(θ)
   349                              <1> ;	y = A * sin(nθ) * sin(θ)
   350                              <1> ;
   351                              <1> ;	この時、kは(n / d)で指定する。また、ラディアン = 度 * (π / 180)
   352                              <1> ;	である事から、r = π / 180を先に計算しておく
   353                              <1> ;========================================================================
   354                              <1> ;■書式		: void fpu_rose_init(A, n, d);
   355                              <1> ;
   356                              <1> ;■引数
   357                              <1> ;	DWORD	: A
   358                              <1> ;	DWORD	: n
   359                              <1> ;	DWORD	: d
   360                              <1> ;
   361                              <1> ;■戻り値	: 無し
   362                              <1> ;************************************************************************
   363                              <1> fpu_rose_init:
   364                              <1> 		;---------------------------------------
   365                              <1> 		; 【スタックフレームの構築】
   366                              <1> 		;---------------------------------------
   367                              <1> 												; ------|--------
   368                              <1> 												;    +16| d
   369                              <1> 												;    +12| n
   370                              <1> 												;    + 8| A
   371                              <1> 												; ---------------
   372 000009B0 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   373 000009B1 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   374                              <1> 												; ---------------
   375 000009B3 68B4000000          <1> 		push	dword 180						;    - 4| dword i = 180;
   376                              <1> 
   377                              <1> 		;---------------------------------------
   378                              <1> 		; FPUを使った処理
   379                              <1> 		;
   380                              <1> 		; A(振幅), k(n/d),r(度→ラディアン)を
   381                              <1> 		; FPU内のレジスタにスタックしておく
   382                              <1> 		;---------------------------------------
   383                              <1> 												; ---------+---------+---------|---------|---------|---------|
   384                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   385                              <1> 												; ---------+---------+---------|---------|---------|---------|
   386 000009B8 D9EB                <1> 		fldpi									;   pi     |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   387 000009BA DA75FC              <1> 		fidiv	dword [ebp - 4]					;   pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   388 000009BD DB450C              <1> 		fild	dword [ebp +12]					;        n |  pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   389 000009C0 DA7510              <1> 		fidiv	dword [ebp +16]					;      n/d |         |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   390 000009C3 DB4508              <1> 		fild	dword [ebp + 8]					;        A |     n/d |  pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   391                              <1> 												; ---------+---------+---------|---------|---------|---------|
   392                              <1> 												;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   393                              <1> 												; ---------+---------+---------|---------|---------|---------|
   394                              <1> 		;---------------------------------------
   395                              <1> 		; スタックフレームの破棄
   396                              <1> 		;---------------------------------------
   397 000009C6 89EC                <1> 		mov		esp, ebp
   398 000009C8 5D                  <1> 		pop		ebp
   399                              <1> 
   400 000009C9 C3                  <1> 		ret
   401                              <1> 
   402                              <1> ;************************************************************************
   403                              <1> ;	バラ曲線：計算
   404                              <1> ;------------------------------------------------------------------------
   405                              <1> ;	角度を引数として受け取り、座標を計算する。
   406                              <1> ;	（他のパラメータはFPUレジスタに設定済みと仮定）
   407                              <1> ;========================================================================
   408                              <1> ;■書式		: void fpu_rose_update(t, X, Y);
   409                              <1> ;
   410                              <1> ;■引数
   411                              <1> ;	DWORD	: 角度[度]
   412                              <1> ;	DWORD	: Y座標へのポインタ
   413                              <1> ;	DWORD	: X座標へのポインタ
   414                              <1> ;
   415                              <1> ;■戻り値	: 無し
   416                              <1> ;************************************************************************
   417                              <1> fpu_rose_update:
   418                              <1> 		;---------------------------------------
   419                              <1> 		; 【スタックフレームの構築】
   420                              <1> 		;---------------------------------------
   421                              <1> 												; ---------------
   422                              <1> 												; EBP+16| t(角度)
   423                              <1> 												; EBP+12| Y(float)
   424                              <1> 												; EBP+ 8| X(float)
   425                              <1> 												; ---------------
   426 000009CA 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   427 000009CB 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   428                              <1> 												; ------|--------
   429                              <1> 
   430                              <1> 		;---------------------------------------
   431                              <1> 		; 【レジスタの保存】
   432                              <1> 		;---------------------------------------
   433 000009CD 50                  <1> 		push	eax
   434 000009CE 53                  <1> 		push	ebx
   435                              <1> 
   436                              <1> 		;---------------------------------------
   437                              <1> 		; X/Yの保存先を設定
   438                              <1> 		;---------------------------------------
   439 000009CF 8B4508              <1> 		mov		eax, [ebp +  8]					; EAX = pX; // X座標へのポインタ
   440 000009D2 8B5D0C              <1> 		mov		ebx, [ebp + 12]					; EBX = pY; // Y座標へのポインタ
   441                              <1> 
   442                              <1> 		;---------------------------------------
   443                              <1> 		; FPUを使った処理
   444                              <1> 		; 
   445                              <1> 		; 既にスタックしてある値を元に
   446                              <1> 		; t(角度)から座標を計算する
   447                              <1> 		;---------------------------------------
   448                              <1> 												; ---------+---------+---------|---------|---------|---------|
   449                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   450                              <1> 												; ---------+---------+---------|---------|---------|---------|
   451 000009D5 DB4510              <1> 		fild	dword [ebp +16]					;        t |       A |       k |       r |xxxxxxxxx|xxxxxxxxx|
   452 000009D8 D8CB                <1> 		fmul	st0, st3						;       rt |         |         |         |         |         |
   453 000009DA D9C0                <1> 		fld		st0								;       rt |      rt |       A |       k |       r |xxxxxxxxx|
   454                              <1> 												; ---------+---------+---------|---------|---------|---------|
   455                              <1> 		; rt を θと置き換える					;       θ |      θ |       A |       k |       r |         |
   456                              <1> 												; ---------+---------+---------|---------|---------|---------|
   457 000009DC D9FB                <1> 		fsincos									;   cos(θ)|  sin(θ)|      θ |       A |       k |       r |
   458 000009DE D9CA                <1> 		fxch	st2								;       θ |         |  cos(θ)|         |         |         |
   459 000009E0 D8CC                <1> 		fmul	st0, st4						;      kθ |         |         |         |         |         |
   460 000009E2 D9FE                <1> 		fsin									;  sin(kθ)|         |         |         |         |         |
   461 000009E4 D8CB                <1> 		fmul	st0, st3						; Asin(kθ)|         |         |         |         |         |
   462                              <1> 												; ---------+---------+---------|---------|---------|---------|
   463                              <1> 												; Asin(kθ)|  sin(θ)|  cos(θ)|       A |       k |       r |
   464                              <1> 												; ---------+---------+---------|---------|---------|---------|
   465                              <1> 		;---------------------------------------
   466                              <1> 		; x =  A * sin(kθ) * cos(θ);
   467                              <1> 		;---------------------------------------
   468                              <1> 												; ---------+---------+---------|---------|---------|---------|
   469                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   470                              <1> 												; ---------+---------+---------|---------|---------|---------|
   471                              <1> 												; Asin(kθ)|  sin(θ)|  cos(θ)|       A |       k |       r |
   472 000009E6 D9CA                <1> 		fxch	st2								;   cos(θ)|         |Asin(kθ)|         |         |         |
   473 000009E8 D8CA                <1> 		fmul	st0, st2						;        x |         |         |         |         |         |
   474 000009EA DB18                <1> 		fistp	dword [eax]						;   sin(θ)|Asin(kθ)|       A |       k |       r |xxxxxxxxx|
   475                              <1> 												; ---------+---------+---------|---------|---------|---------|
   476                              <1> 		;---------------------------------------
   477                              <1> 		; y = -A * sin(kθ) * sin(θ);
   478                              <1> 		;---------------------------------------
   479                              <1> 												; ---------+---------+---------|---------|---------|---------|
   480                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   481                              <1> 												; ---------+---------+---------|---------|---------|---------|
   482                              <1> 												;   sin(θ)|Asin(kθ)|       A |       k |       r |xxxxxxxxx|
   483 000009EC DEC9                <1> 		fmulp	st1, st0						;        y |       A |       k |       r |xxxxxxxxx|xxxxxxxxx|
   484 000009EE D9E0                <1> 		fchs									;       -y |         |         |         |xxxxxxxxx|xxxxxxxxx|
   485 000009F0 DB1B                <1> 		fistp	dword [ebx]						;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   486                              <1> 												; ---------+---------+---------|---------|---------|---------|
   487                              <1> 		;---------------------------------------
   488                              <1> 		; レジスタの復帰
   489                              <1> 		;---------------------------------------
   490 000009F2 5B                  <1> 		pop		ebx
   491 000009F3 58                  <1> 		pop		eax
   492                              <1> 
   493                              <1> 		;---------------------------------------
   494                              <1> 		; スタックフレームの破棄
   495                              <1> 		;---------------------------------------
   496 000009F4 89EC                <1> 		mov		esp, ebp
   497 000009F6 5D                  <1> 		pop		ebp
   498                              <1> 
   499 000009F7 C3                  <1> 		ret
   500                              <1> 
   162                                  
   163                                  ;************************************************************************
   164                                  ;	モジュール
   165                                  ;************************************************************************
   166                                  %include	"../modules/protect/vga.s"
   167                              <1> ;************************************************************************
   168                              <1> ;	読み込みプレーンの選択
   169                              <1> ;========================================================================
   170                              <1> ;■書式		: void vga_set_read_plane(plane);
   171                              <1> ;
   172                              <1> ;■引数
   173                              <1> ;	plane	: 読み込みプレーン
   174                              <1> ;
   175                              <1> ;■戻り値	: 無し
   176                              <1> ;************************************************************************
   177                              <1> vga_set_read_plane:
   178                              <1> 		;---------------------------------------
   179                              <1> 		; 【スタックフレームの構築】
   180                              <1> 		;---------------------------------------
   181                              <1> 												; EBP+ 8| プレーン（インデックス）
   182                              <1> 												; ------+----------------
   183 000009F8 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   184 000009F9 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   185                              <1> 												; ------+----------------
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 【レジスタの保存】
   189                              <1> 		;---------------------------------------
   190 000009FB 50                  <1> 		push	eax
   191 000009FC 52                  <1> 		push	edx
   192                              <1> 
   193                              <1> 		;---------------------------------------
   194                              <1> 		; 読み込みプレーンの選択
   195                              <1> 		;---------------------------------------
   196 000009FD 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
   197 00000A00 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
   198 00000A03 B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
   199 00000A05 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
   200 00000A09 66EF                <1> 		out		dx, ax							; // ポート出力
   201                              <1> 
   202                              <1> 		;---------------------------------------
   203                              <1> 		; 【レジスタの復帰】
   204                              <1> 		;---------------------------------------
   205 00000A0B 5A                  <1> 		pop		edx
   206 00000A0C 58                  <1> 		pop		eax
   207                              <1> 
   208                              <1> 		;---------------------------------------
   209                              <1> 		; 【スタックフレームの破棄】
   210                              <1> 		;---------------------------------------
   211 00000A0D 89EC                <1> 		mov		esp, ebp
   212 00000A0F 5D                  <1> 		pop		ebp
   213                              <1> 
   214 00000A10 C3                  <1> 		ret
   215                              <1> 
   216                              <1> 
   217                              <1> ;************************************************************************
   218                              <1> ;	書き込みプレーンを選択
   219                              <1> ;========================================================================
   220                              <1> ;■書式		: void vga_set_write_plane(plane);
   221                              <1> ;
   222                              <1> ;■引数
   223                              <1> ;	plane	: 書き込みプレーン
   224                              <1> ;
   225                              <1> ;■戻り値	: 無し
   226                              <1> ;************************************************************************
   227                              <1> vga_set_write_plane:
   228                              <1> 		;---------------------------------------
   229                              <1> 		; 【スタックフレームの構築】
   230                              <1> 		;---------------------------------------
   231                              <1> 												; EBP+ 8| プレーン（ビット指定）
   232                              <1> 												; ------+----------------
   233 00000A11 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   234 00000A12 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   235                              <1> 												; ------+----------------
   236                              <1> 
   237                              <1> 		;---------------------------------------
   238                              <1> 		; 【レジスタの保存】
   239                              <1> 		;---------------------------------------
   240 00000A14 50                  <1> 		push	eax
   241 00000A15 52                  <1> 		push	edx
   242                              <1> 
   243                              <1> 		;---------------------------------------
   244                              <1> 		; 書き込みプレーンの選択
   245                              <1> 		;---------------------------------------
   246 00000A16 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
   247 00000A19 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
   248 00000A1C B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
   249 00000A1E 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
   250 00000A22 66EF                <1> 		out		dx, ax							; // ポート出力
   251                              <1> 
   252                              <1> 		;---------------------------------------
   253                              <1> 		; 【レジスタの復帰】
   254                              <1> 		;---------------------------------------
   255 00000A24 5A                  <1> 		pop		edx
   256 00000A25 58                  <1> 		pop		eax
   257                              <1> 
   258                              <1> 		;---------------------------------------
   259                              <1> 		; 【スタックフレームの破棄】
   260                              <1> 		;---------------------------------------
   261 00000A26 89EC                <1> 		mov		esp, ebp
   262 00000A28 5D                  <1> 		pop		ebp
   263                              <1> 
   264 00000A29 C3                  <1> 		ret
   265                              <1> 
   266                              <1> 
   267                              <1> ;************************************************************************
   268                              <1> ;	フォントの書き込み
   269                              <1> ;========================================================================
   270                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   271                              <1> ;
   272                              <1> ;■引数
   273                              <1> ;	font	: FONTアドレス
   274                              <1> ;	vram	: VRAMアドレス
   275                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   276                              <1> ;	color	: 描画色
   277                              <1> ;
   278                              <1> ;■戻り値	: 無し
   279                              <1> ;************************************************************************
   280                              <1> vram_font_copy:
   281                              <1> 		;---------------------------------------
   282                              <1> 		; 【スタックフレームの構築】
   283                              <1> 		;---------------------------------------
   284                              <1> 												; EBP+20| 色（背景/前景色）
   285                              <1> 												; EBP+16| プレーン（ビット指定）
   286                              <1> 												; EBP+12| VRAMアドレス
   287                              <1> 												; EBP+ 8| FONTアドレス
   288                              <1> 												; ------+----------------
   289 00000A2A 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   290 00000A2B 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   291                              <1> 												; ------+----------------
   292                              <1> 
   293                              <1> 		;---------------------------------------
   294                              <1> 		; 【レジスタの保存】
   295                              <1> 		;---------------------------------------
   296 00000A2D 50                  <1> 		push	eax
   297 00000A2E 53                  <1> 		push	ebx
   298 00000A2F 51                  <1> 		push	ecx
   299 00000A30 52                  <1> 		push	edx
   300 00000A31 56                  <1> 		push	esi
   301 00000A32 57                  <1> 		push	edi
   302                              <1> 
   303                              <1> 		;---------------------------------------
   304                              <1> 		; 【処理の開始】
   305                              <1> 		;---------------------------------------
   306 00000A33 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   307 00000A36 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   308 00000A39 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   309 00000A3D 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   310                              <1> 
   311 00000A41 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   312 00000A43 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   313 00000A46 FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   314                              <1> 
   315 00000A48 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   316 00000A4A 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   317 00000A4D FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   318                              <1> 
   319                              <1> 		;---------------------------------------
   320                              <1> 		; 16ドットフォントのコピー
   321                              <1> 		;---------------------------------------
   322 00000A4F FC                  <1> 		cld										; DF  = 0; // アドレス加算
   323                              <1> 
   324 00000A50 B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   325                              <1> .10L:											; do
   326                              <1> 												; {
   327                              <1> 		;---------------------------------------
   328                              <1> 		; フォントマスクの作成
   329                              <1> 		;---------------------------------------
   330 00000A55 AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   331 00000A56 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   332 00000A58 F6D4                <1> 		not		ah								;   
   333                              <1> 
   334                              <1> 		;---------------------------------------
   335                              <1> 		; 前景色
   336                              <1> 		;---------------------------------------
   337 00000A5A 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   338                              <1> 
   339                              <1> 		;---------------------------------------
   340                              <1> 		; 背景色
   341                              <1> 		;---------------------------------------
   342 00000A5C F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   343 00000A62 7404                <1> 		jz		.11F							;   {
   344 00000A64 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   345 00000A66 EB02                <1> 		jmp		.11E							;   }
   346                              <1> .11F:											;   else
   347                              <1> 												;   {
   348 00000A68 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   349                              <1> .11E:											;   }
   350                              <1> 
   351                              <1> 		;---------------------------------------
   352                              <1> 		; 前景色と背景色を合成
   353                              <1> 		;---------------------------------------
   354 00000A6A 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   355                              <1> 
   356                              <1> 		;---------------------------------------
   357                              <1> 		; 新しい値を出力
   358                              <1> 		;---------------------------------------
   359 00000A6C 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   360                              <1> 
   361 00000A6E 83C750              <1> 		add		edi, 80							;   EDI += 80;
   362 00000A71 E2E2                <1> 		loop	.10L							; } while (--ECX);
   363                              <1> .10E:											; 
   364                              <1> 
   365                              <1> 		;---------------------------------------
   366                              <1> 		; 【レジスタの復帰】
   367                              <1> 		;---------------------------------------
   368 00000A73 5F                  <1> 		pop		edi
   369 00000A74 5E                  <1> 		pop		esi
   370 00000A75 5A                  <1> 		pop		edx
   371 00000A76 59                  <1> 		pop		ecx
   372 00000A77 5B                  <1> 		pop		ebx
   373 00000A78 58                  <1> 		pop		eax
   374                              <1> 
   375                              <1> 		;---------------------------------------
   376                              <1> 		; 【スタックフレームの破棄】
   377                              <1> 		;---------------------------------------
   378 00000A79 89EC                <1> 		mov		esp, ebp
   379 00000A7B 5D                  <1> 		pop		ebp
   380                              <1> 
   381 00000A7C C3                  <1> 		ret
   382                              <1> 
   383                              <1> 
   384                              <1> ;************************************************************************
   385                              <1> ;	ビットパターンの書き込み
   386                              <1> ;========================================================================
   387                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   388                              <1> ;
   389                              <1> ;■引数
   390                              <1> ;	bit		: 出力ビットパターン
   391                              <1> ;	vram	: VRAMアドレス
   392                              <1> ;	flag	: 1:セット, 0:クリア
   393                              <1> ;
   394                              <1> ;■戻り値	: 無し
   395                              <1> ;************************************************************************
   396                              <1> vram_bit_copy:
   397                              <1> 		;---------------------------------------
   398                              <1> 		; 【スタックフレームの構築】
   399                              <1> 		;---------------------------------------
   400                              <1> 												; EBP+20| 色（背景/前景色）
   401                              <1> 												; EBP+16| プレーン（ビット指定）
   402                              <1> 												; EBP+12| VRAMアドレス
   403                              <1> 												; EBP+ 8| 出力ビットパターン
   404                              <1> 												; ------+----------------
   405 00000A7D 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   406 00000A7E 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   407                              <1> 												; ------+----------------
   408                              <1> 
   409                              <1> 		;---------------------------------------
   410                              <1> 		; 【レジスタの保存】
   411                              <1> 		;---------------------------------------
   412 00000A80 50                  <1> 		push	eax
   413 00000A81 53                  <1> 		push	ebx
   414 00000A82 57                  <1> 		push	edi
   415                              <1> 
   416                              <1> 		;---------------------------------------
   417                              <1> 		; 【処理の開始】
   418                              <1> 		;---------------------------------------
   419 00000A83 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   420 00000A86 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   421 00000A8A 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   422                              <1> 
   423 00000A8E 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   424 00000A90 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   425 00000A93 FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   426                              <1> 
   427                              <1> 		;---------------------------------------
   428                              <1> 		; マスクデータの作成
   429                              <1> 		;---------------------------------------
   430 00000A95 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   431 00000A98 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   432 00000A9A F6D4                <1> 		not		ah								; 
   433                              <1> 
   434                              <1> 		;---------------------------------------
   435                              <1> 		; 現在値の出力を取得
   436                              <1> 		;---------------------------------------
   437 00000A9C 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   438 00000A9E 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   439 00000AA0 08E0                <1> 		or		al, ah							; AL |= AH;
   440                              <1> 
   441                              <1> 		;---------------------------------------
   442                              <1> 		; 新しい値を出力
   443                              <1> 		;---------------------------------------
   444 00000AA2 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   445                              <1> 
   446                              <1> 		;---------------------------------------
   447                              <1> 		; 【レジスタの復帰】
   448                              <1> 		;---------------------------------------
   449 00000AA4 5F                  <1> 		pop		edi
   450 00000AA5 5B                  <1> 		pop		ebx
   451 00000AA6 58                  <1> 		pop		eax
   452                              <1> 
   453                              <1> 		;---------------------------------------
   454                              <1> 		; 【スタックフレームの破棄】
   455                              <1> 		;---------------------------------------
   456 00000AA7 89EC                <1> 		mov		esp, ebp
   457 00000AA9 5D                  <1> 		pop		ebp
   458                              <1> 
   459 00000AAA C3                  <1> 		ret
   167                                  %include	"../modules/protect/draw_char.s"
   168                              <1> ;************************************************************************
   169                              <1> ;	文字の表示
   170                              <1> ;------------------------------------------------------------------------
   171                              <1> ;	グラフィックスモードでテキストを表示
   172                              <1> ;========================================================================
   173                              <1> ;■書式		: void draw_char(col, row, color, ch);
   174                              <1> ;
   175                              <1> ;■引数
   176                              <1> ;	col		: 列（0～79）
   177                              <1> ;	row		: 行（0～29）
   178                              <1> ;	color	: 描画色
   179                              <1> ;	ch		: 文字
   180                              <1> ;
   181                              <1> ;■戻り値	: 無し
   182                              <1> ;************************************************************************
   183                              <1> draw_char:
   184                              <1> 		;---------------------------------------
   185                              <1> 		; 【スタックフレームの構築】
   186                              <1> 		;---------------------------------------
   187                              <1> 												; ------|--------
   188                              <1> 												; EBP+20| 文字
   189                              <1> 												; EBP+16| 色
   190                              <1> 												; EBP+12| Y（行）
   191                              <1> 												; EBP+ 8| X（列）
   192                              <1> 												; ------+----------------
   193 00000AAB 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   194 00000AAC 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   195                              <1> 												; ------+----------------
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; 【レジスタの保存】
   199                              <1> 		;---------------------------------------
   200 00000AAE 50                  <1> 		push	eax
   201 00000AAF 53                  <1> 		push	ebx
   202 00000AB0 51                  <1> 		push	ecx
   203 00000AB1 52                  <1> 		push	edx
   204 00000AB2 56                  <1> 		push	esi
   205 00000AB3 57                  <1> 		push	edi
   206                              <1> 
   207                              <1> 		;---------------------------------------
   208                              <1> 		; テストアンドセット
   209                              <1> 		;---------------------------------------
   210                              <1> %ifdef	USE_TEST_AND_SET
   211 00000AB4 68[880B0000]E89908- <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   211 00000ABC 00006683C404        <1>
   212                              <1> %endif
   213                              <1> 
   214                              <1> 		;---------------------------------------
   215                              <1> 		; コピー元フォントアドレスを設定
   216                              <1> 		;---------------------------------------
   217 00000AC2 0FB67514            <1> 		movzx	esi, byte [ebp +20]				; CL  = 文字コード;
   218 00000AC6 C1E604              <1> 		shl		esi, 4							; CL *= 16; // 1文字16バイト
   219 00000AC9 0335[50020000]      <1> 		add		esi, [FONT_ADR]					; ESI = フォントアドレス;
   220                              <1> 
   221                              <1> 		;---------------------------------------
   222                              <1> 		; コピー先アドレスを取得
   223                              <1> 		; Adr = 0xA0000 + (640 / 8 * 16) * y + x
   224                              <1> 		;---------------------------------------
   225 00000ACF 8B7D0C              <1> 		mov		edi, [ebp +12]					; Y（行）
   226 00000AD2 C1E708              <1> 		shl		edi, 8							; EDI = Y * 256;
   227 00000AD5 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA0000]	; EDI = Y *   4 + Y;
   228 00000ADC 037D08              <1> 		add		edi, [ebp + 8]					; X（列）
   229                              <1> 
   230                              <1> 		;---------------------------------------
   231                              <1> 		; 1文字分のフォントを出力
   232                              <1> 		;---------------------------------------
   233 00000ADF 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
   234                              <1> 
   235 00000AE3 6A03E80EFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
   235 00000AEC C404                <1>
   236 00000AEE 6A08E81CFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
   236 00000AF7 C404                <1>
   237 00000AF9 536A085756E827FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
   237 00000B02 FF6683C410          <1>
   238                              <1> 
   239 00000B07 6A02E8EAFEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
   239 00000B10 C404                <1>
   240 00000B12 6A04E8F8FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
   240 00000B1B C404                <1>
   241 00000B1D 536A045756E803FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
   241 00000B26 FF6683C410          <1>
   242                              <1> 
   243 00000B2B 6A01E8C6FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
   243 00000B34 C404                <1>
   244 00000B36 6A02E8D4FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
   244 00000B3F C404                <1>
   245 00000B41 536A025756E8DFFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
   245 00000B4A FF6683C410          <1>
   246                              <1> 
   247 00000B4F 6A00E8A2FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
   247 00000B58 C404                <1>
   248 00000B5A 6A01E8B0FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
   248 00000B63 C404                <1>
   249 00000B65 536A015756E8BBFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
   249 00000B6E FF6683C410          <1>
   250                              <1> 
   251                              <1> %ifdef	USE_TEST_AND_SET
   252                              <1> 		;---------------------------------------
   253                              <1> 		; テストアンドセット
   254                              <1> 		;---------------------------------------
   255 00000B73 C705[880B0000]0000- <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   255 00000B7B 0000                <1>
   256                              <1> %endif
   257                              <1> 
   258                              <1> 		;---------------------------------------
   259                              <1> 		; 【レジスタの復帰】
   260                              <1> 		;---------------------------------------
   261 00000B7D 5F                  <1> 		pop		edi
   262 00000B7E 5E                  <1> 		pop		esi
   263 00000B7F 5A                  <1> 		pop		edx
   264 00000B80 59                  <1> 		pop		ecx
   265 00000B81 5B                  <1> 		pop		ebx
   266 00000B82 58                  <1> 		pop		eax
   267                              <1> 
   268                              <1> 		;---------------------------------------
   269                              <1> 		; 【スタックフレームの破棄】
   270                              <1> 		;---------------------------------------
   271 00000B83 89EC                <1> 		mov		esp, ebp
   272 00000B85 5D                  <1> 		pop		ebp
   273                              <1> 
   274 00000B86 C3                  <1> 		ret
   275                              <1> 
   276                              <1> %ifdef USE_TEST_AND_SET
   277 00000B87 00                  <1> ALIGN 4, db 0
   278 00000B88 00000000            <1> IN_USE:	dd	0
   279                              <1> %endif
   280                              <1> 
   168                                  %include	"../modules/protect/draw_font.s"
   169                              <1> ;************************************************************************
   170                              <1> ;	フォント一覧を表示
   171                              <1> ;========================================================================
   172                              <1> ;■書式		: void draw_font(col, row);
   173                              <1> ;
   174                              <1> ;■引数
   175                              <1> ;	col		: 列
   176                              <1> ;	row		: 行
   177                              <1> ;
   178                              <1> ;■戻り値	: 無し
   179                              <1> ;************************************************************************
   180                              <1> draw_font:
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 【スタックフレームの構築】
   183                              <1> 		;---------------------------------------
   184                              <1> 												; ------|--------
   185                              <1> 												; EBP+12| Y（行）
   186                              <1> 												; EBP+ 8| X（列）
   187                              <1> 												; ---------------
   188 00000B8C 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   189 00000B8D 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   190                              <1> 												; ---------------
   191                              <1> 
   192                              <1> 		;---------------------------------------
   193                              <1> 		; 【レジスタの保存】
   194                              <1> 		;---------------------------------------
   195 00000B8F 50                  <1> 		push	eax
   196 00000B90 53                  <1> 		push	ebx
   197 00000B91 51                  <1> 		push	ecx
   198 00000B92 52                  <1> 		push	edx
   199 00000B93 56                  <1> 		push	esi
   200 00000B94 57                  <1> 		push	edi
   201                              <1> 
   202                              <1> 		;---------------------------------------
   203                              <1> 		; 表示位置
   204                              <1> 		;---------------------------------------
   205 00000B95 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   206 00000B98 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   207                              <1> 
   208                              <1> 		;---------------------------------------
   209                              <1> 		; フォント一覧を表示
   210                              <1> 		;---------------------------------------
   211 00000B9B B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   212 00000BA0 81F900010000        <1> .10L:	cmp		ecx, 256						;      ECX < 256;
   213 00000BA6 731F                <1> 		jae		.10E							; 
   214                              <1> 												;      ECX++)
   215                              <1> 												; {
   216                              <1> 												;   // 桁位置の計算
   217 00000BA8 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   218 00000BAA 83E00F              <1> 		and		eax, 0x0F						;   EAX &= 0x0F
   219 00000BAD 01F0                <1> 		add		eax, esi						;   EAX += X;
   220                              <1> 												;   
   221                              <1> 												;   // 行位置の計算
   222 00000BAF 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   223 00000BB1 C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
   224 00000BB4 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   225                              <1> 
   226 00000BB6 516A075350E8EBFEFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
   226 00000BBF FF6683C410          <1>
   227                              <1> 
   228 00000BC4 41                  <1> 		inc		ecx								;   // for (... ECX++)
   229 00000BC5 EBD9                <1> 		jmp		.10L							; 
   230                              <1> .10E:											; }
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; 【レジスタの復帰】
   234                              <1> 		;---------------------------------------
   235 00000BC7 5F                  <1> 		pop		edi
   236 00000BC8 5E                  <1> 		pop		esi
   237 00000BC9 5A                  <1> 		pop		edx
   238 00000BCA 59                  <1> 		pop		ecx
   239 00000BCB 5B                  <1> 		pop		ebx
   240 00000BCC 58                  <1> 		pop		eax
   241                              <1> 
   242                              <1> 		;---------------------------------------
   243                              <1> 		; 【スタックフレームの破棄】
   244                              <1> 		;---------------------------------------
   245 00000BCD 89EC                <1> 		mov		esp, ebp
   246 00000BCF 5D                  <1> 		pop		ebp
   247                              <1> 
   248 00000BD0 C3                  <1> 		ret
   249                              <1> 
   169                                  %include	"../modules/protect/draw_str.s"
   170                              <1> ;************************************************************************
   171                              <1> ;	文字列の表示
   172                              <1> ;========================================================================
   173                              <1> ;■書式		: void draw_str(col, row, color, p);
   174                              <1> ;
   175                              <1> ;■引数
   176                              <1> ;	col		: 列
   177                              <1> ;	row		: 行
   178                              <1> ;	color	: 描画色
   179                              <1> ;	p		: 文字列のアドレス
   180                              <1> ;
   181                              <1> ;■戻り値	: 無し
   182                              <1> ;************************************************************************
   183                              <1> draw_str:
   184                              <1> 		;---------------------------------------
   185                              <1> 		; 【スタックフレームの構築】
   186                              <1> 		;---------------------------------------
   187                              <1> 												; ------|--------
   188                              <1> 												; EBP+20| *p（文字列のアドレス）
   189                              <1> 												; EBP+16| color（色）
   190                              <1> 												; EBP+12| row（行）
   191                              <1> 												; EBP+ 8| col（列）
   192                              <1> 												; ---------------
   193 00000BD1 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   194 00000BD2 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   195                              <1> 												; ---------------
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; 【レジスタの保存】
   199                              <1> 		;---------------------------------------
   200 00000BD4 50                  <1> 		push	eax
   201 00000BD5 53                  <1> 		push	ebx
   202 00000BD6 51                  <1> 		push	ecx
   203 00000BD7 52                  <1> 		push	edx
   204 00000BD8 56                  <1> 		push	esi
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; 文字列の表示
   208                              <1> 		;---------------------------------------
   209 00000BD9 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
   210 00000BDC 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
   211 00000BDF 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
   212 00000BE3 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
   213                              <1> 
   214 00000BE6 FC                  <1> 		cld										; DF = 0; // アドレス加算
   215                              <1> .10L:											; do
   216                              <1> 												; {
   217 00000BE7 AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
   218 00000BE8 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   219 00000BEA 741A                <1> 		je		.10E							;     break;
   220                              <1> 
   221                              <1> 		;---------------------------------------
   222                              <1> 		; 1文字表示
   223                              <1> 		;---------------------------------------
   224                              <1> %ifdef	USE_SYSTEM_CALL
   225 00000BEC CD81                <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
   226                              <1> %else
   227                              <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
   228                              <1> %endif
   229                              <1> 
   230                              <1> 		; 次の文字の位置を調整
   231 00000BEE 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
   232 00000BEF 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
   233 00000BF2 7C10                <1> 		jl		.12E							;   {
   234 00000BF4 B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
   235 00000BF9 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
   236 00000BFA 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
   237 00000BFD 7C05                <1> 		jl		.12E							;     {
   238 00000BFF BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
   239                              <1> 												;     }
   240                              <1> .12E:											;   }
   241 00000C04 EBE1                <1> 		jmp		.10L							;   
   242                              <1> .10E:											; } while (1);
   243                              <1> 
   244                              <1> 		;---------------------------------------
   245                              <1> 		; 【レジスタの復帰】
   246                              <1> 		;---------------------------------------
   247 00000C06 5E                  <1> 		pop		esi
   248 00000C07 5A                  <1> 		pop		edx
   249 00000C08 59                  <1> 		pop		ecx
   250 00000C09 5B                  <1> 		pop		ebx
   251 00000C0A 58                  <1> 		pop		eax
   252                              <1> 
   253                              <1> 		;---------------------------------------
   254                              <1> 		; 【スタックフレームの破棄】
   255                              <1> 		;---------------------------------------
   256 00000C0B 89EC                <1> 		mov		esp, ebp
   257 00000C0D 5D                  <1> 		pop		ebp
   258                              <1> 
   259 00000C0E C3                  <1> 		ret
   260                              <1> 
   170                                  %include	"../modules/protect/draw_color_bar.s"
   171                              <1> ;************************************************************************
   172                              <1> ;	カラーバーの表示
   173                              <1> ;========================================================================
   174                              <1> ;■書式		: void draw_color_bar(col, row);
   175                              <1> ;
   176                              <1> ;■引数
   177                              <1> ;	col		: 列
   178                              <1> ;	row		: 行
   179                              <1> ;
   180                              <1> ;■戻り値	: 無し
   181                              <1> ;************************************************************************
   182                              <1> draw_color_bar:
   183                              <1> 		;---------------------------------------
   184                              <1> 		; 【スタックフレームの構築】
   185                              <1> 		;---------------------------------------
   186                              <1> 												; ------|--------
   187                              <1> 												; EBP+ 8| X（列）
   188                              <1> 												; EBP+12| Y（行）
   189                              <1> 												; ---------------
   190 00000C0F 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   191 00000C10 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   192                              <1> 												; ---------------
   193                              <1> 		;---------------------------------------
   194                              <1> 		; 【レジスタの保存】
   195                              <1> 		;---------------------------------------
   196 00000C12 50                  <1> 		push	eax
   197 00000C13 53                  <1> 		push	ebx
   198 00000C14 51                  <1> 		push	ecx
   199 00000C15 52                  <1> 		push	edx
   200 00000C16 56                  <1> 		push	esi
   201 00000C17 57                  <1> 		push	edi
   202                              <1> 
   203                              <1> 		;---------------------------------------
   204                              <1> 		; 表示位置
   205                              <1> 		;---------------------------------------
   206 00000C18 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   207 00000C1B 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   208                              <1> 
   209                              <1> 		;---------------------------------------
   210                              <1> 		; カラーバーを表示
   211                              <1> 		;---------------------------------------
   212 00000C1E B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   213 00000C23 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
   214 00000C26 732E                <1> 		jae		.10E							; 
   215                              <1> 												;      ECX++)
   216                              <1> 												; {
   217                              <1> 												;   // 桁位置の計算
   218 00000C28 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   219 00000C2A 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
   220 00000C2D C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
   221 00000C30 01F0                <1> 		add		eax, esi						;   EAX += X;
   222                              <1> 												;   
   223                              <1> 												;   // 行位置の計算
   224 00000C32 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   225 00000C34 D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
   226 00000C36 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   227                              <1> 												;   
   228                              <1> 												;   // 表示色の取得
   229 00000C38 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
   230 00000C3A D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
   231 00000C3C 8B92[690C0000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
   232                              <1> 
   233 00000C42 68[600C0000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
   233 00000C4A E882FFFFFF6683C410  <1>
   234                              <1> 
   235 00000C53 41                  <1> 		inc		ecx								;   // for (... ECX++)
   236 00000C54 EBCD                <1> 		jmp		.10L							; 
   237                              <1> .10E:											; }
   238                              <1> 
   239                              <1> 		;---------------------------------------
   240                              <1> 		; 【レジスタの復帰】
   241                              <1> 		;---------------------------------------
   242 00000C56 5F                  <1> 		pop		edi
   243 00000C57 5E                  <1> 		pop		esi
   244 00000C58 5A                  <1> 		pop		edx
   245 00000C59 59                  <1> 		pop		ecx
   246 00000C5A 5B                  <1> 		pop		ebx
   247 00000C5B 58                  <1> 		pop		eax
   248                              <1> 
   249                              <1> 		;---------------------------------------
   250                              <1> 		; 【スタックフレームの破棄】
   251                              <1> 		;---------------------------------------
   252 00000C5C 89EC                <1> 		mov		esp, ebp
   253 00000C5E 5D                  <1> 		pop		ebp
   254                              <1> 
   255 00000C5F C3                  <1> 		ret
   256                              <1> 
   257 00000C60 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
   258                              <1> 
   259 00000C69 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
   260 00000C6D 00010009            <1> 		dw	0x0100, 0x0900
   261 00000C71 0002000A            <1> 		dw	0x0200, 0x0A00
   262 00000C75 0003000B            <1> 		dw	0x0300, 0x0B00
   263 00000C79 0004000C            <1> 		dw	0x0400, 0x0C00
   264 00000C7D 0005000D            <1> 		dw	0x0500, 0x0D00
   265 00000C81 0006000E            <1> 		dw	0x0600, 0x0E00
   266 00000C85 0007000F            <1> 		dw	0x0700, 0x0F00
   267                              <1> 
   171                                  %include	"../modules/protect/draw_pixel.s"
   172                              <1> ;************************************************************************
   173                              <1> ;	ピクセルの描画
   174                              <1> ;========================================================================
   175                              <1> ;■書式		: void draw_pixel(X, Y, color);
   176                              <1> ;
   177                              <1> ;■引数
   178                              <1> ;	X		: X座標
   179                              <1> ;	Y		: Y座標
   180                              <1> ;	color	: 描画色
   181                              <1> ;
   182                              <1> ;■戻り値	: 無し
   183                              <1> ;************************************************************************
   184                              <1> draw_pixel:
   185                              <1> 		;---------------------------------------
   186                              <1> 		; 【スタックフレームの構築】
   187                              <1> 		;---------------------------------------
   188                              <1> 												; ------|--------
   189                              <1> 												; EBP+16| 色
   190                              <1> 												; EBP+12| Y
   191                              <1> 												; EBP+ 8| X
   192                              <1> 												; ------|--------
   193 00000C89 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   194 00000C8A 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   195                              <1> 												; ------+--------
   196                              <1> 		;---------------------------------------
   197                              <1> 		; 【レジスタの保存】
   198                              <1> 		;---------------------------------------
   199 00000C8C 50                  <1> 		push	eax
   200 00000C8D 53                  <1> 		push	ebx
   201 00000C8E 51                  <1> 		push	ecx
   202 00000C8F 57                  <1> 		push	edi
   203                              <1> 
   204                              <1> 		;---------------------------------------
   205                              <1> 		; Y座標を80倍する（640/8）
   206                              <1> 		;---------------------------------------
   207 00000C90 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI  = Y座標
   208 00000C93 C1E704              <1> 		shl		edi, 4							; EDI *= 16;
   209 00000C96 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA_0000]	; EDI  = 0xA00000[EDI * 4 + EDI];
   210                              <1> 
   211                              <1> 		;---------------------------------------
   212                              <1> 		; X座標を1/8して加算
   213                              <1> 		;---------------------------------------
   214 00000C9D 8B5D08              <1> 		mov		ebx, [ebp + 8]					; EBX  = X座標;
   215 00000CA0 89D9                <1> 		mov		ecx, ebx						; ECX  = X座標;（一時保存）
   216 00000CA2 C1EB03              <1> 		shr		ebx, 3							; EBX /= 8;
   217 00000CA5 01DF                <1> 		add		edi, ebx						; EDI += EBX;
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; X座標を8で割った余りからビット位置を計算
   221                              <1> 		; (0=0x80, 1=0x40,... 7=0x01)
   222                              <1> 		;---------------------------------------
   223 00000CA7 83E107              <1> 		and		ecx, 0x07						; ECX = X & 0x07;
   224 00000CAA BB80000000          <1> 		mov		ebx, 0x80						; EBX = 0x80;
   225 00000CAF D3EB                <1> 		shr		ebx, cl							; EBX >>= ECX;
   226                              <1> 
   227                              <1> 		;---------------------------------------
   228                              <1> 		; 色指定
   229                              <1> 		;---------------------------------------
   230 00000CB1 8B4D10              <1> 		mov		ecx, [ebp +16]					; // 表示色
   231                              <1> 
   232                              <1> %ifdef	USE_TEST_AND_SET
   233 00000CB4 68[880B0000]E89906- <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   233 00000CBC 00006683C404        <1>
   234                              <1> %endif
   235                              <1> 
   236                              <1> 		;---------------------------------------
   237                              <1> 		; プレーン毎に出力
   238                              <1> 		;---------------------------------------
   239 00000CC2 6A03E82FFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 輝度(I)プレーンを選択
   239 00000CCB C404                <1>
   240 00000CCD 6A08E83DFDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 輝度(I)プレーンを選択
   240 00000CD6 C404                <1>
   241 00000CD8 516A085753E89BFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
   241 00000CE1 FF6683C410          <1>
   242                              <1> 
   243 00000CE6 6A02E80BFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 赤(R)プレーンを選択
   243 00000CEF C404                <1>
   244 00000CF1 6A04E819FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 赤(R)プレーンを選択
   244 00000CFA C404                <1>
   245 00000CFC 516A045753E877FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
   245 00000D05 FF6683C410          <1>
   246                              <1> 
   247 00000D0A 6A01E8E7FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 緑(G)プレーンを選択
   247 00000D13 C404                <1>
   248 00000D15 6A02E8F5FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 緑(G)プレーンを選択
   248 00000D1E C404                <1>
   249 00000D20 516A025753E853FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
   249 00000D29 FF6683C410          <1>
   250                              <1> 
   251 00000D2E 6A00E8C3FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 青(B)プレーンを選択
   251 00000D37 C404                <1>
   252 00000D39 6A01E8D1FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 青(B)プレーンを選択
   252 00000D42 C404                <1>
   253 00000D44 516A015753E82FFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
   253 00000D4D FF6683C410          <1>
   254                              <1> 
   255                              <1> 
   256                              <1> %ifdef	USE_TEST_AND_SET
   257                              <1> 		;---------------------------------------
   258                              <1> 		; テストアンドセット
   259                              <1> 		;---------------------------------------
   260 00000D52 C705[880B0000]0000- <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   260 00000D5A 0000                <1>
   261                              <1> %endif
   262                              <1> 
   263                              <1> 		;---------------------------------------
   264                              <1> 		; 【レジスタの復帰】
   265                              <1> 		;---------------------------------------
   266 00000D5C 5F                  <1> 		pop		edi
   267 00000D5D 59                  <1> 		pop		ecx
   268 00000D5E 5B                  <1> 		pop		ebx
   269 00000D5F 58                  <1> 		pop		eax
   270                              <1> 
   271                              <1> 		;---------------------------------------
   272                              <1> 		; 【スタックフレームの破棄】
   273                              <1> 		;---------------------------------------
   274 00000D60 89EC                <1> 		mov		esp, ebp
   275 00000D62 5D                  <1> 		pop		ebp
   276                              <1> 
   277 00000D63 C3                  <1> 		ret
   278                              <1> 
   172                                  %include	"../modules/protect/draw_line.s"
   173                              <1> ;************************************************************************
   174                              <1> ;	直線の描画
   175                              <1> ;========================================================================
   176                              <1> ;■書式		: void draw_line(X0, Y0, X1, Y1, color);
   177                              <1> ;
   178                              <1> ;■引数
   179                              <1> ;	X0		: 始点のX座標
   180                              <1> ;	Y0		: 始点のY座標
   181                              <1> ;	X1		: 終点のX座標
   182                              <1> ;	Y1		: 終点のY座標
   183                              <1> ;	color	: 描画色
   184                              <1> ;
   185                              <1> ;■戻り値	: 無し
   186                              <1> ;************************************************************************
   187                              <1> draw_line:
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 【スタックフレームの構築】
   190                              <1> 		;---------------------------------------
   191                              <1> 												; ---------------
   192                              <1> 												;    +24| 色
   193                              <1> 												;    +20| Y1
   194                              <1> 												;    +16| X1
   195                              <1> 												;    +12| Y0
   196                              <1> 												;    + 8| X0
   197                              <1> 												; ---------------
   198 00000D64 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   199 00000D65 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   200                              <1> 												; ---------------
   201 00000D67 6A00                <1> 		push	dword 0							;    - 4| sum   = 0; // 相対軸の積算値
   202 00000D69 6A00                <1> 		push	dword 0							;    - 8| x0    = 0; // X座標
   203 00000D6B 6A00                <1> 		push	dword 0							;    -12| dx    = 0; // X増分
   204 00000D6D 6A00                <1> 		push	dword 0							;    -16| inc_x = 0; // X座標増分(1 or -1)
   205 00000D6F 6A00                <1> 		push	dword 0							;    -20| y0    = 0; // Y座標
   206 00000D71 6A00                <1> 		push	dword 0							;    -24| dy    = 0; // Y増分
   207 00000D73 6A00                <1> 		push	dword 0							;    -28| inc_y = 0; // Y座標増分(1 or -1)
   208                              <1> 												; ------|--------
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 【レジスタの保存】
   212                              <1> 		;---------------------------------------
   213 00000D75 50                  <1> 		push	eax
   214 00000D76 53                  <1> 		push	ebx
   215 00000D77 51                  <1> 		push	ecx
   216 00000D78 52                  <1> 		push	edx
   217 00000D79 56                  <1> 		push	esi
   218 00000D7A 57                  <1> 		push	edi
   219                              <1> 
   220                              <1> 		;---------------------------------------
   221                              <1> 		; 幅を計算（X軸）
   222                              <1> 		;---------------------------------------
   223 00000D7B 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   224 00000D7E 8B5D10              <1> 		mov		ebx, [ebp +16]					; EBX = X1;
   225 00000D81 29C3                <1> 		sub		ebx, eax						; EBX = X1 - X0; // 幅
   226 00000D83 7D09                <1> 		jge		.10F							; if (幅 < 0)
   227                              <1> 												; {
   228 00000D85 F7DB                <1> 		neg		ebx								;   幅   *= -1;
   229 00000D87 BEFFFFFFFF          <1> 		mov		esi, -1							;   // X座標の増分
   230 00000D8C EB05                <1> 		jmp		.10E							; }
   231                              <1> .10F:											; else
   232                              <1> 												; {
   233 00000D8E BE01000000          <1> 		mov		esi, 1							;   // X座標の増分
   234                              <1> .10E:											; }
   235                              <1> 
   236                              <1> 		;---------------------------------------
   237                              <1> 		; 高さを計算（Y軸）
   238                              <1> 		;---------------------------------------
   239 00000D93 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX = Y0
   240 00000D96 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1
   241 00000D99 29CA                <1> 		sub		edx, ecx						; EDX = Y1 - Y0; // 高さ
   242 00000D9B 7D09                <1> 		jge		.20F							; if (高さ < 0)
   243                              <1> 												; {
   244 00000D9D F7DA                <1> 		neg		edx								;   高さ *= -1;
   245 00000D9F BFFFFFFFFF          <1> 		mov		edi, -1							;   // Y座標の増分
   246 00000DA4 EB05                <1> 		jmp		.20E							; }
   247                              <1> .20F:											; else
   248                              <1> 												; {
   249 00000DA6 BF01000000          <1> 		mov		edi, 1							;   // Y座標の増分
   250                              <1> .20E:											; }
   251                              <1> 
   252                              <1> 		;---------------------------------------
   253                              <1> 		; X軸
   254                              <1> 		;---------------------------------------
   255 00000DAB 8945F8              <1> 		mov		[ebp - 8], eax					;   // X軸:開始座標
   256 00000DAE 895DF4              <1> 		mov		[ebp -12], ebx					;   // X軸:描画幅
   257 00000DB1 8975F0              <1> 		mov		[ebp -16], esi					;   // X軸:増分(基準軸：1 or -1)
   258                              <1> 
   259                              <1> 		;---------------------------------------
   260                              <1> 		; Y軸
   261                              <1> 		;---------------------------------------
   262 00000DB4 894DEC              <1> 		mov		[ebp -20], ecx					;   // Y軸:開始座標
   263 00000DB7 8955E8              <1> 		mov		[ebp -24], edx					;   // Y軸:描画幅
   264 00000DBA 897DE4              <1> 		mov		[ebp -28], edi					;   // Y軸:増分(基準軸：1 or -1)
   265                              <1> 
   266                              <1> 		;---------------------------------------
   267                              <1> 		; 基準軸を決める
   268                              <1> 		;---------------------------------------
   269 00000DBD 39D3                <1> 		cmp		ebx, edx						; if (幅 <= 高さ)
   270 00000DBF 7F08                <1> 		jg		.22F							; {
   271                              <1> 												;   
   272 00000DC1 8D75EC              <1> 		lea		esi, [ebp -20]					;   // Y軸が基準軸
   273 00000DC4 8D7DF8              <1> 		lea		edi, [ebp - 8]					;   // X軸が相対軸
   274                              <1> 												;   
   275 00000DC7 EB06                <1> 		jmp		.22E							; }
   276                              <1> .22F:											; else
   277                              <1> 												; {
   278 00000DC9 8D75F8              <1> 		lea		esi, [ebp - 8]					;   // X軸が基準軸
   279 00000DCC 8D7DEC              <1> 		lea		edi, [ebp -20]					;   // Y軸が相対軸
   280                              <1> .22E:											; }
   281                              <1> 
   282                              <1> 		;---------------------------------------
   283                              <1> 		; 繰り返し回数(基準軸のドット数)
   284                              <1> 		;---------------------------------------
   285 00000DCF 8B4EFC              <1> 		mov		ecx, [esi - 4]					; ECX = 基準軸描画幅;
   286 00000DD2 83F900              <1> 		cmp		ecx, 0							; if (0 == ECX)
   287 00000DD5 7505                <1> 		jnz		.30E							; {
   288 00000DD7 B901000000          <1> 		mov		ecx, 1							;   ECX = 1;
   289                              <1> .30E:											; }
   290                              <1> 
   291                              <1> 		;---------------------------------------
   292                              <1> 		; 線を描画
   293                              <1> 		;---------------------------------------
   294                              <1> .50L:											; do
   295                              <1> 												; {
   296                              <1> %ifdef	USE_SYSTEM_CALL
   297 00000DDC 89C8                <1> 		mov		eax, ecx						;   // 繰り返し回数を保存
   298                              <1> 
   299 00000DDE 8B5D18              <1> 		mov		ebx, [ebp +24]					;   EBX = 表示色;
   300 00000DE1 8B4DF8              <1> 		mov		ecx, [ebp - 8]					;   ECX = X座標;
   301 00000DE4 8B55EC              <1> 		mov		edx, [ebp -20]					;   EDX = Y座標;
   302 00000DE7 CD82                <1> 		int		0x82							;   sys_call(1, X, Y, 色, 文字); BX(C), CX(X), DX(Y)
   303                              <1> 
   304 00000DE9 89C1                <1> 		mov		ecx, eax
   305                              <1> %else
   306                              <1> 		cdecl	draw_pixel, dword [ebp - 8], 							dword [ebp -20], 							dword [ebp +24]		;   // 点の描画
   309                              <1> %endif
   310                              <1> 												;   // 基準軸を更新(1ドット分)
   311 00000DEB 8B46F8              <1> 		mov		eax, [esi - 8]					;   EAX = 基準軸増分(1 or -1);
   312 00000DEE 0106                <1> 		add		[esi - 0], eax					;   
   313                              <1> 
   314                              <1> 												;   // 相対軸を更新
   315 00000DF0 8B45FC              <1> 		mov		eax, [ebp - 4]					;   EAX  = sum; // 相対軸の積算値;
   316 00000DF3 0347FC              <1> 		add		eax, [edi - 4]					;   EAX += dy;  // 増分(相対軸の描画幅)
   317 00000DF6 8B5EFC              <1> 		mov		ebx, [esi - 4]					;   EBX  = dx;  // 増分(基準軸の描画幅)
   318                              <1> 
   319 00000DF9 39D8                <1> 		cmp		eax, ebx						;   if (積算値 <= 相対軸の増分)
   320 00000DFB 7C07                <1> 		jl		.52E							;   {
   321 00000DFD 29D8                <1> 		sub		eax, ebx						;     EAX -= EBX; // 積算値から相対軸の増分を減算
   322                              <1> 												;     
   323                              <1> 												;     // 相対軸の座標を更新(1ドット分)
   324 00000DFF 8B5FF8              <1> 		mov		ebx, [edi - 8]					;     EBX =  相対軸増分;
   325 00000E02 011F                <1> 		add		[edi - 0], ebx					;     
   326                              <1> .52E:											;   }
   327 00000E04 8945FC              <1> 		mov		[ebp - 4], eax					;   // 積算値を更新
   328                              <1> 												;   
   329 00000E07 E2D3                <1> 		loop	.50L							;   
   330                              <1> .50E:											; } while (ループ回数--);
   331                              <1> 
   332                              <1> 		;---------------------------------------
   333                              <1> 		; 【レジスタの復帰】
   334                              <1> 		;---------------------------------------
   335 00000E09 5F                  <1> 		pop		edi
   336 00000E0A 5E                  <1> 		pop		esi
   337 00000E0B 5A                  <1> 		pop		edx
   338 00000E0C 59                  <1> 		pop		ecx
   339 00000E0D 5B                  <1> 		pop		ebx
   340 00000E0E 58                  <1> 		pop		eax
   341                              <1> 
   342                              <1> 		;---------------------------------------
   343                              <1> 		; 【スタックフレームの破棄】
   344                              <1> 		;---------------------------------------
   345 00000E0F 89EC                <1> 		mov		esp, ebp
   346 00000E11 5D                  <1> 		pop		ebp
   347                              <1> 
   348 00000E12 C3                  <1> 		ret
   349                              <1> 
   173                                  %include	"../modules/protect/draw_rect.s"
   174                              <1> ;************************************************************************
   175                              <1> ;	矩形の描画
   176                              <1> ;========================================================================
   177                              <1> ;■書式		: void draw_rect(X0, Y0, X1, Y1, color);
   178                              <1> ;
   179                              <1> ;■引数
   180                              <1> ;	X0		: 始点のX座標
   181                              <1> ;	Y0		: 始点のY座標
   182                              <1> ;	X1		: 終点のX座標
   183                              <1> ;	Y1		: 終点のY座標
   184                              <1> ;	color	: 描画色
   185                              <1> ;
   186                              <1> ;■戻り値	: 無し
   187                              <1> ;************************************************************************
   188                              <1> draw_rect:
   189                              <1> 		;---------------------------------------
   190                              <1> 		; 【スタックフレームの構築】
   191                              <1> 		;---------------------------------------
   192                              <1> 												; ------|--------
   193                              <1> 												; EBP+24| 色
   194                              <1> 												; EBP+20| Y1
   195                              <1> 												; EBP+16| X1
   196                              <1> 												; EBP+12| Y0
   197                              <1> 												; EBP+ 8| X0
   198                              <1> 												; ---------------
   199 00000E13 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   200 00000E14 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   201                              <1> 												; ------|--------
   202                              <1> 
   203                              <1> 		;---------------------------------------
   204                              <1> 		; 【レジスタの保存】
   205                              <1> 		;---------------------------------------
   206 00000E16 50                  <1> 		push		eax
   207 00000E17 53                  <1> 		push		ebx
   208 00000E18 51                  <1> 		push		ecx
   209 00000E19 52                  <1> 		push		edx
   210 00000E1A 56                  <1> 		push		esi
   211                              <1> 
   212                              <1> 		;---------------------------------------
   213                              <1> 		; 矩形を描画
   214                              <1> 		;---------------------------------------
   215 00000E1B 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   216 00000E1E 8B5D0C              <1> 		mov		ebx, [ebp +12]					; EBX = Y0;
   217 00000E21 8B4D10              <1> 		mov		ecx, [ebp +16]					; ECX = X1;
   218 00000E24 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1;
   219 00000E27 8B7518              <1> 		mov		esi, [ebp +24]					; ESI = 色;
   220                              <1> 
   221                              <1> 		;---------------------------------------
   222                              <1> 		; 座標軸の大小を確定
   223                              <1> 		;---------------------------------------
   224 00000E2A 39C8                <1> 		cmp		eax, ecx						; if (X1 < X0)
   225 00000E2C 7C01                <1> 		jl		.10E							; {
   226 00000E2E 91                  <1> 		xchg	eax, ecx						;   X0とX1を入れ替える;
   227                              <1> .10E:											; }
   228                              <1> 
   229 00000E2F 39D3                <1> 		cmp		ebx, edx						; if (Y1 < Y0)
   230 00000E31 7C02                <1> 		jl		.20E							; {
   231 00000E33 87DA                <1> 		xchg	ebx, edx						;   Y0とY1を入れ替える;
   232                              <1> .20E:											; }
   233                              <1> 
   234                              <1> 		;---------------------------------------
   235                              <1> 		; 矩形を描画
   236                              <1> 		;---------------------------------------
   237 00000E35 5653515350E825FFFF- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, esi	; 上線
   237 00000E3E FF6683C414          <1>
   238 00000E43 5652505350E817FFFF- <1> 		cdecl	draw_line, eax, ebx, eax, edx, esi	; 左線
   238 00000E4C FF6683C414          <1>
   239                              <1> 
   240 00000E51 4A                  <1> 		dec		edx									; EDX--; // 下線は1ドット上げる
   241 00000E52 5652515250E808FFFF- <1> 		cdecl	draw_line, eax, edx, ecx, edx, esi	; 下線
   241 00000E5B FF6683C414          <1>
   242 00000E60 42                  <1> 		inc		edx
   243                              <1> 
   244 00000E61 49                  <1> 		dec		ecx									; ECX--; // 右線は1ドット左に移動
   245 00000E62 5652515351E8F8FEFF- <1> 		cdecl	draw_line, ecx, ebx, ecx, edx, esi	; 右線
   245 00000E6B FF6683C414          <1>
   246                              <1> 
   247                              <1> 		;---------------------------------------
   248                              <1> 		; 【レジスタの復帰】
   249                              <1> 		;---------------------------------------
   250 00000E70 5E                  <1> 		pop		esi
   251 00000E71 5A                  <1> 		pop		edx
   252 00000E72 59                  <1> 		pop		ecx
   253 00000E73 5B                  <1> 		pop		ebx
   254 00000E74 58                  <1> 		pop		eax
   255                              <1> 
   256                              <1> 		;---------------------------------------
   257                              <1> 		; 【スタックフレームの破棄】
   258                              <1> 		;---------------------------------------
   259 00000E75 89EC                <1> 		mov		esp, ebp
   260 00000E77 5D                  <1> 		pop		ebp
   261                              <1> 
   262 00000E78 C3                  <1> 		ret
   174                                  %include	"../modules/protect/itoa.s"
   175                              <1> ;************************************************************************
   176                              <1> ;	数値を文字に変換
   177                              <1> ;========================================================================
   178                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
   179                              <1> ;
   180                              <1> ;■引数
   181                              <1> ;	num		: 変換する数値
   182                              <1> ;	buff	: 保存先バッファアドレス
   183                              <1> ;	size	: 保存先バッファサイズ
   184                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
   185                              <1> ;	flags	: フラグ
   186                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
   187                              <1> ;			:      : 0=空白を' '（スペース）で埋める
   188                              <1> ;			:   B1 : 1=＋/-符号を表示する
   189                              <1> ;			:      : 0=＋/-符号を表示しない
   190                              <1> ;			:   B0 : 1=符号付き正数として扱う
   191                              <1> ;			:      : 0=符号無し正数として扱う
   192                              <1> ;
   193                              <1> ;■戻り値	: 無し
   194                              <1> ;************************************************************************
   195                              <1> itoa:
   196                              <1> 		;---------------------------------------
   197                              <1> 		; 【スタックフレームの構築】
   198                              <1> 		;---------------------------------------
   199                              <1> 												; ------|--------
   200                              <1> 												;    +24| フラグ
   201                              <1> 												;    +20| 基数
   202                              <1> 												;    +16| バッファサイズ
   203                              <1> 												;    +12| バッファアドレス
   204                              <1> 												;    + 8| 数値
   205                              <1> 												; ------|--------
   206                              <1> 												;    + 4| EIP（戻り番地）
   207 00000E79 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   208 00000E7A 89E5                <1> 		mov		ebp, esp						; ------+--------
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 【レジスタの保存】
   212                              <1> 		;---------------------------------------
   213 00000E7C 50                  <1> 		push	eax
   214 00000E7D 53                  <1> 		push	ebx
   215 00000E7E 51                  <1> 		push	ecx
   216 00000E7F 52                  <1> 		push	edx
   217 00000E80 56                  <1> 		push	esi
   218 00000E81 57                  <1> 		push	edi
   219                              <1> 
   220                              <1> 		;---------------------------------------
   221                              <1> 		; 引数を取得
   222                              <1> 		;---------------------------------------
   223 00000E82 8B4508              <1> 		mov		eax, [ebp + 8]					; val  = 数値;
   224 00000E85 8B750C              <1> 		mov		esi, [ebp +12]					; dst  = バッファアドレス;
   225 00000E88 8B4D10              <1> 		mov		ecx, [ebp +16]					; size = 残りバッファサイズ;
   226                              <1> 
   227 00000E8B 89F7                <1> 		mov		edi, esi						; // バッファの最後尾
   228 00000E8D 01CF                <1> 		add		edi, ecx						; dst  = &dst[size - 1];
   229 00000E8F 4F                  <1> 		dec		edi								; 
   230                              <1> 
   231 00000E90 8B5D18              <1> 		mov		ebx, [ebp +24]					; flags = オプション;
   232                              <1> 
   233                              <1> 		;---------------------------------------
   234                              <1> 		; 符号付き判定
   235                              <1> 		;---------------------------------------
   236 00000E93 F7C301000000        <1> 		test	ebx, 0b0001						; if (flags & 0x01)// 符号付き
   237 00000E99 7408                <1> .10Q:	je		.10E							; {
   238 00000E9B 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   239 00000E9E 7D03                <1> .12Q:	jge		.12E							;   {
   240 00000EA0 83CB02              <1> 		or		ebx, 0b0010						;     flags |=  2; // 符号表示
   241                              <1> .12E:											;   }
   242                              <1> .10E:											; }
   243                              <1> 
   244                              <1> 		;---------------------------------------
   245                              <1> 		; 符号出力判定
   246                              <1> 		;---------------------------------------
   247 00000EA3 F7C302000000        <1> 		test	ebx, 0b0010						; if (flags & 0x02)// 符号出力判定
   248 00000EA9 7410                <1> .20Q:	je		.20E							; {
   249 00000EAB 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   250 00000EAE 7D07                <1> .22Q:	jge		.22F							;   {
   251 00000EB0 F7D8                <1> 		neg		eax								;     val *= -1;   // 符号反転
   252 00000EB2 C6062D              <1> 		mov		[esi], byte '-'					;     *dst = '-';  // 符号表示
   253 00000EB5 EB03                <1> 		jmp		.22E							;   }
   254                              <1> .22F:											;   else
   255                              <1> 												;   {
   256 00000EB7 C6062B              <1> 		mov		[esi], byte '+'					;     *dst = '+';  // 符号表示
   257                              <1> .22E:											;   }
   258 00000EBA 49                  <1> 		dec		ecx								;   size--;        // 残りバッファサイズの減算
   259                              <1> .20E:											; }
   260                              <1> 
   261                              <1> 		;---------------------------------------
   262                              <1> 		; ASCII変換
   263                              <1> 		;---------------------------------------
   264 00000EBB 8B5D14              <1> 		mov		ebx, [ebp +20]					; BX = 基数;
   265                              <1> .30L:											; do
   266                              <1> 												; {
   267 00000EBE BA00000000          <1> 		mov		edx, 0							;   
   268 00000EC3 F7F3                <1> 		div		ebx								;   DX = DX:AX % 基数;
   269                              <1> 												;   AX = DX:AX / 基数;
   270                              <1> 												;   
   271 00000EC5 89D6                <1> 		mov		esi, edx						;   // テーブル参照
   272 00000EC7 8A96[F20E0000]      <1> 		mov		dl, byte [.ascii + esi]			;   DL = ASCII[DX];
   273                              <1> 												;   
   274 00000ECD 8817                <1> 		mov		[edi], dl						;   *dst = DL;
   275 00000ECF 4F                  <1> 		dec		edi								;   dst--;
   276                              <1> 												;   
   277 00000ED0 83F800              <1> 		cmp		eax, 0							;   
   278 00000ED3 E0E9                <1> 		loopnz	.30L							; } while (AX);
   279                              <1> .30E:
   280                              <1> 
   281                              <1> 		;---------------------------------------
   282                              <1> 		; 空欄を埋める
   283                              <1> 		;---------------------------------------
   284 00000ED5 83F900              <1> 		cmp		ecx, 0							; if (size)
   285 00000ED8 740E                <1> .40Q:	je		.40E							; {
   286 00000EDA B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   287 00000EDC 66837D1804          <1> 		cmp		[ebp +24], word 0b0100			;   if (flags & 0x04)
   288 00000EE1 7502                <1> .42Q:	jne		.42E							;   {
   289 00000EE3 B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   290                              <1> .42E:											;   }
   291 00000EE5 FD                  <1> 		std										;   // DF = 1（-方向）
   292 00000EE6 F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   293                              <1> .40E:											; }
   294                              <1> 
   295                              <1> 		;---------------------------------------
   296                              <1> 		; 【レジスタの復帰】
   297                              <1> 		;---------------------------------------
   298 00000EE8 5F                  <1> 		pop		edi
   299 00000EE9 5E                  <1> 		pop		esi
   300 00000EEA 5A                  <1> 		pop		edx
   301 00000EEB 59                  <1> 		pop		ecx
   302 00000EEC 5B                  <1> 		pop		ebx
   303 00000EED 58                  <1> 		pop		eax
   304                              <1> 
   305                              <1> 		;---------------------------------------
   306                              <1> 		; 【スタックフレームの破棄】
   307                              <1> 		;---------------------------------------
   308 00000EEE 89EC                <1> 		mov		esp, ebp
   309 00000EF0 5D                  <1> 		pop		ebp
   310                              <1> 
   311 00000EF1 C3                  <1> 		ret
   312                              <1> 
   313 00000EF2 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   313 00000EFB 39414243444546      <1>
   314                              <1> 
   175                                  %include	"../modules/protect/rtc.s"
   176                              <1> ;************************************************************************
   177                              <1> ;	RTCから時刻データを取得する
   178                              <1> ;========================================================================
   179                              <1> ;■書式		: DWORD rtc_get_time(dst);
   180                              <1> ;
   181                              <1> ;■引数
   182                              <1> ;	dst		: 保存先アドレス
   183                              <1> ;
   184                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   185                              <1> ;************************************************************************
   186                              <1> rtc_get_time:
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 【スタックフレームの構築】
   189                              <1> 		;---------------------------------------
   190                              <1> 												; ------|--------
   191                              <1> 												; EBP+ 8| 保存先アドレス
   192                              <1> 												; ---------------
   193 00000F02 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   194 00000F03 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   195                              <1> 												; ---------------
   196                              <1> 		;---------------------------------------
   197                              <1> 		; 【レジスタの保存】
   198                              <1> 		;---------------------------------------
   199 00000F05 53                  <1> 		push	ebx
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; RTCから時刻を取得
   203                              <1> 		;---------------------------------------
   204 00000F06 B00A                <1> 		mov		al, 0x0A						; // レジスタA
   205 00000F08 E670                <1> 		out		0x70, al						; outp(0x70, AL);
   206 00000F0A E471                <1> 		in		al, 0x71						; AL = レジスタA;
   207 00000F0C A880                <1> 		test	al, 0x80						; if (DM & UIP) // 更新中
   208 00000F0E 7407                <1> 		je		.10F							; {
   209 00000F10 B801000000          <1> 		mov		eax, 1							;   ret = 1; // データ更新中
   210 00000F15 EB27                <1> 		jmp		.10E							; }
   211                              <1> .10F:											; else
   212                              <1> 												; {
   213                              <1> 												;   // RAM[0x04]:時
   214 00000F17 B004                <1> 		mov		al, 0x04						;   AL = 0x04;
   215 00000F19 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   216 00000F1B E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 時データ
   217                              <1> 												;   
   218 00000F1D C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   219                              <1> 												;   
   220                              <1> 												;   // RAM[0x02]:分
   221 00000F20 B002                <1> 		mov		al, 0x02						;   AL = 0x02;
   222 00000F22 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   223 00000F24 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 分データ
   224                              <1> 												;   
   225 00000F26 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   226                              <1> 												;   
   227                              <1> 												;   // RAM[0x00]:秒
   228 00000F29 B000                <1> 		mov		al, 0x00						;   AL = 0x00;
   229 00000F2B E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   230 00000F2D E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 秒データ
   231                              <1> 												;   
   232 00000F2F 25FFFFFF00          <1> 		and		eax, 0x00_FF_FF_FF				;   // 下位3バイトのみ有効
   233                              <1> 												;   
   234 00000F34 8B5D08              <1> 		mov		ebx, [ebp + 8]					;   dst = 保存先;
   235 00000F37 8903                <1> 		mov		[ebx], eax						;   [dst] = 時刻;
   236                              <1> 												;   
   237 00000F39 B800000000          <1> 		mov		eax, 0							;   ret = 0; // 正常終了
   238                              <1> .10E:											; }
   239                              <1> 
   240                              <1> 		;---------------------------------------
   241                              <1> 		; 【レジスタの復帰】
   242                              <1> 		;---------------------------------------
   243 00000F3E 5B                  <1> 		pop		ebx
   244                              <1> 
   245                              <1> 		;---------------------------------------
   246                              <1> 		; 【スタックフレームの破棄】
   247                              <1> 		;---------------------------------------
   248 00000F3F 89EC                <1> 		mov		esp, ebp
   249 00000F41 5D                  <1> 		pop		ebp
   250                              <1> 
   251 00000F42 C3                  <1> 		ret
   252                              <1> 
   176                                  %include	"../modules/protect/draw_time.s"
   177                              <1> ;************************************************************************
   178                              <1> ;	時刻の表示
   179                              <1> ;========================================================================
   180                              <1> ;■書式		: void draw_time(col, row, color, time);
   181                              <1> ;
   182                              <1> ;■引数
   183                              <1> ;	col		: 列
   184                              <1> ;	row		: 行
   185                              <1> ;	color	: 描画色
   186                              <1> ;	time	: 時刻データ
   187                              <1> ;
   188                              <1> ;■戻り値	: 無し
   189                              <1> ;************************************************************************
   190                              <1> draw_time:
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 【スタックフレームの構築】
   193                              <1> 		;---------------------------------------
   194                              <1> 												; ------|--------
   195                              <1> 												; EBP+20| 時刻データ
   196                              <1> 												; EBP+16| 色
   197                              <1> 												; EBP+12| Y（行）
   198                              <1> 												; EBP+ 8| X（列）
   199                              <1> 												; ---------------
   200 00000F43 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   201 00000F44 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   202                              <1> 												; ---------------
   203                              <1> 		;---------------------------------------
   204                              <1> 		; 【レジスタの保存】
   205                              <1> 		;---------------------------------------
   206 00000F46 50                  <1> 		push	eax
   207 00000F47 53                  <1> 		push	ebx
   208                              <1> 
   209                              <1> 		;---------------------------------------
   210                              <1> 		; 
   211                              <1> 		;---------------------------------------
   212 00000F48 8B4514              <1> 		mov		eax, [ebp +20]					; EAX = 時刻データ;
   213 00000F4B 3B05[C80F0000]      <1> 		cmp		eax, [.last]					; if (今回 != 前回)
   214 00000F51 7467                <1> 		je		.10E							; {
   215                              <1> 												;   
   216 00000F53 A3[C80F0000]        <1> 		mov		[.last], eax					;   // 前回の時刻値を更新
   217                              <1> 												;   
   218 00000F58 BB00000000          <1> 		mov		ebx, 0							;   EBX = 0;
   219 00000F5D 88C3                <1> 		mov		bl, al							;   EBX = 秒;
   220 00000F5F 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .sec, 2, 16, 0b0100	;   // 時刻を文字列に変換
   220 00000F66 [D60F0000]53E809FF- <1>
   220 00000F6E FFFF6683C414        <1>
   221                              <1> 
   222 00000F74 88E3                <1> 		mov		bl, ah							;   EBX = 分;
   223 00000F76 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .min, 2, 16, 0b0100	;   // 時刻を文字列に変換
   223 00000F7D [D30F0000]53E8F2FE- <1>
   223 00000F85 FFFF6683C414        <1>
   224                              <1> 
   225 00000F8B C1E810              <1> 		shr		eax, 16							;   EBX = 時;
   226 00000F8E 6A046A106A0268-     <1> 		cdecl	itoa, eax, .hour, 2, 16, 0b0100	;   // 時刻を文字列に変換
   226 00000F95 [D00F0000]50E8DAFE- <1>
   226 00000F9D FFFF6683C414        <1>
   227                              <1> 
   228                              <1> 												;   // 時刻を表示
   229 00000FA3 68[D00F0000]FF7510- <1> 		cdecl	draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
   229 00000FAB FF750CFF7508E81BFC- <1>
   229 00000FB4 FFFF6683C410        <1>
   230                              <1> 												;     
   231                              <1> 												;   }
   232                              <1> .10E:											; }
   233                              <1> 
   234                              <1> 		;---------------------------------------
   235                              <1> 		; 【レジスタの復帰】
   236                              <1> 		;---------------------------------------
   237 00000FBA 5B                  <1> 		pop		ebx
   238 00000FBB 58                  <1> 		pop		eax
   239                              <1> 
   240                              <1> 		;---------------------------------------
   241                              <1> 		; 【スタックフレームの破棄】
   242                              <1> 		;---------------------------------------
   243 00000FBC 89EC                <1> 		mov		esp, ebp
   244 00000FBE 5D                  <1> 		pop		ebp
   245                              <1> 
   246 00000FBF C3                  <1> 		ret
   247                              <1> 
   248                              <1> ALIGN 2, db 0
   249 00000FC0 0000000000000000    <1> .temp:	dq	0
   250 00000FC8 0000000000000000    <1> .last:	dq	0
   251 00000FD0 5A5A3A              <1> .hour:	db	"ZZ:"
   252 00000FD3 5A5A3A              <1> .min:	db	"ZZ:"
   253 00000FD6 5A5A00              <1> .sec:	db	"ZZ", 0
   254                              <1> 
   177                                  %include	"../modules/protect/interrupt.s"
   178                              <1> ;************************************************************************
   179                              <1> ;	割り込みベクタの初期化
   180                              <1> ;************************************************************************
   181 00000FD9 90<rep 3h>          <1> ALIGN 4
   182 00000FDC FF07                <1> IDTR:	dw 		8 * 256 - 1					; idt_limit
   183 00000FDE 00001000            <1> 		dd 		VECT_BASE					; idt location
   184                              <1> 
   185                              <1> ;************************************************************************
   186                              <1> ;	割り込みテーブルを初期化
   187                              <1> ;------------------------------------------------------------------------
   188                              <1> ;	
   189                              <1> ;	まず、全ての割り込みアドレスにデフォルト処理を設定すし、その後、
   190                              <1> ;	必要な割り込みだけ設定しなおす。
   191                              <1> ;	
   192                              <1> ;	割り込みアドレスは、VECT_BASEで指定され、256の割り込みがあるので
   193                              <1> ;	0x0800バイト占有することになる。
   194                              <1> ;	
   195                              <1> ;	           |____________| _V___
   196                              <1> ;	  VECT_BASE| IntDefault |  |   
   197                              <1> ;	           | IntDefault |  | 8 * 256
   198                              <1> ;	           |      :     |  |   
   199                              <1> ;	           |____________| _|___
   200                              <1> ;	      +0800|////////////|
   201                              <1> ;	           |            |
   202                              <1> ;	
   203                              <1> ;	一つの割り込み設定は8バイトで構成される。
   204                              <1> ;	
   205                              <1> ;	           |____________|____________| 
   206                              <1> ;	        [0]| Address Lo[15: 0]       | 
   207                              <1> ;	        [2]| Selector                | 
   208                              <1> ;	        [4]| Flags                   | 
   209                              <1> ;	        [6]|_Address Lo[32:16]_______| 
   210                              <1> ;	           |/////////////////////////| 
   211                              <1> ;	           |            |            | 
   212                              <1> ;	
   213                              <1> ;========================================================================
   214                              <1> ;■書式		: void init_int(void);
   215                              <1> ;
   216                              <1> ;■引数		: 無し
   217                              <1> ;
   218                              <1> ;■戻り値	: 無し
   219                              <1> ;************************************************************************
   220                              <1> init_int:
   221                              <1> 		;---------------------------------------
   222                              <1> 		; 【レジスタの保存】
   223                              <1> 		;---------------------------------------
   224 00000FE2 50                  <1> 		push	eax
   225 00000FE3 53                  <1> 		push	ebx
   226 00000FE4 51                  <1> 		push	ecx
   227 00000FE5 57                  <1> 		push	edi
   228                              <1> 
   229                              <1> 		;---------------------------------------
   230                              <1> 		; 全ての割り込みにデフォルト処理を設定
   231                              <1> 		;---------------------------------------
   232 00000FE6 8D05[2C110000]      <1> 		lea		eax, [int_default]				; EAX   = 割り込み処理アドレス;
   233 00000FEC BB008E0800          <1> 		mov		ebx, 0x0008_8E00				; EBX   = セグメントセレクタ;
   234 00000FF1 6693                <1> 		xchg	ax, bx							; // 下位ワードを交換
   235                              <1> 
   236 00000FF3 B900010000          <1> 		mov		ecx, 256						; ECX   = 割り込みベクタ数
   237 00000FF8 BF00001000          <1> 		mov		edi, VECT_BASE					; EDI   = 割り込みベクタテーブル
   238                              <1> 
   239                              <1> .10L:											; do
   240                              <1> 												; {
   241 00000FFD 891F                <1> 		mov		[edi + 0], ebx					;   [EDI + 0] = 割り込みディスクリプタ（下位）
   242 00000FFF 894704              <1> 		mov		[edi + 4], eax					;   [EDI + 4] = 割り込みディスクリプタ（上位）
   243 00001002 83C708              <1> 		add		edi, 8							;   EDI += 8;
   244 00001005 E2F6                <1> 		loop	.10L							; } while (ECX--);
   245                              <1> 
   246                              <1> 		;---------------------------------------
   247                              <1> 		; 割り込みディスクリプタの設定
   248                              <1> 		;---------------------------------------
   249 00001007 0F011D[DC0F0000]    <1> 		lidt	[IDTR]							; // 割り込みディスクリプタテーブルをロード
   250                              <1> 
   251                              <1> 		;---------------------------------------
   252                              <1> 		; 【レジスタの復帰】
   253                              <1> 		;---------------------------------------
   254 0000100E 5F                  <1> 		pop		edi
   255 0000100F 59                  <1> 		pop		ecx
   256 00001010 5B                  <1> 		pop		ebx
   257 00001011 58                  <1> 		pop		eax
   258                              <1> 
   259 00001012 C3                  <1> 		ret
   260                              <1> 
   261                              <1> ;************************************************************************
   262                              <1> ;	スタックの内容を表示して無限ループを実行
   263                              <1> ;************************************************************************
   264                              <1> int_stop:
   265 00001013 FB                  <1> 		sti										; // 割り込み許可
   266                              <1> 
   267                              <1> 		;---------------------------------------
   268                              <1> 		; EAXで示される文字列を表示
   269                              <1> 		;---------------------------------------
   270 00001014 50680F0600006A0F6A- <1> 		cdecl	draw_str, 25, 15, 0x060F, eax	; draw_str(EAX);
   270 0000101D 19E8AEFBFFFF6683C4- <1>
   270 00001026 10                  <1>
   271                              <1> 
   272                              <1> 		;---------------------------------------
   273                              <1> 		; スタックのデータを文字列に変換
   274                              <1> 		;---------------------------------------
   275 00001027 8B0424              <1> 		mov		eax, [esp + 0]					; EAX = ESP[ 0];
   276 0000102A 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p1, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   276 00001031 [EF100000]50E83EFE- <1>
   276 00001039 FFFF6683C414        <1>
   277                              <1> 
   278 0000103F 8B442404            <1> 		mov		eax, [esp + 4]					; EAX = ESP[ 4];
   279 00001043 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p2, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   279 0000104A [00110000]50E825FE- <1>
   279 00001052 FFFF6683C414        <1>
   280                              <1> 
   281 00001058 8B442408            <1> 		mov		eax, [esp + 8]					; EAX = ESP[ 8];
   282 0000105C 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p3, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   282 00001063 [11110000]50E80CFE- <1>
   282 0000106B FFFF6683C414        <1>
   283                              <1> 
   284 00001071 8B44240C            <1> 		mov		eax, [esp +12]					; EAX = ESP[12];
   285 00001075 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p4, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   285 0000107C [22110000]50E8F3FD- <1>
   285 00001084 FFFF6683C414        <1>
   286                              <1> 
   287                              <1> 		;---------------------------------------
   288                              <1> 		; 文字列の表示
   289                              <1> 		;---------------------------------------
   290 0000108A 68[E8100000]68040F- <1> 		cdecl	draw_str, 25, 16, 0x0F04, .s1	; draw_str("ESP+ 0:-------- ");
   290 00001092 00006A106A19E834FB- <1>
   290 0000109B FFFF6683C410        <1>
   291 000010A1 68[F9100000]68040F- <1> 		cdecl	draw_str, 25, 17, 0x0F04, .s2	; draw_str("   + 4:-------- ");
   291 000010A9 00006A116A19E81DFB- <1>
   291 000010B2 FFFF6683C410        <1>
   292 000010B8 68[0A110000]68040F- <1> 		cdecl	draw_str, 25, 18, 0x0F04, .s3	; draw_str("   + 8:-------- ");
   292 000010C0 00006A126A19E806FB- <1>
   292 000010C9 FFFF6683C410        <1>
   293 000010CF 68[1B110000]68040F- <1> 		cdecl	draw_str, 25, 19, 0x0F04, .s4	; draw_str("   +12:-------- ");
   293 000010D7 00006A136A19E8EFFA- <1>
   293 000010E0 FFFF6683C410        <1>
   294                              <1> 
   295                              <1> 		;---------------------------------------
   296                              <1> 		; 無限ループ
   297                              <1> 		;---------------------------------------
   298 000010E6 EBFE                <1> 		jmp		$								; while (1) ; // 無限ループ
   299                              <1> 
   300 000010E8 4553502B20303A      <1> .s1		db	"ESP+ 0:"
   301 000010EF 5F5F5F5F5F5F5F5F20- <1> .p1		db	"________ ", 0
   301 000010F8 00                  <1>
   302 000010F9 2020202B20343A      <1> .s2		db	"   + 4:"
   303 00001100 5F5F5F5F5F5F5F5F20- <1> .p2		db	"________ ", 0
   303 00001109 00                  <1>
   304 0000110A 2020202B20383A      <1> .s3		db	"   + 8:"
   305 00001111 5F5F5F5F5F5F5F5F20- <1> .p3		db	"________ ", 0
   305 0000111A 00                  <1>
   306 0000111B 2020202B31323A      <1> .s4		db	"   +12:"
   307 00001122 5F5F5F5F5F5F5F5F20- <1> .p4		db	"________ ", 0
   307 0000112B 00                  <1>
   308                              <1> 
   309                              <1> ;************************************************************************
   310                              <1> ;	割り込み処理：デフォルトの処理
   311                              <1> ;************************************************************************
   312                              <1> int_default:
   313 0000112C 9C                  <1> 		pushf									; // EFLAGS(IF==0)
   314 0000112D 0E                  <1> 		push	cs								; // CS
   315 0000112E 68[13100000]        <1> 		push	int_stop						; // スタック表示処理
   316                              <1> 
   317 00001133 B8[39110000]        <1> 		mov		eax, .s0						; // 割り込み種別
   318 00001138 CF                  <1> 		iret
   319                              <1> 
   320 00001139 203C2020202053544F- <1> .s0		db	" <    STOP    > ", 0
   320 00001142 50202020203E2000    <1>
   321                              <1> 
   322                              <1> ;************************************************************************
   323                              <1> ;	割り込み処理：ゼロ除算
   324                              <1> ;************************************************************************
   325                              <1> int_zero_div:
   326 0000114A 9C                  <1> 		pushf									; // EFLAGS
   327 0000114B 0E                  <1> 		push	cs								; // CS
   328 0000114C 68[13100000]        <1> 		push	int_stop						; // スタック表示処理
   329                              <1> 
   330 00001151 B8[57110000]        <1> 		mov		eax, .s0						; // 割り込み種別
   331 00001156 CF                  <1> 		iret
   332                              <1> 
   333 00001157 203C20205A45524F20- <1> .s0		db	" <  ZERO DIV  > ", 0
   333 00001160 44495620203E2000    <1>
   334                              <1> 
   178                                  %include	"../modules/protect/pic.s"
   179                              <1> ;************************************************************************
   180                              <1> ;	割り込みコントローラの初期化
   181                              <1> ;========================================================================
   182                              <1> ;■書式		: void init_pic(void);
   183                              <1> ;
   184                              <1> ;■引数		: 無し
   185                              <1> ;
   186                              <1> ;■戻り値	: 無し
   187                              <1> ;************************************************************************
   188                              <1> init_pic:
   189                              <1> 		;---------------------------------------
   190                              <1> 		; 【レジスタの保存】
   191                              <1> 		;---------------------------------------
   192 00001168 50                  <1> 		push	eax
   193                              <1> 
   194                              <1> 		;---------------------------------------
   195                              <1> 		; マスタPICの設定
   196                              <1> 		;---------------------------------------
   197                              <1> 		outp	0x20, 0x11						; // MASTER.ICW1 = 0x11;
    72 00001169 B011                <2>  mov al, %2
    73 0000116B E620                <2>  out %1, al
   198                              <1> 		outp	0x21, 0x20						; // MASTER.ICW2 = 0x20;
    72 0000116D B020                <2>  mov al, %2
    73 0000116F E621                <2>  out %1, al
   199                              <1> 		outp	0x21, 0x04						; // MASTER.ICW3 = 0x04;
    72 00001171 B004                <2>  mov al, %2
    73 00001173 E621                <2>  out %1, al
   200                              <1> 		outp	0x21, 0x01						; // MASTER.ICW4 = 0x01;
    72 00001175 B001                <2>  mov al, %2
    73 00001177 E621                <2>  out %1, al
   201                              <1> 		outp	0x21, 0xFF						; // マスタ割り込みマスク
    72 00001179 B0FF                <2>  mov al, %2
    73 0000117B E621                <2>  out %1, al
   202                              <1> 
   203                              <1> 		;---------------------------------------
   204                              <1> 		; スレーブPICの設定
   205                              <1> 		;---------------------------------------
   206                              <1> 		outp	0xA0, 0x11						; // SLAVE.ICW1  = 0x11;
    72 0000117D B011                <2>  mov al, %2
    73 0000117F E6A0                <2>  out %1, al
   207                              <1> 		outp	0xA1, 0x28						; // SLAVE.ICW2  = 0x28;
    72 00001181 B028                <2>  mov al, %2
    73 00001183 E6A1                <2>  out %1, al
   208                              <1> 		outp	0xA1, 0x02						; // SLAVE.ICW3  = 0x02;
    72 00001185 B002                <2>  mov al, %2
    73 00001187 E6A1                <2>  out %1, al
   209                              <1> 		outp	0xA1, 0x01						; // SLAVE.ICW4  = 0x01;
    72 00001189 B001                <2>  mov al, %2
    73 0000118B E6A1                <2>  out %1, al
   210                              <1> 		outp	0xA1, 0xFF						; // スレーブ割り込みマスク
    72 0000118D B0FF                <2>  mov al, %2
    73 0000118F E6A1                <2>  out %1, al
   211                              <1> 
   212                              <1> 		;---------------------------------------
   213                              <1> 		; 【レジスタの復帰】
   214                              <1> 		;---------------------------------------
   215 00001191 58                  <1> 		pop		eax
   216                              <1> 
   217 00001192 C3                  <1> 		ret
   218                              <1> 
   179                                  %include	"../modules/protect/int_rtc.s"
   180                              <1> ;************************************************************************
   181                              <1> ;	RTCの割り込み許可設定
   182                              <1> ;========================================================================
   183                              <1> ;■書式		: void rtc_int_en(bit);
   184                              <1> ;
   185                              <1> ;■引数
   186                              <1> ;	bit		: 割り込みを許可するビット
   187                              <1> ;
   188                              <1> ;■戻り値	: 無し
   189                              <1> ;************************************************************************
   190                              <1> rtc_int_en:
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 【スタックフレームの構築】
   193                              <1> 		;---------------------------------------
   194                              <1> 												; ------|--------
   195                              <1> 												;    + 8| ビット
   196                              <1> 												; ------|--------
   197                              <1> 												;    + 4| EIP（戻り番地）
   198 00001193 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   199 00001194 89E5                <1> 		mov		ebp, esp						; ------+--------
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; 【レジスタの保存】
   203                              <1> 		;---------------------------------------
   204 00001196 50                  <1> 		push	eax
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; 割り込み許可設定
   208                              <1> 		;---------------------------------------
   209                              <1> 		outp	0x70, 0x0B						; outp(0x70, AL);   // レジスタBを選択
    72 00001197 B00B                <2>  mov al, %2
    73 00001199 E670                <2>  out %1, al
   210                              <1> 
   211 0000119B E471                <1> 		in		al, 0x71						; AL  = port(0x71); // レジスタBの
   212 0000119D 0A4508              <1> 		or		al, [ebp + 8]					; AL |= ビット;     // 指定されたビットをセット
   213                              <1> 
   214 000011A0 E671                <1> 		out		0x71, al						; outp(0x71, AL);   // レジスタBに書き込み
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; 【レジスタの復帰】
   218                              <1> 		;---------------------------------------
   219 000011A2 58                  <1> 		pop		eax
   220                              <1> 
   221                              <1> 		;---------------------------------------
   222                              <1> 		; 【スタックフレームの破棄】
   223                              <1> 		;---------------------------------------
   224 000011A3 89EC                <1> 		mov		esp, ebp
   225 000011A5 5D                  <1> 		pop		ebp
   226                              <1> 
   227 000011A6 C3                  <1> 		ret
   228                              <1> 
   229                              <1> 
   230                              <1> ;************************************************************************
   231                              <1> ;	割り込み処理：RTC
   232                              <1> ;************************************************************************
   233                              <1> int_rtc:
   234                              <1> 		;---------------------------------------
   235                              <1> 		; 【レジスタの保存】
   236                              <1> 		;---------------------------------------
   237 000011A7 60                  <1> 		pusha
   238 000011A8 1E                  <1> 		push	ds
   239 000011A9 06                  <1> 		push	es
   240                              <1> 
   241                              <1> 		;---------------------------------------
   242                              <1> 		; データ用セグメントセレクタの設定
   243                              <1> 		;---------------------------------------
   244 000011AA 66B81000            <1> 		mov		ax, 0x0010						; 
   245 000011AE 8ED8                <1> 		mov		ds, ax							; 
   246 000011B0 8EC0                <1> 		mov		es, ax							; 
   247                              <1> 
   248                              <1> 		;---------------------------------------
   249                              <1> 		; RTCから時刻を取得
   250                              <1> 		;---------------------------------------
   251 000011B2 68[54020000]E846FD- <1> 		cdecl	rtc_get_time, RTC_TIME			; EAX = get_time(&RTC_TIME);
   251 000011BA FFFF6683C404        <1>
   252                              <1> 												; 
   253                              <1> 		;---------------------------------------
   254                              <1> 		; RTCの割り込み要因を取得
   255                              <1> 		;---------------------------------------
   256                              <1> 		outp	0x70, 0x0C						; outp(0x70, 0x0C); // レジスタCを選択
    72 000011C0 B00C                <2>  mov al, %2
    73 000011C2 E670                <2>  out %1, al
   257 000011C4 E471                <1> 		in		al, 0x71						; AL = inp();
   258                              <1> 
   259                              <1> 		;---------------------------------------
   260                              <1> 		; 割り込みフラグをクリア(EOI)
   261                              <1> 		;---------------------------------------
   262                              <1> 		outp	0xA0, 0x20						; outp(0xA0, EOI); // スレーブPIC
    72 000011C6 B020                <2>  mov al, %2
    73 000011C8 E6A0                <2>  out %1, al
   263                              <1> 		outp	0x20, 0x20						; outp(0x20, EOI); // マスタPIC
    72 000011CA B020                <2>  mov al, %2
    73 000011CC E620                <2>  out %1, al
   264                              <1> 
   265                              <1> 		;---------------------------------------
   266                              <1> 		; 【レジスタの復帰】
   267                              <1> 		;---------------------------------------
   268 000011CE 07                  <1> 		pop		es								; 
   269 000011CF 1F                  <1> 		pop		ds								; 
   270 000011D0 61                  <1> 		popa									; 
   271                              <1> 
   272 000011D1 CF                  <1> 		iret									; 割り込み処理の終了
   273                              <1> 
   180                                  %include	"../modules/protect/int_keyboard.s"
   181                              <1> ;************************************************************************
   182                              <1> ;	割り込み処理：キーボード
   183                              <1> ;------------------------------------------------------------------------
   184                              <1> ;	KBC（キーボードコントローラ）からキーコードを取得して、
   185                              <1> ;	専用のリングバッファに保存する。
   186                              <1> ;************************************************************************
   187                              <1> int_keyboard:
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 【レジスタの保存】
   190                              <1> 		;---------------------------------------
   191 000011D2 60                  <1> 		pusha
   192 000011D3 1E                  <1> 		push	ds
   193 000011D4 06                  <1> 		push	es
   194                              <1> 
   195                              <1> 		;---------------------------------------
   196                              <1> 		; データ用セグメントの設定
   197                              <1> 		;---------------------------------------
   198 000011D5 66B81000            <1> 		mov		ax, 0x0010						; 
   199 000011D9 8ED8                <1> 		mov		ds, ax							; 
   200 000011DB 8EC0                <1> 		mov		es, ax							; 
   201                              <1> 
   202                              <1> 		;---------------------------------------
   203                              <1> 		; KBCのバッファ読み取り
   204                              <1> 		;---------------------------------------
   205 000011DD E460                <1> 		in		al, 0x60						; AL = キーコードの取得
   206                              <1> 
   207                              <1> 		;---------------------------------------
   208                              <1> 		; キーコードの保存
   209                              <1> 		;---------------------------------------
   210 000011DF 5068[F8110000]E856- <1> 		cdecl	ring_wr, _KEY_BUFF, eax			; ring_wr(_KEY_BUFF, EAX); // キーコードの保存
   210 000011E7 0000006683C408      <1>
   211                              <1> 
   212                              <1> 		;---------------------------------------
   213                              <1> 		; 割り込み終了コマンド送信
   214                              <1> 		;---------------------------------------
   215                              <1> 		outp	0x20, 0x20						; outp(); // マスタPIC:EOIコマンド
    72 000011EE B020                <2>  mov al, %2
    73 000011F0 E620                <2>  out %1, al
   216                              <1> 
   217                              <1> 		;---------------------------------------
   218                              <1> 		; 【レジスタの復帰】
   219                              <1> 		;---------------------------------------
   220 000011F2 07                  <1> 		pop		es								; 
   221 000011F3 1F                  <1> 		pop		ds								; 
   222 000011F4 61                  <1> 		popa
   223                              <1> 
   224 000011F5 CF                  <1> 		iret									; 割り込みからの復帰
   225                              <1> 
   226 000011F6 00<rep 2h>          <1> ALIGN 4, db 0
   227 000011F8 00<rep 18h>         <1> _KEY_BUFF:	times ring_buff_size db 0
   228                              <1> 
   181                                  %include	"../modules/protect/ring_buff.s"
   182                              <1> ;************************************************************************
   183                              <1> ;	リングバッファからデータを取得
   184                              <1> ;========================================================================
   185                              <1> ;■書式		: DWORD ring_rd(buff, data);
   186                              <1> ;
   187                              <1> ;■引数
   188                              <1> ;	buff	: リングバッファ
   189                              <1> ;	data	: 読み込んだデータの保存先アドレス
   190                              <1> ;
   191                              <1> ;■戻り値	: データあり(0以外)、データ無し(0)
   192                              <1> ;************************************************************************
   193                              <1> ring_rd:
   194                              <1> 		;---------------------------------------
   195                              <1> 		; 【スタックフレームの構築】
   196                              <1> 		;---------------------------------------
   197                              <1> 												; ------|--------
   198                              <1> 												;    +12| リングデータ
   199                              <1> 												;    + 8| データアドレス
   200                              <1> 												; ------|--------
   201                              <1> 												;    + 4| EIP（戻り番地）
   202 00001210 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   203 00001211 89E5                <1> 		mov		ebp, esp						; ------+--------
   204                              <1> 
   205                              <1> 		;---------------------------------------
   206                              <1> 		; 【レジスタの保存】
   207                              <1> 		;---------------------------------------
   208 00001213 53                  <1> 		push	ebx
   209 00001214 56                  <1> 		push	esi
   210 00001215 57                  <1> 		push	edi
   211                              <1> 
   212                              <1> 		;---------------------------------------
   213                              <1> 		; 引数を取得
   214                              <1> 		;---------------------------------------
   215 00001216 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   216 00001219 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = データアドレス;
   217                              <1> 
   218                              <1> 		;---------------------------------------
   219                              <1> 		; 読み込み位置を確認
   220                              <1> 		;---------------------------------------
   221 0000121C B800000000          <1> 		mov		eax, 0							; EAX = 0;          // データ無し
   222 00001221 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;         // 読み込み位置
   223 00001223 3B5E04              <1> 		cmp		ebx, [esi + ring_buff.wp]		; if (EBX != wp)    // 書き込み位置と異なる
   224 00001226 7411                <1> 		je		.10E							; {
   225                              <1> 												;   
   226 00001228 8A441E08            <1> 		mov		al, [esi + ring_buff.item + ebx] ;   AL = BUFF[rp]; // キーコードを保存
   227                              <1> 												;   
   228 0000122C 8807                <1> 		mov		[edi], al						;   [EDI] = AL;     // データを保存
   229                              <1> 												;   
   230 0000122E 43                  <1> 		inc		ebx								;   EBX++;          // 次の読み込み位置
   231 0000122F 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= 0x0F     // サイズの制限
   232 00001232 891E                <1> 		mov		[esi + ring_buff.rp], ebx		;   rp = EBX;       // 読み込み位置を保存
   233                              <1> 												;   
   234 00001234 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // データあり
   235                              <1> .10E:											; }
   236                              <1> 
   237                              <1> 		;---------------------------------------
   238                              <1> 		; 【レジスタの復帰】
   239                              <1> 		;---------------------------------------
   240 00001239 5F                  <1> 		pop		edi
   241 0000123A 5E                  <1> 		pop		esi
   242 0000123B 5B                  <1> 		pop		ebx
   243                              <1> 
   244                              <1> 		;---------------------------------------
   245                              <1> 		; 【スタックフレームの破棄】
   246                              <1> 		;---------------------------------------
   247 0000123C 89EC                <1> 		mov		esp, ebp
   248 0000123E 5D                  <1> 		pop		ebp
   249                              <1> 
   250 0000123F C3                  <1> 		ret
   251                              <1> 
   252                              <1> ;************************************************************************
   253                              <1> ;	リングバッファにデータを格納
   254                              <1> ;========================================================================
   255                              <1> ;■書式		: DWORD ring_wr(buff, data);
   256                              <1> ;
   257                              <1> ;■引数
   258                              <1> ;	buff	: リングバッファ
   259                              <1> ;	data	: 書き込むデータ
   260                              <1> ;
   261                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   262                              <1> ;************************************************************************
   263                              <1> ring_wr:
   264                              <1> 		;---------------------------------------
   265                              <1> 		; 【スタックフレームの構築】
   266                              <1> 		;---------------------------------------
   267                              <1> 												; ------|--------
   268                              <1> 												;    +12| リングデータ
   269                              <1> 												;    + 8| データ
   270                              <1> 												; ------|--------
   271                              <1> 												;    + 4| EIP（戻り番地）
   272 00001240 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   273 00001241 89E5                <1> 		mov		ebp, esp						; ------+--------
   274                              <1> 
   275                              <1> 		;---------------------------------------
   276                              <1> 		; 【レジスタの保存】
   277                              <1> 		;---------------------------------------
   278 00001243 53                  <1> 		push	ebx
   279 00001244 51                  <1> 		push	ecx
   280 00001245 56                  <1> 		push	esi
   281                              <1> 
   282                              <1> 		;---------------------------------------
   283                              <1> 		; 引数を取得
   284                              <1> 		;---------------------------------------
   285 00001246 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   286                              <1> 
   287                              <1> 		;---------------------------------------
   288                              <1> 		; 書き込み位置を確認
   289                              <1> 		;---------------------------------------
   290 00001249 B800000000          <1> 		mov		eax, 0							; EAX  = 0;         // 失敗
   291 0000124E 8B5E04              <1> 		mov		ebx, [esi + ring_buff.wp]		; EBX  = wp;        // 書き込み位置
   292 00001251 89D9                <1> 		mov		ecx, ebx						; ECX  = EBX;
   293 00001253 41                  <1> 		inc		ecx								; ECX++;            // 次の書き込み位置
   294 00001254 83E10F              <1> 		and		ecx, RING_INDEX_MASK			; ECX &= 0x0F       // サイズの制限
   295                              <1> 												; 
   296 00001257 3B0E                <1> 		cmp		ecx, [esi + ring_buff.rp]		; if (ECX != rp)    // 読み込み位置と異なる
   297 00001259 740F                <1> 		je		.10E							; {
   298                              <1> 												; 
   299 0000125B 8A450C              <1> 		mov		al, [ebp +12]					;   AL = データ;
   300                              <1> 												; 
   301 0000125E 88441E08            <1> 		mov		[esi + ring_buff.item + ebx], al ;   BUFF[wp] = AL; // キーコードを保存
   302 00001262 894E04              <1> 		mov		[esi + ring_buff.wp], ecx		;   wp = ECX;       // 書き込み位置を保存
   303 00001265 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // 成功
   304                              <1> .10E:											; }
   305                              <1> 
   306                              <1> 		;---------------------------------------
   307                              <1> 		; 【レジスタの復帰】
   308                              <1> 		;---------------------------------------
   309 0000126A 5E                  <1> 		pop		esi
   310 0000126B 59                  <1> 		pop		ecx
   311 0000126C 5B                  <1> 		pop		ebx
   312                              <1> 
   313                              <1> 		;---------------------------------------
   314                              <1> 		; 【スタックフレームの破棄】
   315                              <1> 		;---------------------------------------
   316 0000126D 89EC                <1> 		mov		esp, ebp
   317 0000126F 5D                  <1> 		pop		ebp
   318                              <1> 
   319 00001270 C3                  <1> 		ret
   320                              <1> 
   321                              <1> ;************************************************************************
   322                              <1> ;	リングバッファ内要素の表示
   323                              <1> ;========================================================================
   324                              <1> ;■書式		: void ring_show(col, row, buff);
   325                              <1> ;
   326                              <1> ;■引数
   327                              <1> ;	col		: 列
   328                              <1> ;	row		: 行
   329                              <1> ;	buff	: リングバッファ
   330                              <1> ;
   331                              <1> ;■戻り値	: 無し
   332                              <1> ;************************************************************************
   333                              <1> draw_key:
   334                              <1> 		;---------------------------------------
   335                              <1> 		; 【スタックフレームの構築】
   336                              <1> 		;---------------------------------------
   337                              <1> 												; ------|--------
   338                              <1> 												; EBP+16| リングバッファ
   339                              <1> 												; EBP+12| Y（行）
   340                              <1> 												; EBP+ 8| X（列）
   341                              <1> 												; ------|--------
   342 00001271 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   343 00001272 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   344                              <1> 												; ------|--------
   345                              <1> 
   346                              <1> 		;---------------------------------------
   347                              <1> 		; 【レジスタの保存】
   348                              <1> 		;---------------------------------------
   349 00001274 60                  <1> 		pusha
   350                              <1> 
   351                              <1> 		;---------------------------------------
   352                              <1> 		; 引数を取得
   353                              <1> 		;---------------------------------------
   354 00001275 8B5508              <1> 		mov		edx, [ebp + 8]					; EDX = X（列）;
   355 00001278 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）;
   356 0000127B 8B7510              <1> 		mov		esi, [ebp +16]					; ESI = リングバッファ;
   357                              <1> 
   358                              <1> 		;---------------------------------------
   359                              <1> 		; リングバッファの情報を取得
   360                              <1> 		;---------------------------------------
   361 0000127E 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;             // 読み込み位置
   362 00001280 8D7608              <1> 		lea		esi, [esi + ring_buff.item]		; ESI = &KEY_BUFF[EBX];
   363 00001283 B910000000          <1> 		mov		ecx, RING_ITEM_SIZE				; ECX = RING_ITEM_SIZE; // 要素数
   364                              <1> 
   365                              <1> 		;---------------------------------------
   366                              <1> 		; 文字に変換しながら表示
   367                              <1> 		;---------------------------------------
   368                              <1> .10L:											; do
   369                              <1> 												; {
   370 00001288 4B                  <1> 		dec		ebx								;   EBX--; // 読み込み位置
   371 00001289 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= RING_INDEX_MASK;
   372 0000128C 8A041E              <1> 		mov		al, [esi + ebx]					;   EAX  = KEY_BUFF[EBX];
   373                              <1> 												;   
   374 0000128F 6A046A106A0268-     <1> 		cdecl	itoa, eax, .tmp, 2, 16, 0b0100	;   // キーコードを文字列に変換
   374 00001296 [C0120000]50E8D9FB- <1>
   374 0000129E FFFF6683C414        <1>
   375 000012A4 68[C0120000]6A0257- <1> 		cdecl	draw_str, edx, edi, 0x02, .tmp	;   // 変換した文字列を表示
   375 000012AC 52E81FF9FFFF6683C4- <1>
   375 000012B5 10                  <1>
   376                              <1> 												;   
   377 000012B6 83C203              <1> 		add		edx, 3							;   // 表示位置を更新（3文字分）
   378                              <1> 												;   
   379 000012B9 E2CD                <1> 		loop	.10L							;   
   380                              <1> .10E:											; } while (ECX--);
   381                              <1> 
   382                              <1> 		;---------------------------------------
   383                              <1> 		; 【レジスタの復帰】
   384                              <1> 		;---------------------------------------
   385 000012BB 61                  <1> 		popa
   386                              <1> 
   387                              <1> 		;---------------------------------------
   388                              <1> 		; 【スタックフレームの破棄】
   389                              <1> 		;---------------------------------------
   390 000012BC 89EC                <1> 		mov		esp, ebp
   391 000012BE 5D                  <1> 		pop		ebp
   392                              <1> 
   393 000012BF C3                  <1> 		ret
   394                              <1> 
   395 000012C0 2D2D2000            <1> .tmp	db "-- ", 0
   182                                  %include	"../modules/protect/timer.s"
   183                              <1> ;************************************************************************
   184                              <1> ;	タイマーの設定
   185                              <1> ;------------------------------------------------------------------------
   186                              <1> ;	タイマー（カウンタ0）割り込み許可
   187                              <1> ;========================================================================
   188                              <1> ;■書式		: void int_en_timer0(void);
   189                              <1> ;
   190                              <1> ;■引数		: 無し
   191                              <1> ;
   192                              <1> ;■戻り値	: 無し
   193                              <1> ;************************************************************************
   194                              <1> int_en_timer0:
   195                              <1> 		;---------------------------------------
   196                              <1> 		; 【レジスタの保存】
   197                              <1> 		;---------------------------------------
   198 000012C4 50                  <1> 		push	eax
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		;	8254 Timer
   202                              <1> 		;	0x2e9c(11932)=10[ms] @ CLK=1,193,182[Hz]
   203                              <1> 		;---------------------------------------
   204                              <1> 		 outp	 0x43, 0b_00_11_010_0			; // カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    72 000012C5 B034                <2>  mov al, %2
    73 000012C7 E643                <2>  out %1, al
   205                              <1> 		 outp	 0x40, 0x9C						; // 下位バイト
    72 000012C9 B09C                <2>  mov al, %2
    73 000012CB E640                <2>  out %1, al
   206                              <1> 		 outp	 0x40, 0x2E						; // 上位バイト
    72 000012CD B02E                <2>  mov al, %2
    73 000012CF E640                <2>  out %1, al
   207                              <1> 
   208                              <1> 		;---------------------------------------
   209                              <1> 		; 【レジスタの復帰】
   210                              <1> 		;---------------------------------------
   211 000012D1 58                  <1> 		pop		eax
   212                              <1> 
   213 000012D2 C3                  <1> 		ret
   214                              <1> 
   183                                  %include	"../modules/protect/draw_rotation_bar.s"
   184                              <1> ;************************************************************************
   185                              <1> ;	画面左下に、回転する棒を表示
   186                              <1> ;========================================================================
   187                              <1> ;■書式		: void draw_rotation_bar(void);
   188                              <1> ;
   189                              <1> ;■引数		: 無し
   190                              <1> ;
   191                              <1> ;■戻り値	: 無し
   192                              <1> ;************************************************************************
   193                              <1> draw_rotation_bar:
   194                              <1> 		;---------------------------------------
   195                              <1> 		; 【レジスタの保存】
   196                              <1> 		;---------------------------------------
   197 000012D3 50                  <1> 		push	eax
   198                              <1> 
   199                              <1> 		;---------------------------------------
   200                              <1> 		; タイマー割り込みカウンタを確認
   201                              <1> 		;---------------------------------------
   202 000012D4 A1[F8060000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX  = タイマー割り込みカウンタ
   203 000012D9 C1E804              <1> 		shr		eax, 4							; EAX /= 4;    // 16で除算
   204 000012DC 3B05[04130000]      <1> 		cmp		eax, [.index]					; if (EAX != 前回値)
   205 000012E2 741E                <1> 		je		.10E							; {
   206                              <1> 												;   
   207 000012E4 A3[04130000]        <1> 		mov		[.index], eax					;   前回値 = EAX;
   208 000012E9 83E003              <1> 		and		eax, 0x03						;   EAX &= 0x03; // 0～3に限定
   209                              <1> 												;   
   210 000012EC 8A80[08130000]      <1> 		mov		al, [.table + eax]				;   AL = table[index];
   211 000012F2 506A0F6A1D6A00E8AD- <1> 		cdecl	draw_char, 0, 29, 0x000F, eax	;   draw_char(); // 文字を表示
   211 000012FB F7FFFF6683C410      <1>
   212                              <1> 												;   
   213                              <1> .10E:											; }
   214                              <1> 
   215                              <1> 		;---------------------------------------
   216                              <1> 		; 【レジスタの復帰】
   217                              <1> 		;---------------------------------------
   218 00001302 58                  <1> 		pop		eax
   219                              <1> 
   220 00001303 C3                  <1> 		ret
   221                              <1> 
   222                              <1> ALIGN 4, db 0
   223 00001304 00000000            <1> .index:		dd 0								; 前回値
   224 00001308 7C2F2D5C            <1> .table:		db	"|/-\"							; 表示キャラクタ
   225                              <1> 
   184                                  %include	"../modules/protect/call_gate.s"
   185                              <1> ;************************************************************************
   186                              <1> ;	コールゲート関数
   187                              <1> ;************************************************************************
   188                              <1> call_gate:
   189                              <1> 		;---------------------------------------
   190                              <1> 		; 【スタックフレームの構築】
   191                              <1> 		;---------------------------------------
   192                              <1> 												; ------|--------
   193                              <1> 												; EBP+12| X（列）
   194                              <1> 												; EBP+16| Y（行）
   195                              <1> 												; EBP+20| 色
   196                              <1> 												; EBP+24| 文字
   197                              <1> 												; ---------------
   198                              <1> 												; EBP+ 8| CS（コードセグメント）
   199 0000130C 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   200 0000130D 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   201                              <1> 												; ---------------
   202                              <1> 		;---------------------------------------
   203                              <1> 		; 【レジスタの保存】
   204                              <1> 		;---------------------------------------
   205 0000130F 60                  <1> 		pusha
   206 00001310 1E                  <1> 		push	ds
   207 00001311 06                  <1> 		push	es
   208                              <1> 
   209                              <1> 		;---------------------------------------
   210                              <1> 		; データ用セグメントの設定
   211                              <1> 		;---------------------------------------
   212 00001312 66B81000            <1> 		mov		ax, 0x0010						; 
   213 00001316 8ED8                <1> 		mov		ds, ax							; 
   214 00001318 8EC0                <1> 		mov		es, ax							; 
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; 文字を表示
   218                              <1> 		;---------------------------------------
   219 0000131A 8B450C              <1> 		mov		eax, dword [ebp +12]			; EAX = X（列）;
   220 0000131D 8B5D10              <1> 		mov		ebx, dword [ebp +16]			; EBX = Y（行）;
   221 00001320 8B4D14              <1> 		mov		ecx, dword [ebp +20]			; ECX = 色;
   222 00001323 8B5518              <1> 		mov		edx, dword [ebp +24]			; EDX = 文字;
   223 00001326 52515350E8A2F8FFFF- <1> 		cdecl	draw_str, eax, ebx , ecx, edx	; draw_str();
   223 0000132F 6683C410            <1>
   224                              <1> 
   225                              <1> 		;---------------------------------------
   226                              <1> 		; 【レジスタの復帰】
   227                              <1> 		;---------------------------------------
   228 00001333 07                  <1> 		pop		es								; 
   229 00001334 1F                  <1> 		pop		ds								; 
   230 00001335 61                  <1> 		popa									; 
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; 【スタックフレームの破棄】
   234                              <1> 		;---------------------------------------
   235 00001336 89EC                <1> 		mov		esp, ebp
   236 00001338 5D                  <1> 		pop		ebp
   237                              <1> 
   238 00001339 CA1000              <1> 		retf	4 * 4
   239                              <1> 
   185                                  %include	"../modules/protect/trap_gate.s"
   186                              <1> ;************************************************************************
   187                              <1> ;	システムコール：1文字出力
   188                              <1> ;************************************************************************
   189                              <1> trap_gate_81:
   190                              <1> 		;---------------------------------------
   191                              <1> 		; 1文字出力
   192                              <1> 		;---------------------------------------
   193 0000133C 50535251E866F7FFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	; // 1文字出力
   193 00001345 6683C410            <1>
   194                              <1> 
   195 00001349 CF                  <1> 		iret
   196                              <1> 
   197                              <1> ;************************************************************************
   198                              <1> ;	システムコール：点の描画
   199                              <1> ;************************************************************************
   200                              <1> trap_gate_82:
   201                              <1> 		;---------------------------------------
   202                              <1> 		; 点の描画
   203                              <1> 		;---------------------------------------
   204 0000134A 535251E837F9FFFF66- <1> 		cdecl	draw_pixel, ecx, edx, ebx		; // 点の描画
   204 00001353 83C40C              <1>
   205                              <1> 
   206 00001356 CF                  <1> 		iret
   207                              <1> 
   186                                  %include	"../modules/protect/test_and_set.s"
   187                              <1> ;************************************************************************
   188                              <1> ;	RTCから時刻データを取得する
   189                              <1> ;========================================================================
   190                              <1> ;■書式		: void test_and_set(local);
   191                              <1> ;
   192                              <1> ;■引数
   193                              <1> ;	local	: ローカル変数のアドレス
   194                              <1> ;
   195                              <1> ;■戻り値	: 無し
   196                              <1> ;************************************************************************
   197                              <1> test_and_set:
   198                              <1> 		;---------------------------------------
   199                              <1> 		; 【スタックフレームの構築】
   200                              <1> 		;---------------------------------------
   201                              <1> 												; EBP+ 8| ローカル変数のアドレス
   202                              <1> 												; ------+----------------
   203 00001357 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   204 00001358 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   205                              <1> 												; ------+----------------
   206                              <1> 
   207                              <1> 		;---------------------------------------
   208                              <1> 		; 【レジスタの保存】
   209                              <1> 		;---------------------------------------
   210 0000135A 50                  <1> 		push	eax
   211 0000135B 53                  <1> 		push	ebx
   212                              <1> 
   213                              <1> 		;---------------------------------------
   214                              <1> 		; テストアンドセット
   215                              <1> 		;---------------------------------------
   216 0000135C B800000000          <1> 		mov		eax, 0							; local  = 0;
   217 00001361 8B5D08              <1> 		mov		ebx, [ebp + 8]					; global = アドレス;
   218                              <1> 
   219                              <1> .10L:											; for ( ; ; )
   220                              <1> 												; {
   221 00001364 F00FAB03            <1> 		lock bts [ebx], eax						;   CF = TEST_AND_SET(IN_USE, 1);
   222 00001368 7307                <1> 		jnc		.10E							;   if (0 == CF)
   223                              <1> 												;     break;
   224                              <1> 												;   
   225                              <1> .12L:											;   for ( ; ; )
   226                              <1> 												;   {
   227 0000136A 0FA303              <1> 		bt		[ebx], eax						;     CF = TEST(IN_USE, 1);
   228 0000136D 72FB                <1> 		jc		.12L							;     if (0 == CF)
   229                              <1> 												;       break;
   230 0000136F EBF3                <1> 		jmp		.10L							;   }
   231                              <1> .10E:											; }
   232                              <1> 
   233                              <1> 		;---------------------------------------
   234                              <1> 		; 【レジスタの復帰】
   235                              <1> 		;---------------------------------------
   236 00001371 5B                  <1> 		pop		ebx
   237 00001372 58                  <1> 		pop		eax
   238                              <1> 
   239                              <1> 		;---------------------------------------
   240                              <1> 		; 【スタックフレームの破棄】
   241                              <1> 		;---------------------------------------
   242 00001373 89EC                <1> 		mov		esp, ebp
   243 00001375 5D                  <1> 		pop		ebp
   244                              <1> 
   245 00001376 C3                  <1> 		ret
   246                              <1> 
   187                                  %include	"../modules/protect/int_nm.s"
   188                              <1> ;************************************************************************
   189                              <1> ;	割り込み処理：#NM(DNA:デバイス使用不可)
   190                              <1> ;************************************************************************
   191                              <1> int_nm:
   192                              <1> 		;---------------------------------------
   193                              <1> 		; 【レジスタの保存】
   194                              <1> 		;---------------------------------------
   195 00001377 60                  <1> 		pusha
   196 00001378 1E                  <1> 		push	ds
   197 00001379 06                  <1> 		push	es
   198                              <1> 
   199                              <1> 		;---------------------------------------
   200                              <1> 		; カーネル用セレクタを設定
   201                              <1> 		;---------------------------------------
   202 0000137A 66B81000            <1> 		mov		ax, DS_KERNEL					;
   203 0000137E 8ED8                <1> 		mov		ds, ax							;
   204 00001380 8EC0                <1> 		mov		es, ax							;
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; タスクスイッチフラグをクリア
   208                              <1> 		;---------------------------------------
   209 00001382 0F06                <1> 		clts									; CR0.TS = 0;
   210                              <1> 
   211                              <1> 		;---------------------------------------
   212                              <1> 		; 前回/今回FPUを使用するタスク
   213                              <1> 		;---------------------------------------
   214 00001384 8B3D[D0130000]      <1> 		mov		edi, [.last_tss]				; EDI = 前回FPUを使用したタスクのTSS
   215 0000138A 0F00CE              <1> 		str		esi								; ESI = 今回FPUを使用したタスクのTSS
   216 0000138D 83E6F8              <1> 		and		esi, ~0x0007					; // 特権レベルをマスク
   217                              <1> 
   218                              <1> 		;---------------------------------------
   219                              <1> 		; FPUの初回利用をチェック
   220                              <1> 		;---------------------------------------
   221 00001390 83FF00              <1> 		cmp		edi, 0							; if (0 != EDI)     // 前回使用したタスク
   222 00001393 7420                <1> 		je		.10F							; {
   223                              <1> 												;   
   224 00001395 39FE                <1> 		cmp		esi, edi						;   if (ESI != EDI) // 異なるタスク
   225 00001397 741A                <1> 		je		.12E							;   {
   226                              <1> 												;     
   227 00001399 FA                  <1> 		cli										;     // 割り込み禁止
   228                              <1> 
   229                              <1> 		;---------------------------------------
   230                              <1> 		; 前回のFPUコンテキストを保存
   231                              <1> 		;---------------------------------------
   232 0000139A 89FB                <1> 		mov		ebx, edi						;     // 前回のタスク
   233 0000139C E833000000          <1> 		call	get_tss_base					;     // TSSアドレスを取得
   234 000013A1 E841000000          <1> 		call	save_fpu_context				;     // FPUのコンテキストを保存
   235                              <1> 
   236                              <1> 		;---------------------------------------
   237                              <1> 		; 今回のFPUコンテキストを復帰
   238                              <1> 		;---------------------------------------
   239 000013A6 89F3                <1> 		mov		ebx, esi						;     // 今回のタスク
   240 000013A8 E827000000          <1> 		call	get_tss_base					;     // TSSアドレスを取得
   241 000013AD E843000000          <1> 		call	load_fpu_context				;     // FPUのコンテキストを復帰
   242                              <1> 												;     
   243 000013B2 FB                  <1> 		sti										;     // 割り込み許可
   244                              <1> .12E:											;   }
   245 000013B3 EB0E                <1> 		jmp		.10E							; }
   246                              <1> .10F:											; else
   247                              <1> 												; {
   248                              <1> 												;   
   249 000013B5 FA                  <1> 		cli										;   // 割り込み禁止
   250                              <1> 
   251                              <1> 		;---------------------------------------
   252                              <1> 		; 今回のFPUコンテキストを復帰
   253                              <1> 		;---------------------------------------
   254 000013B6 89F3                <1> 		mov		ebx, esi						;   // 今回のタスク
   255 000013B8 E817000000          <1> 		call	get_tss_base					;   // 現在のタスクのTSSアドレスを取得
   256 000013BD E833000000          <1> 		call	load_fpu_context				;   // FPUのコンテキストを復帰
   257                              <1> 												;   
   258 000013C2 FB                  <1> 		sti										;   // 割り込み許可
   259                              <1> .10E:											; }
   260                              <1> 												; 
   261 000013C3 8935[D0130000]      <1> 		mov		[.last_tss], esi				; // FPUを使用したタスクを保存
   262                              <1> 
   263                              <1> 		;---------------------------------------
   264                              <1> 		; 【レジスタの復帰】
   265                              <1> 		;---------------------------------------
   266 000013C9 07                  <1> 		pop		es
   267 000013CA 1F                  <1> 		pop		ds
   268 000013CB 61                  <1> 		popa
   269                              <1> 
   270 000013CC CF                  <1> 		iret
   271                              <1> 
   272 000013CD 00<rep 3h>          <1> ALIGN 4, db 0
   273 000013D0 00000000            <1> .last_tss:	dd		0
   274                              <1> 
   275                              <1> ;************************************************************************
   276                              <1> ; GDTのセレクタのベースアドレスを取得
   277                              <1> ;------------------------------------------------------------------[IN]--
   278                              <1> ;	EBX : セレクタ
   279                              <1> ;-----------------------------------------------------------------[OUT]--
   280                              <1> ;	EAX : ベースアドレス
   281                              <1> ;************************************************************************
   282                              <1> get_tss_base:
   283 000013D4 8B83[BA050000]      <1> 		mov		eax, [GDT + ebx + 2]			; EAX   = TSS[23: 0];
   284 000013DA C1E008              <1> 		shl		eax, 8							; EAX <<= 8;
   285 000013DD 8A83[BF050000]      <1>         mov     al,  [GDT + ebx + 7]            ;  AL   = TSS[31:24];
   286 000013E3 C1C808              <1> 		ror		eax, 8							; EAX >>= 8;
   287                              <1> 
   288 000013E6 C3                  <1> 		ret
   289                              <1> 
   290                              <1> ;************************************************************************
   291                              <1> ; FPUのコンテキストを保存
   292                              <1> ;------------------------------------------------------------------[IN]--
   293                              <1> ;	EAX : TSSの先頭アドレス
   294                              <1> ;************************************************************************
   295                              <1> save_fpu_context:
   296 000013E7 DD7068              <1> 		fnsave	[eax + 104]						; // FPUコンテキストを保存
   297 000013EA C780D4000000010000- <1> 		mov		[eax + 104 + 108], dword 1		; saved = 1;
   297 000013F3 00                  <1>
   298                              <1> 
   299 000013F4 C3                  <1> 		ret
   300                              <1> 
   301                              <1> ;************************************************************************
   302                              <1> ; FPUのコンテキストを復帰
   303                              <1> ;------------------------------------------------------------------[IN]--
   304                              <1> ;	EAX : TSSの先頭アドレス
   305                              <1> ;************************************************************************
   306                              <1> load_fpu_context:
   307 000013F5 83B8D400000000      <1> 		cmp		[eax + 104 + 108], dword 0		; if (0 == saved)
   308 000013FC 7504                <1> 		jne		.10F							; {
   309 000013FE DBE3                <1> 		fninit									;    // FPUの初期化
   310 00001400 EB03                <1> 		jmp		.10E							; }
   311                              <1> .10F:											; else
   312                              <1> 												; {
   313 00001402 DD6068              <1> 		frstor	[eax + 104]						;   // FPUコンテキストを復帰
   314                              <1> .10E:											; }
   315 00001405 C3                  <1> 		ret
   316                              <1> 
   188                                  %include	"../modules/protect/wait_tick.s"
   189                              <1> ;************************************************************************
   190                              <1> ;	ウェイト
   191                              <1> ;------------------------------------------------------------------------
   192                              <1> ;	指定された回数、システム割り込みが発生するまで待つ
   193                              <1> ;========================================================================
   194                              <1> ;■書式		: void wait_tick(tick);
   195                              <1> ;
   196                              <1> ;■引数
   197                              <1> ;	tick	: システム割り込み回数
   198                              <1> ;
   199                              <1> ;■戻り値	: 無し
   200                              <1> ;************************************************************************
   201                              <1> wait_tick:
   202                              <1> 		;---------------------------------------
   203                              <1> 		; 【スタックフレームの構築】
   204                              <1> 		;---------------------------------------
   205                              <1> 												; ---------------
   206                              <1> 												; EBP+ 8| ウェイト
   207                              <1> 												; ---------------
   208 00001406 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   209 00001407 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   210                              <1> 												; ------|--------
   211                              <1> 
   212                              <1> 		;---------------------------------------
   213                              <1> 		; 【レジスタの保存】
   214                              <1> 		;---------------------------------------
   215 00001409 50                  <1> 		push	eax
   216 0000140A 51                  <1> 		push	ecx
   217                              <1> 
   218                              <1> 		;---------------------------------------
   219                              <1> 		; ウェイト
   220                              <1> 		;---------------------------------------
   221 0000140B 8B4D08              <1> 		mov		ecx, [ebp +  8]					; ECX = ウェイト回数
   222 0000140E A1[F8060000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX = TIMER;
   223                              <1> 												; do
   224                              <1> 												; {
   225 00001413 3905[F8060000]      <1> .10L:	cmp		[TIMER_COUNT], eax				;   while (TIMER != EAX)
   226 00001419 74F8                <1> 		je		.10L							;     ;
   227 0000141B 40                  <1> 		inc		eax								;   EAX++;
   228 0000141C E2F5                <1> 		loop	.10L							; } while (--ECX);
   229                              <1> 
   230                              <1> 		;---------------------------------------
   231                              <1> 		; レジスタの復帰
   232                              <1> 		;---------------------------------------
   233 0000141E 59                  <1> 		pop		ecx
   234 0000141F 58                  <1> 		pop		eax
   235                              <1> 
   236                              <1> 		;---------------------------------------
   237                              <1> 		; スタックフレームの破棄
   238                              <1> 		;---------------------------------------
   239 00001420 89EC                <1> 		mov		esp, ebp
   240 00001422 5D                  <1> 		pop		ebp
   241                              <1> 
   242 00001423 C3                  <1> 		ret
   243                              <1> 
   189                                  %include	"../modules/protect/memcpy.s"
   190                              <1> ;************************************************************************
   191                              <1> ;	メモリのコピー
   192                              <1> ;========================================================================
   193                              <1> ;■書式		: void memcpy(dst, src, size);
   194                              <1> ;
   195                              <1> ;■引数
   196                              <1> ;	dst		: コピー先
   197                              <1> ;	src		: コピー元
   198                              <1> ;	size	: バイト数
   199                              <1> ;
   200                              <1> ;■戻り値	: 無し
   201                              <1> ;************************************************************************
   202                              <1> memcpy:
   203                              <1> 		;---------------------------------------
   204                              <1> 		; 【スタックフレームの構築】
   205                              <1> 		;---------------------------------------
   206                              <1> 												; EBP+16| バイト数
   207                              <1> 												; EBP+12| コピー元
   208                              <1> 												; EBP+ 8| コピー先
   209                              <1> 												; ------|--------
   210 00001424 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   211 00001425 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   212                              <1> 												; ------|--------
   213                              <1> 		;---------------------------------------
   214                              <1> 		; 【レジスタの保存】
   215                              <1> 		;---------------------------------------
   216 00001427 51                  <1> 		push	ecx
   217 00001428 56                  <1> 		push	esi
   218 00001429 57                  <1> 		push	edi
   219                              <1> 
   220                              <1> 		;---------------------------------------
   221                              <1> 		; バイト単位でのコピー
   222                              <1> 		;---------------------------------------
   223 0000142A FC                  <1> 		cld										; DF   = 0; // +方向
   224 0000142B 8B7D08              <1> 		mov		edi, [ebp + 8]					; EDI  = コピー先;
   225 0000142E 8B750C              <1> 		mov		esi, [ebp +12]					; EDI  = コピー元;
   226 00001431 8B4D10              <1> 		mov		ecx, [ebp +16]					; EDI  = バイト数;
   227 00001434 F3A4                <1> 		rep movsb								; while (*EDI++ = *ESI++) ;
   228                              <1> 
   229                              <1> 		;---------------------------------------
   230                              <1> 		; 【レジスタの復帰】
   231                              <1> 		;---------------------------------------
   232 00001436 5F                  <1> 		pop		edi
   233 00001437 5E                  <1> 		pop		esi
   234 00001438 59                  <1> 		pop		ecx
   235                              <1> 
   236                              <1> 		;---------------------------------------
   237                              <1> 		; 【スタックフレームの破棄】
   238                              <1> 		;---------------------------------------
   239 00001439 89EC                <1> 		mov		esp, ebp
   240 0000143B 5D                  <1> 		pop		ebp
   241                              <1> 
   242 0000143C C3                  <1> 		ret
   243                              <1> 
   190                                  
   191                                  ;************************************************************************
   192                                  ;	パディング
   193                                  ;************************************************************************
   194 0000143D 00<rep BC3h>            		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
   195                                  
