     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  %define	USE_SYSTEM_CALL
     8                                  %define	USE_TEST_AND_SET
     9                                  
    10                                  ;************************************************************************
    11                                  ;	マクロ
    12                                  ;************************************************************************
    13                                  %include	"../include/define.s"
    14                              <1> ;************************************************************************
    15                              <1> ;	メモリイメージ
    16                              <1> ;************************************************************************
    17                              <1> 
    18                              <1> 		;---------------------------------------
    19                              <1> 		;           |            | 
    20                              <1> 		;           |____________| 
    21                              <1> 		; 0000_7A00 |            | ( 512) スタック
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0000_7C00 |            | (  8K) ブート
    24                              <1> 		;           =            = 
    25                              <1> 		;           |____________| 
    26                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    27                              <1> 		;           =            = 
    28                              <1> 		;           |____________| 
    29                              <1> 		; 0000_BC00 |////////////| 
    30                              <1> 		;           =            = 
    31                              <1> 		;           |____________| 
    32                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    33                              <1> 		;           |____________| 
    34                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    35                              <1> 		;           |____________| 
    36                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    37                              <1> 		;           |            | 
    38                              <1> 		;           =            = 
    39                              <1> 		;           |____________| 
    40                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    41                              <1> 		;           |            | （各タスク1K）
    42                              <1> 		;           =            = 
    43                              <1> 		;           |____________| 
    44                              <1> 		; 0010_5000 |            | Dir
    45                              <1> 		;      6000 |____________| Page
    46                              <1> 		; 0010_7000 |            | Dir
    47                              <1> 		;      8000 |____________| Page
    48                              <1> 		; 0010_9000 |////////////| 
    49                              <1> 		;           |            | 
    50                              <1> 
    51                              <1> 
    52                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    53                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    54                              <1> 
    55                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    56                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    57                              <1> 
    58                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    59                              <1> 
    60                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    61                              <1> 
    62                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    63                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    64                              <1> 
    65                              <1> 		E820_RECORD_SIZE	equ		20
    66                              <1> 
    67                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    68                              <1> 
    69                              <1> 
    70                              <1> 		STACK_BASE			equ		0x0010_3000		; タスク用スタックエリア
    71                              <1> 		STACK_SIZE			equ		1024			; スタックサイズ
    72                              <1> 
    73                              <1> 		SP_TASK_0			equ		STACK_BASE + (STACK_SIZE * 1)
    74                              <1> 		SP_TASK_1			equ		STACK_BASE + (STACK_SIZE * 2)
    75                              <1> 		SP_TASK_2			equ		STACK_BASE + (STACK_SIZE * 3)
    76                              <1> 		SP_TASK_3			equ		STACK_BASE + (STACK_SIZE * 4)
    77                              <1> 		SP_TASK_4			equ		STACK_BASE + (STACK_SIZE * 5)
    78                              <1> 		SP_TASK_5			equ		STACK_BASE + (STACK_SIZE * 6)
    79                              <1> 		SP_TASK_6			equ		STACK_BASE + (STACK_SIZE * 7)
    80                              <1> 
    81                              <1> 		CR3_BASE			equ		0x0010_5000		; ページ変換テーブル：タスク3用
    82                              <1> 
    83                              <1> 		PARAM_TASK_4		equ		0x0010_8000		; 描画パラメータ：タスク4用
    84                              <1> 		PARAM_TASK_5		equ		0x0010_9000		; 描画パラメータ：タスク5用
    85                              <1> 		PARAM_TASK_6		equ		0x0010_A000		; 描画パラメータ：タスク6用
    86                              <1> 
    87                              <1> 		CR3_TASK_4			equ		0x0020_0000		; ページ変換テーブル：タスク4用
    88                              <1> 		CR3_TASK_5			equ		0x0020_2000		; ページ変換テーブル：タスク5用
    89                              <1> 		CR3_TASK_6			equ		0x0020_4000		; ページ変換テーブル：タスク6用
    90                              <1> 
    91                              <1> ;************************************************************************
    92                              <1> ;	ディスクイメージ
    93                              <1> ;************************************************************************
    94                              <1> 		;(SECT/SUM)  file img                 
    95                              <1> 		;                       ____________  
    96                              <1> 		;( 16/  0)   0000_0000 |       (8K) | ブート
    97                              <1> 		;                      =            = 
    98                              <1> 		;                      |____________| 
    99                              <1> 		;( 16/ 16)   0000_2000 |       (8K) | カーネル
   100                              <1> 		;                      =            = 
   101                              <1> 		;                      |____________| 
   102                              <1> 		;(256/ 32)   0000_4000 |     (128K) | FAT-1
   103                              <1> 		;                      |            | 
   104                              <1> 		;                      |            | 
   105                              <1> 		;                      =            = 
   106                              <1> 		;                      |____________| 
   107                              <1> 		;(256/288)   0002_4000 |     (128K) | FAT-2
   108                              <1> 		;                      |            | 
   109                              <1> 		;                      |            | 
   110                              <1> 		;                      =            = 
   111                              <1> 		;                      |____________| 
   112                              <1> 		;( 32/544)   0004_4000 |      (16K) | ルートディレクトリ領域
   113                              <1> 		;                      |            | (32セクタ/512エントリ)
   114                              <1> 		;                      =            = 
   115                              <1> 		;                      |____________| 
   116                              <1> 		;(   /576)   0004_8000 |            | データ領域
   117                              <1> 		;                      |            | 
   118                              <1> 		;                      =            = 
   119                              <1> 		;                      |            | 
   120                              <1> 		;                      |____________| 
   121                              <1> 		;(   /640)   0005_0000 |////////////| 
   122                              <1> 		;                      |            | 
   123                              <1> 
   124                              <1> 		FAT_SIZE			equ		(1024 * 128)	; FAT-1/2
   125                              <1> 		ROOT_SIZE			equ		(1024 *  16)	; ルートディレクトリ領域
   126                              <1> 
   127                              <1> 		ENTRY_SIZE			equ		32				; エントリサイズ
   128                              <1> 
   129                              <1> 		; BOOT イメージは異なるファイルなので、FAT アドレスの定義には加算しない
   130                              <1> 		FAT_OFFSET			equ		(BOOT_SIZE + KERNEL_SIZE)
   131                              <1> 		FAT1_START			equ		(KERNEL_SIZE)
   132                              <1> 		FAT2_START			equ		(FAT1_START + FAT_SIZE)
   133                              <1> 		ROOT_START			equ		(FAT2_START + FAT_SIZE)
   134                              <1> 		FILE_START			equ		(ROOT_START + ROOT_SIZE)
   135                              <1> 
   136                              <1> 		; ファイル属性
   137                              <1> 		ATTR_READ_ONLY		equ		0x01
   138                              <1> 		ATTR_HIDDEN			equ		0x02
   139                              <1> 		ATTR_SYSTEM			equ		0x04
   140                              <1> 		ATTR_VOLUME_ID		equ		0x08
   141                              <1> 		ATTR_DIRECTORY		equ		0x10
   142                              <1> 		ATTR_ARCHIVE		equ		0x20
    14                                  %include	"../include/macro.s"
    15                              <1> ;************************************************************************
    16                              <1> ; 関数呼び出し用マクロ
    17                              <1> ;
    18                              <1> ; 使い方：
    19                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    20                              <1> ;
    21                              <1> ;************************************************************************
    22                              <1> %macro  cdecl 1-*.nolist
    23                              <1> 
    24                              <1> 	%rep  %0 - 1
    25                              <1> 		push	%{-1:-1}
    26                              <1> 		%rotate -1
    27                              <1> 	%endrep 
    28                              <1> 	%rotate -1
    29                              <1> 
    30                              <1> 		call	%1
    31                              <1> 
    32                              <1> 	%if 1 < %0
    33                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    34                              <1> 	%endif
    35                              <1> 
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> ;************************************************************************
    39                              <1> ; 割り込みベクタ設定用
    40                              <1> ;
    41                              <1> ; 使い方：
    42                              <1> ;	set_vect	ベクタ番号, 割り込み処理 [, フラグ]
    43                              <1> ;
    44                              <1> ;************************************************************************
    45                              <1> %macro  set_vect 1-*.nolist
    46                              <1> 		push	eax
    47                              <1> 		push	edi
    48                              <1> 
    49                              <1> 		mov		edi, VECT_BASE + (%1 * 8)		; ベクタアドレス;
    50                              <1> 		mov		eax, %2
    51                              <1> 
    52                              <1> 	%if 3 == %0
    53                              <1> 		mov		[edi + 4], %3					; フラグ
    54                              <1> 	%endif
    55                              <1> 
    56                              <1> 		mov		[edi + 0], ax					; 例外アドレス[15: 0]
    57                              <1> 		shr		eax, 16							; 
    58                              <1> 		mov		[edi + 6], ax					; 例外アドレス[31:16]
    59                              <1> 
    60                              <1> 		pop		edi
    61                              <1> 		pop		eax
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> ;************************************************************************
    65                              <1> ; ポート出力用
    66                              <1> ;
    67                              <1> ; 使い方：
    68                              <1> ;	outp	ポート番号, 出力値
    69                              <1> ;
    70                              <1> ;************************************************************************
    71                              <1> %macro  outp 2
    72                              <1> 		mov		al, %2
    73                              <1> 		out		%1, al
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> ;************************************************************************
    77                              <1> ; ディスクリプタの情報を設定
    78                              <1> ;
    79                              <1> ; 使い方：
    80                              <1> ;	set_desc	ディスクリプタ, ベース
    81                              <1> ;
    82                              <1> ;************************************************************************
    83                              <1> %macro  set_desc 2-* 
    84                              <1> 		push	eax
    85                              <1> 		push	edi
    86                              <1> 
    87                              <1> 		mov		edi, %1							; ディスクリプタアドレス
    88                              <1> 		mov		eax, %2							; ベースアドレス
    89                              <1> 
    90                              <1> 	%if 3 == %0
    91                              <1> 		mov		[edi + 0], %3					; リミット
    92                              <1> 	%endif
    93                              <1> 
    94                              <1> 		mov		[edi + 2], ax					; ベース（[15: 0]）
    95                              <1> 		shr		eax, 16							; 
    96                              <1> 		mov		[edi + 4], al					; ベース（[23:16]）
    97                              <1> 		mov		[edi + 7], ah					; ベース（[31:24]）
    98                              <1> 
    99                              <1> 		pop		edi
   100                              <1> 		pop		eax
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> ;************************************************************************
   104                              <1> ; ゲートディスクリプタのオフセットを設定
   105                              <1> ;
   106                              <1> ; 使い方：
   107                              <1> ;	set_gate	ディスクリプタ, オフセット
   108                              <1> ;
   109                              <1> ;************************************************************************
   110                              <1> %macro  set_gate 2-* 
   111                              <1> 		push	eax
   112                              <1> 		push	edi
   113                              <1> 
   114                              <1> 		mov		edi, %1							; ディスクリプタアドレス
   115                              <1> 		mov		eax, %2							; ベースアドレス
   116                              <1> 
   117                              <1> 		mov		[edi + 0], ax					; ベース（[15: 0]）
   118                              <1> 		shr		eax, 16							; 
   119                              <1> 		mov		[edi + 6], ax					; ベース（[31:16]）
   120                              <1> 
   121                              <1> 		pop		edi
   122                              <1> 		pop		eax
   123                              <1> %endmacro
   124                              <1> 
   125                              <1> ;************************************************************************
   126                              <1> ;	構造体
   127                              <1> ;************************************************************************
   128                              <1> 
   129                              <1> ;-----------------------------------------------
   130                              <1> ;	ドライブパラメータ
   131                              <1> ;-----------------------------------------------
   132                              <1> struc drive
   133 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
   134 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
   135 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
   136 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
   137                              <1> endstruc
   138                              <1> 
   139                              <1> ;-----------------------------------------------
   140                              <1> ;	リングバッファ
   141                              <1> ;-----------------------------------------------
   142                              <1> %define		RING_ITEM_SIZE		(1 << 4)
   143                              <1> %define		RING_INDEX_MASK		(RING_ITEM_SIZE - 1)
   144                              <1> 
   145                              <1> struc ring_buff
   146 00000000 ????????            <1> 		.rp				resd	1				; RP:書き込み位置
   147 00000004 ????????            <1> 		.wp				resd	1				; WP:読み込み位置
   148 00000008 <res 10h>           <1> 		.item			resb	RING_ITEM_SIZE	; バッファ
   149                              <1> endstruc
   150                              <1> 
   151                              <1> ;-----------------------------------------------
   152                              <1> ;	バラ曲線描画パラメータ
   153                              <1> ;-----------------------------------------------
   154                              <1> struc rose
   155 00000000 ????????            <1> 		.x0				resd	1				; 左上座標：X0
   156 00000004 ????????            <1> 		.y0				resd	1				; 左上座標：Y0
   157 00000008 ????????            <1> 		.x1				resd	1				; 右下座標：X1
   158 0000000C ????????            <1> 		.y1				resd	1				; 右下座標：Y1
   159                              <1> 
   160 00000010 ????????            <1> 		.n				resd	1				; 変数：n
   161 00000014 ????????            <1> 		.d				resd	1				; 変数：d
   162                              <1> 
   163 00000018 ????????            <1> 		.color_x		resd	1				; 描画色：X軸
   164 0000001C ????????            <1> 		.color_y		resd	1				; 描画色：Y軸
   165 00000020 ????????            <1> 		.color_z		resd	1				; 描画色：枠
   166 00000024 ????????            <1> 		.color_s		resd	1				; 描画色：文字
   167 00000028 ????????            <1> 		.color_f		resd	1				; 描画色：グラフ描画色
   168 0000002C ????????            <1> 		.color_b		resd	1				; 描画色：グラフ消去色
   169                              <1> 
   170 00000030 <res 10h>           <1> 		.title			resb	16				; タイトル
   171                              <1> endstruc
   172                              <1> 
    15                                  
    16                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    17                                  
    18                                  [BITS 32]
    19                                  ;************************************************************************
    20                                  ;	エントリポイント
    21                                  ;************************************************************************
    22                                  kernel:
    23                                  		;---------------------------------------
    24                                  		; フォントアドレスを取得
    25                                  		;---------------------------------------
    26 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    27 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    28 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    29 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    30 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    31 00000011 A3[CC020000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    32                                  
    33                                  		;---------------------------------------
    34                                  		; TSSディスクリプタの設定
    35                                  		;---------------------------------------
    36                                  		set_desc	GDT.tss_0, TSS_0			; // タスク0用TSSの設定
    84 00000016 50                  <1>  push eax
    85 00000017 57                  <1>  push edi
    86                              <1> 
    87 00000018 BF[EC080000]        <1>  mov edi, %1
    88 0000001D B8[D4020000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000022 66894702            <1>  mov [edi + 2], ax
    95 00000026 C1E810              <1>  shr eax, 16
    96 00000029 884704              <1>  mov [edi + 4], al
    97 0000002C 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 0000002F 5F                  <1>  pop edi
   100 00000030 58                  <1>  pop eax
    37                                  		set_desc	GDT.tss_1, TSS_1			; // タスク1用TSSの設定
    84 00000031 50                  <1>  push eax
    85 00000032 57                  <1>  push edi
    86                              <1> 
    87 00000033 BF[F4080000]        <1>  mov edi, %1
    88 00000038 B8[AC030000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 0000003D 66894702            <1>  mov [edi + 2], ax
    95 00000041 C1E810              <1>  shr eax, 16
    96 00000044 884704              <1>  mov [edi + 4], al
    97 00000047 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 0000004A 5F                  <1>  pop edi
   100 0000004B 58                  <1>  pop eax
    38                                  		set_desc	GDT.tss_2, TSS_2			; // タスク2用TSSの設定
    84 0000004C 50                  <1>  push eax
    85 0000004D 57                  <1>  push edi
    86                              <1> 
    87 0000004E BF[FC080000]        <1>  mov edi, %1
    88 00000053 B8[84040000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000058 66894702            <1>  mov [edi + 2], ax
    95 0000005C C1E810              <1>  shr eax, 16
    96 0000005F 884704              <1>  mov [edi + 4], al
    97 00000062 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 00000065 5F                  <1>  pop edi
   100 00000066 58                  <1>  pop eax
    39                                  		set_desc	GDT.tss_3, TSS_3			; // タスク3用TSSの設定
    84 00000067 50                  <1>  push eax
    85 00000068 57                  <1>  push edi
    86                              <1> 
    87 00000069 BF[04090000]        <1>  mov edi, %1
    88 0000006E B8[5C050000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000073 66894702            <1>  mov [edi + 2], ax
    95 00000077 C1E810              <1>  shr eax, 16
    96 0000007A 884704              <1>  mov [edi + 4], al
    97 0000007D 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 00000080 5F                  <1>  pop edi
   100 00000081 58                  <1>  pop eax
    40                                  		set_desc	GDT.tss_4, TSS_4			; // タスク4用TSSの設定
    84 00000082 50                  <1>  push eax
    85 00000083 57                  <1>  push edi
    86                              <1> 
    87 00000084 BF[0C090000]        <1>  mov edi, %1
    88 00000089 B8[34060000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 0000008E 66894702            <1>  mov [edi + 2], ax
    95 00000092 C1E810              <1>  shr eax, 16
    96 00000095 884704              <1>  mov [edi + 4], al
    97 00000098 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 0000009B 5F                  <1>  pop edi
   100 0000009C 58                  <1>  pop eax
    41                                  		set_desc	GDT.tss_5, TSS_5			; // タスク5用TSSの設定
    84 0000009D 50                  <1>  push eax
    85 0000009E 57                  <1>  push edi
    86                              <1> 
    87 0000009F BF[14090000]        <1>  mov edi, %1
    88 000000A4 B8[0C070000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 000000A9 66894702            <1>  mov [edi + 2], ax
    95 000000AD C1E810              <1>  shr eax, 16
    96 000000B0 884704              <1>  mov [edi + 4], al
    97 000000B3 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 000000B6 5F                  <1>  pop edi
   100 000000B7 58                  <1>  pop eax
    42                                  		set_desc	GDT.tss_6, TSS_6			; // タスク6用TSSの設定
    84 000000B8 50                  <1>  push eax
    85 000000B9 57                  <1>  push edi
    86                              <1> 
    87 000000BA BF[1C090000]        <1>  mov edi, %1
    88 000000BF B8[E4070000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 000000C4 66894702            <1>  mov [edi + 2], ax
    95 000000C8 C1E810              <1>  shr eax, 16
    96 000000CB 884704              <1>  mov [edi + 4], al
    97 000000CE 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 000000D1 5F                  <1>  pop edi
   100 000000D2 58                  <1>  pop eax
    43                                  
    44                                  		;---------------------------------------
    45                                  		; コールゲートの設定
    46                                  		;---------------------------------------
    47                                  		set_gate	GDT.call_gate, call_gate	; // コールゲートの設定
   111 000000D3 50                  <1>  push eax
   112 000000D4 57                  <1>  push edi
   113                              <1> 
   114 000000D5 BF[24090000]        <1>  mov edi, %1
   115 000000DA B8[C4170000]        <1>  mov eax, %2
   116                              <1> 
   117 000000DF 668907              <1>  mov [edi + 0], ax
   118 000000E2 C1E810              <1>  shr eax, 16
   119 000000E5 66894706            <1>  mov [edi + 6], ax
   120                              <1> 
   121 000000E9 5F                  <1>  pop edi
   122 000000EA 58                  <1>  pop eax
    48                                  
    49                                  		;---------------------------------------
    50                                  		; LDTの設定
    51                                  		;---------------------------------------
    52                                  		set_desc	GDT.ldt, LDT, word LDT_LIMIT
    84 000000EB 50                  <1>  push eax
    85 000000EC 57                  <1>  push edi
    86                              <1> 
    87 000000ED BF[E4080000]        <1>  mov edi, %1
    88 000000F2 B8[32090000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91 000000F7 66C7075F00          <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 000000FC 66894702            <1>  mov [edi + 2], ax
    95 00000100 C1E810              <1>  shr eax, 16
    96 00000103 884704              <1>  mov [edi + 4], al
    97 00000106 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 00000109 5F                  <1>  pop edi
   100 0000010A 58                  <1>  pop eax
    53                                  
    54                                  		;---------------------------------------
    55                                  		; GDTをロード（再設定）
    56                                  		;---------------------------------------
    57 0000010B 0F0115[2C090000]        		lgdt	[GDTR]							; // グローバルディスクリプタテーブルをロード
    58                                  
    59                                  		;---------------------------------------
    60                                  		; スタックの設定
    61                                  		;---------------------------------------
    62 00000112 BC00341000              		mov		esp, SP_TASK_0					; // タスク0用のスタックを設定
    63                                  
    64                                  		;---------------------------------------
    65                                  		; タスクレジスタの初期化
    66                                  		;---------------------------------------
    67 00000117 66B83000                		mov		ax, SS_TASK_0
    68 0000011B 0F00D8                  		ltr		ax								; // タスクレジスタの設定
    69                                  
    70                                  		;---------------------------------------
    71                                  		; 初期化
    72                                  		;---------------------------------------
    73 0000011E E877130000              		cdecl	init_int						; // 割り込みベクタの初期化
    74 00000123 E8F8140000              		cdecl	init_pic						; // 割り込みコントローラの初期化
    75 00000128 E865080000              		cdecl	init_page						; // ページングの初期化
    76                                  
    77 0000012D 5057BF00001000B8-       		set_vect	0x00, int_zero_div			; // 割り込み処理の登録：0除算
    77 00000135 [02160000]668907C1-
    77 0000013D E810668947065F58   
    78 00000145 5057BF38001000B8-       		set_vect	0x07, int_nm				; // 割り込み処理の登録：デバイス使用不可
    78 0000014D [2F180000]668907C1-
    78 00000155 E810668947065F58   
    79 0000015D 5057BF70001000B8-       		set_vect	0x0E, int_pf				; // 割り込み処理の登録：ページフォルト
    79 00000165 [F40A0000]668907C1-
    79 0000016D E810668947065F58   
    80 00000175 5057BF00011000B8-       		set_vect	0x20, int_timer				; // 割り込み処理の登録：タイマー
    80 0000017D [6F0A0000]668907C1-
    80 00000185 E810668947065F58   
    81 0000018D 5057BF08011000B8-       		set_vect	0x21, int_keyboard			; // 割り込み処理の登録：KBC
    81 00000195 [8A160000]668907C1-
    81 0000019D E810668947065F58   
    82 000001A5 5057BF40011000B8-       		set_vect	0x28, int_rtc				; // 割り込み処理の登録：RTC
    82 000001AD [5F160000]668907C1-
    82 000001B5 E810668947065F58   
    83 000001BD 5057BF08041000B8-       		set_vect	0x81, trap_gate_81, word 0xEF00	; // トラップゲートの登録：1文字出力
    83 000001C5 [F4170000]66C74704-
    83 000001CD 00EF668907C1E81066-
    83 000001D6 8947065F58         
    84 000001DB 5057BF10041000B8-       		set_vect	0x82, trap_gate_82, word 0xEF00	; // トラップゲートの登録：点の描画
    84 000001E3 [02180000]66C74704-
    84 000001EB 00EF668907C1E81066-
    84 000001F4 8947065F58         
    85                                  
    86                                  		;---------------------------------------
    87                                  		; デバイスの割り込み許可
    88                                  		;---------------------------------------
    89 000001F9 6A10E84B1400006683-     		cdecl	rtc_int_en, 0x10				; rtc_int_en(UIE); // 更新サイクル終了割り込み許可
    89 00000202 C404               
    90 00000204 E873150000              		cdecl	int_en_timer0					; // タイマー（カウンタ0）割り込み許可
    91                                  
    92                                  		;---------------------------------------
    93                                  		; IMR(割り込みマスクレジスタ)の設定
    94                                  		;---------------------------------------
    95                                  		outp	0x21, 0b_1111_1000				; // 割り込み有効：スレーブPIC/KBC/タイマー
    72 00000209 B0F8                <1>  mov al, %2
    73 0000020B E621                <1>  out %1, al
    96                                  		outp	0xA1, 0b_1111_1110				; // 割り込み有効：RTC
    72 0000020D B0FE                <1>  mov al, %2
    73 0000020F E6A1                <1>  out %1, al
    97                                  
    98                                  		;---------------------------------------
    99                                  		; ページングを有効化
   100                                  		;---------------------------------------
   101 00000211 B800501000              		mov		eax, CR3_BASE					;
   102 00000216 0F22D8                  		mov		cr3, eax						; // ページテーブルの登録
   103                                  
   104 00000219 0F20C0                  		mov		eax, cr0						; // PGビットをセット
   105 0000021C 0D00000080              		or		eax, (1 << 31)					; CR0 |= PG;
   106 00000221 0F22C0                  		mov		cr0, eax						; 
   107 00000224 EB00                    		jmp		$ + 2							; FLUSH();
   108                                  
   109                                  		;---------------------------------------
   110                                  		; CPUの割り込み許可
   111                                  		;---------------------------------------
   112 00000226 FB                      		sti										; // 割り込み許可
   113                                  
   114                                  		;---------------------------------------
   115                                  		; フォントの一覧表示
   116                                  		;---------------------------------------
   117 00000227 6A0D6A3FE8140E0000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
   117 00000230 6683C408           
   118 00000234 6A046A3FE88A0E0000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
   118 0000023D 6683C408           
   119                                  
   120                                  		;---------------------------------------
   121                                  		; 文字列の表示
   122                                  		;---------------------------------------
   123 00000241 68[B4020000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
   123 00000249 00006A0E6A19E8350E-
   123 00000252 00006683C410       
   124                                  
   125                                  .10L:											; while (;;)
   126                                  												; {
   127                                  		;---------------------------------------
   128                                  		; 回転する棒を表示
   129                                  		;---------------------------------------
   130 00000258 E82E150000              		cdecl	draw_rotation_bar				;   // 回転する棒を表示
   131                                  
   132                                  		;---------------------------------------
   133                                  		; キーコードの取得
   134                                  		;---------------------------------------
   135 0000025D 68[C8020000]68-         		cdecl	ring_rd, _KEY_BUFF, .int_key	;   EAX = ring_rd(buff, &int_key);
   135 00000263 [B0160000]E85C1400-
   135 0000026B 006683C408         
   136 00000270 83F800                  		cmp		eax, 0							;   if (EAX == 0)
   137 00000273 743D                    		je		.10E							;   {
   138                                  												;   
   139                                  		;---------------------------------------
   140                                  		; キーコードの表示
   141                                  		;---------------------------------------
   142 00000275 68[B0160000]6A1D6A-     		cdecl	draw_key, 2, 29, _KEY_BUFF		;     ring_show(key_buff); // 全要素を表示
   142 0000027D 02E8A61400006683C4-
   142 00000286 0C                 
   143                                  
   144                                  		;---------------------------------------
   145                                  		; キー押下時の処理
   146                                  		;---------------------------------------
   147 00000287 A0[C8020000]            		mov		al, [.int_key]					;     AL = [.int_key]; // キーコード
   148 0000028C 3C02                    		cmp		al, 0x02						;     if ('1' == AL)
   149 0000028E 7522                    		jne		.12E							;     {
   150                                  
   151                                  		;---------------------------------------
   152                                  		; ファイル読み込み
   153                                  		;---------------------------------------
   154 00000290 FF15F09B0000            		call	[BOOT_LOAD + BOOT_SIZE - 16]	;       // ファイル読み込み
   155                                  
   156                                  		;---------------------------------------
   157                                  		; ファイルの内容を表示
   158                                  		;---------------------------------------
   159 00000296 BE00780000              		mov		esi, 0x7800						;       ESI       = 読み込み先アドレス;
   160 0000029B C6462000                		mov		[esi + 32], byte 0				;       [ESI +32] = 0; // 最大32文字
   161 0000029F 5668040F00006A006A-     		cdecl	draw_str, 0, 0, 0x0F04, esi		;       draw_str();    // 文字列の表示
   161 000002A8 00E8DB0D00006683C4-
   161 000002B1 10                 
   162                                  .12E:											;     }
   163                                  .10E:											;   }
   164 000002B2 EBA4                    		jmp		.10L							; }
   165                                  
   166 000002B4 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
   166 000002BD 65726E656C212000   
   167                                  
   168 000002C5 00<rep 3h>              ALIGN 4, db 0
   169 000002C8 00000000                .int_key:	dd	0
   170                                  
   171                                  ALIGN 4, db 0
   172 000002CC 00000000                FONT_ADR:	dd	0
   173 000002D0 00000000                RTC_TIME:	dd	0
   174                                  
   175                                  ;************************************************************************
   176                                  ;	タスク
   177                                  ;************************************************************************
   178                                  %include	"descriptor.s"
   179                              <1> ;************************************************************************
   180                              <1> ;	TSS
   181                              <1> ;************************************************************************
   182                              <1> TSS_0:
   183 000002D4 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   184 000002D8 00321000            <1> .esp0:			dd	SP_TASK_0 - 512				;*  4:ESP0
   185 000002DC 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   186 000002E0 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   187 000002E4 00000000            <1> .ss1:			dd	0							;* 16:
   188 000002E8 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   189 000002EC 00000000            <1> .ss2:			dd	0							;* 24:
   190 000002F0 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
   191 000002F4 00000000            <1> .eip:			dd	0							;  32:EIP
   192 000002F8 00000000            <1> .eflags:		dd	0							;  36:EFLAGS
   193 000002FC 00000000            <1> .eax:			dd	0							;  40:EAX
   194 00000300 00000000            <1> .ecx:			dd	0							;  44:ECX
   195 00000304 00000000            <1> .edx:			dd	0							;  48:EDX
   196 00000308 00000000            <1> .ebx:			dd	0							;  52:EBX
   197 0000030C 00000000            <1> .esp:			dd	0							;  56:ESP
   198 00000310 00000000            <1> .ebp:			dd	0							;  60:EBP
   199 00000314 00000000            <1> .esi:			dd	0							;  64:ESI
   200 00000318 00000000            <1> .edi:			dd	0							;  68:EDI
   201 0000031C 00000000            <1> .es:			dd	0							;  72:ES
   202 00000320 00000000            <1> .cs:			dd	0							;  76:CS
   203 00000324 00000000            <1> .ss:			dd	0							;  80:SS
   204 00000328 00000000            <1> .ds:			dd	0							;  84:DS
   205 0000032C 00000000            <1> .fs:			dd	0							;  88:FS
   206 00000330 00000000            <1> .gs:			dd	0							;  92:GS
   207 00000334 00000000            <1> .ldt:			dd	0							;* 96:LDTセグメントセレクタ
   208 00000338 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   209 0000033C 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   210                              <1> 
   211                              <1> TSS_1:
   212 000003AC 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   213 000003B0 00361000            <1> .esp0:			dd	SP_TASK_1 - 512				;*  4:ESP0
   214 000003B4 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   215 000003B8 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   216 000003BC 00000000            <1> .ss1:			dd	0							;* 16:
   217 000003C0 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   218 000003C4 00000000            <1> .ss2:			dd	0							;* 24:
   219 000003C8 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
   220 000003CC [620B0000]          <1> .eip:			dd	task_1						;  32:EIP
   221 000003D0 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   222 000003D4 00000000            <1> .eax:			dd	0							;  40:EAX
   223 000003D8 00000000            <1> .ecx:			dd	0							;  44:ECX
   224 000003DC 00000000            <1> .edx:			dd	0							;  48:EDX
   225 000003E0 00000000            <1> .ebx:			dd	0							;  52:EBX
   226 000003E4 00381000            <1> .esp:			dd	SP_TASK_1					;  56:ESP
   227 000003E8 00000000            <1> .ebp:			dd	0							;  60:EBP
   228 000003EC 00000000            <1> .esi:			dd	0							;  64:ESI
   229 000003F0 00000000            <1> .edi:			dd	0							;  68:EDI
   230 000003F4 27000000            <1> .es:			dd	DS_TASK_1					;  72:ES
   231 000003F8 1F000000            <1> .cs:			dd	CS_TASK_1					;  76:CS
   232 000003FC 27000000            <1> .ss:			dd	DS_TASK_1					;  80:SS
   233 00000400 27000000            <1> .ds:			dd	DS_TASK_1					;  84:DS
   234 00000404 27000000            <1> .fs:			dd	DS_TASK_1					;  88:FS
   235 00000408 27000000            <1> .gs:			dd	DS_TASK_1					;  92:GS
   236 0000040C 28000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   237 00000410 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   238 00000414 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   239                              <1> 
   240                              <1> TSS_2:
   241 00000484 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   242 00000488 003A1000            <1> .esp0:			dd	SP_TASK_2 - 512				;*  4:ESP0
   243 0000048C 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   244 00000490 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   245 00000494 00000000            <1> .ss1:			dd	0							;* 16:
   246 00000498 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   247 0000049C 00000000            <1> .ss2:			dd	0							;* 24:
   248 000004A0 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
   249 000004A4 [970B0000]          <1> .eip:			dd	task_2						;  32:EIP
   250 000004A8 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   251 000004AC 00000000            <1> .eax:			dd	0							;  40:EAX
   252 000004B0 00000000            <1> .ecx:			dd	0							;  44:ECX
   253 000004B4 00000000            <1> .edx:			dd	0							;  48:EDX
   254 000004B8 00000000            <1> .ebx:			dd	0							;  52:EBX
   255 000004BC 003C1000            <1> .esp:			dd	SP_TASK_2					;  56:ESP
   256 000004C0 00000000            <1> .ebp:			dd	0							;  60:EBP
   257 000004C4 00000000            <1> .esi:			dd	0							;  64:ESI
   258 000004C8 00000000            <1> .edi:			dd	0							;  68:EDI
   259 000004CC 37000000            <1> .es:			dd	DS_TASK_2					;  72:ES
   260 000004D0 2F000000            <1> .cs:			dd	CS_TASK_2					;  76:CS
   261 000004D4 37000000            <1> .ss:			dd	DS_TASK_2					;  80:SS
   262 000004D8 37000000            <1> .ds:			dd	DS_TASK_2					;  84:DS
   263 000004DC 37000000            <1> .fs:			dd	DS_TASK_2					;  88:FS
   264 000004E0 37000000            <1> .gs:			dd	DS_TASK_2					;  92:GS
   265 000004E4 28000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   266 000004E8 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   267 000004EC 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   268                              <1> 
   269                              <1> TSS_3:
   270 0000055C 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   271 00000560 003E1000            <1> .esp0:			dd	SP_TASK_3 - 512				;*  4:ESP0
   272 00000564 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   273 00000568 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   274 0000056C 00000000            <1> .ss1:			dd	0							;* 16:
   275 00000570 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   276 00000574 00000000            <1> .ss2:			dd	0							;* 24:
   277 00000578 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
   278 0000057C [680C0000]          <1> .eip:			dd	task_3						;  32:EIP
   279 00000580 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   280 00000584 00000000            <1> .eax:			dd	0							;  40:EAX
   281 00000588 00000000            <1> .ecx:			dd	0							;  44:ECX
   282 0000058C 00000000            <1> .edx:			dd	0							;  48:EDX
   283 00000590 00000000            <1> .ebx:			dd	0							;  52:EBX
   284 00000594 00401000            <1> .esp:			dd	SP_TASK_3					;  56:ESP
   285 00000598 00000000            <1> .ebp:			dd	0							;  60:EBP
   286 0000059C 00000000            <1> .esi:			dd	0							;  64:ESI
   287 000005A0 00000000            <1> .edi:			dd	0							;  68:EDI
   288 000005A4 47000000            <1> .es:			dd	DS_TASK_3					;  72:ES
   289 000005A8 3F000000            <1> .cs:			dd	CS_TASK_3					;  76:CS
   290 000005AC 47000000            <1> .ss:			dd	DS_TASK_3					;  80:SS
   291 000005B0 47000000            <1> .ds:			dd	DS_TASK_3					;  84:DS
   292 000005B4 47000000            <1> .fs:			dd	DS_TASK_3					;  88:FS
   293 000005B8 47000000            <1> .gs:			dd	DS_TASK_3					;  92:GS
   294 000005BC 28000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   295 000005C0 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   296 000005C4 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   297                              <1> 
   298                              <1> TSS_4:
   299 00000634 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   300 00000638 00421000            <1> .esp0:			dd	SP_TASK_4 - 512				;*  4:ESP0
   301 0000063C 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   302 00000640 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   303 00000644 00000000            <1> .ss1:			dd	0							;* 16:
   304 00000648 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   305 0000064C 00000000            <1> .ss2:			dd	0							;* 24:
   306 00000650 00002000            <1> .cr3:			dd	CR3_TASK_4					;  28:CR3(PDBR)
   307 00000654 [680C0000]          <1> .eip:			dd	task_3						;  32:EIP
   308 00000658 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   309 0000065C 00000000            <1> .eax:			dd	0							;  40:EAX
   310 00000660 00000000            <1> .ecx:			dd	0							;  44:ECX
   311 00000664 00000000            <1> .edx:			dd	0							;  48:EDX
   312 00000668 00000000            <1> .ebx:			dd	0							;  52:EBX
   313 0000066C 00441000            <1> .esp:			dd	SP_TASK_4					;  56:ESP
   314 00000670 00000000            <1> .ebp:			dd	0							;  60:EBP
   315 00000674 00000000            <1> .esi:			dd	0							;  64:ESI
   316 00000678 00000000            <1> .edi:			dd	0							;  68:EDI
   317 0000067C 4F000000            <1> .es:			dd	DS_TASK_4					;  72:ES
   318 00000680 3F000000            <1> .cs:			dd	CS_TASK_3					;  76:CS
   319 00000684 4F000000            <1> .ss:			dd	DS_TASK_4					;  80:SS
   320 00000688 4F000000            <1> .ds:			dd	DS_TASK_4					;  84:DS
   321 0000068C 4F000000            <1> .fs:			dd	DS_TASK_4					;  88:FS
   322 00000690 4F000000            <1> .gs:			dd	DS_TASK_4					;  92:GS
   323 00000694 28000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   324 00000698 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   325 0000069C 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   326                              <1> 
   327                              <1> TSS_5:
   328 0000070C 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   329 00000710 00461000            <1> .esp0:			dd	SP_TASK_5 - 512				;*  4:ESP0
   330 00000714 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   331 00000718 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   332 0000071C 00000000            <1> .ss1:			dd	0							;* 16:
   333 00000720 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   334 00000724 00000000            <1> .ss2:			dd	0							;* 24:
   335 00000728 00202000            <1> .cr3:			dd	CR3_TASK_5					;  28:CR3(PDBR)
   336 0000072C [680C0000]          <1> .eip:			dd	task_3						;  32:EIP
   337 00000730 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   338 00000734 00000000            <1> .eax:			dd	0							;  40:EAX
   339 00000738 00000000            <1> .ecx:			dd	0							;  44:ECX
   340 0000073C 00000000            <1> .edx:			dd	0							;  48:EDX
   341 00000740 00000000            <1> .ebx:			dd	0							;  52:EBX
   342 00000744 00481000            <1> .esp:			dd	SP_TASK_5					;  56:ESP
   343 00000748 00000000            <1> .ebp:			dd	0							;  60:EBP
   344 0000074C 00000000            <1> .esi:			dd	0							;  64:ESI
   345 00000750 00000000            <1> .edi:			dd	0							;  68:EDI
   346 00000754 57000000            <1> .es:			dd	DS_TASK_5					;  72:ES
   347 00000758 3F000000            <1> .cs:			dd	CS_TASK_3					;  76:CS
   348 0000075C 57000000            <1> .ss:			dd	DS_TASK_5					;  80:SS
   349 00000760 57000000            <1> .ds:			dd	DS_TASK_5					;  84:DS
   350 00000764 57000000            <1> .fs:			dd	DS_TASK_5					;  88:FS
   351 00000768 57000000            <1> .gs:			dd	DS_TASK_5					;  92:GS
   352 0000076C 28000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   353 00000770 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   354 00000774 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   355                              <1> 
   356                              <1> TSS_6:
   357 000007E4 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   358 000007E8 004A1000            <1> .esp0:			dd	SP_TASK_6 - 512				;*  4:ESP0
   359 000007EC 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   360 000007F0 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   361 000007F4 00000000            <1> .ss1:			dd	0							;* 16:
   362 000007F8 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   363 000007FC 00000000            <1> .ss2:			dd	0							;* 24:
   364 00000800 00402000            <1> .cr3:			dd	CR3_TASK_6					;  28:CR3(PDBR)
   365 00000804 [680C0000]          <1> .eip:			dd	task_3						;  32:EIP
   366 00000808 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   367 0000080C 00000000            <1> .eax:			dd	0							;  40:EAX
   368 00000810 00000000            <1> .ecx:			dd	0							;  44:ECX
   369 00000814 00000000            <1> .edx:			dd	0							;  48:EDX
   370 00000818 00000000            <1> .ebx:			dd	0							;  52:EBX
   371 0000081C 004C1000            <1> .esp:			dd	SP_TASK_6					;  56:ESP
   372 00000820 00000000            <1> .ebp:			dd	0							;  60:EBP
   373 00000824 00000000            <1> .esi:			dd	0							;  64:ESI
   374 00000828 00000000            <1> .edi:			dd	0							;  68:EDI
   375 0000082C 5F000000            <1> .es:			dd	DS_TASK_6					;  72:ES
   376 00000830 3F000000            <1> .cs:			dd	CS_TASK_3					;  76:CS
   377 00000834 5F000000            <1> .ss:			dd	DS_TASK_6					;  80:SS
   378 00000838 5F000000            <1> .ds:			dd	DS_TASK_6					;  84:DS
   379 0000083C 5F000000            <1> .fs:			dd	DS_TASK_6					;  88:FS
   380 00000840 5F000000            <1> .gs:			dd	DS_TASK_6					;  92:GS
   381 00000844 28000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   382 00000848 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   383 0000084C 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   384                              <1> 
   385                              <1> 
   386                              <1> ;************************************************************************
   387                              <1> ;	グローバルディスクリプタテーブル
   388                              <1> ;************************************************************************
   389 000008BC 0000000000000000    <1> GDT:			dq	0x0000000000000000			; NULL
   390 000008C4 FFFF0000009ACF00    <1> .cs_kernel:		dq	0x00CF9A000000FFFF			; CODE 4G
   391 000008CC FFFF00000092CF00    <1> .ds_kernel:		dq	0x00CF92000000FFFF			; DATA 4G
   392 000008D4 FFFF0000009A0F00    <1> .cs_bit16:		dq	0x000F9A000000FFFF			; コードセグメント（16ビットセグメント）
   393 000008DC FFFF000000920F00    <1> .ds_bit16:		dq	0x000F92000000FFFF			; データセグメント（16ビットセグメント）
   394 000008E4 0000000000820000    <1> .ldt			dq	0x0000820000000000			; LDTディスクリプタ
   395 000008EC 6700000000890000    <1> .tss_0:			dq	0x0000890000000067			; TSSディスクリプタ
   396 000008F4 6700000000890000    <1> .tss_1:			dq	0x0000890000000067			; TSSディスクリプタ
   397 000008FC 6700000000890000    <1> .tss_2:			dq	0x0000890000000067			; TSSディスクリプタ
   398 00000904 6700000000890000    <1> .tss_3:			dq	0x0000890000000067			; TSSディスクリプタ
   399 0000090C 6700000000890000    <1> .tss_4:			dq	0x0000890000000067			; TSSディスクリプタ
   400 00000914 6700000000890000    <1> .tss_5:			dq	0x0000890000000067			; TSSディスクリプタ
   401 0000091C 6700000000890000    <1> .tss_6:			dq	0x0000890000000067			; TSSディスクリプタ
   402 00000924 0000080004EC0000    <1> .call_gate:		dq	0x0000EC0400080000			; 386コールゲート(DPL=3, count=4, SEL=8)
   403                              <1> .end:
   404                              <1> 
   405                              <1> CS_KERNEL		equ	.cs_kernel	- GDT
   406                              <1> DS_KERNEL		equ	.ds_kernel	- GDT
   407                              <1> SS_LDT			equ	.ldt		- GDT
   408                              <1> SS_TASK_0		equ	.tss_0		- GDT
   409                              <1> SS_TASK_1		equ	.tss_1		- GDT
   410                              <1> SS_TASK_2		equ	.tss_2		- GDT
   411                              <1> SS_TASK_3		equ	.tss_3		- GDT
   412                              <1> SS_TASK_4		equ	.tss_4		- GDT
   413                              <1> SS_TASK_5		equ	.tss_5		- GDT
   414                              <1> SS_TASK_6		equ	.tss_6		- GDT
   415                              <1> SS_GATE_0		equ	.call_gate	- GDT
   416                              <1> 
   417 0000092C 6F00                <1> GDTR:	dw 		GDT.end - GDT - 1
   418 0000092E [BC080000]          <1> 		dd 		GDT
   419                              <1> 
   420                              <1> 
   421                              <1> ;************************************************************************
   422                              <1> ;	ローカルディスクリプタテーブル
   423                              <1> ;************************************************************************
   424 00000932 0000000000000000    <1> LDT:			dq	0x0000000000000000			; NULL
   425 0000093A FFFF0000009ACF00    <1> .cs_task_0:		dq	0x00CF9A000000FFFF			; CODE 4G
   426 00000942 FFFF00000092CF00    <1> .ds_task_0:		dq	0x00CF92000000FFFF			; DATA 4G
   427 0000094A FFFF000000FACF00    <1> .cs_task_1:		dq	0x00CFFA000000FFFF			; CODE 4G
   428 00000952 FFFF000000F2CF00    <1> .ds_task_1:		dq	0x00CFF2000000FFFF			; DATA 4G
   429 0000095A FFFF000000FACF00    <1> .cs_task_2:		dq	0x00CFFA000000FFFF			; CODE 4G
   430 00000962 FFFF000000F2CF00    <1> .ds_task_2:		dq	0x00CFF2000000FFFF			; DATA 4G
   431 0000096A FFFF000000FACF00    <1> .cs_task_3:		dq	0x00CFFA000000FFFF			; CODE 4G
   432 00000972 FFFF000000F2CF00    <1> .ds_task_3:		dq	0x00CFF2000000FFFF			; DATA 4G
   433 0000097A FFFF000000F2CF00    <1> .ds_task_4:		dq	0x00CFF2000000FFFF			; DATA 4G
   434 00000982 FFFF000000F2CF00    <1> .ds_task_5:		dq	0x00CFF2000000FFFF			; DATA 4G
   435 0000098A FFFF000000F2CF00    <1> .ds_task_6:		dq	0x00CFF2000000FFFF			; DATA 4G
   436                              <1> .end:
   437                              <1> 
   438                              <1> CS_TASK_0		equ	(.cs_task_0 - LDT) | 4		; タスク0用CSセレクタ
   439                              <1> DS_TASK_0		equ	(.ds_task_0 - LDT) | 4		; タスク0用DSセレクタ
   440                              <1> CS_TASK_1		equ	(.cs_task_1 - LDT) | 4 | 3	; タスク1用CSセレクタ
   441                              <1> DS_TASK_1		equ	(.ds_task_1 - LDT) | 4 | 3	; タスク1用DSセレクタ
   442                              <1> CS_TASK_2		equ	(.cs_task_2 - LDT) | 4 | 3	; タスク2用CSセレクタ
   443                              <1> DS_TASK_2		equ	(.ds_task_2 - LDT) | 4 | 3	; タスク2用DSセレクタ
   444                              <1> CS_TASK_3		equ	(.cs_task_3 - LDT) | 4 | 3	; タスク3用CSセレクタ
   445                              <1> DS_TASK_3		equ	(.ds_task_3 - LDT) | 4 | 3	; タスク3用DSセレクタ
   446                              <1> DS_TASK_4		equ	(.ds_task_4 - LDT) | 4 | 3	; タスク4用DSセレクタ
   447                              <1> DS_TASK_5		equ	(.ds_task_5 - LDT) | 4 | 3	; タスク5用DSセレクタ
   448                              <1> DS_TASK_6		equ	(.ds_task_6 - LDT) | 4 | 3	; タスク6用DSセレクタ
   449                              <1> 
   450                              <1> LDT_LIMIT		equ	.end		- LDT - 1
   451                              <1> 
   452                              <1> 
   179                                  %include	"modules/paging.s"
   180                              <1> ;************************************************************************
   181                              <1> ;	ページの初期化
   182                              <1> ;
   183                              <1> 		;---------------------------------------
   184                              <1> 		;          |____________| 
   185                              <1> 		; 0010_5000|       (4K) | ディレクトリテーブル
   186                              <1> 		;          =            = 
   187                              <1> 		;          |____________| 
   188                              <1> 		; 0010_6000|       (4K) | ページテーブル
   189                              <1> 		;          =            = 
   190                              <1> 		;          |____________| 
   191                              <1> 		; 0010_7000|       (4K) | ページフォルト用
   192                              <1> 		;          =            = 
   193                              <1> 		;          |____________| 
   194                              <1> 		;          |            | 
   195                              <1> ;
   196                              <1> ;************************************************************************
   197                              <1> init_page:
   198                              <1> 		;---------------------------------------
   199                              <1> 		; 【レジスタの保存】
   200                              <1> 		;---------------------------------------
   201 00000992 60                  <1> 		pusha
   202                              <1> 
   203                              <1> 		;---------------------------------------
   204                              <1> 		; ページ変換テーブルの作成
   205                              <1> 		;---------------------------------------
   206 00000993 6800501000E8970000- <1> 		cdecl	page_set_4m, CR3_BASE			; // ページ変換テーブルの作成：タスク3用
   206 0000099C 006683C404          <1>
   207 000009A1 6800002000E8890000- <1> 		cdecl	page_set_4m, CR3_TASK_4			; // ページ変換テーブルの作成：タスク4用
   207 000009AA 006683C404          <1>
   208 000009AF 6800202000E87B0000- <1> 		cdecl	page_set_4m, CR3_TASK_5			; // ページ変換テーブルの作成：タスク5用
   208 000009B8 006683C404          <1>
   209 000009BD 6800402000E86D0000- <1> 		cdecl	page_set_4m, CR3_TASK_6			; // ページ変換テーブルの作成：タスク6用
   209 000009C6 006683C404          <1>
   210                              <1> 
   211                              <1> 		;---------------------------------------
   212                              <1> 		; ページテーブルの設定（不在）
   213                              <1> 		;---------------------------------------
   214 000009CB C7051C641000000000- <1> 		mov		[0x0010_6000 + 0x107 * 4], dword 0	; // 0x0010_7000をページ不在に設定
   214 000009D4 00                  <1>
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; アドレス変換設定
   218                              <1> 		;---------------------------------------
   219 000009D5 C7051C142000078010- <1> 		mov		[0x0020_1000 + 0x107 * 4], dword PARAM_TASK_4 + 7 ; // アドレス変換：タスク4用
   219 000009DE 00                  <1>
   220 000009DF C7051C342000079010- <1> 		mov		[0x0020_3000 + 0x107 * 4], dword PARAM_TASK_5 + 7 ; // アドレス変換：タスク5用
   220 000009E8 00                  <1>
   221 000009E9 C7051C54200007A010- <1> 		mov		[0x0020_5000 + 0x107 * 4], dword PARAM_TASK_6 + 7 ; // アドレス変換：タスク6用
   221 000009F2 00                  <1>
   222                              <1> 
   223                              <1> 		;---------------------------------------
   224                              <1> 		; 描画パラメータの設定
   225                              <1> 		;---------------------------------------
   226 000009F3 6A4068[A80D0000]68- <1> 		cdecl	memcpy, PARAM_TASK_4, DRAW_PARAM.t4, rose_size	; 描画パラメータ：タスク4用
   226 000009FB 00801000E8D80E0000- <1>
   226 00000A04 6683C40C            <1>
   227 00000A08 6A4068[E80D0000]68- <1> 		cdecl	memcpy, PARAM_TASK_5, DRAW_PARAM.t5, rose_size	; 描画パラメータ：タスク5用
   227 00000A10 00901000E8C30E0000- <1>
   227 00000A19 6683C40C            <1>
   228 00000A1D 6A4068[280E0000]68- <1> 		cdecl	memcpy, PARAM_TASK_6, DRAW_PARAM.t6, rose_size	; 描画パラメータ：タスク6用
   228 00000A25 00A01000E8AE0E0000- <1>
   228 00000A2E 6683C40C            <1>
   229                              <1> 
   230                              <1> 		;---------------------------------------
   231                              <1> 		; 【レジスタの復帰】
   232                              <1> 		;---------------------------------------
   233 00000A32 61                  <1> 		popa
   234                              <1> 
   235 00000A33 C3                  <1> 		ret
   236                              <1> 
   237                              <1> 
   238                              <1> ;************************************************************************
   239                              <1> ;	
   240                              <1> ;************************************************************************
   241                              <1> page_set_4m:
   242                              <1> 		;---------------------------------------
   243                              <1> 		; 【スタックフレームの構築】
   244                              <1> 		;---------------------------------------
   245                              <1> 												; ------|--------
   246 00000A34 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   247 00000A35 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   248                              <1> 												; ------|--------
   249                              <1> 												;    + 8| ページテーブル作成位置
   250                              <1> 												; ------|--------
   251                              <1> 		;---------------------------------------
   252                              <1> 		; 【レジスタの保存】
   253                              <1> 		;---------------------------------------
   254 00000A37 60                  <1> 		pusha
   255                              <1> 
   256                              <1> 		;---------------------------------------
   257                              <1> 		; ページディレクトリの作成(P=0)
   258                              <1> 		;---------------------------------------
   259 00000A38 FC                  <1> 		cld										; // DFクリア（+方向）
   260 00000A39 8B7D08              <1> 		mov		edi, [ebp + 8]					; EDI = ページディレクトリの先頭;
   261 00000A3C B800000000          <1> 		mov		eax, 0x00000000					; EAX = 0 ; // P = 0
   262 00000A41 B900040000          <1> 		mov		ecx, 1024						; count = 1024;
   263 00000A46 F3AB                <1> 		rep stosd								; whlie (count--) *dst++ = 属性;
   264                              <1> 
   265                              <1> 		;---------------------------------------
   266                              <1> 		; 先頭のエントリを設定
   267                              <1> 		;---------------------------------------
   268 00000A48 89F8                <1> 		mov		eax, edi						; EAX  = EDI;   // ページディレクトリの直後
   269 00000A4A 2500F0FFFF          <1> 		and		eax, ~0x0000_0FFF				; EAX &= ~0FFF; // 物理アドレスの指定
   270 00000A4F 83C807              <1> 		or		eax,  7							; EAX |=  7;    // RWの許可
   271 00000A52 898700F0FFFF        <1> 		mov		[edi - (1024 * 4)], eax			; // 先頭のエントリを設定
   272                              <1> 
   273                              <1> 		;---------------------------------------
   274                              <1> 		; ページテーブルの設定（リニア）
   275                              <1> 		;---------------------------------------
   276 00000A58 B807000000          <1> 		mov		eax, 0x00000007					; // 物理アドレスの指定とRWの許可
   277 00000A5D B900040000          <1> 		mov		ecx, 1024						; count = 1024;
   278                              <1> 												; do
   279                              <1> .10L:											; {
   280 00000A62 AB                  <1> 		stosd									;   *dst++  = 属性;
   281 00000A63 0500100000          <1> 		add		eax, 0x00001000					;    adr   += 0x1000;
   282 00000A68 E2F8                <1> 		loop	.10L							; } while (--count);
   283                              <1> 
   284                              <1> 		;---------------------------------------
   285                              <1> 		; 【レジスタの復帰】
   286                              <1> 		;---------------------------------------
   287 00000A6A 61                  <1> 		popa
   288                              <1> 
   289                              <1> 		;---------------------------------------
   290                              <1> 		; 【スタックフレームの破棄】
   291                              <1> 		;---------------------------------------
   292 00000A6B 89EC                <1> 		mov		esp, ebp
   293 00000A6D 5D                  <1> 		pop		ebp
   294                              <1> 
   295 00000A6E C3                  <1> 		ret
   296                              <1> 
   180                                  %include	"modules/int_timer.s"
   181                              <1> ;************************************************************************
   182                              <1> ;	例外:タイマー
   183                              <1> ;************************************************************************
   184                              <1> int_timer:
   185                              <1> 		;---------------------------------------
   186                              <1> 		; 【レジスタの保存】
   187                              <1> 		;---------------------------------------
   188 00000A6F 60                  <1> 		pusha
   189 00000A70 1E                  <1> 		push	ds
   190 00000A71 06                  <1> 		push	es
   191                              <1> 
   192                              <1> 		;---------------------------------------
   193                              <1> 		; データ用セグメントの設定
   194                              <1> 		;---------------------------------------
   195 00000A72 66B81000            <1> 		mov		ax, 0x0010						; 
   196 00000A76 8ED8                <1> 		mov		ds, ax							; 
   197 00000A78 8EC0                <1> 		mov		es, ax							; 
   198                              <1> 
   199                              <1> 		;---------------------------------------
   200                              <1> 		; TICK
   201                              <1> 		;---------------------------------------
   202 00000A7A FF05[F00A0000]      <1> 		inc		dword [TIMER_COUNT]				; TIMER_COUNT++; // 割り込み回数の更新
   203                              <1> 
   204                              <1> 		;---------------------------------------
   205                              <1> 		; 割り込みフラグをクリア(EOI)
   206                              <1> 		;---------------------------------------
   207                              <1> 		outp	0x20, 0x20						; // マスタPIC:EOIコマンド
    72 00000A80 B020                <2>  mov al, %2
    73 00000A82 E620                <2>  out %1, al
   208                              <1> 
   209                              <1> 		;---------------------------------------
   210                              <1> 		; タスクの切り替え
   211                              <1> 		;---------------------------------------
   212 00000A84 660F00C8            <1> 		str		ax								; AX = TR; // 現在のタスクレジスタ
   213 00000A88 6683F830            <1> 		cmp		ax, SS_TASK_0					; case (AX)
   214 00000A8C 7427                <1> 		je		.11L							; {
   215 00000A8E 6683F838            <1> 		cmp		ax, SS_TASK_1					;   
   216 00000A92 742A                <1> 		je		.12L							;   
   217 00000A94 6683F840            <1> 		cmp		ax, SS_TASK_2					;   
   218 00000A98 742D                <1> 		je		.13L							;   
   219 00000A9A 6683F848            <1> 		cmp		ax, SS_TASK_3					;   
   220 00000A9E 7430                <1> 		je		.14L							;   
   221 00000AA0 6683F850            <1> 		cmp		ax, SS_TASK_4					;   
   222 00000AA4 7433                <1> 		je		.15L							;   
   223 00000AA6 6683F858            <1> 		cmp		ax, SS_TASK_5					;   
   224 00000AAA 7436                <1> 		je		.16L							;   
   225                              <1> 												;   default:
   226 00000AAC EA000000003000      <1> 		jmp		SS_TASK_0:0						;     // タスク0に切り替え
   227 00000AB3 EB36                <1> 		jmp		.10E							;     break;
   228                              <1> 												;     
   229                              <1> .11L:											;   case SS_TASK_0:
   230 00000AB5 EA000000003800      <1> 		jmp		SS_TASK_1:0						;     // タスク1に切り替え
   231 00000ABC EB2D                <1> 		jmp		.10E							;     break;
   232                              <1> 												;     
   233                              <1> .12L:											;   case SS_TASK_1:
   234 00000ABE EA000000004000      <1> 		jmp		SS_TASK_2:0						;     // タスク2に切り替え
   235 00000AC5 EB24                <1> 		jmp		.10E							;     break;
   236                              <1> 												;     
   237                              <1> .13L:											;   case SS_TASK_2:
   238 00000AC7 EA000000004800      <1> 		jmp		SS_TASK_3:0						;     // タスク3に切り替え
   239 00000ACE EB1B                <1> 		jmp		.10E							;     break;
   240                              <1> 												;     
   241                              <1> .14L:											;   case SS_TASK_3:
   242 00000AD0 EA000000005000      <1> 		jmp		SS_TASK_4:0						;     // タスク4に切り替え
   243 00000AD7 EB12                <1> 		jmp		.10E							;     break;
   244                              <1> 												;     
   245                              <1> .15L:											;   case SS_TASK_4:
   246 00000AD9 EA000000005800      <1> 		jmp		SS_TASK_5:0						;     // タスク5に切り替え
   247 00000AE0 EB09                <1> 		jmp		.10E							;     break;
   248                              <1> 												;     
   249                              <1> .16L:											;   case SS_TASK_5:
   250 00000AE2 EA000000006000      <1> 		jmp		SS_TASK_6:0						;     // タスク6に切り替え
   251 00000AE9 EB00                <1> 		jmp		.10E							;     break;
   252                              <1> .10E:											; }
   253                              <1> 
   254                              <1> 		;---------------------------------------
   255                              <1> 		; 【レジスタの復帰】
   256                              <1> 		;---------------------------------------
   257 00000AEB 07                  <1> 		pop		es								; 
   258 00000AEC 1F                  <1> 		pop		ds								; 
   259 00000AED 61                  <1> 		popa
   260                              <1> 
   261 00000AEE CF                  <1> 		iret
   262                              <1> 
   263 00000AEF 00                  <1> ALIGN 4, db 0
   264 00000AF0 00000000            <1> TIMER_COUNT:	dd	0
   265                              <1> 
   181                                  %include	"modules/int_pf.s"
   182                              <1> ;************************************************************************
   183                              <1> ;	
   184                              <1> ;************************************************************************
   185                              <1> int_pf:
   186                              <1> 		;---------------------------------------
   187                              <1> 		; 【スタックフレームの構築】
   188                              <1> 		;---------------------------------------
   189                              <1> 												; ------|--------
   190                              <1> 												; EBP+16| EFLAGS
   191                              <1> 												; EBP+12| CS
   192                              <1> 												; EBP+ 8| EIP（戻り番地）
   193 00000AF4 55                  <1> 		push	ebp								; EBP+ 4| エラーコード
   194 00000AF5 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   195                              <1> 												; ---------------
   196                              <1> 		;---------------------------------------
   197                              <1> 		; 【レジスタの保存】
   198                              <1> 		;---------------------------------------
   199 00000AF7 60                  <1> 		pusha									; 
   200 00000AF8 1E                  <1> 		push	ds								; 
   201 00000AF9 06                  <1> 		push	es								; 
   202                              <1> 
   203                              <1> 		;---------------------------------------
   204                              <1> 		; データ用セグメントの設定
   205                              <1> 		;---------------------------------------
   206 00000AFA 66B81000            <1> 		mov		ax, 0x0010						; 
   207 00000AFE 8ED8                <1> 		mov		ds, ax							; 
   208 00000B00 8EC0                <1> 		mov		es, ax							; 
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 例外を生成したアドレスの確認
   212                              <1> 		;---------------------------------------
   213 00000B02 0F20D0              <1> 		mov		eax, cr2						; // CR2
   214 00000B05 2500F0FFFF          <1> 		and		eax, ~0x0FFF					; // 4Kバイト以内のアクセス
   215 00000B0A 3D00701000          <1> 		cmp		eax, 0x0010_7000				; ptr = アクセスアドレス;
   216 00000B0F 7521                <1> 		jne		.10F							; if (0x0010_7000 == ptr)
   217                              <1> 												; {
   218                              <1> 		;---------------------------------------
   219                              <1> 		; ページの有効化
   220                              <1> 		;---------------------------------------
   221 00000B11 C7051C641000077010- <1> 		mov		[0x00106000 + 0x107 * 4], dword 0x00107007	; // ページの有効化
   221 00000B1A 00                  <1>
   222                              <1> 
   223                              <1> 		;---------------------------------------
   224                              <1> 		; 描画パラメータの設定
   225                              <1> 		;---------------------------------------
   226 00000B1B 6A4068[680D0000]68- <1> 		cdecl	memcpy, 0x0010_7000, DRAW_PARAM, rose_size	; 描画パラメータ：タスク3用
   226 00000B23 00701000E8B00D0000- <1>
   226 00000B2C 6683C40C            <1>
   227                              <1> 												; }
   228 00000B30 EB15                <1> 		jmp		.10E							; else
   229                              <1> .10F:											; {
   230                              <1> 		;---------------------------------------
   231                              <1> 		; スタックの調整
   232                              <1> 		;---------------------------------------
   233 00000B32 83C404              <1> 		add		esp, 4							; pop es
   234 00000B35 83C404              <1> 		add		esp, 4							; pop ds
   235 00000B38 61                  <1> 		popa									; 
   236 00000B39 5D                  <1> 		pop		ebp								; 
   237                              <1> 
   238                              <1> 		;---------------------------------------
   239                              <1> 		; タスク終了処理
   240                              <1> 		;---------------------------------------
   241 00000B3A 9C                  <1> 		pushf									; // EFLAGS
   242 00000B3B 0E                  <1> 		push	cs								; // CS
   243 00000B3C 68[CB140000]        <1> 		push	int_stop						; // スタック表示処理
   244                              <1> 
   245 00000B41 B8[510B0000]        <1> 		mov		eax, .s0						; // 割り込み種別
   246 00000B46 CF                  <1> 		iret
   247                              <1> .10E:											; }
   248                              <1> 		;---------------------------------------
   249                              <1> 		; 【レジスタの復帰】
   250                              <1> 		;---------------------------------------
   251 00000B47 07                  <1> 		pop		es								; 
   252 00000B48 1F                  <1> 		pop		ds								; 
   253 00000B49 61                  <1> 		popa									; 
   254                              <1> 
   255                              <1> 		;---------------------------------------
   256                              <1> 		; 【スタックフレームの破棄】
   257                              <1> 		;---------------------------------------
   258 00000B4A 89EC                <1> 		mov		esp, ebp
   259 00000B4C 5D                  <1> 		pop		ebp
   260                              <1> 
   261                              <1> 		;---------------------------------------
   262                              <1> 		; エラーコードの破棄
   263                              <1> 		;---------------------------------------
   264 00000B4D 83C404              <1> 		add		esp, 4							; // エラーコードの破棄
   265                              <1> 
   266 00000B50 CF                  <1> 		iret
   267                              <1> 
   268 00000B51 203C20504147452046- <1> .s0		db	" < PAGE FAULT > ", 0
   268 00000B5A 41554C54203E2000    <1>
   269                              <1> 
   182                                  %include	"tasks/task_1.s"
   183                              <1> ;************************************************************************
   184                              <1> ;	TASK-1
   185                              <1> ;************************************************************************
   186                              <1> task_1:
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 文字列の表示
   189                              <1> 		;---------------------------------------
   190 00000B62 68[900B0000]6A076A- <1> 		cdecl	draw_str, 63, 0, 0x07, .s0		; draw_str();
   190 00000B6A 006A3FE81705000066- <1>
   190 00000B73 83C410              <1>
   191                              <1> 
   192                              <1> .10L:											; while (;;)
   193                              <1> 												; {
   194                              <1> 		;---------------------------------------
   195                              <1> 		; 時刻の表示
   196                              <1> 		;---------------------------------------
   197 00000B76 A1[D0020000]        <1> 		mov		eax, [RTC_TIME]					;   // 時刻の取得
   198 00000B7B 5068000700006A006A- <1> 		cdecl	draw_time, 72, 0, 0x0700, eax	;   // 時刻の表示
   198 00000B84 48E8710800006683C4- <1>
   198 00000B8D 10                  <1>
   199                              <1> 
   200 00000B8E EBE6                <1> 		jmp		.10L							; }
   201                              <1> 
   202                              <1> 		;---------------------------------------
   203                              <1> 		; データ
   204                              <1> 		;---------------------------------------
   205 00000B90 5461736B2D3100      <1> .s0		db	"Task-1", 0
   206                              <1> 
   183                                  %include	"tasks/task_2.s"
   184                              <1> 
   185                              <1> ;************************************************************************
   186                              <1> ;	TASK
   187                              <1> ;************************************************************************
   188                              <1> task_2:
   189                              <1> 		;---------------------------------------
   190                              <1> 		; 文字列の表示
   191                              <1> 		;---------------------------------------
   192 00000B97 68[5A0C0000]6A076A- <1> 		cdecl	draw_str, 63, 1, 0x07, .s0		; draw_str(.s0);
   192 00000B9F 016A3FE8E204000066- <1>
   192 00000BA8 83C410              <1>
   193                              <1> 
   194                              <1> 		;---------------------------------------
   195                              <1> 		; 初期化
   196                              <1> 		;---------------------------------------
   197                              <1> 												; ---------+---------+---------|---------|---------|---------|
   198                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   199                              <1> 												; ---------+---------+---------|---------|---------|---------|
   200 00000BAB DB05[480C0000]      <1> 		fild	dword [.c1000]					;     1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   201 00000BB1 D9EB                <1> 		fldpi									;       pi |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   202 00000BB3 DA35[4C0C0000]      <1> 		fidiv	dword [.c180]					;   pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   203 00000BB9 D9EB                <1> 		fldpi									;       pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   204 00000BBB DCC0                <1> 		fadd	st0, st0						;     2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   205 00000BBD D9EE                <1> 		fldz									;   θ = 0 |    2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
   206                              <1> 												; ---------+---------+---------|---------|---------|---------|
   207                              <1> 												;   θ = 0 |    2*pi |d=pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
   208                              <1> 												; ---------+---------+---------|---------|---------|---------|
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; メインループ
   212                              <1> 		;---------------------------------------
   213                              <1> .10L:											; for ( ; ; )
   214                              <1> 												; {
   215                              <1> 		;---------------------------------------
   216                              <1> 		; sin(t)
   217                              <1> 		;---------------------------------------
   218                              <1> 												; ---------+---------+---------|---------|---------|---------|
   219                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   220                              <1> 												; ---------+---------+---------|---------|---------|---------|
   221                              <1> 												;       θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   222                              <1> 												; ---------+---------+---------|---------|---------|---------|
   223 00000BBF D8C2                <1> 		fadd	st0, st2						;   θ + d |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   224 00000BC1 D9F8                <1> 		fprem									;   MOD(θ)|    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   225 00000BC3 D9C0                <1> 		fld		st0								;       θ |      θ |    2*pi |       d |    1000 |xxxxxxxxx|
   226 00000BC5 D9FE                <1> 		fsin									;   sin(θ)|      θ |    2*pi |       d |    1000 |xxxxxxxxx|
   227 00000BC7 D8CC                <1> 		fmul	st0, st4						;ST4sin(θ)|      θ |    2*pi |       d |    1000 |xxxxxxxxx|
   228                              <1> 												; ---------+---------+---------|---------|---------|---------|
   229 00000BC9 DF35[500C0000]      <1> 		fbstp	[.bcd]							;       θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   230                              <1> 												; ---------+---------+---------|---------|---------|---------|
   231                              <1> 
   232 00000BCF A1[500C0000]        <1> 		mov		eax, [.bcd]						;   EAX = 1000 * sin(t);
   233 00000BD4 89C3                <1> 		mov		ebx, eax						;   EBX = EAX;
   234                              <1> 
   235 00000BD6 250F0F0000          <1> 		and		eax, 0x0F0F						;   // 上位4ビットをマスク
   236 00000BDB 0D30300000          <1> 		or		eax, 0x3030						;   // 上位4ビットに0x3を設定
   237                              <1> 
   238 00000BE0 C1EB04              <1> 		shr		ebx, 4							;   EBX >>= 4;
   239 00000BE3 81E30F0F0000        <1> 		and		ebx, 0x0F0F						;   // 上位4ビットをマスク
   240 00000BE9 81CB30300000        <1> 		or		ebx, 0x3030						;   // 上位4ビットに0x3を設定
   241                              <1> 
   242 00000BEF 883D[620C0000]      <1> 		mov		[.s2 + 0], bh					;   // 1桁目
   243 00000BF5 8825[640C0000]      <1> 		mov		[.s3 + 0], ah					;   // 小数1桁目
   244 00000BFB 881D[650C0000]      <1> 		mov		[.s3 + 1], bl					;   // 小数2桁目
   245 00000C01 A2[660C0000]        <1> 		mov		[.s3 + 2], al					;   // 小数3桁目
   246                              <1> 
   247 00000C06 B807000000          <1> 		mov		eax, 7							;   // 符号の表示
   248 00000C0B 0FA305[590C0000]    <1> 		bt		[.bcd + 9], eax					;   CF = bcd[9] & 0x80;
   249 00000C12 7209                <1> 		jc		.10F							;   if (CF)
   250                              <1> 												;   {
   251 00000C14 C605[610C0000]2B    <1> 		mov		[.s1 + 0], byte '+'				;     *s1 = '+';
   252 00000C1B EB07                <1> 		jmp		.10E							;   }
   253                              <1> .10F:											;   else
   254                              <1> 												;   {
   255 00000C1D C605[610C0000]2D    <1> 		mov		[.s1 + 0], byte '-'				;     *s1 = '-';
   256                              <1> .10E:											;   }
   257                              <1> 
   258 00000C24 68[610C0000]6A076A- <1> 		cdecl	draw_str, 72, 1, 0x07, .s1		; draw_str(.s1);
   258 00000C2C 016A48E85504000066- <1>
   258 00000C35 83C410              <1>
   259                              <1> 
   260                              <1> 		;---------------------------------------
   261                              <1> 		; ウェイト
   262                              <1> 		;---------------------------------------
   263 00000C38 6A14E87F0C00006683- <1> 		cdecl	wait_tick, 20					;   wait_tick(20);
   263 00000C41 C404                <1>
   264                              <1> 
   265 00000C43 E977FFFFFF          <1> 		jmp		.10L							; }
   266                              <1> 
   267                              <1> 
   268                              <1> ALIGN 4, db 0
   269 00000C48 E8030000            <1> .c1000:		dd	1000
   270 00000C4C B4000000            <1> .c180:		dd	180
   271                              <1> 
   272 00000C50 00<rep Ah>          <1> .bcd:	times 10 db	0x00
   273                              <1> 
   274 00000C5A 5461736B2D3200      <1> .s0		db	"Task-2", 0
   275 00000C61 2D                  <1> .s1:	db	"-"
   276 00000C62 302E                <1> .s2:	db	"0."
   277 00000C64 30303000            <1> .s3:	db	"000", 0
   278                              <1> 
   184                                  %include	"tasks/task_3.s"
   185                              <1> ;************************************************************************
   186                              <1> ;	TASK
   187                              <1> ;************************************************************************
   188                              <1> task_3:
   189                              <1> 		;---------------------------------------
   190                              <1> 		; 【スタックフレームの構築】
   191                              <1> 		;---------------------------------------
   192 00000C68 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   193                              <1> 												; ---------------
   194 00000C6A 6A00                <1> 		push	dword 0							;    - 4| x0 = 0; // X座標原点
   195 00000C6C 6A00                <1> 		push	dword 0							;    - 8| y0 = 0; // Y座標原点
   196 00000C6E 6A00                <1> 		push	dword 0							;    -12| x  = 0; // X座標描画
   197 00000C70 6A00                <1> 		push	dword 0							;    -16| y  = 0; // Y座標描画
   198 00000C72 6A00                <1> 		push	dword 0							;    -20| r  = 0; // 角度
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 初期化
   202                              <1> 		;---------------------------------------
   203 00000C74 BE00701000          <1> 		mov		esi, 0x0010_7000				; ESI = 描画パラメータ
   204                              <1> 
   205                              <1> 		;---------------------------------------
   206                              <1> 		; タイトル表示
   207                              <1> 		;---------------------------------------
   208 00000C79 8B06                <1> 		mov		eax, [esi + rose.x0]			; X0座標
   209 00000C7B 8B5E04              <1> 		mov		ebx, [esi + rose.y0]			; Y0座標
   210                              <1> 
   211 00000C7E C1E803              <1> 		shr		eax, 3							; EAX = EAX /  8; // X座標を文字位置に変換
   212 00000C81 C1EB04              <1> 		shr		ebx, 4							; EBX = EBX / 16; // Y座標を文字位置に変換
   213 00000C84 4B                  <1> 		dec		ebx								; // 1文字分上に移動
   214 00000C85 8B4E24              <1> 		mov		ecx, [esi + rose.color_s]		; 文字色
   215 00000C88 8D5630              <1> 		lea		edx, [esi + rose.title]			; タイトル
   216                              <1> 
   217 00000C8B 52515350E8F5030000- <1> 		cdecl	draw_str, eax, ebx, ecx, edx	; draw_str();
   217 00000C94 6683C410            <1>
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; X軸の中点
   221                              <1> 		;---------------------------------------
   222 00000C98 8B06                <1> 		mov		eax, [esi + rose.x0]			; EAX  = X0座標
   223 00000C9A 8B5E08              <1> 		mov		ebx, [esi + rose.x1]			; EBX  = X1座標
   224 00000C9D 29C3                <1> 		sub		ebx, eax						; EBX  = (X1 - X0);
   225 00000C9F D1EB                <1> 		shr		ebx, 1							; EBX /= 2;
   226 00000CA1 01C3                <1> 		add		ebx, eax						; EBX += X0
   227 00000CA3 895DFC              <1> 		mov		[ebp - 4], ebx					; x0 = EBX; // X座標原点;
   228                              <1> 
   229                              <1> 		;---------------------------------------
   230                              <1> 		; Y軸の中点
   231                              <1> 		;---------------------------------------
   232 00000CA6 8B4604              <1> 		mov		eax, [esi + rose.y0]			; EAX  = Y0座標
   233 00000CA9 8B5E0C              <1> 		mov		ebx, [esi + rose.y1]			; EBX  = Y1座標
   234 00000CAC 29C3                <1> 		sub		ebx, eax						; EBX  = (Y1 - Y0);
   235 00000CAE D1EB                <1> 		shr		ebx, 1							; EBX /= 2;
   236 00000CB0 01C3                <1> 		add		ebx, eax						; EBX += Y0
   237 00000CB2 895DF8              <1> 		mov		[ebp - 8], ebx					; y0 = EBX; // Y座標原点;
   238                              <1> 
   239                              <1> 		;---------------------------------------
   240                              <1> 		; X軸の描画
   241                              <1> 		;---------------------------------------
   242 00000CB5 8B06                <1> 		mov		eax, [esi + rose.x0]			; EAX = X0座標;
   243 00000CB7 8B5DF8              <1> 		mov		ebx, [ebp - 8]					; EBX = Y軸の中点;
   244 00000CBA 8B4E08              <1> 		mov		ecx, [esi + rose.x1]			; ECX = X1座標;
   245                              <1> 
   246 00000CBD FF761853515350E853- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]	; X軸
   246 00000CC6 0500006683C414      <1>
   247                              <1> 
   248                              <1> 		;---------------------------------------
   249                              <1> 		; Y軸の描画
   250                              <1> 		;---------------------------------------
   251 00000CCD 8B4604              <1> 		mov		eax, [esi + rose.y0]			; Y0座標
   252 00000CD0 8B5DFC              <1> 		mov		ebx, [ebp - 4]					; EBX = X軸の中点;
   253 00000CD3 8B4E0C              <1> 		mov		ecx, [esi + rose.y1]			; Y1座標
   254                              <1> 
   255 00000CD6 FF761C51535053E83A- <1> 		cdecl	draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]	; Y軸
   255 00000CDF 0500006683C414      <1>
   256                              <1> 
   257                              <1> 		;---------------------------------------
   258                              <1> 		; 枠の描画
   259                              <1> 		;---------------------------------------
   260 00000CE6 8B06                <1> 		mov		eax, [esi + rose.x0]			; X0座標
   261 00000CE8 8B5E04              <1> 		mov		ebx, [esi + rose.y0]			; Y0座標
   262 00000CEB 8B4E08              <1> 		mov		ecx, [esi + rose.x1]			; X1座標
   263 00000CEE 8B560C              <1> 		mov		edx, [esi + rose.y1]			; Y1座標
   264                              <1> 
   265 00000CF1 FF762052515350E8CE- <1> 		cdecl	draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]	; 枠
   265 00000CFA 0500006683C414      <1>
   266                              <1> 
   267                              <1> 		;---------------------------------------
   268                              <1> 		; 振幅をX軸の約95%とする
   269                              <1> 		;---------------------------------------
   270 00000D01 8B4608              <1> 		mov		eax, [esi + rose.x1]			; EAX  = X1座標;
   271 00000D04 2B06                <1> 		sub		eax, [esi + rose.x0]			; EAX -= X0座標;
   272 00000D06 D1E8                <1> 		shr		eax, 1							; EAX /= 2;      // 半分
   273 00000D08 89C3                <1> 		mov		ebx, eax						; EBX  = EAX;
   274 00000D0A C1EB04              <1> 		shr		ebx, 4							; EBX /= 16;
   275 00000D0D 29D8                <1> 		sub		eax, ebx						; EAX -= EBX;
   276                              <1> 
   277                              <1> 		;---------------------------------------
   278                              <1> 		; FPUの初期化(バラ曲線の初期化)
   279                              <1> 		;---------------------------------------
   280 00000D0F FF7614FF761050E84D- <1> 		cdecl	fpu_rose_init										, eax											, dword [esi + rose.n]							, dword [esi + rose.d]
   280 00000D18 0100006683C40C      <1>
   284                              <1> 
   285                              <1> 		;---------------------------------------
   286                              <1> 		; メインループ
   287                              <1> 		;---------------------------------------
   288                              <1> .10L:											; for ( ; ; )
   289                              <1> 												; {
   290                              <1> 		;---------------------------------------
   291                              <1> 		; 座標計算
   292                              <1> 		;---------------------------------------
   293 00000D1F 8D5DF4              <1> 		lea		ebx, [ebp -12]					;   EBX = &x;
   294 00000D22 8D4DF0              <1> 		lea		ecx, [ebp -16]					;   ECX = &y;
   295 00000D25 8B45EC              <1> 		mov		eax, [ebp -20]					;   EAX = r;
   296                              <1> 
   297 00000D28 505153E85201000066- <1> 		cdecl	fpu_rose_update										, ebx											, ecx											, eax
   297 00000D31 83C40C              <1>
   301                              <1> 
   302                              <1> 		;---------------------------------------
   303                              <1> 		; 角度更新(r = r % 36000)
   304                              <1> 		;---------------------------------------
   305 00000D34 BA00000000          <1> 		mov		edx, 0							;   EDX = 0;
   306 00000D39 40                  <1> 		inc		eax								;   EAX++;
   307 00000D3A BBA08C0000          <1> 		mov		ebx, 360 * 100					;   DBX = 36000
   308 00000D3F F7F3                <1> 		div		ebx								;   EDX = EDX:EAX % EBX;
   309 00000D41 8955EC              <1> 		mov		[ebp -20], edx
   310                              <1> 
   311                              <1> 		;---------------------------------------
   312                              <1> 		; ドット描画
   313                              <1> 		;---------------------------------------
   314 00000D44 8B4DF4              <1> 		mov		ecx, [ebp -12]					;   ECX = X座標
   315 00000D47 8B55F0              <1> 		mov		edx, [ebp -16]					;   ECX = Y座標
   316                              <1> 
   317 00000D4A 034DFC              <1> 		add		ecx, [ebp - 4]					;   ECX += X座標原点;
   318 00000D4D 0355F8              <1> 		add		edx, [ebp - 8]					;   EDX += Y座標原点;
   319                              <1> 
   320 00000D50 8B5E28              <1> 		mov		ebx, [esi + rose.color_f]		;   EBX = 表示色;
   321 00000D53 CD82                <1> 		int		0x82							;   sys_call_82(表示色, X, Y);
   322                              <1> 
   323                              <1> 		;---------------------------------------
   324                              <1> 		; ウェイト
   325                              <1> 		;---------------------------------------
   326 00000D55 6A02E8620B00006683- <1> 		cdecl	wait_tick, 2					;   wait_tick(2);
   326 00000D5E C404                <1>
   327                              <1> 
   328                              <1> 		;---------------------------------------
   329                              <1> 		; ドット描画(消去)
   330                              <1> 		;---------------------------------------
   331 00000D60 8B5E2C              <1> 		mov		ebx, [esi + rose.color_b]		;   EBX = 背景色;
   332 00000D63 CD82                <1> 		int		0x82							;   sys_call_82(背景色, X, Y);
   333                              <1> 
   334                              <1> 
   335 00000D65 EBB8                <1>         jmp     .10L                            ; }
   336                              <1> 
   337                              <1> 
   338 00000D67 00                  <1> ALIGN 4, db 0
   339                              <1> DRAW_PARAM:										; 描画パラメータ
   340                              <1> .t3:
   341                              <1> 	istruc	rose
   342 00000D68 20000000            <1> 		at	rose.x0,		dd		 32			; 左上座標：X0
   343 00000D6C 20000000            <1> 		at	rose.y0,		dd		 32			; 左上座標：Y0
   344 00000D70 D0000000            <1> 		at	rose.x1,		dd		208			; 右下座標：X1
   345 00000D74 D0000000            <1> 		at	rose.y1,		dd		208			; 右下座標：Y1
   346                              <1> 
   347 00000D78 02000000            <1> 		at	rose.n,			dd		2			; 変数：n
   348 00000D7C 01000000            <1> 		at	rose.d,			dd		1			; 変数：d
   349                              <1> 
   350 00000D80 07000000            <1> 		at	rose.color_x,	dd		0x0007		; 描画色：X軸
   351 00000D84 07000000            <1> 		at	rose.color_y,	dd		0x0007		; 描画色：Y軸
   352 00000D88 0F000000            <1> 		at	rose.color_z,	dd		0x000F		; 描画色：枠
   353 00000D8C 0F030000            <1> 		at	rose.color_s,	dd		0x030F		; 描画色：文字
   354 00000D90 0F000000            <1> 		at	rose.color_f,	dd		0x000F		; 描画色：グラフ描画色
   355 00000D94 03000000            <1> 		at	rose.color_b,	dd		0x0003		; 描画色：グラフ消去色
   356                              <1> 
   357 00000D98 5461736B2D3300      <1> 		at	rose.title,		db		"Task-3", 0	; タイトル
   358 00000D9F 00<rep 9h>          <1> 	iend
   359                              <1> 
   360                              <1> .t4:
   361                              <1> 	istruc	rose
   362 00000DA8 F8000000            <1> 		at	rose.x0,		dd		248			; 左上座標：X0
   363 00000DAC 20000000            <1> 		at	rose.y0,		dd		 32			; 左上座標：Y0
   364 00000DB0 A8010000            <1> 		at	rose.x1,		dd		424			; 右下座標：X1
   365 00000DB4 D0000000            <1> 		at	rose.y1,		dd		208			; 右下座標：Y1
   366                              <1> 
   367 00000DB8 03000000            <1> 		at	rose.n,			dd		3			; 変数：n
   368 00000DBC 01000000            <1> 		at	rose.d,			dd		1			; 変数：d
   369                              <1> 
   370 00000DC0 07000000            <1> 		at	rose.color_x,	dd		0x0007		; 描画色：X軸
   371 00000DC4 07000000            <1> 		at	rose.color_y,	dd		0x0007		; 描画色：Y軸
   372 00000DC8 0F000000            <1> 		at	rose.color_z,	dd		0x000F		; 描画色：枠
   373 00000DCC 0F040000            <1> 		at	rose.color_s,	dd		0x040F		; 描画色：文字
   374 00000DD0 0F000000            <1> 		at	rose.color_f,	dd		0x000F		; 描画色：グラフ描画色
   375 00000DD4 04000000            <1> 		at	rose.color_b,	dd		0x0004		; 描画色：グラフ消去色
   376                              <1> 
   377 00000DD8 5461736B2D3400      <1> 		at	rose.title,		db		"Task-4", 0	; タイトル
   378 00000DDF 00<rep 9h>          <1> 	iend
   379                              <1> 
   380                              <1> .t5:
   381                              <1> 	istruc	rose
   382 00000DE8 20000000            <1> 		at	rose.x0,		dd		 32			; 左上座標：X0
   383 00000DEC 10010000            <1> 		at	rose.y0,		dd		272			; 左上座標：Y0
   384 00000DF0 D0000000            <1> 		at	rose.x1,		dd		208			; 右下座標：X1
   385 00000DF4 C0010000            <1> 		at	rose.y1,		dd		448			; 右下座標：Y1
   386                              <1> 
   387 00000DF8 02000000            <1> 		at	rose.n,			dd		2			; 変数：n
   388 00000DFC 06000000            <1> 		at	rose.d,			dd		6			; 変数：d
   389                              <1> 
   390 00000E00 07000000            <1> 		at	rose.color_x,	dd		0x0007		; 描画色：X軸
   391 00000E04 07000000            <1> 		at	rose.color_y,	dd		0x0007		; 描画色：Y軸
   392 00000E08 0F000000            <1> 		at	rose.color_z,	dd		0x000F		; 描画色：枠
   393 00000E0C 0F050000            <1> 		at	rose.color_s,	dd		0x050F		; 描画色：文字
   394 00000E10 0F000000            <1> 		at	rose.color_f,	dd		0x000F		; 描画色：グラフ描画色
   395 00000E14 05000000            <1> 		at	rose.color_b,	dd		0x0005		; 描画色：グラフ消去色
   396                              <1> 
   397 00000E18 5461736B2D3500      <1> 		at	rose.title,		db		"Task-5", 0	; タイトル
   398 00000E1F 00<rep 9h>          <1> 	iend
   399                              <1> 
   400                              <1> .t6:
   401                              <1> 	istruc	rose
   402 00000E28 F8000000            <1> 		at	rose.x0,		dd		248			; 左上座標：X0
   403 00000E2C 10010000            <1> 		at	rose.y0,		dd		272			; 左上座標：Y0
   404 00000E30 A8010000            <1> 		at	rose.x1,		dd		424			; 右下座標：X1
   405 00000E34 C0010000            <1> 		at	rose.y1,		dd		448			; 右下座標：Y1
   406                              <1> 
   407 00000E38 04000000            <1> 		at	rose.n,			dd		4			; 変数：n
   408 00000E3C 06000000            <1> 		at	rose.d,			dd		6			; 変数：d
   409                              <1> 
   410 00000E40 07000000            <1> 		at	rose.color_x,	dd		0x0007		; 描画色：X軸
   411 00000E44 07000000            <1> 		at	rose.color_y,	dd		0x0007		; 描画色：Y軸
   412 00000E48 0F000000            <1> 		at	rose.color_z,	dd		0x000F		; 描画色：枠
   413 00000E4C 0F060000            <1> 		at	rose.color_s,	dd		0x060F		; 描画色：文字
   414 00000E50 0F000000            <1> 		at	rose.color_f,	dd		0x000F		; 描画色：グラフ描画色
   415 00000E54 06000000            <1> 		at	rose.color_b,	dd		0x0006		; 描画色：グラフ消去色
   416                              <1> 
   417 00000E58 5461736B2D3600      <1> 		at	rose.title,		db		"Task-6", 0	; タイトル
   418 00000E5F 00<rep 9h>          <1> 	iend
   419                              <1> 
   420                              <1> 
   421                              <1> 
   422                              <1> 
   423                              <1> ;************************************************************************
   424                              <1> ;	バラ曲線：初期化
   425                              <1> ;------------------------------------------------------------------------
   426                              <1> ;	バラ曲線を描画するためにFPUのレジスタを初期化する
   427                              <1> ;
   428                              <1> ;	Z = A * sin(nθ)
   429                              <1> ;	  = A * sin( (n/d) * ((π/180) * t) )
   430                              <1> ;
   431                              <1> ;	このグラフを描画するために、X/Y座標を次の様に計算する
   432                              <1> ;
   433                              <1> ;	x = A * sin(nθ) * cos(θ)
   434                              <1> ;	y = A * sin(nθ) * sin(θ)
   435                              <1> ;
   436                              <1> ;	この時、kは(n / d)で指定する。また、ラディアン = 度 * (π / 180)
   437                              <1> ;	である事から、r = π / 180を先に計算しておく
   438                              <1> ;========================================================================
   439                              <1> ;■書式		: void fpu_rose_init(A, n, d);
   440                              <1> ;
   441                              <1> ;■引数
   442                              <1> ;	DWORD	: A
   443                              <1> ;	DWORD	: n
   444                              <1> ;	DWORD	: d
   445                              <1> ;
   446                              <1> ;■戻り値	: 無し
   447                              <1> ;************************************************************************
   448                              <1> fpu_rose_init:
   449                              <1> 		;---------------------------------------
   450                              <1> 		; 【スタックフレームの構築】
   451                              <1> 		;---------------------------------------
   452                              <1> 												; ------|--------
   453                              <1> 												;    +16| d
   454                              <1> 												;    +12| n
   455                              <1> 												;    + 8| A
   456                              <1> 												; ---------------
   457 00000E68 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   458 00000E69 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   459                              <1> 												; ---------------
   460 00000E6B 68B4000000          <1> 		push	dword 180						;    - 4| dword i = 180;
   461                              <1> 
   462                              <1> 		;---------------------------------------
   463                              <1> 		; FPUを使った処理
   464                              <1> 		;
   465                              <1> 		; A(振幅), k(n/d),r(度→ラディアン)を
   466                              <1> 		; FPU内のレジスタにスタックしておく
   467                              <1> 		;---------------------------------------
   468                              <1> 												; ---------+---------+---------|---------|---------|---------|
   469                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   470                              <1> 												; ---------+---------+---------|---------|---------|---------|
   471 00000E70 D9EB                <1> 		fldpi									;   pi     |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   472 00000E72 DA75FC              <1> 		fidiv	dword [ebp - 4]					;   pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   473 00000E75 DB450C              <1> 		fild	dword [ebp +12]					;        n |  pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   474 00000E78 DA7510              <1> 		fidiv	dword [ebp +16]					;      n/d |         |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   475 00000E7B DB4508              <1> 		fild	dword [ebp + 8]					;        A |     n/d |  pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   476                              <1> 												; ---------+---------+---------|---------|---------|---------|
   477                              <1> 												;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   478                              <1> 												; ---------+---------+---------|---------|---------|---------|
   479                              <1> 		;---------------------------------------
   480                              <1> 		; スタックフレームの破棄
   481                              <1> 		;---------------------------------------
   482 00000E7E 89EC                <1> 		mov		esp, ebp
   483 00000E80 5D                  <1> 		pop		ebp
   484                              <1> 
   485 00000E81 C3                  <1> 		ret
   486                              <1> 
   487                              <1> ;************************************************************************
   488                              <1> ;	バラ曲線：計算
   489                              <1> ;------------------------------------------------------------------------
   490                              <1> ;	角度を引数として受け取り、座標を計算する。
   491                              <1> ;	（他のパラメータはFPUレジスタに設定済みと仮定）
   492                              <1> ;========================================================================
   493                              <1> ;■書式		: void fpu_rose_update(t, X, Y);
   494                              <1> ;
   495                              <1> ;■引数
   496                              <1> ;	DWORD	: 角度[度]
   497                              <1> ;	DWORD	: Y座標へのポインタ
   498                              <1> ;	DWORD	: X座標へのポインタ
   499                              <1> ;
   500                              <1> ;■戻り値	: 無し
   501                              <1> ;************************************************************************
   502                              <1> fpu_rose_update:
   503                              <1> 		;---------------------------------------
   504                              <1> 		; 【スタックフレームの構築】
   505                              <1> 		;---------------------------------------
   506                              <1> 												; ---------------
   507                              <1> 												; EBP+16| t(角度)
   508                              <1> 												; EBP+12| Y(float)
   509                              <1> 												; EBP+ 8| X(float)
   510                              <1> 												; ---------------
   511 00000E82 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   512 00000E83 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   513                              <1> 												; ------|--------
   514                              <1> 
   515                              <1> 		;---------------------------------------
   516                              <1> 		; 【レジスタの保存】
   517                              <1> 		;---------------------------------------
   518 00000E85 50                  <1> 		push	eax
   519 00000E86 53                  <1> 		push	ebx
   520                              <1> 
   521                              <1> 		;---------------------------------------
   522                              <1> 		; X/Yの保存先を設定
   523                              <1> 		;---------------------------------------
   524 00000E87 8B4508              <1> 		mov		eax, [ebp +  8]					; EAX = pX; // X座標へのポインタ
   525 00000E8A 8B5D0C              <1> 		mov		ebx, [ebp + 12]					; EBX = pY; // Y座標へのポインタ
   526                              <1> 
   527                              <1> 		;---------------------------------------
   528                              <1> 		; FPUを使った処理
   529                              <1> 		; 
   530                              <1> 		; 既にスタックしてある値を元に
   531                              <1> 		; t(角度)から座標を計算する
   532                              <1> 		;---------------------------------------
   533                              <1> 												; ---------+---------+---------|---------|---------|---------|
   534                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   535                              <1> 												; ---------+---------+---------|---------|---------|---------|
   536 00000E8D DB4510              <1> 		fild	dword [ebp +16]					;        t |       A |       k |       r |xxxxxxxxx|xxxxxxxxx|
   537 00000E90 D8CB                <1> 		fmul	st0, st3						;       rt |         |         |         |         |         |
   538 00000E92 D9C0                <1> 		fld		st0								;       rt |      rt |       A |       k |       r |xxxxxxxxx|
   539                              <1> 												; ---------+---------+---------|---------|---------|---------|
   540                              <1> 		; rt を θと置き換える					;       θ |      θ |       A |       k |       r |         |
   541                              <1> 												; ---------+---------+---------|---------|---------|---------|
   542 00000E94 D9FB                <1> 		fsincos									;   cos(θ)|  sin(θ)|      θ |       A |       k |       r |
   543 00000E96 D9CA                <1> 		fxch	st2								;       θ |         |  cos(θ)|         |         |         |
   544 00000E98 D8CC                <1> 		fmul	st0, st4						;      kθ |         |         |         |         |         |
   545 00000E9A D9FE                <1> 		fsin									;  sin(kθ)|         |         |         |         |         |
   546 00000E9C D8CB                <1> 		fmul	st0, st3						; Asin(kθ)|         |         |         |         |         |
   547                              <1> 												; ---------+---------+---------|---------|---------|---------|
   548                              <1> 												; Asin(kθ)|  sin(θ)|  cos(θ)|       A |       k |       r |
   549                              <1> 												; ---------+---------+---------|---------|---------|---------|
   550                              <1> 		;---------------------------------------
   551                              <1> 		; x =  A * sin(kθ) * cos(θ);
   552                              <1> 		;---------------------------------------
   553                              <1> 												; ---------+---------+---------|---------|---------|---------|
   554                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   555                              <1> 												; ---------+---------+---------|---------|---------|---------|
   556                              <1> 												; Asin(kθ)|  sin(θ)|  cos(θ)|       A |       k |       r |
   557 00000E9E D9CA                <1> 		fxch	st2								;   cos(θ)|         |Asin(kθ)|         |         |         |
   558 00000EA0 D8CA                <1> 		fmul	st0, st2						;        x |         |         |         |         |         |
   559 00000EA2 DB18                <1> 		fistp	dword [eax]						;   sin(θ)|Asin(kθ)|       A |       k |       r |xxxxxxxxx|
   560                              <1> 												; ---------+---------+---------|---------|---------|---------|
   561                              <1> 		;---------------------------------------
   562                              <1> 		; y = -A * sin(kθ) * sin(θ);
   563                              <1> 		;---------------------------------------
   564                              <1> 												; ---------+---------+---------|---------|---------|---------|
   565                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   566                              <1> 												; ---------+---------+---------|---------|---------|---------|
   567                              <1> 												;   sin(θ)|Asin(kθ)|       A |       k |       r |xxxxxxxxx|
   568 00000EA4 DEC9                <1> 		fmulp	st1, st0						;        y |       A |       k |       r |xxxxxxxxx|xxxxxxxxx|
   569 00000EA6 D9E0                <1> 		fchs									;       -y |         |         |         |xxxxxxxxx|xxxxxxxxx|
   570 00000EA8 DB1B                <1> 		fistp	dword [ebx]						;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   571                              <1> 												; ---------+---------+---------|---------|---------|---------|
   572                              <1> 		;---------------------------------------
   573                              <1> 		; レジスタの復帰
   574                              <1> 		;---------------------------------------
   575 00000EAA 5B                  <1> 		pop		ebx
   576 00000EAB 58                  <1> 		pop		eax
   577                              <1> 
   578                              <1> 		;---------------------------------------
   579                              <1> 		; スタックフレームの破棄
   580                              <1> 		;---------------------------------------
   581 00000EAC 89EC                <1> 		mov		esp, ebp
   582 00000EAE 5D                  <1> 		pop		ebp
   583                              <1> 
   584 00000EAF C3                  <1> 		ret
   585                              <1> 
   185                                  
   186                                  ;************************************************************************
   187                                  ;	モジュール
   188                                  ;************************************************************************
   189                                  %include	"../modules/protect/vga.s"
   190                              <1> ;************************************************************************
   191                              <1> ;	読み込みプレーンの選択
   192                              <1> ;========================================================================
   193                              <1> ;■書式		: void vga_set_read_plane(plane);
   194                              <1> ;
   195                              <1> ;■引数
   196                              <1> ;	plane	: 読み込みプレーン
   197                              <1> ;
   198                              <1> ;■戻り値	: 無し
   199                              <1> ;************************************************************************
   200                              <1> vga_set_read_plane:
   201                              <1> 		;---------------------------------------
   202                              <1> 		; 【スタックフレームの構築】
   203                              <1> 		;---------------------------------------
   204                              <1> 												; EBP+ 8| プレーン（インデックス）
   205                              <1> 												; ------+----------------
   206 00000EB0 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   207 00000EB1 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   208                              <1> 												; ------+----------------
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 【レジスタの保存】
   212                              <1> 		;---------------------------------------
   213 00000EB3 50                  <1> 		push	eax
   214 00000EB4 52                  <1> 		push	edx
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; 読み込みプレーンの選択
   218                              <1> 		;---------------------------------------
   219 00000EB5 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
   220 00000EB8 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
   221 00000EBB B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
   222 00000EBD 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
   223 00000EC1 66EF                <1> 		out		dx, ax							; // ポート出力
   224                              <1> 
   225                              <1> 		;---------------------------------------
   226                              <1> 		; 【レジスタの復帰】
   227                              <1> 		;---------------------------------------
   228 00000EC3 5A                  <1> 		pop		edx
   229 00000EC4 58                  <1> 		pop		eax
   230                              <1> 
   231                              <1> 		;---------------------------------------
   232                              <1> 		; 【スタックフレームの破棄】
   233                              <1> 		;---------------------------------------
   234 00000EC5 89EC                <1> 		mov		esp, ebp
   235 00000EC7 5D                  <1> 		pop		ebp
   236                              <1> 
   237 00000EC8 C3                  <1> 		ret
   238                              <1> 
   239                              <1> 
   240                              <1> ;************************************************************************
   241                              <1> ;	書き込みプレーンを選択
   242                              <1> ;========================================================================
   243                              <1> ;■書式		: void vga_set_write_plane(plane);
   244                              <1> ;
   245                              <1> ;■引数
   246                              <1> ;	plane	: 書き込みプレーン
   247                              <1> ;
   248                              <1> ;■戻り値	: 無し
   249                              <1> ;************************************************************************
   250                              <1> vga_set_write_plane:
   251                              <1> 		;---------------------------------------
   252                              <1> 		; 【スタックフレームの構築】
   253                              <1> 		;---------------------------------------
   254                              <1> 												; EBP+ 8| プレーン（ビット指定）
   255                              <1> 												; ------+----------------
   256 00000EC9 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   257 00000ECA 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   258                              <1> 												; ------+----------------
   259                              <1> 
   260                              <1> 		;---------------------------------------
   261                              <1> 		; 【レジスタの保存】
   262                              <1> 		;---------------------------------------
   263 00000ECC 50                  <1> 		push	eax
   264 00000ECD 52                  <1> 		push	edx
   265                              <1> 
   266                              <1> 		;---------------------------------------
   267                              <1> 		; 書き込みプレーンの選択
   268                              <1> 		;---------------------------------------
   269 00000ECE 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
   270 00000ED1 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
   271 00000ED4 B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
   272 00000ED6 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
   273 00000EDA 66EF                <1> 		out		dx, ax							; // ポート出力
   274                              <1> 
   275                              <1> 		;---------------------------------------
   276                              <1> 		; 【レジスタの復帰】
   277                              <1> 		;---------------------------------------
   278 00000EDC 5A                  <1> 		pop		edx
   279 00000EDD 58                  <1> 		pop		eax
   280                              <1> 
   281                              <1> 		;---------------------------------------
   282                              <1> 		; 【スタックフレームの破棄】
   283                              <1> 		;---------------------------------------
   284 00000EDE 89EC                <1> 		mov		esp, ebp
   285 00000EE0 5D                  <1> 		pop		ebp
   286                              <1> 
   287 00000EE1 C3                  <1> 		ret
   288                              <1> 
   289                              <1> 
   290                              <1> ;************************************************************************
   291                              <1> ;	フォントの書き込み
   292                              <1> ;========================================================================
   293                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   294                              <1> ;
   295                              <1> ;■引数
   296                              <1> ;	font	: FONTアドレス
   297                              <1> ;	vram	: VRAMアドレス
   298                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   299                              <1> ;	color	: 描画色
   300                              <1> ;
   301                              <1> ;■戻り値	: 無し
   302                              <1> ;************************************************************************
   303                              <1> vram_font_copy:
   304                              <1> 		;---------------------------------------
   305                              <1> 		; 【スタックフレームの構築】
   306                              <1> 		;---------------------------------------
   307                              <1> 												; EBP+20| 色（背景/前景色）
   308                              <1> 												; EBP+16| プレーン（ビット指定）
   309                              <1> 												; EBP+12| VRAMアドレス
   310                              <1> 												; EBP+ 8| FONTアドレス
   311                              <1> 												; ------+----------------
   312 00000EE2 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   313 00000EE3 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   314                              <1> 												; ------+----------------
   315                              <1> 
   316                              <1> 		;---------------------------------------
   317                              <1> 		; 【レジスタの保存】
   318                              <1> 		;---------------------------------------
   319 00000EE5 50                  <1> 		push	eax
   320 00000EE6 53                  <1> 		push	ebx
   321 00000EE7 51                  <1> 		push	ecx
   322 00000EE8 52                  <1> 		push	edx
   323 00000EE9 56                  <1> 		push	esi
   324 00000EEA 57                  <1> 		push	edi
   325                              <1> 
   326                              <1> 		;---------------------------------------
   327                              <1> 		; 【処理の開始】
   328                              <1> 		;---------------------------------------
   329 00000EEB 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   330 00000EEE 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   331 00000EF1 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   332 00000EF5 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   333                              <1> 
   334 00000EF9 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   335 00000EFB 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   336 00000EFE FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   337                              <1> 
   338 00000F00 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   339 00000F02 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   340 00000F05 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   341                              <1> 
   342                              <1> 		;---------------------------------------
   343                              <1> 		; 16ドットフォントのコピー
   344                              <1> 		;---------------------------------------
   345 00000F07 FC                  <1> 		cld										; DF  = 0; // アドレス加算
   346                              <1> 
   347 00000F08 B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   348                              <1> .10L:											; do
   349                              <1> 												; {
   350                              <1> 		;---------------------------------------
   351                              <1> 		; フォントマスクの作成
   352                              <1> 		;---------------------------------------
   353 00000F0D AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   354 00000F0E 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   355 00000F10 F6D4                <1> 		not		ah								;   
   356                              <1> 
   357                              <1> 		;---------------------------------------
   358                              <1> 		; 前景色
   359                              <1> 		;---------------------------------------
   360 00000F12 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   361                              <1> 
   362                              <1> 		;---------------------------------------
   363                              <1> 		; 背景色
   364                              <1> 		;---------------------------------------
   365 00000F14 F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   366 00000F1A 7404                <1> 		jz		.11F							;   {
   367 00000F1C 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   368 00000F1E EB02                <1> 		jmp		.11E							;   }
   369                              <1> .11F:											;   else
   370                              <1> 												;   {
   371 00000F20 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   372                              <1> .11E:											;   }
   373                              <1> 
   374                              <1> 		;---------------------------------------
   375                              <1> 		; 前景色と背景色を合成
   376                              <1> 		;---------------------------------------
   377 00000F22 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   378                              <1> 
   379                              <1> 		;---------------------------------------
   380                              <1> 		; 新しい値を出力
   381                              <1> 		;---------------------------------------
   382 00000F24 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   383                              <1> 
   384 00000F26 83C750              <1> 		add		edi, 80							;   EDI += 80;
   385 00000F29 E2E2                <1> 		loop	.10L							; } while (--ECX);
   386                              <1> .10E:											; 
   387                              <1> 
   388                              <1> 		;---------------------------------------
   389                              <1> 		; 【レジスタの復帰】
   390                              <1> 		;---------------------------------------
   391 00000F2B 5F                  <1> 		pop		edi
   392 00000F2C 5E                  <1> 		pop		esi
   393 00000F2D 5A                  <1> 		pop		edx
   394 00000F2E 59                  <1> 		pop		ecx
   395 00000F2F 5B                  <1> 		pop		ebx
   396 00000F30 58                  <1> 		pop		eax
   397                              <1> 
   398                              <1> 		;---------------------------------------
   399                              <1> 		; 【スタックフレームの破棄】
   400                              <1> 		;---------------------------------------
   401 00000F31 89EC                <1> 		mov		esp, ebp
   402 00000F33 5D                  <1> 		pop		ebp
   403                              <1> 
   404 00000F34 C3                  <1> 		ret
   405                              <1> 
   406                              <1> 
   407                              <1> ;************************************************************************
   408                              <1> ;	ビットパターンの書き込み
   409                              <1> ;========================================================================
   410                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   411                              <1> ;
   412                              <1> ;■引数
   413                              <1> ;	bit		: 出力ビットパターン
   414                              <1> ;	vram	: VRAMアドレス
   415                              <1> ;	flag	: 1:セット, 0:クリア
   416                              <1> ;
   417                              <1> ;■戻り値	: 無し
   418                              <1> ;************************************************************************
   419                              <1> vram_bit_copy:
   420                              <1> 		;---------------------------------------
   421                              <1> 		; 【スタックフレームの構築】
   422                              <1> 		;---------------------------------------
   423                              <1> 												; EBP+20| 色（背景/前景色）
   424                              <1> 												; EBP+16| プレーン（ビット指定）
   425                              <1> 												; EBP+12| VRAMアドレス
   426                              <1> 												; EBP+ 8| 出力ビットパターン
   427                              <1> 												; ------+----------------
   428 00000F35 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   429 00000F36 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   430                              <1> 												; ------+----------------
   431                              <1> 
   432                              <1> 		;---------------------------------------
   433                              <1> 		; 【レジスタの保存】
   434                              <1> 		;---------------------------------------
   435 00000F38 50                  <1> 		push	eax
   436 00000F39 53                  <1> 		push	ebx
   437 00000F3A 57                  <1> 		push	edi
   438                              <1> 
   439                              <1> 		;---------------------------------------
   440                              <1> 		; 【処理の開始】
   441                              <1> 		;---------------------------------------
   442 00000F3B 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   443 00000F3E 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   444 00000F42 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   445                              <1> 
   446 00000F46 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   447 00000F48 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   448 00000F4B FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   449                              <1> 
   450                              <1> 		;---------------------------------------
   451                              <1> 		; マスクデータの作成
   452                              <1> 		;---------------------------------------
   453 00000F4D 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   454 00000F50 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   455 00000F52 F6D4                <1> 		not		ah								; 
   456                              <1> 
   457                              <1> 		;---------------------------------------
   458                              <1> 		; 現在値の出力を取得
   459                              <1> 		;---------------------------------------
   460 00000F54 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   461 00000F56 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   462 00000F58 08E0                <1> 		or		al, ah							; AL |= AH;
   463                              <1> 
   464                              <1> 		;---------------------------------------
   465                              <1> 		; 新しい値を出力
   466                              <1> 		;---------------------------------------
   467 00000F5A 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   468                              <1> 
   469                              <1> 		;---------------------------------------
   470                              <1> 		; 【レジスタの復帰】
   471                              <1> 		;---------------------------------------
   472 00000F5C 5F                  <1> 		pop		edi
   473 00000F5D 5B                  <1> 		pop		ebx
   474 00000F5E 58                  <1> 		pop		eax
   475                              <1> 
   476                              <1> 		;---------------------------------------
   477                              <1> 		; 【スタックフレームの破棄】
   478                              <1> 		;---------------------------------------
   479 00000F5F 89EC                <1> 		mov		esp, ebp
   480 00000F61 5D                  <1> 		pop		ebp
   481                              <1> 
   482 00000F62 C3                  <1> 		ret
   190                                  %include	"../modules/protect/draw_char.s"
   191                              <1> ;************************************************************************
   192                              <1> ;	文字の表示
   193                              <1> ;------------------------------------------------------------------------
   194                              <1> ;	グラフィックスモードでテキストを表示
   195                              <1> ;========================================================================
   196                              <1> ;■書式		: void draw_char(col, row, color, ch);
   197                              <1> ;
   198                              <1> ;■引数
   199                              <1> ;	col		: 列（0～79）
   200                              <1> ;	row		: 行（0～29）
   201                              <1> ;	color	: 描画色
   202                              <1> ;	ch		: 文字
   203                              <1> ;
   204                              <1> ;■戻り値	: 無し
   205                              <1> ;************************************************************************
   206                              <1> draw_char:
   207                              <1> 		;---------------------------------------
   208                              <1> 		; 【スタックフレームの構築】
   209                              <1> 		;---------------------------------------
   210                              <1> 												; ------|--------
   211                              <1> 												; EBP+20| 文字
   212                              <1> 												; EBP+16| 色
   213                              <1> 												; EBP+12| Y（行）
   214                              <1> 												; EBP+ 8| X（列）
   215                              <1> 												; ------+----------------
   216 00000F63 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   217 00000F64 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   218                              <1> 												; ------+----------------
   219                              <1> 
   220                              <1> 		;---------------------------------------
   221                              <1> 		; 【レジスタの保存】
   222                              <1> 		;---------------------------------------
   223 00000F66 50                  <1> 		push	eax
   224 00000F67 53                  <1> 		push	ebx
   225 00000F68 51                  <1> 		push	ecx
   226 00000F69 52                  <1> 		push	edx
   227 00000F6A 56                  <1> 		push	esi
   228 00000F6B 57                  <1> 		push	edi
   229                              <1> 
   230                              <1> 		;---------------------------------------
   231                              <1> 		; テストアンドセット
   232                              <1> 		;---------------------------------------
   233                              <1> %ifdef	USE_TEST_AND_SET
   234 00000F6C 68[40100000]E89908- <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   234 00000F74 00006683C404        <1>
   235                              <1> %endif
   236                              <1> 
   237                              <1> 		;---------------------------------------
   238                              <1> 		; コピー元フォントアドレスを設定
   239                              <1> 		;---------------------------------------
   240 00000F7A 0FB67514            <1> 		movzx	esi, byte [ebp +20]				; CL  = 文字コード;
   241 00000F7E C1E604              <1> 		shl		esi, 4							; CL *= 16; // 1文字16バイト
   242 00000F81 0335[CC020000]      <1> 		add		esi, [FONT_ADR]					; ESI = フォントアドレス;
   243                              <1> 
   244                              <1> 		;---------------------------------------
   245                              <1> 		; コピー先アドレスを取得
   246                              <1> 		; Adr = 0xA0000 + (640 / 8 * 16) * y + x
   247                              <1> 		;---------------------------------------
   248 00000F87 8B7D0C              <1> 		mov		edi, [ebp +12]					; Y（行）
   249 00000F8A C1E708              <1> 		shl		edi, 8							; EDI = Y * 256;
   250 00000F8D 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA0000]	; EDI = Y *   4 + Y;
   251 00000F94 037D08              <1> 		add		edi, [ebp + 8]					; X（列）
   252                              <1> 
   253                              <1> 		;---------------------------------------
   254                              <1> 		; 1文字分のフォントを出力
   255                              <1> 		;---------------------------------------
   256 00000F97 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
   257                              <1> 
   258 00000F9B 6A03E80EFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
   258 00000FA4 C404                <1>
   259 00000FA6 6A08E81CFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
   259 00000FAF C404                <1>
   260 00000FB1 536A085756E827FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
   260 00000FBA FF6683C410          <1>
   261                              <1> 
   262 00000FBF 6A02E8EAFEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
   262 00000FC8 C404                <1>
   263 00000FCA 6A04E8F8FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
   263 00000FD3 C404                <1>
   264 00000FD5 536A045756E803FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
   264 00000FDE FF6683C410          <1>
   265                              <1> 
   266 00000FE3 6A01E8C6FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
   266 00000FEC C404                <1>
   267 00000FEE 6A02E8D4FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
   267 00000FF7 C404                <1>
   268 00000FF9 536A025756E8DFFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
   268 00001002 FF6683C410          <1>
   269                              <1> 
   270 00001007 6A00E8A2FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
   270 00001010 C404                <1>
   271 00001012 6A01E8B0FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
   271 0000101B C404                <1>
   272 0000101D 536A015756E8BBFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
   272 00001026 FF6683C410          <1>
   273                              <1> 
   274                              <1> %ifdef	USE_TEST_AND_SET
   275                              <1> 		;---------------------------------------
   276                              <1> 		; テストアンドセット
   277                              <1> 		;---------------------------------------
   278 0000102B C705[40100000]0000- <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   278 00001033 0000                <1>
   279                              <1> %endif
   280                              <1> 
   281                              <1> 		;---------------------------------------
   282                              <1> 		; 【レジスタの復帰】
   283                              <1> 		;---------------------------------------
   284 00001035 5F                  <1> 		pop		edi
   285 00001036 5E                  <1> 		pop		esi
   286 00001037 5A                  <1> 		pop		edx
   287 00001038 59                  <1> 		pop		ecx
   288 00001039 5B                  <1> 		pop		ebx
   289 0000103A 58                  <1> 		pop		eax
   290                              <1> 
   291                              <1> 		;---------------------------------------
   292                              <1> 		; 【スタックフレームの破棄】
   293                              <1> 		;---------------------------------------
   294 0000103B 89EC                <1> 		mov		esp, ebp
   295 0000103D 5D                  <1> 		pop		ebp
   296                              <1> 
   297 0000103E C3                  <1> 		ret
   298                              <1> 
   299                              <1> %ifdef USE_TEST_AND_SET
   300 0000103F 00                  <1> ALIGN 4, db 0
   301 00001040 00000000            <1> IN_USE:	dd	0
   302                              <1> %endif
   303                              <1> 
   191                                  %include	"../modules/protect/draw_font.s"
   192                              <1> ;************************************************************************
   193                              <1> ;	フォント一覧を表示
   194                              <1> ;========================================================================
   195                              <1> ;■書式		: void draw_font(col, row);
   196                              <1> ;
   197                              <1> ;■引数
   198                              <1> ;	col		: 列
   199                              <1> ;	row		: 行
   200                              <1> ;
   201                              <1> ;■戻り値	: 無し
   202                              <1> ;************************************************************************
   203                              <1> draw_font:
   204                              <1> 		;---------------------------------------
   205                              <1> 		; 【スタックフレームの構築】
   206                              <1> 		;---------------------------------------
   207                              <1> 												; ------|--------
   208                              <1> 												; EBP+12| Y（行）
   209                              <1> 												; EBP+ 8| X（列）
   210                              <1> 												; ---------------
   211 00001044 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   212 00001045 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   213                              <1> 												; ---------------
   214                              <1> 
   215                              <1> 		;---------------------------------------
   216                              <1> 		; 【レジスタの保存】
   217                              <1> 		;---------------------------------------
   218 00001047 50                  <1> 		push	eax
   219 00001048 53                  <1> 		push	ebx
   220 00001049 51                  <1> 		push	ecx
   221 0000104A 52                  <1> 		push	edx
   222 0000104B 56                  <1> 		push	esi
   223 0000104C 57                  <1> 		push	edi
   224                              <1> 
   225                              <1> 		;---------------------------------------
   226                              <1> 		; 表示位置
   227                              <1> 		;---------------------------------------
   228 0000104D 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   229 00001050 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   230                              <1> 
   231                              <1> 		;---------------------------------------
   232                              <1> 		; フォント一覧を表示
   233                              <1> 		;---------------------------------------
   234 00001053 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   235 00001058 81F900010000        <1> .10L:	cmp		ecx, 256						;      ECX < 256;
   236 0000105E 731F                <1> 		jae		.10E							; 
   237                              <1> 												;      ECX++)
   238                              <1> 												; {
   239                              <1> 												;   // 桁位置の計算
   240 00001060 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   241 00001062 83E00F              <1> 		and		eax, 0x0F						;   EAX &= 0x0F
   242 00001065 01F0                <1> 		add		eax, esi						;   EAX += X;
   243                              <1> 												;   
   244                              <1> 												;   // 行位置の計算
   245 00001067 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   246 00001069 C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
   247 0000106C 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   248                              <1> 
   249 0000106E 516A075350E8EBFEFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
   249 00001077 FF6683C410          <1>
   250                              <1> 
   251 0000107C 41                  <1> 		inc		ecx								;   // for (... ECX++)
   252 0000107D EBD9                <1> 		jmp		.10L							; 
   253                              <1> .10E:											; }
   254                              <1> 
   255                              <1> 		;---------------------------------------
   256                              <1> 		; 【レジスタの復帰】
   257                              <1> 		;---------------------------------------
   258 0000107F 5F                  <1> 		pop		edi
   259 00001080 5E                  <1> 		pop		esi
   260 00001081 5A                  <1> 		pop		edx
   261 00001082 59                  <1> 		pop		ecx
   262 00001083 5B                  <1> 		pop		ebx
   263 00001084 58                  <1> 		pop		eax
   264                              <1> 
   265                              <1> 		;---------------------------------------
   266                              <1> 		; 【スタックフレームの破棄】
   267                              <1> 		;---------------------------------------
   268 00001085 89EC                <1> 		mov		esp, ebp
   269 00001087 5D                  <1> 		pop		ebp
   270                              <1> 
   271 00001088 C3                  <1> 		ret
   272                              <1> 
   192                                  %include	"../modules/protect/draw_str.s"
   193                              <1> ;************************************************************************
   194                              <1> ;	文字列の表示
   195                              <1> ;========================================================================
   196                              <1> ;■書式		: void draw_str(col, row, color, p);
   197                              <1> ;
   198                              <1> ;■引数
   199                              <1> ;	col		: 列
   200                              <1> ;	row		: 行
   201                              <1> ;	color	: 描画色
   202                              <1> ;	p		: 文字列のアドレス
   203                              <1> ;
   204                              <1> ;■戻り値	: 無し
   205                              <1> ;************************************************************************
   206                              <1> draw_str:
   207                              <1> 		;---------------------------------------
   208                              <1> 		; 【スタックフレームの構築】
   209                              <1> 		;---------------------------------------
   210                              <1> 												; ------|--------
   211                              <1> 												; EBP+20| *p（文字列のアドレス）
   212                              <1> 												; EBP+16| color（色）
   213                              <1> 												; EBP+12| row（行）
   214                              <1> 												; EBP+ 8| col（列）
   215                              <1> 												; ---------------
   216 00001089 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   217 0000108A 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   218                              <1> 												; ---------------
   219                              <1> 
   220                              <1> 		;---------------------------------------
   221                              <1> 		; 【レジスタの保存】
   222                              <1> 		;---------------------------------------
   223 0000108C 50                  <1> 		push	eax
   224 0000108D 53                  <1> 		push	ebx
   225 0000108E 51                  <1> 		push	ecx
   226 0000108F 52                  <1> 		push	edx
   227 00001090 56                  <1> 		push	esi
   228                              <1> 
   229                              <1> 		;---------------------------------------
   230                              <1> 		; 文字列の表示
   231                              <1> 		;---------------------------------------
   232 00001091 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
   233 00001094 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
   234 00001097 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
   235 0000109B 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
   236                              <1> 
   237 0000109E FC                  <1> 		cld										; DF = 0; // アドレス加算
   238                              <1> .10L:											; do
   239                              <1> 												; {
   240 0000109F AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
   241 000010A0 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   242 000010A2 741A                <1> 		je		.10E							;     break;
   243                              <1> 
   244                              <1> 		;---------------------------------------
   245                              <1> 		; 1文字表示
   246                              <1> 		;---------------------------------------
   247                              <1> %ifdef	USE_SYSTEM_CALL
   248 000010A4 CD81                <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
   249                              <1> %else
   250                              <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
   251                              <1> %endif
   252                              <1> 
   253                              <1> 		; 次の文字の位置を調整
   254 000010A6 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
   255 000010A7 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
   256 000010AA 7C10                <1> 		jl		.12E							;   {
   257 000010AC B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
   258 000010B1 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
   259 000010B2 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
   260 000010B5 7C05                <1> 		jl		.12E							;     {
   261 000010B7 BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
   262                              <1> 												;     }
   263                              <1> .12E:											;   }
   264 000010BC EBE1                <1> 		jmp		.10L							;   
   265                              <1> .10E:											; } while (1);
   266                              <1> 
   267                              <1> 		;---------------------------------------
   268                              <1> 		; 【レジスタの復帰】
   269                              <1> 		;---------------------------------------
   270 000010BE 5E                  <1> 		pop		esi
   271 000010BF 5A                  <1> 		pop		edx
   272 000010C0 59                  <1> 		pop		ecx
   273 000010C1 5B                  <1> 		pop		ebx
   274 000010C2 58                  <1> 		pop		eax
   275                              <1> 
   276                              <1> 		;---------------------------------------
   277                              <1> 		; 【スタックフレームの破棄】
   278                              <1> 		;---------------------------------------
   279 000010C3 89EC                <1> 		mov		esp, ebp
   280 000010C5 5D                  <1> 		pop		ebp
   281                              <1> 
   282 000010C6 C3                  <1> 		ret
   283                              <1> 
   193                                  %include	"../modules/protect/draw_color_bar.s"
   194                              <1> ;************************************************************************
   195                              <1> ;	カラーバーの表示
   196                              <1> ;========================================================================
   197                              <1> ;■書式		: void draw_color_bar(col, row);
   198                              <1> ;
   199                              <1> ;■引数
   200                              <1> ;	col		: 列
   201                              <1> ;	row		: 行
   202                              <1> ;
   203                              <1> ;■戻り値	: 無し
   204                              <1> ;************************************************************************
   205                              <1> draw_color_bar:
   206                              <1> 		;---------------------------------------
   207                              <1> 		; 【スタックフレームの構築】
   208                              <1> 		;---------------------------------------
   209                              <1> 												; ------|--------
   210                              <1> 												; EBP+ 8| X（列）
   211                              <1> 												; EBP+12| Y（行）
   212                              <1> 												; ---------------
   213 000010C7 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   214 000010C8 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   215                              <1> 												; ---------------
   216                              <1> 		;---------------------------------------
   217                              <1> 		; 【レジスタの保存】
   218                              <1> 		;---------------------------------------
   219 000010CA 50                  <1> 		push	eax
   220 000010CB 53                  <1> 		push	ebx
   221 000010CC 51                  <1> 		push	ecx
   222 000010CD 52                  <1> 		push	edx
   223 000010CE 56                  <1> 		push	esi
   224 000010CF 57                  <1> 		push	edi
   225                              <1> 
   226                              <1> 		;---------------------------------------
   227                              <1> 		; 表示位置
   228                              <1> 		;---------------------------------------
   229 000010D0 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   230 000010D3 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; カラーバーを表示
   234                              <1> 		;---------------------------------------
   235 000010D6 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   236 000010DB 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
   237 000010DE 732E                <1> 		jae		.10E							; 
   238                              <1> 												;      ECX++)
   239                              <1> 												; {
   240                              <1> 												;   // 桁位置の計算
   241 000010E0 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   242 000010E2 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
   243 000010E5 C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
   244 000010E8 01F0                <1> 		add		eax, esi						;   EAX += X;
   245                              <1> 												;   
   246                              <1> 												;   // 行位置の計算
   247 000010EA 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   248 000010EC D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
   249 000010EE 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   250                              <1> 												;   
   251                              <1> 												;   // 表示色の取得
   252 000010F0 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
   253 000010F2 D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
   254 000010F4 8B92[21110000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
   255                              <1> 
   256 000010FA 68[18110000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
   256 00001102 E882FFFFFF6683C410  <1>
   257                              <1> 
   258 0000110B 41                  <1> 		inc		ecx								;   // for (... ECX++)
   259 0000110C EBCD                <1> 		jmp		.10L							; 
   260                              <1> .10E:											; }
   261                              <1> 
   262                              <1> 		;---------------------------------------
   263                              <1> 		; 【レジスタの復帰】
   264                              <1> 		;---------------------------------------
   265 0000110E 5F                  <1> 		pop		edi
   266 0000110F 5E                  <1> 		pop		esi
   267 00001110 5A                  <1> 		pop		edx
   268 00001111 59                  <1> 		pop		ecx
   269 00001112 5B                  <1> 		pop		ebx
   270 00001113 58                  <1> 		pop		eax
   271                              <1> 
   272                              <1> 		;---------------------------------------
   273                              <1> 		; 【スタックフレームの破棄】
   274                              <1> 		;---------------------------------------
   275 00001114 89EC                <1> 		mov		esp, ebp
   276 00001116 5D                  <1> 		pop		ebp
   277                              <1> 
   278 00001117 C3                  <1> 		ret
   279                              <1> 
   280 00001118 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
   281                              <1> 
   282 00001121 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
   283 00001125 00010009            <1> 		dw	0x0100, 0x0900
   284 00001129 0002000A            <1> 		dw	0x0200, 0x0A00
   285 0000112D 0003000B            <1> 		dw	0x0300, 0x0B00
   286 00001131 0004000C            <1> 		dw	0x0400, 0x0C00
   287 00001135 0005000D            <1> 		dw	0x0500, 0x0D00
   288 00001139 0006000E            <1> 		dw	0x0600, 0x0E00
   289 0000113D 0007000F            <1> 		dw	0x0700, 0x0F00
   290                              <1> 
   194                                  %include	"../modules/protect/draw_pixel.s"
   195                              <1> ;************************************************************************
   196                              <1> ;	ピクセルの描画
   197                              <1> ;========================================================================
   198                              <1> ;■書式		: void draw_pixel(X, Y, color);
   199                              <1> ;
   200                              <1> ;■引数
   201                              <1> ;	X		: X座標
   202                              <1> ;	Y		: Y座標
   203                              <1> ;	color	: 描画色
   204                              <1> ;
   205                              <1> ;■戻り値	: 無し
   206                              <1> ;************************************************************************
   207                              <1> draw_pixel:
   208                              <1> 		;---------------------------------------
   209                              <1> 		; 【スタックフレームの構築】
   210                              <1> 		;---------------------------------------
   211                              <1> 												; ------|--------
   212                              <1> 												; EBP+16| 色
   213                              <1> 												; EBP+12| Y
   214                              <1> 												; EBP+ 8| X
   215                              <1> 												; ------|--------
   216 00001141 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   217 00001142 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   218                              <1> 												; ------+--------
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 【レジスタの保存】
   221                              <1> 		;---------------------------------------
   222 00001144 50                  <1> 		push	eax
   223 00001145 53                  <1> 		push	ebx
   224 00001146 51                  <1> 		push	ecx
   225 00001147 57                  <1> 		push	edi
   226                              <1> 
   227                              <1> 		;---------------------------------------
   228                              <1> 		; Y座標を80倍する（640/8）
   229                              <1> 		;---------------------------------------
   230 00001148 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI  = Y座標
   231 0000114B C1E704              <1> 		shl		edi, 4							; EDI *= 16;
   232 0000114E 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA_0000]	; EDI  = 0xA00000[EDI * 4 + EDI];
   233                              <1> 
   234                              <1> 		;---------------------------------------
   235                              <1> 		; X座標を1/8して加算
   236                              <1> 		;---------------------------------------
   237 00001155 8B5D08              <1> 		mov		ebx, [ebp + 8]					; EBX  = X座標;
   238 00001158 89D9                <1> 		mov		ecx, ebx						; ECX  = X座標;（一時保存）
   239 0000115A C1EB03              <1> 		shr		ebx, 3							; EBX /= 8;
   240 0000115D 01DF                <1> 		add		edi, ebx						; EDI += EBX;
   241                              <1> 
   242                              <1> 		;---------------------------------------
   243                              <1> 		; X座標を8で割った余りからビット位置を計算
   244                              <1> 		; (0=0x80, 1=0x40,... 7=0x01)
   245                              <1> 		;---------------------------------------
   246 0000115F 83E107              <1> 		and		ecx, 0x07						; ECX = X & 0x07;
   247 00001162 BB80000000          <1> 		mov		ebx, 0x80						; EBX = 0x80;
   248 00001167 D3EB                <1> 		shr		ebx, cl							; EBX >>= ECX;
   249                              <1> 
   250                              <1> 		;---------------------------------------
   251                              <1> 		; 色指定
   252                              <1> 		;---------------------------------------
   253 00001169 8B4D10              <1> 		mov		ecx, [ebp +16]					; // 表示色
   254                              <1> 
   255                              <1> %ifdef	USE_TEST_AND_SET
   256 0000116C 68[40100000]E89906- <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   256 00001174 00006683C404        <1>
   257                              <1> %endif
   258                              <1> 
   259                              <1> 		;---------------------------------------
   260                              <1> 		; プレーン毎に出力
   261                              <1> 		;---------------------------------------
   262 0000117A 6A03E82FFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 輝度(I)プレーンを選択
   262 00001183 C404                <1>
   263 00001185 6A08E83DFDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 輝度(I)プレーンを選択
   263 0000118E C404                <1>
   264 00001190 516A085753E89BFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
   264 00001199 FF6683C410          <1>
   265                              <1> 
   266 0000119E 6A02E80BFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 赤(R)プレーンを選択
   266 000011A7 C404                <1>
   267 000011A9 6A04E819FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 赤(R)プレーンを選択
   267 000011B2 C404                <1>
   268 000011B4 516A045753E877FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
   268 000011BD FF6683C410          <1>
   269                              <1> 
   270 000011C2 6A01E8E7FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 緑(G)プレーンを選択
   270 000011CB C404                <1>
   271 000011CD 6A02E8F5FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 緑(G)プレーンを選択
   271 000011D6 C404                <1>
   272 000011D8 516A025753E853FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
   272 000011E1 FF6683C410          <1>
   273                              <1> 
   274 000011E6 6A00E8C3FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 青(B)プレーンを選択
   274 000011EF C404                <1>
   275 000011F1 6A01E8D1FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 青(B)プレーンを選択
   275 000011FA C404                <1>
   276 000011FC 516A015753E82FFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
   276 00001205 FF6683C410          <1>
   277                              <1> 
   278                              <1> 
   279                              <1> %ifdef	USE_TEST_AND_SET
   280                              <1> 		;---------------------------------------
   281                              <1> 		; テストアンドセット
   282                              <1> 		;---------------------------------------
   283 0000120A C705[40100000]0000- <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   283 00001212 0000                <1>
   284                              <1> %endif
   285                              <1> 
   286                              <1> 		;---------------------------------------
   287                              <1> 		; 【レジスタの復帰】
   288                              <1> 		;---------------------------------------
   289 00001214 5F                  <1> 		pop		edi
   290 00001215 59                  <1> 		pop		ecx
   291 00001216 5B                  <1> 		pop		ebx
   292 00001217 58                  <1> 		pop		eax
   293                              <1> 
   294                              <1> 		;---------------------------------------
   295                              <1> 		; 【スタックフレームの破棄】
   296                              <1> 		;---------------------------------------
   297 00001218 89EC                <1> 		mov		esp, ebp
   298 0000121A 5D                  <1> 		pop		ebp
   299                              <1> 
   300 0000121B C3                  <1> 		ret
   301                              <1> 
   195                                  %include	"../modules/protect/draw_line.s"
   196                              <1> ;************************************************************************
   197                              <1> ;	直線の描画
   198                              <1> ;========================================================================
   199                              <1> ;■書式		: void draw_line(X0, Y0, X1, Y1, color);
   200                              <1> ;
   201                              <1> ;■引数
   202                              <1> ;	X0		: 始点のX座標
   203                              <1> ;	Y0		: 始点のY座標
   204                              <1> ;	X1		: 終点のX座標
   205                              <1> ;	Y1		: 終点のY座標
   206                              <1> ;	color	: 描画色
   207                              <1> ;
   208                              <1> ;■戻り値	: 無し
   209                              <1> ;************************************************************************
   210                              <1> draw_line:
   211                              <1> 		;---------------------------------------
   212                              <1> 		; 【スタックフレームの構築】
   213                              <1> 		;---------------------------------------
   214                              <1> 												; ---------------
   215                              <1> 												;    +24| 色
   216                              <1> 												;    +20| Y1
   217                              <1> 												;    +16| X1
   218                              <1> 												;    +12| Y0
   219                              <1> 												;    + 8| X0
   220                              <1> 												; ---------------
   221 0000121C 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   222 0000121D 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   223                              <1> 												; ---------------
   224 0000121F 6A00                <1> 		push	dword 0							;    - 4| sum   = 0; // 相対軸の積算値
   225 00001221 6A00                <1> 		push	dword 0							;    - 8| x0    = 0; // X座標
   226 00001223 6A00                <1> 		push	dword 0							;    -12| dx    = 0; // X増分
   227 00001225 6A00                <1> 		push	dword 0							;    -16| inc_x = 0; // X座標増分(1 or -1)
   228 00001227 6A00                <1> 		push	dword 0							;    -20| y0    = 0; // Y座標
   229 00001229 6A00                <1> 		push	dword 0							;    -24| dy    = 0; // Y増分
   230 0000122B 6A00                <1> 		push	dword 0							;    -28| inc_y = 0; // Y座標増分(1 or -1)
   231                              <1> 												; ------|--------
   232                              <1> 
   233                              <1> 		;---------------------------------------
   234                              <1> 		; 【レジスタの保存】
   235                              <1> 		;---------------------------------------
   236 0000122D 50                  <1> 		push	eax
   237 0000122E 53                  <1> 		push	ebx
   238 0000122F 51                  <1> 		push	ecx
   239 00001230 52                  <1> 		push	edx
   240 00001231 56                  <1> 		push	esi
   241 00001232 57                  <1> 		push	edi
   242                              <1> 
   243                              <1> 		;---------------------------------------
   244                              <1> 		; 幅を計算（X軸）
   245                              <1> 		;---------------------------------------
   246 00001233 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   247 00001236 8B5D10              <1> 		mov		ebx, [ebp +16]					; EBX = X1;
   248 00001239 29C3                <1> 		sub		ebx, eax						; EBX = X1 - X0; // 幅
   249 0000123B 7D09                <1> 		jge		.10F							; if (幅 < 0)
   250                              <1> 												; {
   251 0000123D F7DB                <1> 		neg		ebx								;   幅   *= -1;
   252 0000123F BEFFFFFFFF          <1> 		mov		esi, -1							;   // X座標の増分
   253 00001244 EB05                <1> 		jmp		.10E							; }
   254                              <1> .10F:											; else
   255                              <1> 												; {
   256 00001246 BE01000000          <1> 		mov		esi, 1							;   // X座標の増分
   257                              <1> .10E:											; }
   258                              <1> 
   259                              <1> 		;---------------------------------------
   260                              <1> 		; 高さを計算（Y軸）
   261                              <1> 		;---------------------------------------
   262 0000124B 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX = Y0
   263 0000124E 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1
   264 00001251 29CA                <1> 		sub		edx, ecx						; EDX = Y1 - Y0; // 高さ
   265 00001253 7D09                <1> 		jge		.20F							; if (高さ < 0)
   266                              <1> 												; {
   267 00001255 F7DA                <1> 		neg		edx								;   高さ *= -1;
   268 00001257 BFFFFFFFFF          <1> 		mov		edi, -1							;   // Y座標の増分
   269 0000125C EB05                <1> 		jmp		.20E							; }
   270                              <1> .20F:											; else
   271                              <1> 												; {
   272 0000125E BF01000000          <1> 		mov		edi, 1							;   // Y座標の増分
   273                              <1> .20E:											; }
   274                              <1> 
   275                              <1> 		;---------------------------------------
   276                              <1> 		; X軸
   277                              <1> 		;---------------------------------------
   278 00001263 8945F8              <1> 		mov		[ebp - 8], eax					;   // X軸:開始座標
   279 00001266 895DF4              <1> 		mov		[ebp -12], ebx					;   // X軸:描画幅
   280 00001269 8975F0              <1> 		mov		[ebp -16], esi					;   // X軸:増分(基準軸：1 or -1)
   281                              <1> 
   282                              <1> 		;---------------------------------------
   283                              <1> 		; Y軸
   284                              <1> 		;---------------------------------------
   285 0000126C 894DEC              <1> 		mov		[ebp -20], ecx					;   // Y軸:開始座標
   286 0000126F 8955E8              <1> 		mov		[ebp -24], edx					;   // Y軸:描画幅
   287 00001272 897DE4              <1> 		mov		[ebp -28], edi					;   // Y軸:増分(基準軸：1 or -1)
   288                              <1> 
   289                              <1> 		;---------------------------------------
   290                              <1> 		; 基準軸を決める
   291                              <1> 		;---------------------------------------
   292 00001275 39D3                <1> 		cmp		ebx, edx						; if (幅 <= 高さ)
   293 00001277 7F08                <1> 		jg		.22F							; {
   294                              <1> 												;   
   295 00001279 8D75EC              <1> 		lea		esi, [ebp -20]					;   // Y軸が基準軸
   296 0000127C 8D7DF8              <1> 		lea		edi, [ebp - 8]					;   // X軸が相対軸
   297                              <1> 												;   
   298 0000127F EB06                <1> 		jmp		.22E							; }
   299                              <1> .22F:											; else
   300                              <1> 												; {
   301 00001281 8D75F8              <1> 		lea		esi, [ebp - 8]					;   // X軸が基準軸
   302 00001284 8D7DEC              <1> 		lea		edi, [ebp -20]					;   // Y軸が相対軸
   303                              <1> .22E:											; }
   304                              <1> 
   305                              <1> 		;---------------------------------------
   306                              <1> 		; 繰り返し回数(基準軸のドット数)
   307                              <1> 		;---------------------------------------
   308 00001287 8B4EFC              <1> 		mov		ecx, [esi - 4]					; ECX = 基準軸描画幅;
   309 0000128A 83F900              <1> 		cmp		ecx, 0							; if (0 == ECX)
   310 0000128D 7505                <1> 		jnz		.30E							; {
   311 0000128F B901000000          <1> 		mov		ecx, 1							;   ECX = 1;
   312                              <1> .30E:											; }
   313                              <1> 
   314                              <1> 		;---------------------------------------
   315                              <1> 		; 線を描画
   316                              <1> 		;---------------------------------------
   317                              <1> .50L:											; do
   318                              <1> 												; {
   319                              <1> %ifdef	USE_SYSTEM_CALL
   320 00001294 89C8                <1> 		mov		eax, ecx						;   // 繰り返し回数を保存
   321                              <1> 
   322 00001296 8B5D18              <1> 		mov		ebx, [ebp +24]					;   EBX = 表示色;
   323 00001299 8B4DF8              <1> 		mov		ecx, [ebp - 8]					;   ECX = X座標;
   324 0000129C 8B55EC              <1> 		mov		edx, [ebp -20]					;   EDX = Y座標;
   325 0000129F CD82                <1> 		int		0x82							;   sys_call(1, X, Y, 色, 文字); BX(C), CX(X), DX(Y)
   326                              <1> 
   327 000012A1 89C1                <1> 		mov		ecx, eax
   328                              <1> %else
   329                              <1> 		cdecl	draw_pixel, dword [ebp - 8], 							dword [ebp -20], 							dword [ebp +24]		;   // 点の描画
   332                              <1> %endif
   333                              <1> 												;   // 基準軸を更新(1ドット分)
   334 000012A3 8B46F8              <1> 		mov		eax, [esi - 8]					;   EAX = 基準軸増分(1 or -1);
   335 000012A6 0106                <1> 		add		[esi - 0], eax					;   
   336                              <1> 
   337                              <1> 												;   // 相対軸を更新
   338 000012A8 8B45FC              <1> 		mov		eax, [ebp - 4]					;   EAX  = sum; // 相対軸の積算値;
   339 000012AB 0347FC              <1> 		add		eax, [edi - 4]					;   EAX += dy;  // 増分(相対軸の描画幅)
   340 000012AE 8B5EFC              <1> 		mov		ebx, [esi - 4]					;   EBX  = dx;  // 増分(基準軸の描画幅)
   341                              <1> 
   342 000012B1 39D8                <1> 		cmp		eax, ebx						;   if (積算値 <= 相対軸の増分)
   343 000012B3 7C07                <1> 		jl		.52E							;   {
   344 000012B5 29D8                <1> 		sub		eax, ebx						;     EAX -= EBX; // 積算値から相対軸の増分を減算
   345                              <1> 												;     
   346                              <1> 												;     // 相対軸の座標を更新(1ドット分)
   347 000012B7 8B5FF8              <1> 		mov		ebx, [edi - 8]					;     EBX =  相対軸増分;
   348 000012BA 011F                <1> 		add		[edi - 0], ebx					;     
   349                              <1> .52E:											;   }
   350 000012BC 8945FC              <1> 		mov		[ebp - 4], eax					;   // 積算値を更新
   351                              <1> 												;   
   352 000012BF E2D3                <1> 		loop	.50L							;   
   353                              <1> .50E:											; } while (ループ回数--);
   354                              <1> 
   355                              <1> 		;---------------------------------------
   356                              <1> 		; 【レジスタの復帰】
   357                              <1> 		;---------------------------------------
   358 000012C1 5F                  <1> 		pop		edi
   359 000012C2 5E                  <1> 		pop		esi
   360 000012C3 5A                  <1> 		pop		edx
   361 000012C4 59                  <1> 		pop		ecx
   362 000012C5 5B                  <1> 		pop		ebx
   363 000012C6 58                  <1> 		pop		eax
   364                              <1> 
   365                              <1> 		;---------------------------------------
   366                              <1> 		; 【スタックフレームの破棄】
   367                              <1> 		;---------------------------------------
   368 000012C7 89EC                <1> 		mov		esp, ebp
   369 000012C9 5D                  <1> 		pop		ebp
   370                              <1> 
   371 000012CA C3                  <1> 		ret
   372                              <1> 
   196                                  %include	"../modules/protect/draw_rect.s"
   197                              <1> ;************************************************************************
   198                              <1> ;	矩形の描画
   199                              <1> ;========================================================================
   200                              <1> ;■書式		: void draw_rect(X0, Y0, X1, Y1, color);
   201                              <1> ;
   202                              <1> ;■引数
   203                              <1> ;	X0		: 始点のX座標
   204                              <1> ;	Y0		: 始点のY座標
   205                              <1> ;	X1		: 終点のX座標
   206                              <1> ;	Y1		: 終点のY座標
   207                              <1> ;	color	: 描画色
   208                              <1> ;
   209                              <1> ;■戻り値	: 無し
   210                              <1> ;************************************************************************
   211                              <1> draw_rect:
   212                              <1> 		;---------------------------------------
   213                              <1> 		; 【スタックフレームの構築】
   214                              <1> 		;---------------------------------------
   215                              <1> 												; ------|--------
   216                              <1> 												; EBP+24| 色
   217                              <1> 												; EBP+20| Y1
   218                              <1> 												; EBP+16| X1
   219                              <1> 												; EBP+12| Y0
   220                              <1> 												; EBP+ 8| X0
   221                              <1> 												; ---------------
   222 000012CB 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   223 000012CC 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   224                              <1> 												; ------|--------
   225                              <1> 
   226                              <1> 		;---------------------------------------
   227                              <1> 		; 【レジスタの保存】
   228                              <1> 		;---------------------------------------
   229 000012CE 50                  <1> 		push		eax
   230 000012CF 53                  <1> 		push		ebx
   231 000012D0 51                  <1> 		push		ecx
   232 000012D1 52                  <1> 		push		edx
   233 000012D2 56                  <1> 		push		esi
   234                              <1> 
   235                              <1> 		;---------------------------------------
   236                              <1> 		; 矩形を描画
   237                              <1> 		;---------------------------------------
   238 000012D3 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   239 000012D6 8B5D0C              <1> 		mov		ebx, [ebp +12]					; EBX = Y0;
   240 000012D9 8B4D10              <1> 		mov		ecx, [ebp +16]					; ECX = X1;
   241 000012DC 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1;
   242 000012DF 8B7518              <1> 		mov		esi, [ebp +24]					; ESI = 色;
   243                              <1> 
   244                              <1> 		;---------------------------------------
   245                              <1> 		; 座標軸の大小を確定
   246                              <1> 		;---------------------------------------
   247 000012E2 39C8                <1> 		cmp		eax, ecx						; if (X1 < X0)
   248 000012E4 7C01                <1> 		jl		.10E							; {
   249 000012E6 91                  <1> 		xchg	eax, ecx						;   X0とX1を入れ替える;
   250                              <1> .10E:											; }
   251                              <1> 
   252 000012E7 39D3                <1> 		cmp		ebx, edx						; if (Y1 < Y0)
   253 000012E9 7C02                <1> 		jl		.20E							; {
   254 000012EB 87DA                <1> 		xchg	ebx, edx						;   Y0とY1を入れ替える;
   255                              <1> .20E:											; }
   256                              <1> 
   257                              <1> 		;---------------------------------------
   258                              <1> 		; 矩形を描画
   259                              <1> 		;---------------------------------------
   260 000012ED 5653515350E825FFFF- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, esi	; 上線
   260 000012F6 FF6683C414          <1>
   261 000012FB 5652505350E817FFFF- <1> 		cdecl	draw_line, eax, ebx, eax, edx, esi	; 左線
   261 00001304 FF6683C414          <1>
   262                              <1> 
   263 00001309 4A                  <1> 		dec		edx									; EDX--; // 下線は1ドット上げる
   264 0000130A 5652515250E808FFFF- <1> 		cdecl	draw_line, eax, edx, ecx, edx, esi	; 下線
   264 00001313 FF6683C414          <1>
   265 00001318 42                  <1> 		inc		edx
   266                              <1> 
   267 00001319 49                  <1> 		dec		ecx									; ECX--; // 右線は1ドット左に移動
   268 0000131A 5652515351E8F8FEFF- <1> 		cdecl	draw_line, ecx, ebx, ecx, edx, esi	; 右線
   268 00001323 FF6683C414          <1>
   269                              <1> 
   270                              <1> 		;---------------------------------------
   271                              <1> 		; 【レジスタの復帰】
   272                              <1> 		;---------------------------------------
   273 00001328 5E                  <1> 		pop		esi
   274 00001329 5A                  <1> 		pop		edx
   275 0000132A 59                  <1> 		pop		ecx
   276 0000132B 5B                  <1> 		pop		ebx
   277 0000132C 58                  <1> 		pop		eax
   278                              <1> 
   279                              <1> 		;---------------------------------------
   280                              <1> 		; 【スタックフレームの破棄】
   281                              <1> 		;---------------------------------------
   282 0000132D 89EC                <1> 		mov		esp, ebp
   283 0000132F 5D                  <1> 		pop		ebp
   284                              <1> 
   285 00001330 C3                  <1> 		ret
   197                                  %include	"../modules/protect/itoa.s"
   198                              <1> ;************************************************************************
   199                              <1> ;	数値を文字に変換
   200                              <1> ;========================================================================
   201                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
   202                              <1> ;
   203                              <1> ;■引数
   204                              <1> ;	num		: 変換する数値
   205                              <1> ;	buff	: 保存先バッファアドレス
   206                              <1> ;	size	: 保存先バッファサイズ
   207                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
   208                              <1> ;	flags	: フラグ
   209                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
   210                              <1> ;			:      : 0=空白を' '（スペース）で埋める
   211                              <1> ;			:   B1 : 1=＋/-符号を表示する
   212                              <1> ;			:      : 0=＋/-符号を表示しない
   213                              <1> ;			:   B0 : 1=符号付き正数として扱う
   214                              <1> ;			:      : 0=符号無し正数として扱う
   215                              <1> ;
   216                              <1> ;■戻り値	: 無し
   217                              <1> ;************************************************************************
   218                              <1> itoa:
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 【スタックフレームの構築】
   221                              <1> 		;---------------------------------------
   222                              <1> 												; ------|--------
   223                              <1> 												;    +24| フラグ
   224                              <1> 												;    +20| 基数
   225                              <1> 												;    +16| バッファサイズ
   226                              <1> 												;    +12| バッファアドレス
   227                              <1> 												;    + 8| 数値
   228                              <1> 												; ------|--------
   229                              <1> 												;    + 4| EIP（戻り番地）
   230 00001331 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   231 00001332 89E5                <1> 		mov		ebp, esp						; ------+--------
   232                              <1> 
   233                              <1> 		;---------------------------------------
   234                              <1> 		; 【レジスタの保存】
   235                              <1> 		;---------------------------------------
   236 00001334 50                  <1> 		push	eax
   237 00001335 53                  <1> 		push	ebx
   238 00001336 51                  <1> 		push	ecx
   239 00001337 52                  <1> 		push	edx
   240 00001338 56                  <1> 		push	esi
   241 00001339 57                  <1> 		push	edi
   242                              <1> 
   243                              <1> 		;---------------------------------------
   244                              <1> 		; 引数を取得
   245                              <1> 		;---------------------------------------
   246 0000133A 8B4508              <1> 		mov		eax, [ebp + 8]					; val  = 数値;
   247 0000133D 8B750C              <1> 		mov		esi, [ebp +12]					; dst  = バッファアドレス;
   248 00001340 8B4D10              <1> 		mov		ecx, [ebp +16]					; size = 残りバッファサイズ;
   249                              <1> 
   250 00001343 89F7                <1> 		mov		edi, esi						; // バッファの最後尾
   251 00001345 01CF                <1> 		add		edi, ecx						; dst  = &dst[size - 1];
   252 00001347 4F                  <1> 		dec		edi								; 
   253                              <1> 
   254 00001348 8B5D18              <1> 		mov		ebx, [ebp +24]					; flags = オプション;
   255                              <1> 
   256                              <1> 		;---------------------------------------
   257                              <1> 		; 符号付き判定
   258                              <1> 		;---------------------------------------
   259 0000134B F7C301000000        <1> 		test	ebx, 0b0001						; if (flags & 0x01)// 符号付き
   260 00001351 7408                <1> .10Q:	je		.10E							; {
   261 00001353 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   262 00001356 7D03                <1> .12Q:	jge		.12E							;   {
   263 00001358 83CB02              <1> 		or		ebx, 0b0010						;     flags |=  2; // 符号表示
   264                              <1> .12E:											;   }
   265                              <1> .10E:											; }
   266                              <1> 
   267                              <1> 		;---------------------------------------
   268                              <1> 		; 符号出力判定
   269                              <1> 		;---------------------------------------
   270 0000135B F7C302000000        <1> 		test	ebx, 0b0010						; if (flags & 0x02)// 符号出力判定
   271 00001361 7410                <1> .20Q:	je		.20E							; {
   272 00001363 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   273 00001366 7D07                <1> .22Q:	jge		.22F							;   {
   274 00001368 F7D8                <1> 		neg		eax								;     val *= -1;   // 符号反転
   275 0000136A C6062D              <1> 		mov		[esi], byte '-'					;     *dst = '-';  // 符号表示
   276 0000136D EB03                <1> 		jmp		.22E							;   }
   277                              <1> .22F:											;   else
   278                              <1> 												;   {
   279 0000136F C6062B              <1> 		mov		[esi], byte '+'					;     *dst = '+';  // 符号表示
   280                              <1> .22E:											;   }
   281 00001372 49                  <1> 		dec		ecx								;   size--;        // 残りバッファサイズの減算
   282                              <1> .20E:											; }
   283                              <1> 
   284                              <1> 		;---------------------------------------
   285                              <1> 		; ASCII変換
   286                              <1> 		;---------------------------------------
   287 00001373 8B5D14              <1> 		mov		ebx, [ebp +20]					; BX = 基数;
   288                              <1> .30L:											; do
   289                              <1> 												; {
   290 00001376 BA00000000          <1> 		mov		edx, 0							;   
   291 0000137B F7F3                <1> 		div		ebx								;   DX = DX:AX % 基数;
   292                              <1> 												;   AX = DX:AX / 基数;
   293                              <1> 												;   
   294 0000137D 89D6                <1> 		mov		esi, edx						;   // テーブル参照
   295 0000137F 8A96[AA130000]      <1> 		mov		dl, byte [.ascii + esi]			;   DL = ASCII[DX];
   296                              <1> 												;   
   297 00001385 8817                <1> 		mov		[edi], dl						;   *dst = DL;
   298 00001387 4F                  <1> 		dec		edi								;   dst--;
   299                              <1> 												;   
   300 00001388 83F800              <1> 		cmp		eax, 0							;   
   301 0000138B E0E9                <1> 		loopnz	.30L							; } while (AX);
   302                              <1> .30E:
   303                              <1> 
   304                              <1> 		;---------------------------------------
   305                              <1> 		; 空欄を埋める
   306                              <1> 		;---------------------------------------
   307 0000138D 83F900              <1> 		cmp		ecx, 0							; if (size)
   308 00001390 740E                <1> .40Q:	je		.40E							; {
   309 00001392 B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   310 00001394 66837D1804          <1> 		cmp		[ebp +24], word 0b0100			;   if (flags & 0x04)
   311 00001399 7502                <1> .42Q:	jne		.42E							;   {
   312 0000139B B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   313                              <1> .42E:											;   }
   314 0000139D FD                  <1> 		std										;   // DF = 1（-方向）
   315 0000139E F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   316                              <1> .40E:											; }
   317                              <1> 
   318                              <1> 		;---------------------------------------
   319                              <1> 		; 【レジスタの復帰】
   320                              <1> 		;---------------------------------------
   321 000013A0 5F                  <1> 		pop		edi
   322 000013A1 5E                  <1> 		pop		esi
   323 000013A2 5A                  <1> 		pop		edx
   324 000013A3 59                  <1> 		pop		ecx
   325 000013A4 5B                  <1> 		pop		ebx
   326 000013A5 58                  <1> 		pop		eax
   327                              <1> 
   328                              <1> 		;---------------------------------------
   329                              <1> 		; 【スタックフレームの破棄】
   330                              <1> 		;---------------------------------------
   331 000013A6 89EC                <1> 		mov		esp, ebp
   332 000013A8 5D                  <1> 		pop		ebp
   333                              <1> 
   334 000013A9 C3                  <1> 		ret
   335                              <1> 
   336 000013AA 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   336 000013B3 39414243444546      <1>
   337                              <1> 
   198                                  %include	"../modules/protect/rtc.s"
   199                              <1> ;************************************************************************
   200                              <1> ;	RTCから時刻データを取得する
   201                              <1> ;========================================================================
   202                              <1> ;■書式		: DWORD rtc_get_time(dst);
   203                              <1> ;
   204                              <1> ;■引数
   205                              <1> ;	dst		: 保存先アドレス
   206                              <1> ;
   207                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   208                              <1> ;************************************************************************
   209                              <1> rtc_get_time:
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 【スタックフレームの構築】
   212                              <1> 		;---------------------------------------
   213                              <1> 												; ------|--------
   214                              <1> 												; EBP+ 8| 保存先アドレス
   215                              <1> 												; ---------------
   216 000013BA 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   217 000013BB 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   218                              <1> 												; ---------------
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 【レジスタの保存】
   221                              <1> 		;---------------------------------------
   222 000013BD 53                  <1> 		push	ebx
   223                              <1> 
   224                              <1> 		;---------------------------------------
   225                              <1> 		; RTCから時刻を取得
   226                              <1> 		;---------------------------------------
   227 000013BE B00A                <1> 		mov		al, 0x0A						; // レジスタA
   228 000013C0 E670                <1> 		out		0x70, al						; outp(0x70, AL);
   229 000013C2 E471                <1> 		in		al, 0x71						; AL = レジスタA;
   230 000013C4 A880                <1> 		test	al, 0x80						; if (DM & UIP) // 更新中
   231 000013C6 7407                <1> 		je		.10F							; {
   232 000013C8 B801000000          <1> 		mov		eax, 1							;   ret = 1; // データ更新中
   233 000013CD EB27                <1> 		jmp		.10E							; }
   234                              <1> .10F:											; else
   235                              <1> 												; {
   236                              <1> 												;   // RAM[0x04]:時
   237 000013CF B004                <1> 		mov		al, 0x04						;   AL = 0x04;
   238 000013D1 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   239 000013D3 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 時データ
   240                              <1> 												;   
   241 000013D5 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   242                              <1> 												;   
   243                              <1> 												;   // RAM[0x02]:分
   244 000013D8 B002                <1> 		mov		al, 0x02						;   AL = 0x02;
   245 000013DA E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   246 000013DC E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 分データ
   247                              <1> 												;   
   248 000013DE C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   249                              <1> 												;   
   250                              <1> 												;   // RAM[0x00]:秒
   251 000013E1 B000                <1> 		mov		al, 0x00						;   AL = 0x00;
   252 000013E3 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   253 000013E5 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 秒データ
   254                              <1> 												;   
   255 000013E7 25FFFFFF00          <1> 		and		eax, 0x00_FF_FF_FF				;   // 下位3バイトのみ有効
   256                              <1> 												;   
   257 000013EC 8B5D08              <1> 		mov		ebx, [ebp + 8]					;   dst = 保存先;
   258 000013EF 8903                <1> 		mov		[ebx], eax						;   [dst] = 時刻;
   259                              <1> 												;   
   260 000013F1 B800000000          <1> 		mov		eax, 0							;   ret = 0; // 正常終了
   261                              <1> .10E:											; }
   262                              <1> 
   263                              <1> 		;---------------------------------------
   264                              <1> 		; 【レジスタの復帰】
   265                              <1> 		;---------------------------------------
   266 000013F6 5B                  <1> 		pop		ebx
   267                              <1> 
   268                              <1> 		;---------------------------------------
   269                              <1> 		; 【スタックフレームの破棄】
   270                              <1> 		;---------------------------------------
   271 000013F7 89EC                <1> 		mov		esp, ebp
   272 000013F9 5D                  <1> 		pop		ebp
   273                              <1> 
   274 000013FA C3                  <1> 		ret
   275                              <1> 
   199                                  %include	"../modules/protect/draw_time.s"
   200                              <1> ;************************************************************************
   201                              <1> ;	時刻の表示
   202                              <1> ;========================================================================
   203                              <1> ;■書式		: void draw_time(col, row, color, time);
   204                              <1> ;
   205                              <1> ;■引数
   206                              <1> ;	col		: 列
   207                              <1> ;	row		: 行
   208                              <1> ;	color	: 描画色
   209                              <1> ;	time	: 時刻データ
   210                              <1> ;
   211                              <1> ;■戻り値	: 無し
   212                              <1> ;************************************************************************
   213                              <1> draw_time:
   214                              <1> 		;---------------------------------------
   215                              <1> 		; 【スタックフレームの構築】
   216                              <1> 		;---------------------------------------
   217                              <1> 												; ------|--------
   218                              <1> 												; EBP+20| 時刻データ
   219                              <1> 												; EBP+16| 色
   220                              <1> 												; EBP+12| Y（行）
   221                              <1> 												; EBP+ 8| X（列）
   222                              <1> 												; ---------------
   223 000013FB 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   224 000013FC 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   225                              <1> 												; ---------------
   226                              <1> 		;---------------------------------------
   227                              <1> 		; 【レジスタの保存】
   228                              <1> 		;---------------------------------------
   229 000013FE 50                  <1> 		push	eax
   230 000013FF 53                  <1> 		push	ebx
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; 
   234                              <1> 		;---------------------------------------
   235 00001400 8B4514              <1> 		mov		eax, [ebp +20]					; EAX = 時刻データ;
   236 00001403 3B05[80140000]      <1> 		cmp		eax, [.last]					; if (今回 != 前回)
   237 00001409 7467                <1> 		je		.10E							; {
   238                              <1> 												;   
   239 0000140B A3[80140000]        <1> 		mov		[.last], eax					;   // 前回の時刻値を更新
   240                              <1> 												;   
   241 00001410 BB00000000          <1> 		mov		ebx, 0							;   EBX = 0;
   242 00001415 88C3                <1> 		mov		bl, al							;   EBX = 秒;
   243 00001417 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .sec, 2, 16, 0b0100	;   // 時刻を文字列に変換
   243 0000141E [8E140000]53E809FF- <1>
   243 00001426 FFFF6683C414        <1>
   244                              <1> 
   245 0000142C 88E3                <1> 		mov		bl, ah							;   EBX = 分;
   246 0000142E 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .min, 2, 16, 0b0100	;   // 時刻を文字列に変換
   246 00001435 [8B140000]53E8F2FE- <1>
   246 0000143D FFFF6683C414        <1>
   247                              <1> 
   248 00001443 C1E810              <1> 		shr		eax, 16							;   EBX = 時;
   249 00001446 6A046A106A0268-     <1> 		cdecl	itoa, eax, .hour, 2, 16, 0b0100	;   // 時刻を文字列に変換
   249 0000144D [88140000]50E8DAFE- <1>
   249 00001455 FFFF6683C414        <1>
   250                              <1> 
   251                              <1> 												;   // 時刻を表示
   252 0000145B 68[88140000]FF7510- <1> 		cdecl	draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
   252 00001463 FF750CFF7508E81BFC- <1>
   252 0000146C FFFF6683C410        <1>
   253                              <1> 												;     
   254                              <1> 												;   }
   255                              <1> .10E:											; }
   256                              <1> 
   257                              <1> 		;---------------------------------------
   258                              <1> 		; 【レジスタの復帰】
   259                              <1> 		;---------------------------------------
   260 00001472 5B                  <1> 		pop		ebx
   261 00001473 58                  <1> 		pop		eax
   262                              <1> 
   263                              <1> 		;---------------------------------------
   264                              <1> 		; 【スタックフレームの破棄】
   265                              <1> 		;---------------------------------------
   266 00001474 89EC                <1> 		mov		esp, ebp
   267 00001476 5D                  <1> 		pop		ebp
   268                              <1> 
   269 00001477 C3                  <1> 		ret
   270                              <1> 
   271                              <1> ALIGN 2, db 0
   272 00001478 0000000000000000    <1> .temp:	dq	0
   273 00001480 0000000000000000    <1> .last:	dq	0
   274 00001488 5A5A3A              <1> .hour:	db	"ZZ:"
   275 0000148B 5A5A3A              <1> .min:	db	"ZZ:"
   276 0000148E 5A5A00              <1> .sec:	db	"ZZ", 0
   277                              <1> 
   200                                  %include	"../modules/protect/interrupt.s"
   201                              <1> ;************************************************************************
   202                              <1> ;	割り込みベクタの初期化
   203                              <1> ;************************************************************************
   204 00001491 90<rep 3h>          <1> ALIGN 4
   205 00001494 FF07                <1> IDTR:	dw 		8 * 256 - 1					; idt_limit
   206 00001496 00001000            <1> 		dd 		VECT_BASE					; idt location
   207                              <1> 
   208                              <1> ;************************************************************************
   209                              <1> ;	割り込みテーブルを初期化
   210                              <1> ;------------------------------------------------------------------------
   211                              <1> ;	
   212                              <1> ;	まず、全ての割り込みアドレスにデフォルト処理を設定すし、その後、
   213                              <1> ;	必要な割り込みだけ設定しなおす。
   214                              <1> ;	
   215                              <1> ;	割り込みアドレスは、VECT_BASEで指定され、256の割り込みがあるので
   216                              <1> ;	0x0800バイト占有することになる。
   217                              <1> ;	
   218                              <1> ;	           |____________| _V___
   219                              <1> ;	  VECT_BASE| IntDefault |  |   
   220                              <1> ;	           | IntDefault |  | 8 * 256
   221                              <1> ;	           |      :     |  |   
   222                              <1> ;	           |____________| _|___
   223                              <1> ;	      +0800|////////////|
   224                              <1> ;	           |            |
   225                              <1> ;	
   226                              <1> ;	一つの割り込み設定は8バイトで構成される。
   227                              <1> ;	
   228                              <1> ;	           |____________|____________| 
   229                              <1> ;	        [0]| Address Lo[15: 0]       | 
   230                              <1> ;	        [2]| Selector                | 
   231                              <1> ;	        [4]| Flags                   | 
   232                              <1> ;	        [6]|_Address Lo[32:16]_______| 
   233                              <1> ;	           |/////////////////////////| 
   234                              <1> ;	           |            |            | 
   235                              <1> ;	
   236                              <1> ;========================================================================
   237                              <1> ;■書式		: void init_int(void);
   238                              <1> ;
   239                              <1> ;■引数		: 無し
   240                              <1> ;
   241                              <1> ;■戻り値	: 無し
   242                              <1> ;************************************************************************
   243                              <1> init_int:
   244                              <1> 		;---------------------------------------
   245                              <1> 		; 【レジスタの保存】
   246                              <1> 		;---------------------------------------
   247 0000149A 50                  <1> 		push	eax
   248 0000149B 53                  <1> 		push	ebx
   249 0000149C 51                  <1> 		push	ecx
   250 0000149D 57                  <1> 		push	edi
   251                              <1> 
   252                              <1> 		;---------------------------------------
   253                              <1> 		; 全ての割り込みにデフォルト処理を設定
   254                              <1> 		;---------------------------------------
   255 0000149E 8D05[E4150000]      <1> 		lea		eax, [int_default]				; EAX   = 割り込み処理アドレス;
   256 000014A4 BB008E0800          <1> 		mov		ebx, 0x0008_8E00				; EBX   = セグメントセレクタ;
   257 000014A9 6693                <1> 		xchg	ax, bx							; // 下位ワードを交換
   258                              <1> 
   259 000014AB B900010000          <1> 		mov		ecx, 256						; ECX   = 割り込みベクタ数
   260 000014B0 BF00001000          <1> 		mov		edi, VECT_BASE					; EDI   = 割り込みベクタテーブル
   261                              <1> 
   262                              <1> .10L:											; do
   263                              <1> 												; {
   264 000014B5 891F                <1> 		mov		[edi + 0], ebx					;   [EDI + 0] = 割り込みディスクリプタ（下位）
   265 000014B7 894704              <1> 		mov		[edi + 4], eax					;   [EDI + 4] = 割り込みディスクリプタ（上位）
   266 000014BA 83C708              <1> 		add		edi, 8							;   EDI += 8;
   267 000014BD E2F6                <1> 		loop	.10L							; } while (ECX--);
   268                              <1> 
   269                              <1> 		;---------------------------------------
   270                              <1> 		; 割り込みディスクリプタの設定
   271                              <1> 		;---------------------------------------
   272 000014BF 0F011D[94140000]    <1> 		lidt	[IDTR]							; // 割り込みディスクリプタテーブルをロード
   273                              <1> 
   274                              <1> 		;---------------------------------------
   275                              <1> 		; 【レジスタの復帰】
   276                              <1> 		;---------------------------------------
   277 000014C6 5F                  <1> 		pop		edi
   278 000014C7 59                  <1> 		pop		ecx
   279 000014C8 5B                  <1> 		pop		ebx
   280 000014C9 58                  <1> 		pop		eax
   281                              <1> 
   282 000014CA C3                  <1> 		ret
   283                              <1> 
   284                              <1> ;************************************************************************
   285                              <1> ;	スタックの内容を表示して無限ループを実行
   286                              <1> ;************************************************************************
   287                              <1> int_stop:
   288 000014CB FB                  <1> 		sti										; // 割り込み許可
   289                              <1> 
   290                              <1> 		;---------------------------------------
   291                              <1> 		; EAXで示される文字列を表示
   292                              <1> 		;---------------------------------------
   293 000014CC 50680F0600006A0F6A- <1> 		cdecl	draw_str, 25, 15, 0x060F, eax	; draw_str(EAX);
   293 000014D5 19E8AEFBFFFF6683C4- <1>
   293 000014DE 10                  <1>
   294                              <1> 
   295                              <1> 		;---------------------------------------
   296                              <1> 		; スタックのデータを文字列に変換
   297                              <1> 		;---------------------------------------
   298 000014DF 8B0424              <1> 		mov		eax, [esp + 0]					; EAX = ESP[ 0];
   299 000014E2 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p1, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   299 000014E9 [A7150000]50E83EFE- <1>
   299 000014F1 FFFF6683C414        <1>
   300                              <1> 
   301 000014F7 8B442404            <1> 		mov		eax, [esp + 4]					; EAX = ESP[ 4];
   302 000014FB 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p2, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   302 00001502 [B8150000]50E825FE- <1>
   302 0000150A FFFF6683C414        <1>
   303                              <1> 
   304 00001510 8B442408            <1> 		mov		eax, [esp + 8]					; EAX = ESP[ 8];
   305 00001514 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p3, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   305 0000151B [C9150000]50E80CFE- <1>
   305 00001523 FFFF6683C414        <1>
   306                              <1> 
   307 00001529 8B44240C            <1> 		mov		eax, [esp +12]					; EAX = ESP[12];
   308 0000152D 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p4, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   308 00001534 [DA150000]50E8F3FD- <1>
   308 0000153C FFFF6683C414        <1>
   309                              <1> 
   310                              <1> 		;---------------------------------------
   311                              <1> 		; 文字列の表示
   312                              <1> 		;---------------------------------------
   313 00001542 68[A0150000]68040F- <1> 		cdecl	draw_str, 25, 16, 0x0F04, .s1	; draw_str("ESP+ 0:-------- ");
   313 0000154A 00006A106A19E834FB- <1>
   313 00001553 FFFF6683C410        <1>
   314 00001559 68[B1150000]68040F- <1> 		cdecl	draw_str, 25, 17, 0x0F04, .s2	; draw_str("   + 4:-------- ");
   314 00001561 00006A116A19E81DFB- <1>
   314 0000156A FFFF6683C410        <1>
   315 00001570 68[C2150000]68040F- <1> 		cdecl	draw_str, 25, 18, 0x0F04, .s3	; draw_str("   + 8:-------- ");
   315 00001578 00006A126A19E806FB- <1>
   315 00001581 FFFF6683C410        <1>
   316 00001587 68[D3150000]68040F- <1> 		cdecl	draw_str, 25, 19, 0x0F04, .s4	; draw_str("   +12:-------- ");
   316 0000158F 00006A136A19E8EFFA- <1>
   316 00001598 FFFF6683C410        <1>
   317                              <1> 
   318                              <1> 		;---------------------------------------
   319                              <1> 		; 無限ループ
   320                              <1> 		;---------------------------------------
   321 0000159E EBFE                <1> 		jmp		$								; while (1) ; // 無限ループ
   322                              <1> 
   323 000015A0 4553502B20303A      <1> .s1		db	"ESP+ 0:"
   324 000015A7 5F5F5F5F5F5F5F5F20- <1> .p1		db	"________ ", 0
   324 000015B0 00                  <1>
   325 000015B1 2020202B20343A      <1> .s2		db	"   + 4:"
   326 000015B8 5F5F5F5F5F5F5F5F20- <1> .p2		db	"________ ", 0
   326 000015C1 00                  <1>
   327 000015C2 2020202B20383A      <1> .s3		db	"   + 8:"
   328 000015C9 5F5F5F5F5F5F5F5F20- <1> .p3		db	"________ ", 0
   328 000015D2 00                  <1>
   329 000015D3 2020202B31323A      <1> .s4		db	"   +12:"
   330 000015DA 5F5F5F5F5F5F5F5F20- <1> .p4		db	"________ ", 0
   330 000015E3 00                  <1>
   331                              <1> 
   332                              <1> ;************************************************************************
   333                              <1> ;	割り込み処理：デフォルトの処理
   334                              <1> ;************************************************************************
   335                              <1> int_default:
   336 000015E4 9C                  <1> 		pushf									; // EFLAGS(IF==0)
   337 000015E5 0E                  <1> 		push	cs								; // CS
   338 000015E6 68[CB140000]        <1> 		push	int_stop						; // スタック表示処理
   339                              <1> 
   340 000015EB B8[F1150000]        <1> 		mov		eax, .s0						; // 割り込み種別
   341 000015F0 CF                  <1> 		iret
   342                              <1> 
   343 000015F1 203C2020202053544F- <1> .s0		db	" <    STOP    > ", 0
   343 000015FA 50202020203E2000    <1>
   344                              <1> 
   345                              <1> ;************************************************************************
   346                              <1> ;	割り込み処理：ゼロ除算
   347                              <1> ;************************************************************************
   348                              <1> int_zero_div:
   349 00001602 9C                  <1> 		pushf									; // EFLAGS
   350 00001603 0E                  <1> 		push	cs								; // CS
   351 00001604 68[CB140000]        <1> 		push	int_stop						; // スタック表示処理
   352                              <1> 
   353 00001609 B8[0F160000]        <1> 		mov		eax, .s0						; // 割り込み種別
   354 0000160E CF                  <1> 		iret
   355                              <1> 
   356 0000160F 203C20205A45524F20- <1> .s0		db	" <  ZERO DIV  > ", 0
   356 00001618 44495620203E2000    <1>
   357                              <1> 
   201                                  %include	"../modules/protect/pic.s"
   202                              <1> ;************************************************************************
   203                              <1> ;	割り込みコントローラの初期化
   204                              <1> ;========================================================================
   205                              <1> ;■書式		: void init_pic(void);
   206                              <1> ;
   207                              <1> ;■引数		: 無し
   208                              <1> ;
   209                              <1> ;■戻り値	: 無し
   210                              <1> ;************************************************************************
   211                              <1> init_pic:
   212                              <1> 		;---------------------------------------
   213                              <1> 		; 【レジスタの保存】
   214                              <1> 		;---------------------------------------
   215 00001620 50                  <1> 		push	eax
   216                              <1> 
   217                              <1> 		;---------------------------------------
   218                              <1> 		; マスタPICの設定
   219                              <1> 		;---------------------------------------
   220                              <1> 		outp	0x20, 0x11						; // MASTER.ICW1 = 0x11;
    72 00001621 B011                <2>  mov al, %2
    73 00001623 E620                <2>  out %1, al
   221                              <1> 		outp	0x21, 0x20						; // MASTER.ICW2 = 0x20;
    72 00001625 B020                <2>  mov al, %2
    73 00001627 E621                <2>  out %1, al
   222                              <1> 		outp	0x21, 0x04						; // MASTER.ICW3 = 0x04;
    72 00001629 B004                <2>  mov al, %2
    73 0000162B E621                <2>  out %1, al
   223                              <1> 		outp	0x21, 0x01						; // MASTER.ICW4 = 0x01;
    72 0000162D B001                <2>  mov al, %2
    73 0000162F E621                <2>  out %1, al
   224                              <1> 		outp	0x21, 0xFF						; // マスタ割り込みマスク
    72 00001631 B0FF                <2>  mov al, %2
    73 00001633 E621                <2>  out %1, al
   225                              <1> 
   226                              <1> 		;---------------------------------------
   227                              <1> 		; スレーブPICの設定
   228                              <1> 		;---------------------------------------
   229                              <1> 		outp	0xA0, 0x11						; // SLAVE.ICW1  = 0x11;
    72 00001635 B011                <2>  mov al, %2
    73 00001637 E6A0                <2>  out %1, al
   230                              <1> 		outp	0xA1, 0x28						; // SLAVE.ICW2  = 0x28;
    72 00001639 B028                <2>  mov al, %2
    73 0000163B E6A1                <2>  out %1, al
   231                              <1> 		outp	0xA1, 0x02						; // SLAVE.ICW3  = 0x02;
    72 0000163D B002                <2>  mov al, %2
    73 0000163F E6A1                <2>  out %1, al
   232                              <1> 		outp	0xA1, 0x01						; // SLAVE.ICW4  = 0x01;
    72 00001641 B001                <2>  mov al, %2
    73 00001643 E6A1                <2>  out %1, al
   233                              <1> 		outp	0xA1, 0xFF						; // スレーブ割り込みマスク
    72 00001645 B0FF                <2>  mov al, %2
    73 00001647 E6A1                <2>  out %1, al
   234                              <1> 
   235                              <1> 		;---------------------------------------
   236                              <1> 		; 【レジスタの復帰】
   237                              <1> 		;---------------------------------------
   238 00001649 58                  <1> 		pop		eax
   239                              <1> 
   240 0000164A C3                  <1> 		ret
   241                              <1> 
   202                                  %include	"../modules/protect/int_rtc.s"
   203                              <1> ;************************************************************************
   204                              <1> ;	RTCの割り込み許可設定
   205                              <1> ;========================================================================
   206                              <1> ;■書式		: void rtc_int_en(bit);
   207                              <1> ;
   208                              <1> ;■引数
   209                              <1> ;	bit		: 割り込みを許可するビット
   210                              <1> ;
   211                              <1> ;■戻り値	: 無し
   212                              <1> ;************************************************************************
   213                              <1> rtc_int_en:
   214                              <1> 		;---------------------------------------
   215                              <1> 		; 【スタックフレームの構築】
   216                              <1> 		;---------------------------------------
   217                              <1> 												; ------|--------
   218                              <1> 												;    + 8| ビット
   219                              <1> 												; ------|--------
   220                              <1> 												;    + 4| EIP（戻り番地）
   221 0000164B 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   222 0000164C 89E5                <1> 		mov		ebp, esp						; ------+--------
   223                              <1> 
   224                              <1> 		;---------------------------------------
   225                              <1> 		; 【レジスタの保存】
   226                              <1> 		;---------------------------------------
   227 0000164E 50                  <1> 		push	eax
   228                              <1> 
   229                              <1> 		;---------------------------------------
   230                              <1> 		; 割り込み許可設定
   231                              <1> 		;---------------------------------------
   232                              <1> 		outp	0x70, 0x0B						; outp(0x70, AL);   // レジスタBを選択
    72 0000164F B00B                <2>  mov al, %2
    73 00001651 E670                <2>  out %1, al
   233                              <1> 
   234 00001653 E471                <1> 		in		al, 0x71						; AL  = port(0x71); // レジスタBの
   235 00001655 0A4508              <1> 		or		al, [ebp + 8]					; AL |= ビット;     // 指定されたビットをセット
   236                              <1> 
   237 00001658 E671                <1> 		out		0x71, al						; outp(0x71, AL);   // レジスタBに書き込み
   238                              <1> 
   239                              <1> 		;---------------------------------------
   240                              <1> 		; 【レジスタの復帰】
   241                              <1> 		;---------------------------------------
   242 0000165A 58                  <1> 		pop		eax
   243                              <1> 
   244                              <1> 		;---------------------------------------
   245                              <1> 		; 【スタックフレームの破棄】
   246                              <1> 		;---------------------------------------
   247 0000165B 89EC                <1> 		mov		esp, ebp
   248 0000165D 5D                  <1> 		pop		ebp
   249                              <1> 
   250 0000165E C3                  <1> 		ret
   251                              <1> 
   252                              <1> 
   253                              <1> ;************************************************************************
   254                              <1> ;	割り込み処理：RTC
   255                              <1> ;************************************************************************
   256                              <1> int_rtc:
   257                              <1> 		;---------------------------------------
   258                              <1> 		; 【レジスタの保存】
   259                              <1> 		;---------------------------------------
   260 0000165F 60                  <1> 		pusha
   261 00001660 1E                  <1> 		push	ds
   262 00001661 06                  <1> 		push	es
   263                              <1> 
   264                              <1> 		;---------------------------------------
   265                              <1> 		; データ用セグメントセレクタの設定
   266                              <1> 		;---------------------------------------
   267 00001662 66B81000            <1> 		mov		ax, 0x0010						; 
   268 00001666 8ED8                <1> 		mov		ds, ax							; 
   269 00001668 8EC0                <1> 		mov		es, ax							; 
   270                              <1> 
   271                              <1> 		;---------------------------------------
   272                              <1> 		; RTCから時刻を取得
   273                              <1> 		;---------------------------------------
   274 0000166A 68[D0020000]E846FD- <1> 		cdecl	rtc_get_time, RTC_TIME			; EAX = get_time(&RTC_TIME);
   274 00001672 FFFF6683C404        <1>
   275                              <1> 												; 
   276                              <1> 		;---------------------------------------
   277                              <1> 		; RTCの割り込み要因を取得
   278                              <1> 		;---------------------------------------
   279                              <1> 		outp	0x70, 0x0C						; outp(0x70, 0x0C); // レジスタCを選択
    72 00001678 B00C                <2>  mov al, %2
    73 0000167A E670                <2>  out %1, al
   280 0000167C E471                <1> 		in		al, 0x71						; AL = inp();
   281                              <1> 
   282                              <1> 		;---------------------------------------
   283                              <1> 		; 割り込みフラグをクリア(EOI)
   284                              <1> 		;---------------------------------------
   285                              <1> 		outp	0xA0, 0x20						; outp(0xA0, EOI); // スレーブPIC
    72 0000167E B020                <2>  mov al, %2
    73 00001680 E6A0                <2>  out %1, al
   286                              <1> 		outp	0x20, 0x20						; outp(0x20, EOI); // マスタPIC
    72 00001682 B020                <2>  mov al, %2
    73 00001684 E620                <2>  out %1, al
   287                              <1> 
   288                              <1> 		;---------------------------------------
   289                              <1> 		; 【レジスタの復帰】
   290                              <1> 		;---------------------------------------
   291 00001686 07                  <1> 		pop		es								; 
   292 00001687 1F                  <1> 		pop		ds								; 
   293 00001688 61                  <1> 		popa									; 
   294                              <1> 
   295 00001689 CF                  <1> 		iret									; 割り込み処理の終了
   296                              <1> 
   203                                  %include	"../modules/protect/int_keyboard.s"
   204                              <1> ;************************************************************************
   205                              <1> ;	割り込み処理：キーボード
   206                              <1> ;------------------------------------------------------------------------
   207                              <1> ;	KBC（キーボードコントローラ）からキーコードを取得して、
   208                              <1> ;	専用のリングバッファに保存する。
   209                              <1> ;************************************************************************
   210                              <1> int_keyboard:
   211                              <1> 		;---------------------------------------
   212                              <1> 		; 【レジスタの保存】
   213                              <1> 		;---------------------------------------
   214 0000168A 60                  <1> 		pusha
   215 0000168B 1E                  <1> 		push	ds
   216 0000168C 06                  <1> 		push	es
   217                              <1> 
   218                              <1> 		;---------------------------------------
   219                              <1> 		; データ用セグメントの設定
   220                              <1> 		;---------------------------------------
   221 0000168D 66B81000            <1> 		mov		ax, 0x0010						; 
   222 00001691 8ED8                <1> 		mov		ds, ax							; 
   223 00001693 8EC0                <1> 		mov		es, ax							; 
   224                              <1> 
   225                              <1> 		;---------------------------------------
   226                              <1> 		; KBCのバッファ読み取り
   227                              <1> 		;---------------------------------------
   228 00001695 E460                <1> 		in		al, 0x60						; AL = キーコードの取得
   229                              <1> 
   230                              <1> 		;---------------------------------------
   231                              <1> 		; キーコードの保存
   232                              <1> 		;---------------------------------------
   233 00001697 5068[B0160000]E856- <1> 		cdecl	ring_wr, _KEY_BUFF, eax			; ring_wr(_KEY_BUFF, EAX); // キーコードの保存
   233 0000169F 0000006683C408      <1>
   234                              <1> 
   235                              <1> 		;---------------------------------------
   236                              <1> 		; 割り込み終了コマンド送信
   237                              <1> 		;---------------------------------------
   238                              <1> 		outp	0x20, 0x20						; outp(); // マスタPIC:EOIコマンド
    72 000016A6 B020                <2>  mov al, %2
    73 000016A8 E620                <2>  out %1, al
   239                              <1> 
   240                              <1> 		;---------------------------------------
   241                              <1> 		; 【レジスタの復帰】
   242                              <1> 		;---------------------------------------
   243 000016AA 07                  <1> 		pop		es								; 
   244 000016AB 1F                  <1> 		pop		ds								; 
   245 000016AC 61                  <1> 		popa
   246                              <1> 
   247 000016AD CF                  <1> 		iret									; 割り込みからの復帰
   248                              <1> 
   249 000016AE 00<rep 2h>          <1> ALIGN 4, db 0
   250 000016B0 00<rep 18h>         <1> _KEY_BUFF:	times ring_buff_size db 0
   251                              <1> 
   204                                  %include	"../modules/protect/ring_buff.s"
   205                              <1> ;************************************************************************
   206                              <1> ;	リングバッファからデータを取得
   207                              <1> ;========================================================================
   208                              <1> ;■書式		: DWORD ring_rd(buff, data);
   209                              <1> ;
   210                              <1> ;■引数
   211                              <1> ;	buff	: リングバッファ
   212                              <1> ;	data	: 読み込んだデータの保存先アドレス
   213                              <1> ;
   214                              <1> ;■戻り値	: データあり(0以外)、データ無し(0)
   215                              <1> ;************************************************************************
   216                              <1> ring_rd:
   217                              <1> 		;---------------------------------------
   218                              <1> 		; 【スタックフレームの構築】
   219                              <1> 		;---------------------------------------
   220                              <1> 												; ------|--------
   221                              <1> 												;    +12| リングデータ
   222                              <1> 												;    + 8| データアドレス
   223                              <1> 												; ------|--------
   224                              <1> 												;    + 4| EIP（戻り番地）
   225 000016C8 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   226 000016C9 89E5                <1> 		mov		ebp, esp						; ------+--------
   227                              <1> 
   228                              <1> 		;---------------------------------------
   229                              <1> 		; 【レジスタの保存】
   230                              <1> 		;---------------------------------------
   231 000016CB 53                  <1> 		push	ebx
   232 000016CC 56                  <1> 		push	esi
   233 000016CD 57                  <1> 		push	edi
   234                              <1> 
   235                              <1> 		;---------------------------------------
   236                              <1> 		; 引数を取得
   237                              <1> 		;---------------------------------------
   238 000016CE 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   239 000016D1 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = データアドレス;
   240                              <1> 
   241                              <1> 		;---------------------------------------
   242                              <1> 		; 読み込み位置を確認
   243                              <1> 		;---------------------------------------
   244 000016D4 B800000000          <1> 		mov		eax, 0							; EAX = 0;          // データ無し
   245 000016D9 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;         // 読み込み位置
   246 000016DB 3B5E04              <1> 		cmp		ebx, [esi + ring_buff.wp]		; if (EBX != wp)    // 書き込み位置と異なる
   247 000016DE 7411                <1> 		je		.10E							; {
   248                              <1> 												;   
   249 000016E0 8A441E08            <1> 		mov		al, [esi + ring_buff.item + ebx] ;   AL = BUFF[rp]; // キーコードを保存
   250                              <1> 												;   
   251 000016E4 8807                <1> 		mov		[edi], al						;   [EDI] = AL;     // データを保存
   252                              <1> 												;   
   253 000016E6 43                  <1> 		inc		ebx								;   EBX++;          // 次の読み込み位置
   254 000016E7 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= 0x0F     // サイズの制限
   255 000016EA 891E                <1> 		mov		[esi + ring_buff.rp], ebx		;   rp = EBX;       // 読み込み位置を保存
   256                              <1> 												;   
   257 000016EC B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // データあり
   258                              <1> .10E:											; }
   259                              <1> 
   260                              <1> 		;---------------------------------------
   261                              <1> 		; 【レジスタの復帰】
   262                              <1> 		;---------------------------------------
   263 000016F1 5F                  <1> 		pop		edi
   264 000016F2 5E                  <1> 		pop		esi
   265 000016F3 5B                  <1> 		pop		ebx
   266                              <1> 
   267                              <1> 		;---------------------------------------
   268                              <1> 		; 【スタックフレームの破棄】
   269                              <1> 		;---------------------------------------
   270 000016F4 89EC                <1> 		mov		esp, ebp
   271 000016F6 5D                  <1> 		pop		ebp
   272                              <1> 
   273 000016F7 C3                  <1> 		ret
   274                              <1> 
   275                              <1> ;************************************************************************
   276                              <1> ;	リングバッファにデータを格納
   277                              <1> ;========================================================================
   278                              <1> ;■書式		: DWORD ring_wr(buff, data);
   279                              <1> ;
   280                              <1> ;■引数
   281                              <1> ;	buff	: リングバッファ
   282                              <1> ;	data	: 書き込むデータ
   283                              <1> ;
   284                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   285                              <1> ;************************************************************************
   286                              <1> ring_wr:
   287                              <1> 		;---------------------------------------
   288                              <1> 		; 【スタックフレームの構築】
   289                              <1> 		;---------------------------------------
   290                              <1> 												; ------|--------
   291                              <1> 												;    +12| リングデータ
   292                              <1> 												;    + 8| データ
   293                              <1> 												; ------|--------
   294                              <1> 												;    + 4| EIP（戻り番地）
   295 000016F8 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   296 000016F9 89E5                <1> 		mov		ebp, esp						; ------+--------
   297                              <1> 
   298                              <1> 		;---------------------------------------
   299                              <1> 		; 【レジスタの保存】
   300                              <1> 		;---------------------------------------
   301 000016FB 53                  <1> 		push	ebx
   302 000016FC 51                  <1> 		push	ecx
   303 000016FD 56                  <1> 		push	esi
   304                              <1> 
   305                              <1> 		;---------------------------------------
   306                              <1> 		; 引数を取得
   307                              <1> 		;---------------------------------------
   308 000016FE 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   309                              <1> 
   310                              <1> 		;---------------------------------------
   311                              <1> 		; 書き込み位置を確認
   312                              <1> 		;---------------------------------------
   313 00001701 B800000000          <1> 		mov		eax, 0							; EAX  = 0;         // 失敗
   314 00001706 8B5E04              <1> 		mov		ebx, [esi + ring_buff.wp]		; EBX  = wp;        // 書き込み位置
   315 00001709 89D9                <1> 		mov		ecx, ebx						; ECX  = EBX;
   316 0000170B 41                  <1> 		inc		ecx								; ECX++;            // 次の書き込み位置
   317 0000170C 83E10F              <1> 		and		ecx, RING_INDEX_MASK			; ECX &= 0x0F       // サイズの制限
   318                              <1> 												; 
   319 0000170F 3B0E                <1> 		cmp		ecx, [esi + ring_buff.rp]		; if (ECX != rp)    // 読み込み位置と異なる
   320 00001711 740F                <1> 		je		.10E							; {
   321                              <1> 												; 
   322 00001713 8A450C              <1> 		mov		al, [ebp +12]					;   AL = データ;
   323                              <1> 												; 
   324 00001716 88441E08            <1> 		mov		[esi + ring_buff.item + ebx], al ;   BUFF[wp] = AL; // キーコードを保存
   325 0000171A 894E04              <1> 		mov		[esi + ring_buff.wp], ecx		;   wp = ECX;       // 書き込み位置を保存
   326 0000171D B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // 成功
   327                              <1> .10E:											; }
   328                              <1> 
   329                              <1> 		;---------------------------------------
   330                              <1> 		; 【レジスタの復帰】
   331                              <1> 		;---------------------------------------
   332 00001722 5E                  <1> 		pop		esi
   333 00001723 59                  <1> 		pop		ecx
   334 00001724 5B                  <1> 		pop		ebx
   335                              <1> 
   336                              <1> 		;---------------------------------------
   337                              <1> 		; 【スタックフレームの破棄】
   338                              <1> 		;---------------------------------------
   339 00001725 89EC                <1> 		mov		esp, ebp
   340 00001727 5D                  <1> 		pop		ebp
   341                              <1> 
   342 00001728 C3                  <1> 		ret
   343                              <1> 
   344                              <1> ;************************************************************************
   345                              <1> ;	リングバッファ内要素の表示
   346                              <1> ;========================================================================
   347                              <1> ;■書式		: void ring_show(col, row, buff);
   348                              <1> ;
   349                              <1> ;■引数
   350                              <1> ;	col		: 列
   351                              <1> ;	row		: 行
   352                              <1> ;	buff	: リングバッファ
   353                              <1> ;
   354                              <1> ;■戻り値	: 無し
   355                              <1> ;************************************************************************
   356                              <1> draw_key:
   357                              <1> 		;---------------------------------------
   358                              <1> 		; 【スタックフレームの構築】
   359                              <1> 		;---------------------------------------
   360                              <1> 												; ------|--------
   361                              <1> 												; EBP+16| リングバッファ
   362                              <1> 												; EBP+12| Y（行）
   363                              <1> 												; EBP+ 8| X（列）
   364                              <1> 												; ------|--------
   365 00001729 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   366 0000172A 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   367                              <1> 												; ------|--------
   368                              <1> 
   369                              <1> 		;---------------------------------------
   370                              <1> 		; 【レジスタの保存】
   371                              <1> 		;---------------------------------------
   372 0000172C 60                  <1> 		pusha
   373                              <1> 
   374                              <1> 		;---------------------------------------
   375                              <1> 		; 引数を取得
   376                              <1> 		;---------------------------------------
   377 0000172D 8B5508              <1> 		mov		edx, [ebp + 8]					; EDX = X（列）;
   378 00001730 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）;
   379 00001733 8B7510              <1> 		mov		esi, [ebp +16]					; ESI = リングバッファ;
   380                              <1> 
   381                              <1> 		;---------------------------------------
   382                              <1> 		; リングバッファの情報を取得
   383                              <1> 		;---------------------------------------
   384 00001736 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;             // 読み込み位置
   385 00001738 8D7608              <1> 		lea		esi, [esi + ring_buff.item]		; ESI = &KEY_BUFF[EBX];
   386 0000173B B910000000          <1> 		mov		ecx, RING_ITEM_SIZE				; ECX = RING_ITEM_SIZE; // 要素数
   387                              <1> 
   388                              <1> 		;---------------------------------------
   389                              <1> 		; 文字に変換しながら表示
   390                              <1> 		;---------------------------------------
   391                              <1> .10L:											; do
   392                              <1> 												; {
   393 00001740 4B                  <1> 		dec		ebx								;   EBX--; // 読み込み位置
   394 00001741 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= RING_INDEX_MASK;
   395 00001744 8A041E              <1> 		mov		al, [esi + ebx]					;   EAX  = KEY_BUFF[EBX];
   396                              <1> 												;   
   397 00001747 6A046A106A0268-     <1> 		cdecl	itoa, eax, .tmp, 2, 16, 0b0100	;   // キーコードを文字列に変換
   397 0000174E [78170000]50E8D9FB- <1>
   397 00001756 FFFF6683C414        <1>
   398 0000175C 68[78170000]6A0257- <1> 		cdecl	draw_str, edx, edi, 0x02, .tmp	;   // 変換した文字列を表示
   398 00001764 52E81FF9FFFF6683C4- <1>
   398 0000176D 10                  <1>
   399                              <1> 												;   
   400 0000176E 83C203              <1> 		add		edx, 3							;   // 表示位置を更新（3文字分）
   401                              <1> 												;   
   402 00001771 E2CD                <1> 		loop	.10L							;   
   403                              <1> .10E:											; } while (ECX--);
   404                              <1> 
   405                              <1> 		;---------------------------------------
   406                              <1> 		; 【レジスタの復帰】
   407                              <1> 		;---------------------------------------
   408 00001773 61                  <1> 		popa
   409                              <1> 
   410                              <1> 		;---------------------------------------
   411                              <1> 		; 【スタックフレームの破棄】
   412                              <1> 		;---------------------------------------
   413 00001774 89EC                <1> 		mov		esp, ebp
   414 00001776 5D                  <1> 		pop		ebp
   415                              <1> 
   416 00001777 C3                  <1> 		ret
   417                              <1> 
   418 00001778 2D2D2000            <1> .tmp	db "-- ", 0
   205                                  %include	"../modules/protect/timer.s"
   206                              <1> ;************************************************************************
   207                              <1> ;	タイマーの設定
   208                              <1> ;------------------------------------------------------------------------
   209                              <1> ;	タイマー（カウンタ0）割り込み許可
   210                              <1> ;========================================================================
   211                              <1> ;■書式		: void int_en_timer0(void);
   212                              <1> ;
   213                              <1> ;■引数		: 無し
   214                              <1> ;
   215                              <1> ;■戻り値	: 無し
   216                              <1> ;************************************************************************
   217                              <1> int_en_timer0:
   218                              <1> 		;---------------------------------------
   219                              <1> 		; 【レジスタの保存】
   220                              <1> 		;---------------------------------------
   221 0000177C 50                  <1> 		push	eax
   222                              <1> 
   223                              <1> 		;---------------------------------------
   224                              <1> 		;	8254 Timer
   225                              <1> 		;	0x2e9c(11932)=10[ms] @ CLK=1,193,182[Hz]
   226                              <1> 		;---------------------------------------
   227                              <1> 		 outp	 0x43, 0b_00_11_010_0			; // カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    72 0000177D B034                <2>  mov al, %2
    73 0000177F E643                <2>  out %1, al
   228                              <1> 		 outp	 0x40, 0x9C						; // 下位バイト
    72 00001781 B09C                <2>  mov al, %2
    73 00001783 E640                <2>  out %1, al
   229                              <1> 		 outp	 0x40, 0x2E						; // 上位バイト
    72 00001785 B02E                <2>  mov al, %2
    73 00001787 E640                <2>  out %1, al
   230                              <1> 
   231                              <1> 		;---------------------------------------
   232                              <1> 		; 【レジスタの復帰】
   233                              <1> 		;---------------------------------------
   234 00001789 58                  <1> 		pop		eax
   235                              <1> 
   236 0000178A C3                  <1> 		ret
   237                              <1> 
   206                                  %include	"../modules/protect/draw_rotation_bar.s"
   207                              <1> ;************************************************************************
   208                              <1> ;	画面左下に、回転する棒を表示
   209                              <1> ;========================================================================
   210                              <1> ;■書式		: void draw_rotation_bar(void);
   211                              <1> ;
   212                              <1> ;■引数		: 無し
   213                              <1> ;
   214                              <1> ;■戻り値	: 無し
   215                              <1> ;************************************************************************
   216                              <1> draw_rotation_bar:
   217                              <1> 		;---------------------------------------
   218                              <1> 		; 【レジスタの保存】
   219                              <1> 		;---------------------------------------
   220 0000178B 50                  <1> 		push	eax
   221                              <1> 
   222                              <1> 		;---------------------------------------
   223                              <1> 		; タイマー割り込みカウンタを確認
   224                              <1> 		;---------------------------------------
   225 0000178C A1[F00A0000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX  = タイマー割り込みカウンタ
   226 00001791 C1E804              <1> 		shr		eax, 4							; EAX /= 4;    // 16で除算
   227 00001794 3B05[BC170000]      <1> 		cmp		eax, [.index]					; if (EAX != 前回値)
   228 0000179A 741E                <1> 		je		.10E							; {
   229                              <1> 												;   
   230 0000179C A3[BC170000]        <1> 		mov		[.index], eax					;   前回値 = EAX;
   231 000017A1 83E003              <1> 		and		eax, 0x03						;   EAX &= 0x03; // 0～3に限定
   232                              <1> 												;   
   233 000017A4 8A80[C0170000]      <1> 		mov		al, [.table + eax]				;   AL = table[index];
   234 000017AA 506A0F6A1D6A00E8AD- <1> 		cdecl	draw_char, 0, 29, 0x000F, eax	;   draw_char(); // 文字を表示
   234 000017B3 F7FFFF6683C410      <1>
   235                              <1> 												;   
   236                              <1> .10E:											; }
   237                              <1> 
   238                              <1> 		;---------------------------------------
   239                              <1> 		; 【レジスタの復帰】
   240                              <1> 		;---------------------------------------
   241 000017BA 58                  <1> 		pop		eax
   242                              <1> 
   243 000017BB C3                  <1> 		ret
   244                              <1> 
   245                              <1> ALIGN 4, db 0
   246 000017BC 00000000            <1> .index:		dd 0								; 前回値
   247 000017C0 7C2F2D5C            <1> .table:		db	"|/-\"							; 表示キャラクタ
   248                              <1> 
   207                                  %include	"../modules/protect/call_gate.s"
   208                              <1> ;************************************************************************
   209                              <1> ;	コールゲート関数
   210                              <1> ;************************************************************************
   211                              <1> call_gate:
   212                              <1> 		;---------------------------------------
   213                              <1> 		; 【スタックフレームの構築】
   214                              <1> 		;---------------------------------------
   215                              <1> 												; ------|--------
   216                              <1> 												; EBP+12| X（列）
   217                              <1> 												; EBP+16| Y（行）
   218                              <1> 												; EBP+20| 色
   219                              <1> 												; EBP+24| 文字
   220                              <1> 												; ---------------
   221                              <1> 												; EBP+ 8| CS（コードセグメント）
   222 000017C4 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   223 000017C5 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   224                              <1> 												; ---------------
   225                              <1> 		;---------------------------------------
   226                              <1> 		; 【レジスタの保存】
   227                              <1> 		;---------------------------------------
   228 000017C7 60                  <1> 		pusha
   229 000017C8 1E                  <1> 		push	ds
   230 000017C9 06                  <1> 		push	es
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; データ用セグメントの設定
   234                              <1> 		;---------------------------------------
   235 000017CA 66B81000            <1> 		mov		ax, 0x0010						; 
   236 000017CE 8ED8                <1> 		mov		ds, ax							; 
   237 000017D0 8EC0                <1> 		mov		es, ax							; 
   238                              <1> 
   239                              <1> 		;---------------------------------------
   240                              <1> 		; 文字を表示
   241                              <1> 		;---------------------------------------
   242 000017D2 8B450C              <1> 		mov		eax, dword [ebp +12]			; EAX = X（列）;
   243 000017D5 8B5D10              <1> 		mov		ebx, dword [ebp +16]			; EBX = Y（行）;
   244 000017D8 8B4D14              <1> 		mov		ecx, dword [ebp +20]			; ECX = 色;
   245 000017DB 8B5518              <1> 		mov		edx, dword [ebp +24]			; EDX = 文字;
   246 000017DE 52515350E8A2F8FFFF- <1> 		cdecl	draw_str, eax, ebx , ecx, edx	; draw_str();
   246 000017E7 6683C410            <1>
   247                              <1> 
   248                              <1> 		;---------------------------------------
   249                              <1> 		; 【レジスタの復帰】
   250                              <1> 		;---------------------------------------
   251 000017EB 07                  <1> 		pop		es								; 
   252 000017EC 1F                  <1> 		pop		ds								; 
   253 000017ED 61                  <1> 		popa									; 
   254                              <1> 
   255                              <1> 		;---------------------------------------
   256                              <1> 		; 【スタックフレームの破棄】
   257                              <1> 		;---------------------------------------
   258 000017EE 89EC                <1> 		mov		esp, ebp
   259 000017F0 5D                  <1> 		pop		ebp
   260                              <1> 
   261 000017F1 CA1000              <1> 		retf	4 * 4
   262                              <1> 
   208                                  %include	"../modules/protect/trap_gate.s"
   209                              <1> ;************************************************************************
   210                              <1> ;	システムコール：1文字出力
   211                              <1> ;************************************************************************
   212                              <1> trap_gate_81:
   213                              <1> 		;---------------------------------------
   214                              <1> 		; 1文字出力
   215                              <1> 		;---------------------------------------
   216 000017F4 50535251E866F7FFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	; // 1文字出力
   216 000017FD 6683C410            <1>
   217                              <1> 
   218 00001801 CF                  <1> 		iret
   219                              <1> 
   220                              <1> ;************************************************************************
   221                              <1> ;	システムコール：点の描画
   222                              <1> ;************************************************************************
   223                              <1> trap_gate_82:
   224                              <1> 		;---------------------------------------
   225                              <1> 		; 点の描画
   226                              <1> 		;---------------------------------------
   227 00001802 535251E837F9FFFF66- <1> 		cdecl	draw_pixel, ecx, edx, ebx		; // 点の描画
   227 0000180B 83C40C              <1>
   228                              <1> 
   229 0000180E CF                  <1> 		iret
   230                              <1> 
   209                                  %include	"../modules/protect/test_and_set.s"
   210                              <1> ;************************************************************************
   211                              <1> ;	RTCから時刻データを取得する
   212                              <1> ;========================================================================
   213                              <1> ;■書式		: void test_and_set(local);
   214                              <1> ;
   215                              <1> ;■引数
   216                              <1> ;	local	: ローカル変数のアドレス
   217                              <1> ;
   218                              <1> ;■戻り値	: 無し
   219                              <1> ;************************************************************************
   220                              <1> test_and_set:
   221                              <1> 		;---------------------------------------
   222                              <1> 		; 【スタックフレームの構築】
   223                              <1> 		;---------------------------------------
   224                              <1> 												; EBP+ 8| ローカル変数のアドレス
   225                              <1> 												; ------+----------------
   226 0000180F 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   227 00001810 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   228                              <1> 												; ------+----------------
   229                              <1> 
   230                              <1> 		;---------------------------------------
   231                              <1> 		; 【レジスタの保存】
   232                              <1> 		;---------------------------------------
   233 00001812 50                  <1> 		push	eax
   234 00001813 53                  <1> 		push	ebx
   235                              <1> 
   236                              <1> 		;---------------------------------------
   237                              <1> 		; テストアンドセット
   238                              <1> 		;---------------------------------------
   239 00001814 B800000000          <1> 		mov		eax, 0							; local  = 0;
   240 00001819 8B5D08              <1> 		mov		ebx, [ebp + 8]					; global = アドレス;
   241                              <1> 
   242                              <1> .10L:											; for ( ; ; )
   243                              <1> 												; {
   244 0000181C F00FAB03            <1> 		lock bts [ebx], eax						;   CF = TEST_AND_SET(IN_USE, 1);
   245 00001820 7307                <1> 		jnc		.10E							;   if (0 == CF)
   246                              <1> 												;     break;
   247                              <1> 												;   
   248                              <1> .12L:											;   for ( ; ; )
   249                              <1> 												;   {
   250 00001822 0FA303              <1> 		bt		[ebx], eax						;     CF = TEST(IN_USE, 1);
   251 00001825 72FB                <1> 		jc		.12L							;     if (0 == CF)
   252                              <1> 												;       break;
   253 00001827 EBF3                <1> 		jmp		.10L							;   }
   254                              <1> .10E:											; }
   255                              <1> 
   256                              <1> 		;---------------------------------------
   257                              <1> 		; 【レジスタの復帰】
   258                              <1> 		;---------------------------------------
   259 00001829 5B                  <1> 		pop		ebx
   260 0000182A 58                  <1> 		pop		eax
   261                              <1> 
   262                              <1> 		;---------------------------------------
   263                              <1> 		; 【スタックフレームの破棄】
   264                              <1> 		;---------------------------------------
   265 0000182B 89EC                <1> 		mov		esp, ebp
   266 0000182D 5D                  <1> 		pop		ebp
   267                              <1> 
   268 0000182E C3                  <1> 		ret
   269                              <1> 
   210                                  %include	"../modules/protect/int_nm.s"
   211                              <1> ;************************************************************************
   212                              <1> ;	割り込み処理：#NM(DNA:デバイス使用不可)
   213                              <1> ;************************************************************************
   214                              <1> int_nm:
   215                              <1> 		;---------------------------------------
   216                              <1> 		; 【レジスタの保存】
   217                              <1> 		;---------------------------------------
   218 0000182F 60                  <1> 		pusha
   219 00001830 1E                  <1> 		push	ds
   220 00001831 06                  <1> 		push	es
   221                              <1> 
   222                              <1> 		;---------------------------------------
   223                              <1> 		; カーネル用セレクタを設定
   224                              <1> 		;---------------------------------------
   225 00001832 66B81000            <1> 		mov		ax, DS_KERNEL					;
   226 00001836 8ED8                <1> 		mov		ds, ax							;
   227 00001838 8EC0                <1> 		mov		es, ax							;
   228                              <1> 
   229                              <1> 		;---------------------------------------
   230                              <1> 		; タスクスイッチフラグをクリア
   231                              <1> 		;---------------------------------------
   232 0000183A 0F06                <1> 		clts									; CR0.TS = 0;
   233                              <1> 
   234                              <1> 		;---------------------------------------
   235                              <1> 		; 前回/今回FPUを使用するタスク
   236                              <1> 		;---------------------------------------
   237 0000183C 8B3D[88180000]      <1> 		mov		edi, [.last_tss]				; EDI = 前回FPUを使用したタスクのTSS
   238 00001842 0F00CE              <1> 		str		esi								; ESI = 今回FPUを使用したタスクのTSS
   239 00001845 83E6F8              <1> 		and		esi, ~0x0007					; // 特権レベルをマスク
   240                              <1> 
   241                              <1> 		;---------------------------------------
   242                              <1> 		; FPUの初回利用をチェック
   243                              <1> 		;---------------------------------------
   244 00001848 83FF00              <1> 		cmp		edi, 0							; if (0 != EDI)     // 前回使用したタスク
   245 0000184B 7420                <1> 		je		.10F							; {
   246                              <1> 												;   
   247 0000184D 39FE                <1> 		cmp		esi, edi						;   if (ESI != EDI) // 異なるタスク
   248 0000184F 741A                <1> 		je		.12E							;   {
   249                              <1> 												;     
   250 00001851 FA                  <1> 		cli										;     // 割り込み禁止
   251                              <1> 
   252                              <1> 		;---------------------------------------
   253                              <1> 		; 前回のFPUコンテキストを保存
   254                              <1> 		;---------------------------------------
   255 00001852 89FB                <1> 		mov		ebx, edi						;     // 前回のタスク
   256 00001854 E833000000          <1> 		call	get_tss_base					;     // TSSアドレスを取得
   257 00001859 E841000000          <1> 		call	save_fpu_context				;     // FPUのコンテキストを保存
   258                              <1> 
   259                              <1> 		;---------------------------------------
   260                              <1> 		; 今回のFPUコンテキストを復帰
   261                              <1> 		;---------------------------------------
   262 0000185E 89F3                <1> 		mov		ebx, esi						;     // 今回のタスク
   263 00001860 E827000000          <1> 		call	get_tss_base					;     // TSSアドレスを取得
   264 00001865 E843000000          <1> 		call	load_fpu_context				;     // FPUのコンテキストを復帰
   265                              <1> 												;     
   266 0000186A FB                  <1> 		sti										;     // 割り込み許可
   267                              <1> .12E:											;   }
   268 0000186B EB0E                <1> 		jmp		.10E							; }
   269                              <1> .10F:											; else
   270                              <1> 												; {
   271                              <1> 												;   
   272 0000186D FA                  <1> 		cli										;   // 割り込み禁止
   273                              <1> 
   274                              <1> 		;---------------------------------------
   275                              <1> 		; 今回のFPUコンテキストを復帰
   276                              <1> 		;---------------------------------------
   277 0000186E 89F3                <1> 		mov		ebx, esi						;   // 今回のタスク
   278 00001870 E817000000          <1> 		call	get_tss_base					;   // 現在のタスクのTSSアドレスを取得
   279 00001875 E833000000          <1> 		call	load_fpu_context				;   // FPUのコンテキストを復帰
   280                              <1> 												;   
   281 0000187A FB                  <1> 		sti										;   // 割り込み許可
   282                              <1> .10E:											; }
   283                              <1> 												; 
   284 0000187B 8935[88180000]      <1> 		mov		[.last_tss], esi				; // FPUを使用したタスクを保存
   285                              <1> 
   286                              <1> 		;---------------------------------------
   287                              <1> 		; 【レジスタの復帰】
   288                              <1> 		;---------------------------------------
   289 00001881 07                  <1> 		pop		es
   290 00001882 1F                  <1> 		pop		ds
   291 00001883 61                  <1> 		popa
   292                              <1> 
   293 00001884 CF                  <1> 		iret
   294                              <1> 
   295 00001885 00<rep 3h>          <1> ALIGN 4, db 0
   296 00001888 00000000            <1> .last_tss:	dd		0
   297                              <1> 
   298                              <1> ;************************************************************************
   299                              <1> ; GDTのセレクタのベースアドレスを取得
   300                              <1> ;------------------------------------------------------------------[IN]--
   301                              <1> ;	EBX : セレクタ
   302                              <1> ;-----------------------------------------------------------------[OUT]--
   303                              <1> ;	EAX : ベースアドレス
   304                              <1> ;************************************************************************
   305                              <1> get_tss_base:
   306 0000188C 8B83[BE080000]      <1> 		mov		eax, [GDT + ebx + 2]			; EAX   = TSS[23: 0];
   307 00001892 C1E008              <1> 		shl		eax, 8							; EAX <<= 8;
   308 00001895 8A83[C3080000]      <1>         mov     al,  [GDT + ebx + 7]            ;  AL   = TSS[31:24];
   309 0000189B C1C808              <1> 		ror		eax, 8							; EAX >>= 8;
   310                              <1> 
   311 0000189E C3                  <1> 		ret
   312                              <1> 
   313                              <1> ;************************************************************************
   314                              <1> ; FPUのコンテキストを保存
   315                              <1> ;------------------------------------------------------------------[IN]--
   316                              <1> ;	EAX : TSSの先頭アドレス
   317                              <1> ;************************************************************************
   318                              <1> save_fpu_context:
   319 0000189F DD7068              <1> 		fnsave	[eax + 104]						; // FPUコンテキストを保存
   320 000018A2 C780D4000000010000- <1> 		mov		[eax + 104 + 108], dword 1		; saved = 1;
   320 000018AB 00                  <1>
   321                              <1> 
   322 000018AC C3                  <1> 		ret
   323                              <1> 
   324                              <1> ;************************************************************************
   325                              <1> ; FPUのコンテキストを復帰
   326                              <1> ;------------------------------------------------------------------[IN]--
   327                              <1> ;	EAX : TSSの先頭アドレス
   328                              <1> ;************************************************************************
   329                              <1> load_fpu_context:
   330 000018AD 83B8D400000000      <1> 		cmp		[eax + 104 + 108], dword 0		; if (0 == saved)
   331 000018B4 7504                <1> 		jne		.10F							; {
   332 000018B6 DBE3                <1> 		fninit									;    // FPUの初期化
   333 000018B8 EB03                <1> 		jmp		.10E							; }
   334                              <1> .10F:											; else
   335                              <1> 												; {
   336 000018BA DD6068              <1> 		frstor	[eax + 104]						;   // FPUコンテキストを復帰
   337                              <1> .10E:											; }
   338 000018BD C3                  <1> 		ret
   339                              <1> 
   211                                  %include	"../modules/protect/wait_tick.s"
   212                              <1> ;************************************************************************
   213                              <1> ;	ウェイト
   214                              <1> ;------------------------------------------------------------------------
   215                              <1> ;	指定された回数、システム割り込みが発生するまで待つ
   216                              <1> ;========================================================================
   217                              <1> ;■書式		: void wait_tick(tick);
   218                              <1> ;
   219                              <1> ;■引数
   220                              <1> ;	tick	: システム割り込み回数
   221                              <1> ;
   222                              <1> ;■戻り値	: 無し
   223                              <1> ;************************************************************************
   224                              <1> wait_tick:
   225                              <1> 		;---------------------------------------
   226                              <1> 		; 【スタックフレームの構築】
   227                              <1> 		;---------------------------------------
   228                              <1> 												; ---------------
   229                              <1> 												; EBP+ 8| ウェイト
   230                              <1> 												; ---------------
   231 000018BE 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   232 000018BF 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   233                              <1> 												; ------|--------
   234                              <1> 
   235                              <1> 		;---------------------------------------
   236                              <1> 		; 【レジスタの保存】
   237                              <1> 		;---------------------------------------
   238 000018C1 50                  <1> 		push	eax
   239 000018C2 51                  <1> 		push	ecx
   240                              <1> 
   241                              <1> 		;---------------------------------------
   242                              <1> 		; ウェイト
   243                              <1> 		;---------------------------------------
   244 000018C3 8B4D08              <1> 		mov		ecx, [ebp +  8]					; ECX = ウェイト回数
   245 000018C6 A1[F00A0000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX = TIMER;
   246                              <1> 												; do
   247                              <1> 												; {
   248 000018CB 3905[F00A0000]      <1> .10L:	cmp		[TIMER_COUNT], eax				;   while (TIMER != EAX)
   249 000018D1 74F8                <1> 		je		.10L							;     ;
   250 000018D3 40                  <1> 		inc		eax								;   EAX++;
   251 000018D4 E2F5                <1> 		loop	.10L							; } while (--ECX);
   252                              <1> 
   253                              <1> 		;---------------------------------------
   254                              <1> 		; レジスタの復帰
   255                              <1> 		;---------------------------------------
   256 000018D6 59                  <1> 		pop		ecx
   257 000018D7 58                  <1> 		pop		eax
   258                              <1> 
   259                              <1> 		;---------------------------------------
   260                              <1> 		; スタックフレームの破棄
   261                              <1> 		;---------------------------------------
   262 000018D8 89EC                <1> 		mov		esp, ebp
   263 000018DA 5D                  <1> 		pop		ebp
   264                              <1> 
   265 000018DB C3                  <1> 		ret
   266                              <1> 
   212                                  %include	"../modules/protect/memcpy.s"
   213                              <1> ;************************************************************************
   214                              <1> ;	メモリのコピー
   215                              <1> ;========================================================================
   216                              <1> ;■書式		: void memcpy(dst, src, size);
   217                              <1> ;
   218                              <1> ;■引数
   219                              <1> ;	dst		: コピー先
   220                              <1> ;	src		: コピー元
   221                              <1> ;	size	: バイト数
   222                              <1> ;
   223                              <1> ;■戻り値	: 無し
   224                              <1> ;************************************************************************
   225                              <1> memcpy:
   226                              <1> 		;---------------------------------------
   227                              <1> 		; 【スタックフレームの構築】
   228                              <1> 		;---------------------------------------
   229                              <1> 												; EBP+16| バイト数
   230                              <1> 												; EBP+12| コピー元
   231                              <1> 												; EBP+ 8| コピー先
   232                              <1> 												; ------|--------
   233 000018DC 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   234 000018DD 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   235                              <1> 												; ------|--------
   236                              <1> 		;---------------------------------------
   237                              <1> 		; 【レジスタの保存】
   238                              <1> 		;---------------------------------------
   239 000018DF 51                  <1> 		push	ecx
   240 000018E0 56                  <1> 		push	esi
   241 000018E1 57                  <1> 		push	edi
   242                              <1> 
   243                              <1> 		;---------------------------------------
   244                              <1> 		; バイト単位でのコピー
   245                              <1> 		;---------------------------------------
   246 000018E2 FC                  <1> 		cld										; DF   = 0; // +方向
   247 000018E3 8B7D08              <1> 		mov		edi, [ebp + 8]					; EDI  = コピー先;
   248 000018E6 8B750C              <1> 		mov		esi, [ebp +12]					; EDI  = コピー元;
   249 000018E9 8B4D10              <1> 		mov		ecx, [ebp +16]					; EDI  = バイト数;
   250 000018EC F3A4                <1> 		rep movsb								; while (*EDI++ = *ESI++) ;
   251                              <1> 
   252                              <1> 		;---------------------------------------
   253                              <1> 		; 【レジスタの復帰】
   254                              <1> 		;---------------------------------------
   255 000018EE 5F                  <1> 		pop		edi
   256 000018EF 5E                  <1> 		pop		esi
   257 000018F0 59                  <1> 		pop		ecx
   258                              <1> 
   259                              <1> 		;---------------------------------------
   260                              <1> 		; 【スタックフレームの破棄】
   261                              <1> 		;---------------------------------------
   262 000018F1 89EC                <1> 		mov		esp, ebp
   263 000018F3 5D                  <1> 		pop		ebp
   264                              <1> 
   265 000018F4 C3                  <1> 		ret
   266                              <1> 
   213                                  
   214                                  ;************************************************************************
   215                                  ;	パディング
   216                                  ;************************************************************************
   217 000018F5 00<rep 70Bh>            		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
   218                                  
   219                                  ;************************************************************************
   220                                  ;	FAT
   221                                  ;************************************************************************
   222                                  %include	"fat.s"
   223                              <1> ;************************************************************************
   224                              <1> ;	FAT:FAT-1
   225                              <1> ;************************************************************************
   226                              <1> 		times (FAT1_START) - ($ - $$)	db	0x00
   227                              <1> ;------------------------------------------------------------------------
   228                              <1> FAT1:
   229 00002000 FFFF                <1> 		db		0xFF, 0xFF												; クラスタ:0
   230 00002002 FFFF                <1> 		dw		0xFFFF													; クラスタ:1
   231 00002004 FFFF                <1> 		dw		0xFFFF													; クラスタ:2
   232                              <1> 
   233                              <1> ;************************************************************************
   234                              <1> ;	FAT:FAT-2
   235                              <1> ;************************************************************************
   236 00002006 00<rep 1FFFAh>      <1> 		times (FAT2_START) - ($ - $$)	db	0x00
   237                              <1> ;------------------------------------------------------------------------
   238                              <1> FAT2:
   239 00022000 FFFF                <1> 		db		0xFF, 0xFF												; クラスタ:0
   240 00022002 FFFF                <1> 		dw		0xFFFF													; クラスタ:1
   241 00022004 FFFF                <1> 		dw		0xFFFF													; クラスタ:2
   242                              <1> 
   243                              <1> ;************************************************************************
   244                              <1> ;	FAT:ルートディレクトリ領域
   245                              <1> ;************************************************************************
   246 00022006 00<rep 1FFFAh>      <1> 		times (ROOT_START) - ($ - $$)	db	0x00
   247                              <1> ;------------------------------------------------------------------------
   248                              <1> FAT_ROOT:
   249 00042000 424F4F5441424C4544- <1> 		db		'BOOTABLE', 'DSK'										; + 0:ボリュームラベル
   249 00042009 534B                <1>
   250 0004200B 28                  <1> 		db		ATTR_ARCHIVE | ATTR_VOLUME_ID							; +11:属性
   251 0004200C 00                  <1> 		db		0x00													; +12:（予約）
   252 0004200D 00                  <1> 		db		0x00													; +13:TS
   253 0004200E 0000                <1> 		dw		( 0 << 11) | ( 0 << 5) | (0 / 2)						; +14:作成時刻
   254 00042010 0100                <1> 		dw		( 0 <<  9) | ( 0 << 5) | ( 1)							; +16:作成日
   255 00042012 0100                <1> 		dw		( 0 <<  9) | ( 0 << 5) | ( 1)							; +18:アクセス日
   256 00042014 0000                <1> 		dw		0x0000													; +20:（予約）
   257 00042016 0000                <1> 		dw		( 0 << 11) | ( 0 << 5) | (0 / 2)						; +22:更新時刻
   258 00042018 0100                <1> 		dw		( 0 <<  9) | ( 0 << 5) | ( 1)							; +24:更新日
   259 0004201A 0000                <1> 		dw		0														; +26:先頭クラスタ
   260 0004201C 00000000            <1> 		dd		0														; +28:ファイルサイズ
   261                              <1> 
   262 00042020 5350454349414C2054- <1> 		db		'SPECIAL ', 'TXT'										; + 0:ボリュームラベル
   262 00042029 5854                <1>
   263 0004202B 20                  <1> 		db		ATTR_ARCHIVE											; +11:属性
   264 0004202C 00                  <1> 		db		0x00													; +12:（予約）
   265 0004202D 00                  <1> 		db		0x00													; +13:TS
   266 0004202E 0000                <1> 		dw		( 0 << 11) | ( 0 << 5) | (0 / 2)						; +14:作成時刻
   267 00042030 2100                <1> 		dw		( 0 <<  9) | ( 1 << 5) | ( 1)							; +16:作成日
   268 00042032 2100                <1> 		dw		( 0 <<  9) | ( 1 << 5) | ( 1)							; +18:アクセス日
   269 00042034 0000                <1> 		dw		0x0000													; +20:（予約）
   270 00042036 0000                <1> 		dw		( 0 << 11) | ( 0 << 5) | (0 / 2)						; +22:更新時刻
   271 00042038 2100                <1> 		dw		( 0 <<  9) | ( 1 << 5) | ( 1)							; +24:更新日
   272 0004203A 0200                <1> 		dw		2														; +26:先頭クラスタ
   273 0004203C 0B000000            <1> 		dd		FILE.end - FILE											; +28:ファイルサイズ
   274                              <1> 
   275                              <1> ;************************************************************************
   276                              <1> ;	FAT:データ領域
   277                              <1> ;************************************************************************
   278 00042040 00<rep 3FC0h>       <1> 		times FILE_START - ($ - $$)	db	0x00
   279                              <1> ;------------------------------------------------------------------------
   280 00046000 68656C6C6F2C204641- <1> FILE:	db		'hello, FAT!'
   280 00046009 5421                <1>
   281 0004600B 00                  <1> .end:	db		0
   282                              <1> 
   283 0004600C 00<rep 1F4h>        <1> ALIGN 512, db 0x00
   284                              <1> 
   285                              <1> 
   223                                  
