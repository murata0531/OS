     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  ;************************************************************************
     8                                  ;	マクロ
     9                                  ;************************************************************************
    10                                  %include	"../include/define.s"
    11                              <1> ;************************************************************************
    12                              <1> ;	メモリイメージ
    13                              <1> ;************************************************************************
    14                              <1> 
    15                              <1> 		;---------------------------------------
    16                              <1> 		;           |            | 
    17                              <1> 		;           |____________| 
    18                              <1> 		; 0000_7A00 |            | ( 512) スタック
    19                              <1> 		;           |____________| 
    20                              <1> 		; 0000_7C00 |            | (  8K) ブート
    21                              <1> 		;           =            = 
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    24                              <1> 		;           =            = 
    25                              <1> 		;           |____________| 
    26                              <1> 		; 0000_BC00 |////////////| 
    27                              <1> 		;           =            = 
    28                              <1> 		;           |____________| 
    29                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    32                              <1> 		;           |____________| 
    33                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    34                              <1> 		;           |            | 
    35                              <1> 		;           =            = 
    36                              <1> 		;           |____________| 
    37                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    38                              <1> 		;           |            | （各タスク1K）
    39                              <1> 		;           =            = 
    40                              <1> 		;           |____________| 
    41                              <1> 		; 0010_5000 |            | Dir
    42                              <1> 		;      6000 |____________| Page
    43                              <1> 		; 0010_7000 |            | Dir
    44                              <1> 		;      8000 |____________| Page
    45                              <1> 		; 0010_9000 |////////////| 
    46                              <1> 		;           |            | 
    47                              <1> 
    48                              <1> 
    49                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    50                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    51                              <1> 
    52                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    53                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    54                              <1> 
    55                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    56                              <1> 
    57                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    58                              <1> 
    59                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    60                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    61                              <1> 
    62                              <1> 		E820_RECORD_SIZE	equ		20
    63                              <1> 
    64                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    65                              <1> 
    66                              <1> 		STACK_BASE			equ		0x0010_3000		; タスク用スタックエリア
    67                              <1> 		STACK_SIZE			equ		1024			; スタックサイズ
    68                              <1> 
    69                              <1> 		SP_TASK_0			equ		STACK_BASE + (STACK_SIZE * 1)
    70                              <1> 		SP_TASK_1			equ		STACK_BASE + (STACK_SIZE * 2)
    11                                  %include	"../include/macro.s"
    12                              <1> ;************************************************************************
    13                              <1> ; 関数呼び出し用マクロ
    14                              <1> ;
    15                              <1> ; 使い方：
    16                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    17                              <1> ;
    18                              <1> ;************************************************************************
    19                              <1> %macro  cdecl 1-*.nolist
    20                              <1> 
    21                              <1> 	%rep  %0 - 1
    22                              <1> 		push	%{-1:-1}
    23                              <1> 		%rotate -1
    24                              <1> 	%endrep 
    25                              <1> 	%rotate -1
    26                              <1> 
    27                              <1> 		call	%1
    28                              <1> 
    29                              <1> 	%if 1 < %0
    30                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    31                              <1> 	%endif
    32                              <1> 
    33                              <1> %endmacro
    34                              <1> 
    35                              <1> ;************************************************************************
    36                              <1> ; 割り込みベクタ設定用
    37                              <1> ;
    38                              <1> ; 使い方：
    39                              <1> ;	set_vect	ベクタ番号, 割り込み処理 [, フラグ]
    40                              <1> ;
    41                              <1> ;************************************************************************
    42                              <1> %macro  set_vect 1-*.nolist
    43                              <1> 		push	eax
    44                              <1> 		push	edi
    45                              <1> 
    46                              <1> 		mov		edi, VECT_BASE + (%1 * 8)		; ベクタアドレス;
    47                              <1> 		mov		eax, %2
    48                              <1> 
    49                              <1> 	%if 3 == %0
    50                              <1> 		mov		[edi + 4], %3					; フラグ
    51                              <1> 	%endif
    52                              <1> 
    53                              <1> 		mov		[edi + 0], ax					; 例外アドレス[15: 0]
    54                              <1> 		shr		eax, 16							; 
    55                              <1> 		mov		[edi + 6], ax					; 例外アドレス[31:16]
    56                              <1> 
    57                              <1> 		pop		edi
    58                              <1> 		pop		eax
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> ;************************************************************************
    62                              <1> ; ポート出力用
    63                              <1> ;
    64                              <1> ; 使い方：
    65                              <1> ;	outp	ポート番号, 出力値
    66                              <1> ;
    67                              <1> ;************************************************************************
    68                              <1> %macro  outp 2
    69                              <1> 		mov		al, %2
    70                              <1> 		out		%1, al
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> ;************************************************************************
    74                              <1> ; ディスクリプタの情報を設定
    75                              <1> ;
    76                              <1> ; 使い方：
    77                              <1> ;	set_desc	ディスクリプタ, ベース
    78                              <1> ;
    79                              <1> ;************************************************************************
    80                              <1> %macro  set_desc 2-* 
    81                              <1> 		push	eax
    82                              <1> 		push	edi
    83                              <1> 
    84                              <1> 		mov		edi, %1							; ディスクリプタアドレス
    85                              <1> 		mov		eax, %2							; ベースアドレス
    86                              <1> 
    87                              <1> 	%if 3 == %0
    88                              <1> 		mov		[edi + 0], %3					; リミット
    89                              <1> 	%endif
    90                              <1> 
    91                              <1> 		mov		[edi + 2], ax					; ベース（[15: 0]）
    92                              <1> 		shr		eax, 16							; 
    93                              <1> 		mov		[edi + 4], al					; ベース（[23:16]）
    94                              <1> 		mov		[edi + 7], ah					; ベース（[31:24]）
    95                              <1> 
    96                              <1> 		pop		edi
    97                              <1> 		pop		eax
    98                              <1> %endmacro
    99                              <1> 
   100                              <1> ;************************************************************************
   101                              <1> ; ゲートディスクリプタのオフセットを設定
   102                              <1> ;
   103                              <1> ; 使い方：
   104                              <1> ;	set_gate	ディスクリプタ, オフセット
   105                              <1> ;
   106                              <1> ;************************************************************************
   107                              <1> %macro  set_gate 2-* 
   108                              <1> 		push	eax
   109                              <1> 		push	edi
   110                              <1> 
   111                              <1> 		mov		edi, %1							; ディスクリプタアドレス
   112                              <1> 		mov		eax, %2							; ベースアドレス
   113                              <1> 
   114                              <1> 		mov		[edi + 0], ax					; ベース（[15: 0]）
   115                              <1> 		shr		eax, 16							; 
   116                              <1> 		mov		[edi + 6], ax					; ベース（[31:16]）
   117                              <1> 
   118                              <1> 		pop		edi
   119                              <1> 		pop		eax
   120                              <1> %endmacro
   121                              <1> 
   122                              <1> ;************************************************************************
   123                              <1> ;	構造体
   124                              <1> ;************************************************************************
   125                              <1> 
   126                              <1> ;-----------------------------------------------
   127                              <1> ;	ドライブパラメータ
   128                              <1> ;-----------------------------------------------
   129                              <1> struc drive
   130 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
   131 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
   132 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
   133 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
   134                              <1> endstruc
   135                              <1> 
   136                              <1> ;-----------------------------------------------
   137                              <1> ;	リングバッファ
   138                              <1> ;-----------------------------------------------
   139                              <1> %define		RING_ITEM_SIZE		(1 << 4)
   140                              <1> %define		RING_INDEX_MASK		(RING_ITEM_SIZE - 1)
   141                              <1> 
   142                              <1> struc ring_buff
   143 00000000 ????????            <1> 		.rp				resd	1				; RP:書き込み位置
   144 00000004 ????????            <1> 		.wp				resd	1				; WP:読み込み位置
   145 00000008 <res 10h>           <1> 		.item			resb	RING_ITEM_SIZE	; バッファ
   146                              <1> endstruc
   147                              <1> 
   148                              <1> ;-----------------------------------------------
   149                              <1> ;	バラ曲線描画パラメータ
   150                              <1> ;-----------------------------------------------
   151                              <1> struc rose
   152 00000000 ????????            <1> 		.x0				resd	1				; 左上座標：X0
   153 00000004 ????????            <1> 		.y0				resd	1				; 左上座標：Y0
   154 00000008 ????????            <1> 		.x1				resd	1				; 右下座標：X1
   155 0000000C ????????            <1> 		.y1				resd	1				; 右下座標：Y1
   156                              <1> 
   157 00000010 ????????            <1> 		.n				resd	1				; 変数：n
   158 00000014 ????????            <1> 		.d				resd	1				; 変数：d
   159                              <1> 
   160 00000018 ????????            <1> 		.color_x		resd	1				; 描画色：X軸
   161 0000001C ????????            <1> 		.color_y		resd	1				; 描画色：Y軸
   162 00000020 ????????            <1> 		.color_z		resd	1				; 描画色：枠
   163 00000024 ????????            <1> 		.color_s		resd	1				; 描画色：文字
   164 00000028 ????????            <1> 		.color_f		resd	1				; 描画色：グラフ描画色
   165 0000002C ????????            <1> 		.color_b		resd	1				; 描画色：グラフ消去色
   166                              <1> 
   167 00000030 <res 10h>           <1> 		.title			resb	16				; タイトル
   168                              <1> endstruc
   169                              <1> 
    12                                  
    13                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    14                                  
    15                                  [BITS 32]
    16                                  ;************************************************************************
    17                                  ;	エントリポイント
    18                                  ;************************************************************************
    19                                  kernel:
    20                                  		;---------------------------------------
    21                                  		; フォントアドレスを取得
    22                                  		;---------------------------------------
    23 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    24 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    25 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    26 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    27 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    28 00000011 A3[7C010000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    29                                  
    30                                  		;---------------------------------------
    31                                  		; TSSディスクリプタの設定
    32                                  		;---------------------------------------
    33                                  		set_desc	GDT.tss_0, TSS_0			; // タスク0用TSSの設定
    81 00000016 50                  <1>  push eax
    82 00000017 57                  <1>  push edi
    83                              <1> 
    84 00000018 BF[74020000]        <1>  mov edi, %1
    85 0000001D B8[84010000]        <1>  mov eax, %2
    86                              <1> 
    87                              <1>  %if 3 == %0
    88                              <1>  mov [edi + 0], %3
    89                              <1>  %endif
    90                              <1> 
    91 00000022 66894702            <1>  mov [edi + 2], ax
    92 00000026 C1E810              <1>  shr eax, 16
    93 00000029 884704              <1>  mov [edi + 4], al
    94 0000002C 886707              <1>  mov [edi + 7], ah
    95                              <1> 
    96 0000002F 5F                  <1>  pop edi
    97 00000030 58                  <1>  pop eax
    34                                  		set_desc	GDT.tss_1, TSS_1			; // タスク1用TSSの設定
    81 00000031 50                  <1>  push eax
    82 00000032 57                  <1>  push edi
    83                              <1> 
    84 00000033 BF[7C020000]        <1>  mov edi, %1
    85 00000038 B8[EC010000]        <1>  mov eax, %2
    86                              <1> 
    87                              <1>  %if 3 == %0
    88                              <1>  mov [edi + 0], %3
    89                              <1>  %endif
    90                              <1> 
    91 0000003D 66894702            <1>  mov [edi + 2], ax
    92 00000041 C1E810              <1>  shr eax, 16
    93 00000044 884704              <1>  mov [edi + 4], al
    94 00000047 886707              <1>  mov [edi + 7], ah
    95                              <1> 
    96 0000004A 5F                  <1>  pop edi
    97 0000004B 58                  <1>  pop eax
    35                                  
    36                                  		;---------------------------------------
    37                                  		; LDTの設定
    38                                  		;---------------------------------------
    39                                  		set_desc	GDT.ldt, LDT, word LDT_LIMIT
    81 0000004C 50                  <1>  push eax
    82 0000004D 57                  <1>  push edi
    83                              <1> 
    84 0000004E BF[6C020000]        <1>  mov edi, %1
    85 00000053 B8[8A020000]        <1>  mov eax, %2
    86                              <1> 
    87                              <1>  %if 3 == %0
    88 00000058 66C7072700          <1>  mov [edi + 0], %3
    89                              <1>  %endif
    90                              <1> 
    91 0000005D 66894702            <1>  mov [edi + 2], ax
    92 00000061 C1E810              <1>  shr eax, 16
    93 00000064 884704              <1>  mov [edi + 4], al
    94 00000067 886707              <1>  mov [edi + 7], ah
    95                              <1> 
    96 0000006A 5F                  <1>  pop edi
    97 0000006B 58                  <1>  pop eax
    40                                  
    41                                  		;---------------------------------------
    42                                  		; GDTをロード（再設定）
    43                                  		;---------------------------------------
    44 0000006C 0F0115[84020000]        		lgdt	[GDTR]							; // グローバルディスクリプタテーブルをロード
    45                                  
    46                                  		;---------------------------------------
    47                                  		; スタックの設定
    48                                  		;---------------------------------------
    49 00000073 BC00341000              		mov		esp, SP_TASK_0					; // タスク0用のスタックを設定
    50                                  
    51                                  		;---------------------------------------
    52                                  		; タスクレジスタの初期化
    53                                  		;---------------------------------------
    54 00000078 66B82000                		mov		ax, SS_TASK_0
    55 0000007C 0F00D8                  		ltr		ax								; // タスクレジスタの設定
    56                                  
    57                                  		;---------------------------------------
    58                                  		; 初期化
    59                                  		;---------------------------------------
    60 0000007F E85E080000              		cdecl	init_int						; // 割り込みベクタの初期化
    61 00000084 E8DF090000              		cdecl	init_pic						; // 割り込みコントローラの初期化
    62                                  
    63 00000089 5057BF00001000B8-       		set_vect	0x00, int_zero_div			; // 割り込み処理の登録：0除算
    63 00000091 [4A0A0000]668907C1-
    63 00000099 E810668947065F58   
    64 000000A1 5057BF00011000B8-       		set_vect	0x20, int_timer				; // 割り込み処理の登録：タイマー
    64 000000A9 [B2020000]668907C1-
    64 000000B1 E810668947065F58   
    65 000000B9 5057BF08011000B8-       		set_vect	0x21, int_keyboard			; // 割り込み処理の登録：KBC
    65 000000C1 [D20A0000]668907C1-
    65 000000C9 E810668947065F58   
    66 000000D1 5057BF40011000B8-       		set_vect	0x28, int_rtc				; // 割り込み処理の登録：RTC
    66 000000D9 [A70A0000]668907C1-
    66 000000E1 E810668947065F58   
    67                                  
    68                                  		;---------------------------------------
    69                                  		; デバイスの割り込み許可
    70                                  		;---------------------------------------
    71 000000E9 6A10E8A30900006683-     		cdecl	rtc_int_en, 0x10				; rtc_int_en(UIE); // 更新サイクル終了割り込み許可
    71 000000F2 C404               
    72 000000F4 E8CB0A0000              		cdecl	int_en_timer0					; // タイマー（カウンタ0）割り込み許可
    73                                  
    74                                  		;---------------------------------------
    75                                  		; IMR(割り込みマスクレジスタ)の設定
    76                                  		;---------------------------------------
    77                                  		outp	0x21, 0b_1111_1000				; // 割り込み有効：スレーブPIC/KBC/タイマー
    69 000000F9 B0F8                <1>  mov al, %2
    70 000000FB E621                <1>  out %1, al
    78                                  		outp	0xA1, 0b_1111_1110				; // 割り込み有効：RTC
    69 000000FD B0FE                <1>  mov al, %2
    70 000000FF E6A1                <1>  out %1, al
    79                                  
    80                                  		;---------------------------------------
    81                                  		; CPUの割り込み許可
    82                                  		;---------------------------------------
    83 00000101 FB                      		sti										; // 割り込み許可
    84                                  
    85                                  		;---------------------------------------
    86                                  		; フォントの一覧表示
    87                                  		;---------------------------------------
    88 00000102 6A0D6A3FE88D030000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
    88 0000010B 6683C408           
    89 0000010F 6A046A3FE80E040000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
    89 00000118 6683C408           
    90                                  
    91                                  		;---------------------------------------
    92                                  		; 文字列の表示
    93                                  		;---------------------------------------
    94 0000011C 68[64010000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
    94 00000124 00006A0E6A19E8AE03-
    94 0000012D 00006683C410       
    95                                  
    96                                  .10L:											; while (;;)
    97                                  												; {
    98                                  		;---------------------------------------
    99                                  		; 回転する棒を表示
   100                                  		;---------------------------------------
   101 00000133 E89B0A0000              		cdecl	draw_rotation_bar				;   // 回転する棒を表示
   102                                  
   103                                  		;---------------------------------------
   104                                  		; キーコードの取得
   105                                  		;---------------------------------------
   106 00000138 68[78010000]68-         		cdecl	ring_rd, _KEY_BUFF, .int_key	;   EAX = ring_rd(buff, &int_key);
   106 0000013E [F80A0000]E8C90900-
   106 00000146 006683C408         
   107 0000014B 83F800                  		cmp		eax, 0							;   if (EAX == 0)
   108 0000014E 7412                    		je		.10E							;   {
   109                                  												;   
   110                                  		;---------------------------------------
   111                                  		; キーコードの表示
   112                                  		;---------------------------------------
   113 00000150 68[F80A0000]6A1D6A-     		cdecl	draw_key, 2, 29, _KEY_BUFF		;     ring_show(key_buff); // 全要素を表示
   113 00000158 02E8130A00006683C4-
   113 00000161 0C                 
   114                                  .10E:											;   }
   115 00000162 EBCF                    		jmp		.10L							; }
   116                                  
   117 00000164 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
   117 0000016D 65726E656C212000   
   118                                  
   119 00000175 00<rep 3h>              ALIGN 4, db 0
   120 00000178 00000000                .int_key:	dd	0
   121                                  
   122                                  ALIGN 4, db 0
   123 0000017C 00000000                FONT_ADR:	dd	0
   124 00000180 00000000                RTC_TIME:	dd	0
   125                                  
   126                                  ;************************************************************************
   127                                  ;	タスク
   128                                  ;************************************************************************
   129                                  %include	"descriptor.s"
   130                              <1> ;************************************************************************
   131                              <1> ;	TSS
   132                              <1> ;************************************************************************
   133                              <1> TSS_0:
   134 00000184 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   135 00000188 00321000            <1> .esp0:			dd	SP_TASK_0 - 512				;*  4:ESP0
   136 0000018C 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   137 00000190 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   138 00000194 00000000            <1> .ss1:			dd	0							;* 16:
   139 00000198 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   140 0000019C 00000000            <1> .ss2:			dd	0							;* 24:
   141 000001A0 00000000            <1> .cr3:			dd	0							;  28:CR3(PDBR)
   142 000001A4 00000000            <1> .eip:			dd	0							;  32:EIP
   143 000001A8 00000000            <1> .eflags:		dd	0							;  36:EFLAGS
   144 000001AC 00000000            <1> .eax:			dd	0							;  40:EAX
   145 000001B0 00000000            <1> .ecx:			dd	0							;  44:ECX
   146 000001B4 00000000            <1> .edx:			dd	0							;  48:EDX
   147 000001B8 00000000            <1> .ebx:			dd	0							;  52:EBX
   148 000001BC 00000000            <1> .esp:			dd	0							;  56:ESP
   149 000001C0 00000000            <1> .ebp:			dd	0							;  60:EBP
   150 000001C4 00000000            <1> .esi:			dd	0							;  64:ESI
   151 000001C8 00000000            <1> .edi:			dd	0							;  68:EDI
   152 000001CC 00000000            <1> .es:			dd	0							;  72:ES
   153 000001D0 00000000            <1> .cs:			dd	0							;  76:CS
   154 000001D4 00000000            <1> .ss:			dd	0							;  80:SS
   155 000001D8 00000000            <1> .ds:			dd	0							;  84:DS
   156 000001DC 00000000            <1> .fs:			dd	0							;  88:FS
   157 000001E0 00000000            <1> .gs:			dd	0							;  92:GS
   158 000001E4 00000000            <1> .ldt:			dd	0							;* 96:LDTセグメントセレクタ
   159 000001E8 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   160                              <1> 
   161                              <1> TSS_1:
   162 000001EC 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   163 000001F0 00361000            <1> .esp0:			dd	SP_TASK_1 - 512				;*  4:ESP0
   164 000001F4 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   165 000001F8 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   166 000001FC 00000000            <1> .ss1:			dd	0							;* 16:
   167 00000200 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   168 00000204 00000000            <1> .ss2:			dd	0							;* 24:
   169 00000208 00000000            <1> .cr3:			dd	0							;  28:CR3(PDBR)
   170 0000020C [EC020000]          <1> .eip:			dd	task_1						;  32:EIP
   171 00000210 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   172 00000214 00000000            <1> .eax:			dd	0							;  40:EAX
   173 00000218 00000000            <1> .ecx:			dd	0							;  44:ECX
   174 0000021C 00000000            <1> .edx:			dd	0							;  48:EDX
   175 00000220 00000000            <1> .ebx:			dd	0							;  52:EBX
   176 00000224 00381000            <1> .esp:			dd	SP_TASK_1					;  56:ESP
   177 00000228 00000000            <1> .ebp:			dd	0							;  60:EBP
   178 0000022C 00000000            <1> .esi:			dd	0							;  64:ESI
   179 00000230 00000000            <1> .edi:			dd	0							;  68:EDI
   180 00000234 24000000            <1> .es:			dd	DS_TASK_1					;  72:ES
   181 00000238 1C000000            <1> .cs:			dd	CS_TASK_1					;  76:CS
   182 0000023C 24000000            <1> .ss:			dd	DS_TASK_1					;  80:SS
   183 00000240 24000000            <1> .ds:			dd	DS_TASK_1					;  84:DS
   184 00000244 24000000            <1> .fs:			dd	DS_TASK_1					;  88:FS
   185 00000248 24000000            <1> .gs:			dd	DS_TASK_1					;  92:GS
   186 0000024C 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   187 00000250 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   188                              <1> 
   189                              <1> 
   190                              <1> ;************************************************************************
   191                              <1> ;	グローバルディスクリプタテーブル
   192                              <1> ;************************************************************************
   193 00000254 0000000000000000    <1> GDT:			dq	0x0000000000000000			; NULL
   194 0000025C FFFF0000009ACF00    <1> .cs_kernel:		dq	0x00CF9A000000FFFF			; CODE 4G
   195 00000264 FFFF00000092CF00    <1> .ds_kernel:		dq	0x00CF92000000FFFF			; DATA 4G
   196 0000026C 0000000000820000    <1> .ldt			dq	0x0000820000000000			; LDTディスクリプタ
   197 00000274 6700000000890000    <1> .tss_0:			dq	0x0000890000000067			; TSSディスクリプタ
   198 0000027C 6700000000890000    <1> .tss_1:			dq	0x0000890000000067			; TSSディスクリプタ
   199                              <1> .end:
   200                              <1> 
   201                              <1> CS_KERNEL		equ	.cs_kernel	- GDT
   202                              <1> DS_KERNEL		equ	.ds_kernel	- GDT
   203                              <1> SS_LDT			equ	.ldt		- GDT
   204                              <1> SS_TASK_0		equ	.tss_0		- GDT
   205                              <1> SS_TASK_1		equ	.tss_1		- GDT
   206                              <1> 
   207 00000284 2F00                <1> GDTR:	dw 		GDT.end - GDT - 1
   208 00000286 [54020000]          <1> 		dd 		GDT
   209                              <1> 
   210                              <1> 
   211                              <1> ;************************************************************************
   212                              <1> ;	ローカルディスクリプタテーブル
   213                              <1> ;************************************************************************
   214 0000028A 0000000000000000    <1> LDT:			dq	0x0000000000000000			; NULL
   215 00000292 FFFF0000009ACF00    <1> .cs_task_0:		dq	0x00CF9A000000FFFF			; CODE 4G
   216 0000029A FFFF00000092CF00    <1> .ds_task_0:		dq	0x00CF92000000FFFF			; DATA 4G
   217 000002A2 FFFF0000009ACF00    <1> .cs_task_1:		dq	0x00CF9A000000FFFF			; CODE 4G
   218 000002AA FFFF00000092CF00    <1> .ds_task_1:		dq	0x00CF92000000FFFF			; DATA 4G
   219                              <1> .end:
   220                              <1> 
   221                              <1> CS_TASK_0		equ	(.cs_task_0 - LDT) | 4		; タスク0用CSセレクタ
   222                              <1> DS_TASK_0		equ	(.ds_task_0 - LDT) | 4		; タスク0用DSセレクタ
   223                              <1> CS_TASK_1		equ	(.cs_task_1 - LDT) | 4		; タスク1用CSセレクタ
   224                              <1> DS_TASK_1		equ	(.ds_task_1 - LDT) | 4		; タスク1用DSセレクタ
   225                              <1> 
   226                              <1> LDT_LIMIT		equ	.end		- LDT - 1
   227                              <1> 
   228                              <1> 
   130                                  %include	"modules/int_timer.s"
   131                              <1> ;************************************************************************
   132                              <1> ;	例外:タイマー
   133                              <1> ;************************************************************************
   134                              <1> int_timer:
   135                              <1> 		;---------------------------------------
   136                              <1> 		; 【レジスタの保存】
   137                              <1> 		;---------------------------------------
   138 000002B2 60                  <1> 		pusha
   139 000002B3 1E                  <1> 		push	ds
   140 000002B4 06                  <1> 		push	es
   141                              <1> 
   142                              <1> 		;---------------------------------------
   143                              <1> 		; データ用セグメントの設定
   144                              <1> 		;---------------------------------------
   145 000002B5 66B81000            <1> 		mov		ax, 0x0010						; 
   146 000002B9 8ED8                <1> 		mov		ds, ax							; 
   147 000002BB 8EC0                <1> 		mov		es, ax							; 
   148                              <1> 
   149                              <1> 		;---------------------------------------
   150                              <1> 		; TICK
   151                              <1> 		;---------------------------------------
   152 000002BD FF05[E8020000]      <1> 		inc		dword [TIMER_COUNT]				; TIMER_COUNT++; // 割り込み回数の更新
   153                              <1> 
   154                              <1> 		;---------------------------------------
   155                              <1> 		; 割り込みフラグをクリア(EOI)
   156                              <1> 		;---------------------------------------
   157                              <1> 		outp	0x20, 0x20						; // マスタPIC:EOIコマンド
    69 000002C3 B020                <2>  mov al, %2
    70 000002C5 E620                <2>  out %1, al
   158                              <1> 
   159                              <1> 		;---------------------------------------
   160                              <1> 		; タスクの切り替え
   161                              <1> 		;---------------------------------------
   162 000002C7 660F00C8            <1> 		str		ax								; AX = TR; // 現在のタスクレジスタ
   163 000002CB 6683F820            <1> 		cmp		ax, SS_TASK_0					; case (AX)
   164 000002CF 7409                <1> 		je		.11L							; {
   165                              <1> 												;   default:
   166 000002D1 EA000000002000      <1> 		jmp		SS_TASK_0:0						;     // タスク0に切り替え
   167 000002D8 EB09                <1> 		jmp		.10E							;     break;
   168                              <1> 												;     
   169                              <1> .11L:											;   case SS_TASK_0:
   170 000002DA EA000000002800      <1> 		jmp		SS_TASK_1:0						;     // タスク1に切り替え
   171 000002E1 EB00                <1> 		jmp		.10E							;     break;
   172                              <1> .10E:											; }
   173                              <1> 
   174                              <1> 		;---------------------------------------
   175                              <1> 		; 【レジスタの復帰】
   176                              <1> 		;---------------------------------------
   177 000002E3 07                  <1> 		pop		es								; 
   178 000002E4 1F                  <1> 		pop		ds								; 
   179 000002E5 61                  <1> 		popa
   180                              <1> 
   181 000002E6 CF                  <1> 		iret
   182                              <1> 
   183 000002E7 00                  <1> ALIGN 4, db 0
   184 000002E8 00000000            <1> TIMER_COUNT:	dd	0
   185                              <1> 
   131                                  %include	"tasks/task_1.s"
   132                              <1> ;************************************************************************
   133                              <1> ;	TASK-1
   134                              <1> ;************************************************************************
   135                              <1> task_1:
   136                              <1> 		;---------------------------------------
   137                              <1> 		; 文字列の表示
   138                              <1> 		;---------------------------------------
   139 000002EC 68[1A030000]6A076A- <1> 		cdecl	draw_str, 63, 0, 0x07, .s0		; draw_str();
   139 000002F4 006A3FE8E101000066- <1>
   139 000002FD 83C410              <1>
   140                              <1> 
   141                              <1> .10L:											; while (;;)
   142                              <1> 												; {
   143                              <1> 		;---------------------------------------
   144                              <1> 		; 時刻の表示
   145                              <1> 		;---------------------------------------
   146 00000300 A1[80010000]        <1> 		mov		eax, [RTC_TIME]					;   // 時刻の取得
   147 00000305 5068000700006A006A- <1> 		cdecl	draw_time, 72, 0, 0x0700, eax	;   // 時刻の表示
   147 0000030E 48E8310500006683C4- <1>
   147 00000317 10                  <1>
   148                              <1> 
   149 00000318 EBE6                <1> 		jmp		.10L							; }
   150                              <1> 
   151                              <1> 		;---------------------------------------
   152                              <1> 		; データ
   153                              <1> 		;---------------------------------------
   154 0000031A 5461736B2D3100      <1> .s0		db	"Task-1", 0
   155                              <1> 
   132                                  
   133                                  ;************************************************************************
   134                                  ;	モジュール
   135                                  ;************************************************************************
   136                                  %include	"../modules/protect/vga.s"
   137                              <1> ;************************************************************************
   138                              <1> ;	読み込みプレーンの選択
   139                              <1> ;========================================================================
   140                              <1> ;■書式		: void vga_set_read_plane(plane);
   141                              <1> ;
   142                              <1> ;■引数
   143                              <1> ;	plane	: 読み込みプレーン
   144                              <1> ;
   145                              <1> ;■戻り値	: 無し
   146                              <1> ;************************************************************************
   147                              <1> vga_set_read_plane:
   148                              <1> 		;---------------------------------------
   149                              <1> 		; 【スタックフレームの構築】
   150                              <1> 		;---------------------------------------
   151                              <1> 												; EBP+ 8| プレーン（インデックス）
   152                              <1> 												; ------+----------------
   153 00000321 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   154 00000322 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   155                              <1> 												; ------+----------------
   156                              <1> 
   157                              <1> 		;---------------------------------------
   158                              <1> 		; 【レジスタの保存】
   159                              <1> 		;---------------------------------------
   160 00000324 50                  <1> 		push	eax
   161 00000325 52                  <1> 		push	edx
   162                              <1> 
   163                              <1> 		;---------------------------------------
   164                              <1> 		; 読み込みプレーンの選択
   165                              <1> 		;---------------------------------------
   166 00000326 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
   167 00000329 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
   168 0000032C B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
   169 0000032E 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
   170 00000332 66EF                <1> 		out		dx, ax							; // ポート出力
   171                              <1> 
   172                              <1> 		;---------------------------------------
   173                              <1> 		; 【レジスタの復帰】
   174                              <1> 		;---------------------------------------
   175 00000334 5A                  <1> 		pop		edx
   176 00000335 58                  <1> 		pop		eax
   177                              <1> 
   178                              <1> 		;---------------------------------------
   179                              <1> 		; 【スタックフレームの破棄】
   180                              <1> 		;---------------------------------------
   181 00000336 89EC                <1> 		mov		esp, ebp
   182 00000338 5D                  <1> 		pop		ebp
   183                              <1> 
   184 00000339 C3                  <1> 		ret
   185                              <1> 
   186                              <1> 
   187                              <1> ;************************************************************************
   188                              <1> ;	書き込みプレーンを選択
   189                              <1> ;========================================================================
   190                              <1> ;■書式		: void vga_set_write_plane(plane);
   191                              <1> ;
   192                              <1> ;■引数
   193                              <1> ;	plane	: 書き込みプレーン
   194                              <1> ;
   195                              <1> ;■戻り値	: 無し
   196                              <1> ;************************************************************************
   197                              <1> vga_set_write_plane:
   198                              <1> 		;---------------------------------------
   199                              <1> 		; 【スタックフレームの構築】
   200                              <1> 		;---------------------------------------
   201                              <1> 												; EBP+ 8| プレーン（ビット指定）
   202                              <1> 												; ------+----------------
   203 0000033A 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   204 0000033B 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   205                              <1> 												; ------+----------------
   206                              <1> 
   207                              <1> 		;---------------------------------------
   208                              <1> 		; 【レジスタの保存】
   209                              <1> 		;---------------------------------------
   210 0000033D 50                  <1> 		push	eax
   211 0000033E 52                  <1> 		push	edx
   212                              <1> 
   213                              <1> 		;---------------------------------------
   214                              <1> 		; 書き込みプレーンの選択
   215                              <1> 		;---------------------------------------
   216 0000033F 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
   217 00000342 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
   218 00000345 B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
   219 00000347 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
   220 0000034B 66EF                <1> 		out		dx, ax							; // ポート出力
   221                              <1> 
   222                              <1> 		;---------------------------------------
   223                              <1> 		; 【レジスタの復帰】
   224                              <1> 		;---------------------------------------
   225 0000034D 5A                  <1> 		pop		edx
   226 0000034E 58                  <1> 		pop		eax
   227                              <1> 
   228                              <1> 		;---------------------------------------
   229                              <1> 		; 【スタックフレームの破棄】
   230                              <1> 		;---------------------------------------
   231 0000034F 89EC                <1> 		mov		esp, ebp
   232 00000351 5D                  <1> 		pop		ebp
   233                              <1> 
   234 00000352 C3                  <1> 		ret
   235                              <1> 
   236                              <1> 
   237                              <1> ;************************************************************************
   238                              <1> ;	フォントの書き込み
   239                              <1> ;========================================================================
   240                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   241                              <1> ;
   242                              <1> ;■引数
   243                              <1> ;	font	: FONTアドレス
   244                              <1> ;	vram	: VRAMアドレス
   245                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   246                              <1> ;	color	: 描画色
   247                              <1> ;
   248                              <1> ;■戻り値	: 無し
   249                              <1> ;************************************************************************
   250                              <1> vram_font_copy:
   251                              <1> 		;---------------------------------------
   252                              <1> 		; 【スタックフレームの構築】
   253                              <1> 		;---------------------------------------
   254                              <1> 												; EBP+20| 色（背景/前景色）
   255                              <1> 												; EBP+16| プレーン（ビット指定）
   256                              <1> 												; EBP+12| VRAMアドレス
   257                              <1> 												; EBP+ 8| FONTアドレス
   258                              <1> 												; ------+----------------
   259 00000353 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   260 00000354 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   261                              <1> 												; ------+----------------
   262                              <1> 
   263                              <1> 		;---------------------------------------
   264                              <1> 		; 【レジスタの保存】
   265                              <1> 		;---------------------------------------
   266 00000356 50                  <1> 		push	eax
   267 00000357 53                  <1> 		push	ebx
   268 00000358 51                  <1> 		push	ecx
   269 00000359 52                  <1> 		push	edx
   270 0000035A 56                  <1> 		push	esi
   271 0000035B 57                  <1> 		push	edi
   272                              <1> 
   273                              <1> 		;---------------------------------------
   274                              <1> 		; 【処理の開始】
   275                              <1> 		;---------------------------------------
   276 0000035C 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   277 0000035F 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   278 00000362 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   279 00000366 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   280                              <1> 
   281 0000036A 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   282 0000036C 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   283 0000036F FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   284                              <1> 
   285 00000371 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   286 00000373 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   287 00000376 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   288                              <1> 
   289                              <1> 		;---------------------------------------
   290                              <1> 		; 16ドットフォントのコピー
   291                              <1> 		;---------------------------------------
   292 00000378 FC                  <1> 		cld										; DF  = 0; // アドレス加算
   293                              <1> 
   294 00000379 B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   295                              <1> .10L:											; do
   296                              <1> 												; {
   297                              <1> 		;---------------------------------------
   298                              <1> 		; フォントマスクの作成
   299                              <1> 		;---------------------------------------
   300 0000037E AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   301 0000037F 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   302 00000381 F6D4                <1> 		not		ah								;   
   303                              <1> 
   304                              <1> 		;---------------------------------------
   305                              <1> 		; 前景色
   306                              <1> 		;---------------------------------------
   307 00000383 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   308                              <1> 
   309                              <1> 		;---------------------------------------
   310                              <1> 		; 背景色
   311                              <1> 		;---------------------------------------
   312 00000385 F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   313 0000038B 7404                <1> 		jz		.11F							;   {
   314 0000038D 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   315 0000038F EB02                <1> 		jmp		.11E							;   }
   316                              <1> .11F:											;   else
   317                              <1> 												;   {
   318 00000391 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   319                              <1> .11E:											;   }
   320                              <1> 
   321                              <1> 		;---------------------------------------
   322                              <1> 		; 前景色と背景色を合成
   323                              <1> 		;---------------------------------------
   324 00000393 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   325                              <1> 
   326                              <1> 		;---------------------------------------
   327                              <1> 		; 新しい値を出力
   328                              <1> 		;---------------------------------------
   329 00000395 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   330                              <1> 
   331 00000397 83C750              <1> 		add		edi, 80							;   EDI += 80;
   332 0000039A E2E2                <1> 		loop	.10L							; } while (--ECX);
   333                              <1> .10E:											; 
   334                              <1> 
   335                              <1> 		;---------------------------------------
   336                              <1> 		; 【レジスタの復帰】
   337                              <1> 		;---------------------------------------
   338 0000039C 5F                  <1> 		pop		edi
   339 0000039D 5E                  <1> 		pop		esi
   340 0000039E 5A                  <1> 		pop		edx
   341 0000039F 59                  <1> 		pop		ecx
   342 000003A0 5B                  <1> 		pop		ebx
   343 000003A1 58                  <1> 		pop		eax
   344                              <1> 
   345                              <1> 		;---------------------------------------
   346                              <1> 		; 【スタックフレームの破棄】
   347                              <1> 		;---------------------------------------
   348 000003A2 89EC                <1> 		mov		esp, ebp
   349 000003A4 5D                  <1> 		pop		ebp
   350                              <1> 
   351 000003A5 C3                  <1> 		ret
   352                              <1> 
   353                              <1> 
   354                              <1> ;************************************************************************
   355                              <1> ;	ビットパターンの書き込み
   356                              <1> ;========================================================================
   357                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   358                              <1> ;
   359                              <1> ;■引数
   360                              <1> ;	bit		: 出力ビットパターン
   361                              <1> ;	vram	: VRAMアドレス
   362                              <1> ;	flag	: 1:セット, 0:クリア
   363                              <1> ;
   364                              <1> ;■戻り値	: 無し
   365                              <1> ;************************************************************************
   366                              <1> vram_bit_copy:
   367                              <1> 		;---------------------------------------
   368                              <1> 		; 【スタックフレームの構築】
   369                              <1> 		;---------------------------------------
   370                              <1> 												; EBP+20| 色（背景/前景色）
   371                              <1> 												; EBP+16| プレーン（ビット指定）
   372                              <1> 												; EBP+12| VRAMアドレス
   373                              <1> 												; EBP+ 8| 出力ビットパターン
   374                              <1> 												; ------+----------------
   375 000003A6 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   376 000003A7 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   377                              <1> 												; ------+----------------
   378                              <1> 
   379                              <1> 		;---------------------------------------
   380                              <1> 		; 【レジスタの保存】
   381                              <1> 		;---------------------------------------
   382 000003A9 50                  <1> 		push	eax
   383 000003AA 53                  <1> 		push	ebx
   384 000003AB 57                  <1> 		push	edi
   385                              <1> 
   386                              <1> 		;---------------------------------------
   387                              <1> 		; 【処理の開始】
   388                              <1> 		;---------------------------------------
   389 000003AC 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   390 000003AF 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   391 000003B3 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   392                              <1> 
   393 000003B7 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   394 000003B9 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   395 000003BC FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   396                              <1> 
   397                              <1> 		;---------------------------------------
   398                              <1> 		; マスクデータの作成
   399                              <1> 		;---------------------------------------
   400 000003BE 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   401 000003C1 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   402 000003C3 F6D4                <1> 		not		ah								; 
   403                              <1> 
   404                              <1> 		;---------------------------------------
   405                              <1> 		; 現在値の出力を取得
   406                              <1> 		;---------------------------------------
   407 000003C5 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   408 000003C7 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   409 000003C9 08E0                <1> 		or		al, ah							; AL |= AH;
   410                              <1> 
   411                              <1> 		;---------------------------------------
   412                              <1> 		; 新しい値を出力
   413                              <1> 		;---------------------------------------
   414 000003CB 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   415                              <1> 
   416                              <1> 		;---------------------------------------
   417                              <1> 		; 【レジスタの復帰】
   418                              <1> 		;---------------------------------------
   419 000003CD 5F                  <1> 		pop		edi
   420 000003CE 5B                  <1> 		pop		ebx
   421 000003CF 58                  <1> 		pop		eax
   422                              <1> 
   423                              <1> 		;---------------------------------------
   424                              <1> 		; 【スタックフレームの破棄】
   425                              <1> 		;---------------------------------------
   426 000003D0 89EC                <1> 		mov		esp, ebp
   427 000003D2 5D                  <1> 		pop		ebp
   428                              <1> 
   429 000003D3 C3                  <1> 		ret
   137                                  %include	"../modules/protect/draw_char.s"
   138                              <1> ;************************************************************************
   139                              <1> ;	文字の表示
   140                              <1> ;------------------------------------------------------------------------
   141                              <1> ;	グラフィックスモードでテキストを表示
   142                              <1> ;========================================================================
   143                              <1> ;■書式		: void draw_char(col, row, color, ch);
   144                              <1> ;
   145                              <1> ;■引数
   146                              <1> ;	col		: 列（0～79）
   147                              <1> ;	row		: 行（0～29）
   148                              <1> ;	color	: 描画色
   149                              <1> ;	ch		: 文字
   150                              <1> ;
   151                              <1> ;■戻り値	: 無し
   152                              <1> ;************************************************************************
   153                              <1> draw_char:
   154                              <1> 		;---------------------------------------
   155                              <1> 		; 【スタックフレームの構築】
   156                              <1> 		;---------------------------------------
   157                              <1> 												; ------|--------
   158                              <1> 												; EBP+20| 文字
   159                              <1> 												; EBP+16| 色
   160                              <1> 												; EBP+12| Y（行）
   161                              <1> 												; EBP+ 8| X（列）
   162                              <1> 												; ------+----------------
   163 000003D4 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   164 000003D5 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   165                              <1> 												; ------+----------------
   166                              <1> 
   167                              <1> 		;---------------------------------------
   168                              <1> 		; 【レジスタの保存】
   169                              <1> 		;---------------------------------------
   170 000003D7 50                  <1> 		push	eax
   171 000003D8 53                  <1> 		push	ebx
   172 000003D9 51                  <1> 		push	ecx
   173 000003DA 52                  <1> 		push	edx
   174 000003DB 56                  <1> 		push	esi
   175 000003DC 57                  <1> 		push	edi
   176                              <1> 
   177                              <1> 		;---------------------------------------
   178                              <1> 		; テストアンドセット
   179                              <1> 		;---------------------------------------
   180                              <1> %ifdef	USE_TEST_AND_SET
   181                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   182                              <1> %endif
   183                              <1> 
   184                              <1> 		;---------------------------------------
   185                              <1> 		; コピー元フォントアドレスを設定
   186                              <1> 		;---------------------------------------
   187 000003DD 0FB67514            <1> 		movzx	esi, byte [ebp +20]				; CL  = 文字コード;
   188 000003E1 C1E604              <1> 		shl		esi, 4							; CL *= 16; // 1文字16バイト
   189 000003E4 0335[7C010000]      <1> 		add		esi, [FONT_ADR]					; ESI = フォントアドレス;
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; コピー先アドレスを取得
   193                              <1> 		; Adr = 0xA0000 + (640 / 8 * 16) * y + x
   194                              <1> 		;---------------------------------------
   195 000003EA 8B7D0C              <1> 		mov		edi, [ebp +12]					; Y（行）
   196 000003ED C1E708              <1> 		shl		edi, 8							; EDI = Y * 256;
   197 000003F0 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA0000]	; EDI = Y *   4 + Y;
   198 000003F7 037D08              <1> 		add		edi, [ebp + 8]					; X（列）
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 1文字分のフォントを出力
   202                              <1> 		;---------------------------------------
   203 000003FA 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
   204                              <1> 
   205 000003FE 6A03E81CFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
   205 00000407 C404                <1>
   206 00000409 6A08E82AFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
   206 00000412 C404                <1>
   207 00000414 536A085756E835FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
   207 0000041D FF6683C410          <1>
   208                              <1> 
   209 00000422 6A02E8F8FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
   209 0000042B C404                <1>
   210 0000042D 6A04E806FFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
   210 00000436 C404                <1>
   211 00000438 536A045756E811FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
   211 00000441 FF6683C410          <1>
   212                              <1> 
   213 00000446 6A01E8D4FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
   213 0000044F C404                <1>
   214 00000451 6A02E8E2FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
   214 0000045A C404                <1>
   215 0000045C 536A025756E8EDFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
   215 00000465 FF6683C410          <1>
   216                              <1> 
   217 0000046A 6A00E8B0FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
   217 00000473 C404                <1>
   218 00000475 6A01E8BEFEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
   218 0000047E C404                <1>
   219 00000480 536A015756E8C9FEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
   219 00000489 FF6683C410          <1>
   220                              <1> 
   221                              <1> %ifdef	USE_TEST_AND_SET
   222                              <1> 		;---------------------------------------
   223                              <1> 		; テストアンドセット
   224                              <1> 		;---------------------------------------
   225                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   226                              <1> %endif
   227                              <1> 
   228                              <1> 		;---------------------------------------
   229                              <1> 		; 【レジスタの復帰】
   230                              <1> 		;---------------------------------------
   231 0000048E 5F                  <1> 		pop		edi
   232 0000048F 5E                  <1> 		pop		esi
   233 00000490 5A                  <1> 		pop		edx
   234 00000491 59                  <1> 		pop		ecx
   235 00000492 5B                  <1> 		pop		ebx
   236 00000493 58                  <1> 		pop		eax
   237                              <1> 
   238                              <1> 		;---------------------------------------
   239                              <1> 		; 【スタックフレームの破棄】
   240                              <1> 		;---------------------------------------
   241 00000494 89EC                <1> 		mov		esp, ebp
   242 00000496 5D                  <1> 		pop		ebp
   243                              <1> 
   244 00000497 C3                  <1> 		ret
   245                              <1> 
   246                              <1> %ifdef USE_TEST_AND_SET
   247                              <1> ALIGN 4, db 0
   248                              <1> IN_USE:	dd	0
   249                              <1> %endif
   250                              <1> 
   138                                  %include	"../modules/protect/draw_font.s"
   139                              <1> ;************************************************************************
   140                              <1> ;	フォント一覧を表示
   141                              <1> ;========================================================================
   142                              <1> ;■書式		: void draw_font(col, row);
   143                              <1> ;
   144                              <1> ;■引数
   145                              <1> ;	col		: 列
   146                              <1> ;	row		: 行
   147                              <1> ;
   148                              <1> ;■戻り値	: 無し
   149                              <1> ;************************************************************************
   150                              <1> draw_font:
   151                              <1> 		;---------------------------------------
   152                              <1> 		; 【スタックフレームの構築】
   153                              <1> 		;---------------------------------------
   154                              <1> 												; ------|--------
   155                              <1> 												; EBP+12| Y（行）
   156                              <1> 												; EBP+ 8| X（列）
   157                              <1> 												; ---------------
   158 00000498 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   159 00000499 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   160                              <1> 												; ---------------
   161                              <1> 
   162                              <1> 		;---------------------------------------
   163                              <1> 		; 【レジスタの保存】
   164                              <1> 		;---------------------------------------
   165 0000049B 50                  <1> 		push	eax
   166 0000049C 53                  <1> 		push	ebx
   167 0000049D 51                  <1> 		push	ecx
   168 0000049E 52                  <1> 		push	edx
   169 0000049F 56                  <1> 		push	esi
   170 000004A0 57                  <1> 		push	edi
   171                              <1> 
   172                              <1> 		;---------------------------------------
   173                              <1> 		; 表示位置
   174                              <1> 		;---------------------------------------
   175 000004A1 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   176 000004A4 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   177                              <1> 
   178                              <1> 		;---------------------------------------
   179                              <1> 		; フォント一覧を表示
   180                              <1> 		;---------------------------------------
   181 000004A7 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   182 000004AC 81F900010000        <1> .10L:	cmp		ecx, 256						;      ECX < 256;
   183 000004B2 731F                <1> 		jae		.10E							; 
   184                              <1> 												;      ECX++)
   185                              <1> 												; {
   186                              <1> 												;   // 桁位置の計算
   187 000004B4 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   188 000004B6 83E00F              <1> 		and		eax, 0x0F						;   EAX &= 0x0F
   189 000004B9 01F0                <1> 		add		eax, esi						;   EAX += X;
   190                              <1> 												;   
   191                              <1> 												;   // 行位置の計算
   192 000004BB 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   193 000004BD C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
   194 000004C0 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   195                              <1> 
   196 000004C2 516A075350E808FFFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
   196 000004CB FF6683C410          <1>
   197                              <1> 
   198 000004D0 41                  <1> 		inc		ecx								;   // for (... ECX++)
   199 000004D1 EBD9                <1> 		jmp		.10L							; 
   200                              <1> .10E:											; }
   201                              <1> 
   202                              <1> 		;---------------------------------------
   203                              <1> 		; 【レジスタの復帰】
   204                              <1> 		;---------------------------------------
   205 000004D3 5F                  <1> 		pop		edi
   206 000004D4 5E                  <1> 		pop		esi
   207 000004D5 5A                  <1> 		pop		edx
   208 000004D6 59                  <1> 		pop		ecx
   209 000004D7 5B                  <1> 		pop		ebx
   210 000004D8 58                  <1> 		pop		eax
   211                              <1> 
   212                              <1> 		;---------------------------------------
   213                              <1> 		; 【スタックフレームの破棄】
   214                              <1> 		;---------------------------------------
   215 000004D9 89EC                <1> 		mov		esp, ebp
   216 000004DB 5D                  <1> 		pop		ebp
   217                              <1> 
   218 000004DC C3                  <1> 		ret
   219                              <1> 
   139                                  %include	"../modules/protect/draw_str.s"
   140                              <1> ;************************************************************************
   141                              <1> ;	文字列の表示
   142                              <1> ;========================================================================
   143                              <1> ;■書式		: void draw_str(col, row, color, p);
   144                              <1> ;
   145                              <1> ;■引数
   146                              <1> ;	col		: 列
   147                              <1> ;	row		: 行
   148                              <1> ;	color	: 描画色
   149                              <1> ;	p		: 文字列のアドレス
   150                              <1> ;
   151                              <1> ;■戻り値	: 無し
   152                              <1> ;************************************************************************
   153                              <1> draw_str:
   154                              <1> 		;---------------------------------------
   155                              <1> 		; 【スタックフレームの構築】
   156                              <1> 		;---------------------------------------
   157                              <1> 												; ------|--------
   158                              <1> 												; EBP+20| *p（文字列のアドレス）
   159                              <1> 												; EBP+16| color（色）
   160                              <1> 												; EBP+12| row（行）
   161                              <1> 												; EBP+ 8| col（列）
   162                              <1> 												; ---------------
   163 000004DD 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   164 000004DE 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   165                              <1> 												; ---------------
   166                              <1> 
   167                              <1> 		;---------------------------------------
   168                              <1> 		; 【レジスタの保存】
   169                              <1> 		;---------------------------------------
   170 000004E0 50                  <1> 		push	eax
   171 000004E1 53                  <1> 		push	ebx
   172 000004E2 51                  <1> 		push	ecx
   173 000004E3 52                  <1> 		push	edx
   174 000004E4 56                  <1> 		push	esi
   175                              <1> 
   176                              <1> 		;---------------------------------------
   177                              <1> 		; 文字列の表示
   178                              <1> 		;---------------------------------------
   179 000004E5 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
   180 000004E8 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
   181 000004EB 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
   182 000004EF 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
   183                              <1> 
   184 000004F2 FC                  <1> 		cld										; DF = 0; // アドレス加算
   185                              <1> .10L:											; do
   186                              <1> 												; {
   187 000004F3 AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
   188 000004F4 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   189 000004F6 7425                <1> 		je		.10E							;     break;
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 1文字表示
   193                              <1> 		;---------------------------------------
   194                              <1> %ifdef	USE_SYSTEM_CALL
   195                              <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
   196                              <1> %else
   197 000004F8 50535251E8D3FEFFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
   197 00000501 6683C410            <1>
   198                              <1> %endif
   199                              <1> 
   200                              <1> 		; 次の文字の位置を調整
   201 00000505 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
   202 00000506 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
   203 00000509 7C10                <1> 		jl		.12E							;   {
   204 0000050B B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
   205 00000510 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
   206 00000511 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
   207 00000514 7C05                <1> 		jl		.12E							;     {
   208 00000516 BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
   209                              <1> 												;     }
   210                              <1> .12E:											;   }
   211 0000051B EBD6                <1> 		jmp		.10L							;   
   212                              <1> .10E:											; } while (1);
   213                              <1> 
   214                              <1> 		;---------------------------------------
   215                              <1> 		; 【レジスタの復帰】
   216                              <1> 		;---------------------------------------
   217 0000051D 5E                  <1> 		pop		esi
   218 0000051E 5A                  <1> 		pop		edx
   219 0000051F 59                  <1> 		pop		ecx
   220 00000520 5B                  <1> 		pop		ebx
   221 00000521 58                  <1> 		pop		eax
   222                              <1> 
   223                              <1> 		;---------------------------------------
   224                              <1> 		; 【スタックフレームの破棄】
   225                              <1> 		;---------------------------------------
   226 00000522 89EC                <1> 		mov		esp, ebp
   227 00000524 5D                  <1> 		pop		ebp
   228                              <1> 
   229 00000525 C3                  <1> 		ret
   230                              <1> 
   140                                  %include	"../modules/protect/draw_color_bar.s"
   141                              <1> ;************************************************************************
   142                              <1> ;	カラーバーの表示
   143                              <1> ;========================================================================
   144                              <1> ;■書式		: void draw_color_bar(col, row);
   145                              <1> ;
   146                              <1> ;■引数
   147                              <1> ;	col		: 列
   148                              <1> ;	row		: 行
   149                              <1> ;
   150                              <1> ;■戻り値	: 無し
   151                              <1> ;************************************************************************
   152                              <1> draw_color_bar:
   153                              <1> 		;---------------------------------------
   154                              <1> 		; 【スタックフレームの構築】
   155                              <1> 		;---------------------------------------
   156                              <1> 												; ------|--------
   157                              <1> 												; EBP+ 8| X（列）
   158                              <1> 												; EBP+12| Y（行）
   159                              <1> 												; ---------------
   160 00000526 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   161 00000527 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   162                              <1> 												; ---------------
   163                              <1> 		;---------------------------------------
   164                              <1> 		; 【レジスタの保存】
   165                              <1> 		;---------------------------------------
   166 00000529 50                  <1> 		push	eax
   167 0000052A 53                  <1> 		push	ebx
   168 0000052B 51                  <1> 		push	ecx
   169 0000052C 52                  <1> 		push	edx
   170 0000052D 56                  <1> 		push	esi
   171 0000052E 57                  <1> 		push	edi
   172                              <1> 
   173                              <1> 		;---------------------------------------
   174                              <1> 		; 表示位置
   175                              <1> 		;---------------------------------------
   176 0000052F 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   177 00000532 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   178                              <1> 
   179                              <1> 		;---------------------------------------
   180                              <1> 		; カラーバーを表示
   181                              <1> 		;---------------------------------------
   182 00000535 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   183 0000053A 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
   184 0000053D 732E                <1> 		jae		.10E							; 
   185                              <1> 												;      ECX++)
   186                              <1> 												; {
   187                              <1> 												;   // 桁位置の計算
   188 0000053F 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   189 00000541 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
   190 00000544 C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
   191 00000547 01F0                <1> 		add		eax, esi						;   EAX += X;
   192                              <1> 												;   
   193                              <1> 												;   // 行位置の計算
   194 00000549 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   195 0000054B D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
   196 0000054D 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   197                              <1> 												;   
   198                              <1> 												;   // 表示色の取得
   199 0000054F 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
   200 00000551 D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
   201 00000553 8B92[80050000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
   202                              <1> 
   203 00000559 68[77050000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
   203 00000561 E877FFFFFF6683C410  <1>
   204                              <1> 
   205 0000056A 41                  <1> 		inc		ecx								;   // for (... ECX++)
   206 0000056B EBCD                <1> 		jmp		.10L							; 
   207                              <1> .10E:											; }
   208                              <1> 
   209                              <1> 		;---------------------------------------
   210                              <1> 		; 【レジスタの復帰】
   211                              <1> 		;---------------------------------------
   212 0000056D 5F                  <1> 		pop		edi
   213 0000056E 5E                  <1> 		pop		esi
   214 0000056F 5A                  <1> 		pop		edx
   215 00000570 59                  <1> 		pop		ecx
   216 00000571 5B                  <1> 		pop		ebx
   217 00000572 58                  <1> 		pop		eax
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 【スタックフレームの破棄】
   221                              <1> 		;---------------------------------------
   222 00000573 89EC                <1> 		mov		esp, ebp
   223 00000575 5D                  <1> 		pop		ebp
   224                              <1> 
   225 00000576 C3                  <1> 		ret
   226                              <1> 
   227 00000577 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
   228                              <1> 
   229 00000580 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
   230 00000584 00010009            <1> 		dw	0x0100, 0x0900
   231 00000588 0002000A            <1> 		dw	0x0200, 0x0A00
   232 0000058C 0003000B            <1> 		dw	0x0300, 0x0B00
   233 00000590 0004000C            <1> 		dw	0x0400, 0x0C00
   234 00000594 0005000D            <1> 		dw	0x0500, 0x0D00
   235 00000598 0006000E            <1> 		dw	0x0600, 0x0E00
   236 0000059C 0007000F            <1> 		dw	0x0700, 0x0F00
   237                              <1> 
   141                                  %include	"../modules/protect/draw_pixel.s"
   142                              <1> ;************************************************************************
   143                              <1> ;	ピクセルの描画
   144                              <1> ;========================================================================
   145                              <1> ;■書式		: void draw_pixel(X, Y, color);
   146                              <1> ;
   147                              <1> ;■引数
   148                              <1> ;	X		: X座標
   149                              <1> ;	Y		: Y座標
   150                              <1> ;	color	: 描画色
   151                              <1> ;
   152                              <1> ;■戻り値	: 無し
   153                              <1> ;************************************************************************
   154                              <1> draw_pixel:
   155                              <1> 		;---------------------------------------
   156                              <1> 		; 【スタックフレームの構築】
   157                              <1> 		;---------------------------------------
   158                              <1> 												; ------|--------
   159                              <1> 												; EBP+16| 色
   160                              <1> 												; EBP+12| Y
   161                              <1> 												; EBP+ 8| X
   162                              <1> 												; ------|--------
   163 000005A0 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   164 000005A1 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   165                              <1> 												; ------+--------
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 【レジスタの保存】
   168                              <1> 		;---------------------------------------
   169 000005A3 50                  <1> 		push	eax
   170 000005A4 53                  <1> 		push	ebx
   171 000005A5 51                  <1> 		push	ecx
   172 000005A6 57                  <1> 		push	edi
   173                              <1> 
   174                              <1> 		;---------------------------------------
   175                              <1> 		; Y座標を80倍する（640/8）
   176                              <1> 		;---------------------------------------
   177 000005A7 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI  = Y座標
   178 000005AA C1E704              <1> 		shl		edi, 4							; EDI *= 16;
   179 000005AD 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA_0000]	; EDI  = 0xA00000[EDI * 4 + EDI];
   180                              <1> 
   181                              <1> 		;---------------------------------------
   182                              <1> 		; X座標を1/8して加算
   183                              <1> 		;---------------------------------------
   184 000005B4 8B5D08              <1> 		mov		ebx, [ebp + 8]					; EBX  = X座標;
   185 000005B7 89D9                <1> 		mov		ecx, ebx						; ECX  = X座標;（一時保存）
   186 000005B9 C1EB03              <1> 		shr		ebx, 3							; EBX /= 8;
   187 000005BC 01DF                <1> 		add		edi, ebx						; EDI += EBX;
   188                              <1> 
   189                              <1> 		;---------------------------------------
   190                              <1> 		; X座標を8で割った余りからビット位置を計算
   191                              <1> 		; (0=0x80, 1=0x40,... 7=0x01)
   192                              <1> 		;---------------------------------------
   193 000005BE 83E107              <1> 		and		ecx, 0x07						; ECX = X & 0x07;
   194 000005C1 BB80000000          <1> 		mov		ebx, 0x80						; EBX = 0x80;
   195 000005C6 D3EB                <1> 		shr		ebx, cl							; EBX >>= ECX;
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; 色指定
   199                              <1> 		;---------------------------------------
   200 000005C8 8B4D10              <1> 		mov		ecx, [ebp +16]					; // 表示色
   201                              <1> 
   202                              <1> %ifdef	USE_TEST_AND_SET
   203                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   204                              <1> %endif
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; プレーン毎に出力
   208                              <1> 		;---------------------------------------
   209 000005CB 6A03E84FFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 輝度(I)プレーンを選択
   209 000005D4 C404                <1>
   210 000005D6 6A08E85DFDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 輝度(I)プレーンを選択
   210 000005DF C404                <1>
   211 000005E1 516A085753E8BBFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
   211 000005EA FF6683C410          <1>
   212                              <1> 
   213 000005EF 6A02E82BFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 赤(R)プレーンを選択
   213 000005F8 C404                <1>
   214 000005FA 6A04E839FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 赤(R)プレーンを選択
   214 00000603 C404                <1>
   215 00000605 516A045753E897FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
   215 0000060E FF6683C410          <1>
   216                              <1> 
   217 00000613 6A01E807FDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 緑(G)プレーンを選択
   217 0000061C C404                <1>
   218 0000061E 6A02E815FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 緑(G)プレーンを選択
   218 00000627 C404                <1>
   219 00000629 516A025753E873FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
   219 00000632 FF6683C410          <1>
   220                              <1> 
   221 00000637 6A00E8E3FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 青(B)プレーンを選択
   221 00000640 C404                <1>
   222 00000642 6A01E8F1FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 青(B)プレーンを選択
   222 0000064B C404                <1>
   223 0000064D 516A015753E84FFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
   223 00000656 FF6683C410          <1>
   224                              <1> 
   225                              <1> 
   226                              <1> %ifdef	USE_TEST_AND_SET
   227                              <1> 		;---------------------------------------
   228                              <1> 		; テストアンドセット
   229                              <1> 		;---------------------------------------
   230                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   231                              <1> %endif
   232                              <1> 
   233                              <1> 		;---------------------------------------
   234                              <1> 		; 【レジスタの復帰】
   235                              <1> 		;---------------------------------------
   236 0000065B 5F                  <1> 		pop		edi
   237 0000065C 59                  <1> 		pop		ecx
   238 0000065D 5B                  <1> 		pop		ebx
   239 0000065E 58                  <1> 		pop		eax
   240                              <1> 
   241                              <1> 		;---------------------------------------
   242                              <1> 		; 【スタックフレームの破棄】
   243                              <1> 		;---------------------------------------
   244 0000065F 89EC                <1> 		mov		esp, ebp
   245 00000661 5D                  <1> 		pop		ebp
   246                              <1> 
   247 00000662 C3                  <1> 		ret
   248                              <1> 
   142                                  %include	"../modules/protect/draw_line.s"
   143                              <1> ;************************************************************************
   144                              <1> ;	直線の描画
   145                              <1> ;========================================================================
   146                              <1> ;■書式		: void draw_line(X0, Y0, X1, Y1, color);
   147                              <1> ;
   148                              <1> ;■引数
   149                              <1> ;	X0		: 始点のX座標
   150                              <1> ;	Y0		: 始点のY座標
   151                              <1> ;	X1		: 終点のX座標
   152                              <1> ;	Y1		: 終点のY座標
   153                              <1> ;	color	: 描画色
   154                              <1> ;
   155                              <1> ;■戻り値	: 無し
   156                              <1> ;************************************************************************
   157                              <1> draw_line:
   158                              <1> 		;---------------------------------------
   159                              <1> 		; 【スタックフレームの構築】
   160                              <1> 		;---------------------------------------
   161                              <1> 												; ---------------
   162                              <1> 												;    +24| 色
   163                              <1> 												;    +20| Y1
   164                              <1> 												;    +16| X1
   165                              <1> 												;    +12| Y0
   166                              <1> 												;    + 8| X0
   167                              <1> 												; ---------------
   168 00000663 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   169 00000664 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   170                              <1> 												; ---------------
   171 00000666 6A00                <1> 		push	dword 0							;    - 4| sum   = 0; // 相対軸の積算値
   172 00000668 6A00                <1> 		push	dword 0							;    - 8| x0    = 0; // X座標
   173 0000066A 6A00                <1> 		push	dword 0							;    -12| dx    = 0; // X増分
   174 0000066C 6A00                <1> 		push	dword 0							;    -16| inc_x = 0; // X座標増分(1 or -1)
   175 0000066E 6A00                <1> 		push	dword 0							;    -20| y0    = 0; // Y座標
   176 00000670 6A00                <1> 		push	dword 0							;    -24| dy    = 0; // Y増分
   177 00000672 6A00                <1> 		push	dword 0							;    -28| inc_y = 0; // Y座標増分(1 or -1)
   178                              <1> 												; ------|--------
   179                              <1> 
   180                              <1> 		;---------------------------------------
   181                              <1> 		; 【レジスタの保存】
   182                              <1> 		;---------------------------------------
   183 00000674 50                  <1> 		push	eax
   184 00000675 53                  <1> 		push	ebx
   185 00000676 51                  <1> 		push	ecx
   186 00000677 52                  <1> 		push	edx
   187 00000678 56                  <1> 		push	esi
   188 00000679 57                  <1> 		push	edi
   189                              <1> 
   190                              <1> 		;---------------------------------------
   191                              <1> 		; 幅を計算（X軸）
   192                              <1> 		;---------------------------------------
   193 0000067A 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   194 0000067D 8B5D10              <1> 		mov		ebx, [ebp +16]					; EBX = X1;
   195 00000680 29C3                <1> 		sub		ebx, eax						; EBX = X1 - X0; // 幅
   196 00000682 7D09                <1> 		jge		.10F							; if (幅 < 0)
   197                              <1> 												; {
   198 00000684 F7DB                <1> 		neg		ebx								;   幅   *= -1;
   199 00000686 BEFFFFFFFF          <1> 		mov		esi, -1							;   // X座標の増分
   200 0000068B EB05                <1> 		jmp		.10E							; }
   201                              <1> .10F:											; else
   202                              <1> 												; {
   203 0000068D BE01000000          <1> 		mov		esi, 1							;   // X座標の増分
   204                              <1> .10E:											; }
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; 高さを計算（Y軸）
   208                              <1> 		;---------------------------------------
   209 00000692 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX = Y0
   210 00000695 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1
   211 00000698 29CA                <1> 		sub		edx, ecx						; EDX = Y1 - Y0; // 高さ
   212 0000069A 7D09                <1> 		jge		.20F							; if (高さ < 0)
   213                              <1> 												; {
   214 0000069C F7DA                <1> 		neg		edx								;   高さ *= -1;
   215 0000069E BFFFFFFFFF          <1> 		mov		edi, -1							;   // Y座標の増分
   216 000006A3 EB05                <1> 		jmp		.20E							; }
   217                              <1> .20F:											; else
   218                              <1> 												; {
   219 000006A5 BF01000000          <1> 		mov		edi, 1							;   // Y座標の増分
   220                              <1> .20E:											; }
   221                              <1> 
   222                              <1> 		;---------------------------------------
   223                              <1> 		; X軸
   224                              <1> 		;---------------------------------------
   225 000006AA 8945F8              <1> 		mov		[ebp - 8], eax					;   // X軸:開始座標
   226 000006AD 895DF4              <1> 		mov		[ebp -12], ebx					;   // X軸:描画幅
   227 000006B0 8975F0              <1> 		mov		[ebp -16], esi					;   // X軸:増分(基準軸：1 or -1)
   228                              <1> 
   229                              <1> 		;---------------------------------------
   230                              <1> 		; Y軸
   231                              <1> 		;---------------------------------------
   232 000006B3 894DEC              <1> 		mov		[ebp -20], ecx					;   // Y軸:開始座標
   233 000006B6 8955E8              <1> 		mov		[ebp -24], edx					;   // Y軸:描画幅
   234 000006B9 897DE4              <1> 		mov		[ebp -28], edi					;   // Y軸:増分(基準軸：1 or -1)
   235                              <1> 
   236                              <1> 		;---------------------------------------
   237                              <1> 		; 基準軸を決める
   238                              <1> 		;---------------------------------------
   239 000006BC 39D3                <1> 		cmp		ebx, edx						; if (幅 <= 高さ)
   240 000006BE 7F08                <1> 		jg		.22F							; {
   241                              <1> 												;   
   242 000006C0 8D75EC              <1> 		lea		esi, [ebp -20]					;   // Y軸が基準軸
   243 000006C3 8D7DF8              <1> 		lea		edi, [ebp - 8]					;   // X軸が相対軸
   244                              <1> 												;   
   245 000006C6 EB06                <1> 		jmp		.22E							; }
   246                              <1> .22F:											; else
   247                              <1> 												; {
   248 000006C8 8D75F8              <1> 		lea		esi, [ebp - 8]					;   // X軸が基準軸
   249 000006CB 8D7DEC              <1> 		lea		edi, [ebp -20]					;   // Y軸が相対軸
   250                              <1> .22E:											; }
   251                              <1> 
   252                              <1> 		;---------------------------------------
   253                              <1> 		; 繰り返し回数(基準軸のドット数)
   254                              <1> 		;---------------------------------------
   255 000006CE 8B4EFC              <1> 		mov		ecx, [esi - 4]					; ECX = 基準軸描画幅;
   256 000006D1 83F900              <1> 		cmp		ecx, 0							; if (0 == ECX)
   257 000006D4 7505                <1> 		jnz		.30E							; {
   258 000006D6 B901000000          <1> 		mov		ecx, 1							;   ECX = 1;
   259                              <1> .30E:											; }
   260                              <1> 
   261                              <1> 		;---------------------------------------
   262                              <1> 		; 線を描画
   263                              <1> 		;---------------------------------------
   264                              <1> .50L:											; do
   265                              <1> 												; {
   266                              <1> %ifdef	USE_SYSTEM_CALL
   267                              <1> 		mov		eax, ecx						;   // 繰り返し回数を保存
   268                              <1> 
   269                              <1> 		mov		ebx, [ebp +24]					;   EBX = 表示色;
   270                              <1> 		mov		ecx, [ebp - 8]					;   ECX = X座標;
   271                              <1> 		mov		edx, [ebp -20]					;   EDX = Y座標;
   272                              <1> 		int		0x82							;   sys_call(1, X, Y, 色, 文字); BX(C), CX(X), DX(Y)
   273                              <1> 
   274                              <1> 		mov		ecx, eax
   275                              <1> %else
   276 000006DB FF7518FF75ECFF75F8- <1> 		cdecl	draw_pixel, dword [ebp - 8], 							dword [ebp -20], 							dword [ebp +24]		;   // 点の描画
   276 000006E4 E8B7FEFFFF6683C40C  <1>
   279                              <1> %endif
   280                              <1> 												;   // 基準軸を更新(1ドット分)
   281 000006ED 8B46F8              <1> 		mov		eax, [esi - 8]					;   EAX = 基準軸増分(1 or -1);
   282 000006F0 0106                <1> 		add		[esi - 0], eax					;   
   283                              <1> 
   284                              <1> 												;   // 相対軸を更新
   285 000006F2 8B45FC              <1> 		mov		eax, [ebp - 4]					;   EAX  = sum; // 相対軸の積算値;
   286 000006F5 0347FC              <1> 		add		eax, [edi - 4]					;   EAX += dy;  // 増分(相対軸の描画幅)
   287 000006F8 8B5EFC              <1> 		mov		ebx, [esi - 4]					;   EBX  = dx;  // 増分(基準軸の描画幅)
   288                              <1> 
   289 000006FB 39D8                <1> 		cmp		eax, ebx						;   if (積算値 <= 相対軸の増分)
   290 000006FD 7C07                <1> 		jl		.52E							;   {
   291 000006FF 29D8                <1> 		sub		eax, ebx						;     EAX -= EBX; // 積算値から相対軸の増分を減算
   292                              <1> 												;     
   293                              <1> 												;     // 相対軸の座標を更新(1ドット分)
   294 00000701 8B5FF8              <1> 		mov		ebx, [edi - 8]					;     EBX =  相対軸増分;
   295 00000704 011F                <1> 		add		[edi - 0], ebx					;     
   296                              <1> .52E:											;   }
   297 00000706 8945FC              <1> 		mov		[ebp - 4], eax					;   // 積算値を更新
   298                              <1> 												;   
   299 00000709 E2D0                <1> 		loop	.50L							;   
   300                              <1> .50E:											; } while (ループ回数--);
   301                              <1> 
   302                              <1> 		;---------------------------------------
   303                              <1> 		; 【レジスタの復帰】
   304                              <1> 		;---------------------------------------
   305 0000070B 5F                  <1> 		pop		edi
   306 0000070C 5E                  <1> 		pop		esi
   307 0000070D 5A                  <1> 		pop		edx
   308 0000070E 59                  <1> 		pop		ecx
   309 0000070F 5B                  <1> 		pop		ebx
   310 00000710 58                  <1> 		pop		eax
   311                              <1> 
   312                              <1> 		;---------------------------------------
   313                              <1> 		; 【スタックフレームの破棄】
   314                              <1> 		;---------------------------------------
   315 00000711 89EC                <1> 		mov		esp, ebp
   316 00000713 5D                  <1> 		pop		ebp
   317                              <1> 
   318 00000714 C3                  <1> 		ret
   319                              <1> 
   143                                  %include	"../modules/protect/draw_rect.s"
   144                              <1> ;************************************************************************
   145                              <1> ;	矩形の描画
   146                              <1> ;========================================================================
   147                              <1> ;■書式		: void draw_rect(X0, Y0, X1, Y1, color);
   148                              <1> ;
   149                              <1> ;■引数
   150                              <1> ;	X0		: 始点のX座標
   151                              <1> ;	Y0		: 始点のY座標
   152                              <1> ;	X1		: 終点のX座標
   153                              <1> ;	Y1		: 終点のY座標
   154                              <1> ;	color	: 描画色
   155                              <1> ;
   156                              <1> ;■戻り値	: 無し
   157                              <1> ;************************************************************************
   158                              <1> draw_rect:
   159                              <1> 		;---------------------------------------
   160                              <1> 		; 【スタックフレームの構築】
   161                              <1> 		;---------------------------------------
   162                              <1> 												; ------|--------
   163                              <1> 												; EBP+24| 色
   164                              <1> 												; EBP+20| Y1
   165                              <1> 												; EBP+16| X1
   166                              <1> 												; EBP+12| Y0
   167                              <1> 												; EBP+ 8| X0
   168                              <1> 												; ---------------
   169 00000715 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   170 00000716 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   171                              <1> 												; ------|--------
   172                              <1> 
   173                              <1> 		;---------------------------------------
   174                              <1> 		; 【レジスタの保存】
   175                              <1> 		;---------------------------------------
   176 00000718 50                  <1> 		push		eax
   177 00000719 53                  <1> 		push		ebx
   178 0000071A 51                  <1> 		push		ecx
   179 0000071B 52                  <1> 		push		edx
   180 0000071C 56                  <1> 		push		esi
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; 矩形を描画
   184                              <1> 		;---------------------------------------
   185 0000071D 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   186 00000720 8B5D0C              <1> 		mov		ebx, [ebp +12]					; EBX = Y0;
   187 00000723 8B4D10              <1> 		mov		ecx, [ebp +16]					; ECX = X1;
   188 00000726 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1;
   189 00000729 8B7518              <1> 		mov		esi, [ebp +24]					; ESI = 色;
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 座標軸の大小を確定
   193                              <1> 		;---------------------------------------
   194 0000072C 39C8                <1> 		cmp		eax, ecx						; if (X1 < X0)
   195 0000072E 7C01                <1> 		jl		.10E							; {
   196 00000730 91                  <1> 		xchg	eax, ecx						;   X0とX1を入れ替える;
   197                              <1> .10E:											; }
   198                              <1> 
   199 00000731 39D3                <1> 		cmp		ebx, edx						; if (Y1 < Y0)
   200 00000733 7C02                <1> 		jl		.20E							; {
   201 00000735 87DA                <1> 		xchg	ebx, edx						;   Y0とY1を入れ替える;
   202                              <1> .20E:											; }
   203                              <1> 
   204                              <1> 		;---------------------------------------
   205                              <1> 		; 矩形を描画
   206                              <1> 		;---------------------------------------
   207 00000737 5653515350E822FFFF- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, esi	; 上線
   207 00000740 FF6683C414          <1>
   208 00000745 5652505350E814FFFF- <1> 		cdecl	draw_line, eax, ebx, eax, edx, esi	; 左線
   208 0000074E FF6683C414          <1>
   209                              <1> 
   210 00000753 4A                  <1> 		dec		edx									; EDX--; // 下線は1ドット上げる
   211 00000754 5652515250E805FFFF- <1> 		cdecl	draw_line, eax, edx, ecx, edx, esi	; 下線
   211 0000075D FF6683C414          <1>
   212 00000762 42                  <1> 		inc		edx
   213                              <1> 
   214 00000763 49                  <1> 		dec		ecx									; ECX--; // 右線は1ドット左に移動
   215 00000764 5652515351E8F5FEFF- <1> 		cdecl	draw_line, ecx, ebx, ecx, edx, esi	; 右線
   215 0000076D FF6683C414          <1>
   216                              <1> 
   217                              <1> 		;---------------------------------------
   218                              <1> 		; 【レジスタの復帰】
   219                              <1> 		;---------------------------------------
   220 00000772 5E                  <1> 		pop		esi
   221 00000773 5A                  <1> 		pop		edx
   222 00000774 59                  <1> 		pop		ecx
   223 00000775 5B                  <1> 		pop		ebx
   224 00000776 58                  <1> 		pop		eax
   225                              <1> 
   226                              <1> 		;---------------------------------------
   227                              <1> 		; 【スタックフレームの破棄】
   228                              <1> 		;---------------------------------------
   229 00000777 89EC                <1> 		mov		esp, ebp
   230 00000779 5D                  <1> 		pop		ebp
   231                              <1> 
   232 0000077A C3                  <1> 		ret
   144                                  %include	"../modules/protect/itoa.s"
   145                              <1> ;************************************************************************
   146                              <1> ;	数値を文字に変換
   147                              <1> ;========================================================================
   148                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
   149                              <1> ;
   150                              <1> ;■引数
   151                              <1> ;	num		: 変換する数値
   152                              <1> ;	buff	: 保存先バッファアドレス
   153                              <1> ;	size	: 保存先バッファサイズ
   154                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
   155                              <1> ;	flags	: フラグ
   156                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
   157                              <1> ;			:      : 0=空白を' '（スペース）で埋める
   158                              <1> ;			:   B1 : 1=＋/-符号を表示する
   159                              <1> ;			:      : 0=＋/-符号を表示しない
   160                              <1> ;			:   B0 : 1=符号付き正数として扱う
   161                              <1> ;			:      : 0=符号無し正数として扱う
   162                              <1> ;
   163                              <1> ;■戻り値	: 無し
   164                              <1> ;************************************************************************
   165                              <1> itoa:
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 【スタックフレームの構築】
   168                              <1> 		;---------------------------------------
   169                              <1> 												; ------|--------
   170                              <1> 												;    +24| フラグ
   171                              <1> 												;    +20| 基数
   172                              <1> 												;    +16| バッファサイズ
   173                              <1> 												;    +12| バッファアドレス
   174                              <1> 												;    + 8| 数値
   175                              <1> 												; ------|--------
   176                              <1> 												;    + 4| EIP（戻り番地）
   177 0000077B 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   178 0000077C 89E5                <1> 		mov		ebp, esp						; ------+--------
   179                              <1> 
   180                              <1> 		;---------------------------------------
   181                              <1> 		; 【レジスタの保存】
   182                              <1> 		;---------------------------------------
   183 0000077E 50                  <1> 		push	eax
   184 0000077F 53                  <1> 		push	ebx
   185 00000780 51                  <1> 		push	ecx
   186 00000781 52                  <1> 		push	edx
   187 00000782 56                  <1> 		push	esi
   188 00000783 57                  <1> 		push	edi
   189                              <1> 
   190                              <1> 		;---------------------------------------
   191                              <1> 		; 引数を取得
   192                              <1> 		;---------------------------------------
   193 00000784 8B4508              <1> 		mov		eax, [ebp + 8]					; val  = 数値;
   194 00000787 8B750C              <1> 		mov		esi, [ebp +12]					; dst  = バッファアドレス;
   195 0000078A 8B4D10              <1> 		mov		ecx, [ebp +16]					; size = 残りバッファサイズ;
   196                              <1> 
   197 0000078D 89F7                <1> 		mov		edi, esi						; // バッファの最後尾
   198 0000078F 01CF                <1> 		add		edi, ecx						; dst  = &dst[size - 1];
   199 00000791 4F                  <1> 		dec		edi								; 
   200                              <1> 
   201 00000792 8B5D18              <1> 		mov		ebx, [ebp +24]					; flags = オプション;
   202                              <1> 
   203                              <1> 		;---------------------------------------
   204                              <1> 		; 符号付き判定
   205                              <1> 		;---------------------------------------
   206 00000795 F7C301000000        <1> 		test	ebx, 0b0001						; if (flags & 0x01)// 符号付き
   207 0000079B 7408                <1> .10Q:	je		.10E							; {
   208 0000079D 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   209 000007A0 7D03                <1> .12Q:	jge		.12E							;   {
   210 000007A2 83CB02              <1> 		or		ebx, 0b0010						;     flags |=  2; // 符号表示
   211                              <1> .12E:											;   }
   212                              <1> .10E:											; }
   213                              <1> 
   214                              <1> 		;---------------------------------------
   215                              <1> 		; 符号出力判定
   216                              <1> 		;---------------------------------------
   217 000007A5 F7C302000000        <1> 		test	ebx, 0b0010						; if (flags & 0x02)// 符号出力判定
   218 000007AB 7410                <1> .20Q:	je		.20E							; {
   219 000007AD 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   220 000007B0 7D07                <1> .22Q:	jge		.22F							;   {
   221 000007B2 F7D8                <1> 		neg		eax								;     val *= -1;   // 符号反転
   222 000007B4 C6062D              <1> 		mov		[esi], byte '-'					;     *dst = '-';  // 符号表示
   223 000007B7 EB03                <1> 		jmp		.22E							;   }
   224                              <1> .22F:											;   else
   225                              <1> 												;   {
   226 000007B9 C6062B              <1> 		mov		[esi], byte '+'					;     *dst = '+';  // 符号表示
   227                              <1> .22E:											;   }
   228 000007BC 49                  <1> 		dec		ecx								;   size--;        // 残りバッファサイズの減算
   229                              <1> .20E:											; }
   230                              <1> 
   231                              <1> 		;---------------------------------------
   232                              <1> 		; ASCII変換
   233                              <1> 		;---------------------------------------
   234 000007BD 8B5D14              <1> 		mov		ebx, [ebp +20]					; BX = 基数;
   235                              <1> .30L:											; do
   236                              <1> 												; {
   237 000007C0 BA00000000          <1> 		mov		edx, 0							;   
   238 000007C5 F7F3                <1> 		div		ebx								;   DX = DX:AX % 基数;
   239                              <1> 												;   AX = DX:AX / 基数;
   240                              <1> 												;   
   241 000007C7 89D6                <1> 		mov		esi, edx						;   // テーブル参照
   242 000007C9 8A96[F4070000]      <1> 		mov		dl, byte [.ascii + esi]			;   DL = ASCII[DX];
   243                              <1> 												;   
   244 000007CF 8817                <1> 		mov		[edi], dl						;   *dst = DL;
   245 000007D1 4F                  <1> 		dec		edi								;   dst--;
   246                              <1> 												;   
   247 000007D2 83F800              <1> 		cmp		eax, 0							;   
   248 000007D5 E0E9                <1> 		loopnz	.30L							; } while (AX);
   249                              <1> .30E:
   250                              <1> 
   251                              <1> 		;---------------------------------------
   252                              <1> 		; 空欄を埋める
   253                              <1> 		;---------------------------------------
   254 000007D7 83F900              <1> 		cmp		ecx, 0							; if (size)
   255 000007DA 740E                <1> .40Q:	je		.40E							; {
   256 000007DC B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   257 000007DE 66837D1804          <1> 		cmp		[ebp +24], word 0b0100			;   if (flags & 0x04)
   258 000007E3 7502                <1> .42Q:	jne		.42E							;   {
   259 000007E5 B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   260                              <1> .42E:											;   }
   261 000007E7 FD                  <1> 		std										;   // DF = 1（-方向）
   262 000007E8 F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   263                              <1> .40E:											; }
   264                              <1> 
   265                              <1> 		;---------------------------------------
   266                              <1> 		; 【レジスタの復帰】
   267                              <1> 		;---------------------------------------
   268 000007EA 5F                  <1> 		pop		edi
   269 000007EB 5E                  <1> 		pop		esi
   270 000007EC 5A                  <1> 		pop		edx
   271 000007ED 59                  <1> 		pop		ecx
   272 000007EE 5B                  <1> 		pop		ebx
   273 000007EF 58                  <1> 		pop		eax
   274                              <1> 
   275                              <1> 		;---------------------------------------
   276                              <1> 		; 【スタックフレームの破棄】
   277                              <1> 		;---------------------------------------
   278 000007F0 89EC                <1> 		mov		esp, ebp
   279 000007F2 5D                  <1> 		pop		ebp
   280                              <1> 
   281 000007F3 C3                  <1> 		ret
   282                              <1> 
   283 000007F4 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   283 000007FD 39414243444546      <1>
   284                              <1> 
   145                                  %include	"../modules/protect/rtc.s"
   146                              <1> ;************************************************************************
   147                              <1> ;	RTCから時刻データを取得する
   148                              <1> ;========================================================================
   149                              <1> ;■書式		: DWORD rtc_get_time(dst);
   150                              <1> ;
   151                              <1> ;■引数
   152                              <1> ;	dst		: 保存先アドレス
   153                              <1> ;
   154                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   155                              <1> ;************************************************************************
   156                              <1> rtc_get_time:
   157                              <1> 		;---------------------------------------
   158                              <1> 		; 【スタックフレームの構築】
   159                              <1> 		;---------------------------------------
   160                              <1> 												; ------|--------
   161                              <1> 												; EBP+ 8| 保存先アドレス
   162                              <1> 												; ---------------
   163 00000804 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   164 00000805 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   165                              <1> 												; ---------------
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 【レジスタの保存】
   168                              <1> 		;---------------------------------------
   169 00000807 53                  <1> 		push	ebx
   170                              <1> 
   171                              <1> 		;---------------------------------------
   172                              <1> 		; RTCから時刻を取得
   173                              <1> 		;---------------------------------------
   174 00000808 B00A                <1> 		mov		al, 0x0A						; // レジスタA
   175 0000080A E670                <1> 		out		0x70, al						; outp(0x70, AL);
   176 0000080C E471                <1> 		in		al, 0x71						; AL = レジスタA;
   177 0000080E A880                <1> 		test	al, 0x80						; if (DM & UIP) // 更新中
   178 00000810 7407                <1> 		je		.10F							; {
   179 00000812 B801000000          <1> 		mov		eax, 1							;   ret = 1; // データ更新中
   180 00000817 EB27                <1> 		jmp		.10E							; }
   181                              <1> .10F:											; else
   182                              <1> 												; {
   183                              <1> 												;   // RAM[0x04]:時
   184 00000819 B004                <1> 		mov		al, 0x04						;   AL = 0x04;
   185 0000081B E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   186 0000081D E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 時データ
   187                              <1> 												;   
   188 0000081F C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   189                              <1> 												;   
   190                              <1> 												;   // RAM[0x02]:分
   191 00000822 B002                <1> 		mov		al, 0x02						;   AL = 0x02;
   192 00000824 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   193 00000826 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 分データ
   194                              <1> 												;   
   195 00000828 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   196                              <1> 												;   
   197                              <1> 												;   // RAM[0x00]:秒
   198 0000082B B000                <1> 		mov		al, 0x00						;   AL = 0x00;
   199 0000082D E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   200 0000082F E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 秒データ
   201                              <1> 												;   
   202 00000831 25FFFFFF00          <1> 		and		eax, 0x00_FF_FF_FF				;   // 下位3バイトのみ有効
   203                              <1> 												;   
   204 00000836 8B5D08              <1> 		mov		ebx, [ebp + 8]					;   dst = 保存先;
   205 00000839 8903                <1> 		mov		[ebx], eax						;   [dst] = 時刻;
   206                              <1> 												;   
   207 0000083B B800000000          <1> 		mov		eax, 0							;   ret = 0; // 正常終了
   208                              <1> .10E:											; }
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 【レジスタの復帰】
   212                              <1> 		;---------------------------------------
   213 00000840 5B                  <1> 		pop		ebx
   214                              <1> 
   215                              <1> 		;---------------------------------------
   216                              <1> 		; 【スタックフレームの破棄】
   217                              <1> 		;---------------------------------------
   218 00000841 89EC                <1> 		mov		esp, ebp
   219 00000843 5D                  <1> 		pop		ebp
   220                              <1> 
   221 00000844 C3                  <1> 		ret
   222                              <1> 
   146                                  %include	"../modules/protect/draw_time.s"
   147                              <1> ;************************************************************************
   148                              <1> ;	時刻の表示
   149                              <1> ;========================================================================
   150                              <1> ;■書式		: void draw_time(col, row, color, time);
   151                              <1> ;
   152                              <1> ;■引数
   153                              <1> ;	col		: 列
   154                              <1> ;	row		: 行
   155                              <1> ;	color	: 描画色
   156                              <1> ;	time	: 時刻データ
   157                              <1> ;
   158                              <1> ;■戻り値	: 無し
   159                              <1> ;************************************************************************
   160                              <1> draw_time:
   161                              <1> 		;---------------------------------------
   162                              <1> 		; 【スタックフレームの構築】
   163                              <1> 		;---------------------------------------
   164                              <1> 												; ------|--------
   165                              <1> 												; EBP+20| 時刻データ
   166                              <1> 												; EBP+16| 色
   167                              <1> 												; EBP+12| Y（行）
   168                              <1> 												; EBP+ 8| X（列）
   169                              <1> 												; ---------------
   170 00000845 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   171 00000846 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   172                              <1> 												; ---------------
   173                              <1> 		;---------------------------------------
   174                              <1> 		; 【レジスタの保存】
   175                              <1> 		;---------------------------------------
   176 00000848 50                  <1> 		push	eax
   177 00000849 53                  <1> 		push	ebx
   178                              <1> 
   179                              <1> 		;---------------------------------------
   180                              <1> 		; 
   181                              <1> 		;---------------------------------------
   182 0000084A 8B4514              <1> 		mov		eax, [ebp +20]					; EAX = 時刻データ;
   183 0000084D 3B05[CA080000]      <1> 		cmp		eax, [.last]					; if (今回 != 前回)
   184 00000853 7467                <1> 		je		.10E							; {
   185                              <1> 												;   
   186 00000855 A3[CA080000]        <1> 		mov		[.last], eax					;   // 前回の時刻値を更新
   187                              <1> 												;   
   188 0000085A BB00000000          <1> 		mov		ebx, 0							;   EBX = 0;
   189 0000085F 88C3                <1> 		mov		bl, al							;   EBX = 秒;
   190 00000861 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .sec, 2, 16, 0b0100	;   // 時刻を文字列に変換
   190 00000868 [D8080000]53E809FF- <1>
   190 00000870 FFFF6683C414        <1>
   191                              <1> 
   192 00000876 88E3                <1> 		mov		bl, ah							;   EBX = 分;
   193 00000878 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .min, 2, 16, 0b0100	;   // 時刻を文字列に変換
   193 0000087F [D5080000]53E8F2FE- <1>
   193 00000887 FFFF6683C414        <1>
   194                              <1> 
   195 0000088D C1E810              <1> 		shr		eax, 16							;   EBX = 時;
   196 00000890 6A046A106A0268-     <1> 		cdecl	itoa, eax, .hour, 2, 16, 0b0100	;   // 時刻を文字列に変換
   196 00000897 [D2080000]50E8DAFE- <1>
   196 0000089F FFFF6683C414        <1>
   197                              <1> 
   198                              <1> 												;   // 時刻を表示
   199 000008A5 68[D2080000]FF7510- <1> 		cdecl	draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
   199 000008AD FF750CFF7508E825FC- <1>
   199 000008B6 FFFF6683C410        <1>
   200                              <1> 												;     
   201                              <1> 												;   }
   202                              <1> .10E:											; }
   203                              <1> 
   204                              <1> 		;---------------------------------------
   205                              <1> 		; 【レジスタの復帰】
   206                              <1> 		;---------------------------------------
   207 000008BC 5B                  <1> 		pop		ebx
   208 000008BD 58                  <1> 		pop		eax
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 【スタックフレームの破棄】
   212                              <1> 		;---------------------------------------
   213 000008BE 89EC                <1> 		mov		esp, ebp
   214 000008C0 5D                  <1> 		pop		ebp
   215                              <1> 
   216 000008C1 C3                  <1> 		ret
   217                              <1> 
   218                              <1> ALIGN 2, db 0
   219 000008C2 0000000000000000    <1> .temp:	dq	0
   220 000008CA 0000000000000000    <1> .last:	dq	0
   221 000008D2 5A5A3A              <1> .hour:	db	"ZZ:"
   222 000008D5 5A5A3A              <1> .min:	db	"ZZ:"
   223 000008D8 5A5A00              <1> .sec:	db	"ZZ", 0
   224                              <1> 
   147                                  %include	"../modules/protect/interrupt.s"
   148                              <1> ;************************************************************************
   149                              <1> ;	割り込みベクタの初期化
   150                              <1> ;************************************************************************
   151 000008DB 90                  <1> ALIGN 4
   152 000008DC FF07                <1> IDTR:	dw 		8 * 256 - 1					; idt_limit
   153 000008DE 00001000            <1> 		dd 		VECT_BASE					; idt location
   154                              <1> 
   155                              <1> ;************************************************************************
   156                              <1> ;	割り込みテーブルを初期化
   157                              <1> ;------------------------------------------------------------------------
   158                              <1> ;	
   159                              <1> ;	まず、全ての割り込みアドレスにデフォルト処理を設定すし、その後、
   160                              <1> ;	必要な割り込みだけ設定しなおす。
   161                              <1> ;	
   162                              <1> ;	割り込みアドレスは、VECT_BASEで指定され、256の割り込みがあるので
   163                              <1> ;	0x0800バイト占有することになる。
   164                              <1> ;	
   165                              <1> ;	           |____________| _V___
   166                              <1> ;	  VECT_BASE| IntDefault |  |   
   167                              <1> ;	           | IntDefault |  | 8 * 256
   168                              <1> ;	           |      :     |  |   
   169                              <1> ;	           |____________| _|___
   170                              <1> ;	      +0800|////////////|
   171                              <1> ;	           |            |
   172                              <1> ;	
   173                              <1> ;	一つの割り込み設定は8バイトで構成される。
   174                              <1> ;	
   175                              <1> ;	           |____________|____________| 
   176                              <1> ;	        [0]| Address Lo[15: 0]       | 
   177                              <1> ;	        [2]| Selector                | 
   178                              <1> ;	        [4]| Flags                   | 
   179                              <1> ;	        [6]|_Address Lo[32:16]_______| 
   180                              <1> ;	           |/////////////////////////| 
   181                              <1> ;	           |            |            | 
   182                              <1> ;	
   183                              <1> ;========================================================================
   184                              <1> ;■書式		: void init_int(void);
   185                              <1> ;
   186                              <1> ;■引数		: 無し
   187                              <1> ;
   188                              <1> ;■戻り値	: 無し
   189                              <1> ;************************************************************************
   190                              <1> init_int:
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 【レジスタの保存】
   193                              <1> 		;---------------------------------------
   194 000008E2 50                  <1> 		push	eax
   195 000008E3 53                  <1> 		push	ebx
   196 000008E4 51                  <1> 		push	ecx
   197 000008E5 57                  <1> 		push	edi
   198                              <1> 
   199                              <1> 		;---------------------------------------
   200                              <1> 		; 全ての割り込みにデフォルト処理を設定
   201                              <1> 		;---------------------------------------
   202 000008E6 8D05[2C0A0000]      <1> 		lea		eax, [int_default]				; EAX   = 割り込み処理アドレス;
   203 000008EC BB008E0800          <1> 		mov		ebx, 0x0008_8E00				; EBX   = セグメントセレクタ;
   204 000008F1 6693                <1> 		xchg	ax, bx							; // 下位ワードを交換
   205                              <1> 
   206 000008F3 B900010000          <1> 		mov		ecx, 256						; ECX   = 割り込みベクタ数
   207 000008F8 BF00001000          <1> 		mov		edi, VECT_BASE					; EDI   = 割り込みベクタテーブル
   208                              <1> 
   209                              <1> .10L:											; do
   210                              <1> 												; {
   211 000008FD 891F                <1> 		mov		[edi + 0], ebx					;   [EDI + 0] = 割り込みディスクリプタ（下位）
   212 000008FF 894704              <1> 		mov		[edi + 4], eax					;   [EDI + 4] = 割り込みディスクリプタ（上位）
   213 00000902 83C708              <1> 		add		edi, 8							;   EDI += 8;
   214 00000905 E2F6                <1> 		loop	.10L							; } while (ECX--);
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; 割り込みディスクリプタの設定
   218                              <1> 		;---------------------------------------
   219 00000907 0F011D[DC080000]    <1> 		lidt	[IDTR]							; // 割り込みディスクリプタテーブルをロード
   220                              <1> 
   221                              <1> 		;---------------------------------------
   222                              <1> 		; 【レジスタの復帰】
   223                              <1> 		;---------------------------------------
   224 0000090E 5F                  <1> 		pop		edi
   225 0000090F 59                  <1> 		pop		ecx
   226 00000910 5B                  <1> 		pop		ebx
   227 00000911 58                  <1> 		pop		eax
   228                              <1> 
   229 00000912 C3                  <1> 		ret
   230                              <1> 
   231                              <1> ;************************************************************************
   232                              <1> ;	スタックの内容を表示して無限ループを実行
   233                              <1> ;************************************************************************
   234                              <1> int_stop:
   235 00000913 FB                  <1> 		sti										; // 割り込み許可
   236                              <1> 
   237                              <1> 		;---------------------------------------
   238                              <1> 		; EAXで示される文字列を表示
   239                              <1> 		;---------------------------------------
   240 00000914 50680F0600006A0F6A- <1> 		cdecl	draw_str, 25, 15, 0x060F, eax	; draw_str(EAX);
   240 0000091D 19E8BAFBFFFF6683C4- <1>
   240 00000926 10                  <1>
   241                              <1> 
   242                              <1> 		;---------------------------------------
   243                              <1> 		; スタックのデータを文字列に変換
   244                              <1> 		;---------------------------------------
   245 00000927 8B0424              <1> 		mov		eax, [esp + 0]					; EAX = ESP[ 0];
   246 0000092A 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p1, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   246 00000931 [EF090000]50E840FE- <1>
   246 00000939 FFFF6683C414        <1>
   247                              <1> 
   248 0000093F 8B442404            <1> 		mov		eax, [esp + 4]					; EAX = ESP[ 4];
   249 00000943 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p2, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   249 0000094A [000A0000]50E827FE- <1>
   249 00000952 FFFF6683C414        <1>
   250                              <1> 
   251 00000958 8B442408            <1> 		mov		eax, [esp + 8]					; EAX = ESP[ 8];
   252 0000095C 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p3, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   252 00000963 [110A0000]50E80EFE- <1>
   252 0000096B FFFF6683C414        <1>
   253                              <1> 
   254 00000971 8B44240C            <1> 		mov		eax, [esp +12]					; EAX = ESP[12];
   255 00000975 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p4, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   255 0000097C [220A0000]50E8F5FD- <1>
   255 00000984 FFFF6683C414        <1>
   256                              <1> 
   257                              <1> 		;---------------------------------------
   258                              <1> 		; 文字列の表示
   259                              <1> 		;---------------------------------------
   260 0000098A 68[E8090000]68040F- <1> 		cdecl	draw_str, 25, 16, 0x0F04, .s1	; draw_str("ESP+ 0:-------- ");
   260 00000992 00006A106A19E840FB- <1>
   260 0000099B FFFF6683C410        <1>
   261 000009A1 68[F9090000]68040F- <1> 		cdecl	draw_str, 25, 17, 0x0F04, .s2	; draw_str("   + 4:-------- ");
   261 000009A9 00006A116A19E829FB- <1>
   261 000009B2 FFFF6683C410        <1>
   262 000009B8 68[0A0A0000]68040F- <1> 		cdecl	draw_str, 25, 18, 0x0F04, .s3	; draw_str("   + 8:-------- ");
   262 000009C0 00006A126A19E812FB- <1>
   262 000009C9 FFFF6683C410        <1>
   263 000009CF 68[1B0A0000]68040F- <1> 		cdecl	draw_str, 25, 19, 0x0F04, .s4	; draw_str("   +12:-------- ");
   263 000009D7 00006A136A19E8FBFA- <1>
   263 000009E0 FFFF6683C410        <1>
   264                              <1> 
   265                              <1> 		;---------------------------------------
   266                              <1> 		; 無限ループ
   267                              <1> 		;---------------------------------------
   268 000009E6 EBFE                <1> 		jmp		$								; while (1) ; // 無限ループ
   269                              <1> 
   270 000009E8 4553502B20303A      <1> .s1		db	"ESP+ 0:"
   271 000009EF 5F5F5F5F5F5F5F5F20- <1> .p1		db	"________ ", 0
   271 000009F8 00                  <1>
   272 000009F9 2020202B20343A      <1> .s2		db	"   + 4:"
   273 00000A00 5F5F5F5F5F5F5F5F20- <1> .p2		db	"________ ", 0
   273 00000A09 00                  <1>
   274 00000A0A 2020202B20383A      <1> .s3		db	"   + 8:"
   275 00000A11 5F5F5F5F5F5F5F5F20- <1> .p3		db	"________ ", 0
   275 00000A1A 00                  <1>
   276 00000A1B 2020202B31323A      <1> .s4		db	"   +12:"
   277 00000A22 5F5F5F5F5F5F5F5F20- <1> .p4		db	"________ ", 0
   277 00000A2B 00                  <1>
   278                              <1> 
   279                              <1> ;************************************************************************
   280                              <1> ;	割り込み処理：デフォルトの処理
   281                              <1> ;************************************************************************
   282                              <1> int_default:
   283 00000A2C 9C                  <1> 		pushf									; // EFLAGS(IF==0)
   284 00000A2D 0E                  <1> 		push	cs								; // CS
   285 00000A2E 68[13090000]        <1> 		push	int_stop						; // スタック表示処理
   286                              <1> 
   287 00000A33 B8[390A0000]        <1> 		mov		eax, .s0						; // 割り込み種別
   288 00000A38 CF                  <1> 		iret
   289                              <1> 
   290 00000A39 203C2020202053544F- <1> .s0		db	" <    STOP    > ", 0
   290 00000A42 50202020203E2000    <1>
   291                              <1> 
   292                              <1> ;************************************************************************
   293                              <1> ;	割り込み処理：ゼロ除算
   294                              <1> ;************************************************************************
   295                              <1> int_zero_div:
   296 00000A4A 9C                  <1> 		pushf									; // EFLAGS
   297 00000A4B 0E                  <1> 		push	cs								; // CS
   298 00000A4C 68[13090000]        <1> 		push	int_stop						; // スタック表示処理
   299                              <1> 
   300 00000A51 B8[570A0000]        <1> 		mov		eax, .s0						; // 割り込み種別
   301 00000A56 CF                  <1> 		iret
   302                              <1> 
   303 00000A57 203C20205A45524F20- <1> .s0		db	" <  ZERO DIV  > ", 0
   303 00000A60 44495620203E2000    <1>
   304                              <1> 
   148                                  %include	"../modules/protect/pic.s"
   149                              <1> ;************************************************************************
   150                              <1> ;	割り込みコントローラの初期化
   151                              <1> ;========================================================================
   152                              <1> ;■書式		: void init_pic(void);
   153                              <1> ;
   154                              <1> ;■引数		: 無し
   155                              <1> ;
   156                              <1> ;■戻り値	: 無し
   157                              <1> ;************************************************************************
   158                              <1> init_pic:
   159                              <1> 		;---------------------------------------
   160                              <1> 		; 【レジスタの保存】
   161                              <1> 		;---------------------------------------
   162 00000A68 50                  <1> 		push	eax
   163                              <1> 
   164                              <1> 		;---------------------------------------
   165                              <1> 		; マスタPICの設定
   166                              <1> 		;---------------------------------------
   167                              <1> 		outp	0x20, 0x11						; // MASTER.ICW1 = 0x11;
    69 00000A69 B011                <2>  mov al, %2
    70 00000A6B E620                <2>  out %1, al
   168                              <1> 		outp	0x21, 0x20						; // MASTER.ICW2 = 0x20;
    69 00000A6D B020                <2>  mov al, %2
    70 00000A6F E621                <2>  out %1, al
   169                              <1> 		outp	0x21, 0x04						; // MASTER.ICW3 = 0x04;
    69 00000A71 B004                <2>  mov al, %2
    70 00000A73 E621                <2>  out %1, al
   170                              <1> 		outp	0x21, 0x01						; // MASTER.ICW4 = 0x01;
    69 00000A75 B001                <2>  mov al, %2
    70 00000A77 E621                <2>  out %1, al
   171                              <1> 		outp	0x21, 0xFF						; // マスタ割り込みマスク
    69 00000A79 B0FF                <2>  mov al, %2
    70 00000A7B E621                <2>  out %1, al
   172                              <1> 
   173                              <1> 		;---------------------------------------
   174                              <1> 		; スレーブPICの設定
   175                              <1> 		;---------------------------------------
   176                              <1> 		outp	0xA0, 0x11						; // SLAVE.ICW1  = 0x11;
    69 00000A7D B011                <2>  mov al, %2
    70 00000A7F E6A0                <2>  out %1, al
   177                              <1> 		outp	0xA1, 0x28						; // SLAVE.ICW2  = 0x28;
    69 00000A81 B028                <2>  mov al, %2
    70 00000A83 E6A1                <2>  out %1, al
   178                              <1> 		outp	0xA1, 0x02						; // SLAVE.ICW3  = 0x02;
    69 00000A85 B002                <2>  mov al, %2
    70 00000A87 E6A1                <2>  out %1, al
   179                              <1> 		outp	0xA1, 0x01						; // SLAVE.ICW4  = 0x01;
    69 00000A89 B001                <2>  mov al, %2
    70 00000A8B E6A1                <2>  out %1, al
   180                              <1> 		outp	0xA1, 0xFF						; // スレーブ割り込みマスク
    69 00000A8D B0FF                <2>  mov al, %2
    70 00000A8F E6A1                <2>  out %1, al
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; 【レジスタの復帰】
   184                              <1> 		;---------------------------------------
   185 00000A91 58                  <1> 		pop		eax
   186                              <1> 
   187 00000A92 C3                  <1> 		ret
   188                              <1> 
   149                                  %include	"../modules/protect/int_rtc.s"
   150                              <1> ;************************************************************************
   151                              <1> ;	RTCの割り込み許可設定
   152                              <1> ;========================================================================
   153                              <1> ;■書式		: void rtc_int_en(bit);
   154                              <1> ;
   155                              <1> ;■引数
   156                              <1> ;	bit		: 割り込みを許可するビット
   157                              <1> ;
   158                              <1> ;■戻り値	: 無し
   159                              <1> ;************************************************************************
   160                              <1> rtc_int_en:
   161                              <1> 		;---------------------------------------
   162                              <1> 		; 【スタックフレームの構築】
   163                              <1> 		;---------------------------------------
   164                              <1> 												; ------|--------
   165                              <1> 												;    + 8| ビット
   166                              <1> 												; ------|--------
   167                              <1> 												;    + 4| EIP（戻り番地）
   168 00000A93 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   169 00000A94 89E5                <1> 		mov		ebp, esp						; ------+--------
   170                              <1> 
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 【レジスタの保存】
   173                              <1> 		;---------------------------------------
   174 00000A96 50                  <1> 		push	eax
   175                              <1> 
   176                              <1> 		;---------------------------------------
   177                              <1> 		; 割り込み許可設定
   178                              <1> 		;---------------------------------------
   179                              <1> 		outp	0x70, 0x0B						; outp(0x70, AL);   // レジスタBを選択
    69 00000A97 B00B                <2>  mov al, %2
    70 00000A99 E670                <2>  out %1, al
   180                              <1> 
   181 00000A9B E471                <1> 		in		al, 0x71						; AL  = port(0x71); // レジスタBの
   182 00000A9D 0A4508              <1> 		or		al, [ebp + 8]					; AL |= ビット;     // 指定されたビットをセット
   183                              <1> 
   184 00000AA0 E671                <1> 		out		0x71, al						; outp(0x71, AL);   // レジスタBに書き込み
   185                              <1> 
   186                              <1> 		;---------------------------------------
   187                              <1> 		; 【レジスタの復帰】
   188                              <1> 		;---------------------------------------
   189 00000AA2 58                  <1> 		pop		eax
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 【スタックフレームの破棄】
   193                              <1> 		;---------------------------------------
   194 00000AA3 89EC                <1> 		mov		esp, ebp
   195 00000AA5 5D                  <1> 		pop		ebp
   196                              <1> 
   197 00000AA6 C3                  <1> 		ret
   198                              <1> 
   199                              <1> 
   200                              <1> ;************************************************************************
   201                              <1> ;	割り込み処理：RTC
   202                              <1> ;************************************************************************
   203                              <1> int_rtc:
   204                              <1> 		;---------------------------------------
   205                              <1> 		; 【レジスタの保存】
   206                              <1> 		;---------------------------------------
   207 00000AA7 60                  <1> 		pusha
   208 00000AA8 1E                  <1> 		push	ds
   209 00000AA9 06                  <1> 		push	es
   210                              <1> 
   211                              <1> 		;---------------------------------------
   212                              <1> 		; データ用セグメントセレクタの設定
   213                              <1> 		;---------------------------------------
   214 00000AAA 66B81000            <1> 		mov		ax, 0x0010						; 
   215 00000AAE 8ED8                <1> 		mov		ds, ax							; 
   216 00000AB0 8EC0                <1> 		mov		es, ax							; 
   217                              <1> 
   218                              <1> 		;---------------------------------------
   219                              <1> 		; RTCから時刻を取得
   220                              <1> 		;---------------------------------------
   221 00000AB2 68[80010000]E848FD- <1> 		cdecl	rtc_get_time, RTC_TIME			; EAX = get_time(&RTC_TIME);
   221 00000ABA FFFF6683C404        <1>
   222                              <1> 												; 
   223                              <1> 		;---------------------------------------
   224                              <1> 		; RTCの割り込み要因を取得
   225                              <1> 		;---------------------------------------
   226                              <1> 		outp	0x70, 0x0C						; outp(0x70, 0x0C); // レジスタCを選択
    69 00000AC0 B00C                <2>  mov al, %2
    70 00000AC2 E670                <2>  out %1, al
   227 00000AC4 E471                <1> 		in		al, 0x71						; AL = inp();
   228                              <1> 
   229                              <1> 		;---------------------------------------
   230                              <1> 		; 割り込みフラグをクリア(EOI)
   231                              <1> 		;---------------------------------------
   232                              <1> 		outp	0xA0, 0x20						; outp(0xA0, EOI); // スレーブPIC
    69 00000AC6 B020                <2>  mov al, %2
    70 00000AC8 E6A0                <2>  out %1, al
   233                              <1> 		outp	0x20, 0x20						; outp(0x20, EOI); // マスタPIC
    69 00000ACA B020                <2>  mov al, %2
    70 00000ACC E620                <2>  out %1, al
   234                              <1> 
   235                              <1> 		;---------------------------------------
   236                              <1> 		; 【レジスタの復帰】
   237                              <1> 		;---------------------------------------
   238 00000ACE 07                  <1> 		pop		es								; 
   239 00000ACF 1F                  <1> 		pop		ds								; 
   240 00000AD0 61                  <1> 		popa									; 
   241                              <1> 
   242 00000AD1 CF                  <1> 		iret									; 割り込み処理の終了
   243                              <1> 
   150                                  %include	"../modules/protect/int_keyboard.s"
   151                              <1> ;************************************************************************
   152                              <1> ;	割り込み処理：キーボード
   153                              <1> ;------------------------------------------------------------------------
   154                              <1> ;	KBC（キーボードコントローラ）からキーコードを取得して、
   155                              <1> ;	専用のリングバッファに保存する。
   156                              <1> ;************************************************************************
   157                              <1> int_keyboard:
   158                              <1> 		;---------------------------------------
   159                              <1> 		; 【レジスタの保存】
   160                              <1> 		;---------------------------------------
   161 00000AD2 60                  <1> 		pusha
   162 00000AD3 1E                  <1> 		push	ds
   163 00000AD4 06                  <1> 		push	es
   164                              <1> 
   165                              <1> 		;---------------------------------------
   166                              <1> 		; データ用セグメントの設定
   167                              <1> 		;---------------------------------------
   168 00000AD5 66B81000            <1> 		mov		ax, 0x0010						; 
   169 00000AD9 8ED8                <1> 		mov		ds, ax							; 
   170 00000ADB 8EC0                <1> 		mov		es, ax							; 
   171                              <1> 
   172                              <1> 		;---------------------------------------
   173                              <1> 		; KBCのバッファ読み取り
   174                              <1> 		;---------------------------------------
   175 00000ADD E460                <1> 		in		al, 0x60						; AL = キーコードの取得
   176                              <1> 
   177                              <1> 		;---------------------------------------
   178                              <1> 		; キーコードの保存
   179                              <1> 		;---------------------------------------
   180 00000ADF 5068[F80A0000]E856- <1> 		cdecl	ring_wr, _KEY_BUFF, eax			; ring_wr(_KEY_BUFF, EAX); // キーコードの保存
   180 00000AE7 0000006683C408      <1>
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; 割り込み終了コマンド送信
   184                              <1> 		;---------------------------------------
   185                              <1> 		outp	0x20, 0x20						; outp(); // マスタPIC:EOIコマンド
    69 00000AEE B020                <2>  mov al, %2
    70 00000AF0 E620                <2>  out %1, al
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 【レジスタの復帰】
   189                              <1> 		;---------------------------------------
   190 00000AF2 07                  <1> 		pop		es								; 
   191 00000AF3 1F                  <1> 		pop		ds								; 
   192 00000AF4 61                  <1> 		popa
   193                              <1> 
   194 00000AF5 CF                  <1> 		iret									; 割り込みからの復帰
   195                              <1> 
   196 00000AF6 00<rep 2h>          <1> ALIGN 4, db 0
   197 00000AF8 00<rep 18h>         <1> _KEY_BUFF:	times ring_buff_size db 0
   198                              <1> 
   151                                  %include	"../modules/protect/ring_buff.s"
   152                              <1> ;************************************************************************
   153                              <1> ;	リングバッファからデータを取得
   154                              <1> ;========================================================================
   155                              <1> ;■書式		: DWORD ring_rd(buff, data);
   156                              <1> ;
   157                              <1> ;■引数
   158                              <1> ;	buff	: リングバッファ
   159                              <1> ;	data	: 読み込んだデータの保存先アドレス
   160                              <1> ;
   161                              <1> ;■戻り値	: データあり(0以外)、データ無し(0)
   162                              <1> ;************************************************************************
   163                              <1> ring_rd:
   164                              <1> 		;---------------------------------------
   165                              <1> 		; 【スタックフレームの構築】
   166                              <1> 		;---------------------------------------
   167                              <1> 												; ------|--------
   168                              <1> 												;    +12| リングデータ
   169                              <1> 												;    + 8| データアドレス
   170                              <1> 												; ------|--------
   171                              <1> 												;    + 4| EIP（戻り番地）
   172 00000B10 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   173 00000B11 89E5                <1> 		mov		ebp, esp						; ------+--------
   174                              <1> 
   175                              <1> 		;---------------------------------------
   176                              <1> 		; 【レジスタの保存】
   177                              <1> 		;---------------------------------------
   178 00000B13 53                  <1> 		push	ebx
   179 00000B14 56                  <1> 		push	esi
   180 00000B15 57                  <1> 		push	edi
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; 引数を取得
   184                              <1> 		;---------------------------------------
   185 00000B16 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   186 00000B19 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = データアドレス;
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 読み込み位置を確認
   190                              <1> 		;---------------------------------------
   191 00000B1C B800000000          <1> 		mov		eax, 0							; EAX = 0;          // データ無し
   192 00000B21 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;         // 読み込み位置
   193 00000B23 3B5E04              <1> 		cmp		ebx, [esi + ring_buff.wp]		; if (EBX != wp)    // 書き込み位置と異なる
   194 00000B26 7411                <1> 		je		.10E							; {
   195                              <1> 												;   
   196 00000B28 8A441E08            <1> 		mov		al, [esi + ring_buff.item + ebx] ;   AL = BUFF[rp]; // キーコードを保存
   197                              <1> 												;   
   198 00000B2C 8807                <1> 		mov		[edi], al						;   [EDI] = AL;     // データを保存
   199                              <1> 												;   
   200 00000B2E 43                  <1> 		inc		ebx								;   EBX++;          // 次の読み込み位置
   201 00000B2F 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= 0x0F     // サイズの制限
   202 00000B32 891E                <1> 		mov		[esi + ring_buff.rp], ebx		;   rp = EBX;       // 読み込み位置を保存
   203                              <1> 												;   
   204 00000B34 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // データあり
   205                              <1> .10E:											; }
   206                              <1> 
   207                              <1> 		;---------------------------------------
   208                              <1> 		; 【レジスタの復帰】
   209                              <1> 		;---------------------------------------
   210 00000B39 5F                  <1> 		pop		edi
   211 00000B3A 5E                  <1> 		pop		esi
   212 00000B3B 5B                  <1> 		pop		ebx
   213                              <1> 
   214                              <1> 		;---------------------------------------
   215                              <1> 		; 【スタックフレームの破棄】
   216                              <1> 		;---------------------------------------
   217 00000B3C 89EC                <1> 		mov		esp, ebp
   218 00000B3E 5D                  <1> 		pop		ebp
   219                              <1> 
   220 00000B3F C3                  <1> 		ret
   221                              <1> 
   222                              <1> ;************************************************************************
   223                              <1> ;	リングバッファにデータを格納
   224                              <1> ;========================================================================
   225                              <1> ;■書式		: DWORD ring_wr(buff, data);
   226                              <1> ;
   227                              <1> ;■引数
   228                              <1> ;	buff	: リングバッファ
   229                              <1> ;	data	: 書き込むデータ
   230                              <1> ;
   231                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   232                              <1> ;************************************************************************
   233                              <1> ring_wr:
   234                              <1> 		;---------------------------------------
   235                              <1> 		; 【スタックフレームの構築】
   236                              <1> 		;---------------------------------------
   237                              <1> 												; ------|--------
   238                              <1> 												;    +12| リングデータ
   239                              <1> 												;    + 8| データ
   240                              <1> 												; ------|--------
   241                              <1> 												;    + 4| EIP（戻り番地）
   242 00000B40 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   243 00000B41 89E5                <1> 		mov		ebp, esp						; ------+--------
   244                              <1> 
   245                              <1> 		;---------------------------------------
   246                              <1> 		; 【レジスタの保存】
   247                              <1> 		;---------------------------------------
   248 00000B43 53                  <1> 		push	ebx
   249 00000B44 51                  <1> 		push	ecx
   250 00000B45 56                  <1> 		push	esi
   251                              <1> 
   252                              <1> 		;---------------------------------------
   253                              <1> 		; 引数を取得
   254                              <1> 		;---------------------------------------
   255 00000B46 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   256                              <1> 
   257                              <1> 		;---------------------------------------
   258                              <1> 		; 書き込み位置を確認
   259                              <1> 		;---------------------------------------
   260 00000B49 B800000000          <1> 		mov		eax, 0							; EAX  = 0;         // 失敗
   261 00000B4E 8B5E04              <1> 		mov		ebx, [esi + ring_buff.wp]		; EBX  = wp;        // 書き込み位置
   262 00000B51 89D9                <1> 		mov		ecx, ebx						; ECX  = EBX;
   263 00000B53 41                  <1> 		inc		ecx								; ECX++;            // 次の書き込み位置
   264 00000B54 83E10F              <1> 		and		ecx, RING_INDEX_MASK			; ECX &= 0x0F       // サイズの制限
   265                              <1> 												; 
   266 00000B57 3B0E                <1> 		cmp		ecx, [esi + ring_buff.rp]		; if (ECX != rp)    // 読み込み位置と異なる
   267 00000B59 740F                <1> 		je		.10E							; {
   268                              <1> 												; 
   269 00000B5B 8A450C              <1> 		mov		al, [ebp +12]					;   AL = データ;
   270                              <1> 												; 
   271 00000B5E 88441E08            <1> 		mov		[esi + ring_buff.item + ebx], al ;   BUFF[wp] = AL; // キーコードを保存
   272 00000B62 894E04              <1> 		mov		[esi + ring_buff.wp], ecx		;   wp = ECX;       // 書き込み位置を保存
   273 00000B65 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // 成功
   274                              <1> .10E:											; }
   275                              <1> 
   276                              <1> 		;---------------------------------------
   277                              <1> 		; 【レジスタの復帰】
   278                              <1> 		;---------------------------------------
   279 00000B6A 5E                  <1> 		pop		esi
   280 00000B6B 59                  <1> 		pop		ecx
   281 00000B6C 5B                  <1> 		pop		ebx
   282                              <1> 
   283                              <1> 		;---------------------------------------
   284                              <1> 		; 【スタックフレームの破棄】
   285                              <1> 		;---------------------------------------
   286 00000B6D 89EC                <1> 		mov		esp, ebp
   287 00000B6F 5D                  <1> 		pop		ebp
   288                              <1> 
   289 00000B70 C3                  <1> 		ret
   290                              <1> 
   291                              <1> ;************************************************************************
   292                              <1> ;	リングバッファ内要素の表示
   293                              <1> ;========================================================================
   294                              <1> ;■書式		: void ring_show(col, row, buff);
   295                              <1> ;
   296                              <1> ;■引数
   297                              <1> ;	col		: 列
   298                              <1> ;	row		: 行
   299                              <1> ;	buff	: リングバッファ
   300                              <1> ;
   301                              <1> ;■戻り値	: 無し
   302                              <1> ;************************************************************************
   303                              <1> draw_key:
   304                              <1> 		;---------------------------------------
   305                              <1> 		; 【スタックフレームの構築】
   306                              <1> 		;---------------------------------------
   307                              <1> 												; ------|--------
   308                              <1> 												; EBP+16| リングバッファ
   309                              <1> 												; EBP+12| Y（行）
   310                              <1> 												; EBP+ 8| X（列）
   311                              <1> 												; ------|--------
   312 00000B71 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   313 00000B72 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   314                              <1> 												; ------|--------
   315                              <1> 
   316                              <1> 		;---------------------------------------
   317                              <1> 		; 【レジスタの保存】
   318                              <1> 		;---------------------------------------
   319 00000B74 60                  <1> 		pusha
   320                              <1> 
   321                              <1> 		;---------------------------------------
   322                              <1> 		; 引数を取得
   323                              <1> 		;---------------------------------------
   324 00000B75 8B5508              <1> 		mov		edx, [ebp + 8]					; EDX = X（列）;
   325 00000B78 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）;
   326 00000B7B 8B7510              <1> 		mov		esi, [ebp +16]					; ESI = リングバッファ;
   327                              <1> 
   328                              <1> 		;---------------------------------------
   329                              <1> 		; リングバッファの情報を取得
   330                              <1> 		;---------------------------------------
   331 00000B7E 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;             // 読み込み位置
   332 00000B80 8D7608              <1> 		lea		esi, [esi + ring_buff.item]		; ESI = &KEY_BUFF[EBX];
   333 00000B83 B910000000          <1> 		mov		ecx, RING_ITEM_SIZE				; ECX = RING_ITEM_SIZE; // 要素数
   334                              <1> 
   335                              <1> 		;---------------------------------------
   336                              <1> 		; 文字に変換しながら表示
   337                              <1> 		;---------------------------------------
   338                              <1> .10L:											; do
   339                              <1> 												; {
   340 00000B88 4B                  <1> 		dec		ebx								;   EBX--; // 読み込み位置
   341 00000B89 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= RING_INDEX_MASK;
   342 00000B8C 8A041E              <1> 		mov		al, [esi + ebx]					;   EAX  = KEY_BUFF[EBX];
   343                              <1> 												;   
   344 00000B8F 6A046A106A0268-     <1> 		cdecl	itoa, eax, .tmp, 2, 16, 0b0100	;   // キーコードを文字列に変換
   344 00000B96 [C00B0000]50E8DBFB- <1>
   344 00000B9E FFFF6683C414        <1>
   345 00000BA4 68[C00B0000]6A0257- <1> 		cdecl	draw_str, edx, edi, 0x02, .tmp	;   // 変換した文字列を表示
   345 00000BAC 52E82BF9FFFF6683C4- <1>
   345 00000BB5 10                  <1>
   346                              <1> 												;   
   347 00000BB6 83C203              <1> 		add		edx, 3							;   // 表示位置を更新（3文字分）
   348                              <1> 												;   
   349 00000BB9 E2CD                <1> 		loop	.10L							;   
   350                              <1> .10E:											; } while (ECX--);
   351                              <1> 
   352                              <1> 		;---------------------------------------
   353                              <1> 		; 【レジスタの復帰】
   354                              <1> 		;---------------------------------------
   355 00000BBB 61                  <1> 		popa
   356                              <1> 
   357                              <1> 		;---------------------------------------
   358                              <1> 		; 【スタックフレームの破棄】
   359                              <1> 		;---------------------------------------
   360 00000BBC 89EC                <1> 		mov		esp, ebp
   361 00000BBE 5D                  <1> 		pop		ebp
   362                              <1> 
   363 00000BBF C3                  <1> 		ret
   364                              <1> 
   365 00000BC0 2D2D2000            <1> .tmp	db "-- ", 0
   152                                  %include	"../modules/protect/timer.s"
   153                              <1> ;************************************************************************
   154                              <1> ;	タイマーの設定
   155                              <1> ;------------------------------------------------------------------------
   156                              <1> ;	タイマー（カウンタ0）割り込み許可
   157                              <1> ;========================================================================
   158                              <1> ;■書式		: void int_en_timer0(void);
   159                              <1> ;
   160                              <1> ;■引数		: 無し
   161                              <1> ;
   162                              <1> ;■戻り値	: 無し
   163                              <1> ;************************************************************************
   164                              <1> int_en_timer0:
   165                              <1> 		;---------------------------------------
   166                              <1> 		; 【レジスタの保存】
   167                              <1> 		;---------------------------------------
   168 00000BC4 50                  <1> 		push	eax
   169                              <1> 
   170                              <1> 		;---------------------------------------
   171                              <1> 		;	8254 Timer
   172                              <1> 		;	0x2e9c(11932)=10[ms] @ CLK=1,193,182[Hz]
   173                              <1> 		;---------------------------------------
   174                              <1> 		 outp	 0x43, 0b_00_11_010_0			; // カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    69 00000BC5 B034                <2>  mov al, %2
    70 00000BC7 E643                <2>  out %1, al
   175                              <1> 		 outp	 0x40, 0x9C						; // 下位バイト
    69 00000BC9 B09C                <2>  mov al, %2
    70 00000BCB E640                <2>  out %1, al
   176                              <1> 		 outp	 0x40, 0x2E						; // 上位バイト
    69 00000BCD B02E                <2>  mov al, %2
    70 00000BCF E640                <2>  out %1, al
   177                              <1> 
   178                              <1> 		;---------------------------------------
   179                              <1> 		; 【レジスタの復帰】
   180                              <1> 		;---------------------------------------
   181 00000BD1 58                  <1> 		pop		eax
   182                              <1> 
   183 00000BD2 C3                  <1> 		ret
   184                              <1> 
   153                                  %include	"../modules/protect/draw_rotation_bar.s"
   154                              <1> ;************************************************************************
   155                              <1> ;	画面左下に、回転する棒を表示
   156                              <1> ;========================================================================
   157                              <1> ;■書式		: void draw_rotation_bar(void);
   158                              <1> ;
   159                              <1> ;■引数		: 無し
   160                              <1> ;
   161                              <1> ;■戻り値	: 無し
   162                              <1> ;************************************************************************
   163                              <1> draw_rotation_bar:
   164                              <1> 		;---------------------------------------
   165                              <1> 		; 【レジスタの保存】
   166                              <1> 		;---------------------------------------
   167 00000BD3 50                  <1> 		push	eax
   168                              <1> 
   169                              <1> 		;---------------------------------------
   170                              <1> 		; タイマー割り込みカウンタを確認
   171                              <1> 		;---------------------------------------
   172 00000BD4 A1[E8020000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX  = タイマー割り込みカウンタ
   173 00000BD9 C1E804              <1> 		shr		eax, 4							; EAX /= 4;    // 16で除算
   174 00000BDC 3B05[040C0000]      <1> 		cmp		eax, [.index]					; if (EAX != 前回値)
   175 00000BE2 741E                <1> 		je		.10E							; {
   176                              <1> 												;   
   177 00000BE4 A3[040C0000]        <1> 		mov		[.index], eax					;   前回値 = EAX;
   178 00000BE9 83E003              <1> 		and		eax, 0x03						;   EAX &= 0x03; // 0～3に限定
   179                              <1> 												;   
   180 00000BEC 8A80[080C0000]      <1> 		mov		al, [.table + eax]				;   AL = table[index];
   181 00000BF2 506A0F6A1D6A00E8D6- <1> 		cdecl	draw_char, 0, 29, 0x000F, eax	;   draw_char(); // 文字を表示
   181 00000BFB F7FFFF6683C410      <1>
   182                              <1> 												;   
   183                              <1> .10E:											; }
   184                              <1> 
   185                              <1> 		;---------------------------------------
   186                              <1> 		; 【レジスタの復帰】
   187                              <1> 		;---------------------------------------
   188 00000C02 58                  <1> 		pop		eax
   189                              <1> 
   190 00000C03 C3                  <1> 		ret
   191                              <1> 
   192                              <1> ALIGN 4, db 0
   193 00000C04 00000000            <1> .index:		dd 0								; 前回値
   194 00000C08 7C2F2D5C            <1> .table:		db	"|/-\"							; 表示キャラクタ
   195                              <1> 
   154                                  
   155                                  ;************************************************************************
   156                                  ;	パディング
   157                                  ;************************************************************************
   158 00000C0C 00<rep 13F4h>           		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
   159                                  
