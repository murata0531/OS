     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  %define	USE_SYSTEM_CALL
     8                                  %define	USE_TEST_AND_SET
     9                                  
    10                                  ;************************************************************************
    11                                  ;	マクロ
    12                                  ;************************************************************************
    13                                  %include	"../include/define.s"
    14                              <1> ;************************************************************************
    15                              <1> ;	メモリイメージ
    16                              <1> ;************************************************************************
    17                              <1> 
    18                              <1> 		;---------------------------------------
    19                              <1> 		;           |            | 
    20                              <1> 		;           |____________| 
    21                              <1> 		; 0000_7A00 |            | ( 512) スタック
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0000_7C00 |            | (  8K) ブート
    24                              <1> 		;           =            = 
    25                              <1> 		;           |____________| 
    26                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    27                              <1> 		;           =            = 
    28                              <1> 		;           |____________| 
    29                              <1> 		; 0000_BC00 |////////////| 
    30                              <1> 		;           =            = 
    31                              <1> 		;           |____________| 
    32                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    33                              <1> 		;           |____________| 
    34                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    35                              <1> 		;           |____________| 
    36                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    37                              <1> 		;           |            | 
    38                              <1> 		;           =            = 
    39                              <1> 		;           |____________| 
    40                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    41                              <1> 		;           |            | （各タスク1K）
    42                              <1> 		;           =            = 
    43                              <1> 		;           |____________| 
    44                              <1> 		; 0010_5000 |            | Dir
    45                              <1> 		;      6000 |____________| Page
    46                              <1> 		; 0010_7000 |            | Dir
    47                              <1> 		;      8000 |____________| Page
    48                              <1> 		; 0010_9000 |////////////| 
    49                              <1> 		;           |            | 
    50                              <1> 
    51                              <1> 
    52                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    53                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    54                              <1> 
    55                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    56                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    57                              <1> 
    58                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    59                              <1> 
    60                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    61                              <1> 
    62                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    63                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    64                              <1> 
    65                              <1> 		E820_RECORD_SIZE	equ		20
    66                              <1> 
    67                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    68                              <1> 
    69                              <1> 		STACK_BASE			equ		0x0010_3000		; タスク用スタックエリア
    70                              <1> 		STACK_SIZE			equ		1024			; スタックサイズ
    71                              <1> 
    72                              <1> 		SP_TASK_0			equ		STACK_BASE + (STACK_SIZE * 1)
    73                              <1> 		SP_TASK_1			equ		STACK_BASE + (STACK_SIZE * 2)
    14                                  %include	"../include/macro.s"
    15                              <1> ;************************************************************************
    16                              <1> ; 関数呼び出し用マクロ
    17                              <1> ;
    18                              <1> ; 使い方：
    19                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    20                              <1> ;
    21                              <1> ;************************************************************************
    22                              <1> %macro  cdecl 1-*.nolist
    23                              <1> 
    24                              <1> 	%rep  %0 - 1
    25                              <1> 		push	%{-1:-1}
    26                              <1> 		%rotate -1
    27                              <1> 	%endrep 
    28                              <1> 	%rotate -1
    29                              <1> 
    30                              <1> 		call	%1
    31                              <1> 
    32                              <1> 	%if 1 < %0
    33                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    34                              <1> 	%endif
    35                              <1> 
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> ;************************************************************************
    39                              <1> ; 割り込みベクタ設定用
    40                              <1> ;
    41                              <1> ; 使い方：
    42                              <1> ;	set_vect	ベクタ番号, 割り込み処理 [, フラグ]
    43                              <1> ;
    44                              <1> ;************************************************************************
    45                              <1> %macro  set_vect 1-*.nolist
    46                              <1> 		push	eax
    47                              <1> 		push	edi
    48                              <1> 
    49                              <1> 		mov		edi, VECT_BASE + (%1 * 8)		; ベクタアドレス;
    50                              <1> 		mov		eax, %2
    51                              <1> 
    52                              <1> 	%if 3 == %0
    53                              <1> 		mov		[edi + 4], %3					; フラグ
    54                              <1> 	%endif
    55                              <1> 
    56                              <1> 		mov		[edi + 0], ax					; 例外アドレス[15: 0]
    57                              <1> 		shr		eax, 16							; 
    58                              <1> 		mov		[edi + 6], ax					; 例外アドレス[31:16]
    59                              <1> 
    60                              <1> 		pop		edi
    61                              <1> 		pop		eax
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> ;************************************************************************
    65                              <1> ; ポート出力用
    66                              <1> ;
    67                              <1> ; 使い方：
    68                              <1> ;	outp	ポート番号, 出力値
    69                              <1> ;
    70                              <1> ;************************************************************************
    71                              <1> %macro  outp 2
    72                              <1> 		mov		al, %2
    73                              <1> 		out		%1, al
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> ;************************************************************************
    77                              <1> ; ディスクリプタの情報を設定
    78                              <1> ;
    79                              <1> ; 使い方：
    80                              <1> ;	set_desc	ディスクリプタ, ベース
    81                              <1> ;
    82                              <1> ;************************************************************************
    83                              <1> %macro  set_desc 2-* 
    84                              <1> 		push	eax
    85                              <1> 		push	edi
    86                              <1> 
    87                              <1> 		mov		edi, %1							; ディスクリプタアドレス
    88                              <1> 		mov		eax, %2							; ベースアドレス
    89                              <1> 
    90                              <1> 	%if 3 == %0
    91                              <1> 		mov		[edi + 0], %3					; リミット
    92                              <1> 	%endif
    93                              <1> 
    94                              <1> 		mov		[edi + 2], ax					; ベース（[15: 0]）
    95                              <1> 		shr		eax, 16							; 
    96                              <1> 		mov		[edi + 4], al					; ベース（[23:16]）
    97                              <1> 		mov		[edi + 7], ah					; ベース（[31:24]）
    98                              <1> 
    99                              <1> 		pop		edi
   100                              <1> 		pop		eax
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> ;************************************************************************
   104                              <1> ; ゲートディスクリプタのオフセットを設定
   105                              <1> ;
   106                              <1> ; 使い方：
   107                              <1> ;	set_gate	ディスクリプタ, オフセット
   108                              <1> ;
   109                              <1> ;************************************************************************
   110                              <1> %macro  set_gate 2-* 
   111                              <1> 		push	eax
   112                              <1> 		push	edi
   113                              <1> 
   114                              <1> 		mov		edi, %1							; ディスクリプタアドレス
   115                              <1> 		mov		eax, %2							; ベースアドレス
   116                              <1> 
   117                              <1> 		mov		[edi + 0], ax					; ベース（[15: 0]）
   118                              <1> 		shr		eax, 16							; 
   119                              <1> 		mov		[edi + 6], ax					; ベース（[31:16]）
   120                              <1> 
   121                              <1> 		pop		edi
   122                              <1> 		pop		eax
   123                              <1> %endmacro
   124                              <1> 
   125                              <1> ;************************************************************************
   126                              <1> ;	構造体
   127                              <1> ;************************************************************************
   128                              <1> 
   129                              <1> ;-----------------------------------------------
   130                              <1> ;	ドライブパラメータ
   131                              <1> ;-----------------------------------------------
   132                              <1> struc drive
   133 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
   134 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
   135 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
   136 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
   137                              <1> endstruc
   138                              <1> 
   139                              <1> ;-----------------------------------------------
   140                              <1> ;	リングバッファ
   141                              <1> ;-----------------------------------------------
   142                              <1> %define		RING_ITEM_SIZE		(1 << 4)
   143                              <1> %define		RING_INDEX_MASK		(RING_ITEM_SIZE - 1)
   144                              <1> 
   145                              <1> struc ring_buff
   146 00000000 ????????            <1> 		.rp				resd	1				; RP:書き込み位置
   147 00000004 ????????            <1> 		.wp				resd	1				; WP:読み込み位置
   148 00000008 <res 10h>           <1> 		.item			resb	RING_ITEM_SIZE	; バッファ
   149                              <1> endstruc
   150                              <1> 
   151                              <1> ;-----------------------------------------------
   152                              <1> ;	バラ曲線描画パラメータ
   153                              <1> ;-----------------------------------------------
   154                              <1> struc rose
   155 00000000 ????????            <1> 		.x0				resd	1				; 左上座標：X0
   156 00000004 ????????            <1> 		.y0				resd	1				; 左上座標：Y0
   157 00000008 ????????            <1> 		.x1				resd	1				; 右下座標：X1
   158 0000000C ????????            <1> 		.y1				resd	1				; 右下座標：Y1
   159                              <1> 
   160 00000010 ????????            <1> 		.n				resd	1				; 変数：n
   161 00000014 ????????            <1> 		.d				resd	1				; 変数：d
   162                              <1> 
   163 00000018 ????????            <1> 		.color_x		resd	1				; 描画色：X軸
   164 0000001C ????????            <1> 		.color_y		resd	1				; 描画色：Y軸
   165 00000020 ????????            <1> 		.color_z		resd	1				; 描画色：枠
   166 00000024 ????????            <1> 		.color_s		resd	1				; 描画色：文字
   167 00000028 ????????            <1> 		.color_f		resd	1				; 描画色：グラフ描画色
   168 0000002C ????????            <1> 		.color_b		resd	1				; 描画色：グラフ消去色
   169                              <1> 
   170 00000030 <res 10h>           <1> 		.title			resb	16				; タイトル
   171                              <1> endstruc
   172                              <1> 
    15                                  
    16                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    17                                  
    18                                  [BITS 32]
    19                                  ;************************************************************************
    20                                  ;	エントリポイント
    21                                  ;************************************************************************
    22                                  kernel:
    23                                  		;---------------------------------------
    24                                  		; フォントアドレスを取得
    25                                  		;---------------------------------------
    26 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    27 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    28 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    29 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    30 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    31 00000011 A3[D0010000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    32                                  
    33                                  		;---------------------------------------
    34                                  		; TSSディスクリプタの設定
    35                                  		;---------------------------------------
    36                                  		set_desc	GDT.tss_0, TSS_0			; // タスク0用TSSの設定
    84 00000016 50                  <1>  push eax
    85 00000017 57                  <1>  push edi
    86                              <1> 
    87 00000018 BF[C8020000]        <1>  mov edi, %1
    88 0000001D B8[D8010000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000022 66894702            <1>  mov [edi + 2], ax
    95 00000026 C1E810              <1>  shr eax, 16
    96 00000029 884704              <1>  mov [edi + 4], al
    97 0000002C 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 0000002F 5F                  <1>  pop edi
   100 00000030 58                  <1>  pop eax
    37                                  		set_desc	GDT.tss_1, TSS_1			; // タスク1用TSSの設定
    84 00000031 50                  <1>  push eax
    85 00000032 57                  <1>  push edi
    86                              <1> 
    87 00000033 BF[D0020000]        <1>  mov edi, %1
    88 00000038 B8[40020000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 0000003D 66894702            <1>  mov [edi + 2], ax
    95 00000041 C1E810              <1>  shr eax, 16
    96 00000044 884704              <1>  mov [edi + 4], al
    97 00000047 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 0000004A 5F                  <1>  pop edi
   100 0000004B 58                  <1>  pop eax
    38                                  
    39                                  		;---------------------------------------
    40                                  		; コールゲートの設定
    41                                  		;---------------------------------------
    42                                  		set_gate	GDT.call_gate, call_gate	; // コールゲートの設定
   111 0000004C 50                  <1>  push eax
   112 0000004D 57                  <1>  push edi
   113                              <1> 
   114 0000004E BF[D8020000]        <1>  mov edi, %1
   115 00000053 B8[900C0000]        <1>  mov eax, %2
   116                              <1> 
   117 00000058 668907              <1>  mov [edi + 0], ax
   118 0000005B C1E810              <1>  shr eax, 16
   119 0000005E 66894706            <1>  mov [edi + 6], ax
   120                              <1> 
   121 00000062 5F                  <1>  pop edi
   122 00000063 58                  <1>  pop eax
    43                                  
    44                                  		;---------------------------------------
    45                                  		; LDTの設定
    46                                  		;---------------------------------------
    47                                  		set_desc	GDT.ldt, LDT, word LDT_LIMIT
    84 00000064 50                  <1>  push eax
    85 00000065 57                  <1>  push edi
    86                              <1> 
    87 00000066 BF[C0020000]        <1>  mov edi, %1
    88 0000006B B8[E6020000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91 00000070 66C7072700          <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000075 66894702            <1>  mov [edi + 2], ax
    95 00000079 C1E810              <1>  shr eax, 16
    96 0000007C 884704              <1>  mov [edi + 4], al
    97 0000007F 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 00000082 5F                  <1>  pop edi
   100 00000083 58                  <1>  pop eax
    48                                  
    49                                  		;---------------------------------------
    50                                  		; GDTをロード（再設定）
    51                                  		;---------------------------------------
    52 00000084 0F0115[E0020000]        		lgdt	[GDTR]							; // グローバルディスクリプタテーブルをロード
    53                                  
    54                                  		;---------------------------------------
    55                                  		; スタックの設定
    56                                  		;---------------------------------------
    57 0000008B BC00341000              		mov		esp, SP_TASK_0					; // タスク0用のスタックを設定
    58                                  
    59                                  		;---------------------------------------
    60                                  		; タスクレジスタの初期化
    61                                  		;---------------------------------------
    62 00000090 66B82000                		mov		ax, SS_TASK_0
    63 00000094 0F00D8                  		ltr		ax								; // タスクレジスタの設定
    64                                  
    65                                  		;---------------------------------------
    66                                  		; 初期化
    67                                  		;---------------------------------------
    68 00000097 E8CA080000              		cdecl	init_int						; // 割り込みベクタの初期化
    69 0000009C E84B0A0000              		cdecl	init_pic						; // 割り込みコントローラの初期化
    70                                  
    71 000000A1 5057BF00001000B8-       		set_vect	0x00, int_zero_div			; // 割り込み処理の登録：0除算
    71 000000A9 [CE0A0000]668907C1-
    71 000000B1 E810668947065F58   
    72 000000B9 5057BF00011000B8-       		set_vect	0x20, int_timer				; // 割り込み処理の登録：タイマー
    72 000000C1 [0E030000]668907C1-
    72 000000C9 E810668947065F58   
    73 000000D1 5057BF08011000B8-       		set_vect	0x21, int_keyboard			; // 割り込み処理の登録：KBC
    73 000000D9 [560B0000]668907C1-
    73 000000E1 E810668947065F58   
    74 000000E9 5057BF40011000B8-       		set_vect	0x28, int_rtc				; // 割り込み処理の登録：RTC
    74 000000F1 [2B0B0000]668907C1-
    74 000000F9 E810668947065F58   
    75 00000101 5057BF08041000B8-       		set_vect	0x81, trap_gate_81, word 0xEF00	; // トラップゲートの登録：1文字出力
    75 00000109 [C00C0000]66C74704-
    75 00000111 00EF668907C1E81066-
    75 0000011A 8947065F58         
    76 0000011F 5057BF10041000B8-       		set_vect	0x82, trap_gate_82, word 0xEF00	; // トラップゲートの登録：点の描画
    76 00000127 [CE0C0000]66C74704-
    76 0000012F 00EF668907C1E81066-
    76 00000138 8947065F58         
    77                                  
    78                                  		;---------------------------------------
    79                                  		; デバイスの割り込み許可
    80                                  		;---------------------------------------
    81 0000013D 6A10E8D30900006683-     		cdecl	rtc_int_en, 0x10				; rtc_int_en(UIE); // 更新サイクル終了割り込み許可
    81 00000146 C404               
    82 00000148 E8FB0A0000              		cdecl	int_en_timer0					; // タイマー（カウンタ0）割り込み許可
    83                                  
    84                                  		;---------------------------------------
    85                                  		; IMR(割り込みマスクレジスタ)の設定
    86                                  		;---------------------------------------
    87                                  		outp	0x21, 0b_1111_1000				; // 割り込み有効：スレーブPIC/KBC/タイマー
    72 0000014D B0F8                <1>  mov al, %2
    73 0000014F E621                <1>  out %1, al
    88                                  		outp	0xA1, 0b_1111_1110				; // 割り込み有効：RTC
    72 00000151 B0FE                <1>  mov al, %2
    73 00000153 E6A1                <1>  out %1, al
    89                                  
    90                                  		;---------------------------------------
    91                                  		; CPUの割り込み許可
    92                                  		;---------------------------------------
    93 00000155 FB                      		sti										; // 割り込み許可
    94                                  
    95                                  		;---------------------------------------
    96                                  		; フォントの一覧表示
    97                                  		;---------------------------------------
    98 00000156 6A0D6A3FE8B1030000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
    98 0000015F 6683C408           
    99 00000163 6A046A3FE827040000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
    99 0000016C 6683C408           
   100                                  
   101                                  		;---------------------------------------
   102                                  		; 文字列の表示
   103                                  		;---------------------------------------
   104 00000170 68[B8010000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
   104 00000178 00006A0E6A19E8D203-
   104 00000181 00006683C410       
   105                                  
   106                                  .10L:											; while (;;)
   107                                  												; {
   108                                  		;---------------------------------------
   109                                  		; 回転する棒を表示
   110                                  		;---------------------------------------
   111 00000187 E8CB0A0000              		cdecl	draw_rotation_bar				;   // 回転する棒を表示
   112                                  
   113                                  		;---------------------------------------
   114                                  		; キーコードの取得
   115                                  		;---------------------------------------
   116 0000018C 68[CC010000]68-         		cdecl	ring_rd, _KEY_BUFF, .int_key	;   EAX = ring_rd(buff, &int_key);
   116 00000192 [7C0B0000]E8F90900-
   116 0000019A 006683C408         
   117 0000019F 83F800                  		cmp		eax, 0							;   if (EAX == 0)
   118 000001A2 7412                    		je		.10E							;   {
   119                                  												;   
   120                                  		;---------------------------------------
   121                                  		; キーコードの表示
   122                                  		;---------------------------------------
   123 000001A4 68[7C0B0000]6A1D6A-     		cdecl	draw_key, 2, 29, _KEY_BUFF		;     ring_show(key_buff); // 全要素を表示
   123 000001AC 02E8430A00006683C4-
   123 000001B5 0C                 
   124                                  .10E:											;   }
   125 000001B6 EBCF                    		jmp		.10L							; }
   126                                  
   127 000001B8 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
   127 000001C1 65726E656C212000   
   128                                  
   129 000001C9 00<rep 3h>              ALIGN 4, db 0
   130 000001CC 00000000                .int_key:	dd	0
   131                                  
   132                                  ALIGN 4, db 0
   133 000001D0 00000000                FONT_ADR:	dd	0
   134 000001D4 00000000                RTC_TIME:	dd	0
   135                                  
   136                                  ;************************************************************************
   137                                  ;	タスク
   138                                  ;************************************************************************
   139                                  %include	"descriptor.s"
   140                              <1> ;************************************************************************
   141                              <1> ;	TSS
   142                              <1> ;************************************************************************
   143                              <1> TSS_0:
   144 000001D8 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   145 000001DC 00321000            <1> .esp0:			dd	SP_TASK_0 - 512				;*  4:ESP0
   146 000001E0 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   147 000001E4 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   148 000001E8 00000000            <1> .ss1:			dd	0							;* 16:
   149 000001EC 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   150 000001F0 00000000            <1> .ss2:			dd	0							;* 24:
   151 000001F4 00000000            <1> .cr3:			dd	0							;  28:CR3(PDBR)
   152 000001F8 00000000            <1> .eip:			dd	0							;  32:EIP
   153 000001FC 00000000            <1> .eflags:		dd	0							;  36:EFLAGS
   154 00000200 00000000            <1> .eax:			dd	0							;  40:EAX
   155 00000204 00000000            <1> .ecx:			dd	0							;  44:ECX
   156 00000208 00000000            <1> .edx:			dd	0							;  48:EDX
   157 0000020C 00000000            <1> .ebx:			dd	0							;  52:EBX
   158 00000210 00000000            <1> .esp:			dd	0							;  56:ESP
   159 00000214 00000000            <1> .ebp:			dd	0							;  60:EBP
   160 00000218 00000000            <1> .esi:			dd	0							;  64:ESI
   161 0000021C 00000000            <1> .edi:			dd	0							;  68:EDI
   162 00000220 00000000            <1> .es:			dd	0							;  72:ES
   163 00000224 00000000            <1> .cs:			dd	0							;  76:CS
   164 00000228 00000000            <1> .ss:			dd	0							;  80:SS
   165 0000022C 00000000            <1> .ds:			dd	0							;  84:DS
   166 00000230 00000000            <1> .fs:			dd	0							;  88:FS
   167 00000234 00000000            <1> .gs:			dd	0							;  92:GS
   168 00000238 00000000            <1> .ldt:			dd	0							;* 96:LDTセグメントセレクタ
   169 0000023C 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   170                              <1> 
   171                              <1> TSS_1:
   172 00000240 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   173 00000244 00361000            <1> .esp0:			dd	SP_TASK_1 - 512				;*  4:ESP0
   174 00000248 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   175 0000024C 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   176 00000250 00000000            <1> .ss1:			dd	0							;* 16:
   177 00000254 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   178 00000258 00000000            <1> .ss2:			dd	0							;* 24:
   179 0000025C 00000000            <1> .cr3:			dd	0							;  28:CR3(PDBR)
   180 00000260 [48030000]          <1> .eip:			dd	task_1						;  32:EIP
   181 00000264 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   182 00000268 00000000            <1> .eax:			dd	0							;  40:EAX
   183 0000026C 00000000            <1> .ecx:			dd	0							;  44:ECX
   184 00000270 00000000            <1> .edx:			dd	0							;  48:EDX
   185 00000274 00000000            <1> .ebx:			dd	0							;  52:EBX
   186 00000278 00381000            <1> .esp:			dd	SP_TASK_1					;  56:ESP
   187 0000027C 00000000            <1> .ebp:			dd	0							;  60:EBP
   188 00000280 00000000            <1> .esi:			dd	0							;  64:ESI
   189 00000284 00000000            <1> .edi:			dd	0							;  68:EDI
   190 00000288 27000000            <1> .es:			dd	DS_TASK_1					;  72:ES
   191 0000028C 1F000000            <1> .cs:			dd	CS_TASK_1					;  76:CS
   192 00000290 27000000            <1> .ss:			dd	DS_TASK_1					;  80:SS
   193 00000294 27000000            <1> .ds:			dd	DS_TASK_1					;  84:DS
   194 00000298 27000000            <1> .fs:			dd	DS_TASK_1					;  88:FS
   195 0000029C 27000000            <1> .gs:			dd	DS_TASK_1					;  92:GS
   196 000002A0 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   197 000002A4 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   198                              <1> 
   199                              <1> 
   200                              <1> ;************************************************************************
   201                              <1> ;	グローバルディスクリプタテーブル
   202                              <1> ;************************************************************************
   203 000002A8 0000000000000000    <1> GDT:			dq	0x0000000000000000			; NULL
   204 000002B0 FFFF0000009ACF00    <1> .cs_kernel:		dq	0x00CF9A000000FFFF			; CODE 4G
   205 000002B8 FFFF00000092CF00    <1> .ds_kernel:		dq	0x00CF92000000FFFF			; DATA 4G
   206 000002C0 0000000000820000    <1> .ldt			dq	0x0000820000000000			; LDTディスクリプタ
   207 000002C8 6700000000890000    <1> .tss_0:			dq	0x0000890000000067			; TSSディスクリプタ
   208 000002D0 6700000000890000    <1> .tss_1:			dq	0x0000890000000067			; TSSディスクリプタ
   209 000002D8 0000080004EC0000    <1> .call_gate:		dq	0x0000EC0400080000			; 386コールゲート(DPL=3, count=4, SEL=8)
   210                              <1> .end:
   211                              <1> 
   212                              <1> CS_KERNEL		equ	.cs_kernel	- GDT
   213                              <1> DS_KERNEL		equ	.ds_kernel	- GDT
   214                              <1> SS_LDT			equ	.ldt		- GDT
   215                              <1> SS_TASK_0		equ	.tss_0		- GDT
   216                              <1> SS_TASK_1		equ	.tss_1		- GDT
   217                              <1> SS_GATE_0		equ	.call_gate	- GDT
   218                              <1> 
   219 000002E0 3700                <1> GDTR:	dw 		GDT.end - GDT - 1
   220 000002E2 [A8020000]          <1> 		dd 		GDT
   221                              <1> 
   222                              <1> 
   223                              <1> ;************************************************************************
   224                              <1> ;	ローカルディスクリプタテーブル
   225                              <1> ;************************************************************************
   226 000002E6 0000000000000000    <1> LDT:			dq	0x0000000000000000			; NULL
   227 000002EE FFFF0000009ACF00    <1> .cs_task_0:		dq	0x00CF9A000000FFFF			; CODE 4G
   228 000002F6 FFFF00000092CF00    <1> .ds_task_0:		dq	0x00CF92000000FFFF			; DATA 4G
   229 000002FE FFFF000000FACF00    <1> .cs_task_1:		dq	0x00CFFA000000FFFF			; CODE 4G
   230 00000306 FFFF000000F2CF00    <1> .ds_task_1:		dq	0x00CFF2000000FFFF			; DATA 4G
   231                              <1> .end:
   232                              <1> 
   233                              <1> CS_TASK_0		equ	(.cs_task_0 - LDT) | 4		; タスク0用CSセレクタ
   234                              <1> DS_TASK_0		equ	(.ds_task_0 - LDT) | 4		; タスク0用DSセレクタ
   235                              <1> CS_TASK_1		equ	(.cs_task_1 - LDT) | 4 | 3	; タスク1用CSセレクタ
   236                              <1> DS_TASK_1		equ	(.ds_task_1 - LDT) | 4 | 3	; タスク1用DSセレクタ
   237                              <1> 
   238                              <1> LDT_LIMIT		equ	.end		- LDT - 1
   239                              <1> 
   240                              <1> 
   140                                  %include	"modules/int_timer.s"
   141                              <1> ;************************************************************************
   142                              <1> ;	例外:タイマー
   143                              <1> ;************************************************************************
   144                              <1> int_timer:
   145                              <1> 		;---------------------------------------
   146                              <1> 		; 【レジスタの保存】
   147                              <1> 		;---------------------------------------
   148 0000030E 60                  <1> 		pusha
   149 0000030F 1E                  <1> 		push	ds
   150 00000310 06                  <1> 		push	es
   151                              <1> 
   152                              <1> 		;---------------------------------------
   153                              <1> 		; データ用セグメントの設定
   154                              <1> 		;---------------------------------------
   155 00000311 66B81000            <1> 		mov		ax, 0x0010						; 
   156 00000315 8ED8                <1> 		mov		ds, ax							; 
   157 00000317 8EC0                <1> 		mov		es, ax							; 
   158                              <1> 
   159                              <1> 		;---------------------------------------
   160                              <1> 		; TICK
   161                              <1> 		;---------------------------------------
   162 00000319 FF05[44030000]      <1> 		inc		dword [TIMER_COUNT]				; TIMER_COUNT++; // 割り込み回数の更新
   163                              <1> 
   164                              <1> 		;---------------------------------------
   165                              <1> 		; 割り込みフラグをクリア(EOI)
   166                              <1> 		;---------------------------------------
   167                              <1> 		outp	0x20, 0x20						; // マスタPIC:EOIコマンド
    72 0000031F B020                <2>  mov al, %2
    73 00000321 E620                <2>  out %1, al
   168                              <1> 
   169                              <1> 		;---------------------------------------
   170                              <1> 		; タスクの切り替え
   171                              <1> 		;---------------------------------------
   172 00000323 660F00C8            <1> 		str		ax								; AX = TR; // 現在のタスクレジスタ
   173 00000327 6683F820            <1> 		cmp		ax, SS_TASK_0					; case (AX)
   174 0000032B 7409                <1> 		je		.11L							; {
   175                              <1> 												;   default:
   176 0000032D EA000000002000      <1> 		jmp		SS_TASK_0:0						;     // タスク0に切り替え
   177 00000334 EB09                <1> 		jmp		.10E							;     break;
   178                              <1> 												;     
   179                              <1> .11L:											;   case SS_TASK_0:
   180 00000336 EA000000002800      <1> 		jmp		SS_TASK_1:0						;     // タスク1に切り替え
   181 0000033D EB00                <1> 		jmp		.10E							;     break;
   182                              <1> .10E:											; }
   183                              <1> 
   184                              <1> 		;---------------------------------------
   185                              <1> 		; 【レジスタの復帰】
   186                              <1> 		;---------------------------------------
   187 0000033F 07                  <1> 		pop		es								; 
   188 00000340 1F                  <1> 		pop		ds								; 
   189 00000341 61                  <1> 		popa
   190                              <1> 
   191 00000342 CF                  <1> 		iret
   192                              <1> 
   193 00000343 00                  <1> ALIGN 4, db 0
   194 00000344 00000000            <1> TIMER_COUNT:	dd	0
   195                              <1> 
   141                                  %include	"tasks/task_1.s"
   142                              <1> ;************************************************************************
   143                              <1> ;	TASK-1
   144                              <1> ;************************************************************************
   145                              <1> task_1:
   146                              <1> 		;---------------------------------------
   147                              <1> 		; 文字列の表示
   148                              <1> 		;---------------------------------------
   149 00000348 68[76030000]6A076A- <1> 		cdecl	draw_str, 63, 0, 0x07, .s0		; draw_str();
   149 00000350 006A3FE8FD01000066- <1>
   149 00000359 83C410              <1>
   150                              <1> 
   151                              <1> .10L:											; while (;;)
   152                              <1> 												; {
   153                              <1> 		;---------------------------------------
   154                              <1> 		; 時刻の表示
   155                              <1> 		;---------------------------------------
   156 0000035C A1[D4010000]        <1> 		mov		eax, [RTC_TIME]					;   // 時刻の取得
   157 00000361 5068000700006A006A- <1> 		cdecl	draw_time, 72, 0, 0x0700, eax	;   // 時刻の表示
   157 0000036A 48E8570500006683C4- <1>
   157 00000373 10                  <1>
   158                              <1> 
   159 00000374 EBE6                <1> 		jmp		.10L							; }
   160                              <1> 
   161                              <1> 		;---------------------------------------
   162                              <1> 		; データ
   163                              <1> 		;---------------------------------------
   164 00000376 5461736B2D3100      <1> .s0		db	"Task-1", 0
   165                              <1> 
   142                                  
   143                                  ;************************************************************************
   144                                  ;	モジュール
   145                                  ;************************************************************************
   146                                  %include	"../modules/protect/vga.s"
   147                              <1> ;************************************************************************
   148                              <1> ;	読み込みプレーンの選択
   149                              <1> ;========================================================================
   150                              <1> ;■書式		: void vga_set_read_plane(plane);
   151                              <1> ;
   152                              <1> ;■引数
   153                              <1> ;	plane	: 読み込みプレーン
   154                              <1> ;
   155                              <1> ;■戻り値	: 無し
   156                              <1> ;************************************************************************
   157                              <1> vga_set_read_plane:
   158                              <1> 		;---------------------------------------
   159                              <1> 		; 【スタックフレームの構築】
   160                              <1> 		;---------------------------------------
   161                              <1> 												; EBP+ 8| プレーン（インデックス）
   162                              <1> 												; ------+----------------
   163 0000037D 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   164 0000037E 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   165                              <1> 												; ------+----------------
   166                              <1> 
   167                              <1> 		;---------------------------------------
   168                              <1> 		; 【レジスタの保存】
   169                              <1> 		;---------------------------------------
   170 00000380 50                  <1> 		push	eax
   171 00000381 52                  <1> 		push	edx
   172                              <1> 
   173                              <1> 		;---------------------------------------
   174                              <1> 		; 読み込みプレーンの選択
   175                              <1> 		;---------------------------------------
   176 00000382 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
   177 00000385 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
   178 00000388 B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
   179 0000038A 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
   180 0000038E 66EF                <1> 		out		dx, ax							; // ポート出力
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; 【レジスタの復帰】
   184                              <1> 		;---------------------------------------
   185 00000390 5A                  <1> 		pop		edx
   186 00000391 58                  <1> 		pop		eax
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 【スタックフレームの破棄】
   190                              <1> 		;---------------------------------------
   191 00000392 89EC                <1> 		mov		esp, ebp
   192 00000394 5D                  <1> 		pop		ebp
   193                              <1> 
   194 00000395 C3                  <1> 		ret
   195                              <1> 
   196                              <1> 
   197                              <1> ;************************************************************************
   198                              <1> ;	書き込みプレーンを選択
   199                              <1> ;========================================================================
   200                              <1> ;■書式		: void vga_set_write_plane(plane);
   201                              <1> ;
   202                              <1> ;■引数
   203                              <1> ;	plane	: 書き込みプレーン
   204                              <1> ;
   205                              <1> ;■戻り値	: 無し
   206                              <1> ;************************************************************************
   207                              <1> vga_set_write_plane:
   208                              <1> 		;---------------------------------------
   209                              <1> 		; 【スタックフレームの構築】
   210                              <1> 		;---------------------------------------
   211                              <1> 												; EBP+ 8| プレーン（ビット指定）
   212                              <1> 												; ------+----------------
   213 00000396 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   214 00000397 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   215                              <1> 												; ------+----------------
   216                              <1> 
   217                              <1> 		;---------------------------------------
   218                              <1> 		; 【レジスタの保存】
   219                              <1> 		;---------------------------------------
   220 00000399 50                  <1> 		push	eax
   221 0000039A 52                  <1> 		push	edx
   222                              <1> 
   223                              <1> 		;---------------------------------------
   224                              <1> 		; 書き込みプレーンの選択
   225                              <1> 		;---------------------------------------
   226 0000039B 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
   227 0000039E 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
   228 000003A1 B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
   229 000003A3 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
   230 000003A7 66EF                <1> 		out		dx, ax							; // ポート出力
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; 【レジスタの復帰】
   234                              <1> 		;---------------------------------------
   235 000003A9 5A                  <1> 		pop		edx
   236 000003AA 58                  <1> 		pop		eax
   237                              <1> 
   238                              <1> 		;---------------------------------------
   239                              <1> 		; 【スタックフレームの破棄】
   240                              <1> 		;---------------------------------------
   241 000003AB 89EC                <1> 		mov		esp, ebp
   242 000003AD 5D                  <1> 		pop		ebp
   243                              <1> 
   244 000003AE C3                  <1> 		ret
   245                              <1> 
   246                              <1> 
   247                              <1> ;************************************************************************
   248                              <1> ;	フォントの書き込み
   249                              <1> ;========================================================================
   250                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   251                              <1> ;
   252                              <1> ;■引数
   253                              <1> ;	font	: FONTアドレス
   254                              <1> ;	vram	: VRAMアドレス
   255                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   256                              <1> ;	color	: 描画色
   257                              <1> ;
   258                              <1> ;■戻り値	: 無し
   259                              <1> ;************************************************************************
   260                              <1> vram_font_copy:
   261                              <1> 		;---------------------------------------
   262                              <1> 		; 【スタックフレームの構築】
   263                              <1> 		;---------------------------------------
   264                              <1> 												; EBP+20| 色（背景/前景色）
   265                              <1> 												; EBP+16| プレーン（ビット指定）
   266                              <1> 												; EBP+12| VRAMアドレス
   267                              <1> 												; EBP+ 8| FONTアドレス
   268                              <1> 												; ------+----------------
   269 000003AF 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   270 000003B0 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   271                              <1> 												; ------+----------------
   272                              <1> 
   273                              <1> 		;---------------------------------------
   274                              <1> 		; 【レジスタの保存】
   275                              <1> 		;---------------------------------------
   276 000003B2 50                  <1> 		push	eax
   277 000003B3 53                  <1> 		push	ebx
   278 000003B4 51                  <1> 		push	ecx
   279 000003B5 52                  <1> 		push	edx
   280 000003B6 56                  <1> 		push	esi
   281 000003B7 57                  <1> 		push	edi
   282                              <1> 
   283                              <1> 		;---------------------------------------
   284                              <1> 		; 【処理の開始】
   285                              <1> 		;---------------------------------------
   286 000003B8 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   287 000003BB 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   288 000003BE 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   289 000003C2 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   290                              <1> 
   291 000003C6 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   292 000003C8 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   293 000003CB FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   294                              <1> 
   295 000003CD 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   296 000003CF 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   297 000003D2 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   298                              <1> 
   299                              <1> 		;---------------------------------------
   300                              <1> 		; 16ドットフォントのコピー
   301                              <1> 		;---------------------------------------
   302 000003D4 FC                  <1> 		cld										; DF  = 0; // アドレス加算
   303                              <1> 
   304 000003D5 B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   305                              <1> .10L:											; do
   306                              <1> 												; {
   307                              <1> 		;---------------------------------------
   308                              <1> 		; フォントマスクの作成
   309                              <1> 		;---------------------------------------
   310 000003DA AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   311 000003DB 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   312 000003DD F6D4                <1> 		not		ah								;   
   313                              <1> 
   314                              <1> 		;---------------------------------------
   315                              <1> 		; 前景色
   316                              <1> 		;---------------------------------------
   317 000003DF 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   318                              <1> 
   319                              <1> 		;---------------------------------------
   320                              <1> 		; 背景色
   321                              <1> 		;---------------------------------------
   322 000003E1 F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   323 000003E7 7404                <1> 		jz		.11F							;   {
   324 000003E9 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   325 000003EB EB02                <1> 		jmp		.11E							;   }
   326                              <1> .11F:											;   else
   327                              <1> 												;   {
   328 000003ED 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   329                              <1> .11E:											;   }
   330                              <1> 
   331                              <1> 		;---------------------------------------
   332                              <1> 		; 前景色と背景色を合成
   333                              <1> 		;---------------------------------------
   334 000003EF 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   335                              <1> 
   336                              <1> 		;---------------------------------------
   337                              <1> 		; 新しい値を出力
   338                              <1> 		;---------------------------------------
   339 000003F1 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   340                              <1> 
   341 000003F3 83C750              <1> 		add		edi, 80							;   EDI += 80;
   342 000003F6 E2E2                <1> 		loop	.10L							; } while (--ECX);
   343                              <1> .10E:											; 
   344                              <1> 
   345                              <1> 		;---------------------------------------
   346                              <1> 		; 【レジスタの復帰】
   347                              <1> 		;---------------------------------------
   348 000003F8 5F                  <1> 		pop		edi
   349 000003F9 5E                  <1> 		pop		esi
   350 000003FA 5A                  <1> 		pop		edx
   351 000003FB 59                  <1> 		pop		ecx
   352 000003FC 5B                  <1> 		pop		ebx
   353 000003FD 58                  <1> 		pop		eax
   354                              <1> 
   355                              <1> 		;---------------------------------------
   356                              <1> 		; 【スタックフレームの破棄】
   357                              <1> 		;---------------------------------------
   358 000003FE 89EC                <1> 		mov		esp, ebp
   359 00000400 5D                  <1> 		pop		ebp
   360                              <1> 
   361 00000401 C3                  <1> 		ret
   362                              <1> 
   363                              <1> 
   364                              <1> ;************************************************************************
   365                              <1> ;	ビットパターンの書き込み
   366                              <1> ;========================================================================
   367                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   368                              <1> ;
   369                              <1> ;■引数
   370                              <1> ;	bit		: 出力ビットパターン
   371                              <1> ;	vram	: VRAMアドレス
   372                              <1> ;	flag	: 1:セット, 0:クリア
   373                              <1> ;
   374                              <1> ;■戻り値	: 無し
   375                              <1> ;************************************************************************
   376                              <1> vram_bit_copy:
   377                              <1> 		;---------------------------------------
   378                              <1> 		; 【スタックフレームの構築】
   379                              <1> 		;---------------------------------------
   380                              <1> 												; EBP+20| 色（背景/前景色）
   381                              <1> 												; EBP+16| プレーン（ビット指定）
   382                              <1> 												; EBP+12| VRAMアドレス
   383                              <1> 												; EBP+ 8| 出力ビットパターン
   384                              <1> 												; ------+----------------
   385 00000402 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   386 00000403 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   387                              <1> 												; ------+----------------
   388                              <1> 
   389                              <1> 		;---------------------------------------
   390                              <1> 		; 【レジスタの保存】
   391                              <1> 		;---------------------------------------
   392 00000405 50                  <1> 		push	eax
   393 00000406 53                  <1> 		push	ebx
   394 00000407 57                  <1> 		push	edi
   395                              <1> 
   396                              <1> 		;---------------------------------------
   397                              <1> 		; 【処理の開始】
   398                              <1> 		;---------------------------------------
   399 00000408 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   400 0000040B 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   401 0000040F 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   402                              <1> 
   403 00000413 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   404 00000415 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   405 00000418 FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   406                              <1> 
   407                              <1> 		;---------------------------------------
   408                              <1> 		; マスクデータの作成
   409                              <1> 		;---------------------------------------
   410 0000041A 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   411 0000041D 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   412 0000041F F6D4                <1> 		not		ah								; 
   413                              <1> 
   414                              <1> 		;---------------------------------------
   415                              <1> 		; 現在値の出力を取得
   416                              <1> 		;---------------------------------------
   417 00000421 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   418 00000423 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   419 00000425 08E0                <1> 		or		al, ah							; AL |= AH;
   420                              <1> 
   421                              <1> 		;---------------------------------------
   422                              <1> 		; 新しい値を出力
   423                              <1> 		;---------------------------------------
   424 00000427 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   425                              <1> 
   426                              <1> 		;---------------------------------------
   427                              <1> 		; 【レジスタの復帰】
   428                              <1> 		;---------------------------------------
   429 00000429 5F                  <1> 		pop		edi
   430 0000042A 5B                  <1> 		pop		ebx
   431 0000042B 58                  <1> 		pop		eax
   432                              <1> 
   433                              <1> 		;---------------------------------------
   434                              <1> 		; 【スタックフレームの破棄】
   435                              <1> 		;---------------------------------------
   436 0000042C 89EC                <1> 		mov		esp, ebp
   437 0000042E 5D                  <1> 		pop		ebp
   438                              <1> 
   439 0000042F C3                  <1> 		ret
   147                                  %include	"../modules/protect/draw_char.s"
   148                              <1> ;************************************************************************
   149                              <1> ;	文字の表示
   150                              <1> ;------------------------------------------------------------------------
   151                              <1> ;	グラフィックスモードでテキストを表示
   152                              <1> ;========================================================================
   153                              <1> ;■書式		: void draw_char(col, row, color, ch);
   154                              <1> ;
   155                              <1> ;■引数
   156                              <1> ;	col		: 列（0～79）
   157                              <1> ;	row		: 行（0～29）
   158                              <1> ;	color	: 描画色
   159                              <1> ;	ch		: 文字
   160                              <1> ;
   161                              <1> ;■戻り値	: 無し
   162                              <1> ;************************************************************************
   163                              <1> draw_char:
   164                              <1> 		;---------------------------------------
   165                              <1> 		; 【スタックフレームの構築】
   166                              <1> 		;---------------------------------------
   167                              <1> 												; ------|--------
   168                              <1> 												; EBP+20| 文字
   169                              <1> 												; EBP+16| 色
   170                              <1> 												; EBP+12| Y（行）
   171                              <1> 												; EBP+ 8| X（列）
   172                              <1> 												; ------+----------------
   173 00000430 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   174 00000431 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   175                              <1> 												; ------+----------------
   176                              <1> 
   177                              <1> 		;---------------------------------------
   178                              <1> 		; 【レジスタの保存】
   179                              <1> 		;---------------------------------------
   180 00000433 50                  <1> 		push	eax
   181 00000434 53                  <1> 		push	ebx
   182 00000435 51                  <1> 		push	ecx
   183 00000436 52                  <1> 		push	edx
   184 00000437 56                  <1> 		push	esi
   185 00000438 57                  <1> 		push	edi
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; テストアンドセット
   189                              <1> 		;---------------------------------------
   190                              <1> %ifdef	USE_TEST_AND_SET
   191 00000439 68[0C050000]E89808- <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   191 00000441 00006683C404        <1>
   192                              <1> %endif
   193                              <1> 
   194                              <1> 		;---------------------------------------
   195                              <1> 		; コピー元フォントアドレスを設定
   196                              <1> 		;---------------------------------------
   197 00000447 0FB67514            <1> 		movzx	esi, byte [ebp +20]				; CL  = 文字コード;
   198 0000044B C1E604              <1> 		shl		esi, 4							; CL *= 16; // 1文字16バイト
   199 0000044E 0335[D0010000]      <1> 		add		esi, [FONT_ADR]					; ESI = フォントアドレス;
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; コピー先アドレスを取得
   203                              <1> 		; Adr = 0xA0000 + (640 / 8 * 16) * y + x
   204                              <1> 		;---------------------------------------
   205 00000454 8B7D0C              <1> 		mov		edi, [ebp +12]					; Y（行）
   206 00000457 C1E708              <1> 		shl		edi, 8							; EDI = Y * 256;
   207 0000045A 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA0000]	; EDI = Y *   4 + Y;
   208 00000461 037D08              <1> 		add		edi, [ebp + 8]					; X（列）
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 1文字分のフォントを出力
   212                              <1> 		;---------------------------------------
   213 00000464 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
   214                              <1> 
   215 00000468 6A03E80EFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
   215 00000471 C404                <1>
   216 00000473 6A08E81CFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
   216 0000047C C404                <1>
   217 0000047E 536A085756E827FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
   217 00000487 FF6683C410          <1>
   218                              <1> 
   219 0000048C 6A02E8EAFEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
   219 00000495 C404                <1>
   220 00000497 6A04E8F8FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
   220 000004A0 C404                <1>
   221 000004A2 536A045756E803FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
   221 000004AB FF6683C410          <1>
   222                              <1> 
   223 000004B0 6A01E8C6FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
   223 000004B9 C404                <1>
   224 000004BB 6A02E8D4FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
   224 000004C4 C404                <1>
   225 000004C6 536A025756E8DFFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
   225 000004CF FF6683C410          <1>
   226                              <1> 
   227 000004D4 6A00E8A2FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
   227 000004DD C404                <1>
   228 000004DF 6A01E8B0FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
   228 000004E8 C404                <1>
   229 000004EA 536A015756E8BBFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
   229 000004F3 FF6683C410          <1>
   230                              <1> 
   231                              <1> %ifdef	USE_TEST_AND_SET
   232                              <1> 		;---------------------------------------
   233                              <1> 		; テストアンドセット
   234                              <1> 		;---------------------------------------
   235 000004F8 C705[0C050000]0000- <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   235 00000500 0000                <1>
   236                              <1> %endif
   237                              <1> 
   238                              <1> 		;---------------------------------------
   239                              <1> 		; 【レジスタの復帰】
   240                              <1> 		;---------------------------------------
   241 00000502 5F                  <1> 		pop		edi
   242 00000503 5E                  <1> 		pop		esi
   243 00000504 5A                  <1> 		pop		edx
   244 00000505 59                  <1> 		pop		ecx
   245 00000506 5B                  <1> 		pop		ebx
   246 00000507 58                  <1> 		pop		eax
   247                              <1> 
   248                              <1> 		;---------------------------------------
   249                              <1> 		; 【スタックフレームの破棄】
   250                              <1> 		;---------------------------------------
   251 00000508 89EC                <1> 		mov		esp, ebp
   252 0000050A 5D                  <1> 		pop		ebp
   253                              <1> 
   254 0000050B C3                  <1> 		ret
   255                              <1> 
   256                              <1> %ifdef USE_TEST_AND_SET
   257                              <1> ALIGN 4, db 0
   258 0000050C 00000000            <1> IN_USE:	dd	0
   259                              <1> %endif
   260                              <1> 
   148                                  %include	"../modules/protect/draw_font.s"
   149                              <1> ;************************************************************************
   150                              <1> ;	フォント一覧を表示
   151                              <1> ;========================================================================
   152                              <1> ;■書式		: void draw_font(col, row);
   153                              <1> ;
   154                              <1> ;■引数
   155                              <1> ;	col		: 列
   156                              <1> ;	row		: 行
   157                              <1> ;
   158                              <1> ;■戻り値	: 無し
   159                              <1> ;************************************************************************
   160                              <1> draw_font:
   161                              <1> 		;---------------------------------------
   162                              <1> 		; 【スタックフレームの構築】
   163                              <1> 		;---------------------------------------
   164                              <1> 												; ------|--------
   165                              <1> 												; EBP+12| Y（行）
   166                              <1> 												; EBP+ 8| X（列）
   167                              <1> 												; ---------------
   168 00000510 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   169 00000511 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   170                              <1> 												; ---------------
   171                              <1> 
   172                              <1> 		;---------------------------------------
   173                              <1> 		; 【レジスタの保存】
   174                              <1> 		;---------------------------------------
   175 00000513 50                  <1> 		push	eax
   176 00000514 53                  <1> 		push	ebx
   177 00000515 51                  <1> 		push	ecx
   178 00000516 52                  <1> 		push	edx
   179 00000517 56                  <1> 		push	esi
   180 00000518 57                  <1> 		push	edi
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; 表示位置
   184                              <1> 		;---------------------------------------
   185 00000519 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   186 0000051C 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; フォント一覧を表示
   190                              <1> 		;---------------------------------------
   191 0000051F B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   192 00000524 81F900010000        <1> .10L:	cmp		ecx, 256						;      ECX < 256;
   193 0000052A 731F                <1> 		jae		.10E							; 
   194                              <1> 												;      ECX++)
   195                              <1> 												; {
   196                              <1> 												;   // 桁位置の計算
   197 0000052C 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   198 0000052E 83E00F              <1> 		and		eax, 0x0F						;   EAX &= 0x0F
   199 00000531 01F0                <1> 		add		eax, esi						;   EAX += X;
   200                              <1> 												;   
   201                              <1> 												;   // 行位置の計算
   202 00000533 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   203 00000535 C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
   204 00000538 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   205                              <1> 
   206 0000053A 516A075350E8ECFEFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
   206 00000543 FF6683C410          <1>
   207                              <1> 
   208 00000548 41                  <1> 		inc		ecx								;   // for (... ECX++)
   209 00000549 EBD9                <1> 		jmp		.10L							; 
   210                              <1> .10E:											; }
   211                              <1> 
   212                              <1> 		;---------------------------------------
   213                              <1> 		; 【レジスタの復帰】
   214                              <1> 		;---------------------------------------
   215 0000054B 5F                  <1> 		pop		edi
   216 0000054C 5E                  <1> 		pop		esi
   217 0000054D 5A                  <1> 		pop		edx
   218 0000054E 59                  <1> 		pop		ecx
   219 0000054F 5B                  <1> 		pop		ebx
   220 00000550 58                  <1> 		pop		eax
   221                              <1> 
   222                              <1> 		;---------------------------------------
   223                              <1> 		; 【スタックフレームの破棄】
   224                              <1> 		;---------------------------------------
   225 00000551 89EC                <1> 		mov		esp, ebp
   226 00000553 5D                  <1> 		pop		ebp
   227                              <1> 
   228 00000554 C3                  <1> 		ret
   229                              <1> 
   149                                  %include	"../modules/protect/draw_str.s"
   150                              <1> ;************************************************************************
   151                              <1> ;	文字列の表示
   152                              <1> ;========================================================================
   153                              <1> ;■書式		: void draw_str(col, row, color, p);
   154                              <1> ;
   155                              <1> ;■引数
   156                              <1> ;	col		: 列
   157                              <1> ;	row		: 行
   158                              <1> ;	color	: 描画色
   159                              <1> ;	p		: 文字列のアドレス
   160                              <1> ;
   161                              <1> ;■戻り値	: 無し
   162                              <1> ;************************************************************************
   163                              <1> draw_str:
   164                              <1> 		;---------------------------------------
   165                              <1> 		; 【スタックフレームの構築】
   166                              <1> 		;---------------------------------------
   167                              <1> 												; ------|--------
   168                              <1> 												; EBP+20| *p（文字列のアドレス）
   169                              <1> 												; EBP+16| color（色）
   170                              <1> 												; EBP+12| row（行）
   171                              <1> 												; EBP+ 8| col（列）
   172                              <1> 												; ---------------
   173 00000555 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   174 00000556 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   175                              <1> 												; ---------------
   176                              <1> 
   177                              <1> 		;---------------------------------------
   178                              <1> 		; 【レジスタの保存】
   179                              <1> 		;---------------------------------------
   180 00000558 50                  <1> 		push	eax
   181 00000559 53                  <1> 		push	ebx
   182 0000055A 51                  <1> 		push	ecx
   183 0000055B 52                  <1> 		push	edx
   184 0000055C 56                  <1> 		push	esi
   185                              <1> 
   186                              <1> 		;---------------------------------------
   187                              <1> 		; 文字列の表示
   188                              <1> 		;---------------------------------------
   189 0000055D 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
   190 00000560 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
   191 00000563 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
   192 00000567 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
   193                              <1> 
   194 0000056A FC                  <1> 		cld										; DF = 0; // アドレス加算
   195                              <1> .10L:											; do
   196                              <1> 												; {
   197 0000056B AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
   198 0000056C 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   199 0000056E 741A                <1> 		je		.10E							;     break;
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; 1文字表示
   203                              <1> 		;---------------------------------------
   204                              <1> %ifdef	USE_SYSTEM_CALL
   205 00000570 CD81                <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
   206                              <1> %else
   207                              <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
   208                              <1> %endif
   209                              <1> 
   210                              <1> 		; 次の文字の位置を調整
   211 00000572 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
   212 00000573 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
   213 00000576 7C10                <1> 		jl		.12E							;   {
   214 00000578 B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
   215 0000057D 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
   216 0000057E 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
   217 00000581 7C05                <1> 		jl		.12E							;     {
   218 00000583 BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
   219                              <1> 												;     }
   220                              <1> .12E:											;   }
   221 00000588 EBE1                <1> 		jmp		.10L							;   
   222                              <1> .10E:											; } while (1);
   223                              <1> 
   224                              <1> 		;---------------------------------------
   225                              <1> 		; 【レジスタの復帰】
   226                              <1> 		;---------------------------------------
   227 0000058A 5E                  <1> 		pop		esi
   228 0000058B 5A                  <1> 		pop		edx
   229 0000058C 59                  <1> 		pop		ecx
   230 0000058D 5B                  <1> 		pop		ebx
   231 0000058E 58                  <1> 		pop		eax
   232                              <1> 
   233                              <1> 		;---------------------------------------
   234                              <1> 		; 【スタックフレームの破棄】
   235                              <1> 		;---------------------------------------
   236 0000058F 89EC                <1> 		mov		esp, ebp
   237 00000591 5D                  <1> 		pop		ebp
   238                              <1> 
   239 00000592 C3                  <1> 		ret
   240                              <1> 
   150                                  %include	"../modules/protect/draw_color_bar.s"
   151                              <1> ;************************************************************************
   152                              <1> ;	カラーバーの表示
   153                              <1> ;========================================================================
   154                              <1> ;■書式		: void draw_color_bar(col, row);
   155                              <1> ;
   156                              <1> ;■引数
   157                              <1> ;	col		: 列
   158                              <1> ;	row		: 行
   159                              <1> ;
   160                              <1> ;■戻り値	: 無し
   161                              <1> ;************************************************************************
   162                              <1> draw_color_bar:
   163                              <1> 		;---------------------------------------
   164                              <1> 		; 【スタックフレームの構築】
   165                              <1> 		;---------------------------------------
   166                              <1> 												; ------|--------
   167                              <1> 												; EBP+ 8| X（列）
   168                              <1> 												; EBP+12| Y（行）
   169                              <1> 												; ---------------
   170 00000593 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   171 00000594 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   172                              <1> 												; ---------------
   173                              <1> 		;---------------------------------------
   174                              <1> 		; 【レジスタの保存】
   175                              <1> 		;---------------------------------------
   176 00000596 50                  <1> 		push	eax
   177 00000597 53                  <1> 		push	ebx
   178 00000598 51                  <1> 		push	ecx
   179 00000599 52                  <1> 		push	edx
   180 0000059A 56                  <1> 		push	esi
   181 0000059B 57                  <1> 		push	edi
   182                              <1> 
   183                              <1> 		;---------------------------------------
   184                              <1> 		; 表示位置
   185                              <1> 		;---------------------------------------
   186 0000059C 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   187 0000059F 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   188                              <1> 
   189                              <1> 		;---------------------------------------
   190                              <1> 		; カラーバーを表示
   191                              <1> 		;---------------------------------------
   192 000005A2 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   193 000005A7 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
   194 000005AA 732E                <1> 		jae		.10E							; 
   195                              <1> 												;      ECX++)
   196                              <1> 												; {
   197                              <1> 												;   // 桁位置の計算
   198 000005AC 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   199 000005AE 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
   200 000005B1 C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
   201 000005B4 01F0                <1> 		add		eax, esi						;   EAX += X;
   202                              <1> 												;   
   203                              <1> 												;   // 行位置の計算
   204 000005B6 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   205 000005B8 D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
   206 000005BA 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   207                              <1> 												;   
   208                              <1> 												;   // 表示色の取得
   209 000005BC 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
   210 000005BE D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
   211 000005C0 8B92[ED050000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
   212                              <1> 
   213 000005C6 68[E4050000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
   213 000005CE E882FFFFFF6683C410  <1>
   214                              <1> 
   215 000005D7 41                  <1> 		inc		ecx								;   // for (... ECX++)
   216 000005D8 EBCD                <1> 		jmp		.10L							; 
   217                              <1> .10E:											; }
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 【レジスタの復帰】
   221                              <1> 		;---------------------------------------
   222 000005DA 5F                  <1> 		pop		edi
   223 000005DB 5E                  <1> 		pop		esi
   224 000005DC 5A                  <1> 		pop		edx
   225 000005DD 59                  <1> 		pop		ecx
   226 000005DE 5B                  <1> 		pop		ebx
   227 000005DF 58                  <1> 		pop		eax
   228                              <1> 
   229                              <1> 		;---------------------------------------
   230                              <1> 		; 【スタックフレームの破棄】
   231                              <1> 		;---------------------------------------
   232 000005E0 89EC                <1> 		mov		esp, ebp
   233 000005E2 5D                  <1> 		pop		ebp
   234                              <1> 
   235 000005E3 C3                  <1> 		ret
   236                              <1> 
   237 000005E4 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
   238                              <1> 
   239 000005ED 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
   240 000005F1 00010009            <1> 		dw	0x0100, 0x0900
   241 000005F5 0002000A            <1> 		dw	0x0200, 0x0A00
   242 000005F9 0003000B            <1> 		dw	0x0300, 0x0B00
   243 000005FD 0004000C            <1> 		dw	0x0400, 0x0C00
   244 00000601 0005000D            <1> 		dw	0x0500, 0x0D00
   245 00000605 0006000E            <1> 		dw	0x0600, 0x0E00
   246 00000609 0007000F            <1> 		dw	0x0700, 0x0F00
   247                              <1> 
   151                                  %include	"../modules/protect/draw_pixel.s"
   152                              <1> ;************************************************************************
   153                              <1> ;	ピクセルの描画
   154                              <1> ;========================================================================
   155                              <1> ;■書式		: void draw_pixel(X, Y, color);
   156                              <1> ;
   157                              <1> ;■引数
   158                              <1> ;	X		: X座標
   159                              <1> ;	Y		: Y座標
   160                              <1> ;	color	: 描画色
   161                              <1> ;
   162                              <1> ;■戻り値	: 無し
   163                              <1> ;************************************************************************
   164                              <1> draw_pixel:
   165                              <1> 		;---------------------------------------
   166                              <1> 		; 【スタックフレームの構築】
   167                              <1> 		;---------------------------------------
   168                              <1> 												; ------|--------
   169                              <1> 												; EBP+16| 色
   170                              <1> 												; EBP+12| Y
   171                              <1> 												; EBP+ 8| X
   172                              <1> 												; ------|--------
   173 0000060D 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   174 0000060E 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   175                              <1> 												; ------+--------
   176                              <1> 		;---------------------------------------
   177                              <1> 		; 【レジスタの保存】
   178                              <1> 		;---------------------------------------
   179 00000610 50                  <1> 		push	eax
   180 00000611 53                  <1> 		push	ebx
   181 00000612 51                  <1> 		push	ecx
   182 00000613 57                  <1> 		push	edi
   183                              <1> 
   184                              <1> 		;---------------------------------------
   185                              <1> 		; Y座標を80倍する（640/8）
   186                              <1> 		;---------------------------------------
   187 00000614 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI  = Y座標
   188 00000617 C1E704              <1> 		shl		edi, 4							; EDI *= 16;
   189 0000061A 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA_0000]	; EDI  = 0xA00000[EDI * 4 + EDI];
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; X座標を1/8して加算
   193                              <1> 		;---------------------------------------
   194 00000621 8B5D08              <1> 		mov		ebx, [ebp + 8]					; EBX  = X座標;
   195 00000624 89D9                <1> 		mov		ecx, ebx						; ECX  = X座標;（一時保存）
   196 00000626 C1EB03              <1> 		shr		ebx, 3							; EBX /= 8;
   197 00000629 01DF                <1> 		add		edi, ebx						; EDI += EBX;
   198                              <1> 
   199                              <1> 		;---------------------------------------
   200                              <1> 		; X座標を8で割った余りからビット位置を計算
   201                              <1> 		; (0=0x80, 1=0x40,... 7=0x01)
   202                              <1> 		;---------------------------------------
   203 0000062B 83E107              <1> 		and		ecx, 0x07						; ECX = X & 0x07;
   204 0000062E BB80000000          <1> 		mov		ebx, 0x80						; EBX = 0x80;
   205 00000633 D3EB                <1> 		shr		ebx, cl							; EBX >>= ECX;
   206                              <1> 
   207                              <1> 		;---------------------------------------
   208                              <1> 		; 色指定
   209                              <1> 		;---------------------------------------
   210 00000635 8B4D10              <1> 		mov		ecx, [ebp +16]					; // 表示色
   211                              <1> 
   212                              <1> %ifdef	USE_TEST_AND_SET
   213 00000638 68[0C050000]E89906- <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   213 00000640 00006683C404        <1>
   214                              <1> %endif
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; プレーン毎に出力
   218                              <1> 		;---------------------------------------
   219 00000646 6A03E830FDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 輝度(I)プレーンを選択
   219 0000064F C404                <1>
   220 00000651 6A08E83EFDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 輝度(I)プレーンを選択
   220 0000065A C404                <1>
   221 0000065C 516A085753E89CFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
   221 00000665 FF6683C410          <1>
   222                              <1> 
   223 0000066A 6A02E80CFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 赤(R)プレーンを選択
   223 00000673 C404                <1>
   224 00000675 6A04E81AFDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 赤(R)プレーンを選択
   224 0000067E C404                <1>
   225 00000680 516A045753E878FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
   225 00000689 FF6683C410          <1>
   226                              <1> 
   227 0000068E 6A01E8E8FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 緑(G)プレーンを選択
   227 00000697 C404                <1>
   228 00000699 6A02E8F6FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 緑(G)プレーンを選択
   228 000006A2 C404                <1>
   229 000006A4 516A025753E854FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
   229 000006AD FF6683C410          <1>
   230                              <1> 
   231 000006B2 6A00E8C4FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 青(B)プレーンを選択
   231 000006BB C404                <1>
   232 000006BD 6A01E8D2FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 青(B)プレーンを選択
   232 000006C6 C404                <1>
   233 000006C8 516A015753E830FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
   233 000006D1 FF6683C410          <1>
   234                              <1> 
   235                              <1> 
   236                              <1> %ifdef	USE_TEST_AND_SET
   237                              <1> 		;---------------------------------------
   238                              <1> 		; テストアンドセット
   239                              <1> 		;---------------------------------------
   240 000006D6 C705[0C050000]0000- <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   240 000006DE 0000                <1>
   241                              <1> %endif
   242                              <1> 
   243                              <1> 		;---------------------------------------
   244                              <1> 		; 【レジスタの復帰】
   245                              <1> 		;---------------------------------------
   246 000006E0 5F                  <1> 		pop		edi
   247 000006E1 59                  <1> 		pop		ecx
   248 000006E2 5B                  <1> 		pop		ebx
   249 000006E3 58                  <1> 		pop		eax
   250                              <1> 
   251                              <1> 		;---------------------------------------
   252                              <1> 		; 【スタックフレームの破棄】
   253                              <1> 		;---------------------------------------
   254 000006E4 89EC                <1> 		mov		esp, ebp
   255 000006E6 5D                  <1> 		pop		ebp
   256                              <1> 
   257 000006E7 C3                  <1> 		ret
   258                              <1> 
   152                                  %include	"../modules/protect/draw_line.s"
   153                              <1> ;************************************************************************
   154                              <1> ;	直線の描画
   155                              <1> ;========================================================================
   156                              <1> ;■書式		: void draw_line(X0, Y0, X1, Y1, color);
   157                              <1> ;
   158                              <1> ;■引数
   159                              <1> ;	X0		: 始点のX座標
   160                              <1> ;	Y0		: 始点のY座標
   161                              <1> ;	X1		: 終点のX座標
   162                              <1> ;	Y1		: 終点のY座標
   163                              <1> ;	color	: 描画色
   164                              <1> ;
   165                              <1> ;■戻り値	: 無し
   166                              <1> ;************************************************************************
   167                              <1> draw_line:
   168                              <1> 		;---------------------------------------
   169                              <1> 		; 【スタックフレームの構築】
   170                              <1> 		;---------------------------------------
   171                              <1> 												; ---------------
   172                              <1> 												;    +24| 色
   173                              <1> 												;    +20| Y1
   174                              <1> 												;    +16| X1
   175                              <1> 												;    +12| Y0
   176                              <1> 												;    + 8| X0
   177                              <1> 												; ---------------
   178 000006E8 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   179 000006E9 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   180                              <1> 												; ---------------
   181 000006EB 6A00                <1> 		push	dword 0							;    - 4| sum   = 0; // 相対軸の積算値
   182 000006ED 6A00                <1> 		push	dword 0							;    - 8| x0    = 0; // X座標
   183 000006EF 6A00                <1> 		push	dword 0							;    -12| dx    = 0; // X増分
   184 000006F1 6A00                <1> 		push	dword 0							;    -16| inc_x = 0; // X座標増分(1 or -1)
   185 000006F3 6A00                <1> 		push	dword 0							;    -20| y0    = 0; // Y座標
   186 000006F5 6A00                <1> 		push	dword 0							;    -24| dy    = 0; // Y増分
   187 000006F7 6A00                <1> 		push	dword 0							;    -28| inc_y = 0; // Y座標増分(1 or -1)
   188                              <1> 												; ------|--------
   189                              <1> 
   190                              <1> 		;---------------------------------------
   191                              <1> 		; 【レジスタの保存】
   192                              <1> 		;---------------------------------------
   193 000006F9 50                  <1> 		push	eax
   194 000006FA 53                  <1> 		push	ebx
   195 000006FB 51                  <1> 		push	ecx
   196 000006FC 52                  <1> 		push	edx
   197 000006FD 56                  <1> 		push	esi
   198 000006FE 57                  <1> 		push	edi
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 幅を計算（X軸）
   202                              <1> 		;---------------------------------------
   203 000006FF 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   204 00000702 8B5D10              <1> 		mov		ebx, [ebp +16]					; EBX = X1;
   205 00000705 29C3                <1> 		sub		ebx, eax						; EBX = X1 - X0; // 幅
   206 00000707 7D09                <1> 		jge		.10F							; if (幅 < 0)
   207                              <1> 												; {
   208 00000709 F7DB                <1> 		neg		ebx								;   幅   *= -1;
   209 0000070B BEFFFFFFFF          <1> 		mov		esi, -1							;   // X座標の増分
   210 00000710 EB05                <1> 		jmp		.10E							; }
   211                              <1> .10F:											; else
   212                              <1> 												; {
   213 00000712 BE01000000          <1> 		mov		esi, 1							;   // X座標の増分
   214                              <1> .10E:											; }
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; 高さを計算（Y軸）
   218                              <1> 		;---------------------------------------
   219 00000717 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX = Y0
   220 0000071A 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1
   221 0000071D 29CA                <1> 		sub		edx, ecx						; EDX = Y1 - Y0; // 高さ
   222 0000071F 7D09                <1> 		jge		.20F							; if (高さ < 0)
   223                              <1> 												; {
   224 00000721 F7DA                <1> 		neg		edx								;   高さ *= -1;
   225 00000723 BFFFFFFFFF          <1> 		mov		edi, -1							;   // Y座標の増分
   226 00000728 EB05                <1> 		jmp		.20E							; }
   227                              <1> .20F:											; else
   228                              <1> 												; {
   229 0000072A BF01000000          <1> 		mov		edi, 1							;   // Y座標の増分
   230                              <1> .20E:											; }
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; X軸
   234                              <1> 		;---------------------------------------
   235 0000072F 8945F8              <1> 		mov		[ebp - 8], eax					;   // X軸:開始座標
   236 00000732 895DF4              <1> 		mov		[ebp -12], ebx					;   // X軸:描画幅
   237 00000735 8975F0              <1> 		mov		[ebp -16], esi					;   // X軸:増分(基準軸：1 or -1)
   238                              <1> 
   239                              <1> 		;---------------------------------------
   240                              <1> 		; Y軸
   241                              <1> 		;---------------------------------------
   242 00000738 894DEC              <1> 		mov		[ebp -20], ecx					;   // Y軸:開始座標
   243 0000073B 8955E8              <1> 		mov		[ebp -24], edx					;   // Y軸:描画幅
   244 0000073E 897DE4              <1> 		mov		[ebp -28], edi					;   // Y軸:増分(基準軸：1 or -1)
   245                              <1> 
   246                              <1> 		;---------------------------------------
   247                              <1> 		; 基準軸を決める
   248                              <1> 		;---------------------------------------
   249 00000741 39D3                <1> 		cmp		ebx, edx						; if (幅 <= 高さ)
   250 00000743 7F08                <1> 		jg		.22F							; {
   251                              <1> 												;   
   252 00000745 8D75EC              <1> 		lea		esi, [ebp -20]					;   // Y軸が基準軸
   253 00000748 8D7DF8              <1> 		lea		edi, [ebp - 8]					;   // X軸が相対軸
   254                              <1> 												;   
   255 0000074B EB06                <1> 		jmp		.22E							; }
   256                              <1> .22F:											; else
   257                              <1> 												; {
   258 0000074D 8D75F8              <1> 		lea		esi, [ebp - 8]					;   // X軸が基準軸
   259 00000750 8D7DEC              <1> 		lea		edi, [ebp -20]					;   // Y軸が相対軸
   260                              <1> .22E:											; }
   261                              <1> 
   262                              <1> 		;---------------------------------------
   263                              <1> 		; 繰り返し回数(基準軸のドット数)
   264                              <1> 		;---------------------------------------
   265 00000753 8B4EFC              <1> 		mov		ecx, [esi - 4]					; ECX = 基準軸描画幅;
   266 00000756 83F900              <1> 		cmp		ecx, 0							; if (0 == ECX)
   267 00000759 7505                <1> 		jnz		.30E							; {
   268 0000075B B901000000          <1> 		mov		ecx, 1							;   ECX = 1;
   269                              <1> .30E:											; }
   270                              <1> 
   271                              <1> 		;---------------------------------------
   272                              <1> 		; 線を描画
   273                              <1> 		;---------------------------------------
   274                              <1> .50L:											; do
   275                              <1> 												; {
   276                              <1> %ifdef	USE_SYSTEM_CALL
   277 00000760 89C8                <1> 		mov		eax, ecx						;   // 繰り返し回数を保存
   278                              <1> 
   279 00000762 8B5D18              <1> 		mov		ebx, [ebp +24]					;   EBX = 表示色;
   280 00000765 8B4DF8              <1> 		mov		ecx, [ebp - 8]					;   ECX = X座標;
   281 00000768 8B55EC              <1> 		mov		edx, [ebp -20]					;   EDX = Y座標;
   282 0000076B CD82                <1> 		int		0x82							;   sys_call(1, X, Y, 色, 文字); BX(C), CX(X), DX(Y)
   283                              <1> 
   284 0000076D 89C1                <1> 		mov		ecx, eax
   285                              <1> %else
   286                              <1> 		cdecl	draw_pixel, dword [ebp - 8], 							dword [ebp -20], 							dword [ebp +24]		;   // 点の描画
   289                              <1> %endif
   290                              <1> 												;   // 基準軸を更新(1ドット分)
   291 0000076F 8B46F8              <1> 		mov		eax, [esi - 8]					;   EAX = 基準軸増分(1 or -1);
   292 00000772 0106                <1> 		add		[esi - 0], eax					;   
   293                              <1> 
   294                              <1> 												;   // 相対軸を更新
   295 00000774 8B45FC              <1> 		mov		eax, [ebp - 4]					;   EAX  = sum; // 相対軸の積算値;
   296 00000777 0347FC              <1> 		add		eax, [edi - 4]					;   EAX += dy;  // 増分(相対軸の描画幅)
   297 0000077A 8B5EFC              <1> 		mov		ebx, [esi - 4]					;   EBX  = dx;  // 増分(基準軸の描画幅)
   298                              <1> 
   299 0000077D 39D8                <1> 		cmp		eax, ebx						;   if (積算値 <= 相対軸の増分)
   300 0000077F 7C07                <1> 		jl		.52E							;   {
   301 00000781 29D8                <1> 		sub		eax, ebx						;     EAX -= EBX; // 積算値から相対軸の増分を減算
   302                              <1> 												;     
   303                              <1> 												;     // 相対軸の座標を更新(1ドット分)
   304 00000783 8B5FF8              <1> 		mov		ebx, [edi - 8]					;     EBX =  相対軸増分;
   305 00000786 011F                <1> 		add		[edi - 0], ebx					;     
   306                              <1> .52E:											;   }
   307 00000788 8945FC              <1> 		mov		[ebp - 4], eax					;   // 積算値を更新
   308                              <1> 												;   
   309 0000078B E2D3                <1> 		loop	.50L							;   
   310                              <1> .50E:											; } while (ループ回数--);
   311                              <1> 
   312                              <1> 		;---------------------------------------
   313                              <1> 		; 【レジスタの復帰】
   314                              <1> 		;---------------------------------------
   315 0000078D 5F                  <1> 		pop		edi
   316 0000078E 5E                  <1> 		pop		esi
   317 0000078F 5A                  <1> 		pop		edx
   318 00000790 59                  <1> 		pop		ecx
   319 00000791 5B                  <1> 		pop		ebx
   320 00000792 58                  <1> 		pop		eax
   321                              <1> 
   322                              <1> 		;---------------------------------------
   323                              <1> 		; 【スタックフレームの破棄】
   324                              <1> 		;---------------------------------------
   325 00000793 89EC                <1> 		mov		esp, ebp
   326 00000795 5D                  <1> 		pop		ebp
   327                              <1> 
   328 00000796 C3                  <1> 		ret
   329                              <1> 
   153                                  %include	"../modules/protect/draw_rect.s"
   154                              <1> ;************************************************************************
   155                              <1> ;	矩形の描画
   156                              <1> ;========================================================================
   157                              <1> ;■書式		: void draw_rect(X0, Y0, X1, Y1, color);
   158                              <1> ;
   159                              <1> ;■引数
   160                              <1> ;	X0		: 始点のX座標
   161                              <1> ;	Y0		: 始点のY座標
   162                              <1> ;	X1		: 終点のX座標
   163                              <1> ;	Y1		: 終点のY座標
   164                              <1> ;	color	: 描画色
   165                              <1> ;
   166                              <1> ;■戻り値	: 無し
   167                              <1> ;************************************************************************
   168                              <1> draw_rect:
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 【スタックフレームの構築】
   171                              <1> 		;---------------------------------------
   172                              <1> 												; ------|--------
   173                              <1> 												; EBP+24| 色
   174                              <1> 												; EBP+20| Y1
   175                              <1> 												; EBP+16| X1
   176                              <1> 												; EBP+12| Y0
   177                              <1> 												; EBP+ 8| X0
   178                              <1> 												; ---------------
   179 00000797 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   180 00000798 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   181                              <1> 												; ------|--------
   182                              <1> 
   183                              <1> 		;---------------------------------------
   184                              <1> 		; 【レジスタの保存】
   185                              <1> 		;---------------------------------------
   186 0000079A 50                  <1> 		push		eax
   187 0000079B 53                  <1> 		push		ebx
   188 0000079C 51                  <1> 		push		ecx
   189 0000079D 52                  <1> 		push		edx
   190 0000079E 56                  <1> 		push		esi
   191                              <1> 
   192                              <1> 		;---------------------------------------
   193                              <1> 		; 矩形を描画
   194                              <1> 		;---------------------------------------
   195 0000079F 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   196 000007A2 8B5D0C              <1> 		mov		ebx, [ebp +12]					; EBX = Y0;
   197 000007A5 8B4D10              <1> 		mov		ecx, [ebp +16]					; ECX = X1;
   198 000007A8 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1;
   199 000007AB 8B7518              <1> 		mov		esi, [ebp +24]					; ESI = 色;
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; 座標軸の大小を確定
   203                              <1> 		;---------------------------------------
   204 000007AE 39C8                <1> 		cmp		eax, ecx						; if (X1 < X0)
   205 000007B0 7C01                <1> 		jl		.10E							; {
   206 000007B2 91                  <1> 		xchg	eax, ecx						;   X0とX1を入れ替える;
   207                              <1> .10E:											; }
   208                              <1> 
   209 000007B3 39D3                <1> 		cmp		ebx, edx						; if (Y1 < Y0)
   210 000007B5 7C02                <1> 		jl		.20E							; {
   211 000007B7 87DA                <1> 		xchg	ebx, edx						;   Y0とY1を入れ替える;
   212                              <1> .20E:											; }
   213                              <1> 
   214                              <1> 		;---------------------------------------
   215                              <1> 		; 矩形を描画
   216                              <1> 		;---------------------------------------
   217 000007B9 5653515350E825FFFF- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, esi	; 上線
   217 000007C2 FF6683C414          <1>
   218 000007C7 5652505350E817FFFF- <1> 		cdecl	draw_line, eax, ebx, eax, edx, esi	; 左線
   218 000007D0 FF6683C414          <1>
   219                              <1> 
   220 000007D5 4A                  <1> 		dec		edx									; EDX--; // 下線は1ドット上げる
   221 000007D6 5652515250E808FFFF- <1> 		cdecl	draw_line, eax, edx, ecx, edx, esi	; 下線
   221 000007DF FF6683C414          <1>
   222 000007E4 42                  <1> 		inc		edx
   223                              <1> 
   224 000007E5 49                  <1> 		dec		ecx									; ECX--; // 右線は1ドット左に移動
   225 000007E6 5652515351E8F8FEFF- <1> 		cdecl	draw_line, ecx, ebx, ecx, edx, esi	; 右線
   225 000007EF FF6683C414          <1>
   226                              <1> 
   227                              <1> 		;---------------------------------------
   228                              <1> 		; 【レジスタの復帰】
   229                              <1> 		;---------------------------------------
   230 000007F4 5E                  <1> 		pop		esi
   231 000007F5 5A                  <1> 		pop		edx
   232 000007F6 59                  <1> 		pop		ecx
   233 000007F7 5B                  <1> 		pop		ebx
   234 000007F8 58                  <1> 		pop		eax
   235                              <1> 
   236                              <1> 		;---------------------------------------
   237                              <1> 		; 【スタックフレームの破棄】
   238                              <1> 		;---------------------------------------
   239 000007F9 89EC                <1> 		mov		esp, ebp
   240 000007FB 5D                  <1> 		pop		ebp
   241                              <1> 
   242 000007FC C3                  <1> 		ret
   154                                  %include	"../modules/protect/itoa.s"
   155                              <1> ;************************************************************************
   156                              <1> ;	数値を文字に変換
   157                              <1> ;========================================================================
   158                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
   159                              <1> ;
   160                              <1> ;■引数
   161                              <1> ;	num		: 変換する数値
   162                              <1> ;	buff	: 保存先バッファアドレス
   163                              <1> ;	size	: 保存先バッファサイズ
   164                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
   165                              <1> ;	flags	: フラグ
   166                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
   167                              <1> ;			:      : 0=空白を' '（スペース）で埋める
   168                              <1> ;			:   B1 : 1=＋/-符号を表示する
   169                              <1> ;			:      : 0=＋/-符号を表示しない
   170                              <1> ;			:   B0 : 1=符号付き正数として扱う
   171                              <1> ;			:      : 0=符号無し正数として扱う
   172                              <1> ;
   173                              <1> ;■戻り値	: 無し
   174                              <1> ;************************************************************************
   175                              <1> itoa:
   176                              <1> 		;---------------------------------------
   177                              <1> 		; 【スタックフレームの構築】
   178                              <1> 		;---------------------------------------
   179                              <1> 												; ------|--------
   180                              <1> 												;    +24| フラグ
   181                              <1> 												;    +20| 基数
   182                              <1> 												;    +16| バッファサイズ
   183                              <1> 												;    +12| バッファアドレス
   184                              <1> 												;    + 8| 数値
   185                              <1> 												; ------|--------
   186                              <1> 												;    + 4| EIP（戻り番地）
   187 000007FD 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   188 000007FE 89E5                <1> 		mov		ebp, esp						; ------+--------
   189                              <1> 
   190                              <1> 		;---------------------------------------
   191                              <1> 		; 【レジスタの保存】
   192                              <1> 		;---------------------------------------
   193 00000800 50                  <1> 		push	eax
   194 00000801 53                  <1> 		push	ebx
   195 00000802 51                  <1> 		push	ecx
   196 00000803 52                  <1> 		push	edx
   197 00000804 56                  <1> 		push	esi
   198 00000805 57                  <1> 		push	edi
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 引数を取得
   202                              <1> 		;---------------------------------------
   203 00000806 8B4508              <1> 		mov		eax, [ebp + 8]					; val  = 数値;
   204 00000809 8B750C              <1> 		mov		esi, [ebp +12]					; dst  = バッファアドレス;
   205 0000080C 8B4D10              <1> 		mov		ecx, [ebp +16]					; size = 残りバッファサイズ;
   206                              <1> 
   207 0000080F 89F7                <1> 		mov		edi, esi						; // バッファの最後尾
   208 00000811 01CF                <1> 		add		edi, ecx						; dst  = &dst[size - 1];
   209 00000813 4F                  <1> 		dec		edi								; 
   210                              <1> 
   211 00000814 8B5D18              <1> 		mov		ebx, [ebp +24]					; flags = オプション;
   212                              <1> 
   213                              <1> 		;---------------------------------------
   214                              <1> 		; 符号付き判定
   215                              <1> 		;---------------------------------------
   216 00000817 F7C301000000        <1> 		test	ebx, 0b0001						; if (flags & 0x01)// 符号付き
   217 0000081D 7408                <1> .10Q:	je		.10E							; {
   218 0000081F 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   219 00000822 7D03                <1> .12Q:	jge		.12E							;   {
   220 00000824 83CB02              <1> 		or		ebx, 0b0010						;     flags |=  2; // 符号表示
   221                              <1> .12E:											;   }
   222                              <1> .10E:											; }
   223                              <1> 
   224                              <1> 		;---------------------------------------
   225                              <1> 		; 符号出力判定
   226                              <1> 		;---------------------------------------
   227 00000827 F7C302000000        <1> 		test	ebx, 0b0010						; if (flags & 0x02)// 符号出力判定
   228 0000082D 7410                <1> .20Q:	je		.20E							; {
   229 0000082F 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   230 00000832 7D07                <1> .22Q:	jge		.22F							;   {
   231 00000834 F7D8                <1> 		neg		eax								;     val *= -1;   // 符号反転
   232 00000836 C6062D              <1> 		mov		[esi], byte '-'					;     *dst = '-';  // 符号表示
   233 00000839 EB03                <1> 		jmp		.22E							;   }
   234                              <1> .22F:											;   else
   235                              <1> 												;   {
   236 0000083B C6062B              <1> 		mov		[esi], byte '+'					;     *dst = '+';  // 符号表示
   237                              <1> .22E:											;   }
   238 0000083E 49                  <1> 		dec		ecx								;   size--;        // 残りバッファサイズの減算
   239                              <1> .20E:											; }
   240                              <1> 
   241                              <1> 		;---------------------------------------
   242                              <1> 		; ASCII変換
   243                              <1> 		;---------------------------------------
   244 0000083F 8B5D14              <1> 		mov		ebx, [ebp +20]					; BX = 基数;
   245                              <1> .30L:											; do
   246                              <1> 												; {
   247 00000842 BA00000000          <1> 		mov		edx, 0							;   
   248 00000847 F7F3                <1> 		div		ebx								;   DX = DX:AX % 基数;
   249                              <1> 												;   AX = DX:AX / 基数;
   250                              <1> 												;   
   251 00000849 89D6                <1> 		mov		esi, edx						;   // テーブル参照
   252 0000084B 8A96[76080000]      <1> 		mov		dl, byte [.ascii + esi]			;   DL = ASCII[DX];
   253                              <1> 												;   
   254 00000851 8817                <1> 		mov		[edi], dl						;   *dst = DL;
   255 00000853 4F                  <1> 		dec		edi								;   dst--;
   256                              <1> 												;   
   257 00000854 83F800              <1> 		cmp		eax, 0							;   
   258 00000857 E0E9                <1> 		loopnz	.30L							; } while (AX);
   259                              <1> .30E:
   260                              <1> 
   261                              <1> 		;---------------------------------------
   262                              <1> 		; 空欄を埋める
   263                              <1> 		;---------------------------------------
   264 00000859 83F900              <1> 		cmp		ecx, 0							; if (size)
   265 0000085C 740E                <1> .40Q:	je		.40E							; {
   266 0000085E B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   267 00000860 66837D1804          <1> 		cmp		[ebp +24], word 0b0100			;   if (flags & 0x04)
   268 00000865 7502                <1> .42Q:	jne		.42E							;   {
   269 00000867 B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   270                              <1> .42E:											;   }
   271 00000869 FD                  <1> 		std										;   // DF = 1（-方向）
   272 0000086A F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   273                              <1> .40E:											; }
   274                              <1> 
   275                              <1> 		;---------------------------------------
   276                              <1> 		; 【レジスタの復帰】
   277                              <1> 		;---------------------------------------
   278 0000086C 5F                  <1> 		pop		edi
   279 0000086D 5E                  <1> 		pop		esi
   280 0000086E 5A                  <1> 		pop		edx
   281 0000086F 59                  <1> 		pop		ecx
   282 00000870 5B                  <1> 		pop		ebx
   283 00000871 58                  <1> 		pop		eax
   284                              <1> 
   285                              <1> 		;---------------------------------------
   286                              <1> 		; 【スタックフレームの破棄】
   287                              <1> 		;---------------------------------------
   288 00000872 89EC                <1> 		mov		esp, ebp
   289 00000874 5D                  <1> 		pop		ebp
   290                              <1> 
   291 00000875 C3                  <1> 		ret
   292                              <1> 
   293 00000876 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   293 0000087F 39414243444546      <1>
   294                              <1> 
   155                                  %include	"../modules/protect/rtc.s"
   156                              <1> ;************************************************************************
   157                              <1> ;	RTCから時刻データを取得する
   158                              <1> ;========================================================================
   159                              <1> ;■書式		: DWORD rtc_get_time(dst);
   160                              <1> ;
   161                              <1> ;■引数
   162                              <1> ;	dst		: 保存先アドレス
   163                              <1> ;
   164                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   165                              <1> ;************************************************************************
   166                              <1> rtc_get_time:
   167                              <1> 		;---------------------------------------
   168                              <1> 		; 【スタックフレームの構築】
   169                              <1> 		;---------------------------------------
   170                              <1> 												; ------|--------
   171                              <1> 												; EBP+ 8| 保存先アドレス
   172                              <1> 												; ---------------
   173 00000886 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   174 00000887 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   175                              <1> 												; ---------------
   176                              <1> 		;---------------------------------------
   177                              <1> 		; 【レジスタの保存】
   178                              <1> 		;---------------------------------------
   179 00000889 53                  <1> 		push	ebx
   180                              <1> 
   181                              <1> 		;---------------------------------------
   182                              <1> 		; RTCから時刻を取得
   183                              <1> 		;---------------------------------------
   184 0000088A B00A                <1> 		mov		al, 0x0A						; // レジスタA
   185 0000088C E670                <1> 		out		0x70, al						; outp(0x70, AL);
   186 0000088E E471                <1> 		in		al, 0x71						; AL = レジスタA;
   187 00000890 A880                <1> 		test	al, 0x80						; if (DM & UIP) // 更新中
   188 00000892 7407                <1> 		je		.10F							; {
   189 00000894 B801000000          <1> 		mov		eax, 1							;   ret = 1; // データ更新中
   190 00000899 EB27                <1> 		jmp		.10E							; }
   191                              <1> .10F:											; else
   192                              <1> 												; {
   193                              <1> 												;   // RAM[0x04]:時
   194 0000089B B004                <1> 		mov		al, 0x04						;   AL = 0x04;
   195 0000089D E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   196 0000089F E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 時データ
   197                              <1> 												;   
   198 000008A1 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   199                              <1> 												;   
   200                              <1> 												;   // RAM[0x02]:分
   201 000008A4 B002                <1> 		mov		al, 0x02						;   AL = 0x02;
   202 000008A6 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   203 000008A8 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 分データ
   204                              <1> 												;   
   205 000008AA C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   206                              <1> 												;   
   207                              <1> 												;   // RAM[0x00]:秒
   208 000008AD B000                <1> 		mov		al, 0x00						;   AL = 0x00;
   209 000008AF E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   210 000008B1 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 秒データ
   211                              <1> 												;   
   212 000008B3 25FFFFFF00          <1> 		and		eax, 0x00_FF_FF_FF				;   // 下位3バイトのみ有効
   213                              <1> 												;   
   214 000008B8 8B5D08              <1> 		mov		ebx, [ebp + 8]					;   dst = 保存先;
   215 000008BB 8903                <1> 		mov		[ebx], eax						;   [dst] = 時刻;
   216                              <1> 												;   
   217 000008BD B800000000          <1> 		mov		eax, 0							;   ret = 0; // 正常終了
   218                              <1> .10E:											; }
   219                              <1> 
   220                              <1> 		;---------------------------------------
   221                              <1> 		; 【レジスタの復帰】
   222                              <1> 		;---------------------------------------
   223 000008C2 5B                  <1> 		pop		ebx
   224                              <1> 
   225                              <1> 		;---------------------------------------
   226                              <1> 		; 【スタックフレームの破棄】
   227                              <1> 		;---------------------------------------
   228 000008C3 89EC                <1> 		mov		esp, ebp
   229 000008C5 5D                  <1> 		pop		ebp
   230                              <1> 
   231 000008C6 C3                  <1> 		ret
   232                              <1> 
   156                                  %include	"../modules/protect/draw_time.s"
   157                              <1> ;************************************************************************
   158                              <1> ;	時刻の表示
   159                              <1> ;========================================================================
   160                              <1> ;■書式		: void draw_time(col, row, color, time);
   161                              <1> ;
   162                              <1> ;■引数
   163                              <1> ;	col		: 列
   164                              <1> ;	row		: 行
   165                              <1> ;	color	: 描画色
   166                              <1> ;	time	: 時刻データ
   167                              <1> ;
   168                              <1> ;■戻り値	: 無し
   169                              <1> ;************************************************************************
   170                              <1> draw_time:
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 【スタックフレームの構築】
   173                              <1> 		;---------------------------------------
   174                              <1> 												; ------|--------
   175                              <1> 												; EBP+20| 時刻データ
   176                              <1> 												; EBP+16| 色
   177                              <1> 												; EBP+12| Y（行）
   178                              <1> 												; EBP+ 8| X（列）
   179                              <1> 												; ---------------
   180 000008C7 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   181 000008C8 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   182                              <1> 												; ---------------
   183                              <1> 		;---------------------------------------
   184                              <1> 		; 【レジスタの保存】
   185                              <1> 		;---------------------------------------
   186 000008CA 50                  <1> 		push	eax
   187 000008CB 53                  <1> 		push	ebx
   188                              <1> 
   189                              <1> 		;---------------------------------------
   190                              <1> 		; 
   191                              <1> 		;---------------------------------------
   192 000008CC 8B4514              <1> 		mov		eax, [ebp +20]					; EAX = 時刻データ;
   193 000008CF 3B05[4C090000]      <1> 		cmp		eax, [.last]					; if (今回 != 前回)
   194 000008D5 7467                <1> 		je		.10E							; {
   195                              <1> 												;   
   196 000008D7 A3[4C090000]        <1> 		mov		[.last], eax					;   // 前回の時刻値を更新
   197                              <1> 												;   
   198 000008DC BB00000000          <1> 		mov		ebx, 0							;   EBX = 0;
   199 000008E1 88C3                <1> 		mov		bl, al							;   EBX = 秒;
   200 000008E3 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .sec, 2, 16, 0b0100	;   // 時刻を文字列に変換
   200 000008EA [5A090000]53E809FF- <1>
   200 000008F2 FFFF6683C414        <1>
   201                              <1> 
   202 000008F8 88E3                <1> 		mov		bl, ah							;   EBX = 分;
   203 000008FA 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .min, 2, 16, 0b0100	;   // 時刻を文字列に変換
   203 00000901 [57090000]53E8F2FE- <1>
   203 00000909 FFFF6683C414        <1>
   204                              <1> 
   205 0000090F C1E810              <1> 		shr		eax, 16							;   EBX = 時;
   206 00000912 6A046A106A0268-     <1> 		cdecl	itoa, eax, .hour, 2, 16, 0b0100	;   // 時刻を文字列に変換
   206 00000919 [54090000]50E8DAFE- <1>
   206 00000921 FFFF6683C414        <1>
   207                              <1> 
   208                              <1> 												;   // 時刻を表示
   209 00000927 68[54090000]FF7510- <1> 		cdecl	draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
   209 0000092F FF750CFF7508E81BFC- <1>
   209 00000938 FFFF6683C410        <1>
   210                              <1> 												;     
   211                              <1> 												;   }
   212                              <1> .10E:											; }
   213                              <1> 
   214                              <1> 		;---------------------------------------
   215                              <1> 		; 【レジスタの復帰】
   216                              <1> 		;---------------------------------------
   217 0000093E 5B                  <1> 		pop		ebx
   218 0000093F 58                  <1> 		pop		eax
   219                              <1> 
   220                              <1> 		;---------------------------------------
   221                              <1> 		; 【スタックフレームの破棄】
   222                              <1> 		;---------------------------------------
   223 00000940 89EC                <1> 		mov		esp, ebp
   224 00000942 5D                  <1> 		pop		ebp
   225                              <1> 
   226 00000943 C3                  <1> 		ret
   227                              <1> 
   228                              <1> ALIGN 2, db 0
   229 00000944 0000000000000000    <1> .temp:	dq	0
   230 0000094C 0000000000000000    <1> .last:	dq	0
   231 00000954 5A5A3A              <1> .hour:	db	"ZZ:"
   232 00000957 5A5A3A              <1> .min:	db	"ZZ:"
   233 0000095A 5A5A00              <1> .sec:	db	"ZZ", 0
   234                              <1> 
   157                                  %include	"../modules/protect/interrupt.s"
   158                              <1> ;************************************************************************
   159                              <1> ;	割り込みベクタの初期化
   160                              <1> ;************************************************************************
   161 0000095D 90<rep 3h>          <1> ALIGN 4
   162 00000960 FF07                <1> IDTR:	dw 		8 * 256 - 1					; idt_limit
   163 00000962 00001000            <1> 		dd 		VECT_BASE					; idt location
   164                              <1> 
   165                              <1> ;************************************************************************
   166                              <1> ;	割り込みテーブルを初期化
   167                              <1> ;------------------------------------------------------------------------
   168                              <1> ;	
   169                              <1> ;	まず、全ての割り込みアドレスにデフォルト処理を設定すし、その後、
   170                              <1> ;	必要な割り込みだけ設定しなおす。
   171                              <1> ;	
   172                              <1> ;	割り込みアドレスは、VECT_BASEで指定され、256の割り込みがあるので
   173                              <1> ;	0x0800バイト占有することになる。
   174                              <1> ;	
   175                              <1> ;	           |____________| _V___
   176                              <1> ;	  VECT_BASE| IntDefault |  |   
   177                              <1> ;	           | IntDefault |  | 8 * 256
   178                              <1> ;	           |      :     |  |   
   179                              <1> ;	           |____________| _|___
   180                              <1> ;	      +0800|////////////|
   181                              <1> ;	           |            |
   182                              <1> ;	
   183                              <1> ;	一つの割り込み設定は8バイトで構成される。
   184                              <1> ;	
   185                              <1> ;	           |____________|____________| 
   186                              <1> ;	        [0]| Address Lo[15: 0]       | 
   187                              <1> ;	        [2]| Selector                | 
   188                              <1> ;	        [4]| Flags                   | 
   189                              <1> ;	        [6]|_Address Lo[32:16]_______| 
   190                              <1> ;	           |/////////////////////////| 
   191                              <1> ;	           |            |            | 
   192                              <1> ;	
   193                              <1> ;========================================================================
   194                              <1> ;■書式		: void init_int(void);
   195                              <1> ;
   196                              <1> ;■引数		: 無し
   197                              <1> ;
   198                              <1> ;■戻り値	: 無し
   199                              <1> ;************************************************************************
   200                              <1> init_int:
   201                              <1> 		;---------------------------------------
   202                              <1> 		; 【レジスタの保存】
   203                              <1> 		;---------------------------------------
   204 00000966 50                  <1> 		push	eax
   205 00000967 53                  <1> 		push	ebx
   206 00000968 51                  <1> 		push	ecx
   207 00000969 57                  <1> 		push	edi
   208                              <1> 
   209                              <1> 		;---------------------------------------
   210                              <1> 		; 全ての割り込みにデフォルト処理を設定
   211                              <1> 		;---------------------------------------
   212 0000096A 8D05[B00A0000]      <1> 		lea		eax, [int_default]				; EAX   = 割り込み処理アドレス;
   213 00000970 BB008E0800          <1> 		mov		ebx, 0x0008_8E00				; EBX   = セグメントセレクタ;
   214 00000975 6693                <1> 		xchg	ax, bx							; // 下位ワードを交換
   215                              <1> 
   216 00000977 B900010000          <1> 		mov		ecx, 256						; ECX   = 割り込みベクタ数
   217 0000097C BF00001000          <1> 		mov		edi, VECT_BASE					; EDI   = 割り込みベクタテーブル
   218                              <1> 
   219                              <1> .10L:											; do
   220                              <1> 												; {
   221 00000981 891F                <1> 		mov		[edi + 0], ebx					;   [EDI + 0] = 割り込みディスクリプタ（下位）
   222 00000983 894704              <1> 		mov		[edi + 4], eax					;   [EDI + 4] = 割り込みディスクリプタ（上位）
   223 00000986 83C708              <1> 		add		edi, 8							;   EDI += 8;
   224 00000989 E2F6                <1> 		loop	.10L							; } while (ECX--);
   225                              <1> 
   226                              <1> 		;---------------------------------------
   227                              <1> 		; 割り込みディスクリプタの設定
   228                              <1> 		;---------------------------------------
   229 0000098B 0F011D[60090000]    <1> 		lidt	[IDTR]							; // 割り込みディスクリプタテーブルをロード
   230                              <1> 
   231                              <1> 		;---------------------------------------
   232                              <1> 		; 【レジスタの復帰】
   233                              <1> 		;---------------------------------------
   234 00000992 5F                  <1> 		pop		edi
   235 00000993 59                  <1> 		pop		ecx
   236 00000994 5B                  <1> 		pop		ebx
   237 00000995 58                  <1> 		pop		eax
   238                              <1> 
   239 00000996 C3                  <1> 		ret
   240                              <1> 
   241                              <1> ;************************************************************************
   242                              <1> ;	スタックの内容を表示して無限ループを実行
   243                              <1> ;************************************************************************
   244                              <1> int_stop:
   245 00000997 FB                  <1> 		sti										; // 割り込み許可
   246                              <1> 
   247                              <1> 		;---------------------------------------
   248                              <1> 		; EAXで示される文字列を表示
   249                              <1> 		;---------------------------------------
   250 00000998 50680F0600006A0F6A- <1> 		cdecl	draw_str, 25, 15, 0x060F, eax	; draw_str(EAX);
   250 000009A1 19E8AEFBFFFF6683C4- <1>
   250 000009AA 10                  <1>
   251                              <1> 
   252                              <1> 		;---------------------------------------
   253                              <1> 		; スタックのデータを文字列に変換
   254                              <1> 		;---------------------------------------
   255 000009AB 8B0424              <1> 		mov		eax, [esp + 0]					; EAX = ESP[ 0];
   256 000009AE 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p1, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   256 000009B5 [730A0000]50E83EFE- <1>
   256 000009BD FFFF6683C414        <1>
   257                              <1> 
   258 000009C3 8B442404            <1> 		mov		eax, [esp + 4]					; EAX = ESP[ 4];
   259 000009C7 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p2, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   259 000009CE [840A0000]50E825FE- <1>
   259 000009D6 FFFF6683C414        <1>
   260                              <1> 
   261 000009DC 8B442408            <1> 		mov		eax, [esp + 8]					; EAX = ESP[ 8];
   262 000009E0 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p3, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   262 000009E7 [950A0000]50E80CFE- <1>
   262 000009EF FFFF6683C414        <1>
   263                              <1> 
   264 000009F5 8B44240C            <1> 		mov		eax, [esp +12]					; EAX = ESP[12];
   265 000009F9 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p4, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   265 00000A00 [A60A0000]50E8F3FD- <1>
   265 00000A08 FFFF6683C414        <1>
   266                              <1> 
   267                              <1> 		;---------------------------------------
   268                              <1> 		; 文字列の表示
   269                              <1> 		;---------------------------------------
   270 00000A0E 68[6C0A0000]68040F- <1> 		cdecl	draw_str, 25, 16, 0x0F04, .s1	; draw_str("ESP+ 0:-------- ");
   270 00000A16 00006A106A19E834FB- <1>
   270 00000A1F FFFF6683C410        <1>
   271 00000A25 68[7D0A0000]68040F- <1> 		cdecl	draw_str, 25, 17, 0x0F04, .s2	; draw_str("   + 4:-------- ");
   271 00000A2D 00006A116A19E81DFB- <1>
   271 00000A36 FFFF6683C410        <1>
   272 00000A3C 68[8E0A0000]68040F- <1> 		cdecl	draw_str, 25, 18, 0x0F04, .s3	; draw_str("   + 8:-------- ");
   272 00000A44 00006A126A19E806FB- <1>
   272 00000A4D FFFF6683C410        <1>
   273 00000A53 68[9F0A0000]68040F- <1> 		cdecl	draw_str, 25, 19, 0x0F04, .s4	; draw_str("   +12:-------- ");
   273 00000A5B 00006A136A19E8EFFA- <1>
   273 00000A64 FFFF6683C410        <1>
   274                              <1> 
   275                              <1> 		;---------------------------------------
   276                              <1> 		; 無限ループ
   277                              <1> 		;---------------------------------------
   278 00000A6A EBFE                <1> 		jmp		$								; while (1) ; // 無限ループ
   279                              <1> 
   280 00000A6C 4553502B20303A      <1> .s1		db	"ESP+ 0:"
   281 00000A73 5F5F5F5F5F5F5F5F20- <1> .p1		db	"________ ", 0
   281 00000A7C 00                  <1>
   282 00000A7D 2020202B20343A      <1> .s2		db	"   + 4:"
   283 00000A84 5F5F5F5F5F5F5F5F20- <1> .p2		db	"________ ", 0
   283 00000A8D 00                  <1>
   284 00000A8E 2020202B20383A      <1> .s3		db	"   + 8:"
   285 00000A95 5F5F5F5F5F5F5F5F20- <1> .p3		db	"________ ", 0
   285 00000A9E 00                  <1>
   286 00000A9F 2020202B31323A      <1> .s4		db	"   +12:"
   287 00000AA6 5F5F5F5F5F5F5F5F20- <1> .p4		db	"________ ", 0
   287 00000AAF 00                  <1>
   288                              <1> 
   289                              <1> ;************************************************************************
   290                              <1> ;	割り込み処理：デフォルトの処理
   291                              <1> ;************************************************************************
   292                              <1> int_default:
   293 00000AB0 9C                  <1> 		pushf									; // EFLAGS(IF==0)
   294 00000AB1 0E                  <1> 		push	cs								; // CS
   295 00000AB2 68[97090000]        <1> 		push	int_stop						; // スタック表示処理
   296                              <1> 
   297 00000AB7 B8[BD0A0000]        <1> 		mov		eax, .s0						; // 割り込み種別
   298 00000ABC CF                  <1> 		iret
   299                              <1> 
   300 00000ABD 203C2020202053544F- <1> .s0		db	" <    STOP    > ", 0
   300 00000AC6 50202020203E2000    <1>
   301                              <1> 
   302                              <1> ;************************************************************************
   303                              <1> ;	割り込み処理：ゼロ除算
   304                              <1> ;************************************************************************
   305                              <1> int_zero_div:
   306 00000ACE 9C                  <1> 		pushf									; // EFLAGS
   307 00000ACF 0E                  <1> 		push	cs								; // CS
   308 00000AD0 68[97090000]        <1> 		push	int_stop						; // スタック表示処理
   309                              <1> 
   310 00000AD5 B8[DB0A0000]        <1> 		mov		eax, .s0						; // 割り込み種別
   311 00000ADA CF                  <1> 		iret
   312                              <1> 
   313 00000ADB 203C20205A45524F20- <1> .s0		db	" <  ZERO DIV  > ", 0
   313 00000AE4 44495620203E2000    <1>
   314                              <1> 
   158                                  %include	"../modules/protect/pic.s"
   159                              <1> ;************************************************************************
   160                              <1> ;	割り込みコントローラの初期化
   161                              <1> ;========================================================================
   162                              <1> ;■書式		: void init_pic(void);
   163                              <1> ;
   164                              <1> ;■引数		: 無し
   165                              <1> ;
   166                              <1> ;■戻り値	: 無し
   167                              <1> ;************************************************************************
   168                              <1> init_pic:
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 【レジスタの保存】
   171                              <1> 		;---------------------------------------
   172 00000AEC 50                  <1> 		push	eax
   173                              <1> 
   174                              <1> 		;---------------------------------------
   175                              <1> 		; マスタPICの設定
   176                              <1> 		;---------------------------------------
   177                              <1> 		outp	0x20, 0x11						; // MASTER.ICW1 = 0x11;
    72 00000AED B011                <2>  mov al, %2
    73 00000AEF E620                <2>  out %1, al
   178                              <1> 		outp	0x21, 0x20						; // MASTER.ICW2 = 0x20;
    72 00000AF1 B020                <2>  mov al, %2
    73 00000AF3 E621                <2>  out %1, al
   179                              <1> 		outp	0x21, 0x04						; // MASTER.ICW3 = 0x04;
    72 00000AF5 B004                <2>  mov al, %2
    73 00000AF7 E621                <2>  out %1, al
   180                              <1> 		outp	0x21, 0x01						; // MASTER.ICW4 = 0x01;
    72 00000AF9 B001                <2>  mov al, %2
    73 00000AFB E621                <2>  out %1, al
   181                              <1> 		outp	0x21, 0xFF						; // マスタ割り込みマスク
    72 00000AFD B0FF                <2>  mov al, %2
    73 00000AFF E621                <2>  out %1, al
   182                              <1> 
   183                              <1> 		;---------------------------------------
   184                              <1> 		; スレーブPICの設定
   185                              <1> 		;---------------------------------------
   186                              <1> 		outp	0xA0, 0x11						; // SLAVE.ICW1  = 0x11;
    72 00000B01 B011                <2>  mov al, %2
    73 00000B03 E6A0                <2>  out %1, al
   187                              <1> 		outp	0xA1, 0x28						; // SLAVE.ICW2  = 0x28;
    72 00000B05 B028                <2>  mov al, %2
    73 00000B07 E6A1                <2>  out %1, al
   188                              <1> 		outp	0xA1, 0x02						; // SLAVE.ICW3  = 0x02;
    72 00000B09 B002                <2>  mov al, %2
    73 00000B0B E6A1                <2>  out %1, al
   189                              <1> 		outp	0xA1, 0x01						; // SLAVE.ICW4  = 0x01;
    72 00000B0D B001                <2>  mov al, %2
    73 00000B0F E6A1                <2>  out %1, al
   190                              <1> 		outp	0xA1, 0xFF						; // スレーブ割り込みマスク
    72 00000B11 B0FF                <2>  mov al, %2
    73 00000B13 E6A1                <2>  out %1, al
   191                              <1> 
   192                              <1> 		;---------------------------------------
   193                              <1> 		; 【レジスタの復帰】
   194                              <1> 		;---------------------------------------
   195 00000B15 58                  <1> 		pop		eax
   196                              <1> 
   197 00000B16 C3                  <1> 		ret
   198                              <1> 
   159                                  %include	"../modules/protect/int_rtc.s"
   160                              <1> ;************************************************************************
   161                              <1> ;	RTCの割り込み許可設定
   162                              <1> ;========================================================================
   163                              <1> ;■書式		: void rtc_int_en(bit);
   164                              <1> ;
   165                              <1> ;■引数
   166                              <1> ;	bit		: 割り込みを許可するビット
   167                              <1> ;
   168                              <1> ;■戻り値	: 無し
   169                              <1> ;************************************************************************
   170                              <1> rtc_int_en:
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 【スタックフレームの構築】
   173                              <1> 		;---------------------------------------
   174                              <1> 												; ------|--------
   175                              <1> 												;    + 8| ビット
   176                              <1> 												; ------|--------
   177                              <1> 												;    + 4| EIP（戻り番地）
   178 00000B17 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   179 00000B18 89E5                <1> 		mov		ebp, esp						; ------+--------
   180                              <1> 
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 【レジスタの保存】
   183                              <1> 		;---------------------------------------
   184 00000B1A 50                  <1> 		push	eax
   185                              <1> 
   186                              <1> 		;---------------------------------------
   187                              <1> 		; 割り込み許可設定
   188                              <1> 		;---------------------------------------
   189                              <1> 		outp	0x70, 0x0B						; outp(0x70, AL);   // レジスタBを選択
    72 00000B1B B00B                <2>  mov al, %2
    73 00000B1D E670                <2>  out %1, al
   190                              <1> 
   191 00000B1F E471                <1> 		in		al, 0x71						; AL  = port(0x71); // レジスタBの
   192 00000B21 0A4508              <1> 		or		al, [ebp + 8]					; AL |= ビット;     // 指定されたビットをセット
   193                              <1> 
   194 00000B24 E671                <1> 		out		0x71, al						; outp(0x71, AL);   // レジスタBに書き込み
   195                              <1> 
   196                              <1> 		;---------------------------------------
   197                              <1> 		; 【レジスタの復帰】
   198                              <1> 		;---------------------------------------
   199 00000B26 58                  <1> 		pop		eax
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; 【スタックフレームの破棄】
   203                              <1> 		;---------------------------------------
   204 00000B27 89EC                <1> 		mov		esp, ebp
   205 00000B29 5D                  <1> 		pop		ebp
   206                              <1> 
   207 00000B2A C3                  <1> 		ret
   208                              <1> 
   209                              <1> 
   210                              <1> ;************************************************************************
   211                              <1> ;	割り込み処理：RTC
   212                              <1> ;************************************************************************
   213                              <1> int_rtc:
   214                              <1> 		;---------------------------------------
   215                              <1> 		; 【レジスタの保存】
   216                              <1> 		;---------------------------------------
   217 00000B2B 60                  <1> 		pusha
   218 00000B2C 1E                  <1> 		push	ds
   219 00000B2D 06                  <1> 		push	es
   220                              <1> 
   221                              <1> 		;---------------------------------------
   222                              <1> 		; データ用セグメントセレクタの設定
   223                              <1> 		;---------------------------------------
   224 00000B2E 66B81000            <1> 		mov		ax, 0x0010						; 
   225 00000B32 8ED8                <1> 		mov		ds, ax							; 
   226 00000B34 8EC0                <1> 		mov		es, ax							; 
   227                              <1> 
   228                              <1> 		;---------------------------------------
   229                              <1> 		; RTCから時刻を取得
   230                              <1> 		;---------------------------------------
   231 00000B36 68[D4010000]E846FD- <1> 		cdecl	rtc_get_time, RTC_TIME			; EAX = get_time(&RTC_TIME);
   231 00000B3E FFFF6683C404        <1>
   232                              <1> 												; 
   233                              <1> 		;---------------------------------------
   234                              <1> 		; RTCの割り込み要因を取得
   235                              <1> 		;---------------------------------------
   236                              <1> 		outp	0x70, 0x0C						; outp(0x70, 0x0C); // レジスタCを選択
    72 00000B44 B00C                <2>  mov al, %2
    73 00000B46 E670                <2>  out %1, al
   237 00000B48 E471                <1> 		in		al, 0x71						; AL = inp();
   238                              <1> 
   239                              <1> 		;---------------------------------------
   240                              <1> 		; 割り込みフラグをクリア(EOI)
   241                              <1> 		;---------------------------------------
   242                              <1> 		outp	0xA0, 0x20						; outp(0xA0, EOI); // スレーブPIC
    72 00000B4A B020                <2>  mov al, %2
    73 00000B4C E6A0                <2>  out %1, al
   243                              <1> 		outp	0x20, 0x20						; outp(0x20, EOI); // マスタPIC
    72 00000B4E B020                <2>  mov al, %2
    73 00000B50 E620                <2>  out %1, al
   244                              <1> 
   245                              <1> 		;---------------------------------------
   246                              <1> 		; 【レジスタの復帰】
   247                              <1> 		;---------------------------------------
   248 00000B52 07                  <1> 		pop		es								; 
   249 00000B53 1F                  <1> 		pop		ds								; 
   250 00000B54 61                  <1> 		popa									; 
   251                              <1> 
   252 00000B55 CF                  <1> 		iret									; 割り込み処理の終了
   253                              <1> 
   160                                  %include	"../modules/protect/int_keyboard.s"
   161                              <1> ;************************************************************************
   162                              <1> ;	割り込み処理：キーボード
   163                              <1> ;------------------------------------------------------------------------
   164                              <1> ;	KBC（キーボードコントローラ）からキーコードを取得して、
   165                              <1> ;	専用のリングバッファに保存する。
   166                              <1> ;************************************************************************
   167                              <1> int_keyboard:
   168                              <1> 		;---------------------------------------
   169                              <1> 		; 【レジスタの保存】
   170                              <1> 		;---------------------------------------
   171 00000B56 60                  <1> 		pusha
   172 00000B57 1E                  <1> 		push	ds
   173 00000B58 06                  <1> 		push	es
   174                              <1> 
   175                              <1> 		;---------------------------------------
   176                              <1> 		; データ用セグメントの設定
   177                              <1> 		;---------------------------------------
   178 00000B59 66B81000            <1> 		mov		ax, 0x0010						; 
   179 00000B5D 8ED8                <1> 		mov		ds, ax							; 
   180 00000B5F 8EC0                <1> 		mov		es, ax							; 
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; KBCのバッファ読み取り
   184                              <1> 		;---------------------------------------
   185 00000B61 E460                <1> 		in		al, 0x60						; AL = キーコードの取得
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; キーコードの保存
   189                              <1> 		;---------------------------------------
   190 00000B63 5068[7C0B0000]E856- <1> 		cdecl	ring_wr, _KEY_BUFF, eax			; ring_wr(_KEY_BUFF, EAX); // キーコードの保存
   190 00000B6B 0000006683C408      <1>
   191                              <1> 
   192                              <1> 		;---------------------------------------
   193                              <1> 		; 割り込み終了コマンド送信
   194                              <1> 		;---------------------------------------
   195                              <1> 		outp	0x20, 0x20						; outp(); // マスタPIC:EOIコマンド
    72 00000B72 B020                <2>  mov al, %2
    73 00000B74 E620                <2>  out %1, al
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; 【レジスタの復帰】
   199                              <1> 		;---------------------------------------
   200 00000B76 07                  <1> 		pop		es								; 
   201 00000B77 1F                  <1> 		pop		ds								; 
   202 00000B78 61                  <1> 		popa
   203                              <1> 
   204 00000B79 CF                  <1> 		iret									; 割り込みからの復帰
   205                              <1> 
   206 00000B7A 00<rep 2h>          <1> ALIGN 4, db 0
   207 00000B7C 00<rep 18h>         <1> _KEY_BUFF:	times ring_buff_size db 0
   208                              <1> 
   161                                  %include	"../modules/protect/ring_buff.s"
   162                              <1> ;************************************************************************
   163                              <1> ;	リングバッファからデータを取得
   164                              <1> ;========================================================================
   165                              <1> ;■書式		: DWORD ring_rd(buff, data);
   166                              <1> ;
   167                              <1> ;■引数
   168                              <1> ;	buff	: リングバッファ
   169                              <1> ;	data	: 読み込んだデータの保存先アドレス
   170                              <1> ;
   171                              <1> ;■戻り値	: データあり(0以外)、データ無し(0)
   172                              <1> ;************************************************************************
   173                              <1> ring_rd:
   174                              <1> 		;---------------------------------------
   175                              <1> 		; 【スタックフレームの構築】
   176                              <1> 		;---------------------------------------
   177                              <1> 												; ------|--------
   178                              <1> 												;    +12| リングデータ
   179                              <1> 												;    + 8| データアドレス
   180                              <1> 												; ------|--------
   181                              <1> 												;    + 4| EIP（戻り番地）
   182 00000B94 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   183 00000B95 89E5                <1> 		mov		ebp, esp						; ------+--------
   184                              <1> 
   185                              <1> 		;---------------------------------------
   186                              <1> 		; 【レジスタの保存】
   187                              <1> 		;---------------------------------------
   188 00000B97 53                  <1> 		push	ebx
   189 00000B98 56                  <1> 		push	esi
   190 00000B99 57                  <1> 		push	edi
   191                              <1> 
   192                              <1> 		;---------------------------------------
   193                              <1> 		; 引数を取得
   194                              <1> 		;---------------------------------------
   195 00000B9A 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   196 00000B9D 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = データアドレス;
   197                              <1> 
   198                              <1> 		;---------------------------------------
   199                              <1> 		; 読み込み位置を確認
   200                              <1> 		;---------------------------------------
   201 00000BA0 B800000000          <1> 		mov		eax, 0							; EAX = 0;          // データ無し
   202 00000BA5 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;         // 読み込み位置
   203 00000BA7 3B5E04              <1> 		cmp		ebx, [esi + ring_buff.wp]		; if (EBX != wp)    // 書き込み位置と異なる
   204 00000BAA 7411                <1> 		je		.10E							; {
   205                              <1> 												;   
   206 00000BAC 8A441E08            <1> 		mov		al, [esi + ring_buff.item + ebx] ;   AL = BUFF[rp]; // キーコードを保存
   207                              <1> 												;   
   208 00000BB0 8807                <1> 		mov		[edi], al						;   [EDI] = AL;     // データを保存
   209                              <1> 												;   
   210 00000BB2 43                  <1> 		inc		ebx								;   EBX++;          // 次の読み込み位置
   211 00000BB3 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= 0x0F     // サイズの制限
   212 00000BB6 891E                <1> 		mov		[esi + ring_buff.rp], ebx		;   rp = EBX;       // 読み込み位置を保存
   213                              <1> 												;   
   214 00000BB8 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // データあり
   215                              <1> .10E:											; }
   216                              <1> 
   217                              <1> 		;---------------------------------------
   218                              <1> 		; 【レジスタの復帰】
   219                              <1> 		;---------------------------------------
   220 00000BBD 5F                  <1> 		pop		edi
   221 00000BBE 5E                  <1> 		pop		esi
   222 00000BBF 5B                  <1> 		pop		ebx
   223                              <1> 
   224                              <1> 		;---------------------------------------
   225                              <1> 		; 【スタックフレームの破棄】
   226                              <1> 		;---------------------------------------
   227 00000BC0 89EC                <1> 		mov		esp, ebp
   228 00000BC2 5D                  <1> 		pop		ebp
   229                              <1> 
   230 00000BC3 C3                  <1> 		ret
   231                              <1> 
   232                              <1> ;************************************************************************
   233                              <1> ;	リングバッファにデータを格納
   234                              <1> ;========================================================================
   235                              <1> ;■書式		: DWORD ring_wr(buff, data);
   236                              <1> ;
   237                              <1> ;■引数
   238                              <1> ;	buff	: リングバッファ
   239                              <1> ;	data	: 書き込むデータ
   240                              <1> ;
   241                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   242                              <1> ;************************************************************************
   243                              <1> ring_wr:
   244                              <1> 		;---------------------------------------
   245                              <1> 		; 【スタックフレームの構築】
   246                              <1> 		;---------------------------------------
   247                              <1> 												; ------|--------
   248                              <1> 												;    +12| リングデータ
   249                              <1> 												;    + 8| データ
   250                              <1> 												; ------|--------
   251                              <1> 												;    + 4| EIP（戻り番地）
   252 00000BC4 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   253 00000BC5 89E5                <1> 		mov		ebp, esp						; ------+--------
   254                              <1> 
   255                              <1> 		;---------------------------------------
   256                              <1> 		; 【レジスタの保存】
   257                              <1> 		;---------------------------------------
   258 00000BC7 53                  <1> 		push	ebx
   259 00000BC8 51                  <1> 		push	ecx
   260 00000BC9 56                  <1> 		push	esi
   261                              <1> 
   262                              <1> 		;---------------------------------------
   263                              <1> 		; 引数を取得
   264                              <1> 		;---------------------------------------
   265 00000BCA 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   266                              <1> 
   267                              <1> 		;---------------------------------------
   268                              <1> 		; 書き込み位置を確認
   269                              <1> 		;---------------------------------------
   270 00000BCD B800000000          <1> 		mov		eax, 0							; EAX  = 0;         // 失敗
   271 00000BD2 8B5E04              <1> 		mov		ebx, [esi + ring_buff.wp]		; EBX  = wp;        // 書き込み位置
   272 00000BD5 89D9                <1> 		mov		ecx, ebx						; ECX  = EBX;
   273 00000BD7 41                  <1> 		inc		ecx								; ECX++;            // 次の書き込み位置
   274 00000BD8 83E10F              <1> 		and		ecx, RING_INDEX_MASK			; ECX &= 0x0F       // サイズの制限
   275                              <1> 												; 
   276 00000BDB 3B0E                <1> 		cmp		ecx, [esi + ring_buff.rp]		; if (ECX != rp)    // 読み込み位置と異なる
   277 00000BDD 740F                <1> 		je		.10E							; {
   278                              <1> 												; 
   279 00000BDF 8A450C              <1> 		mov		al, [ebp +12]					;   AL = データ;
   280                              <1> 												; 
   281 00000BE2 88441E08            <1> 		mov		[esi + ring_buff.item + ebx], al ;   BUFF[wp] = AL; // キーコードを保存
   282 00000BE6 894E04              <1> 		mov		[esi + ring_buff.wp], ecx		;   wp = ECX;       // 書き込み位置を保存
   283 00000BE9 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // 成功
   284                              <1> .10E:											; }
   285                              <1> 
   286                              <1> 		;---------------------------------------
   287                              <1> 		; 【レジスタの復帰】
   288                              <1> 		;---------------------------------------
   289 00000BEE 5E                  <1> 		pop		esi
   290 00000BEF 59                  <1> 		pop		ecx
   291 00000BF0 5B                  <1> 		pop		ebx
   292                              <1> 
   293                              <1> 		;---------------------------------------
   294                              <1> 		; 【スタックフレームの破棄】
   295                              <1> 		;---------------------------------------
   296 00000BF1 89EC                <1> 		mov		esp, ebp
   297 00000BF3 5D                  <1> 		pop		ebp
   298                              <1> 
   299 00000BF4 C3                  <1> 		ret
   300                              <1> 
   301                              <1> ;************************************************************************
   302                              <1> ;	リングバッファ内要素の表示
   303                              <1> ;========================================================================
   304                              <1> ;■書式		: void ring_show(col, row, buff);
   305                              <1> ;
   306                              <1> ;■引数
   307                              <1> ;	col		: 列
   308                              <1> ;	row		: 行
   309                              <1> ;	buff	: リングバッファ
   310                              <1> ;
   311                              <1> ;■戻り値	: 無し
   312                              <1> ;************************************************************************
   313                              <1> draw_key:
   314                              <1> 		;---------------------------------------
   315                              <1> 		; 【スタックフレームの構築】
   316                              <1> 		;---------------------------------------
   317                              <1> 												; ------|--------
   318                              <1> 												; EBP+16| リングバッファ
   319                              <1> 												; EBP+12| Y（行）
   320                              <1> 												; EBP+ 8| X（列）
   321                              <1> 												; ------|--------
   322 00000BF5 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   323 00000BF6 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   324                              <1> 												; ------|--------
   325                              <1> 
   326                              <1> 		;---------------------------------------
   327                              <1> 		; 【レジスタの保存】
   328                              <1> 		;---------------------------------------
   329 00000BF8 60                  <1> 		pusha
   330                              <1> 
   331                              <1> 		;---------------------------------------
   332                              <1> 		; 引数を取得
   333                              <1> 		;---------------------------------------
   334 00000BF9 8B5508              <1> 		mov		edx, [ebp + 8]					; EDX = X（列）;
   335 00000BFC 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）;
   336 00000BFF 8B7510              <1> 		mov		esi, [ebp +16]					; ESI = リングバッファ;
   337                              <1> 
   338                              <1> 		;---------------------------------------
   339                              <1> 		; リングバッファの情報を取得
   340                              <1> 		;---------------------------------------
   341 00000C02 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;             // 読み込み位置
   342 00000C04 8D7608              <1> 		lea		esi, [esi + ring_buff.item]		; ESI = &KEY_BUFF[EBX];
   343 00000C07 B910000000          <1> 		mov		ecx, RING_ITEM_SIZE				; ECX = RING_ITEM_SIZE; // 要素数
   344                              <1> 
   345                              <1> 		;---------------------------------------
   346                              <1> 		; 文字に変換しながら表示
   347                              <1> 		;---------------------------------------
   348                              <1> .10L:											; do
   349                              <1> 												; {
   350 00000C0C 4B                  <1> 		dec		ebx								;   EBX--; // 読み込み位置
   351 00000C0D 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= RING_INDEX_MASK;
   352 00000C10 8A041E              <1> 		mov		al, [esi + ebx]					;   EAX  = KEY_BUFF[EBX];
   353                              <1> 												;   
   354 00000C13 6A046A106A0268-     <1> 		cdecl	itoa, eax, .tmp, 2, 16, 0b0100	;   // キーコードを文字列に変換
   354 00000C1A [440C0000]50E8D9FB- <1>
   354 00000C22 FFFF6683C414        <1>
   355 00000C28 68[440C0000]6A0257- <1> 		cdecl	draw_str, edx, edi, 0x02, .tmp	;   // 変換した文字列を表示
   355 00000C30 52E81FF9FFFF6683C4- <1>
   355 00000C39 10                  <1>
   356                              <1> 												;   
   357 00000C3A 83C203              <1> 		add		edx, 3							;   // 表示位置を更新（3文字分）
   358                              <1> 												;   
   359 00000C3D E2CD                <1> 		loop	.10L							;   
   360                              <1> .10E:											; } while (ECX--);
   361                              <1> 
   362                              <1> 		;---------------------------------------
   363                              <1> 		; 【レジスタの復帰】
   364                              <1> 		;---------------------------------------
   365 00000C3F 61                  <1> 		popa
   366                              <1> 
   367                              <1> 		;---------------------------------------
   368                              <1> 		; 【スタックフレームの破棄】
   369                              <1> 		;---------------------------------------
   370 00000C40 89EC                <1> 		mov		esp, ebp
   371 00000C42 5D                  <1> 		pop		ebp
   372                              <1> 
   373 00000C43 C3                  <1> 		ret
   374                              <1> 
   375 00000C44 2D2D2000            <1> .tmp	db "-- ", 0
   162                                  %include	"../modules/protect/timer.s"
   163                              <1> ;************************************************************************
   164                              <1> ;	タイマーの設定
   165                              <1> ;------------------------------------------------------------------------
   166                              <1> ;	タイマー（カウンタ0）割り込み許可
   167                              <1> ;========================================================================
   168                              <1> ;■書式		: void int_en_timer0(void);
   169                              <1> ;
   170                              <1> ;■引数		: 無し
   171                              <1> ;
   172                              <1> ;■戻り値	: 無し
   173                              <1> ;************************************************************************
   174                              <1> int_en_timer0:
   175                              <1> 		;---------------------------------------
   176                              <1> 		; 【レジスタの保存】
   177                              <1> 		;---------------------------------------
   178 00000C48 50                  <1> 		push	eax
   179                              <1> 
   180                              <1> 		;---------------------------------------
   181                              <1> 		;	8254 Timer
   182                              <1> 		;	0x2e9c(11932)=10[ms] @ CLK=1,193,182[Hz]
   183                              <1> 		;---------------------------------------
   184                              <1> 		 outp	 0x43, 0b_00_11_010_0			; // カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    72 00000C49 B034                <2>  mov al, %2
    73 00000C4B E643                <2>  out %1, al
   185                              <1> 		 outp	 0x40, 0x9C						; // 下位バイト
    72 00000C4D B09C                <2>  mov al, %2
    73 00000C4F E640                <2>  out %1, al
   186                              <1> 		 outp	 0x40, 0x2E						; // 上位バイト
    72 00000C51 B02E                <2>  mov al, %2
    73 00000C53 E640                <2>  out %1, al
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 【レジスタの復帰】
   190                              <1> 		;---------------------------------------
   191 00000C55 58                  <1> 		pop		eax
   192                              <1> 
   193 00000C56 C3                  <1> 		ret
   194                              <1> 
   163                                  %include	"../modules/protect/draw_rotation_bar.s"
   164                              <1> ;************************************************************************
   165                              <1> ;	画面左下に、回転する棒を表示
   166                              <1> ;========================================================================
   167                              <1> ;■書式		: void draw_rotation_bar(void);
   168                              <1> ;
   169                              <1> ;■引数		: 無し
   170                              <1> ;
   171                              <1> ;■戻り値	: 無し
   172                              <1> ;************************************************************************
   173                              <1> draw_rotation_bar:
   174                              <1> 		;---------------------------------------
   175                              <1> 		; 【レジスタの保存】
   176                              <1> 		;---------------------------------------
   177 00000C57 50                  <1> 		push	eax
   178                              <1> 
   179                              <1> 		;---------------------------------------
   180                              <1> 		; タイマー割り込みカウンタを確認
   181                              <1> 		;---------------------------------------
   182 00000C58 A1[44030000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX  = タイマー割り込みカウンタ
   183 00000C5D C1E804              <1> 		shr		eax, 4							; EAX /= 4;    // 16で除算
   184 00000C60 3B05[880C0000]      <1> 		cmp		eax, [.index]					; if (EAX != 前回値)
   185 00000C66 741E                <1> 		je		.10E							; {
   186                              <1> 												;   
   187 00000C68 A3[880C0000]        <1> 		mov		[.index], eax					;   前回値 = EAX;
   188 00000C6D 83E003              <1> 		and		eax, 0x03						;   EAX &= 0x03; // 0～3に限定
   189                              <1> 												;   
   190 00000C70 8A80[8C0C0000]      <1> 		mov		al, [.table + eax]				;   AL = table[index];
   191 00000C76 506A0F6A1D6A00E8AE- <1> 		cdecl	draw_char, 0, 29, 0x000F, eax	;   draw_char(); // 文字を表示
   191 00000C7F F7FFFF6683C410      <1>
   192                              <1> 												;   
   193                              <1> .10E:											; }
   194                              <1> 
   195                              <1> 		;---------------------------------------
   196                              <1> 		; 【レジスタの復帰】
   197                              <1> 		;---------------------------------------
   198 00000C86 58                  <1> 		pop		eax
   199                              <1> 
   200 00000C87 C3                  <1> 		ret
   201                              <1> 
   202                              <1> ALIGN 4, db 0
   203 00000C88 00000000            <1> .index:		dd 0								; 前回値
   204 00000C8C 7C2F2D5C            <1> .table:		db	"|/-\"							; 表示キャラクタ
   205                              <1> 
   164                                  %include	"../modules/protect/call_gate.s"
   165                              <1> ;************************************************************************
   166                              <1> ;	コールゲート関数
   167                              <1> ;************************************************************************
   168                              <1> call_gate:
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 【スタックフレームの構築】
   171                              <1> 		;---------------------------------------
   172                              <1> 												; ------|--------
   173                              <1> 												; EBP+12| X（列）
   174                              <1> 												; EBP+16| Y（行）
   175                              <1> 												; EBP+20| 色
   176                              <1> 												; EBP+24| 文字
   177                              <1> 												; ---------------
   178                              <1> 												; EBP+ 8| CS（コードセグメント）
   179 00000C90 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   180 00000C91 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   181                              <1> 												; ---------------
   182                              <1> 		;---------------------------------------
   183                              <1> 		; 【レジスタの保存】
   184                              <1> 		;---------------------------------------
   185 00000C93 60                  <1> 		pusha
   186 00000C94 1E                  <1> 		push	ds
   187 00000C95 06                  <1> 		push	es
   188                              <1> 
   189                              <1> 		;---------------------------------------
   190                              <1> 		; データ用セグメントの設定
   191                              <1> 		;---------------------------------------
   192 00000C96 66B81000            <1> 		mov		ax, 0x0010						; 
   193 00000C9A 8ED8                <1> 		mov		ds, ax							; 
   194 00000C9C 8EC0                <1> 		mov		es, ax							; 
   195                              <1> 
   196                              <1> 		;---------------------------------------
   197                              <1> 		; 文字を表示
   198                              <1> 		;---------------------------------------
   199 00000C9E 8B450C              <1> 		mov		eax, dword [ebp +12]			; EAX = X（列）;
   200 00000CA1 8B5D10              <1> 		mov		ebx, dword [ebp +16]			; EBX = Y（行）;
   201 00000CA4 8B4D14              <1> 		mov		ecx, dword [ebp +20]			; ECX = 色;
   202 00000CA7 8B5518              <1> 		mov		edx, dword [ebp +24]			; EDX = 文字;
   203 00000CAA 52515350E8A2F8FFFF- <1> 		cdecl	draw_str, eax, ebx , ecx, edx	; draw_str();
   203 00000CB3 6683C410            <1>
   204                              <1> 
   205                              <1> 		;---------------------------------------
   206                              <1> 		; 【レジスタの復帰】
   207                              <1> 		;---------------------------------------
   208 00000CB7 07                  <1> 		pop		es								; 
   209 00000CB8 1F                  <1> 		pop		ds								; 
   210 00000CB9 61                  <1> 		popa									; 
   211                              <1> 
   212                              <1> 		;---------------------------------------
   213                              <1> 		; 【スタックフレームの破棄】
   214                              <1> 		;---------------------------------------
   215 00000CBA 89EC                <1> 		mov		esp, ebp
   216 00000CBC 5D                  <1> 		pop		ebp
   217                              <1> 
   218 00000CBD CA1000              <1> 		retf	4 * 4
   219                              <1> 
   165                                  %include	"../modules/protect/trap_gate.s"
   166                              <1> ;************************************************************************
   167                              <1> ;	システムコール：1文字出力
   168                              <1> ;************************************************************************
   169                              <1> trap_gate_81:
   170                              <1> 		;---------------------------------------
   171                              <1> 		; 1文字出力
   172                              <1> 		;---------------------------------------
   173 00000CC0 50535251E867F7FFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	; // 1文字出力
   173 00000CC9 6683C410            <1>
   174                              <1> 
   175 00000CCD CF                  <1> 		iret
   176                              <1> 
   177                              <1> ;************************************************************************
   178                              <1> ;	システムコール：点の描画
   179                              <1> ;************************************************************************
   180                              <1> trap_gate_82:
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 点の描画
   183                              <1> 		;---------------------------------------
   184 00000CCE 535251E837F9FFFF66- <1> 		cdecl	draw_pixel, ecx, edx, ebx		; // 点の描画
   184 00000CD7 83C40C              <1>
   185                              <1> 
   186 00000CDA CF                  <1> 		iret
   187                              <1> 
   166                                  %include	"../modules/protect/test_and_set.s"
   167                              <1> ;************************************************************************
   168                              <1> ;	RTCから時刻データを取得する
   169                              <1> ;========================================================================
   170                              <1> ;■書式		: void test_and_set(local);
   171                              <1> ;
   172                              <1> ;■引数
   173                              <1> ;	local	: ローカル変数のアドレス
   174                              <1> ;
   175                              <1> ;■戻り値	: 無し
   176                              <1> ;************************************************************************
   177                              <1> test_and_set:
   178                              <1> 		;---------------------------------------
   179                              <1> 		; 【スタックフレームの構築】
   180                              <1> 		;---------------------------------------
   181                              <1> 												; EBP+ 8| ローカル変数のアドレス
   182                              <1> 												; ------+----------------
   183 00000CDB 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   184 00000CDC 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   185                              <1> 												; ------+----------------
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 【レジスタの保存】
   189                              <1> 		;---------------------------------------
   190 00000CDE 50                  <1> 		push	eax
   191 00000CDF 53                  <1> 		push	ebx
   192                              <1> 
   193                              <1> 		;---------------------------------------
   194                              <1> 		; テストアンドセット
   195                              <1> 		;---------------------------------------
   196 00000CE0 B800000000          <1> 		mov		eax, 0							; local  = 0;
   197 00000CE5 8B5D08              <1> 		mov		ebx, [ebp + 8]					; global = アドレス;
   198                              <1> 
   199                              <1> .10L:											; for ( ; ; )
   200                              <1> 												; {
   201 00000CE8 F00FAB03            <1> 		lock bts [ebx], eax						;   CF = TEST_AND_SET(IN_USE, 1);
   202 00000CEC 7307                <1> 		jnc		.10E							;   if (0 == CF)
   203                              <1> 												;     break;
   204                              <1> 												;   
   205                              <1> .12L:											;   for ( ; ; )
   206                              <1> 												;   {
   207 00000CEE 0FA303              <1> 		bt		[ebx], eax						;     CF = TEST(IN_USE, 1);
   208 00000CF1 72FB                <1> 		jc		.12L							;     if (0 == CF)
   209                              <1> 												;       break;
   210 00000CF3 EBF3                <1> 		jmp		.10L							;   }
   211                              <1> .10E:											; }
   212                              <1> 
   213                              <1> 		;---------------------------------------
   214                              <1> 		; 【レジスタの復帰】
   215                              <1> 		;---------------------------------------
   216 00000CF5 5B                  <1> 		pop		ebx
   217 00000CF6 58                  <1> 		pop		eax
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 【スタックフレームの破棄】
   221                              <1> 		;---------------------------------------
   222 00000CF7 89EC                <1> 		mov		esp, ebp
   223 00000CF9 5D                  <1> 		pop		ebp
   224                              <1> 
   225 00000CFA C3                  <1> 		ret
   226                              <1> 
   167                                  
   168                                  ;************************************************************************
   169                                  ;	パディング
   170                                  ;************************************************************************
   171 00000CFB 00<rep 1305h>           		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
   172                                  
