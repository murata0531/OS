     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  %define	USE_SYSTEM_CALL
     8                                  %define	USE_TEST_AND_SET
     9                                  
    10                                  ;************************************************************************
    11                                  ;	マクロ
    12                                  ;************************************************************************
    13                                  %include	"../include/define.s"
    14                              <1> ;************************************************************************
    15                              <1> ;	メモリイメージ
    16                              <1> ;************************************************************************
    17                              <1> 
    18                              <1> 		;---------------------------------------
    19                              <1> 		;           |            | 
    20                              <1> 		;           |____________| 
    21                              <1> 		; 0000_7A00 |            | ( 512) スタック
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0000_7C00 |            | (  8K) ブート
    24                              <1> 		;           =            = 
    25                              <1> 		;           |____________| 
    26                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    27                              <1> 		;           =            = 
    28                              <1> 		;           |____________| 
    29                              <1> 		; 0000_BC00 |////////////| 
    30                              <1> 		;           =            = 
    31                              <1> 		;           |____________| 
    32                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    33                              <1> 		;           |____________| 
    34                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    35                              <1> 		;           |____________| 
    36                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    37                              <1> 		;           |            | 
    38                              <1> 		;           =            = 
    39                              <1> 		;           |____________| 
    40                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    41                              <1> 		;           |            | （各タスク1K）
    42                              <1> 		;           =            = 
    43                              <1> 		;           |____________| 
    44                              <1> 		; 0010_5000 |            | Dir
    45                              <1> 		;      6000 |____________| Page
    46                              <1> 		; 0010_7000 |            | Dir
    47                              <1> 		;      8000 |____________| Page
    48                              <1> 		; 0010_9000 |////////////| 
    49                              <1> 		;           |            | 
    50                              <1> 
    51                              <1> 
    52                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    53                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    54                              <1> 
    55                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    56                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    57                              <1> 
    58                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    59                              <1> 
    60                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    61                              <1> 
    62                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    63                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    64                              <1> 
    65                              <1> 		E820_RECORD_SIZE	equ		20
    66                              <1> 
    67                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    68                              <1> 
    69                              <1> 		STACK_BASE			equ		0x0010_3000		; タスク用スタックエリア
    70                              <1> 		STACK_SIZE			equ		1024			; スタックサイズ
    71                              <1> 
    72                              <1> 		SP_TASK_0			equ		STACK_BASE + (STACK_SIZE * 1)
    73                              <1> 		SP_TASK_1			equ		STACK_BASE + (STACK_SIZE * 2)
    74                              <1> 		SP_TASK_2			equ		STACK_BASE + (STACK_SIZE * 3)
    14                                  %include	"../include/macro.s"
    15                              <1> ;************************************************************************
    16                              <1> ; 関数呼び出し用マクロ
    17                              <1> ;
    18                              <1> ; 使い方：
    19                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    20                              <1> ;
    21                              <1> ;************************************************************************
    22                              <1> %macro  cdecl 1-*.nolist
    23                              <1> 
    24                              <1> 	%rep  %0 - 1
    25                              <1> 		push	%{-1:-1}
    26                              <1> 		%rotate -1
    27                              <1> 	%endrep 
    28                              <1> 	%rotate -1
    29                              <1> 
    30                              <1> 		call	%1
    31                              <1> 
    32                              <1> 	%if 1 < %0
    33                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    34                              <1> 	%endif
    35                              <1> 
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> ;************************************************************************
    39                              <1> ; 割り込みベクタ設定用
    40                              <1> ;
    41                              <1> ; 使い方：
    42                              <1> ;	set_vect	ベクタ番号, 割り込み処理 [, フラグ]
    43                              <1> ;
    44                              <1> ;************************************************************************
    45                              <1> %macro  set_vect 1-*.nolist
    46                              <1> 		push	eax
    47                              <1> 		push	edi
    48                              <1> 
    49                              <1> 		mov		edi, VECT_BASE + (%1 * 8)		; ベクタアドレス;
    50                              <1> 		mov		eax, %2
    51                              <1> 
    52                              <1> 	%if 3 == %0
    53                              <1> 		mov		[edi + 4], %3					; フラグ
    54                              <1> 	%endif
    55                              <1> 
    56                              <1> 		mov		[edi + 0], ax					; 例外アドレス[15: 0]
    57                              <1> 		shr		eax, 16							; 
    58                              <1> 		mov		[edi + 6], ax					; 例外アドレス[31:16]
    59                              <1> 
    60                              <1> 		pop		edi
    61                              <1> 		pop		eax
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> ;************************************************************************
    65                              <1> ; ポート出力用
    66                              <1> ;
    67                              <1> ; 使い方：
    68                              <1> ;	outp	ポート番号, 出力値
    69                              <1> ;
    70                              <1> ;************************************************************************
    71                              <1> %macro  outp 2
    72                              <1> 		mov		al, %2
    73                              <1> 		out		%1, al
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> ;************************************************************************
    77                              <1> ; ディスクリプタの情報を設定
    78                              <1> ;
    79                              <1> ; 使い方：
    80                              <1> ;	set_desc	ディスクリプタ, ベース
    81                              <1> ;
    82                              <1> ;************************************************************************
    83                              <1> %macro  set_desc 2-* 
    84                              <1> 		push	eax
    85                              <1> 		push	edi
    86                              <1> 
    87                              <1> 		mov		edi, %1							; ディスクリプタアドレス
    88                              <1> 		mov		eax, %2							; ベースアドレス
    89                              <1> 
    90                              <1> 	%if 3 == %0
    91                              <1> 		mov		[edi + 0], %3					; リミット
    92                              <1> 	%endif
    93                              <1> 
    94                              <1> 		mov		[edi + 2], ax					; ベース（[15: 0]）
    95                              <1> 		shr		eax, 16							; 
    96                              <1> 		mov		[edi + 4], al					; ベース（[23:16]）
    97                              <1> 		mov		[edi + 7], ah					; ベース（[31:24]）
    98                              <1> 
    99                              <1> 		pop		edi
   100                              <1> 		pop		eax
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> ;************************************************************************
   104                              <1> ; ゲートディスクリプタのオフセットを設定
   105                              <1> ;
   106                              <1> ; 使い方：
   107                              <1> ;	set_gate	ディスクリプタ, オフセット
   108                              <1> ;
   109                              <1> ;************************************************************************
   110                              <1> %macro  set_gate 2-* 
   111                              <1> 		push	eax
   112                              <1> 		push	edi
   113                              <1> 
   114                              <1> 		mov		edi, %1							; ディスクリプタアドレス
   115                              <1> 		mov		eax, %2							; ベースアドレス
   116                              <1> 
   117                              <1> 		mov		[edi + 0], ax					; ベース（[15: 0]）
   118                              <1> 		shr		eax, 16							; 
   119                              <1> 		mov		[edi + 6], ax					; ベース（[31:16]）
   120                              <1> 
   121                              <1> 		pop		edi
   122                              <1> 		pop		eax
   123                              <1> %endmacro
   124                              <1> 
   125                              <1> ;************************************************************************
   126                              <1> ;	構造体
   127                              <1> ;************************************************************************
   128                              <1> 
   129                              <1> ;-----------------------------------------------
   130                              <1> ;	ドライブパラメータ
   131                              <1> ;-----------------------------------------------
   132                              <1> struc drive
   133 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
   134 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
   135 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
   136 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
   137                              <1> endstruc
   138                              <1> 
   139                              <1> ;-----------------------------------------------
   140                              <1> ;	リングバッファ
   141                              <1> ;-----------------------------------------------
   142                              <1> %define		RING_ITEM_SIZE		(1 << 4)
   143                              <1> %define		RING_INDEX_MASK		(RING_ITEM_SIZE - 1)
   144                              <1> 
   145                              <1> struc ring_buff
   146 00000000 ????????            <1> 		.rp				resd	1				; RP:書き込み位置
   147 00000004 ????????            <1> 		.wp				resd	1				; WP:読み込み位置
   148 00000008 <res 10h>           <1> 		.item			resb	RING_ITEM_SIZE	; バッファ
   149                              <1> endstruc
   150                              <1> 
   151                              <1> ;-----------------------------------------------
   152                              <1> ;	バラ曲線描画パラメータ
   153                              <1> ;-----------------------------------------------
   154                              <1> struc rose
   155 00000000 ????????            <1> 		.x0				resd	1				; 左上座標：X0
   156 00000004 ????????            <1> 		.y0				resd	1				; 左上座標：Y0
   157 00000008 ????????            <1> 		.x1				resd	1				; 右下座標：X1
   158 0000000C ????????            <1> 		.y1				resd	1				; 右下座標：Y1
   159                              <1> 
   160 00000010 ????????            <1> 		.n				resd	1				; 変数：n
   161 00000014 ????????            <1> 		.d				resd	1				; 変数：d
   162                              <1> 
   163 00000018 ????????            <1> 		.color_x		resd	1				; 描画色：X軸
   164 0000001C ????????            <1> 		.color_y		resd	1				; 描画色：Y軸
   165 00000020 ????????            <1> 		.color_z		resd	1				; 描画色：枠
   166 00000024 ????????            <1> 		.color_s		resd	1				; 描画色：文字
   167 00000028 ????????            <1> 		.color_f		resd	1				; 描画色：グラフ描画色
   168 0000002C ????????            <1> 		.color_b		resd	1				; 描画色：グラフ消去色
   169                              <1> 
   170 00000030 <res 10h>           <1> 		.title			resb	16				; タイトル
   171                              <1> endstruc
   172                              <1> 
    15                                  
    16                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    17                                  
    18                                  [BITS 32]
    19                                  ;************************************************************************
    20                                  ;	エントリポイント
    21                                  ;************************************************************************
    22                                  kernel:
    23                                  		;---------------------------------------
    24                                  		; フォントアドレスを取得
    25                                  		;---------------------------------------
    26 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    27 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    28 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    29 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    30 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    31 00000011 A3[00020000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    32                                  
    33                                  		;---------------------------------------
    34                                  		; TSSディスクリプタの設定
    35                                  		;---------------------------------------
    36                                  		set_desc	GDT.tss_0, TSS_0			; // タスク0用TSSの設定
    84 00000016 50                  <1>  push eax
    85 00000017 57                  <1>  push edi
    86                              <1> 
    87 00000018 BF[B0040000]        <1>  mov edi, %1
    88 0000001D B8[08020000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000022 66894702            <1>  mov [edi + 2], ax
    95 00000026 C1E810              <1>  shr eax, 16
    96 00000029 884704              <1>  mov [edi + 4], al
    97 0000002C 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 0000002F 5F                  <1>  pop edi
   100 00000030 58                  <1>  pop eax
    37                                  		set_desc	GDT.tss_1, TSS_1			; // タスク1用TSSの設定
    84 00000031 50                  <1>  push eax
    85 00000032 57                  <1>  push edi
    86                              <1> 
    87 00000033 BF[B8040000]        <1>  mov edi, %1
    88 00000038 B8[E0020000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 0000003D 66894702            <1>  mov [edi + 2], ax
    95 00000041 C1E810              <1>  shr eax, 16
    96 00000044 884704              <1>  mov [edi + 4], al
    97 00000047 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 0000004A 5F                  <1>  pop edi
   100 0000004B 58                  <1>  pop eax
    38                                  		set_desc	GDT.tss_2, TSS_2			; // タスク2用TSSの設定
    84 0000004C 50                  <1>  push eax
    85 0000004D 57                  <1>  push edi
    86                              <1> 
    87 0000004E BF[C0040000]        <1>  mov edi, %1
    88 00000053 B8[B8030000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91                              <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000058 66894702            <1>  mov [edi + 2], ax
    95 0000005C C1E810              <1>  shr eax, 16
    96 0000005F 884704              <1>  mov [edi + 4], al
    97 00000062 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 00000065 5F                  <1>  pop edi
   100 00000066 58                  <1>  pop eax
    39                                  
    40                                  		;---------------------------------------
    41                                  		; コールゲートの設定
    42                                  		;---------------------------------------
    43                                  		set_gate	GDT.call_gate, call_gate	; // コールゲートの設定
   111 00000067 50                  <1>  push eax
   112 00000068 57                  <1>  push edi
   113                              <1> 
   114 00000069 BF[C8040000]        <1>  mov edi, %1
   115 0000006E B8[740F0000]        <1>  mov eax, %2
   116                              <1> 
   117 00000073 668907              <1>  mov [edi + 0], ax
   118 00000076 C1E810              <1>  shr eax, 16
   119 00000079 66894706            <1>  mov [edi + 6], ax
   120                              <1> 
   121 0000007D 5F                  <1>  pop edi
   122 0000007E 58                  <1>  pop eax
    44                                  
    45                                  		;---------------------------------------
    46                                  		; LDTの設定
    47                                  		;---------------------------------------
    48                                  		set_desc	GDT.ldt, LDT, word LDT_LIMIT
    84 0000007F 50                  <1>  push eax
    85 00000080 57                  <1>  push edi
    86                              <1> 
    87 00000081 BF[A8040000]        <1>  mov edi, %1
    88 00000086 B8[D6040000]        <1>  mov eax, %2
    89                              <1> 
    90                              <1>  %if 3 == %0
    91 0000008B 66C7073700          <1>  mov [edi + 0], %3
    92                              <1>  %endif
    93                              <1> 
    94 00000090 66894702            <1>  mov [edi + 2], ax
    95 00000094 C1E810              <1>  shr eax, 16
    96 00000097 884704              <1>  mov [edi + 4], al
    97 0000009A 886707              <1>  mov [edi + 7], ah
    98                              <1> 
    99 0000009D 5F                  <1>  pop edi
   100 0000009E 58                  <1>  pop eax
    49                                  
    50                                  		;---------------------------------------
    51                                  		; GDTをロード（再設定）
    52                                  		;---------------------------------------
    53 0000009F 0F0115[D0040000]        		lgdt	[GDTR]							; // グローバルディスクリプタテーブルをロード
    54                                  
    55                                  		;---------------------------------------
    56                                  		; スタックの設定
    57                                  		;---------------------------------------
    58 000000A6 BC00341000              		mov		esp, SP_TASK_0					; // タスク0用のスタックを設定
    59                                  
    60                                  		;---------------------------------------
    61                                  		; タスクレジスタの初期化
    62                                  		;---------------------------------------
    63 000000AB 66B82000                		mov		ax, SS_TASK_0
    64 000000AF 0F00D8                  		ltr		ax								; // タスクレジスタの設定
    65                                  
    66                                  		;---------------------------------------
    67                                  		; 初期化
    68                                  		;---------------------------------------
    69 000000B2 E8930B0000              		cdecl	init_int						; // 割り込みベクタの初期化
    70 000000B7 E8140D0000              		cdecl	init_pic						; // 割り込みコントローラの初期化
    71                                  
    72 000000BC 5057BF00001000B8-       		set_vect	0x00, int_zero_div			; // 割り込み処理の登録：0除算
    72 000000C4 [B20D0000]668907C1-
    72 000000CC E810668947065F58   
    73 000000D4 5057BF38001000B8-       		set_vect	0x07, int_nm				; // 割り込み処理の登録：デバイス使用不可
    73 000000DC [DF0F0000]668907C1-
    73 000000E4 E810668947065F58   
    74 000000EC 5057BF00011000B8-       		set_vect	0x20, int_timer				; // 割り込み処理の登録：タイマー
    74 000000F4 [0E050000]668907C1-
    74 000000FC E810668947065F58   
    75 00000104 5057BF08011000B8-       		set_vect	0x21, int_keyboard			; // 割り込み処理の登録：KBC
    75 0000010C [3A0E0000]668907C1-
    75 00000114 E810668947065F58   
    76 0000011C 5057BF40011000B8-       		set_vect	0x28, int_rtc				; // 割り込み処理の登録：RTC
    76 00000124 [0F0E0000]668907C1-
    76 0000012C E810668947065F58   
    77 00000134 5057BF08041000B8-       		set_vect	0x81, trap_gate_81, word 0xEF00	; // トラップゲートの登録：1文字出力
    77 0000013C [A40F0000]66C74704-
    77 00000144 00EF668907C1E81066-
    77 0000014D 8947065F58         
    78 00000152 5057BF10041000B8-       		set_vect	0x82, trap_gate_82, word 0xEF00	; // トラップゲートの登録：点の描画
    78 0000015A [B20F0000]66C74704-
    78 00000162 00EF668907C1E81066-
    78 0000016B 8947065F58         
    79                                  
    80                                  		;---------------------------------------
    81                                  		; デバイスの割り込み許可
    82                                  		;---------------------------------------
    83 00000170 6A10E8840C00006683-     		cdecl	rtc_int_en, 0x10				; rtc_int_en(UIE); // 更新サイクル終了割り込み許可
    83 00000179 C404               
    84 0000017B E8AC0D0000              		cdecl	int_en_timer0					; // タイマー（カウンタ0）割り込み許可
    85                                  
    86                                  		;---------------------------------------
    87                                  		; IMR(割り込みマスクレジスタ)の設定
    88                                  		;---------------------------------------
    89                                  		outp	0x21, 0b_1111_1000				; // 割り込み有効：スレーブPIC/KBC/タイマー
    72 00000180 B0F8                <1>  mov al, %2
    73 00000182 E621                <1>  out %1, al
    90                                  		outp	0xA1, 0b_1111_1110				; // 割り込み有効：RTC
    72 00000184 B0FE                <1>  mov al, %2
    73 00000186 E6A1                <1>  out %1, al
    91                                  
    92                                  		;---------------------------------------
    93                                  		; CPUの割り込み許可
    94                                  		;---------------------------------------
    95 00000188 FB                      		sti										; // 割り込み許可
    96                                  
    97                                  		;---------------------------------------
    98                                  		; フォントの一覧表示
    99                                  		;---------------------------------------
   100 00000189 6A0D6A3FE862060000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
   100 00000192 6683C408           
   101 00000196 6A046A3FE8D8060000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
   101 0000019F 6683C408           
   102                                  
   103                                  		;---------------------------------------
   104                                  		; 文字列の表示
   105                                  		;---------------------------------------
   106 000001A3 68[EB010000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
   106 000001AB 00006A0E6A19E88306-
   106 000001B4 00006683C410       
   107                                  
   108                                  .10L:											; while (;;)
   109                                  												; {
   110                                  		;---------------------------------------
   111                                  		; 回転する棒を表示
   112                                  		;---------------------------------------
   113 000001BA E87C0D0000              		cdecl	draw_rotation_bar				;   // 回転する棒を表示
   114                                  
   115                                  		;---------------------------------------
   116                                  		; キーコードの取得
   117                                  		;---------------------------------------
   118 000001BF 68[FC010000]68-         		cdecl	ring_rd, _KEY_BUFF, .int_key	;   EAX = ring_rd(buff, &int_key);
   118 000001C5 [600E0000]E8AA0C00-
   118 000001CD 006683C408         
   119 000001D2 83F800                  		cmp		eax, 0							;   if (EAX == 0)
   120 000001D5 7412                    		je		.10E							;   {
   121                                  												;   
   122                                  		;---------------------------------------
   123                                  		; キーコードの表示
   124                                  		;---------------------------------------
   125 000001D7 68[600E0000]6A1D6A-     		cdecl	draw_key, 2, 29, _KEY_BUFF		;     ring_show(key_buff); // 全要素を表示
   125 000001DF 02E8F40C00006683C4-
   125 000001E8 0C                 
   126                                  .10E:											;   }
   127 000001E9 EBCF                    		jmp		.10L							; }
   128                                  
   129 000001EB 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
   129 000001F4 65726E656C212000   
   130                                  
   131                                  ALIGN 4, db 0
   132 000001FC 00000000                .int_key:	dd	0
   133                                  
   134                                  ALIGN 4, db 0
   135 00000200 00000000                FONT_ADR:	dd	0
   136 00000204 00000000                RTC_TIME:	dd	0
   137                                  
   138                                  ;************************************************************************
   139                                  ;	タスク
   140                                  ;************************************************************************
   141                                  %include	"descriptor.s"
   142                              <1> ;************************************************************************
   143                              <1> ;	TSS
   144                              <1> ;************************************************************************
   145                              <1> TSS_0:
   146 00000208 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   147 0000020C 00321000            <1> .esp0:			dd	SP_TASK_0 - 512				;*  4:ESP0
   148 00000210 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   149 00000214 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   150 00000218 00000000            <1> .ss1:			dd	0							;* 16:
   151 0000021C 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   152 00000220 00000000            <1> .ss2:			dd	0							;* 24:
   153 00000224 00000000            <1> .cr3:			dd	0							;  28:CR3(PDBR)
   154 00000228 00000000            <1> .eip:			dd	0							;  32:EIP
   155 0000022C 00000000            <1> .eflags:		dd	0							;  36:EFLAGS
   156 00000230 00000000            <1> .eax:			dd	0							;  40:EAX
   157 00000234 00000000            <1> .ecx:			dd	0							;  44:ECX
   158 00000238 00000000            <1> .edx:			dd	0							;  48:EDX
   159 0000023C 00000000            <1> .ebx:			dd	0							;  52:EBX
   160 00000240 00000000            <1> .esp:			dd	0							;  56:ESP
   161 00000244 00000000            <1> .ebp:			dd	0							;  60:EBP
   162 00000248 00000000            <1> .esi:			dd	0							;  64:ESI
   163 0000024C 00000000            <1> .edi:			dd	0							;  68:EDI
   164 00000250 00000000            <1> .es:			dd	0							;  72:ES
   165 00000254 00000000            <1> .cs:			dd	0							;  76:CS
   166 00000258 00000000            <1> .ss:			dd	0							;  80:SS
   167 0000025C 00000000            <1> .ds:			dd	0							;  84:DS
   168 00000260 00000000            <1> .fs:			dd	0							;  88:FS
   169 00000264 00000000            <1> .gs:			dd	0							;  92:GS
   170 00000268 00000000            <1> .ldt:			dd	0							;* 96:LDTセグメントセレクタ
   171 0000026C 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   172 00000270 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   173                              <1> 
   174                              <1> TSS_1:
   175 000002E0 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   176 000002E4 00361000            <1> .esp0:			dd	SP_TASK_1 - 512				;*  4:ESP0
   177 000002E8 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   178 000002EC 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   179 000002F0 00000000            <1> .ss1:			dd	0							;* 16:
   180 000002F4 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   181 000002F8 00000000            <1> .ss2:			dd	0							;* 24:
   182 000002FC 00000000            <1> .cr3:			dd	0							;  28:CR3(PDBR)
   183 00000300 [58050000]          <1> .eip:			dd	task_1						;  32:EIP
   184 00000304 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   185 00000308 00000000            <1> .eax:			dd	0							;  40:EAX
   186 0000030C 00000000            <1> .ecx:			dd	0							;  44:ECX
   187 00000310 00000000            <1> .edx:			dd	0							;  48:EDX
   188 00000314 00000000            <1> .ebx:			dd	0							;  52:EBX
   189 00000318 00381000            <1> .esp:			dd	SP_TASK_1					;  56:ESP
   190 0000031C 00000000            <1> .ebp:			dd	0							;  60:EBP
   191 00000320 00000000            <1> .esi:			dd	0							;  64:ESI
   192 00000324 00000000            <1> .edi:			dd	0							;  68:EDI
   193 00000328 27000000            <1> .es:			dd	DS_TASK_1					;  72:ES
   194 0000032C 1F000000            <1> .cs:			dd	CS_TASK_1					;  76:CS
   195 00000330 27000000            <1> .ss:			dd	DS_TASK_1					;  80:SS
   196 00000334 27000000            <1> .ds:			dd	DS_TASK_1					;  84:DS
   197 00000338 27000000            <1> .fs:			dd	DS_TASK_1					;  88:FS
   198 0000033C 27000000            <1> .gs:			dd	DS_TASK_1					;  92:GS
   199 00000340 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   200 00000344 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   201 00000348 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   202                              <1> 
   203                              <1> TSS_2:
   204 000003B8 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
   205 000003BC 003A1000            <1> .esp0:			dd	SP_TASK_2 - 512				;*  4:ESP0
   206 000003C0 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
   207 000003C4 00000000            <1> .esp1:			dd	0							;* 12:ESP1
   208 000003C8 00000000            <1> .ss1:			dd	0							;* 16:
   209 000003CC 00000000            <1> .esp2:			dd	0							;* 20:ESP2
   210 000003D0 00000000            <1> .ss2:			dd	0							;* 24:
   211 000003D4 00000000            <1> .cr3:			dd	0							;  28:CR3(PDBR)
   212 000003D8 [8D050000]          <1> .eip:			dd	task_2						;  32:EIP
   213 000003DC 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   214 000003E0 00000000            <1> .eax:			dd	0							;  40:EAX
   215 000003E4 00000000            <1> .ecx:			dd	0							;  44:ECX
   216 000003E8 00000000            <1> .edx:			dd	0							;  48:EDX
   217 000003EC 00000000            <1> .ebx:			dd	0							;  52:EBX
   218 000003F0 003C1000            <1> .esp:			dd	SP_TASK_2					;  56:ESP
   219 000003F4 00000000            <1> .ebp:			dd	0							;  60:EBP
   220 000003F8 00000000            <1> .esi:			dd	0							;  64:ESI
   221 000003FC 00000000            <1> .edi:			dd	0							;  68:EDI
   222 00000400 37000000            <1> .es:			dd	DS_TASK_2					;  72:ES
   223 00000404 2F000000            <1> .cs:			dd	CS_TASK_2					;  76:CS
   224 00000408 37000000            <1> .ss:			dd	DS_TASK_2					;  80:SS
   225 0000040C 37000000            <1> .ds:			dd	DS_TASK_2					;  84:DS
   226 00000410 37000000            <1> .fs:			dd	DS_TASK_2					;  88:FS
   227 00000414 37000000            <1> .gs:			dd	DS_TASK_2					;  92:GS
   228 00000418 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   229 0000041C 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   230 00000420 00<rep 70h>         <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   231                              <1> 
   232                              <1> 
   233                              <1> ;************************************************************************
   234                              <1> ;	グローバルディスクリプタテーブル
   235                              <1> ;************************************************************************
   236 00000490 0000000000000000    <1> GDT:			dq	0x0000000000000000			; NULL
   237 00000498 FFFF0000009ACF00    <1> .cs_kernel:		dq	0x00CF9A000000FFFF			; CODE 4G
   238 000004A0 FFFF00000092CF00    <1> .ds_kernel:		dq	0x00CF92000000FFFF			; DATA 4G
   239 000004A8 0000000000820000    <1> .ldt			dq	0x0000820000000000			; LDTディスクリプタ
   240 000004B0 6700000000890000    <1> .tss_0:			dq	0x0000890000000067			; TSSディスクリプタ
   241 000004B8 6700000000890000    <1> .tss_1:			dq	0x0000890000000067			; TSSディスクリプタ
   242 000004C0 6700000000890000    <1> .tss_2:			dq	0x0000890000000067			; TSSディスクリプタ
   243 000004C8 0000080004EC0000    <1> .call_gate:		dq	0x0000EC0400080000			; 386コールゲート(DPL=3, count=4, SEL=8)
   244                              <1> .end:
   245                              <1> 
   246                              <1> CS_KERNEL		equ	.cs_kernel	- GDT
   247                              <1> DS_KERNEL		equ	.ds_kernel	- GDT
   248                              <1> SS_LDT			equ	.ldt		- GDT
   249                              <1> SS_TASK_0		equ	.tss_0		- GDT
   250                              <1> SS_TASK_1		equ	.tss_1		- GDT
   251                              <1> SS_TASK_2		equ	.tss_2		- GDT
   252                              <1> SS_GATE_0		equ	.call_gate	- GDT
   253                              <1> 
   254 000004D0 3F00                <1> GDTR:	dw 		GDT.end - GDT - 1
   255 000004D2 [90040000]          <1> 		dd 		GDT
   256                              <1> 
   257                              <1> 
   258                              <1> ;************************************************************************
   259                              <1> ;	ローカルディスクリプタテーブル
   260                              <1> ;************************************************************************
   261 000004D6 0000000000000000    <1> LDT:			dq	0x0000000000000000			; NULL
   262 000004DE FFFF0000009ACF00    <1> .cs_task_0:		dq	0x00CF9A000000FFFF			; CODE 4G
   263 000004E6 FFFF00000092CF00    <1> .ds_task_0:		dq	0x00CF92000000FFFF			; DATA 4G
   264 000004EE FFFF000000FACF00    <1> .cs_task_1:		dq	0x00CFFA000000FFFF			; CODE 4G
   265 000004F6 FFFF000000F2CF00    <1> .ds_task_1:		dq	0x00CFF2000000FFFF			; DATA 4G
   266 000004FE FFFF000000FACF00    <1> .cs_task_2:		dq	0x00CFFA000000FFFF			; CODE 4G
   267 00000506 FFFF000000F2CF00    <1> .ds_task_2:		dq	0x00CFF2000000FFFF			; DATA 4G
   268                              <1> .end:
   269                              <1> 
   270                              <1> CS_TASK_0		equ	(.cs_task_0 - LDT) | 4		; タスク0用CSセレクタ
   271                              <1> DS_TASK_0		equ	(.ds_task_0 - LDT) | 4		; タスク0用DSセレクタ
   272                              <1> CS_TASK_1		equ	(.cs_task_1 - LDT) | 4 | 3	; タスク1用CSセレクタ
   273                              <1> DS_TASK_1		equ	(.ds_task_1 - LDT) | 4 | 3	; タスク1用DSセレクタ
   274                              <1> CS_TASK_2		equ	(.cs_task_2 - LDT) | 4 | 3	; タスク2用CSセレクタ
   275                              <1> DS_TASK_2		equ	(.ds_task_2 - LDT) | 4 | 3	; タスク2用DSセレクタ
   276                              <1> 
   277                              <1> LDT_LIMIT		equ	.end		- LDT - 1
   278                              <1> 
   279                              <1> 
   142                                  %include	"modules/int_timer.s"
   143                              <1> ;************************************************************************
   144                              <1> ;	例外:タイマー
   145                              <1> ;************************************************************************
   146                              <1> int_timer:
   147                              <1> 		;---------------------------------------
   148                              <1> 		; 【レジスタの保存】
   149                              <1> 		;---------------------------------------
   150 0000050E 60                  <1> 		pusha
   151 0000050F 1E                  <1> 		push	ds
   152 00000510 06                  <1> 		push	es
   153                              <1> 
   154                              <1> 		;---------------------------------------
   155                              <1> 		; データ用セグメントの設定
   156                              <1> 		;---------------------------------------
   157 00000511 66B81000            <1> 		mov		ax, 0x0010						; 
   158 00000515 8ED8                <1> 		mov		ds, ax							; 
   159 00000517 8EC0                <1> 		mov		es, ax							; 
   160                              <1> 
   161                              <1> 		;---------------------------------------
   162                              <1> 		; TICK
   163                              <1> 		;---------------------------------------
   164 00000519 FF05[54050000]      <1> 		inc		dword [TIMER_COUNT]				; TIMER_COUNT++; // 割り込み回数の更新
   165                              <1> 
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 割り込みフラグをクリア(EOI)
   168                              <1> 		;---------------------------------------
   169                              <1> 		outp	0x20, 0x20						; // マスタPIC:EOIコマンド
    72 0000051F B020                <2>  mov al, %2
    73 00000521 E620                <2>  out %1, al
   170                              <1> 
   171                              <1> 		;---------------------------------------
   172                              <1> 		; タスクの切り替え
   173                              <1> 		;---------------------------------------
   174 00000523 660F00C8            <1> 		str		ax								; AX = TR; // 現在のタスクレジスタ
   175 00000527 6683F820            <1> 		cmp		ax, SS_TASK_0					; case (AX)
   176 0000052B 740F                <1> 		je		.11L							; {
   177 0000052D 6683F828            <1> 		cmp		ax, SS_TASK_1					;   
   178 00000531 7412                <1> 		je		.12L							;   
   179                              <1> 												;   default:
   180 00000533 EA000000002000      <1> 		jmp		SS_TASK_0:0						;     // タスク0に切り替え
   181 0000053A EB12                <1> 		jmp		.10E							;     break;
   182                              <1> 												;     
   183                              <1> .11L:											;   case SS_TASK_0:
   184 0000053C EA000000002800      <1> 		jmp		SS_TASK_1:0						;     // タスク1に切り替え
   185 00000543 EB09                <1> 		jmp		.10E							;     break;
   186                              <1> 												;     
   187                              <1> .12L:											;   case SS_TASK_1:
   188 00000545 EA000000003000      <1> 		jmp		SS_TASK_2:0						;     // タスク2に切り替え
   189 0000054C EB00                <1> 		jmp		.10E							;     break;
   190                              <1> .10E:											; }
   191                              <1> 
   192                              <1> 		;---------------------------------------
   193                              <1> 		; 【レジスタの復帰】
   194                              <1> 		;---------------------------------------
   195 0000054E 07                  <1> 		pop		es								; 
   196 0000054F 1F                  <1> 		pop		ds								; 
   197 00000550 61                  <1> 		popa
   198                              <1> 
   199 00000551 CF                  <1> 		iret
   200                              <1> 
   201 00000552 00<rep 2h>          <1> ALIGN 4, db 0
   202 00000554 00000000            <1> TIMER_COUNT:	dd	0
   203                              <1> 
   143                                  %include	"tasks/task_1.s"
   144                              <1> ;************************************************************************
   145                              <1> ;	TASK-1
   146                              <1> ;************************************************************************
   147                              <1> task_1:
   148                              <1> 		;---------------------------------------
   149                              <1> 		; 文字列の表示
   150                              <1> 		;---------------------------------------
   151 00000558 68[86050000]6A076A- <1> 		cdecl	draw_str, 63, 0, 0x07, .s0		; draw_str();
   151 00000560 006A3FE8D102000066- <1>
   151 00000569 83C410              <1>
   152                              <1> 
   153                              <1> .10L:											; while (;;)
   154                              <1> 												; {
   155                              <1> 		;---------------------------------------
   156                              <1> 		; 時刻の表示
   157                              <1> 		;---------------------------------------
   158 0000056C A1[04020000]        <1> 		mov		eax, [RTC_TIME]					;   // 時刻の取得
   159 00000571 5068000700006A006A- <1> 		cdecl	draw_time, 72, 0, 0x0700, eax	;   // 時刻の表示
   159 0000057A 48E82B0600006683C4- <1>
   159 00000583 10                  <1>
   160                              <1> 
   161 00000584 EBE6                <1> 		jmp		.10L							; }
   162                              <1> 
   163                              <1> 		;---------------------------------------
   164                              <1> 		; データ
   165                              <1> 		;---------------------------------------
   166 00000586 5461736B2D3100      <1> .s0		db	"Task-1", 0
   167                              <1> 
   144                                  %include	"tasks/task_2.s"
   145                              <1> 
   146                              <1> ;************************************************************************
   147                              <1> ;	TASK
   148                              <1> ;************************************************************************
   149                              <1> task_2:
   150                              <1> 		;---------------------------------------
   151                              <1> 		; 文字列の表示
   152                              <1> 		;---------------------------------------
   153 0000058D 68[52060000]6A076A- <1> 		cdecl	draw_str, 63, 1, 0x07, .s0		; draw_str(.s0);
   153 00000595 016A3FE89C02000066- <1>
   153 0000059E 83C410              <1>
   154                              <1> 
   155                              <1> 		;---------------------------------------
   156                              <1> 		; 初期化
   157                              <1> 		;---------------------------------------
   158                              <1> 												; ---------+---------+---------|---------|---------|---------|
   159                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   160                              <1> 												; ---------+---------+---------|---------|---------|---------|
   161 000005A1 DB05[40060000]      <1> 		fild	dword [.c1000]					;     1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   162 000005A7 D9EB                <1> 		fldpi									;       pi |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   163 000005A9 DA35[44060000]      <1> 		fidiv	dword [.c180]					;   pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   164 000005AF D9EB                <1> 		fldpi									;       pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   165 000005B1 DCC0                <1> 		fadd	st0, st0						;     2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   166 000005B3 D9EE                <1> 		fldz									;   θ = 0 |    2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
   167                              <1> 												; ---------+---------+---------|---------|---------|---------|
   168                              <1> 												;   θ = 0 |    2*pi |d=pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
   169                              <1> 												; ---------+---------+---------|---------|---------|---------|
   170                              <1> 
   171                              <1> 		;---------------------------------------
   172                              <1> 		; メインループ
   173                              <1> 		;---------------------------------------
   174                              <1> .10L:											; for ( ; ; )
   175                              <1> 												; {
   176                              <1> 		;---------------------------------------
   177                              <1> 		; sin(t)
   178                              <1> 		;---------------------------------------
   179                              <1> 												; ---------+---------+---------|---------|---------|---------|
   180                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   181                              <1> 												; ---------+---------+---------|---------|---------|---------|
   182                              <1> 												;       θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   183                              <1> 												; ---------+---------+---------|---------|---------|---------|
   184 000005B5 D8C2                <1> 		fadd	st0, st2						;   θ + d |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   185 000005B7 D9F8                <1> 		fprem									;   MOD(θ)|    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   186 000005B9 D9C0                <1> 		fld		st0								;       θ |      θ |    2*pi |       d |    1000 |xxxxxxxxx|
   187 000005BB D9FE                <1> 		fsin									;   sin(θ)|      θ |    2*pi |       d |    1000 |xxxxxxxxx|
   188 000005BD D8CC                <1> 		fmul	st0, st4						;ST4sin(θ)|      θ |    2*pi |       d |    1000 |xxxxxxxxx|
   189                              <1> 												; ---------+---------+---------|---------|---------|---------|
   190 000005BF DF35[48060000]      <1> 		fbstp	[.bcd]							;       θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
   191                              <1> 												; ---------+---------+---------|---------|---------|---------|
   192                              <1> 
   193 000005C5 A1[48060000]        <1> 		mov		eax, [.bcd]						;   EAX = 1000 * sin(t);
   194 000005CA 89C3                <1> 		mov		ebx, eax						;   EBX = EAX;
   195                              <1> 
   196 000005CC 250F0F0000          <1> 		and		eax, 0x0F0F						;   // 上位4ビットをマスク
   197 000005D1 0D30300000          <1> 		or		eax, 0x3030						;   // 上位4ビットに0x3を設定
   198                              <1> 
   199 000005D6 C1EB04              <1> 		shr		ebx, 4							;   EBX >>= 4;
   200 000005D9 81E30F0F0000        <1> 		and		ebx, 0x0F0F						;   // 上位4ビットをマスク
   201 000005DF 81CB30300000        <1> 		or		ebx, 0x3030						;   // 上位4ビットに0x3を設定
   202                              <1> 
   203 000005E5 883D[5A060000]      <1> 		mov		[.s2 + 0], bh					;   // 1桁目
   204 000005EB 8825[5C060000]      <1> 		mov		[.s3 + 0], ah					;   // 小数1桁目
   205 000005F1 881D[5D060000]      <1> 		mov		[.s3 + 1], bl					;   // 小数2桁目
   206 000005F7 A2[5E060000]        <1> 		mov		[.s3 + 2], al					;   // 小数3桁目
   207                              <1> 
   208 000005FC B807000000          <1> 		mov		eax, 7							;   // 符号の表示
   209 00000601 0FA305[51060000]    <1> 		bt		[.bcd + 9], eax					;   CF = bcd[9] & 0x80;
   210 00000608 7209                <1> 		jc		.10F							;   if (CF)
   211                              <1> 												;   {
   212 0000060A C605[59060000]2B    <1> 		mov		[.s1 + 0], byte '+'				;     *s1 = '+';
   213 00000611 EB07                <1> 		jmp		.10E							;   }
   214                              <1> .10F:											;   else
   215                              <1> 												;   {
   216 00000613 C605[59060000]2D    <1> 		mov		[.s1 + 0], byte '-'				;     *s1 = '-';
   217                              <1> .10E:											;   }
   218                              <1> 
   219 0000061A 68[59060000]6A076A- <1> 		cdecl	draw_str, 72, 1, 0x07, .s1		; draw_str(.s1);
   219 00000622 016A48E80F02000066- <1>
   219 0000062B 83C410              <1>
   220                              <1> 
   221                              <1> 		;---------------------------------------
   222                              <1> 		; ウェイト
   223                              <1> 		;---------------------------------------
   224 0000062E 6A14E8390A00006683- <1> 		cdecl	wait_tick, 20					;   wait_tick(20);
   224 00000637 C404                <1>
   225                              <1> 
   226 00000639 E977FFFFFF          <1> 		jmp		.10L							; }
   227                              <1> 
   228                              <1> 
   229 0000063E 00<rep 2h>          <1> ALIGN 4, db 0
   230 00000640 E8030000            <1> .c1000:		dd	1000
   231 00000644 B4000000            <1> .c180:		dd	180
   232                              <1> 
   233 00000648 00<rep Ah>          <1> .bcd:	times 10 db	0x00
   234                              <1> 
   235 00000652 5461736B2D3200      <1> .s0		db	"Task-2", 0
   236 00000659 2D                  <1> .s1:	db	"-"
   237 0000065A 302E                <1> .s2:	db	"0."
   238 0000065C 30303000            <1> .s3:	db	"000", 0
   239                              <1> 
   145                                  
   146                                  ;************************************************************************
   147                                  ;	モジュール
   148                                  ;************************************************************************
   149                                  %include	"../modules/protect/vga.s"
   150                              <1> ;************************************************************************
   151                              <1> ;	読み込みプレーンの選択
   152                              <1> ;========================================================================
   153                              <1> ;■書式		: void vga_set_read_plane(plane);
   154                              <1> ;
   155                              <1> ;■引数
   156                              <1> ;	plane	: 読み込みプレーン
   157                              <1> ;
   158                              <1> ;■戻り値	: 無し
   159                              <1> ;************************************************************************
   160                              <1> vga_set_read_plane:
   161                              <1> 		;---------------------------------------
   162                              <1> 		; 【スタックフレームの構築】
   163                              <1> 		;---------------------------------------
   164                              <1> 												; EBP+ 8| プレーン（インデックス）
   165                              <1> 												; ------+----------------
   166 00000660 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   167 00000661 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   168                              <1> 												; ------+----------------
   169                              <1> 
   170                              <1> 		;---------------------------------------
   171                              <1> 		; 【レジスタの保存】
   172                              <1> 		;---------------------------------------
   173 00000663 50                  <1> 		push	eax
   174 00000664 52                  <1> 		push	edx
   175                              <1> 
   176                              <1> 		;---------------------------------------
   177                              <1> 		; 読み込みプレーンの選択
   178                              <1> 		;---------------------------------------
   179 00000665 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
   180 00000668 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
   181 0000066B B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
   182 0000066D 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
   183 00000671 66EF                <1> 		out		dx, ax							; // ポート出力
   184                              <1> 
   185                              <1> 		;---------------------------------------
   186                              <1> 		; 【レジスタの復帰】
   187                              <1> 		;---------------------------------------
   188 00000673 5A                  <1> 		pop		edx
   189 00000674 58                  <1> 		pop		eax
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 【スタックフレームの破棄】
   193                              <1> 		;---------------------------------------
   194 00000675 89EC                <1> 		mov		esp, ebp
   195 00000677 5D                  <1> 		pop		ebp
   196                              <1> 
   197 00000678 C3                  <1> 		ret
   198                              <1> 
   199                              <1> 
   200                              <1> ;************************************************************************
   201                              <1> ;	書き込みプレーンを選択
   202                              <1> ;========================================================================
   203                              <1> ;■書式		: void vga_set_write_plane(plane);
   204                              <1> ;
   205                              <1> ;■引数
   206                              <1> ;	plane	: 書き込みプレーン
   207                              <1> ;
   208                              <1> ;■戻り値	: 無し
   209                              <1> ;************************************************************************
   210                              <1> vga_set_write_plane:
   211                              <1> 		;---------------------------------------
   212                              <1> 		; 【スタックフレームの構築】
   213                              <1> 		;---------------------------------------
   214                              <1> 												; EBP+ 8| プレーン（ビット指定）
   215                              <1> 												; ------+----------------
   216 00000679 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   217 0000067A 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   218                              <1> 												; ------+----------------
   219                              <1> 
   220                              <1> 		;---------------------------------------
   221                              <1> 		; 【レジスタの保存】
   222                              <1> 		;---------------------------------------
   223 0000067C 50                  <1> 		push	eax
   224 0000067D 52                  <1> 		push	edx
   225                              <1> 
   226                              <1> 		;---------------------------------------
   227                              <1> 		; 書き込みプレーンの選択
   228                              <1> 		;---------------------------------------
   229 0000067E 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
   230 00000681 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
   231 00000684 B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
   232 00000686 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
   233 0000068A 66EF                <1> 		out		dx, ax							; // ポート出力
   234                              <1> 
   235                              <1> 		;---------------------------------------
   236                              <1> 		; 【レジスタの復帰】
   237                              <1> 		;---------------------------------------
   238 0000068C 5A                  <1> 		pop		edx
   239 0000068D 58                  <1> 		pop		eax
   240                              <1> 
   241                              <1> 		;---------------------------------------
   242                              <1> 		; 【スタックフレームの破棄】
   243                              <1> 		;---------------------------------------
   244 0000068E 89EC                <1> 		mov		esp, ebp
   245 00000690 5D                  <1> 		pop		ebp
   246                              <1> 
   247 00000691 C3                  <1> 		ret
   248                              <1> 
   249                              <1> 
   250                              <1> ;************************************************************************
   251                              <1> ;	フォントの書き込み
   252                              <1> ;========================================================================
   253                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   254                              <1> ;
   255                              <1> ;■引数
   256                              <1> ;	font	: FONTアドレス
   257                              <1> ;	vram	: VRAMアドレス
   258                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   259                              <1> ;	color	: 描画色
   260                              <1> ;
   261                              <1> ;■戻り値	: 無し
   262                              <1> ;************************************************************************
   263                              <1> vram_font_copy:
   264                              <1> 		;---------------------------------------
   265                              <1> 		; 【スタックフレームの構築】
   266                              <1> 		;---------------------------------------
   267                              <1> 												; EBP+20| 色（背景/前景色）
   268                              <1> 												; EBP+16| プレーン（ビット指定）
   269                              <1> 												; EBP+12| VRAMアドレス
   270                              <1> 												; EBP+ 8| FONTアドレス
   271                              <1> 												; ------+----------------
   272 00000692 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   273 00000693 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   274                              <1> 												; ------+----------------
   275                              <1> 
   276                              <1> 		;---------------------------------------
   277                              <1> 		; 【レジスタの保存】
   278                              <1> 		;---------------------------------------
   279 00000695 50                  <1> 		push	eax
   280 00000696 53                  <1> 		push	ebx
   281 00000697 51                  <1> 		push	ecx
   282 00000698 52                  <1> 		push	edx
   283 00000699 56                  <1> 		push	esi
   284 0000069A 57                  <1> 		push	edi
   285                              <1> 
   286                              <1> 		;---------------------------------------
   287                              <1> 		; 【処理の開始】
   288                              <1> 		;---------------------------------------
   289 0000069B 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   290 0000069E 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   291 000006A1 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   292 000006A5 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   293                              <1> 
   294 000006A9 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   295 000006AB 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   296 000006AE FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   297                              <1> 
   298 000006B0 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   299 000006B2 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   300 000006B5 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   301                              <1> 
   302                              <1> 		;---------------------------------------
   303                              <1> 		; 16ドットフォントのコピー
   304                              <1> 		;---------------------------------------
   305 000006B7 FC                  <1> 		cld										; DF  = 0; // アドレス加算
   306                              <1> 
   307 000006B8 B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   308                              <1> .10L:											; do
   309                              <1> 												; {
   310                              <1> 		;---------------------------------------
   311                              <1> 		; フォントマスクの作成
   312                              <1> 		;---------------------------------------
   313 000006BD AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   314 000006BE 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   315 000006C0 F6D4                <1> 		not		ah								;   
   316                              <1> 
   317                              <1> 		;---------------------------------------
   318                              <1> 		; 前景色
   319                              <1> 		;---------------------------------------
   320 000006C2 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   321                              <1> 
   322                              <1> 		;---------------------------------------
   323                              <1> 		; 背景色
   324                              <1> 		;---------------------------------------
   325 000006C4 F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   326 000006CA 7404                <1> 		jz		.11F							;   {
   327 000006CC 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   328 000006CE EB02                <1> 		jmp		.11E							;   }
   329                              <1> .11F:											;   else
   330                              <1> 												;   {
   331 000006D0 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   332                              <1> .11E:											;   }
   333                              <1> 
   334                              <1> 		;---------------------------------------
   335                              <1> 		; 前景色と背景色を合成
   336                              <1> 		;---------------------------------------
   337 000006D2 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   338                              <1> 
   339                              <1> 		;---------------------------------------
   340                              <1> 		; 新しい値を出力
   341                              <1> 		;---------------------------------------
   342 000006D4 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   343                              <1> 
   344 000006D6 83C750              <1> 		add		edi, 80							;   EDI += 80;
   345 000006D9 E2E2                <1> 		loop	.10L							; } while (--ECX);
   346                              <1> .10E:											; 
   347                              <1> 
   348                              <1> 		;---------------------------------------
   349                              <1> 		; 【レジスタの復帰】
   350                              <1> 		;---------------------------------------
   351 000006DB 5F                  <1> 		pop		edi
   352 000006DC 5E                  <1> 		pop		esi
   353 000006DD 5A                  <1> 		pop		edx
   354 000006DE 59                  <1> 		pop		ecx
   355 000006DF 5B                  <1> 		pop		ebx
   356 000006E0 58                  <1> 		pop		eax
   357                              <1> 
   358                              <1> 		;---------------------------------------
   359                              <1> 		; 【スタックフレームの破棄】
   360                              <1> 		;---------------------------------------
   361 000006E1 89EC                <1> 		mov		esp, ebp
   362 000006E3 5D                  <1> 		pop		ebp
   363                              <1> 
   364 000006E4 C3                  <1> 		ret
   365                              <1> 
   366                              <1> 
   367                              <1> ;************************************************************************
   368                              <1> ;	ビットパターンの書き込み
   369                              <1> ;========================================================================
   370                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   371                              <1> ;
   372                              <1> ;■引数
   373                              <1> ;	bit		: 出力ビットパターン
   374                              <1> ;	vram	: VRAMアドレス
   375                              <1> ;	flag	: 1:セット, 0:クリア
   376                              <1> ;
   377                              <1> ;■戻り値	: 無し
   378                              <1> ;************************************************************************
   379                              <1> vram_bit_copy:
   380                              <1> 		;---------------------------------------
   381                              <1> 		; 【スタックフレームの構築】
   382                              <1> 		;---------------------------------------
   383                              <1> 												; EBP+20| 色（背景/前景色）
   384                              <1> 												; EBP+16| プレーン（ビット指定）
   385                              <1> 												; EBP+12| VRAMアドレス
   386                              <1> 												; EBP+ 8| 出力ビットパターン
   387                              <1> 												; ------+----------------
   388 000006E5 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   389 000006E6 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   390                              <1> 												; ------+----------------
   391                              <1> 
   392                              <1> 		;---------------------------------------
   393                              <1> 		; 【レジスタの保存】
   394                              <1> 		;---------------------------------------
   395 000006E8 50                  <1> 		push	eax
   396 000006E9 53                  <1> 		push	ebx
   397 000006EA 57                  <1> 		push	edi
   398                              <1> 
   399                              <1> 		;---------------------------------------
   400                              <1> 		; 【処理の開始】
   401                              <1> 		;---------------------------------------
   402 000006EB 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   403 000006EE 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   404 000006F2 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   405                              <1> 
   406 000006F6 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   407 000006F8 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   408 000006FB FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   409                              <1> 
   410                              <1> 		;---------------------------------------
   411                              <1> 		; マスクデータの作成
   412                              <1> 		;---------------------------------------
   413 000006FD 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   414 00000700 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   415 00000702 F6D4                <1> 		not		ah								; 
   416                              <1> 
   417                              <1> 		;---------------------------------------
   418                              <1> 		; 現在値の出力を取得
   419                              <1> 		;---------------------------------------
   420 00000704 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   421 00000706 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   422 00000708 08E0                <1> 		or		al, ah							; AL |= AH;
   423                              <1> 
   424                              <1> 		;---------------------------------------
   425                              <1> 		; 新しい値を出力
   426                              <1> 		;---------------------------------------
   427 0000070A 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   428                              <1> 
   429                              <1> 		;---------------------------------------
   430                              <1> 		; 【レジスタの復帰】
   431                              <1> 		;---------------------------------------
   432 0000070C 5F                  <1> 		pop		edi
   433 0000070D 5B                  <1> 		pop		ebx
   434 0000070E 58                  <1> 		pop		eax
   435                              <1> 
   436                              <1> 		;---------------------------------------
   437                              <1> 		; 【スタックフレームの破棄】
   438                              <1> 		;---------------------------------------
   439 0000070F 89EC                <1> 		mov		esp, ebp
   440 00000711 5D                  <1> 		pop		ebp
   441                              <1> 
   442 00000712 C3                  <1> 		ret
   150                                  %include	"../modules/protect/draw_char.s"
   151                              <1> ;************************************************************************
   152                              <1> ;	文字の表示
   153                              <1> ;------------------------------------------------------------------------
   154                              <1> ;	グラフィックスモードでテキストを表示
   155                              <1> ;========================================================================
   156                              <1> ;■書式		: void draw_char(col, row, color, ch);
   157                              <1> ;
   158                              <1> ;■引数
   159                              <1> ;	col		: 列（0～79）
   160                              <1> ;	row		: 行（0～29）
   161                              <1> ;	color	: 描画色
   162                              <1> ;	ch		: 文字
   163                              <1> ;
   164                              <1> ;■戻り値	: 無し
   165                              <1> ;************************************************************************
   166                              <1> draw_char:
   167                              <1> 		;---------------------------------------
   168                              <1> 		; 【スタックフレームの構築】
   169                              <1> 		;---------------------------------------
   170                              <1> 												; ------|--------
   171                              <1> 												; EBP+20| 文字
   172                              <1> 												; EBP+16| 色
   173                              <1> 												; EBP+12| Y（行）
   174                              <1> 												; EBP+ 8| X（列）
   175                              <1> 												; ------+----------------
   176 00000713 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   177 00000714 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   178                              <1> 												; ------+----------------
   179                              <1> 
   180                              <1> 		;---------------------------------------
   181                              <1> 		; 【レジスタの保存】
   182                              <1> 		;---------------------------------------
   183 00000716 50                  <1> 		push	eax
   184 00000717 53                  <1> 		push	ebx
   185 00000718 51                  <1> 		push	ecx
   186 00000719 52                  <1> 		push	edx
   187 0000071A 56                  <1> 		push	esi
   188 0000071B 57                  <1> 		push	edi
   189                              <1> 
   190                              <1> 		;---------------------------------------
   191                              <1> 		; テストアンドセット
   192                              <1> 		;---------------------------------------
   193                              <1> %ifdef	USE_TEST_AND_SET
   194 0000071C 68[F0070000]E89908- <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   194 00000724 00006683C404        <1>
   195                              <1> %endif
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; コピー元フォントアドレスを設定
   199                              <1> 		;---------------------------------------
   200 0000072A 0FB67514            <1> 		movzx	esi, byte [ebp +20]				; CL  = 文字コード;
   201 0000072E C1E604              <1> 		shl		esi, 4							; CL *= 16; // 1文字16バイト
   202 00000731 0335[00020000]      <1> 		add		esi, [FONT_ADR]					; ESI = フォントアドレス;
   203                              <1> 
   204                              <1> 		;---------------------------------------
   205                              <1> 		; コピー先アドレスを取得
   206                              <1> 		; Adr = 0xA0000 + (640 / 8 * 16) * y + x
   207                              <1> 		;---------------------------------------
   208 00000737 8B7D0C              <1> 		mov		edi, [ebp +12]					; Y（行）
   209 0000073A C1E708              <1> 		shl		edi, 8							; EDI = Y * 256;
   210 0000073D 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA0000]	; EDI = Y *   4 + Y;
   211 00000744 037D08              <1> 		add		edi, [ebp + 8]					; X（列）
   212                              <1> 
   213                              <1> 		;---------------------------------------
   214                              <1> 		; 1文字分のフォントを出力
   215                              <1> 		;---------------------------------------
   216 00000747 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
   217                              <1> 
   218 0000074B 6A03E80EFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
   218 00000754 C404                <1>
   219 00000756 6A08E81CFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
   219 0000075F C404                <1>
   220 00000761 536A085756E827FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
   220 0000076A FF6683C410          <1>
   221                              <1> 
   222 0000076F 6A02E8EAFEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
   222 00000778 C404                <1>
   223 0000077A 6A04E8F8FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
   223 00000783 C404                <1>
   224 00000785 536A045756E803FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
   224 0000078E FF6683C410          <1>
   225                              <1> 
   226 00000793 6A01E8C6FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
   226 0000079C C404                <1>
   227 0000079E 6A02E8D4FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
   227 000007A7 C404                <1>
   228 000007A9 536A025756E8DFFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
   228 000007B2 FF6683C410          <1>
   229                              <1> 
   230 000007B7 6A00E8A2FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
   230 000007C0 C404                <1>
   231 000007C2 6A01E8B0FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
   231 000007CB C404                <1>
   232 000007CD 536A015756E8BBFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
   232 000007D6 FF6683C410          <1>
   233                              <1> 
   234                              <1> %ifdef	USE_TEST_AND_SET
   235                              <1> 		;---------------------------------------
   236                              <1> 		; テストアンドセット
   237                              <1> 		;---------------------------------------
   238 000007DB C705[F0070000]0000- <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   238 000007E3 0000                <1>
   239                              <1> %endif
   240                              <1> 
   241                              <1> 		;---------------------------------------
   242                              <1> 		; 【レジスタの復帰】
   243                              <1> 		;---------------------------------------
   244 000007E5 5F                  <1> 		pop		edi
   245 000007E6 5E                  <1> 		pop		esi
   246 000007E7 5A                  <1> 		pop		edx
   247 000007E8 59                  <1> 		pop		ecx
   248 000007E9 5B                  <1> 		pop		ebx
   249 000007EA 58                  <1> 		pop		eax
   250                              <1> 
   251                              <1> 		;---------------------------------------
   252                              <1> 		; 【スタックフレームの破棄】
   253                              <1> 		;---------------------------------------
   254 000007EB 89EC                <1> 		mov		esp, ebp
   255 000007ED 5D                  <1> 		pop		ebp
   256                              <1> 
   257 000007EE C3                  <1> 		ret
   258                              <1> 
   259                              <1> %ifdef USE_TEST_AND_SET
   260 000007EF 00                  <1> ALIGN 4, db 0
   261 000007F0 00000000            <1> IN_USE:	dd	0
   262                              <1> %endif
   263                              <1> 
   151                                  %include	"../modules/protect/draw_font.s"
   152                              <1> ;************************************************************************
   153                              <1> ;	フォント一覧を表示
   154                              <1> ;========================================================================
   155                              <1> ;■書式		: void draw_font(col, row);
   156                              <1> ;
   157                              <1> ;■引数
   158                              <1> ;	col		: 列
   159                              <1> ;	row		: 行
   160                              <1> ;
   161                              <1> ;■戻り値	: 無し
   162                              <1> ;************************************************************************
   163                              <1> draw_font:
   164                              <1> 		;---------------------------------------
   165                              <1> 		; 【スタックフレームの構築】
   166                              <1> 		;---------------------------------------
   167                              <1> 												; ------|--------
   168                              <1> 												; EBP+12| Y（行）
   169                              <1> 												; EBP+ 8| X（列）
   170                              <1> 												; ---------------
   171 000007F4 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   172 000007F5 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   173                              <1> 												; ---------------
   174                              <1> 
   175                              <1> 		;---------------------------------------
   176                              <1> 		; 【レジスタの保存】
   177                              <1> 		;---------------------------------------
   178 000007F7 50                  <1> 		push	eax
   179 000007F8 53                  <1> 		push	ebx
   180 000007F9 51                  <1> 		push	ecx
   181 000007FA 52                  <1> 		push	edx
   182 000007FB 56                  <1> 		push	esi
   183 000007FC 57                  <1> 		push	edi
   184                              <1> 
   185                              <1> 		;---------------------------------------
   186                              <1> 		; 表示位置
   187                              <1> 		;---------------------------------------
   188 000007FD 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   189 00000800 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; フォント一覧を表示
   193                              <1> 		;---------------------------------------
   194 00000803 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   195 00000808 81F900010000        <1> .10L:	cmp		ecx, 256						;      ECX < 256;
   196 0000080E 731F                <1> 		jae		.10E							; 
   197                              <1> 												;      ECX++)
   198                              <1> 												; {
   199                              <1> 												;   // 桁位置の計算
   200 00000810 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   201 00000812 83E00F              <1> 		and		eax, 0x0F						;   EAX &= 0x0F
   202 00000815 01F0                <1> 		add		eax, esi						;   EAX += X;
   203                              <1> 												;   
   204                              <1> 												;   // 行位置の計算
   205 00000817 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   206 00000819 C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
   207 0000081C 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   208                              <1> 
   209 0000081E 516A075350E8EBFEFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
   209 00000827 FF6683C410          <1>
   210                              <1> 
   211 0000082C 41                  <1> 		inc		ecx								;   // for (... ECX++)
   212 0000082D EBD9                <1> 		jmp		.10L							; 
   213                              <1> .10E:											; }
   214                              <1> 
   215                              <1> 		;---------------------------------------
   216                              <1> 		; 【レジスタの復帰】
   217                              <1> 		;---------------------------------------
   218 0000082F 5F                  <1> 		pop		edi
   219 00000830 5E                  <1> 		pop		esi
   220 00000831 5A                  <1> 		pop		edx
   221 00000832 59                  <1> 		pop		ecx
   222 00000833 5B                  <1> 		pop		ebx
   223 00000834 58                  <1> 		pop		eax
   224                              <1> 
   225                              <1> 		;---------------------------------------
   226                              <1> 		; 【スタックフレームの破棄】
   227                              <1> 		;---------------------------------------
   228 00000835 89EC                <1> 		mov		esp, ebp
   229 00000837 5D                  <1> 		pop		ebp
   230                              <1> 
   231 00000838 C3                  <1> 		ret
   232                              <1> 
   152                                  %include	"../modules/protect/draw_str.s"
   153                              <1> ;************************************************************************
   154                              <1> ;	文字列の表示
   155                              <1> ;========================================================================
   156                              <1> ;■書式		: void draw_str(col, row, color, p);
   157                              <1> ;
   158                              <1> ;■引数
   159                              <1> ;	col		: 列
   160                              <1> ;	row		: 行
   161                              <1> ;	color	: 描画色
   162                              <1> ;	p		: 文字列のアドレス
   163                              <1> ;
   164                              <1> ;■戻り値	: 無し
   165                              <1> ;************************************************************************
   166                              <1> draw_str:
   167                              <1> 		;---------------------------------------
   168                              <1> 		; 【スタックフレームの構築】
   169                              <1> 		;---------------------------------------
   170                              <1> 												; ------|--------
   171                              <1> 												; EBP+20| *p（文字列のアドレス）
   172                              <1> 												; EBP+16| color（色）
   173                              <1> 												; EBP+12| row（行）
   174                              <1> 												; EBP+ 8| col（列）
   175                              <1> 												; ---------------
   176 00000839 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   177 0000083A 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   178                              <1> 												; ---------------
   179                              <1> 
   180                              <1> 		;---------------------------------------
   181                              <1> 		; 【レジスタの保存】
   182                              <1> 		;---------------------------------------
   183 0000083C 50                  <1> 		push	eax
   184 0000083D 53                  <1> 		push	ebx
   185 0000083E 51                  <1> 		push	ecx
   186 0000083F 52                  <1> 		push	edx
   187 00000840 56                  <1> 		push	esi
   188                              <1> 
   189                              <1> 		;---------------------------------------
   190                              <1> 		; 文字列の表示
   191                              <1> 		;---------------------------------------
   192 00000841 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
   193 00000844 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
   194 00000847 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
   195 0000084B 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
   196                              <1> 
   197 0000084E FC                  <1> 		cld										; DF = 0; // アドレス加算
   198                              <1> .10L:											; do
   199                              <1> 												; {
   200 0000084F AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
   201 00000850 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   202 00000852 741A                <1> 		je		.10E							;     break;
   203                              <1> 
   204                              <1> 		;---------------------------------------
   205                              <1> 		; 1文字表示
   206                              <1> 		;---------------------------------------
   207                              <1> %ifdef	USE_SYSTEM_CALL
   208 00000854 CD81                <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
   209                              <1> %else
   210                              <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
   211                              <1> %endif
   212                              <1> 
   213                              <1> 		; 次の文字の位置を調整
   214 00000856 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
   215 00000857 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
   216 0000085A 7C10                <1> 		jl		.12E							;   {
   217 0000085C B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
   218 00000861 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
   219 00000862 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
   220 00000865 7C05                <1> 		jl		.12E							;     {
   221 00000867 BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
   222                              <1> 												;     }
   223                              <1> .12E:											;   }
   224 0000086C EBE1                <1> 		jmp		.10L							;   
   225                              <1> .10E:											; } while (1);
   226                              <1> 
   227                              <1> 		;---------------------------------------
   228                              <1> 		; 【レジスタの復帰】
   229                              <1> 		;---------------------------------------
   230 0000086E 5E                  <1> 		pop		esi
   231 0000086F 5A                  <1> 		pop		edx
   232 00000870 59                  <1> 		pop		ecx
   233 00000871 5B                  <1> 		pop		ebx
   234 00000872 58                  <1> 		pop		eax
   235                              <1> 
   236                              <1> 		;---------------------------------------
   237                              <1> 		; 【スタックフレームの破棄】
   238                              <1> 		;---------------------------------------
   239 00000873 89EC                <1> 		mov		esp, ebp
   240 00000875 5D                  <1> 		pop		ebp
   241                              <1> 
   242 00000876 C3                  <1> 		ret
   243                              <1> 
   153                                  %include	"../modules/protect/draw_color_bar.s"
   154                              <1> ;************************************************************************
   155                              <1> ;	カラーバーの表示
   156                              <1> ;========================================================================
   157                              <1> ;■書式		: void draw_color_bar(col, row);
   158                              <1> ;
   159                              <1> ;■引数
   160                              <1> ;	col		: 列
   161                              <1> ;	row		: 行
   162                              <1> ;
   163                              <1> ;■戻り値	: 無し
   164                              <1> ;************************************************************************
   165                              <1> draw_color_bar:
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 【スタックフレームの構築】
   168                              <1> 		;---------------------------------------
   169                              <1> 												; ------|--------
   170                              <1> 												; EBP+ 8| X（列）
   171                              <1> 												; EBP+12| Y（行）
   172                              <1> 												; ---------------
   173 00000877 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   174 00000878 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   175                              <1> 												; ---------------
   176                              <1> 		;---------------------------------------
   177                              <1> 		; 【レジスタの保存】
   178                              <1> 		;---------------------------------------
   179 0000087A 50                  <1> 		push	eax
   180 0000087B 53                  <1> 		push	ebx
   181 0000087C 51                  <1> 		push	ecx
   182 0000087D 52                  <1> 		push	edx
   183 0000087E 56                  <1> 		push	esi
   184 0000087F 57                  <1> 		push	edi
   185                              <1> 
   186                              <1> 		;---------------------------------------
   187                              <1> 		; 表示位置
   188                              <1> 		;---------------------------------------
   189 00000880 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   190 00000883 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   191                              <1> 
   192                              <1> 		;---------------------------------------
   193                              <1> 		; カラーバーを表示
   194                              <1> 		;---------------------------------------
   195 00000886 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   196 0000088B 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
   197 0000088E 732E                <1> 		jae		.10E							; 
   198                              <1> 												;      ECX++)
   199                              <1> 												; {
   200                              <1> 												;   // 桁位置の計算
   201 00000890 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   202 00000892 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
   203 00000895 C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
   204 00000898 01F0                <1> 		add		eax, esi						;   EAX += X;
   205                              <1> 												;   
   206                              <1> 												;   // 行位置の計算
   207 0000089A 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   208 0000089C D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
   209 0000089E 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   210                              <1> 												;   
   211                              <1> 												;   // 表示色の取得
   212 000008A0 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
   213 000008A2 D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
   214 000008A4 8B92[D1080000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
   215                              <1> 
   216 000008AA 68[C8080000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
   216 000008B2 E882FFFFFF6683C410  <1>
   217                              <1> 
   218 000008BB 41                  <1> 		inc		ecx								;   // for (... ECX++)
   219 000008BC EBCD                <1> 		jmp		.10L							; 
   220                              <1> .10E:											; }
   221                              <1> 
   222                              <1> 		;---------------------------------------
   223                              <1> 		; 【レジスタの復帰】
   224                              <1> 		;---------------------------------------
   225 000008BE 5F                  <1> 		pop		edi
   226 000008BF 5E                  <1> 		pop		esi
   227 000008C0 5A                  <1> 		pop		edx
   228 000008C1 59                  <1> 		pop		ecx
   229 000008C2 5B                  <1> 		pop		ebx
   230 000008C3 58                  <1> 		pop		eax
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; 【スタックフレームの破棄】
   234                              <1> 		;---------------------------------------
   235 000008C4 89EC                <1> 		mov		esp, ebp
   236 000008C6 5D                  <1> 		pop		ebp
   237                              <1> 
   238 000008C7 C3                  <1> 		ret
   239                              <1> 
   240 000008C8 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
   241                              <1> 
   242 000008D1 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
   243 000008D5 00010009            <1> 		dw	0x0100, 0x0900
   244 000008D9 0002000A            <1> 		dw	0x0200, 0x0A00
   245 000008DD 0003000B            <1> 		dw	0x0300, 0x0B00
   246 000008E1 0004000C            <1> 		dw	0x0400, 0x0C00
   247 000008E5 0005000D            <1> 		dw	0x0500, 0x0D00
   248 000008E9 0006000E            <1> 		dw	0x0600, 0x0E00
   249 000008ED 0007000F            <1> 		dw	0x0700, 0x0F00
   250                              <1> 
   154                                  %include	"../modules/protect/draw_pixel.s"
   155                              <1> ;************************************************************************
   156                              <1> ;	ピクセルの描画
   157                              <1> ;========================================================================
   158                              <1> ;■書式		: void draw_pixel(X, Y, color);
   159                              <1> ;
   160                              <1> ;■引数
   161                              <1> ;	X		: X座標
   162                              <1> ;	Y		: Y座標
   163                              <1> ;	color	: 描画色
   164                              <1> ;
   165                              <1> ;■戻り値	: 無し
   166                              <1> ;************************************************************************
   167                              <1> draw_pixel:
   168                              <1> 		;---------------------------------------
   169                              <1> 		; 【スタックフレームの構築】
   170                              <1> 		;---------------------------------------
   171                              <1> 												; ------|--------
   172                              <1> 												; EBP+16| 色
   173                              <1> 												; EBP+12| Y
   174                              <1> 												; EBP+ 8| X
   175                              <1> 												; ------|--------
   176 000008F1 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   177 000008F2 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   178                              <1> 												; ------+--------
   179                              <1> 		;---------------------------------------
   180                              <1> 		; 【レジスタの保存】
   181                              <1> 		;---------------------------------------
   182 000008F4 50                  <1> 		push	eax
   183 000008F5 53                  <1> 		push	ebx
   184 000008F6 51                  <1> 		push	ecx
   185 000008F7 57                  <1> 		push	edi
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; Y座標を80倍する（640/8）
   189                              <1> 		;---------------------------------------
   190 000008F8 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI  = Y座標
   191 000008FB C1E704              <1> 		shl		edi, 4							; EDI *= 16;
   192 000008FE 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA_0000]	; EDI  = 0xA00000[EDI * 4 + EDI];
   193                              <1> 
   194                              <1> 		;---------------------------------------
   195                              <1> 		; X座標を1/8して加算
   196                              <1> 		;---------------------------------------
   197 00000905 8B5D08              <1> 		mov		ebx, [ebp + 8]					; EBX  = X座標;
   198 00000908 89D9                <1> 		mov		ecx, ebx						; ECX  = X座標;（一時保存）
   199 0000090A C1EB03              <1> 		shr		ebx, 3							; EBX /= 8;
   200 0000090D 01DF                <1> 		add		edi, ebx						; EDI += EBX;
   201                              <1> 
   202                              <1> 		;---------------------------------------
   203                              <1> 		; X座標を8で割った余りからビット位置を計算
   204                              <1> 		; (0=0x80, 1=0x40,... 7=0x01)
   205                              <1> 		;---------------------------------------
   206 0000090F 83E107              <1> 		and		ecx, 0x07						; ECX = X & 0x07;
   207 00000912 BB80000000          <1> 		mov		ebx, 0x80						; EBX = 0x80;
   208 00000917 D3EB                <1> 		shr		ebx, cl							; EBX >>= ECX;
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 色指定
   212                              <1> 		;---------------------------------------
   213 00000919 8B4D10              <1> 		mov		ecx, [ebp +16]					; // 表示色
   214                              <1> 
   215                              <1> %ifdef	USE_TEST_AND_SET
   216 0000091C 68[F0070000]E89906- <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   216 00000924 00006683C404        <1>
   217                              <1> %endif
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; プレーン毎に出力
   221                              <1> 		;---------------------------------------
   222 0000092A 6A03E82FFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 輝度(I)プレーンを選択
   222 00000933 C404                <1>
   223 00000935 6A08E83DFDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 輝度(I)プレーンを選択
   223 0000093E C404                <1>
   224 00000940 516A085753E89BFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
   224 00000949 FF6683C410          <1>
   225                              <1> 
   226 0000094E 6A02E80BFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 赤(R)プレーンを選択
   226 00000957 C404                <1>
   227 00000959 6A04E819FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 赤(R)プレーンを選択
   227 00000962 C404                <1>
   228 00000964 516A045753E877FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
   228 0000096D FF6683C410          <1>
   229                              <1> 
   230 00000972 6A01E8E7FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 緑(G)プレーンを選択
   230 0000097B C404                <1>
   231 0000097D 6A02E8F5FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 緑(G)プレーンを選択
   231 00000986 C404                <1>
   232 00000988 516A025753E853FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
   232 00000991 FF6683C410          <1>
   233                              <1> 
   234 00000996 6A00E8C3FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 青(B)プレーンを選択
   234 0000099F C404                <1>
   235 000009A1 6A01E8D1FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 青(B)プレーンを選択
   235 000009AA C404                <1>
   236 000009AC 516A015753E82FFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
   236 000009B5 FF6683C410          <1>
   237                              <1> 
   238                              <1> 
   239                              <1> %ifdef	USE_TEST_AND_SET
   240                              <1> 		;---------------------------------------
   241                              <1> 		; テストアンドセット
   242                              <1> 		;---------------------------------------
   243 000009BA C705[F0070000]0000- <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   243 000009C2 0000                <1>
   244                              <1> %endif
   245                              <1> 
   246                              <1> 		;---------------------------------------
   247                              <1> 		; 【レジスタの復帰】
   248                              <1> 		;---------------------------------------
   249 000009C4 5F                  <1> 		pop		edi
   250 000009C5 59                  <1> 		pop		ecx
   251 000009C6 5B                  <1> 		pop		ebx
   252 000009C7 58                  <1> 		pop		eax
   253                              <1> 
   254                              <1> 		;---------------------------------------
   255                              <1> 		; 【スタックフレームの破棄】
   256                              <1> 		;---------------------------------------
   257 000009C8 89EC                <1> 		mov		esp, ebp
   258 000009CA 5D                  <1> 		pop		ebp
   259                              <1> 
   260 000009CB C3                  <1> 		ret
   261                              <1> 
   155                                  %include	"../modules/protect/draw_line.s"
   156                              <1> ;************************************************************************
   157                              <1> ;	直線の描画
   158                              <1> ;========================================================================
   159                              <1> ;■書式		: void draw_line(X0, Y0, X1, Y1, color);
   160                              <1> ;
   161                              <1> ;■引数
   162                              <1> ;	X0		: 始点のX座標
   163                              <1> ;	Y0		: 始点のY座標
   164                              <1> ;	X1		: 終点のX座標
   165                              <1> ;	Y1		: 終点のY座標
   166                              <1> ;	color	: 描画色
   167                              <1> ;
   168                              <1> ;■戻り値	: 無し
   169                              <1> ;************************************************************************
   170                              <1> draw_line:
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 【スタックフレームの構築】
   173                              <1> 		;---------------------------------------
   174                              <1> 												; ---------------
   175                              <1> 												;    +24| 色
   176                              <1> 												;    +20| Y1
   177                              <1> 												;    +16| X1
   178                              <1> 												;    +12| Y0
   179                              <1> 												;    + 8| X0
   180                              <1> 												; ---------------
   181 000009CC 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   182 000009CD 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   183                              <1> 												; ---------------
   184 000009CF 6A00                <1> 		push	dword 0							;    - 4| sum   = 0; // 相対軸の積算値
   185 000009D1 6A00                <1> 		push	dword 0							;    - 8| x0    = 0; // X座標
   186 000009D3 6A00                <1> 		push	dword 0							;    -12| dx    = 0; // X増分
   187 000009D5 6A00                <1> 		push	dword 0							;    -16| inc_x = 0; // X座標増分(1 or -1)
   188 000009D7 6A00                <1> 		push	dword 0							;    -20| y0    = 0; // Y座標
   189 000009D9 6A00                <1> 		push	dword 0							;    -24| dy    = 0; // Y増分
   190 000009DB 6A00                <1> 		push	dword 0							;    -28| inc_y = 0; // Y座標増分(1 or -1)
   191                              <1> 												; ------|--------
   192                              <1> 
   193                              <1> 		;---------------------------------------
   194                              <1> 		; 【レジスタの保存】
   195                              <1> 		;---------------------------------------
   196 000009DD 50                  <1> 		push	eax
   197 000009DE 53                  <1> 		push	ebx
   198 000009DF 51                  <1> 		push	ecx
   199 000009E0 52                  <1> 		push	edx
   200 000009E1 56                  <1> 		push	esi
   201 000009E2 57                  <1> 		push	edi
   202                              <1> 
   203                              <1> 		;---------------------------------------
   204                              <1> 		; 幅を計算（X軸）
   205                              <1> 		;---------------------------------------
   206 000009E3 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   207 000009E6 8B5D10              <1> 		mov		ebx, [ebp +16]					; EBX = X1;
   208 000009E9 29C3                <1> 		sub		ebx, eax						; EBX = X1 - X0; // 幅
   209 000009EB 7D09                <1> 		jge		.10F							; if (幅 < 0)
   210                              <1> 												; {
   211 000009ED F7DB                <1> 		neg		ebx								;   幅   *= -1;
   212 000009EF BEFFFFFFFF          <1> 		mov		esi, -1							;   // X座標の増分
   213 000009F4 EB05                <1> 		jmp		.10E							; }
   214                              <1> .10F:											; else
   215                              <1> 												; {
   216 000009F6 BE01000000          <1> 		mov		esi, 1							;   // X座標の増分
   217                              <1> .10E:											; }
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 高さを計算（Y軸）
   221                              <1> 		;---------------------------------------
   222 000009FB 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX = Y0
   223 000009FE 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1
   224 00000A01 29CA                <1> 		sub		edx, ecx						; EDX = Y1 - Y0; // 高さ
   225 00000A03 7D09                <1> 		jge		.20F							; if (高さ < 0)
   226                              <1> 												; {
   227 00000A05 F7DA                <1> 		neg		edx								;   高さ *= -1;
   228 00000A07 BFFFFFFFFF          <1> 		mov		edi, -1							;   // Y座標の増分
   229 00000A0C EB05                <1> 		jmp		.20E							; }
   230                              <1> .20F:											; else
   231                              <1> 												; {
   232 00000A0E BF01000000          <1> 		mov		edi, 1							;   // Y座標の増分
   233                              <1> .20E:											; }
   234                              <1> 
   235                              <1> 		;---------------------------------------
   236                              <1> 		; X軸
   237                              <1> 		;---------------------------------------
   238 00000A13 8945F8              <1> 		mov		[ebp - 8], eax					;   // X軸:開始座標
   239 00000A16 895DF4              <1> 		mov		[ebp -12], ebx					;   // X軸:描画幅
   240 00000A19 8975F0              <1> 		mov		[ebp -16], esi					;   // X軸:増分(基準軸：1 or -1)
   241                              <1> 
   242                              <1> 		;---------------------------------------
   243                              <1> 		; Y軸
   244                              <1> 		;---------------------------------------
   245 00000A1C 894DEC              <1> 		mov		[ebp -20], ecx					;   // Y軸:開始座標
   246 00000A1F 8955E8              <1> 		mov		[ebp -24], edx					;   // Y軸:描画幅
   247 00000A22 897DE4              <1> 		mov		[ebp -28], edi					;   // Y軸:増分(基準軸：1 or -1)
   248                              <1> 
   249                              <1> 		;---------------------------------------
   250                              <1> 		; 基準軸を決める
   251                              <1> 		;---------------------------------------
   252 00000A25 39D3                <1> 		cmp		ebx, edx						; if (幅 <= 高さ)
   253 00000A27 7F08                <1> 		jg		.22F							; {
   254                              <1> 												;   
   255 00000A29 8D75EC              <1> 		lea		esi, [ebp -20]					;   // Y軸が基準軸
   256 00000A2C 8D7DF8              <1> 		lea		edi, [ebp - 8]					;   // X軸が相対軸
   257                              <1> 												;   
   258 00000A2F EB06                <1> 		jmp		.22E							; }
   259                              <1> .22F:											; else
   260                              <1> 												; {
   261 00000A31 8D75F8              <1> 		lea		esi, [ebp - 8]					;   // X軸が基準軸
   262 00000A34 8D7DEC              <1> 		lea		edi, [ebp -20]					;   // Y軸が相対軸
   263                              <1> .22E:											; }
   264                              <1> 
   265                              <1> 		;---------------------------------------
   266                              <1> 		; 繰り返し回数(基準軸のドット数)
   267                              <1> 		;---------------------------------------
   268 00000A37 8B4EFC              <1> 		mov		ecx, [esi - 4]					; ECX = 基準軸描画幅;
   269 00000A3A 83F900              <1> 		cmp		ecx, 0							; if (0 == ECX)
   270 00000A3D 7505                <1> 		jnz		.30E							; {
   271 00000A3F B901000000          <1> 		mov		ecx, 1							;   ECX = 1;
   272                              <1> .30E:											; }
   273                              <1> 
   274                              <1> 		;---------------------------------------
   275                              <1> 		; 線を描画
   276                              <1> 		;---------------------------------------
   277                              <1> .50L:											; do
   278                              <1> 												; {
   279                              <1> %ifdef	USE_SYSTEM_CALL
   280 00000A44 89C8                <1> 		mov		eax, ecx						;   // 繰り返し回数を保存
   281                              <1> 
   282 00000A46 8B5D18              <1> 		mov		ebx, [ebp +24]					;   EBX = 表示色;
   283 00000A49 8B4DF8              <1> 		mov		ecx, [ebp - 8]					;   ECX = X座標;
   284 00000A4C 8B55EC              <1> 		mov		edx, [ebp -20]					;   EDX = Y座標;
   285 00000A4F CD82                <1> 		int		0x82							;   sys_call(1, X, Y, 色, 文字); BX(C), CX(X), DX(Y)
   286                              <1> 
   287 00000A51 89C1                <1> 		mov		ecx, eax
   288                              <1> %else
   289                              <1> 		cdecl	draw_pixel, dword [ebp - 8], 							dword [ebp -20], 							dword [ebp +24]		;   // 点の描画
   292                              <1> %endif
   293                              <1> 												;   // 基準軸を更新(1ドット分)
   294 00000A53 8B46F8              <1> 		mov		eax, [esi - 8]					;   EAX = 基準軸増分(1 or -1);
   295 00000A56 0106                <1> 		add		[esi - 0], eax					;   
   296                              <1> 
   297                              <1> 												;   // 相対軸を更新
   298 00000A58 8B45FC              <1> 		mov		eax, [ebp - 4]					;   EAX  = sum; // 相対軸の積算値;
   299 00000A5B 0347FC              <1> 		add		eax, [edi - 4]					;   EAX += dy;  // 増分(相対軸の描画幅)
   300 00000A5E 8B5EFC              <1> 		mov		ebx, [esi - 4]					;   EBX  = dx;  // 増分(基準軸の描画幅)
   301                              <1> 
   302 00000A61 39D8                <1> 		cmp		eax, ebx						;   if (積算値 <= 相対軸の増分)
   303 00000A63 7C07                <1> 		jl		.52E							;   {
   304 00000A65 29D8                <1> 		sub		eax, ebx						;     EAX -= EBX; // 積算値から相対軸の増分を減算
   305                              <1> 												;     
   306                              <1> 												;     // 相対軸の座標を更新(1ドット分)
   307 00000A67 8B5FF8              <1> 		mov		ebx, [edi - 8]					;     EBX =  相対軸増分;
   308 00000A6A 011F                <1> 		add		[edi - 0], ebx					;     
   309                              <1> .52E:											;   }
   310 00000A6C 8945FC              <1> 		mov		[ebp - 4], eax					;   // 積算値を更新
   311                              <1> 												;   
   312 00000A6F E2D3                <1> 		loop	.50L							;   
   313                              <1> .50E:											; } while (ループ回数--);
   314                              <1> 
   315                              <1> 		;---------------------------------------
   316                              <1> 		; 【レジスタの復帰】
   317                              <1> 		;---------------------------------------
   318 00000A71 5F                  <1> 		pop		edi
   319 00000A72 5E                  <1> 		pop		esi
   320 00000A73 5A                  <1> 		pop		edx
   321 00000A74 59                  <1> 		pop		ecx
   322 00000A75 5B                  <1> 		pop		ebx
   323 00000A76 58                  <1> 		pop		eax
   324                              <1> 
   325                              <1> 		;---------------------------------------
   326                              <1> 		; 【スタックフレームの破棄】
   327                              <1> 		;---------------------------------------
   328 00000A77 89EC                <1> 		mov		esp, ebp
   329 00000A79 5D                  <1> 		pop		ebp
   330                              <1> 
   331 00000A7A C3                  <1> 		ret
   332                              <1> 
   156                                  %include	"../modules/protect/draw_rect.s"
   157                              <1> ;************************************************************************
   158                              <1> ;	矩形の描画
   159                              <1> ;========================================================================
   160                              <1> ;■書式		: void draw_rect(X0, Y0, X1, Y1, color);
   161                              <1> ;
   162                              <1> ;■引数
   163                              <1> ;	X0		: 始点のX座標
   164                              <1> ;	Y0		: 始点のY座標
   165                              <1> ;	X1		: 終点のX座標
   166                              <1> ;	Y1		: 終点のY座標
   167                              <1> ;	color	: 描画色
   168                              <1> ;
   169                              <1> ;■戻り値	: 無し
   170                              <1> ;************************************************************************
   171                              <1> draw_rect:
   172                              <1> 		;---------------------------------------
   173                              <1> 		; 【スタックフレームの構築】
   174                              <1> 		;---------------------------------------
   175                              <1> 												; ------|--------
   176                              <1> 												; EBP+24| 色
   177                              <1> 												; EBP+20| Y1
   178                              <1> 												; EBP+16| X1
   179                              <1> 												; EBP+12| Y0
   180                              <1> 												; EBP+ 8| X0
   181                              <1> 												; ---------------
   182 00000A7B 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   183 00000A7C 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   184                              <1> 												; ------|--------
   185                              <1> 
   186                              <1> 		;---------------------------------------
   187                              <1> 		; 【レジスタの保存】
   188                              <1> 		;---------------------------------------
   189 00000A7E 50                  <1> 		push		eax
   190 00000A7F 53                  <1> 		push		ebx
   191 00000A80 51                  <1> 		push		ecx
   192 00000A81 52                  <1> 		push		edx
   193 00000A82 56                  <1> 		push		esi
   194                              <1> 
   195                              <1> 		;---------------------------------------
   196                              <1> 		; 矩形を描画
   197                              <1> 		;---------------------------------------
   198 00000A83 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   199 00000A86 8B5D0C              <1> 		mov		ebx, [ebp +12]					; EBX = Y0;
   200 00000A89 8B4D10              <1> 		mov		ecx, [ebp +16]					; ECX = X1;
   201 00000A8C 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1;
   202 00000A8F 8B7518              <1> 		mov		esi, [ebp +24]					; ESI = 色;
   203                              <1> 
   204                              <1> 		;---------------------------------------
   205                              <1> 		; 座標軸の大小を確定
   206                              <1> 		;---------------------------------------
   207 00000A92 39C8                <1> 		cmp		eax, ecx						; if (X1 < X0)
   208 00000A94 7C01                <1> 		jl		.10E							; {
   209 00000A96 91                  <1> 		xchg	eax, ecx						;   X0とX1を入れ替える;
   210                              <1> .10E:											; }
   211                              <1> 
   212 00000A97 39D3                <1> 		cmp		ebx, edx						; if (Y1 < Y0)
   213 00000A99 7C02                <1> 		jl		.20E							; {
   214 00000A9B 87DA                <1> 		xchg	ebx, edx						;   Y0とY1を入れ替える;
   215                              <1> .20E:											; }
   216                              <1> 
   217                              <1> 		;---------------------------------------
   218                              <1> 		; 矩形を描画
   219                              <1> 		;---------------------------------------
   220 00000A9D 5653515350E825FFFF- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, esi	; 上線
   220 00000AA6 FF6683C414          <1>
   221 00000AAB 5652505350E817FFFF- <1> 		cdecl	draw_line, eax, ebx, eax, edx, esi	; 左線
   221 00000AB4 FF6683C414          <1>
   222                              <1> 
   223 00000AB9 4A                  <1> 		dec		edx									; EDX--; // 下線は1ドット上げる
   224 00000ABA 5652515250E808FFFF- <1> 		cdecl	draw_line, eax, edx, ecx, edx, esi	; 下線
   224 00000AC3 FF6683C414          <1>
   225 00000AC8 42                  <1> 		inc		edx
   226                              <1> 
   227 00000AC9 49                  <1> 		dec		ecx									; ECX--; // 右線は1ドット左に移動
   228 00000ACA 5652515351E8F8FEFF- <1> 		cdecl	draw_line, ecx, ebx, ecx, edx, esi	; 右線
   228 00000AD3 FF6683C414          <1>
   229                              <1> 
   230                              <1> 		;---------------------------------------
   231                              <1> 		; 【レジスタの復帰】
   232                              <1> 		;---------------------------------------
   233 00000AD8 5E                  <1> 		pop		esi
   234 00000AD9 5A                  <1> 		pop		edx
   235 00000ADA 59                  <1> 		pop		ecx
   236 00000ADB 5B                  <1> 		pop		ebx
   237 00000ADC 58                  <1> 		pop		eax
   238                              <1> 
   239                              <1> 		;---------------------------------------
   240                              <1> 		; 【スタックフレームの破棄】
   241                              <1> 		;---------------------------------------
   242 00000ADD 89EC                <1> 		mov		esp, ebp
   243 00000ADF 5D                  <1> 		pop		ebp
   244                              <1> 
   245 00000AE0 C3                  <1> 		ret
   157                                  %include	"../modules/protect/itoa.s"
   158                              <1> ;************************************************************************
   159                              <1> ;	数値を文字に変換
   160                              <1> ;========================================================================
   161                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
   162                              <1> ;
   163                              <1> ;■引数
   164                              <1> ;	num		: 変換する数値
   165                              <1> ;	buff	: 保存先バッファアドレス
   166                              <1> ;	size	: 保存先バッファサイズ
   167                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
   168                              <1> ;	flags	: フラグ
   169                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
   170                              <1> ;			:      : 0=空白を' '（スペース）で埋める
   171                              <1> ;			:   B1 : 1=＋/-符号を表示する
   172                              <1> ;			:      : 0=＋/-符号を表示しない
   173                              <1> ;			:   B0 : 1=符号付き正数として扱う
   174                              <1> ;			:      : 0=符号無し正数として扱う
   175                              <1> ;
   176                              <1> ;■戻り値	: 無し
   177                              <1> ;************************************************************************
   178                              <1> itoa:
   179                              <1> 		;---------------------------------------
   180                              <1> 		; 【スタックフレームの構築】
   181                              <1> 		;---------------------------------------
   182                              <1> 												; ------|--------
   183                              <1> 												;    +24| フラグ
   184                              <1> 												;    +20| 基数
   185                              <1> 												;    +16| バッファサイズ
   186                              <1> 												;    +12| バッファアドレス
   187                              <1> 												;    + 8| 数値
   188                              <1> 												; ------|--------
   189                              <1> 												;    + 4| EIP（戻り番地）
   190 00000AE1 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   191 00000AE2 89E5                <1> 		mov		ebp, esp						; ------+--------
   192                              <1> 
   193                              <1> 		;---------------------------------------
   194                              <1> 		; 【レジスタの保存】
   195                              <1> 		;---------------------------------------
   196 00000AE4 50                  <1> 		push	eax
   197 00000AE5 53                  <1> 		push	ebx
   198 00000AE6 51                  <1> 		push	ecx
   199 00000AE7 52                  <1> 		push	edx
   200 00000AE8 56                  <1> 		push	esi
   201 00000AE9 57                  <1> 		push	edi
   202                              <1> 
   203                              <1> 		;---------------------------------------
   204                              <1> 		; 引数を取得
   205                              <1> 		;---------------------------------------
   206 00000AEA 8B4508              <1> 		mov		eax, [ebp + 8]					; val  = 数値;
   207 00000AED 8B750C              <1> 		mov		esi, [ebp +12]					; dst  = バッファアドレス;
   208 00000AF0 8B4D10              <1> 		mov		ecx, [ebp +16]					; size = 残りバッファサイズ;
   209                              <1> 
   210 00000AF3 89F7                <1> 		mov		edi, esi						; // バッファの最後尾
   211 00000AF5 01CF                <1> 		add		edi, ecx						; dst  = &dst[size - 1];
   212 00000AF7 4F                  <1> 		dec		edi								; 
   213                              <1> 
   214 00000AF8 8B5D18              <1> 		mov		ebx, [ebp +24]					; flags = オプション;
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; 符号付き判定
   218                              <1> 		;---------------------------------------
   219 00000AFB F7C301000000        <1> 		test	ebx, 0b0001						; if (flags & 0x01)// 符号付き
   220 00000B01 7408                <1> .10Q:	je		.10E							; {
   221 00000B03 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   222 00000B06 7D03                <1> .12Q:	jge		.12E							;   {
   223 00000B08 83CB02              <1> 		or		ebx, 0b0010						;     flags |=  2; // 符号表示
   224                              <1> .12E:											;   }
   225                              <1> .10E:											; }
   226                              <1> 
   227                              <1> 		;---------------------------------------
   228                              <1> 		; 符号出力判定
   229                              <1> 		;---------------------------------------
   230 00000B0B F7C302000000        <1> 		test	ebx, 0b0010						; if (flags & 0x02)// 符号出力判定
   231 00000B11 7410                <1> .20Q:	je		.20E							; {
   232 00000B13 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   233 00000B16 7D07                <1> .22Q:	jge		.22F							;   {
   234 00000B18 F7D8                <1> 		neg		eax								;     val *= -1;   // 符号反転
   235 00000B1A C6062D              <1> 		mov		[esi], byte '-'					;     *dst = '-';  // 符号表示
   236 00000B1D EB03                <1> 		jmp		.22E							;   }
   237                              <1> .22F:											;   else
   238                              <1> 												;   {
   239 00000B1F C6062B              <1> 		mov		[esi], byte '+'					;     *dst = '+';  // 符号表示
   240                              <1> .22E:											;   }
   241 00000B22 49                  <1> 		dec		ecx								;   size--;        // 残りバッファサイズの減算
   242                              <1> .20E:											; }
   243                              <1> 
   244                              <1> 		;---------------------------------------
   245                              <1> 		; ASCII変換
   246                              <1> 		;---------------------------------------
   247 00000B23 8B5D14              <1> 		mov		ebx, [ebp +20]					; BX = 基数;
   248                              <1> .30L:											; do
   249                              <1> 												; {
   250 00000B26 BA00000000          <1> 		mov		edx, 0							;   
   251 00000B2B F7F3                <1> 		div		ebx								;   DX = DX:AX % 基数;
   252                              <1> 												;   AX = DX:AX / 基数;
   253                              <1> 												;   
   254 00000B2D 89D6                <1> 		mov		esi, edx						;   // テーブル参照
   255 00000B2F 8A96[5A0B0000]      <1> 		mov		dl, byte [.ascii + esi]			;   DL = ASCII[DX];
   256                              <1> 												;   
   257 00000B35 8817                <1> 		mov		[edi], dl						;   *dst = DL;
   258 00000B37 4F                  <1> 		dec		edi								;   dst--;
   259                              <1> 												;   
   260 00000B38 83F800              <1> 		cmp		eax, 0							;   
   261 00000B3B E0E9                <1> 		loopnz	.30L							; } while (AX);
   262                              <1> .30E:
   263                              <1> 
   264                              <1> 		;---------------------------------------
   265                              <1> 		; 空欄を埋める
   266                              <1> 		;---------------------------------------
   267 00000B3D 83F900              <1> 		cmp		ecx, 0							; if (size)
   268 00000B40 740E                <1> .40Q:	je		.40E							; {
   269 00000B42 B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   270 00000B44 66837D1804          <1> 		cmp		[ebp +24], word 0b0100			;   if (flags & 0x04)
   271 00000B49 7502                <1> .42Q:	jne		.42E							;   {
   272 00000B4B B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   273                              <1> .42E:											;   }
   274 00000B4D FD                  <1> 		std										;   // DF = 1（-方向）
   275 00000B4E F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   276                              <1> .40E:											; }
   277                              <1> 
   278                              <1> 		;---------------------------------------
   279                              <1> 		; 【レジスタの復帰】
   280                              <1> 		;---------------------------------------
   281 00000B50 5F                  <1> 		pop		edi
   282 00000B51 5E                  <1> 		pop		esi
   283 00000B52 5A                  <1> 		pop		edx
   284 00000B53 59                  <1> 		pop		ecx
   285 00000B54 5B                  <1> 		pop		ebx
   286 00000B55 58                  <1> 		pop		eax
   287                              <1> 
   288                              <1> 		;---------------------------------------
   289                              <1> 		; 【スタックフレームの破棄】
   290                              <1> 		;---------------------------------------
   291 00000B56 89EC                <1> 		mov		esp, ebp
   292 00000B58 5D                  <1> 		pop		ebp
   293                              <1> 
   294 00000B59 C3                  <1> 		ret
   295                              <1> 
   296 00000B5A 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   296 00000B63 39414243444546      <1>
   297                              <1> 
   158                                  %include	"../modules/protect/rtc.s"
   159                              <1> ;************************************************************************
   160                              <1> ;	RTCから時刻データを取得する
   161                              <1> ;========================================================================
   162                              <1> ;■書式		: DWORD rtc_get_time(dst);
   163                              <1> ;
   164                              <1> ;■引数
   165                              <1> ;	dst		: 保存先アドレス
   166                              <1> ;
   167                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   168                              <1> ;************************************************************************
   169                              <1> rtc_get_time:
   170                              <1> 		;---------------------------------------
   171                              <1> 		; 【スタックフレームの構築】
   172                              <1> 		;---------------------------------------
   173                              <1> 												; ------|--------
   174                              <1> 												; EBP+ 8| 保存先アドレス
   175                              <1> 												; ---------------
   176 00000B6A 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   177 00000B6B 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   178                              <1> 												; ---------------
   179                              <1> 		;---------------------------------------
   180                              <1> 		; 【レジスタの保存】
   181                              <1> 		;---------------------------------------
   182 00000B6D 53                  <1> 		push	ebx
   183                              <1> 
   184                              <1> 		;---------------------------------------
   185                              <1> 		; RTCから時刻を取得
   186                              <1> 		;---------------------------------------
   187 00000B6E B00A                <1> 		mov		al, 0x0A						; // レジスタA
   188 00000B70 E670                <1> 		out		0x70, al						; outp(0x70, AL);
   189 00000B72 E471                <1> 		in		al, 0x71						; AL = レジスタA;
   190 00000B74 A880                <1> 		test	al, 0x80						; if (DM & UIP) // 更新中
   191 00000B76 7407                <1> 		je		.10F							; {
   192 00000B78 B801000000          <1> 		mov		eax, 1							;   ret = 1; // データ更新中
   193 00000B7D EB27                <1> 		jmp		.10E							; }
   194                              <1> .10F:											; else
   195                              <1> 												; {
   196                              <1> 												;   // RAM[0x04]:時
   197 00000B7F B004                <1> 		mov		al, 0x04						;   AL = 0x04;
   198 00000B81 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   199 00000B83 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 時データ
   200                              <1> 												;   
   201 00000B85 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   202                              <1> 												;   
   203                              <1> 												;   // RAM[0x02]:分
   204 00000B88 B002                <1> 		mov		al, 0x02						;   AL = 0x02;
   205 00000B8A E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   206 00000B8C E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 分データ
   207                              <1> 												;   
   208 00000B8E C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   209                              <1> 												;   
   210                              <1> 												;   // RAM[0x00]:秒
   211 00000B91 B000                <1> 		mov		al, 0x00						;   AL = 0x00;
   212 00000B93 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   213 00000B95 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 秒データ
   214                              <1> 												;   
   215 00000B97 25FFFFFF00          <1> 		and		eax, 0x00_FF_FF_FF				;   // 下位3バイトのみ有効
   216                              <1> 												;   
   217 00000B9C 8B5D08              <1> 		mov		ebx, [ebp + 8]					;   dst = 保存先;
   218 00000B9F 8903                <1> 		mov		[ebx], eax						;   [dst] = 時刻;
   219                              <1> 												;   
   220 00000BA1 B800000000          <1> 		mov		eax, 0							;   ret = 0; // 正常終了
   221                              <1> .10E:											; }
   222                              <1> 
   223                              <1> 		;---------------------------------------
   224                              <1> 		; 【レジスタの復帰】
   225                              <1> 		;---------------------------------------
   226 00000BA6 5B                  <1> 		pop		ebx
   227                              <1> 
   228                              <1> 		;---------------------------------------
   229                              <1> 		; 【スタックフレームの破棄】
   230                              <1> 		;---------------------------------------
   231 00000BA7 89EC                <1> 		mov		esp, ebp
   232 00000BA9 5D                  <1> 		pop		ebp
   233                              <1> 
   234 00000BAA C3                  <1> 		ret
   235                              <1> 
   159                                  %include	"../modules/protect/draw_time.s"
   160                              <1> ;************************************************************************
   161                              <1> ;	時刻の表示
   162                              <1> ;========================================================================
   163                              <1> ;■書式		: void draw_time(col, row, color, time);
   164                              <1> ;
   165                              <1> ;■引数
   166                              <1> ;	col		: 列
   167                              <1> ;	row		: 行
   168                              <1> ;	color	: 描画色
   169                              <1> ;	time	: 時刻データ
   170                              <1> ;
   171                              <1> ;■戻り値	: 無し
   172                              <1> ;************************************************************************
   173                              <1> draw_time:
   174                              <1> 		;---------------------------------------
   175                              <1> 		; 【スタックフレームの構築】
   176                              <1> 		;---------------------------------------
   177                              <1> 												; ------|--------
   178                              <1> 												; EBP+20| 時刻データ
   179                              <1> 												; EBP+16| 色
   180                              <1> 												; EBP+12| Y（行）
   181                              <1> 												; EBP+ 8| X（列）
   182                              <1> 												; ---------------
   183 00000BAB 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   184 00000BAC 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   185                              <1> 												; ---------------
   186                              <1> 		;---------------------------------------
   187                              <1> 		; 【レジスタの保存】
   188                              <1> 		;---------------------------------------
   189 00000BAE 50                  <1> 		push	eax
   190 00000BAF 53                  <1> 		push	ebx
   191                              <1> 
   192                              <1> 		;---------------------------------------
   193                              <1> 		; 
   194                              <1> 		;---------------------------------------
   195 00000BB0 8B4514              <1> 		mov		eax, [ebp +20]					; EAX = 時刻データ;
   196 00000BB3 3B05[300C0000]      <1> 		cmp		eax, [.last]					; if (今回 != 前回)
   197 00000BB9 7467                <1> 		je		.10E							; {
   198                              <1> 												;   
   199 00000BBB A3[300C0000]        <1> 		mov		[.last], eax					;   // 前回の時刻値を更新
   200                              <1> 												;   
   201 00000BC0 BB00000000          <1> 		mov		ebx, 0							;   EBX = 0;
   202 00000BC5 88C3                <1> 		mov		bl, al							;   EBX = 秒;
   203 00000BC7 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .sec, 2, 16, 0b0100	;   // 時刻を文字列に変換
   203 00000BCE [3E0C0000]53E809FF- <1>
   203 00000BD6 FFFF6683C414        <1>
   204                              <1> 
   205 00000BDC 88E3                <1> 		mov		bl, ah							;   EBX = 分;
   206 00000BDE 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .min, 2, 16, 0b0100	;   // 時刻を文字列に変換
   206 00000BE5 [3B0C0000]53E8F2FE- <1>
   206 00000BED FFFF6683C414        <1>
   207                              <1> 
   208 00000BF3 C1E810              <1> 		shr		eax, 16							;   EBX = 時;
   209 00000BF6 6A046A106A0268-     <1> 		cdecl	itoa, eax, .hour, 2, 16, 0b0100	;   // 時刻を文字列に変換
   209 00000BFD [380C0000]50E8DAFE- <1>
   209 00000C05 FFFF6683C414        <1>
   210                              <1> 
   211                              <1> 												;   // 時刻を表示
   212 00000C0B 68[380C0000]FF7510- <1> 		cdecl	draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
   212 00000C13 FF750CFF7508E81BFC- <1>
   212 00000C1C FFFF6683C410        <1>
   213                              <1> 												;     
   214                              <1> 												;   }
   215                              <1> .10E:											; }
   216                              <1> 
   217                              <1> 		;---------------------------------------
   218                              <1> 		; 【レジスタの復帰】
   219                              <1> 		;---------------------------------------
   220 00000C22 5B                  <1> 		pop		ebx
   221 00000C23 58                  <1> 		pop		eax
   222                              <1> 
   223                              <1> 		;---------------------------------------
   224                              <1> 		; 【スタックフレームの破棄】
   225                              <1> 		;---------------------------------------
   226 00000C24 89EC                <1> 		mov		esp, ebp
   227 00000C26 5D                  <1> 		pop		ebp
   228                              <1> 
   229 00000C27 C3                  <1> 		ret
   230                              <1> 
   231                              <1> ALIGN 2, db 0
   232 00000C28 0000000000000000    <1> .temp:	dq	0
   233 00000C30 0000000000000000    <1> .last:	dq	0
   234 00000C38 5A5A3A              <1> .hour:	db	"ZZ:"
   235 00000C3B 5A5A3A              <1> .min:	db	"ZZ:"
   236 00000C3E 5A5A00              <1> .sec:	db	"ZZ", 0
   237                              <1> 
   160                                  %include	"../modules/protect/interrupt.s"
   161                              <1> ;************************************************************************
   162                              <1> ;	割り込みベクタの初期化
   163                              <1> ;************************************************************************
   164 00000C41 90<rep 3h>          <1> ALIGN 4
   165 00000C44 FF07                <1> IDTR:	dw 		8 * 256 - 1					; idt_limit
   166 00000C46 00001000            <1> 		dd 		VECT_BASE					; idt location
   167                              <1> 
   168                              <1> ;************************************************************************
   169                              <1> ;	割り込みテーブルを初期化
   170                              <1> ;------------------------------------------------------------------------
   171                              <1> ;	
   172                              <1> ;	まず、全ての割り込みアドレスにデフォルト処理を設定すし、その後、
   173                              <1> ;	必要な割り込みだけ設定しなおす。
   174                              <1> ;	
   175                              <1> ;	割り込みアドレスは、VECT_BASEで指定され、256の割り込みがあるので
   176                              <1> ;	0x0800バイト占有することになる。
   177                              <1> ;	
   178                              <1> ;	           |____________| _V___
   179                              <1> ;	  VECT_BASE| IntDefault |  |   
   180                              <1> ;	           | IntDefault |  | 8 * 256
   181                              <1> ;	           |      :     |  |   
   182                              <1> ;	           |____________| _|___
   183                              <1> ;	      +0800|////////////|
   184                              <1> ;	           |            |
   185                              <1> ;	
   186                              <1> ;	一つの割り込み設定は8バイトで構成される。
   187                              <1> ;	
   188                              <1> ;	           |____________|____________| 
   189                              <1> ;	        [0]| Address Lo[15: 0]       | 
   190                              <1> ;	        [2]| Selector                | 
   191                              <1> ;	        [4]| Flags                   | 
   192                              <1> ;	        [6]|_Address Lo[32:16]_______| 
   193                              <1> ;	           |/////////////////////////| 
   194                              <1> ;	           |            |            | 
   195                              <1> ;	
   196                              <1> ;========================================================================
   197                              <1> ;■書式		: void init_int(void);
   198                              <1> ;
   199                              <1> ;■引数		: 無し
   200                              <1> ;
   201                              <1> ;■戻り値	: 無し
   202                              <1> ;************************************************************************
   203                              <1> init_int:
   204                              <1> 		;---------------------------------------
   205                              <1> 		; 【レジスタの保存】
   206                              <1> 		;---------------------------------------
   207 00000C4A 50                  <1> 		push	eax
   208 00000C4B 53                  <1> 		push	ebx
   209 00000C4C 51                  <1> 		push	ecx
   210 00000C4D 57                  <1> 		push	edi
   211                              <1> 
   212                              <1> 		;---------------------------------------
   213                              <1> 		; 全ての割り込みにデフォルト処理を設定
   214                              <1> 		;---------------------------------------
   215 00000C4E 8D05[940D0000]      <1> 		lea		eax, [int_default]				; EAX   = 割り込み処理アドレス;
   216 00000C54 BB008E0800          <1> 		mov		ebx, 0x0008_8E00				; EBX   = セグメントセレクタ;
   217 00000C59 6693                <1> 		xchg	ax, bx							; // 下位ワードを交換
   218                              <1> 
   219 00000C5B B900010000          <1> 		mov		ecx, 256						; ECX   = 割り込みベクタ数
   220 00000C60 BF00001000          <1> 		mov		edi, VECT_BASE					; EDI   = 割り込みベクタテーブル
   221                              <1> 
   222                              <1> .10L:											; do
   223                              <1> 												; {
   224 00000C65 891F                <1> 		mov		[edi + 0], ebx					;   [EDI + 0] = 割り込みディスクリプタ（下位）
   225 00000C67 894704              <1> 		mov		[edi + 4], eax					;   [EDI + 4] = 割り込みディスクリプタ（上位）
   226 00000C6A 83C708              <1> 		add		edi, 8							;   EDI += 8;
   227 00000C6D E2F6                <1> 		loop	.10L							; } while (ECX--);
   228                              <1> 
   229                              <1> 		;---------------------------------------
   230                              <1> 		; 割り込みディスクリプタの設定
   231                              <1> 		;---------------------------------------
   232 00000C6F 0F011D[440C0000]    <1> 		lidt	[IDTR]							; // 割り込みディスクリプタテーブルをロード
   233                              <1> 
   234                              <1> 		;---------------------------------------
   235                              <1> 		; 【レジスタの復帰】
   236                              <1> 		;---------------------------------------
   237 00000C76 5F                  <1> 		pop		edi
   238 00000C77 59                  <1> 		pop		ecx
   239 00000C78 5B                  <1> 		pop		ebx
   240 00000C79 58                  <1> 		pop		eax
   241                              <1> 
   242 00000C7A C3                  <1> 		ret
   243                              <1> 
   244                              <1> ;************************************************************************
   245                              <1> ;	スタックの内容を表示して無限ループを実行
   246                              <1> ;************************************************************************
   247                              <1> int_stop:
   248 00000C7B FB                  <1> 		sti										; // 割り込み許可
   249                              <1> 
   250                              <1> 		;---------------------------------------
   251                              <1> 		; EAXで示される文字列を表示
   252                              <1> 		;---------------------------------------
   253 00000C7C 50680F0600006A0F6A- <1> 		cdecl	draw_str, 25, 15, 0x060F, eax	; draw_str(EAX);
   253 00000C85 19E8AEFBFFFF6683C4- <1>
   253 00000C8E 10                  <1>
   254                              <1> 
   255                              <1> 		;---------------------------------------
   256                              <1> 		; スタックのデータを文字列に変換
   257                              <1> 		;---------------------------------------
   258 00000C8F 8B0424              <1> 		mov		eax, [esp + 0]					; EAX = ESP[ 0];
   259 00000C92 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p1, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   259 00000C99 [570D0000]50E83EFE- <1>
   259 00000CA1 FFFF6683C414        <1>
   260                              <1> 
   261 00000CA7 8B442404            <1> 		mov		eax, [esp + 4]					; EAX = ESP[ 4];
   262 00000CAB 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p2, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   262 00000CB2 [680D0000]50E825FE- <1>
   262 00000CBA FFFF6683C414        <1>
   263                              <1> 
   264 00000CC0 8B442408            <1> 		mov		eax, [esp + 8]					; EAX = ESP[ 8];
   265 00000CC4 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p3, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   265 00000CCB [790D0000]50E80CFE- <1>
   265 00000CD3 FFFF6683C414        <1>
   266                              <1> 
   267 00000CD9 8B44240C            <1> 		mov		eax, [esp +12]					; EAX = ESP[12];
   268 00000CDD 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p4, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   268 00000CE4 [8A0D0000]50E8F3FD- <1>
   268 00000CEC FFFF6683C414        <1>
   269                              <1> 
   270                              <1> 		;---------------------------------------
   271                              <1> 		; 文字列の表示
   272                              <1> 		;---------------------------------------
   273 00000CF2 68[500D0000]68040F- <1> 		cdecl	draw_str, 25, 16, 0x0F04, .s1	; draw_str("ESP+ 0:-------- ");
   273 00000CFA 00006A106A19E834FB- <1>
   273 00000D03 FFFF6683C410        <1>
   274 00000D09 68[610D0000]68040F- <1> 		cdecl	draw_str, 25, 17, 0x0F04, .s2	; draw_str("   + 4:-------- ");
   274 00000D11 00006A116A19E81DFB- <1>
   274 00000D1A FFFF6683C410        <1>
   275 00000D20 68[720D0000]68040F- <1> 		cdecl	draw_str, 25, 18, 0x0F04, .s3	; draw_str("   + 8:-------- ");
   275 00000D28 00006A126A19E806FB- <1>
   275 00000D31 FFFF6683C410        <1>
   276 00000D37 68[830D0000]68040F- <1> 		cdecl	draw_str, 25, 19, 0x0F04, .s4	; draw_str("   +12:-------- ");
   276 00000D3F 00006A136A19E8EFFA- <1>
   276 00000D48 FFFF6683C410        <1>
   277                              <1> 
   278                              <1> 		;---------------------------------------
   279                              <1> 		; 無限ループ
   280                              <1> 		;---------------------------------------
   281 00000D4E EBFE                <1> 		jmp		$								; while (1) ; // 無限ループ
   282                              <1> 
   283 00000D50 4553502B20303A      <1> .s1		db	"ESP+ 0:"
   284 00000D57 5F5F5F5F5F5F5F5F20- <1> .p1		db	"________ ", 0
   284 00000D60 00                  <1>
   285 00000D61 2020202B20343A      <1> .s2		db	"   + 4:"
   286 00000D68 5F5F5F5F5F5F5F5F20- <1> .p2		db	"________ ", 0
   286 00000D71 00                  <1>
   287 00000D72 2020202B20383A      <1> .s3		db	"   + 8:"
   288 00000D79 5F5F5F5F5F5F5F5F20- <1> .p3		db	"________ ", 0
   288 00000D82 00                  <1>
   289 00000D83 2020202B31323A      <1> .s4		db	"   +12:"
   290 00000D8A 5F5F5F5F5F5F5F5F20- <1> .p4		db	"________ ", 0
   290 00000D93 00                  <1>
   291                              <1> 
   292                              <1> ;************************************************************************
   293                              <1> ;	割り込み処理：デフォルトの処理
   294                              <1> ;************************************************************************
   295                              <1> int_default:
   296 00000D94 9C                  <1> 		pushf									; // EFLAGS(IF==0)
   297 00000D95 0E                  <1> 		push	cs								; // CS
   298 00000D96 68[7B0C0000]        <1> 		push	int_stop						; // スタック表示処理
   299                              <1> 
   300 00000D9B B8[A10D0000]        <1> 		mov		eax, .s0						; // 割り込み種別
   301 00000DA0 CF                  <1> 		iret
   302                              <1> 
   303 00000DA1 203C2020202053544F- <1> .s0		db	" <    STOP    > ", 0
   303 00000DAA 50202020203E2000    <1>
   304                              <1> 
   305                              <1> ;************************************************************************
   306                              <1> ;	割り込み処理：ゼロ除算
   307                              <1> ;************************************************************************
   308                              <1> int_zero_div:
   309 00000DB2 9C                  <1> 		pushf									; // EFLAGS
   310 00000DB3 0E                  <1> 		push	cs								; // CS
   311 00000DB4 68[7B0C0000]        <1> 		push	int_stop						; // スタック表示処理
   312                              <1> 
   313 00000DB9 B8[BF0D0000]        <1> 		mov		eax, .s0						; // 割り込み種別
   314 00000DBE CF                  <1> 		iret
   315                              <1> 
   316 00000DBF 203C20205A45524F20- <1> .s0		db	" <  ZERO DIV  > ", 0
   316 00000DC8 44495620203E2000    <1>
   317                              <1> 
   161                                  %include	"../modules/protect/pic.s"
   162                              <1> ;************************************************************************
   163                              <1> ;	割り込みコントローラの初期化
   164                              <1> ;========================================================================
   165                              <1> ;■書式		: void init_pic(void);
   166                              <1> ;
   167                              <1> ;■引数		: 無し
   168                              <1> ;
   169                              <1> ;■戻り値	: 無し
   170                              <1> ;************************************************************************
   171                              <1> init_pic:
   172                              <1> 		;---------------------------------------
   173                              <1> 		; 【レジスタの保存】
   174                              <1> 		;---------------------------------------
   175 00000DD0 50                  <1> 		push	eax
   176                              <1> 
   177                              <1> 		;---------------------------------------
   178                              <1> 		; マスタPICの設定
   179                              <1> 		;---------------------------------------
   180                              <1> 		outp	0x20, 0x11						; // MASTER.ICW1 = 0x11;
    72 00000DD1 B011                <2>  mov al, %2
    73 00000DD3 E620                <2>  out %1, al
   181                              <1> 		outp	0x21, 0x20						; // MASTER.ICW2 = 0x20;
    72 00000DD5 B020                <2>  mov al, %2
    73 00000DD7 E621                <2>  out %1, al
   182                              <1> 		outp	0x21, 0x04						; // MASTER.ICW3 = 0x04;
    72 00000DD9 B004                <2>  mov al, %2
    73 00000DDB E621                <2>  out %1, al
   183                              <1> 		outp	0x21, 0x01						; // MASTER.ICW4 = 0x01;
    72 00000DDD B001                <2>  mov al, %2
    73 00000DDF E621                <2>  out %1, al
   184                              <1> 		outp	0x21, 0xFF						; // マスタ割り込みマスク
    72 00000DE1 B0FF                <2>  mov al, %2
    73 00000DE3 E621                <2>  out %1, al
   185                              <1> 
   186                              <1> 		;---------------------------------------
   187                              <1> 		; スレーブPICの設定
   188                              <1> 		;---------------------------------------
   189                              <1> 		outp	0xA0, 0x11						; // SLAVE.ICW1  = 0x11;
    72 00000DE5 B011                <2>  mov al, %2
    73 00000DE7 E6A0                <2>  out %1, al
   190                              <1> 		outp	0xA1, 0x28						; // SLAVE.ICW2  = 0x28;
    72 00000DE9 B028                <2>  mov al, %2
    73 00000DEB E6A1                <2>  out %1, al
   191                              <1> 		outp	0xA1, 0x02						; // SLAVE.ICW3  = 0x02;
    72 00000DED B002                <2>  mov al, %2
    73 00000DEF E6A1                <2>  out %1, al
   192                              <1> 		outp	0xA1, 0x01						; // SLAVE.ICW4  = 0x01;
    72 00000DF1 B001                <2>  mov al, %2
    73 00000DF3 E6A1                <2>  out %1, al
   193                              <1> 		outp	0xA1, 0xFF						; // スレーブ割り込みマスク
    72 00000DF5 B0FF                <2>  mov al, %2
    73 00000DF7 E6A1                <2>  out %1, al
   194                              <1> 
   195                              <1> 		;---------------------------------------
   196                              <1> 		; 【レジスタの復帰】
   197                              <1> 		;---------------------------------------
   198 00000DF9 58                  <1> 		pop		eax
   199                              <1> 
   200 00000DFA C3                  <1> 		ret
   201                              <1> 
   162                                  %include	"../modules/protect/int_rtc.s"
   163                              <1> ;************************************************************************
   164                              <1> ;	RTCの割り込み許可設定
   165                              <1> ;========================================================================
   166                              <1> ;■書式		: void rtc_int_en(bit);
   167                              <1> ;
   168                              <1> ;■引数
   169                              <1> ;	bit		: 割り込みを許可するビット
   170                              <1> ;
   171                              <1> ;■戻り値	: 無し
   172                              <1> ;************************************************************************
   173                              <1> rtc_int_en:
   174                              <1> 		;---------------------------------------
   175                              <1> 		; 【スタックフレームの構築】
   176                              <1> 		;---------------------------------------
   177                              <1> 												; ------|--------
   178                              <1> 												;    + 8| ビット
   179                              <1> 												; ------|--------
   180                              <1> 												;    + 4| EIP（戻り番地）
   181 00000DFB 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   182 00000DFC 89E5                <1> 		mov		ebp, esp						; ------+--------
   183                              <1> 
   184                              <1> 		;---------------------------------------
   185                              <1> 		; 【レジスタの保存】
   186                              <1> 		;---------------------------------------
   187 00000DFE 50                  <1> 		push	eax
   188                              <1> 
   189                              <1> 		;---------------------------------------
   190                              <1> 		; 割り込み許可設定
   191                              <1> 		;---------------------------------------
   192                              <1> 		outp	0x70, 0x0B						; outp(0x70, AL);   // レジスタBを選択
    72 00000DFF B00B                <2>  mov al, %2
    73 00000E01 E670                <2>  out %1, al
   193                              <1> 
   194 00000E03 E471                <1> 		in		al, 0x71						; AL  = port(0x71); // レジスタBの
   195 00000E05 0A4508              <1> 		or		al, [ebp + 8]					; AL |= ビット;     // 指定されたビットをセット
   196                              <1> 
   197 00000E08 E671                <1> 		out		0x71, al						; outp(0x71, AL);   // レジスタBに書き込み
   198                              <1> 
   199                              <1> 		;---------------------------------------
   200                              <1> 		; 【レジスタの復帰】
   201                              <1> 		;---------------------------------------
   202 00000E0A 58                  <1> 		pop		eax
   203                              <1> 
   204                              <1> 		;---------------------------------------
   205                              <1> 		; 【スタックフレームの破棄】
   206                              <1> 		;---------------------------------------
   207 00000E0B 89EC                <1> 		mov		esp, ebp
   208 00000E0D 5D                  <1> 		pop		ebp
   209                              <1> 
   210 00000E0E C3                  <1> 		ret
   211                              <1> 
   212                              <1> 
   213                              <1> ;************************************************************************
   214                              <1> ;	割り込み処理：RTC
   215                              <1> ;************************************************************************
   216                              <1> int_rtc:
   217                              <1> 		;---------------------------------------
   218                              <1> 		; 【レジスタの保存】
   219                              <1> 		;---------------------------------------
   220 00000E0F 60                  <1> 		pusha
   221 00000E10 1E                  <1> 		push	ds
   222 00000E11 06                  <1> 		push	es
   223                              <1> 
   224                              <1> 		;---------------------------------------
   225                              <1> 		; データ用セグメントセレクタの設定
   226                              <1> 		;---------------------------------------
   227 00000E12 66B81000            <1> 		mov		ax, 0x0010						; 
   228 00000E16 8ED8                <1> 		mov		ds, ax							; 
   229 00000E18 8EC0                <1> 		mov		es, ax							; 
   230                              <1> 
   231                              <1> 		;---------------------------------------
   232                              <1> 		; RTCから時刻を取得
   233                              <1> 		;---------------------------------------
   234 00000E1A 68[04020000]E846FD- <1> 		cdecl	rtc_get_time, RTC_TIME			; EAX = get_time(&RTC_TIME);
   234 00000E22 FFFF6683C404        <1>
   235                              <1> 												; 
   236                              <1> 		;---------------------------------------
   237                              <1> 		; RTCの割り込み要因を取得
   238                              <1> 		;---------------------------------------
   239                              <1> 		outp	0x70, 0x0C						; outp(0x70, 0x0C); // レジスタCを選択
    72 00000E28 B00C                <2>  mov al, %2
    73 00000E2A E670                <2>  out %1, al
   240 00000E2C E471                <1> 		in		al, 0x71						; AL = inp();
   241                              <1> 
   242                              <1> 		;---------------------------------------
   243                              <1> 		; 割り込みフラグをクリア(EOI)
   244                              <1> 		;---------------------------------------
   245                              <1> 		outp	0xA0, 0x20						; outp(0xA0, EOI); // スレーブPIC
    72 00000E2E B020                <2>  mov al, %2
    73 00000E30 E6A0                <2>  out %1, al
   246                              <1> 		outp	0x20, 0x20						; outp(0x20, EOI); // マスタPIC
    72 00000E32 B020                <2>  mov al, %2
    73 00000E34 E620                <2>  out %1, al
   247                              <1> 
   248                              <1> 		;---------------------------------------
   249                              <1> 		; 【レジスタの復帰】
   250                              <1> 		;---------------------------------------
   251 00000E36 07                  <1> 		pop		es								; 
   252 00000E37 1F                  <1> 		pop		ds								; 
   253 00000E38 61                  <1> 		popa									; 
   254                              <1> 
   255 00000E39 CF                  <1> 		iret									; 割り込み処理の終了
   256                              <1> 
   163                                  %include	"../modules/protect/int_keyboard.s"
   164                              <1> ;************************************************************************
   165                              <1> ;	割り込み処理：キーボード
   166                              <1> ;------------------------------------------------------------------------
   167                              <1> ;	KBC（キーボードコントローラ）からキーコードを取得して、
   168                              <1> ;	専用のリングバッファに保存する。
   169                              <1> ;************************************************************************
   170                              <1> int_keyboard:
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 【レジスタの保存】
   173                              <1> 		;---------------------------------------
   174 00000E3A 60                  <1> 		pusha
   175 00000E3B 1E                  <1> 		push	ds
   176 00000E3C 06                  <1> 		push	es
   177                              <1> 
   178                              <1> 		;---------------------------------------
   179                              <1> 		; データ用セグメントの設定
   180                              <1> 		;---------------------------------------
   181 00000E3D 66B81000            <1> 		mov		ax, 0x0010						; 
   182 00000E41 8ED8                <1> 		mov		ds, ax							; 
   183 00000E43 8EC0                <1> 		mov		es, ax							; 
   184                              <1> 
   185                              <1> 		;---------------------------------------
   186                              <1> 		; KBCのバッファ読み取り
   187                              <1> 		;---------------------------------------
   188 00000E45 E460                <1> 		in		al, 0x60						; AL = キーコードの取得
   189                              <1> 
   190                              <1> 		;---------------------------------------
   191                              <1> 		; キーコードの保存
   192                              <1> 		;---------------------------------------
   193 00000E47 5068[600E0000]E856- <1> 		cdecl	ring_wr, _KEY_BUFF, eax			; ring_wr(_KEY_BUFF, EAX); // キーコードの保存
   193 00000E4F 0000006683C408      <1>
   194                              <1> 
   195                              <1> 		;---------------------------------------
   196                              <1> 		; 割り込み終了コマンド送信
   197                              <1> 		;---------------------------------------
   198                              <1> 		outp	0x20, 0x20						; outp(); // マスタPIC:EOIコマンド
    72 00000E56 B020                <2>  mov al, %2
    73 00000E58 E620                <2>  out %1, al
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 【レジスタの復帰】
   202                              <1> 		;---------------------------------------
   203 00000E5A 07                  <1> 		pop		es								; 
   204 00000E5B 1F                  <1> 		pop		ds								; 
   205 00000E5C 61                  <1> 		popa
   206                              <1> 
   207 00000E5D CF                  <1> 		iret									; 割り込みからの復帰
   208                              <1> 
   209 00000E5E 00<rep 2h>          <1> ALIGN 4, db 0
   210 00000E60 00<rep 18h>         <1> _KEY_BUFF:	times ring_buff_size db 0
   211                              <1> 
   164                                  %include	"../modules/protect/ring_buff.s"
   165                              <1> ;************************************************************************
   166                              <1> ;	リングバッファからデータを取得
   167                              <1> ;========================================================================
   168                              <1> ;■書式		: DWORD ring_rd(buff, data);
   169                              <1> ;
   170                              <1> ;■引数
   171                              <1> ;	buff	: リングバッファ
   172                              <1> ;	data	: 読み込んだデータの保存先アドレス
   173                              <1> ;
   174                              <1> ;■戻り値	: データあり(0以外)、データ無し(0)
   175                              <1> ;************************************************************************
   176                              <1> ring_rd:
   177                              <1> 		;---------------------------------------
   178                              <1> 		; 【スタックフレームの構築】
   179                              <1> 		;---------------------------------------
   180                              <1> 												; ------|--------
   181                              <1> 												;    +12| リングデータ
   182                              <1> 												;    + 8| データアドレス
   183                              <1> 												; ------|--------
   184                              <1> 												;    + 4| EIP（戻り番地）
   185 00000E78 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   186 00000E79 89E5                <1> 		mov		ebp, esp						; ------+--------
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 【レジスタの保存】
   190                              <1> 		;---------------------------------------
   191 00000E7B 53                  <1> 		push	ebx
   192 00000E7C 56                  <1> 		push	esi
   193 00000E7D 57                  <1> 		push	edi
   194                              <1> 
   195                              <1> 		;---------------------------------------
   196                              <1> 		; 引数を取得
   197                              <1> 		;---------------------------------------
   198 00000E7E 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   199 00000E81 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = データアドレス;
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; 読み込み位置を確認
   203                              <1> 		;---------------------------------------
   204 00000E84 B800000000          <1> 		mov		eax, 0							; EAX = 0;          // データ無し
   205 00000E89 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;         // 読み込み位置
   206 00000E8B 3B5E04              <1> 		cmp		ebx, [esi + ring_buff.wp]		; if (EBX != wp)    // 書き込み位置と異なる
   207 00000E8E 7411                <1> 		je		.10E							; {
   208                              <1> 												;   
   209 00000E90 8A441E08            <1> 		mov		al, [esi + ring_buff.item + ebx] ;   AL = BUFF[rp]; // キーコードを保存
   210                              <1> 												;   
   211 00000E94 8807                <1> 		mov		[edi], al						;   [EDI] = AL;     // データを保存
   212                              <1> 												;   
   213 00000E96 43                  <1> 		inc		ebx								;   EBX++;          // 次の読み込み位置
   214 00000E97 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= 0x0F     // サイズの制限
   215 00000E9A 891E                <1> 		mov		[esi + ring_buff.rp], ebx		;   rp = EBX;       // 読み込み位置を保存
   216                              <1> 												;   
   217 00000E9C B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // データあり
   218                              <1> .10E:											; }
   219                              <1> 
   220                              <1> 		;---------------------------------------
   221                              <1> 		; 【レジスタの復帰】
   222                              <1> 		;---------------------------------------
   223 00000EA1 5F                  <1> 		pop		edi
   224 00000EA2 5E                  <1> 		pop		esi
   225 00000EA3 5B                  <1> 		pop		ebx
   226                              <1> 
   227                              <1> 		;---------------------------------------
   228                              <1> 		; 【スタックフレームの破棄】
   229                              <1> 		;---------------------------------------
   230 00000EA4 89EC                <1> 		mov		esp, ebp
   231 00000EA6 5D                  <1> 		pop		ebp
   232                              <1> 
   233 00000EA7 C3                  <1> 		ret
   234                              <1> 
   235                              <1> ;************************************************************************
   236                              <1> ;	リングバッファにデータを格納
   237                              <1> ;========================================================================
   238                              <1> ;■書式		: DWORD ring_wr(buff, data);
   239                              <1> ;
   240                              <1> ;■引数
   241                              <1> ;	buff	: リングバッファ
   242                              <1> ;	data	: 書き込むデータ
   243                              <1> ;
   244                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   245                              <1> ;************************************************************************
   246                              <1> ring_wr:
   247                              <1> 		;---------------------------------------
   248                              <1> 		; 【スタックフレームの構築】
   249                              <1> 		;---------------------------------------
   250                              <1> 												; ------|--------
   251                              <1> 												;    +12| リングデータ
   252                              <1> 												;    + 8| データ
   253                              <1> 												; ------|--------
   254                              <1> 												;    + 4| EIP（戻り番地）
   255 00000EA8 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   256 00000EA9 89E5                <1> 		mov		ebp, esp						; ------+--------
   257                              <1> 
   258                              <1> 		;---------------------------------------
   259                              <1> 		; 【レジスタの保存】
   260                              <1> 		;---------------------------------------
   261 00000EAB 53                  <1> 		push	ebx
   262 00000EAC 51                  <1> 		push	ecx
   263 00000EAD 56                  <1> 		push	esi
   264                              <1> 
   265                              <1> 		;---------------------------------------
   266                              <1> 		; 引数を取得
   267                              <1> 		;---------------------------------------
   268 00000EAE 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   269                              <1> 
   270                              <1> 		;---------------------------------------
   271                              <1> 		; 書き込み位置を確認
   272                              <1> 		;---------------------------------------
   273 00000EB1 B800000000          <1> 		mov		eax, 0							; EAX  = 0;         // 失敗
   274 00000EB6 8B5E04              <1> 		mov		ebx, [esi + ring_buff.wp]		; EBX  = wp;        // 書き込み位置
   275 00000EB9 89D9                <1> 		mov		ecx, ebx						; ECX  = EBX;
   276 00000EBB 41                  <1> 		inc		ecx								; ECX++;            // 次の書き込み位置
   277 00000EBC 83E10F              <1> 		and		ecx, RING_INDEX_MASK			; ECX &= 0x0F       // サイズの制限
   278                              <1> 												; 
   279 00000EBF 3B0E                <1> 		cmp		ecx, [esi + ring_buff.rp]		; if (ECX != rp)    // 読み込み位置と異なる
   280 00000EC1 740F                <1> 		je		.10E							; {
   281                              <1> 												; 
   282 00000EC3 8A450C              <1> 		mov		al, [ebp +12]					;   AL = データ;
   283                              <1> 												; 
   284 00000EC6 88441E08            <1> 		mov		[esi + ring_buff.item + ebx], al ;   BUFF[wp] = AL; // キーコードを保存
   285 00000ECA 894E04              <1> 		mov		[esi + ring_buff.wp], ecx		;   wp = ECX;       // 書き込み位置を保存
   286 00000ECD B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // 成功
   287                              <1> .10E:											; }
   288                              <1> 
   289                              <1> 		;---------------------------------------
   290                              <1> 		; 【レジスタの復帰】
   291                              <1> 		;---------------------------------------
   292 00000ED2 5E                  <1> 		pop		esi
   293 00000ED3 59                  <1> 		pop		ecx
   294 00000ED4 5B                  <1> 		pop		ebx
   295                              <1> 
   296                              <1> 		;---------------------------------------
   297                              <1> 		; 【スタックフレームの破棄】
   298                              <1> 		;---------------------------------------
   299 00000ED5 89EC                <1> 		mov		esp, ebp
   300 00000ED7 5D                  <1> 		pop		ebp
   301                              <1> 
   302 00000ED8 C3                  <1> 		ret
   303                              <1> 
   304                              <1> ;************************************************************************
   305                              <1> ;	リングバッファ内要素の表示
   306                              <1> ;========================================================================
   307                              <1> ;■書式		: void ring_show(col, row, buff);
   308                              <1> ;
   309                              <1> ;■引数
   310                              <1> ;	col		: 列
   311                              <1> ;	row		: 行
   312                              <1> ;	buff	: リングバッファ
   313                              <1> ;
   314                              <1> ;■戻り値	: 無し
   315                              <1> ;************************************************************************
   316                              <1> draw_key:
   317                              <1> 		;---------------------------------------
   318                              <1> 		; 【スタックフレームの構築】
   319                              <1> 		;---------------------------------------
   320                              <1> 												; ------|--------
   321                              <1> 												; EBP+16| リングバッファ
   322                              <1> 												; EBP+12| Y（行）
   323                              <1> 												; EBP+ 8| X（列）
   324                              <1> 												; ------|--------
   325 00000ED9 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   326 00000EDA 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   327                              <1> 												; ------|--------
   328                              <1> 
   329                              <1> 		;---------------------------------------
   330                              <1> 		; 【レジスタの保存】
   331                              <1> 		;---------------------------------------
   332 00000EDC 60                  <1> 		pusha
   333                              <1> 
   334                              <1> 		;---------------------------------------
   335                              <1> 		; 引数を取得
   336                              <1> 		;---------------------------------------
   337 00000EDD 8B5508              <1> 		mov		edx, [ebp + 8]					; EDX = X（列）;
   338 00000EE0 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）;
   339 00000EE3 8B7510              <1> 		mov		esi, [ebp +16]					; ESI = リングバッファ;
   340                              <1> 
   341                              <1> 		;---------------------------------------
   342                              <1> 		; リングバッファの情報を取得
   343                              <1> 		;---------------------------------------
   344 00000EE6 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;             // 読み込み位置
   345 00000EE8 8D7608              <1> 		lea		esi, [esi + ring_buff.item]		; ESI = &KEY_BUFF[EBX];
   346 00000EEB B910000000          <1> 		mov		ecx, RING_ITEM_SIZE				; ECX = RING_ITEM_SIZE; // 要素数
   347                              <1> 
   348                              <1> 		;---------------------------------------
   349                              <1> 		; 文字に変換しながら表示
   350                              <1> 		;---------------------------------------
   351                              <1> .10L:											; do
   352                              <1> 												; {
   353 00000EF0 4B                  <1> 		dec		ebx								;   EBX--; // 読み込み位置
   354 00000EF1 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= RING_INDEX_MASK;
   355 00000EF4 8A041E              <1> 		mov		al, [esi + ebx]					;   EAX  = KEY_BUFF[EBX];
   356                              <1> 												;   
   357 00000EF7 6A046A106A0268-     <1> 		cdecl	itoa, eax, .tmp, 2, 16, 0b0100	;   // キーコードを文字列に変換
   357 00000EFE [280F0000]50E8D9FB- <1>
   357 00000F06 FFFF6683C414        <1>
   358 00000F0C 68[280F0000]6A0257- <1> 		cdecl	draw_str, edx, edi, 0x02, .tmp	;   // 変換した文字列を表示
   358 00000F14 52E81FF9FFFF6683C4- <1>
   358 00000F1D 10                  <1>
   359                              <1> 												;   
   360 00000F1E 83C203              <1> 		add		edx, 3							;   // 表示位置を更新（3文字分）
   361                              <1> 												;   
   362 00000F21 E2CD                <1> 		loop	.10L							;   
   363                              <1> .10E:											; } while (ECX--);
   364                              <1> 
   365                              <1> 		;---------------------------------------
   366                              <1> 		; 【レジスタの復帰】
   367                              <1> 		;---------------------------------------
   368 00000F23 61                  <1> 		popa
   369                              <1> 
   370                              <1> 		;---------------------------------------
   371                              <1> 		; 【スタックフレームの破棄】
   372                              <1> 		;---------------------------------------
   373 00000F24 89EC                <1> 		mov		esp, ebp
   374 00000F26 5D                  <1> 		pop		ebp
   375                              <1> 
   376 00000F27 C3                  <1> 		ret
   377                              <1> 
   378 00000F28 2D2D2000            <1> .tmp	db "-- ", 0
   165                                  %include	"../modules/protect/timer.s"
   166                              <1> ;************************************************************************
   167                              <1> ;	タイマーの設定
   168                              <1> ;------------------------------------------------------------------------
   169                              <1> ;	タイマー（カウンタ0）割り込み許可
   170                              <1> ;========================================================================
   171                              <1> ;■書式		: void int_en_timer0(void);
   172                              <1> ;
   173                              <1> ;■引数		: 無し
   174                              <1> ;
   175                              <1> ;■戻り値	: 無し
   176                              <1> ;************************************************************************
   177                              <1> int_en_timer0:
   178                              <1> 		;---------------------------------------
   179                              <1> 		; 【レジスタの保存】
   180                              <1> 		;---------------------------------------
   181 00000F2C 50                  <1> 		push	eax
   182                              <1> 
   183                              <1> 		;---------------------------------------
   184                              <1> 		;	8254 Timer
   185                              <1> 		;	0x2e9c(11932)=10[ms] @ CLK=1,193,182[Hz]
   186                              <1> 		;---------------------------------------
   187                              <1> 		 outp	 0x43, 0b_00_11_010_0			; // カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    72 00000F2D B034                <2>  mov al, %2
    73 00000F2F E643                <2>  out %1, al
   188                              <1> 		 outp	 0x40, 0x9C						; // 下位バイト
    72 00000F31 B09C                <2>  mov al, %2
    73 00000F33 E640                <2>  out %1, al
   189                              <1> 		 outp	 0x40, 0x2E						; // 上位バイト
    72 00000F35 B02E                <2>  mov al, %2
    73 00000F37 E640                <2>  out %1, al
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 【レジスタの復帰】
   193                              <1> 		;---------------------------------------
   194 00000F39 58                  <1> 		pop		eax
   195                              <1> 
   196 00000F3A C3                  <1> 		ret
   197                              <1> 
   166                                  %include	"../modules/protect/draw_rotation_bar.s"
   167                              <1> ;************************************************************************
   168                              <1> ;	画面左下に、回転する棒を表示
   169                              <1> ;========================================================================
   170                              <1> ;■書式		: void draw_rotation_bar(void);
   171                              <1> ;
   172                              <1> ;■引数		: 無し
   173                              <1> ;
   174                              <1> ;■戻り値	: 無し
   175                              <1> ;************************************************************************
   176                              <1> draw_rotation_bar:
   177                              <1> 		;---------------------------------------
   178                              <1> 		; 【レジスタの保存】
   179                              <1> 		;---------------------------------------
   180 00000F3B 50                  <1> 		push	eax
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; タイマー割り込みカウンタを確認
   184                              <1> 		;---------------------------------------
   185 00000F3C A1[54050000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX  = タイマー割り込みカウンタ
   186 00000F41 C1E804              <1> 		shr		eax, 4							; EAX /= 4;    // 16で除算
   187 00000F44 3B05[6C0F0000]      <1> 		cmp		eax, [.index]					; if (EAX != 前回値)
   188 00000F4A 741E                <1> 		je		.10E							; {
   189                              <1> 												;   
   190 00000F4C A3[6C0F0000]        <1> 		mov		[.index], eax					;   前回値 = EAX;
   191 00000F51 83E003              <1> 		and		eax, 0x03						;   EAX &= 0x03; // 0～3に限定
   192                              <1> 												;   
   193 00000F54 8A80[700F0000]      <1> 		mov		al, [.table + eax]				;   AL = table[index];
   194 00000F5A 506A0F6A1D6A00E8AD- <1> 		cdecl	draw_char, 0, 29, 0x000F, eax	;   draw_char(); // 文字を表示
   194 00000F63 F7FFFF6683C410      <1>
   195                              <1> 												;   
   196                              <1> .10E:											; }
   197                              <1> 
   198                              <1> 		;---------------------------------------
   199                              <1> 		; 【レジスタの復帰】
   200                              <1> 		;---------------------------------------
   201 00000F6A 58                  <1> 		pop		eax
   202                              <1> 
   203 00000F6B C3                  <1> 		ret
   204                              <1> 
   205                              <1> ALIGN 4, db 0
   206 00000F6C 00000000            <1> .index:		dd 0								; 前回値
   207 00000F70 7C2F2D5C            <1> .table:		db	"|/-\"							; 表示キャラクタ
   208                              <1> 
   167                                  %include	"../modules/protect/call_gate.s"
   168                              <1> ;************************************************************************
   169                              <1> ;	コールゲート関数
   170                              <1> ;************************************************************************
   171                              <1> call_gate:
   172                              <1> 		;---------------------------------------
   173                              <1> 		; 【スタックフレームの構築】
   174                              <1> 		;---------------------------------------
   175                              <1> 												; ------|--------
   176                              <1> 												; EBP+12| X（列）
   177                              <1> 												; EBP+16| Y（行）
   178                              <1> 												; EBP+20| 色
   179                              <1> 												; EBP+24| 文字
   180                              <1> 												; ---------------
   181                              <1> 												; EBP+ 8| CS（コードセグメント）
   182 00000F74 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   183 00000F75 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   184                              <1> 												; ---------------
   185                              <1> 		;---------------------------------------
   186                              <1> 		; 【レジスタの保存】
   187                              <1> 		;---------------------------------------
   188 00000F77 60                  <1> 		pusha
   189 00000F78 1E                  <1> 		push	ds
   190 00000F79 06                  <1> 		push	es
   191                              <1> 
   192                              <1> 		;---------------------------------------
   193                              <1> 		; データ用セグメントの設定
   194                              <1> 		;---------------------------------------
   195 00000F7A 66B81000            <1> 		mov		ax, 0x0010						; 
   196 00000F7E 8ED8                <1> 		mov		ds, ax							; 
   197 00000F80 8EC0                <1> 		mov		es, ax							; 
   198                              <1> 
   199                              <1> 		;---------------------------------------
   200                              <1> 		; 文字を表示
   201                              <1> 		;---------------------------------------
   202 00000F82 8B450C              <1> 		mov		eax, dword [ebp +12]			; EAX = X（列）;
   203 00000F85 8B5D10              <1> 		mov		ebx, dword [ebp +16]			; EBX = Y（行）;
   204 00000F88 8B4D14              <1> 		mov		ecx, dword [ebp +20]			; ECX = 色;
   205 00000F8B 8B5518              <1> 		mov		edx, dword [ebp +24]			; EDX = 文字;
   206 00000F8E 52515350E8A2F8FFFF- <1> 		cdecl	draw_str, eax, ebx , ecx, edx	; draw_str();
   206 00000F97 6683C410            <1>
   207                              <1> 
   208                              <1> 		;---------------------------------------
   209                              <1> 		; 【レジスタの復帰】
   210                              <1> 		;---------------------------------------
   211 00000F9B 07                  <1> 		pop		es								; 
   212 00000F9C 1F                  <1> 		pop		ds								; 
   213 00000F9D 61                  <1> 		popa									; 
   214                              <1> 
   215                              <1> 		;---------------------------------------
   216                              <1> 		; 【スタックフレームの破棄】
   217                              <1> 		;---------------------------------------
   218 00000F9E 89EC                <1> 		mov		esp, ebp
   219 00000FA0 5D                  <1> 		pop		ebp
   220                              <1> 
   221 00000FA1 CA1000              <1> 		retf	4 * 4
   222                              <1> 
   168                                  %include	"../modules/protect/trap_gate.s"
   169                              <1> ;************************************************************************
   170                              <1> ;	システムコール：1文字出力
   171                              <1> ;************************************************************************
   172                              <1> trap_gate_81:
   173                              <1> 		;---------------------------------------
   174                              <1> 		; 1文字出力
   175                              <1> 		;---------------------------------------
   176 00000FA4 50535251E866F7FFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	; // 1文字出力
   176 00000FAD 6683C410            <1>
   177                              <1> 
   178 00000FB1 CF                  <1> 		iret
   179                              <1> 
   180                              <1> ;************************************************************************
   181                              <1> ;	システムコール：点の描画
   182                              <1> ;************************************************************************
   183                              <1> trap_gate_82:
   184                              <1> 		;---------------------------------------
   185                              <1> 		; 点の描画
   186                              <1> 		;---------------------------------------
   187 00000FB2 535251E837F9FFFF66- <1> 		cdecl	draw_pixel, ecx, edx, ebx		; // 点の描画
   187 00000FBB 83C40C              <1>
   188                              <1> 
   189 00000FBE CF                  <1> 		iret
   190                              <1> 
   169                                  %include	"../modules/protect/test_and_set.s"
   170                              <1> ;************************************************************************
   171                              <1> ;	RTCから時刻データを取得する
   172                              <1> ;========================================================================
   173                              <1> ;■書式		: void test_and_set(local);
   174                              <1> ;
   175                              <1> ;■引数
   176                              <1> ;	local	: ローカル変数のアドレス
   177                              <1> ;
   178                              <1> ;■戻り値	: 無し
   179                              <1> ;************************************************************************
   180                              <1> test_and_set:
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 【スタックフレームの構築】
   183                              <1> 		;---------------------------------------
   184                              <1> 												; EBP+ 8| ローカル変数のアドレス
   185                              <1> 												; ------+----------------
   186 00000FBF 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   187 00000FC0 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   188                              <1> 												; ------+----------------
   189                              <1> 
   190                              <1> 		;---------------------------------------
   191                              <1> 		; 【レジスタの保存】
   192                              <1> 		;---------------------------------------
   193 00000FC2 50                  <1> 		push	eax
   194 00000FC3 53                  <1> 		push	ebx
   195                              <1> 
   196                              <1> 		;---------------------------------------
   197                              <1> 		; テストアンドセット
   198                              <1> 		;---------------------------------------
   199 00000FC4 B800000000          <1> 		mov		eax, 0							; local  = 0;
   200 00000FC9 8B5D08              <1> 		mov		ebx, [ebp + 8]					; global = アドレス;
   201                              <1> 
   202                              <1> .10L:											; for ( ; ; )
   203                              <1> 												; {
   204 00000FCC F00FAB03            <1> 		lock bts [ebx], eax						;   CF = TEST_AND_SET(IN_USE, 1);
   205 00000FD0 7307                <1> 		jnc		.10E							;   if (0 == CF)
   206                              <1> 												;     break;
   207                              <1> 												;   
   208                              <1> .12L:											;   for ( ; ; )
   209                              <1> 												;   {
   210 00000FD2 0FA303              <1> 		bt		[ebx], eax						;     CF = TEST(IN_USE, 1);
   211 00000FD5 72FB                <1> 		jc		.12L							;     if (0 == CF)
   212                              <1> 												;       break;
   213 00000FD7 EBF3                <1> 		jmp		.10L							;   }
   214                              <1> .10E:											; }
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; 【レジスタの復帰】
   218                              <1> 		;---------------------------------------
   219 00000FD9 5B                  <1> 		pop		ebx
   220 00000FDA 58                  <1> 		pop		eax
   221                              <1> 
   222                              <1> 		;---------------------------------------
   223                              <1> 		; 【スタックフレームの破棄】
   224                              <1> 		;---------------------------------------
   225 00000FDB 89EC                <1> 		mov		esp, ebp
   226 00000FDD 5D                  <1> 		pop		ebp
   227                              <1> 
   228 00000FDE C3                  <1> 		ret
   229                              <1> 
   170                                  %include	"../modules/protect/int_nm.s"
   171                              <1> ;************************************************************************
   172                              <1> ;	割り込み処理：#NM(DNA:デバイス使用不可)
   173                              <1> ;************************************************************************
   174                              <1> int_nm:
   175                              <1> 		;---------------------------------------
   176                              <1> 		; 【レジスタの保存】
   177                              <1> 		;---------------------------------------
   178 00000FDF 60                  <1> 		pusha
   179 00000FE0 1E                  <1> 		push	ds
   180 00000FE1 06                  <1> 		push	es
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; カーネル用セレクタを設定
   184                              <1> 		;---------------------------------------
   185 00000FE2 66B81000            <1> 		mov		ax, DS_KERNEL					;
   186 00000FE6 8ED8                <1> 		mov		ds, ax							;
   187 00000FE8 8EC0                <1> 		mov		es, ax							;
   188                              <1> 
   189                              <1> 		;---------------------------------------
   190                              <1> 		; タスクスイッチフラグをクリア
   191                              <1> 		;---------------------------------------
   192 00000FEA 0F06                <1> 		clts									; CR0.TS = 0;
   193                              <1> 
   194                              <1> 		;---------------------------------------
   195                              <1> 		; 前回/今回FPUを使用するタスク
   196                              <1> 		;---------------------------------------
   197 00000FEC 8B3D[38100000]      <1> 		mov		edi, [.last_tss]				; EDI = 前回FPUを使用したタスクのTSS
   198 00000FF2 0F00CE              <1> 		str		esi								; ESI = 今回FPUを使用したタスクのTSS
   199 00000FF5 83E6F8              <1> 		and		esi, ~0x0007					; // 特権レベルをマスク
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; FPUの初回利用をチェック
   203                              <1> 		;---------------------------------------
   204 00000FF8 83FF00              <1> 		cmp		edi, 0							; if (0 != EDI)     // 前回使用したタスク
   205 00000FFB 7420                <1> 		je		.10F							; {
   206                              <1> 												;   
   207 00000FFD 39FE                <1> 		cmp		esi, edi						;   if (ESI != EDI) // 異なるタスク
   208 00000FFF 741A                <1> 		je		.12E							;   {
   209                              <1> 												;     
   210 00001001 FA                  <1> 		cli										;     // 割り込み禁止
   211                              <1> 
   212                              <1> 		;---------------------------------------
   213                              <1> 		; 前回のFPUコンテキストを保存
   214                              <1> 		;---------------------------------------
   215 00001002 89FB                <1> 		mov		ebx, edi						;     // 前回のタスク
   216 00001004 E833000000          <1> 		call	get_tss_base					;     // TSSアドレスを取得
   217 00001009 E841000000          <1> 		call	save_fpu_context				;     // FPUのコンテキストを保存
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; 今回のFPUコンテキストを復帰
   221                              <1> 		;---------------------------------------
   222 0000100E 89F3                <1> 		mov		ebx, esi						;     // 今回のタスク
   223 00001010 E827000000          <1> 		call	get_tss_base					;     // TSSアドレスを取得
   224 00001015 E843000000          <1> 		call	load_fpu_context				;     // FPUのコンテキストを復帰
   225                              <1> 												;     
   226 0000101A FB                  <1> 		sti										;     // 割り込み許可
   227                              <1> .12E:											;   }
   228 0000101B EB0E                <1> 		jmp		.10E							; }
   229                              <1> .10F:											; else
   230                              <1> 												; {
   231                              <1> 												;   
   232 0000101D FA                  <1> 		cli										;   // 割り込み禁止
   233                              <1> 
   234                              <1> 		;---------------------------------------
   235                              <1> 		; 今回のFPUコンテキストを復帰
   236                              <1> 		;---------------------------------------
   237 0000101E 89F3                <1> 		mov		ebx, esi						;   // 今回のタスク
   238 00001020 E817000000          <1> 		call	get_tss_base					;   // 現在のタスクのTSSアドレスを取得
   239 00001025 E833000000          <1> 		call	load_fpu_context				;   // FPUのコンテキストを復帰
   240                              <1> 												;   
   241 0000102A FB                  <1> 		sti										;   // 割り込み許可
   242                              <1> .10E:											; }
   243                              <1> 												; 
   244 0000102B 8935[38100000]      <1> 		mov		[.last_tss], esi				; // FPUを使用したタスクを保存
   245                              <1> 
   246                              <1> 		;---------------------------------------
   247                              <1> 		; 【レジスタの復帰】
   248                              <1> 		;---------------------------------------
   249 00001031 07                  <1> 		pop		es
   250 00001032 1F                  <1> 		pop		ds
   251 00001033 61                  <1> 		popa
   252                              <1> 
   253 00001034 CF                  <1> 		iret
   254                              <1> 
   255 00001035 00<rep 3h>          <1> ALIGN 4, db 0
   256 00001038 00000000            <1> .last_tss:	dd		0
   257                              <1> 
   258                              <1> ;************************************************************************
   259                              <1> ; GDTのセレクタのベースアドレスを取得
   260                              <1> ;------------------------------------------------------------------[IN]--
   261                              <1> ;	EBX : セレクタ
   262                              <1> ;-----------------------------------------------------------------[OUT]--
   263                              <1> ;	EAX : ベースアドレス
   264                              <1> ;************************************************************************
   265                              <1> get_tss_base:
   266 0000103C 8B83[92040000]      <1> 		mov		eax, [GDT + ebx + 2]			; EAX   = TSS[23: 0];
   267 00001042 C1E008              <1> 		shl		eax, 8							; EAX <<= 8;
   268 00001045 8A83[97040000]      <1>         mov     al,  [GDT + ebx + 7]            ;  AL   = TSS[31:24];
   269 0000104B C1C808              <1> 		ror		eax, 8							; EAX >>= 8;
   270                              <1> 
   271 0000104E C3                  <1> 		ret
   272                              <1> 
   273                              <1> ;************************************************************************
   274                              <1> ; FPUのコンテキストを保存
   275                              <1> ;------------------------------------------------------------------[IN]--
   276                              <1> ;	EAX : TSSの先頭アドレス
   277                              <1> ;************************************************************************
   278                              <1> save_fpu_context:
   279 0000104F DD7068              <1> 		fnsave	[eax + 104]						; // FPUコンテキストを保存
   280 00001052 C780D4000000010000- <1> 		mov		[eax + 104 + 108], dword 1		; saved = 1;
   280 0000105B 00                  <1>
   281                              <1> 
   282 0000105C C3                  <1> 		ret
   283                              <1> 
   284                              <1> ;************************************************************************
   285                              <1> ; FPUのコンテキストを復帰
   286                              <1> ;------------------------------------------------------------------[IN]--
   287                              <1> ;	EAX : TSSの先頭アドレス
   288                              <1> ;************************************************************************
   289                              <1> load_fpu_context:
   290 0000105D 83B8D400000000      <1> 		cmp		[eax + 104 + 108], dword 0		; if (0 == saved)
   291 00001064 7504                <1> 		jne		.10F							; {
   292 00001066 DBE3                <1> 		fninit									;    // FPUの初期化
   293 00001068 EB03                <1> 		jmp		.10E							; }
   294                              <1> .10F:											; else
   295                              <1> 												; {
   296 0000106A DD6068              <1> 		frstor	[eax + 104]						;   // FPUコンテキストを復帰
   297                              <1> .10E:											; }
   298 0000106D C3                  <1> 		ret
   299                              <1> 
   171                                  %include	"../modules/protect/wait_tick.s"
   172                              <1> ;************************************************************************
   173                              <1> ;	ウェイト
   174                              <1> ;------------------------------------------------------------------------
   175                              <1> ;	指定された回数、システム割り込みが発生するまで待つ
   176                              <1> ;========================================================================
   177                              <1> ;■書式		: void wait_tick(tick);
   178                              <1> ;
   179                              <1> ;■引数
   180                              <1> ;	tick	: システム割り込み回数
   181                              <1> ;
   182                              <1> ;■戻り値	: 無し
   183                              <1> ;************************************************************************
   184                              <1> wait_tick:
   185                              <1> 		;---------------------------------------
   186                              <1> 		; 【スタックフレームの構築】
   187                              <1> 		;---------------------------------------
   188                              <1> 												; ---------------
   189                              <1> 												; EBP+ 8| ウェイト
   190                              <1> 												; ---------------
   191 0000106E 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   192 0000106F 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   193                              <1> 												; ------|--------
   194                              <1> 
   195                              <1> 		;---------------------------------------
   196                              <1> 		; 【レジスタの保存】
   197                              <1> 		;---------------------------------------
   198 00001071 50                  <1> 		push	eax
   199 00001072 51                  <1> 		push	ecx
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; ウェイト
   203                              <1> 		;---------------------------------------
   204 00001073 8B4D08              <1> 		mov		ecx, [ebp +  8]					; ECX = ウェイト回数
   205 00001076 A1[54050000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX = TIMER;
   206                              <1> 												; do
   207                              <1> 												; {
   208 0000107B 3905[54050000]      <1> .10L:	cmp		[TIMER_COUNT], eax				;   while (TIMER != EAX)
   209 00001081 74F8                <1> 		je		.10L							;     ;
   210 00001083 40                  <1> 		inc		eax								;   EAX++;
   211 00001084 E2F5                <1> 		loop	.10L							; } while (--ECX);
   212                              <1> 
   213                              <1> 		;---------------------------------------
   214                              <1> 		; レジスタの復帰
   215                              <1> 		;---------------------------------------
   216 00001086 59                  <1> 		pop		ecx
   217 00001087 58                  <1> 		pop		eax
   218                              <1> 
   219                              <1> 		;---------------------------------------
   220                              <1> 		; スタックフレームの破棄
   221                              <1> 		;---------------------------------------
   222 00001088 89EC                <1> 		mov		esp, ebp
   223 0000108A 5D                  <1> 		pop		ebp
   224                              <1> 
   225 0000108B C3                  <1> 		ret
   226                              <1> 
   172                                  
   173                                  ;************************************************************************
   174                                  ;	パディング
   175                                  ;************************************************************************
   176 0000108C 00<rep F74h>            		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
   177                                  
