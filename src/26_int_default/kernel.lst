     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  ;************************************************************************
     8                                  ;	マクロ
     9                                  ;************************************************************************
    10                                  %include	"../include/define.s"
    11                              <1> ;************************************************************************
    12                              <1> ;	メモリイメージ
    13                              <1> ;************************************************************************
    14                              <1> 
    15                              <1> 		;---------------------------------------
    16                              <1> 		;           |            | 
    17                              <1> 		;           |____________| 
    18                              <1> 		; 0000_7A00 |            | ( 512) スタック
    19                              <1> 		;           |____________| 
    20                              <1> 		; 0000_7C00 |            | (  8K) ブート
    21                              <1> 		;           =            = 
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    24                              <1> 		;           =            = 
    25                              <1> 		;           |____________| 
    26                              <1> 		; 0000_BC00 |////////////| 
    27                              <1> 		;           =            = 
    28                              <1> 		;           |____________| 
    29                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    32                              <1> 		;           |____________| 
    33                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    34                              <1> 		;           |            | 
    35                              <1> 		;           =            = 
    36                              <1> 		;           |____________| 
    37                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    38                              <1> 		;           |            | （各タスク1K）
    39                              <1> 		;           =            = 
    40                              <1> 		;           |____________| 
    41                              <1> 		; 0010_5000 |            | Dir
    42                              <1> 		;      6000 |____________| Page
    43                              <1> 		; 0010_7000 |            | Dir
    44                              <1> 		;      8000 |____________| Page
    45                              <1> 		; 0010_9000 |////////////| 
    46                              <1> 		;           |            | 
    47                              <1> 
    48                              <1> 
    49                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    50                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    51                              <1> 
    52                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    53                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    54                              <1> 
    55                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    56                              <1> 
    57                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    58                              <1> 
    59                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    60                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    61                              <1> 
    62                              <1> 		E820_RECORD_SIZE	equ		20
    63                              <1> 
    64                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    11                                  %include	"../include/macro.s"
    12                              <1> ;************************************************************************
    13                              <1> ; 関数呼び出し用マクロ
    14                              <1> ;
    15                              <1> ; 使い方：
    16                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    17                              <1> ;
    18                              <1> ;************************************************************************
    19                              <1> 
    20                              <1> %macro cdecl 1-*.nolist
    21                              <1> 
    22                              <1>     %rep %0 - 1
    23                              <1>         push    %{-1:-1}
    24                              <1>         %rotate -1
    25                              <1>     %endrep
    26                              <1>     %rotate -1
    27                              <1> 
    28                              <1>         call    %1
    29                              <1> 
    30                              <1>     %if 1 < %0
    31                              <1>         add     sp,(__BITS__ >> 3) * (%0 - 1)
    32                              <1>     %endif
    33                              <1> 
    34                              <1> %endmacro
    35                              <1> 
    36                              <1> ;************************************************************************
    37                              <1> ;	構造体
    38                              <1> ;************************************************************************
    39                              <1> 
    40                              <1> ;-----------------------------------------------
    41                              <1> ;	ドライブパラメータ
    42                              <1> ;-----------------------------------------------
    43                              <1> struc drive
    44 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
    45 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
    46 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
    47 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
    48                              <1> endstruc
    12                                  
    13                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    14                                  
    15                                  [BITS 32]
    16                                  ;************************************************************************
    17                                  ;	エントリポイント
    18                                  ;************************************************************************
    19                                  kernel:
    20                                  		;---------------------------------------
    21                                  		; フォントアドレスを取得
    22                                  		;---------------------------------------
    23 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    24 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    25 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    26 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    27 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    28 00000011 A3[90000000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    29                                  
    30                                  		;---------------------------------------
    31                                  		; フォントの一覧表示
    32                                  		;---------------------------------------
    33 00000016 6A0D6A3FE8F0010000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
    33 0000001F 6683C408           
    34 00000023 6A046A3FE871020000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
    34 0000002C 6683C408           
    35                                  
    36                                  		;---------------------------------------
    37                                  		; 文字列の表示
    38                                  		;---------------------------------------
    39 00000030 68[7E000000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
    39 00000038 00006A0E6A19E81102-
    39 00000041 00006683C410       
    40                                  
    41                                  		;---------------------------------------
    42                                  		; 割り込み処理の呼び出し
    43                                  		;---------------------------------------
    44 00000047 6844332211              		push	0x11223344						; （ダミー）
    45 0000004C 9C                      		pushf									; EFLAGSの保存
    46 0000004D 9A[53060000]0800        		call	0x0008:int_default				; デフォルト割り込み処理の呼び出し
    47                                  
    48                                  		;---------------------------------------
    49                                  		; 時刻の表示
    50                                  		;---------------------------------------
    51                                  .10L:											; do
    52                                  												; {
    53 00000054 68[94000000]E81D05-     		cdecl	rtc_get_time, RTC_TIME			;   EAX = get_time(&RTC_TIME);
    53 0000005C 00006683C404       
    54 00000062 FF35[94000000]6800-     		cdecl	draw_time, 72, 0, 0x0700,									dword [RTC_TIME]
    54 0000006A 0700006A006A48E846-
    54 00000073 0500006683C410     
    56 0000007A EBD8                    		jmp		.10L							; } while (1);
    57                                  
    58                                  		;---------------------------------------
    59                                  		; 処理の終了
    60                                  		;---------------------------------------
    61 0000007C EBFE                    		jmp		$								; while (1) ; // 無限ループ
    62                                  
    63 0000007E 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
    63 00000087 65726E656C212000   
    64                                  
    65 0000008F 00                      ALIGN 4, db 0
    66 00000090 00000000                FONT_ADR:	dd	0
    67 00000094 00000000                RTC_TIME:	dd	0
    68                                  
    69                                  ;************************************************************************
    70                                  ;	モジュール
    71                                  ;************************************************************************
    72                                  %include	"../modules/protect/vga.s"
    73                              <1> ;************************************************************************
    74                              <1> ;	読み込みプレーンの選択
    75                              <1> ;========================================================================
    76                              <1> ;■書式		: void vga_set_read_plane(plane);
    77                              <1> ;
    78                              <1> ;■引数
    79                              <1> ;	plane	: 読み込みプレーン
    80                              <1> ;
    81                              <1> ;■戻り値	: 無し
    82                              <1> ;************************************************************************
    83                              <1> vga_set_read_plane:
    84                              <1> 		;---------------------------------------
    85                              <1> 		; 【スタックフレームの構築】
    86                              <1> 		;---------------------------------------
    87                              <1> 												; EBP+ 8| プレーン（インデックス）
    88                              <1> 												; ------+----------------
    89 00000098 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    90 00000099 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    91                              <1> 												; ------+----------------
    92                              <1> 
    93                              <1> 		;---------------------------------------
    94                              <1> 		; 【レジスタの保存】
    95                              <1> 		;---------------------------------------
    96 0000009B 50                  <1> 		push	eax
    97 0000009C 52                  <1> 		push	edx
    98                              <1> 
    99                              <1> 		;---------------------------------------
   100                              <1> 		; 読み込みプレーンの選択
   101                              <1> 		;---------------------------------------
   102 0000009D 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
   103 000000A0 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
   104 000000A3 B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
   105 000000A5 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
   106 000000A9 66EF                <1> 		out		dx, ax							; // ポート出力
   107                              <1> 
   108                              <1> 		;---------------------------------------
   109                              <1> 		; 【レジスタの復帰】
   110                              <1> 		;---------------------------------------
   111 000000AB 5A                  <1> 		pop		edx
   112 000000AC 58                  <1> 		pop		eax
   113                              <1> 
   114                              <1> 		;---------------------------------------
   115                              <1> 		; 【スタックフレームの破棄】
   116                              <1> 		;---------------------------------------
   117 000000AD 89EC                <1> 		mov		esp, ebp
   118 000000AF 5D                  <1> 		pop		ebp
   119                              <1> 
   120 000000B0 C3                  <1> 		ret
   121                              <1> 
   122                              <1> 
   123                              <1> ;************************************************************************
   124                              <1> ;	書き込みプレーンを選択
   125                              <1> ;========================================================================
   126                              <1> ;■書式		: void vga_set_write_plane(plane);
   127                              <1> ;
   128                              <1> ;■引数
   129                              <1> ;	plane	: 書き込みプレーン
   130                              <1> ;
   131                              <1> ;■戻り値	: 無し
   132                              <1> ;************************************************************************
   133                              <1> vga_set_write_plane:
   134                              <1> 		;---------------------------------------
   135                              <1> 		; 【スタックフレームの構築】
   136                              <1> 		;---------------------------------------
   137                              <1> 												; EBP+ 8| プレーン（ビット指定）
   138                              <1> 												; ------+----------------
   139 000000B1 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   140 000000B2 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   141                              <1> 												; ------+----------------
   142                              <1> 
   143                              <1> 		;---------------------------------------
   144                              <1> 		; 【レジスタの保存】
   145                              <1> 		;---------------------------------------
   146 000000B4 50                  <1> 		push	eax
   147 000000B5 52                  <1> 		push	edx
   148                              <1> 
   149                              <1> 		;---------------------------------------
   150                              <1> 		; 書き込みプレーンの選択
   151                              <1> 		;---------------------------------------
   152 000000B6 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
   153 000000B9 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
   154 000000BC B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
   155 000000BE 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
   156 000000C2 66EF                <1> 		out		dx, ax							; // ポート出力
   157                              <1> 
   158                              <1> 		;---------------------------------------
   159                              <1> 		; 【レジスタの復帰】
   160                              <1> 		;---------------------------------------
   161 000000C4 5A                  <1> 		pop		edx
   162 000000C5 58                  <1> 		pop		eax
   163                              <1> 
   164                              <1> 		;---------------------------------------
   165                              <1> 		; 【スタックフレームの破棄】
   166                              <1> 		;---------------------------------------
   167 000000C6 89EC                <1> 		mov		esp, ebp
   168 000000C8 5D                  <1> 		pop		ebp
   169                              <1> 
   170 000000C9 C3                  <1> 		ret
   171                              <1> 
   172                              <1> 
   173                              <1> ;************************************************************************
   174                              <1> ;	フォントの書き込み
   175                              <1> ;========================================================================
   176                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   177                              <1> ;
   178                              <1> ;■引数
   179                              <1> ;	font	: FONTアドレス
   180                              <1> ;	vram	: VRAMアドレス
   181                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   182                              <1> ;	color	: 描画色
   183                              <1> ;
   184                              <1> ;■戻り値	: 無し
   185                              <1> ;************************************************************************
   186                              <1> vram_font_copy:
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 【スタックフレームの構築】
   189                              <1> 		;---------------------------------------
   190                              <1> 												; EBP+20| 色（背景/前景色）
   191                              <1> 												; EBP+16| プレーン（ビット指定）
   192                              <1> 												; EBP+12| VRAMアドレス
   193                              <1> 												; EBP+ 8| FONTアドレス
   194                              <1> 												; ------+----------------
   195 000000CA 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   196 000000CB 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   197                              <1> 												; ------+----------------
   198                              <1> 
   199                              <1> 		;---------------------------------------
   200                              <1> 		; 【レジスタの保存】
   201                              <1> 		;---------------------------------------
   202 000000CD 50                  <1> 		push	eax
   203 000000CE 53                  <1> 		push	ebx
   204 000000CF 51                  <1> 		push	ecx
   205 000000D0 52                  <1> 		push	edx
   206 000000D1 56                  <1> 		push	esi
   207 000000D2 57                  <1> 		push	edi
   208                              <1> 
   209                              <1> 		;---------------------------------------
   210                              <1> 		; 【処理の開始】
   211                              <1> 		;---------------------------------------
   212 000000D3 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   213 000000D6 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   214 000000D9 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   215 000000DD 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   216                              <1> 
   217 000000E1 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   218 000000E3 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   219 000000E6 FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   220                              <1> 
   221 000000E8 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   222 000000EA 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   223 000000ED FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   224                              <1> 
   225                              <1> 		;---------------------------------------
   226                              <1> 		; 16ドットフォントのコピー
   227                              <1> 		;---------------------------------------
   228 000000EF FC                  <1> 		cld										; DF  = 0; // アドレス加算
   229                              <1> 
   230 000000F0 B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   231                              <1> .10L:											; do
   232                              <1> 												; {
   233                              <1> 		;---------------------------------------
   234                              <1> 		; フォントマスクの作成
   235                              <1> 		;---------------------------------------
   236 000000F5 AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   237 000000F6 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   238 000000F8 F6D4                <1> 		not		ah								;   
   239                              <1> 
   240                              <1> 		;---------------------------------------
   241                              <1> 		; 前景色
   242                              <1> 		;---------------------------------------
   243 000000FA 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   244                              <1> 
   245                              <1> 		;---------------------------------------
   246                              <1> 		; 背景色
   247                              <1> 		;---------------------------------------
   248 000000FC F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   249 00000102 7404                <1> 		jz		.11F							;   {
   250 00000104 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   251 00000106 EB02                <1> 		jmp		.11E							;   }
   252                              <1> .11F:											;   else
   253                              <1> 												;   {
   254 00000108 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   255                              <1> .11E:											;   }
   256                              <1> 
   257                              <1> 		;---------------------------------------
   258                              <1> 		; 前景色と背景色を合成
   259                              <1> 		;---------------------------------------
   260 0000010A 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   261                              <1> 
   262                              <1> 		;---------------------------------------
   263                              <1> 		; 新しい値を出力
   264                              <1> 		;---------------------------------------
   265 0000010C 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   266                              <1> 
   267 0000010E 83C750              <1> 		add		edi, 80							;   EDI += 80;
   268 00000111 E2E2                <1> 		loop	.10L							; } while (--ECX);
   269                              <1> .10E:											; 
   270                              <1> 
   271                              <1> 		;---------------------------------------
   272                              <1> 		; 【レジスタの復帰】
   273                              <1> 		;---------------------------------------
   274 00000113 5F                  <1> 		pop		edi
   275 00000114 5E                  <1> 		pop		esi
   276 00000115 5A                  <1> 		pop		edx
   277 00000116 59                  <1> 		pop		ecx
   278 00000117 5B                  <1> 		pop		ebx
   279 00000118 58                  <1> 		pop		eax
   280                              <1> 
   281                              <1> 		;---------------------------------------
   282                              <1> 		; 【スタックフレームの破棄】
   283                              <1> 		;---------------------------------------
   284 00000119 89EC                <1> 		mov		esp, ebp
   285 0000011B 5D                  <1> 		pop		ebp
   286                              <1> 
   287 0000011C C3                  <1> 		ret
   288                              <1> 
   289                              <1> 
   290                              <1> ;************************************************************************
   291                              <1> ;	ビットパターンの書き込み
   292                              <1> ;========================================================================
   293                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   294                              <1> ;
   295                              <1> ;■引数
   296                              <1> ;	bit		: 出力ビットパターン
   297                              <1> ;	vram	: VRAMアドレス
   298                              <1> ;	flag	: 1:セット, 0:クリア
   299                              <1> ;
   300                              <1> ;■戻り値	: 無し
   301                              <1> ;************************************************************************
   302                              <1> vram_bit_copy:
   303                              <1> 		;---------------------------------------
   304                              <1> 		; 【スタックフレームの構築】
   305                              <1> 		;---------------------------------------
   306                              <1> 												; EBP+20| 色（背景/前景色）
   307                              <1> 												; EBP+16| プレーン（ビット指定）
   308                              <1> 												; EBP+12| VRAMアドレス
   309                              <1> 												; EBP+ 8| 出力ビットパターン
   310                              <1> 												; ------+----------------
   311 0000011D 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   312 0000011E 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   313                              <1> 												; ------+----------------
   314                              <1> 
   315                              <1> 		;---------------------------------------
   316                              <1> 		; 【レジスタの保存】
   317                              <1> 		;---------------------------------------
   318 00000120 50                  <1> 		push	eax
   319 00000121 53                  <1> 		push	ebx
   320 00000122 57                  <1> 		push	edi
   321                              <1> 
   322                              <1> 		;---------------------------------------
   323                              <1> 		; 【処理の開始】
   324                              <1> 		;---------------------------------------
   325 00000123 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   326 00000126 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   327 0000012A 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   328                              <1> 
   329 0000012E 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   330 00000130 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   331 00000133 FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   332                              <1> 
   333                              <1> 		;---------------------------------------
   334                              <1> 		; マスクデータの作成
   335                              <1> 		;---------------------------------------
   336 00000135 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   337 00000138 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   338 0000013A F6D4                <1> 		not		ah								; 
   339                              <1> 
   340                              <1> 		;---------------------------------------
   341                              <1> 		; 現在値の出力を取得
   342                              <1> 		;---------------------------------------
   343 0000013C 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   344 0000013E 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   345 00000140 08E0                <1> 		or		al, ah							; AL |= AH;
   346                              <1> 
   347                              <1> 		;---------------------------------------
   348                              <1> 		; 新しい値を出力
   349                              <1> 		;---------------------------------------
   350 00000142 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   351                              <1> 
   352                              <1> 		;---------------------------------------
   353                              <1> 		; 【レジスタの復帰】
   354                              <1> 		;---------------------------------------
   355 00000144 5F                  <1> 		pop		edi
   356 00000145 5B                  <1> 		pop		ebx
   357 00000146 58                  <1> 		pop		eax
   358                              <1> 
   359                              <1> 		;---------------------------------------
   360                              <1> 		; 【スタックフレームの破棄】
   361                              <1> 		;---------------------------------------
   362 00000147 89EC                <1> 		mov		esp, ebp
   363 00000149 5D                  <1> 		pop		ebp
   364                              <1> 
   365 0000014A C3                  <1> 		ret
    73                                  %include	"../modules/protect/draw_char.s"
    74                              <1> ;************************************************************************
    75                              <1> ;	文字の表示
    76                              <1> ;------------------------------------------------------------------------
    77                              <1> ;	グラフィックスモードでテキストを表示
    78                              <1> ;========================================================================
    79                              <1> ;■書式		: void draw_char(col, row, color, ch);
    80                              <1> ;
    81                              <1> ;■引数
    82                              <1> ;	col		: 列（0～79）
    83                              <1> ;	row		: 行（0～29）
    84                              <1> ;	color	: 描画色
    85                              <1> ;	ch		: 文字
    86                              <1> ;
    87                              <1> ;■戻り値	: 無し
    88                              <1> ;************************************************************************
    89                              <1> draw_char:
    90                              <1> 		;---------------------------------------
    91                              <1> 		; 【スタックフレームの構築】
    92                              <1> 		;---------------------------------------
    93                              <1> 												; ------|--------
    94                              <1> 												; EBP+20| 文字
    95                              <1> 												; EBP+16| 色
    96                              <1> 												; EBP+12| Y（行）
    97                              <1> 												; EBP+ 8| X（列）
    98                              <1> 												; ------+----------------
    99 0000014B 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   100 0000014C 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   101                              <1> 												; ------+----------------
   102                              <1> 
   103                              <1> 		;---------------------------------------
   104                              <1> 		; 【レジスタの保存】
   105                              <1> 		;---------------------------------------
   106 0000014E 50                  <1> 		push	eax
   107 0000014F 53                  <1> 		push	ebx
   108 00000150 51                  <1> 		push	ecx
   109 00000151 52                  <1> 		push	edx
   110 00000152 56                  <1> 		push	esi
   111 00000153 57                  <1> 		push	edi
   112                              <1> 
   113                              <1> 		;---------------------------------------
   114                              <1> 		; テストアンドセット
   115                              <1> 		;---------------------------------------
   116                              <1> %ifdef	USE_TEST_AND_SET
   117                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   118                              <1> %endif
   119                              <1> 
   120                              <1> 		;---------------------------------------
   121                              <1> 		; コピー元フォントアドレスを設定
   122                              <1> 		;---------------------------------------
   123 00000154 0FB67514            <1> 		movzx	esi, byte [ebp +20]				; CL  = 文字コード;
   124 00000158 C1E604              <1> 		shl		esi, 4							; CL *= 16; // 1文字16バイト
   125 0000015B 0335[90000000]      <1> 		add		esi, [FONT_ADR]					; ESI = フォントアドレス;
   126                              <1> 
   127                              <1> 		;---------------------------------------
   128                              <1> 		; コピー先アドレスを取得
   129                              <1> 		; Adr = 0xA0000 + (640 / 8 * 16) * y + x
   130                              <1> 		;---------------------------------------
   131 00000161 8B7D0C              <1> 		mov		edi, [ebp +12]					; Y（行）
   132 00000164 C1E708              <1> 		shl		edi, 8							; EDI = Y * 256;
   133 00000167 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA0000]	; EDI = Y *   4 + Y;
   134 0000016E 037D08              <1> 		add		edi, [ebp + 8]					; X（列）
   135                              <1> 
   136                              <1> 		;---------------------------------------
   137                              <1> 		; 1文字分のフォントを出力
   138                              <1> 		;---------------------------------------
   139 00000171 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
   140                              <1> 
   141 00000175 6A03E81CFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
   141 0000017E C404                <1>
   142 00000180 6A08E82AFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
   142 00000189 C404                <1>
   143 0000018B 536A085756E835FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
   143 00000194 FF6683C410          <1>
   144                              <1> 
   145 00000199 6A02E8F8FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
   145 000001A2 C404                <1>
   146 000001A4 6A04E806FFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
   146 000001AD C404                <1>
   147 000001AF 536A045756E811FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
   147 000001B8 FF6683C410          <1>
   148                              <1> 
   149 000001BD 6A01E8D4FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
   149 000001C6 C404                <1>
   150 000001C8 6A02E8E2FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
   150 000001D1 C404                <1>
   151 000001D3 536A025756E8EDFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
   151 000001DC FF6683C410          <1>
   152                              <1> 
   153 000001E1 6A00E8B0FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
   153 000001EA C404                <1>
   154 000001EC 6A01E8BEFEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
   154 000001F5 C404                <1>
   155 000001F7 536A015756E8C9FEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
   155 00000200 FF6683C410          <1>
   156                              <1> 
   157                              <1> %ifdef	USE_TEST_AND_SET
   158                              <1> 		;---------------------------------------
   159                              <1> 		; テストアンドセット
   160                              <1> 		;---------------------------------------
   161                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   162                              <1> %endif
   163                              <1> 
   164                              <1> 		;---------------------------------------
   165                              <1> 		; 【レジスタの復帰】
   166                              <1> 		;---------------------------------------
   167 00000205 5F                  <1> 		pop		edi
   168 00000206 5E                  <1> 		pop		esi
   169 00000207 5A                  <1> 		pop		edx
   170 00000208 59                  <1> 		pop		ecx
   171 00000209 5B                  <1> 		pop		ebx
   172 0000020A 58                  <1> 		pop		eax
   173                              <1> 
   174                              <1> 		;---------------------------------------
   175                              <1> 		; 【スタックフレームの破棄】
   176                              <1> 		;---------------------------------------
   177 0000020B 89EC                <1> 		mov		esp, ebp
   178 0000020D 5D                  <1> 		pop		ebp
   179                              <1> 
   180 0000020E C3                  <1> 		ret
   181                              <1> 
   182                              <1> %ifdef USE_TEST_AND_SET
   183                              <1> ALIGN 4, db 0
   184                              <1> IN_USE:	dd	0
   185                              <1> %endif
   186                              <1> 
    74                                  %include	"../modules/protect/draw_font.s"
    75                              <1> ;************************************************************************
    76                              <1> ;	フォント一覧を表示
    77                              <1> ;========================================================================
    78                              <1> ;■書式		: void draw_font(col, row);
    79                              <1> ;
    80                              <1> ;■引数
    81                              <1> ;	col		: 列
    82                              <1> ;	row		: 行
    83                              <1> ;
    84                              <1> ;■戻り値	: 無し
    85                              <1> ;************************************************************************
    86                              <1> draw_font:
    87                              <1> 		;---------------------------------------
    88                              <1> 		; 【スタックフレームの構築】
    89                              <1> 		;---------------------------------------
    90                              <1> 												; ------|--------
    91                              <1> 												; EBP+12| Y（行）
    92                              <1> 												; EBP+ 8| X（列）
    93                              <1> 												; ---------------
    94 0000020F 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    95 00000210 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    96                              <1> 												; ---------------
    97                              <1> 
    98                              <1> 		;---------------------------------------
    99                              <1> 		; 【レジスタの保存】
   100                              <1> 		;---------------------------------------
   101 00000212 50                  <1> 		push	eax
   102 00000213 53                  <1> 		push	ebx
   103 00000214 51                  <1> 		push	ecx
   104 00000215 52                  <1> 		push	edx
   105 00000216 56                  <1> 		push	esi
   106 00000217 57                  <1> 		push	edi
   107                              <1> 
   108                              <1> 		;---------------------------------------
   109                              <1> 		; 表示位置
   110                              <1> 		;---------------------------------------
   111 00000218 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   112 0000021B 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   113                              <1> 
   114                              <1> 		;---------------------------------------
   115                              <1> 		; フォント一覧を表示
   116                              <1> 		;---------------------------------------
   117 0000021E B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   118 00000223 81F900010000        <1> .10L:	cmp		ecx, 256						;      ECX < 256;
   119 00000229 731F                <1> 		jae		.10E							; 
   120                              <1> 												;      ECX++)
   121                              <1> 												; {
   122                              <1> 												;   // 桁位置の計算
   123 0000022B 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   124 0000022D 83E00F              <1> 		and		eax, 0x0F						;   EAX &= 0x0F
   125 00000230 01F0                <1> 		add		eax, esi						;   EAX += X;
   126                              <1> 												;   
   127                              <1> 												;   // 行位置の計算
   128 00000232 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   129 00000234 C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
   130 00000237 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   131                              <1> 
   132 00000239 516A075350E808FFFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
   132 00000242 FF6683C410          <1>
   133                              <1> 
   134 00000247 41                  <1> 		inc		ecx								;   // for (... ECX++)
   135 00000248 EBD9                <1> 		jmp		.10L							; 
   136                              <1> .10E:											; }
   137                              <1> 
   138                              <1> 		;---------------------------------------
   139                              <1> 		; 【レジスタの復帰】
   140                              <1> 		;---------------------------------------
   141 0000024A 5F                  <1> 		pop		edi
   142 0000024B 5E                  <1> 		pop		esi
   143 0000024C 5A                  <1> 		pop		edx
   144 0000024D 59                  <1> 		pop		ecx
   145 0000024E 5B                  <1> 		pop		ebx
   146 0000024F 58                  <1> 		pop		eax
   147                              <1> 
   148                              <1> 		;---------------------------------------
   149                              <1> 		; 【スタックフレームの破棄】
   150                              <1> 		;---------------------------------------
   151 00000250 89EC                <1> 		mov		esp, ebp
   152 00000252 5D                  <1> 		pop		ebp
   153                              <1> 
   154 00000253 C3                  <1> 		ret
   155                              <1> 
    75                                  %include	"../modules/protect/draw_str.s"
    76                              <1> ;************************************************************************
    77                              <1> ;	文字列の表示
    78                              <1> ;========================================================================
    79                              <1> ;■書式		: void draw_str(col, row, color, p);
    80                              <1> ;
    81                              <1> ;■引数
    82                              <1> ;	col		: 列
    83                              <1> ;	row		: 行
    84                              <1> ;	color	: 描画色
    85                              <1> ;	p		: 文字列のアドレス
    86                              <1> ;
    87                              <1> ;■戻り値	: 無し
    88                              <1> ;************************************************************************
    89                              <1> draw_str:
    90                              <1> 		;---------------------------------------
    91                              <1> 		; 【スタックフレームの構築】
    92                              <1> 		;---------------------------------------
    93                              <1> 												; ------|--------
    94                              <1> 												; EBP+20| *p（文字列のアドレス）
    95                              <1> 												; EBP+16| color（色）
    96                              <1> 												; EBP+12| row（行）
    97                              <1> 												; EBP+ 8| col（列）
    98                              <1> 												; ---------------
    99 00000254 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   100 00000255 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   101                              <1> 												; ---------------
   102                              <1> 
   103                              <1> 		;---------------------------------------
   104                              <1> 		; 【レジスタの保存】
   105                              <1> 		;---------------------------------------
   106 00000257 50                  <1> 		push	eax
   107 00000258 53                  <1> 		push	ebx
   108 00000259 51                  <1> 		push	ecx
   109 0000025A 52                  <1> 		push	edx
   110 0000025B 56                  <1> 		push	esi
   111                              <1> 
   112                              <1> 		;---------------------------------------
   113                              <1> 		; 文字列の表示
   114                              <1> 		;---------------------------------------
   115 0000025C 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
   116 0000025F 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
   117 00000262 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
   118 00000266 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
   119                              <1> 
   120 00000269 FC                  <1> 		cld										; DF = 0; // アドレス加算
   121                              <1> .10L:											; do
   122                              <1> 												; {
   123 0000026A AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
   124 0000026B 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   125 0000026D 7425                <1> 		je		.10E							;     break;
   126                              <1> 
   127                              <1> 		;---------------------------------------
   128                              <1> 		; 1文字表示
   129                              <1> 		;---------------------------------------
   130                              <1> %ifdef	USE_SYSTEM_CALL
   131                              <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
   132                              <1> %else
   133 0000026F 50535251E8D3FEFFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
   133 00000278 6683C410            <1>
   134                              <1> %endif
   135                              <1> 
   136                              <1> 		; 次の文字の位置を調整
   137 0000027C 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
   138 0000027D 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
   139 00000280 7C10                <1> 		jl		.12E							;   {
   140 00000282 B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
   141 00000287 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
   142 00000288 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
   143 0000028B 7C05                <1> 		jl		.12E							;     {
   144 0000028D BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
   145                              <1> 												;     }
   146                              <1> .12E:											;   }
   147 00000292 EBD6                <1> 		jmp		.10L							;   
   148                              <1> .10E:											; } while (1);
   149                              <1> 
   150                              <1> 		;---------------------------------------
   151                              <1> 		; 【レジスタの復帰】
   152                              <1> 		;---------------------------------------
   153 00000294 5E                  <1> 		pop		esi
   154 00000295 5A                  <1> 		pop		edx
   155 00000296 59                  <1> 		pop		ecx
   156 00000297 5B                  <1> 		pop		ebx
   157 00000298 58                  <1> 		pop		eax
   158                              <1> 
   159                              <1> 		;---------------------------------------
   160                              <1> 		; 【スタックフレームの破棄】
   161                              <1> 		;---------------------------------------
   162 00000299 89EC                <1> 		mov		esp, ebp
   163 0000029B 5D                  <1> 		pop		ebp
   164                              <1> 
   165 0000029C C3                  <1> 		ret
   166                              <1> 
    76                                  %include	"../modules/protect/draw_color_bar.s"
    77                              <1> ;************************************************************************
    78                              <1> ;	カラーバーの表示
    79                              <1> ;========================================================================
    80                              <1> ;■書式		: void draw_color_bar(col, row);
    81                              <1> ;
    82                              <1> ;■引数
    83                              <1> ;	col		: 列
    84                              <1> ;	row		: 行
    85                              <1> ;
    86                              <1> ;■戻り値	: 無し
    87                              <1> ;************************************************************************
    88                              <1> draw_color_bar:
    89                              <1> 		;---------------------------------------
    90                              <1> 		; 【スタックフレームの構築】
    91                              <1> 		;---------------------------------------
    92                              <1> 												; ------|--------
    93                              <1> 												; EBP+ 8| X（列）
    94                              <1> 												; EBP+12| Y（行）
    95                              <1> 												; ---------------
    96 0000029D 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    97 0000029E 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    98                              <1> 												; ---------------
    99                              <1> 		;---------------------------------------
   100                              <1> 		; 【レジスタの保存】
   101                              <1> 		;---------------------------------------
   102 000002A0 50                  <1> 		push	eax
   103 000002A1 53                  <1> 		push	ebx
   104 000002A2 51                  <1> 		push	ecx
   105 000002A3 52                  <1> 		push	edx
   106 000002A4 56                  <1> 		push	esi
   107 000002A5 57                  <1> 		push	edi
   108                              <1> 
   109                              <1> 		;---------------------------------------
   110                              <1> 		; 表示位置
   111                              <1> 		;---------------------------------------
   112 000002A6 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   113 000002A9 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   114                              <1> 
   115                              <1> 		;---------------------------------------
   116                              <1> 		; カラーバーを表示
   117                              <1> 		;---------------------------------------
   118 000002AC B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   119 000002B1 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
   120 000002B4 732E                <1> 		jae		.10E							; 
   121                              <1> 												;      ECX++)
   122                              <1> 												; {
   123                              <1> 												;   // 桁位置の計算
   124 000002B6 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   125 000002B8 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
   126 000002BB C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
   127 000002BE 01F0                <1> 		add		eax, esi						;   EAX += X;
   128                              <1> 												;   
   129                              <1> 												;   // 行位置の計算
   130 000002C0 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   131 000002C2 D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
   132 000002C4 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   133                              <1> 												;   
   134                              <1> 												;   // 表示色の取得
   135 000002C6 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
   136 000002C8 D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
   137 000002CA 8B92[F7020000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
   138                              <1> 
   139 000002D0 68[EE020000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
   139 000002D8 E877FFFFFF6683C410  <1>
   140                              <1> 
   141 000002E1 41                  <1> 		inc		ecx								;   // for (... ECX++)
   142 000002E2 EBCD                <1> 		jmp		.10L							; 
   143                              <1> .10E:											; }
   144                              <1> 
   145                              <1> 		;---------------------------------------
   146                              <1> 		; 【レジスタの復帰】
   147                              <1> 		;---------------------------------------
   148 000002E4 5F                  <1> 		pop		edi
   149 000002E5 5E                  <1> 		pop		esi
   150 000002E6 5A                  <1> 		pop		edx
   151 000002E7 59                  <1> 		pop		ecx
   152 000002E8 5B                  <1> 		pop		ebx
   153 000002E9 58                  <1> 		pop		eax
   154                              <1> 
   155                              <1> 		;---------------------------------------
   156                              <1> 		; 【スタックフレームの破棄】
   157                              <1> 		;---------------------------------------
   158 000002EA 89EC                <1> 		mov		esp, ebp
   159 000002EC 5D                  <1> 		pop		ebp
   160                              <1> 
   161 000002ED C3                  <1> 		ret
   162                              <1> 
   163 000002EE 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
   164                              <1> 
   165 000002F7 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
   166 000002FB 00010009            <1> 		dw	0x0100, 0x0900
   167 000002FF 0002000A            <1> 		dw	0x0200, 0x0A00
   168 00000303 0003000B            <1> 		dw	0x0300, 0x0B00
   169 00000307 0004000C            <1> 		dw	0x0400, 0x0C00
   170 0000030B 0005000D            <1> 		dw	0x0500, 0x0D00
   171 0000030F 0006000E            <1> 		dw	0x0600, 0x0E00
   172 00000313 0007000F            <1> 		dw	0x0700, 0x0F00
   173                              <1> 
    77                                  %include	"../modules/protect/draw_pixel.s"
    78                              <1> ;************************************************************************
    79                              <1> ;	ピクセルの描画
    80                              <1> ;========================================================================
    81                              <1> ;■書式		: void draw_pixel(X, Y, color);
    82                              <1> ;
    83                              <1> ;■引数
    84                              <1> ;	X		: X座標
    85                              <1> ;	Y		: Y座標
    86                              <1> ;	color	: 描画色
    87                              <1> ;
    88                              <1> ;■戻り値	: 無し
    89                              <1> ;************************************************************************
    90                              <1> draw_pixel:
    91                              <1> 		;---------------------------------------
    92                              <1> 		; 【スタックフレームの構築】
    93                              <1> 		;---------------------------------------
    94                              <1> 												; ------|--------
    95                              <1> 												; EBP+16| 色
    96                              <1> 												; EBP+12| Y
    97                              <1> 												; EBP+ 8| X
    98                              <1> 												; ------|--------
    99 00000317 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   100 00000318 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   101                              <1> 												; ------+--------
   102                              <1> 		;---------------------------------------
   103                              <1> 		; 【レジスタの保存】
   104                              <1> 		;---------------------------------------
   105 0000031A 50                  <1> 		push	eax
   106 0000031B 53                  <1> 		push	ebx
   107 0000031C 51                  <1> 		push	ecx
   108 0000031D 57                  <1> 		push	edi
   109                              <1> 
   110                              <1> 		;---------------------------------------
   111                              <1> 		; Y座標を80倍する（640/8）
   112                              <1> 		;---------------------------------------
   113 0000031E 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI  = Y座標
   114 00000321 C1E704              <1> 		shl		edi, 4							; EDI *= 16;
   115 00000324 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA_0000]	; EDI  = 0xA00000[EDI * 4 + EDI];
   116                              <1> 
   117                              <1> 		;---------------------------------------
   118                              <1> 		; X座標を1/8して加算
   119                              <1> 		;---------------------------------------
   120 0000032B 8B5D08              <1> 		mov		ebx, [ebp + 8]					; EBX  = X座標;
   121 0000032E 89D9                <1> 		mov		ecx, ebx						; ECX  = X座標;（一時保存）
   122 00000330 C1EB03              <1> 		shr		ebx, 3							; EBX /= 8;
   123 00000333 01DF                <1> 		add		edi, ebx						; EDI += EBX;
   124                              <1> 
   125                              <1> 		;---------------------------------------
   126                              <1> 		; X座標を8で割った余りからビット位置を計算
   127                              <1> 		; (0=0x80, 1=0x40,... 7=0x01)
   128                              <1> 		;---------------------------------------
   129 00000335 83E107              <1> 		and		ecx, 0x07						; ECX = X & 0x07;
   130 00000338 BB80000000          <1> 		mov		ebx, 0x80						; EBX = 0x80;
   131 0000033D D3EB                <1> 		shr		ebx, cl							; EBX >>= ECX;
   132                              <1> 
   133                              <1> 		;---------------------------------------
   134                              <1> 		; 色指定
   135                              <1> 		;---------------------------------------
   136 0000033F 8B4D10              <1> 		mov		ecx, [ebp +16]					; // 表示色
   137                              <1> 
   138                              <1> %ifdef	USE_TEST_AND_SET
   139                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   140                              <1> %endif
   141                              <1> 
   142                              <1> 		;---------------------------------------
   143                              <1> 		; プレーン毎に出力
   144                              <1> 		;---------------------------------------
   145 00000342 6A03E84FFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 輝度(I)プレーンを選択
   145 0000034B C404                <1>
   146 0000034D 6A08E85DFDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 輝度(I)プレーンを選択
   146 00000356 C404                <1>
   147 00000358 516A085753E8BBFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
   147 00000361 FF6683C410          <1>
   148                              <1> 
   149 00000366 6A02E82BFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 赤(R)プレーンを選択
   149 0000036F C404                <1>
   150 00000371 6A04E839FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 赤(R)プレーンを選択
   150 0000037A C404                <1>
   151 0000037C 516A045753E897FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
   151 00000385 FF6683C410          <1>
   152                              <1> 
   153 0000038A 6A01E807FDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 緑(G)プレーンを選択
   153 00000393 C404                <1>
   154 00000395 6A02E815FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 緑(G)プレーンを選択
   154 0000039E C404                <1>
   155 000003A0 516A025753E873FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
   155 000003A9 FF6683C410          <1>
   156                              <1> 
   157 000003AE 6A00E8E3FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 青(B)プレーンを選択
   157 000003B7 C404                <1>
   158 000003B9 6A01E8F1FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 青(B)プレーンを選択
   158 000003C2 C404                <1>
   159 000003C4 516A015753E84FFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
   159 000003CD FF6683C410          <1>
   160                              <1> 
   161                              <1> 
   162                              <1> %ifdef	USE_TEST_AND_SET
   163                              <1> 		;---------------------------------------
   164                              <1> 		; テストアンドセット
   165                              <1> 		;---------------------------------------
   166                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   167                              <1> %endif
   168                              <1> 
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 【レジスタの復帰】
   171                              <1> 		;---------------------------------------
   172 000003D2 5F                  <1> 		pop		edi
   173 000003D3 59                  <1> 		pop		ecx
   174 000003D4 5B                  <1> 		pop		ebx
   175 000003D5 58                  <1> 		pop		eax
   176                              <1> 
   177                              <1> 		;---------------------------------------
   178                              <1> 		; 【スタックフレームの破棄】
   179                              <1> 		;---------------------------------------
   180 000003D6 89EC                <1> 		mov		esp, ebp
   181 000003D8 5D                  <1> 		pop		ebp
   182                              <1> 
   183 000003D9 C3                  <1> 		ret
   184                              <1> 
    78                                  %include	"../modules/protect/draw_line.s"
    79                              <1> ;************************************************************************
    80                              <1> ;	直線の描画
    81                              <1> ;========================================================================
    82                              <1> ;■書式		: void draw_line(X0, Y0, X1, Y1, color);
    83                              <1> ;
    84                              <1> ;■引数
    85                              <1> ;	X0		: 始点のX座標
    86                              <1> ;	Y0		: 始点のY座標
    87                              <1> ;	X1		: 終点のX座標
    88                              <1> ;	Y1		: 終点のY座標
    89                              <1> ;	color	: 描画色
    90                              <1> ;
    91                              <1> ;■戻り値	: 無し
    92                              <1> ;************************************************************************
    93                              <1> draw_line:
    94                              <1> 		;---------------------------------------
    95                              <1> 		; 【スタックフレームの構築】
    96                              <1> 		;---------------------------------------
    97                              <1> 												; ---------------
    98                              <1> 												;    +24| 色
    99                              <1> 												;    +20| Y1
   100                              <1> 												;    +16| X1
   101                              <1> 												;    +12| Y0
   102                              <1> 												;    + 8| X0
   103                              <1> 												; ---------------
   104 000003DA 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   105 000003DB 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   106                              <1> 												; ---------------
   107 000003DD 6A00                <1> 		push	dword 0							;    - 4| sum   = 0; // 相対軸の積算値
   108 000003DF 6A00                <1> 		push	dword 0							;    - 8| x0    = 0; // X座標
   109 000003E1 6A00                <1> 		push	dword 0							;    -12| dx    = 0; // X増分
   110 000003E3 6A00                <1> 		push	dword 0							;    -16| inc_x = 0; // X座標増分(1 or -1)
   111 000003E5 6A00                <1> 		push	dword 0							;    -20| y0    = 0; // Y座標
   112 000003E7 6A00                <1> 		push	dword 0							;    -24| dy    = 0; // Y増分
   113 000003E9 6A00                <1> 		push	dword 0							;    -28| inc_y = 0; // Y座標増分(1 or -1)
   114                              <1> 												; ------|--------
   115                              <1> 
   116                              <1> 		;---------------------------------------
   117                              <1> 		; 【レジスタの保存】
   118                              <1> 		;---------------------------------------
   119 000003EB 50                  <1> 		push	eax
   120 000003EC 53                  <1> 		push	ebx
   121 000003ED 51                  <1> 		push	ecx
   122 000003EE 52                  <1> 		push	edx
   123 000003EF 56                  <1> 		push	esi
   124 000003F0 57                  <1> 		push	edi
   125                              <1> 
   126                              <1> 		;---------------------------------------
   127                              <1> 		; 幅を計算（X軸）
   128                              <1> 		;---------------------------------------
   129 000003F1 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   130 000003F4 8B5D10              <1> 		mov		ebx, [ebp +16]					; EBX = X1;
   131 000003F7 29C3                <1> 		sub		ebx, eax						; EBX = X1 - X0; // 幅
   132 000003F9 7D09                <1> 		jge		.10F							; if (幅 < 0)
   133                              <1> 												; {
   134 000003FB F7DB                <1> 		neg		ebx								;   幅   *= -1;
   135 000003FD BEFFFFFFFF          <1> 		mov		esi, -1							;   // X座標の増分
   136 00000402 EB05                <1> 		jmp		.10E							; }
   137                              <1> .10F:											; else
   138                              <1> 												; {
   139 00000404 BE01000000          <1> 		mov		esi, 1							;   // X座標の増分
   140                              <1> .10E:											; }
   141                              <1> 
   142                              <1> 		;---------------------------------------
   143                              <1> 		; 高さを計算（Y軸）
   144                              <1> 		;---------------------------------------
   145 00000409 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX = Y0
   146 0000040C 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1
   147 0000040F 29CA                <1> 		sub		edx, ecx						; EDX = Y1 - Y0; // 高さ
   148 00000411 7D09                <1> 		jge		.20F							; if (高さ < 0)
   149                              <1> 												; {
   150 00000413 F7DA                <1> 		neg		edx								;   高さ *= -1;
   151 00000415 BFFFFFFFFF          <1> 		mov		edi, -1							;   // Y座標の増分
   152 0000041A EB05                <1> 		jmp		.20E							; }
   153                              <1> .20F:											; else
   154                              <1> 												; {
   155 0000041C BF01000000          <1> 		mov		edi, 1							;   // Y座標の増分
   156                              <1> .20E:											; }
   157                              <1> 
   158                              <1> 		;---------------------------------------
   159                              <1> 		; X軸
   160                              <1> 		;---------------------------------------
   161 00000421 8945F8              <1> 		mov		[ebp - 8], eax					;   // X軸:開始座標
   162 00000424 895DF4              <1> 		mov		[ebp -12], ebx					;   // X軸:描画幅
   163 00000427 8975F0              <1> 		mov		[ebp -16], esi					;   // X軸:増分(基準軸：1 or -1)
   164                              <1> 
   165                              <1> 		;---------------------------------------
   166                              <1> 		; Y軸
   167                              <1> 		;---------------------------------------
   168 0000042A 894DEC              <1> 		mov		[ebp -20], ecx					;   // Y軸:開始座標
   169 0000042D 8955E8              <1> 		mov		[ebp -24], edx					;   // Y軸:描画幅
   170 00000430 897DE4              <1> 		mov		[ebp -28], edi					;   // Y軸:増分(基準軸：1 or -1)
   171                              <1> 
   172                              <1> 		;---------------------------------------
   173                              <1> 		; 基準軸を決める
   174                              <1> 		;---------------------------------------
   175 00000433 39D3                <1> 		cmp		ebx, edx						; if (幅 <= 高さ)
   176 00000435 7F08                <1> 		jg		.22F							; {
   177                              <1> 												;   
   178 00000437 8D75EC              <1> 		lea		esi, [ebp -20]					;   // Y軸が基準軸
   179 0000043A 8D7DF8              <1> 		lea		edi, [ebp - 8]					;   // X軸が相対軸
   180                              <1> 												;   
   181 0000043D EB06                <1> 		jmp		.22E							; }
   182                              <1> .22F:											; else
   183                              <1> 												; {
   184 0000043F 8D75F8              <1> 		lea		esi, [ebp - 8]					;   // X軸が基準軸
   185 00000442 8D7DEC              <1> 		lea		edi, [ebp -20]					;   // Y軸が相対軸
   186                              <1> .22E:											; }
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 繰り返し回数(基準軸のドット数)
   190                              <1> 		;---------------------------------------
   191 00000445 8B4EFC              <1> 		mov		ecx, [esi - 4]					; ECX = 基準軸描画幅;
   192 00000448 83F900              <1> 		cmp		ecx, 0							; if (0 == ECX)
   193 0000044B 7505                <1> 		jnz		.30E							; {
   194 0000044D B901000000          <1> 		mov		ecx, 1							;   ECX = 1;
   195                              <1> .30E:											; }
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; 線を描画
   199                              <1> 		;---------------------------------------
   200                              <1> .50L:											; do
   201                              <1> 												; {
   202                              <1> %ifdef	USE_SYSTEM_CALL
   203                              <1> 		mov		eax, ecx						;   // 繰り返し回数を保存
   204                              <1> 
   205                              <1> 		mov		ebx, [ebp +24]					;   EBX = 表示色;
   206                              <1> 		mov		ecx, [ebp - 8]					;   ECX = X座標;
   207                              <1> 		mov		edx, [ebp -20]					;   EDX = Y座標;
   208                              <1> 		int		0x82							;   sys_call(1, X, Y, 色, 文字); BX(C), CX(X), DX(Y)
   209                              <1> 
   210                              <1> 		mov		ecx, eax
   211                              <1> %else
   212 00000452 FF7518FF75ECFF75F8- <1> 		cdecl	draw_pixel, dword [ebp - 8], 							dword [ebp -20], 							dword [ebp +24]		;   // 点の描画
   212 0000045B E8B7FEFFFF6683C40C  <1>
   215                              <1> %endif
   216                              <1> 												;   // 基準軸を更新(1ドット分)
   217 00000464 8B46F8              <1> 		mov		eax, [esi - 8]					;   EAX = 基準軸増分(1 or -1);
   218 00000467 0106                <1> 		add		[esi - 0], eax					;   
   219                              <1> 
   220                              <1> 												;   // 相対軸を更新
   221 00000469 8B45FC              <1> 		mov		eax, [ebp - 4]					;   EAX  = sum; // 相対軸の積算値;
   222 0000046C 0347FC              <1> 		add		eax, [edi - 4]					;   EAX += dy;  // 増分(相対軸の描画幅)
   223 0000046F 8B5EFC              <1> 		mov		ebx, [esi - 4]					;   EBX  = dx;  // 増分(基準軸の描画幅)
   224                              <1> 
   225 00000472 39D8                <1> 		cmp		eax, ebx						;   if (積算値 <= 相対軸の増分)
   226 00000474 7C07                <1> 		jl		.52E							;   {
   227 00000476 29D8                <1> 		sub		eax, ebx						;     EAX -= EBX; // 積算値から相対軸の増分を減算
   228                              <1> 												;     
   229                              <1> 												;     // 相対軸の座標を更新(1ドット分)
   230 00000478 8B5FF8              <1> 		mov		ebx, [edi - 8]					;     EBX =  相対軸増分;
   231 0000047B 011F                <1> 		add		[edi - 0], ebx					;     
   232                              <1> .52E:											;   }
   233 0000047D 8945FC              <1> 		mov		[ebp - 4], eax					;   // 積算値を更新
   234                              <1> 												;   
   235 00000480 E2D0                <1> 		loop	.50L							;   
   236                              <1> .50E:											; } while (ループ回数--);
   237                              <1> 
   238                              <1> 		;---------------------------------------
   239                              <1> 		; 【レジスタの復帰】
   240                              <1> 		;---------------------------------------
   241 00000482 5F                  <1> 		pop		edi
   242 00000483 5E                  <1> 		pop		esi
   243 00000484 5A                  <1> 		pop		edx
   244 00000485 59                  <1> 		pop		ecx
   245 00000486 5B                  <1> 		pop		ebx
   246 00000487 58                  <1> 		pop		eax
   247                              <1> 
   248                              <1> 		;---------------------------------------
   249                              <1> 		; 【スタックフレームの破棄】
   250                              <1> 		;---------------------------------------
   251 00000488 89EC                <1> 		mov		esp, ebp
   252 0000048A 5D                  <1> 		pop		ebp
   253                              <1> 
   254 0000048B C3                  <1> 		ret
   255                              <1> 
    79                                  %include	"../modules/protect/draw_rect.s"
    80                              <1> ;************************************************************************
    81                              <1> ;	矩形の描画
    82                              <1> ;========================================================================
    83                              <1> ;■書式		: void draw_rect(X0, Y0, X1, Y1, color);
    84                              <1> ;
    85                              <1> ;■引数
    86                              <1> ;	X0		: 始点のX座標
    87                              <1> ;	Y0		: 始点のY座標
    88                              <1> ;	X1		: 終点のX座標
    89                              <1> ;	Y1		: 終点のY座標
    90                              <1> ;	color	: 描画色
    91                              <1> ;
    92                              <1> ;■戻り値	: 無し
    93                              <1> ;************************************************************************
    94                              <1> draw_rect:
    95                              <1> 		;---------------------------------------
    96                              <1> 		; 【スタックフレームの構築】
    97                              <1> 		;---------------------------------------
    98                              <1> 												; ------|--------
    99                              <1> 												; EBP+24| 色
   100                              <1> 												; EBP+20| Y1
   101                              <1> 												; EBP+16| X1
   102                              <1> 												; EBP+12| Y0
   103                              <1> 												; EBP+ 8| X0
   104                              <1> 												; ---------------
   105 0000048C 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   106 0000048D 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   107                              <1> 												; ------|--------
   108                              <1> 
   109                              <1> 		;---------------------------------------
   110                              <1> 		; 【レジスタの保存】
   111                              <1> 		;---------------------------------------
   112 0000048F 50                  <1> 		push		eax
   113 00000490 53                  <1> 		push		ebx
   114 00000491 51                  <1> 		push		ecx
   115 00000492 52                  <1> 		push		edx
   116 00000493 56                  <1> 		push		esi
   117                              <1> 
   118                              <1> 		;---------------------------------------
   119                              <1> 		; 矩形を描画
   120                              <1> 		;---------------------------------------
   121 00000494 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   122 00000497 8B5D0C              <1> 		mov		ebx, [ebp +12]					; EBX = Y0;
   123 0000049A 8B4D10              <1> 		mov		ecx, [ebp +16]					; ECX = X1;
   124 0000049D 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1;
   125 000004A0 8B7518              <1> 		mov		esi, [ebp +24]					; ESI = 色;
   126                              <1> 
   127                              <1> 		;---------------------------------------
   128                              <1> 		; 座標軸の大小を確定
   129                              <1> 		;---------------------------------------
   130 000004A3 39C8                <1> 		cmp		eax, ecx						; if (X1 < X0)
   131 000004A5 7C01                <1> 		jl		.10E							; {
   132 000004A7 91                  <1> 		xchg	eax, ecx						;   X0とX1を入れ替える;
   133                              <1> .10E:											; }
   134                              <1> 
   135 000004A8 39D3                <1> 		cmp		ebx, edx						; if (Y1 < Y0)
   136 000004AA 7C02                <1> 		jl		.20E							; {
   137 000004AC 87DA                <1> 		xchg	ebx, edx						;   Y0とY1を入れ替える;
   138                              <1> .20E:											; }
   139                              <1> 
   140                              <1> 		;---------------------------------------
   141                              <1> 		; 矩形を描画
   142                              <1> 		;---------------------------------------
   143 000004AE 5653515350E822FFFF- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, esi	; 上線
   143 000004B7 FF6683C414          <1>
   144 000004BC 5652505350E814FFFF- <1> 		cdecl	draw_line, eax, ebx, eax, edx, esi	; 左線
   144 000004C5 FF6683C414          <1>
   145                              <1> 
   146 000004CA 4A                  <1> 		dec		edx									; EDX--; // 下線は1ドット上げる
   147 000004CB 5652515250E805FFFF- <1> 		cdecl	draw_line, eax, edx, ecx, edx, esi	; 下線
   147 000004D4 FF6683C414          <1>
   148 000004D9 42                  <1> 		inc		edx
   149                              <1> 
   150 000004DA 49                  <1> 		dec		ecx									; ECX--; // 右線は1ドット左に移動
   151 000004DB 5652515351E8F5FEFF- <1> 		cdecl	draw_line, ecx, ebx, ecx, edx, esi	; 右線
   151 000004E4 FF6683C414          <1>
   152                              <1> 
   153                              <1> 		;---------------------------------------
   154                              <1> 		; 【レジスタの復帰】
   155                              <1> 		;---------------------------------------
   156 000004E9 5E                  <1> 		pop		esi
   157 000004EA 5A                  <1> 		pop		edx
   158 000004EB 59                  <1> 		pop		ecx
   159 000004EC 5B                  <1> 		pop		ebx
   160 000004ED 58                  <1> 		pop		eax
   161                              <1> 
   162                              <1> 		;---------------------------------------
   163                              <1> 		; 【スタックフレームの破棄】
   164                              <1> 		;---------------------------------------
   165 000004EE 89EC                <1> 		mov		esp, ebp
   166 000004F0 5D                  <1> 		pop		ebp
   167                              <1> 
   168 000004F1 C3                  <1> 		ret
    80                                  %include	"../modules/protect/itoa.s"
    81                              <1> ;************************************************************************
    82                              <1> ;	数値を文字に変換
    83                              <1> ;========================================================================
    84                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
    85                              <1> ;
    86                              <1> ;■引数
    87                              <1> ;	num		: 変換する数値
    88                              <1> ;	buff	: 保存先バッファアドレス
    89                              <1> ;	size	: 保存先バッファサイズ
    90                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
    91                              <1> ;	flags	: フラグ
    92                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
    93                              <1> ;			:      : 0=空白を' '（スペース）で埋める
    94                              <1> ;			:   B1 : 1=＋/-符号を表示する
    95                              <1> ;			:      : 0=＋/-符号を表示しない
    96                              <1> ;			:   B0 : 1=符号付き正数として扱う
    97                              <1> ;			:      : 0=符号無し正数として扱う
    98                              <1> ;
    99                              <1> ;■戻り値	: 無し
   100                              <1> ;************************************************************************
   101                              <1> itoa:
   102                              <1> 		;---------------------------------------
   103                              <1> 		; 【スタックフレームの構築】
   104                              <1> 		;---------------------------------------
   105                              <1> 												; ------|--------
   106                              <1> 												;    +24| フラグ
   107                              <1> 												;    +20| 基数
   108                              <1> 												;    +16| バッファサイズ
   109                              <1> 												;    +12| バッファアドレス
   110                              <1> 												;    + 8| 数値
   111                              <1> 												; ------|--------
   112                              <1> 												;    + 4| EIP（戻り番地）
   113 000004F2 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   114 000004F3 89E5                <1> 		mov		ebp, esp						; ------+--------
   115                              <1> 
   116                              <1> 		;---------------------------------------
   117                              <1> 		; 【レジスタの保存】
   118                              <1> 		;---------------------------------------
   119 000004F5 50                  <1> 		push	eax
   120 000004F6 53                  <1> 		push	ebx
   121 000004F7 51                  <1> 		push	ecx
   122 000004F8 52                  <1> 		push	edx
   123 000004F9 56                  <1> 		push	esi
   124 000004FA 57                  <1> 		push	edi
   125                              <1> 
   126                              <1> 		;---------------------------------------
   127                              <1> 		; 引数を取得
   128                              <1> 		;---------------------------------------
   129 000004FB 8B4508              <1> 		mov		eax, [ebp + 8]					; val  = 数値;
   130 000004FE 8B750C              <1> 		mov		esi, [ebp +12]					; dst  = バッファアドレス;
   131 00000501 8B4D10              <1> 		mov		ecx, [ebp +16]					; size = 残りバッファサイズ;
   132                              <1> 
   133 00000504 89F7                <1> 		mov		edi, esi						; // バッファの最後尾
   134 00000506 01CF                <1> 		add		edi, ecx						; dst  = &dst[size - 1];
   135 00000508 4F                  <1> 		dec		edi								; 
   136                              <1> 
   137 00000509 8B5D18              <1> 		mov		ebx, [ebp +24]					; flags = オプション;
   138                              <1> 
   139                              <1> 		;---------------------------------------
   140                              <1> 		; 符号付き判定
   141                              <1> 		;---------------------------------------
   142 0000050C F7C301000000        <1> 		test	ebx, 0b0001						; if (flags & 0x01)// 符号付き
   143 00000512 7408                <1> .10Q:	je		.10E							; {
   144 00000514 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   145 00000517 7D03                <1> .12Q:	jge		.12E							;   {
   146 00000519 83CB02              <1> 		or		ebx, 0b0010						;     flags |=  2; // 符号表示
   147                              <1> .12E:											;   }
   148                              <1> .10E:											; }
   149                              <1> 
   150                              <1> 		;---------------------------------------
   151                              <1> 		; 符号出力判定
   152                              <1> 		;---------------------------------------
   153 0000051C F7C302000000        <1> 		test	ebx, 0b0010						; if (flags & 0x02)// 符号出力判定
   154 00000522 7410                <1> .20Q:	je		.20E							; {
   155 00000524 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   156 00000527 7D07                <1> .22Q:	jge		.22F							;   {
   157 00000529 F7D8                <1> 		neg		eax								;     val *= -1;   // 符号反転
   158 0000052B C6062D              <1> 		mov		[esi], byte '-'					;     *dst = '-';  // 符号表示
   159 0000052E EB03                <1> 		jmp		.22E							;   }
   160                              <1> .22F:											;   else
   161                              <1> 												;   {
   162 00000530 C6062B              <1> 		mov		[esi], byte '+'					;     *dst = '+';  // 符号表示
   163                              <1> .22E:											;   }
   164 00000533 49                  <1> 		dec		ecx								;   size--;        // 残りバッファサイズの減算
   165                              <1> .20E:											; }
   166                              <1> 
   167                              <1> 		;---------------------------------------
   168                              <1> 		; ASCII変換
   169                              <1> 		;---------------------------------------
   170 00000534 8B5D14              <1> 		mov		ebx, [ebp +20]					; BX = 基数;
   171                              <1> .30L:											; do
   172                              <1> 												; {
   173 00000537 BA00000000          <1> 		mov		edx, 0							;   
   174 0000053C F7F3                <1> 		div		ebx								;   DX = DX:AX % 基数;
   175                              <1> 												;   AX = DX:AX / 基数;
   176                              <1> 												;   
   177 0000053E 89D6                <1> 		mov		esi, edx						;   // テーブル参照
   178 00000540 8A96[6B050000]      <1> 		mov		dl, byte [.ascii + esi]			;   DL = ASCII[DX];
   179                              <1> 												;   
   180 00000546 8817                <1> 		mov		[edi], dl						;   *dst = DL;
   181 00000548 4F                  <1> 		dec		edi								;   dst--;
   182                              <1> 												;   
   183 00000549 83F800              <1> 		cmp		eax, 0							;   
   184 0000054C E0E9                <1> 		loopnz	.30L							; } while (AX);
   185                              <1> .30E:
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 空欄を埋める
   189                              <1> 		;---------------------------------------
   190 0000054E 83F900              <1> 		cmp		ecx, 0							; if (size)
   191 00000551 740E                <1> .40Q:	je		.40E							; {
   192 00000553 B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   193 00000555 66837D1804          <1> 		cmp		[ebp +24], word 0b0100			;   if (flags & 0x04)
   194 0000055A 7502                <1> .42Q:	jne		.42E							;   {
   195 0000055C B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   196                              <1> .42E:											;   }
   197 0000055E FD                  <1> 		std										;   // DF = 1（-方向）
   198 0000055F F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   199                              <1> .40E:											; }
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; 【レジスタの復帰】
   203                              <1> 		;---------------------------------------
   204 00000561 5F                  <1> 		pop		edi
   205 00000562 5E                  <1> 		pop		esi
   206 00000563 5A                  <1> 		pop		edx
   207 00000564 59                  <1> 		pop		ecx
   208 00000565 5B                  <1> 		pop		ebx
   209 00000566 58                  <1> 		pop		eax
   210                              <1> 
   211                              <1> 		;---------------------------------------
   212                              <1> 		; 【スタックフレームの破棄】
   213                              <1> 		;---------------------------------------
   214 00000567 89EC                <1> 		mov		esp, ebp
   215 00000569 5D                  <1> 		pop		ebp
   216                              <1> 
   217 0000056A C3                  <1> 		ret
   218                              <1> 
   219 0000056B 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   219 00000574 39414243444546      <1>
   220                              <1> 
    81                                  %include	"../modules/protect/rtc.s"
    82                              <1> ;************************************************************************
    83                              <1> ;	RTCから時刻データを取得する
    84                              <1> ;========================================================================
    85                              <1> ;■書式		: DWORD rtc_get_time(dst);
    86                              <1> ;
    87                              <1> ;■引数
    88                              <1> ;	dst		: 保存先アドレス
    89                              <1> ;
    90                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
    91                              <1> ;************************************************************************
    92                              <1> rtc_get_time:
    93                              <1> 		;---------------------------------------
    94                              <1> 		; 【スタックフレームの構築】
    95                              <1> 		;---------------------------------------
    96                              <1> 												; ------|--------
    97                              <1> 												; EBP+ 8| 保存先アドレス
    98                              <1> 												; ---------------
    99 0000057B 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   100 0000057C 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   101                              <1> 												; ---------------
   102                              <1> 		;---------------------------------------
   103                              <1> 		; 【レジスタの保存】
   104                              <1> 		;---------------------------------------
   105 0000057E 53                  <1> 		push	ebx
   106                              <1> 
   107                              <1> 		;---------------------------------------
   108                              <1> 		; RTCから時刻を取得
   109                              <1> 		;---------------------------------------
   110 0000057F B00A                <1> 		mov		al, 0x0A						; // レジスタA
   111 00000581 E670                <1> 		out		0x70, al						; outp(0x70, AL);
   112 00000583 E471                <1> 		in		al, 0x71						; AL = レジスタA;
   113 00000585 A880                <1> 		test	al, 0x80						; if (DM & UIP) // 更新中
   114 00000587 7407                <1> 		je		.10F							; {
   115 00000589 B801000000          <1> 		mov		eax, 1							;   ret = 1; // データ更新中
   116 0000058E EB27                <1> 		jmp		.10E							; }
   117                              <1> .10F:											; else
   118                              <1> 												; {
   119                              <1> 												;   // RAM[0x04]:時
   120 00000590 B004                <1> 		mov		al, 0x04						;   AL = 0x04;
   121 00000592 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   122 00000594 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 時データ
   123                              <1> 												;   
   124 00000596 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   125                              <1> 												;   
   126                              <1> 												;   // RAM[0x02]:分
   127 00000599 B002                <1> 		mov		al, 0x02						;   AL = 0x02;
   128 0000059B E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   129 0000059D E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 分データ
   130                              <1> 												;   
   131 0000059F C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   132                              <1> 												;   
   133                              <1> 												;   // RAM[0x00]:秒
   134 000005A2 B000                <1> 		mov		al, 0x00						;   AL = 0x00;
   135 000005A4 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   136 000005A6 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 秒データ
   137                              <1> 												;   
   138 000005A8 25FFFFFF00          <1> 		and		eax, 0x00_FF_FF_FF				;   // 下位3バイトのみ有効
   139                              <1> 												;   
   140 000005AD 8B5D08              <1> 		mov		ebx, [ebp + 8]					;   dst = 保存先;
   141 000005B0 8903                <1> 		mov		[ebx], eax						;   [dst] = 時刻;
   142                              <1> 												;   
   143 000005B2 B800000000          <1> 		mov		eax, 0							;   ret = 0; // 正常終了
   144                              <1> .10E:											; }
   145                              <1> 
   146                              <1> 		;---------------------------------------
   147                              <1> 		; 【レジスタの復帰】
   148                              <1> 		;---------------------------------------
   149 000005B7 5B                  <1> 		pop		ebx
   150                              <1> 
   151                              <1> 		;---------------------------------------
   152                              <1> 		; 【スタックフレームの破棄】
   153                              <1> 		;---------------------------------------
   154 000005B8 89EC                <1> 		mov		esp, ebp
   155 000005BA 5D                  <1> 		pop		ebp
   156                              <1> 
   157 000005BB C3                  <1> 		ret
   158                              <1> 
    82                                  %include	"../modules/protect/draw_time.s"
    83                              <1> ;************************************************************************
    84                              <1> ;	時刻の表示
    85                              <1> ;========================================================================
    86                              <1> ;■書式		: void draw_time(col, row, color, time);
    87                              <1> ;
    88                              <1> ;■引数
    89                              <1> ;	col		: 列
    90                              <1> ;	row		: 行
    91                              <1> ;	color	: 描画色
    92                              <1> ;	time	: 時刻データ
    93                              <1> ;
    94                              <1> ;■戻り値	: 無し
    95                              <1> ;************************************************************************
    96                              <1> draw_time:
    97                              <1> 		;---------------------------------------
    98                              <1> 		; 【スタックフレームの構築】
    99                              <1> 		;---------------------------------------
   100                              <1> 												; ------|--------
   101                              <1> 												; EBP+20| 時刻データ
   102                              <1> 												; EBP+16| 色
   103                              <1> 												; EBP+12| Y（行）
   104                              <1> 												; EBP+ 8| X（列）
   105                              <1> 												; ---------------
   106 000005BC 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   107 000005BD 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   108                              <1> 												; ---------------
   109                              <1> 		;---------------------------------------
   110                              <1> 		; 【レジスタの保存】
   111                              <1> 		;---------------------------------------
   112 000005BF 50                  <1> 		push	eax
   113 000005C0 53                  <1> 		push	ebx
   114                              <1> 
   115                              <1> 		;---------------------------------------
   116                              <1> 		; 
   117                              <1> 		;---------------------------------------
   118 000005C1 8B4514              <1> 		mov		eax, [ebp +20]					; EAX = 時刻データ;
   119 000005C4 3B05[42060000]      <1> 		cmp		eax, [.last]					; if (今回 != 前回)
   120 000005CA 7467                <1> 		je		.10E							; {
   121                              <1> 												;   
   122 000005CC A3[42060000]        <1> 		mov		[.last], eax					;   // 前回の時刻値を更新
   123                              <1> 												;   
   124 000005D1 BB00000000          <1> 		mov		ebx, 0							;   EBX = 0;
   125 000005D6 88C3                <1> 		mov		bl, al							;   EBX = 秒;
   126 000005D8 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .sec, 2, 16, 0b0100	;   // 時刻を文字列に変換
   126 000005DF [50060000]53E809FF- <1>
   126 000005E7 FFFF6683C414        <1>
   127                              <1> 
   128 000005ED 88E3                <1> 		mov		bl, ah							;   EBX = 分;
   129 000005EF 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .min, 2, 16, 0b0100	;   // 時刻を文字列に変換
   129 000005F6 [4D060000]53E8F2FE- <1>
   129 000005FE FFFF6683C414        <1>
   130                              <1> 
   131 00000604 C1E810              <1> 		shr		eax, 16							;   EBX = 時;
   132 00000607 6A046A106A0268-     <1> 		cdecl	itoa, eax, .hour, 2, 16, 0b0100	;   // 時刻を文字列に変換
   132 0000060E [4A060000]50E8DAFE- <1>
   132 00000616 FFFF6683C414        <1>
   133                              <1> 
   134                              <1> 												;   // 時刻を表示
   135 0000061C 68[4A060000]FF7510- <1> 		cdecl	draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
   135 00000624 FF750CFF7508E825FC- <1>
   135 0000062D FFFF6683C410        <1>
   136                              <1> 												;     
   137                              <1> 												;   }
   138                              <1> .10E:											; }
   139                              <1> 
   140                              <1> 		;---------------------------------------
   141                              <1> 		; 【レジスタの復帰】
   142                              <1> 		;---------------------------------------
   143 00000633 5B                  <1> 		pop		ebx
   144 00000634 58                  <1> 		pop		eax
   145                              <1> 
   146                              <1> 		;---------------------------------------
   147                              <1> 		; 【スタックフレームの破棄】
   148                              <1> 		;---------------------------------------
   149 00000635 89EC                <1> 		mov		esp, ebp
   150 00000637 5D                  <1> 		pop		ebp
   151                              <1> 
   152 00000638 C3                  <1> 		ret
   153                              <1> 
   154 00000639 00                  <1> ALIGN 2, db 0
   155 0000063A 0000000000000000    <1> .temp:	dq	0
   156 00000642 0000000000000000    <1> .last:	dq	0
   157 0000064A 5A5A3A              <1> .hour:	db	"ZZ:"
   158 0000064D 5A5A3A              <1> .min:	db	"ZZ:"
   159 00000650 5A5A00              <1> .sec:	db	"ZZ", 0
   160                              <1> 
    83                                  %include	"modules/interrupt.s"
    84                              <1> ;************************************************************************
    85                              <1> ;	割り込み処理：デフォルトの処理
    86                              <1> ;************************************************************************
    87                              <1> int_default:
    88 00000653 9C                  <1> 		pushf									; // EFLAGS(IF==0)
    89 00000654 0E                  <1> 		push	cs								; // CS
    90 00000655 68[71060000]        <1> 		push	int_stop						; // スタック表示処理
    91                              <1> 
    92 0000065A B8[60060000]        <1> 		mov		eax, .s0						; // 割り込み種別
    93 0000065F CF                  <1> 		iret
    94                              <1> 
    95 00000660 203C2020202053544F- <1> .s0		db	" <    STOP    > ", 0
    95 00000669 50202020203E2000    <1>
    96                              <1> 
    97                              <1> ;************************************************************************
    98                              <1> ;	スタックの内容を表示して無限ループを実行
    99                              <1> ;************************************************************************
   100                              <1> int_stop:
   101                              <1> 		;---------------------------------------
   102                              <1> 		; EAXで示される文字列を表示
   103                              <1> 		;---------------------------------------
   104 00000671 50680F0600006A0F6A- <1> 		cdecl	draw_str, 25, 15, 0x060F, eax	; draw_str(EAX);
   104 0000067A 19E8D4FBFFFF6683C4- <1>
   104 00000683 10                  <1>
   105                              <1> 
   106                              <1> 		;---------------------------------------
   107                              <1> 		; スタックのデータを文字列に変換
   108                              <1> 		;---------------------------------------
   109 00000684 8B0424              <1> 		mov		eax, [esp + 0]					; EAX = ESP[ 0];
   110 00000687 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p1, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   110 0000068E [4C070000]50E85AFE- <1>
   110 00000696 FFFF6683C414        <1>
   111                              <1> 
   112 0000069C 8B442404            <1> 		mov		eax, [esp + 4]					; EAX = ESP[ 4];
   113 000006A0 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p2, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   113 000006A7 [5D070000]50E841FE- <1>
   113 000006AF FFFF6683C414        <1>
   114                              <1> 
   115 000006B5 8B442408            <1> 		mov		eax, [esp + 8]					; EAX = ESP[ 8];
   116 000006B9 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p3, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   116 000006C0 [6E070000]50E828FE- <1>
   116 000006C8 FFFF6683C414        <1>
   117                              <1> 
   118 000006CE 8B44240C            <1> 		mov		eax, [esp +12]					; EAX = ESP[12];
   119 000006D2 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p4, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   119 000006D9 [7F070000]50E80FFE- <1>
   119 000006E1 FFFF6683C414        <1>
   120                              <1> 
   121                              <1> 		;---------------------------------------
   122                              <1> 		; 文字列の表示
   123                              <1> 		;---------------------------------------
   124 000006E7 68[45070000]68040F- <1> 		cdecl	draw_str, 25, 16, 0x0F04, .s1	; draw_str("ESP+ 0:-------- ");
   124 000006EF 00006A106A19E85AFB- <1>
   124 000006F8 FFFF6683C410        <1>
   125 000006FE 68[56070000]68040F- <1> 		cdecl	draw_str, 25, 17, 0x0F04, .s2	; draw_str("   + 4:-------- ");
   125 00000706 00006A116A19E843FB- <1>
   125 0000070F FFFF6683C410        <1>
   126 00000715 68[67070000]68040F- <1> 		cdecl	draw_str, 25, 18, 0x0F04, .s3	; draw_str("   + 8:-------- ");
   126 0000071D 00006A126A19E82CFB- <1>
   126 00000726 FFFF6683C410        <1>
   127 0000072C 68[78070000]68040F- <1> 		cdecl	draw_str, 25, 19, 0x0F04, .s4	; draw_str("   +12:-------- ");
   127 00000734 00006A136A19E815FB- <1>
   127 0000073D FFFF6683C410        <1>
   128                              <1> 
   129                              <1> 		;---------------------------------------
   130                              <1> 		; 無限ループ
   131                              <1> 		;---------------------------------------
   132 00000743 EBFE                <1> 		jmp		$								; while (1) ; // 無限ループ
   133                              <1> 
   134 00000745 4553502B20303A      <1> .s1		db	"ESP+ 0:"
   135 0000074C 5F5F5F5F5F5F5F5F20- <1> .p1		db	"________ ", 0
   135 00000755 00                  <1>
   136 00000756 2020202B20343A      <1> .s2		db	"   + 4:"
   137 0000075D 5F5F5F5F5F5F5F5F20- <1> .p2		db	"________ ", 0
   137 00000766 00                  <1>
   138 00000767 2020202B20383A      <1> .s3		db	"   + 8:"
   139 0000076E 5F5F5F5F5F5F5F5F20- <1> .p3		db	"________ ", 0
   139 00000777 00                  <1>
   140 00000778 2020202B31323A      <1> .s4		db	"   +12:"
   141 0000077F 5F5F5F5F5F5F5F5F20- <1> .p4		db	"________ ", 0
   141 00000788 00                  <1>
   142                              <1> 
    84                                  
    85                                  ;************************************************************************
    86                                  ;	パディング
    87                                  ;************************************************************************
    88 00000789 00<rep 1877h>           		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
    89                                  
