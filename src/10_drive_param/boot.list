     1                                  ;************************************************************************
     2                                  ;	BIOSでロードされる最初のセクタ
     3                                  ;	
     4                                  ;	プログラム全体を通して、セグメントの値は0x0000とする。
     5                                  ;	(DS==ES==0)
     6                                  ;	
     7                                  ;************************************************************************
     8                                  
     9                                  ;************************************************************************
    10                                  ;	マクロ
    11                                  ;************************************************************************
    12                                  %include	"../include/define.s"
    13                              <1> ;************************************************************************
    14                              <1> ;	メモリイメージ
    15                              <1> ;************************************************************************
    16                              <1> 
    17                              <1> 		;---------------------------------------
    18                              <1> 		;           |            | 
    19                              <1> 		;           |____________| 
    20                              <1> 		; 0000_7A00 |            | ( 512) スタック
    21                              <1> 		;           |____________| 
    22                              <1> 		; 0000_7C00 |            | (  8K) ブート
    23                              <1> 		;           =            = 
    24                              <1> 		;           |____________| 
    25                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    26                              <1> 		;           =            = 
    27                              <1> 		;           |____________| 
    28                              <1> 		; 0000_BC00 |////////////| 
    29                              <1> 		;           =            = 
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    32                              <1> 		;           |____________| 
    33                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    34                              <1> 		;           |____________| 
    35                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    36                              <1> 		;           |            | 
    37                              <1> 		;           =            = 
    38                              <1> 		;           |____________| 
    39                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    40                              <1> 		;           |            | （各タスク1K）
    41                              <1> 		;           =            = 
    42                              <1> 		;           |____________| 
    43                              <1> 		; 0010_5000 |            | Dir
    44                              <1> 		;      6000 |____________| Page
    45                              <1> 		; 0010_7000 |            | Dir
    46                              <1> 		;      8000 |____________| Page
    47                              <1> 		; 0010_9000 |////////////| 
    48                              <1> 		;           |            | 
    49                              <1> 
    50                              <1> 
    51                              <1>         BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    52                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    53                              <1>         SECT_SIZE			equ		(512)			; セクタサイズ
    54                              <1>         BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    13                                  %include	"../include/macro.s"
    14                              <1> ;************************************************************************
    15                              <1> ; 関数呼び出し用マクロ
    16                              <1> ;
    17                              <1> ; 使い方：
    18                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    19                              <1> ;
    20                              <1> ;************************************************************************
    21                              <1> 
    22                              <1> %macro cdecl 1-*.nolist
    23                              <1> 
    24                              <1>     %rep %0 - 1
    25                              <1>         push    %{-1:-1}
    26                              <1>         %rotate -1
    27                              <1>     %endrep
    28                              <1>     %rotate -1
    29                              <1> 
    30                              <1>         call    %1
    31                              <1> 
    32                              <1>     %if 1 < %0
    33                              <1>         add     sp,(__BITS__ >> 3) * (%0 - 1)
    34                              <1>     %endif
    35                              <1> 
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> ;************************************************************************
    39                              <1> ;	構造体
    40                              <1> ;************************************************************************
    41                              <1> 
    42                              <1> ;-----------------------------------------------
    43                              <1> ;	ドライブパラメータ
    44                              <1> ;-----------------------------------------------
    45                              <1> struc drive
    46 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
    47 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
    48 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
    49 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
    50                              <1> endstruc
    14                                  
    15                                  		ORG		BOOT_LOAD						; ロードアドレスをアセンブラに指示
    16                                  
    17                                  ;************************************************************************
    18                                  ;	エントリポイント
    19                                  ;************************************************************************
    20                                  entry:
    21                                  		;---------------------------------------
    22                                  		; BPB(BIOS Parameter Block)
    23                                  		;---------------------------------------
    24 00000000 EB58                    		jmp		ipl								; IPLへジャンプ
    25 00000002 90<rep 58h>             		times	90 - ($ - $$) db 0x90			; 
    26                                  
    27                                  		;---------------------------------------
    28                                  		; IPL(Initial Program Loader)
    29                                  		;---------------------------------------
    30                                  ipl:
    31 0000005A FA                      		cli										; // 割り込み禁止
    32                                  
    33 0000005B B80000                  		mov		ax, 0x0000						; AX = 0x0000;
    34 0000005E 8ED8                    		mov		ds, ax							; DS = 0x0000;
    35 00000060 8EC0                    		mov		es, ax							; ES = 0x0000;
    36 00000062 8ED0                    		mov		ss, ax							; SS = 0x0000;
    37 00000064 BC007C                  		mov		sp, BOOT_LOAD					; SP = 0x7C00;
    38                                  
    39 00000067 FB                      		sti										; // 割り込み許可
    40                                  
    41 00000068 8816[B800]              		mov		[BOOT + drive.no], dl			; ブートドライブを保存
    42                                  
    43                                  		;---------------------------------------
    44                                  		; 文字列を表示
    45                                  		;---------------------------------------
    46 0000006C 68[9900]E84E0083C4-     		cdecl	puts, .s0						; puts(.s0);
    46 00000074 02                 
    47                                  
    48                                  		;---------------------------------------
    49                                  		; 残りのセクタを全て読み込む
    50                                  		;---------------------------------------
    51 00000075 BB0F00                  		mov		bx, BOOT_SECT - 1				; BX = 残りのブートセクタ数;
    52 00000078 B9007E                  		mov		cx, BOOT_LOAD + SECT_SIZE		; CX = 次のロードアドレス;
    53                                  
    54 0000007B 515368[B800]E89B00-     		cdecl	read_chs, BOOT, bx, cx			; AX = read_chs(.chs, bx, cx);
    54 00000083 83C406             
    55                                  
    56 00000086 39D8                    		cmp		ax, bx							; if (AX != 残りのセクタ数)
    57 00000088 740C                    .10Q:	jz		.10E							; {
    58 0000008A 68[A600]E8300083C4-     .10T:	cdecl	puts, .e0						;   puts(.e0);
    58 00000092 02                 
    59 00000093 E84900                  		call	reboot							;   reboot(); // 再起動
    60                                  .10E:											; }
    61                                  
    62                                  		;---------------------------------------
    63                                  		; 次のステージへ移行
    64                                  		;---------------------------------------
    65 00000096 E92802                  		jmp		stage_2							; ブート処理の第2ステージ
    66                                  
    67                                  		;---------------------------------------
    68                                  		; データ
    69                                  		;---------------------------------------
    70 00000099 426F6F74696E672E2E-     .s0		db	"Booting...", 0x0A, 0x0D, 0
    70 000000A2 2E0A0D00           
    71 000000A6 4572726F723A736563-     .e0		db	"Error:sector read", 0
    71 000000AF 746F72207265616400 
    72                                  
    73                                  ;************************************************************************
    74                                  ;	ブートドライブに関する情報
    75                                  ;************************************************************************
    76                                  ALIGN 2, db 0
    77                                  BOOT:											; ブートドライブに関する情報
    78                                  	istruc	drive
    79 000000B8 0000                    		at	drive.no,		dw	0				; ドライブ番号
    80 000000BA 0000                    		at	drive.cyln,		dw	0				; C:シリンダ
    81 000000BC 0000                    		at	drive.head,		dw	0				; H:ヘッド
    82 000000BE 0200                    		at	drive.sect,		dw	2				; S:セクタ
    83                                  	iend
    84                                  
    85                                  ;************************************************************************
    86                                  ;	モジュール
    87                                  ;************************************************************************
    88                                  %include	"../modules/real/puts.s"
    89                              <1> ;************************************************************************
    90                              <1> ;	文字列表示
    91                              <1> ;------------------------------------------------------------------------
    92                              <1> ;	BIOS を使用
    93                              <1> ;========================================================================
    94                              <1> ;■書式		: void puts(str);
    95                              <1> ;
    96                              <1> ;■引数
    97                              <1> ;	str		: 文字列のアドレス
    98                              <1> ;
    99                              <1> ;■戻り値	: 無し
   100                              <1> ;************************************************************************
   101                              <1> puts:
   102                              <1> 		;---------------------------------------
   103                              <1> 		; 【スタックフレームの構築】
   104                              <1> 		;---------------------------------------
   105                              <1> 												; ------|--------
   106                              <1> 												;    + 4| 文字列のアドレス
   107                              <1> 												;    + 2| IP（戻り番地）
   108 000000C0 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   109 000000C1 89E5                <1> 		mov		bp, sp							; ------+--------
   110                              <1> 
   111                              <1> 		;---------------------------------------
   112                              <1> 		; 【レジスタの保存】
   113                              <1> 		;---------------------------------------
   114 000000C3 50                  <1> 		push	ax
   115 000000C4 53                  <1> 		push	bx
   116 000000C5 56                  <1> 		push	si
   117                              <1> 
   118                              <1> 		;---------------------------------------
   119                              <1> 		; 引数を取得
   120                              <1> 		;---------------------------------------
   121 000000C6 8B7604              <1> 		mov		si, [bp + 4]					; SI = 文字列のアドレス;
   122                              <1> 
   123                              <1> 		;---------------------------------------
   124                              <1> 		; 【処理の開始】
   125                              <1> 		;---------------------------------------
   126 000000C9 B40E                <1> 		mov		ah, 0x0E						; // テレタイプ式1文字出力
   127 000000CB BB0000              <1> 		mov		bx, 0x0000						; // ページ番号と文字色を0に設定
   128 000000CE FC                  <1> 		cld										; DF = 0; // アドレス加算
   129                              <1> .10L:											; do
   130                              <1> 												; {
   131 000000CF AC                  <1> 		lodsb									;   AL = *SI++;
   132                              <1> 												;   
   133 000000D0 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   134 000000D2 7404                <1> 		je		.10E							;     break;
   135                              <1> 												;   
   136 000000D4 CD10                <1> 		int		0x10							;   Int10(0x0E, AL); // 文字出力
   137 000000D6 EBF7                <1> 		jmp		.10L							;   
   138                              <1> .10E:											; } while (1);
   139                              <1> 
   140                              <1> 		;---------------------------------------
   141                              <1> 		; 【レジスタの復帰】
   142                              <1> 		;---------------------------------------
   143 000000D8 5E                  <1> 		pop		si
   144 000000D9 5B                  <1> 		pop		bx
   145 000000DA 58                  <1> 		pop		ax
   146                              <1> 
   147                              <1> 		;---------------------------------------
   148                              <1> 		; 【スタックフレームの破棄】
   149                              <1> 		;---------------------------------------
   150 000000DB 89EC                <1> 		mov		sp, bp
   151 000000DD 5D                  <1> 		pop		bp
   152                              <1> 
   153 000000DE C3                  <1> 		ret
   154                              <1> 
    89                                  %include	"../modules/real/reboot.s"
    90                              <1> ;************************************************************************
    91                              <1> ;	メッセージを表示して再起動を行う
    92                              <1> ;========================================================================
    93                              <1> ;■書式		: void reboot(void);
    94                              <1> ;
    95                              <1> ;■引数		: 無し
    96                              <1> ;
    97                              <1> ;■戻り値;	: 無し
    98                              <1> ;************************************************************************
    99                              <1> reboot:
   100                              <1> 		;---------------------------------------
   101                              <1> 		; メッセージを表示
   102                              <1> 		;---------------------------------------
   103 000000DF 68[FB00]E8DBFF83C4- <1> 		cdecl	puts, .s0						; // 再起動メッセージを表示
   103 000000E7 02                  <1>
   104                              <1> 
   105                              <1> 		;---------------------------------------
   106                              <1> 		; キー入力待ち
   107                              <1> 		;---------------------------------------
   108                              <1> .10L:											; do
   109                              <1> 												; {
   110 000000E8 B410                <1> 		mov		ah, 0x10						;   // キー入力待ち
   111 000000EA CD16                <1> 		int		0x16							;   AL = BIOS(0x16, 0x10);
   112                              <1> 												;   
   113 000000EC 3C20                <1> 		cmp		al, ' '							;   ZF = AL == ' ';
   114 000000EE 75F8                <1> 		jne		.10L							; } while (!ZF);
   115                              <1> 
   116                              <1> 		;---------------------------------------
   117                              <1> 		; 改行を出力
   118                              <1> 		;---------------------------------------
   119 000000F0 68[1901]E8CAFF83C4- <1> 		cdecl	puts, .s1						; 改行
   119 000000F8 02                  <1>
   120                              <1> 
   121                              <1> 		;---------------------------------------
   122                              <1> 		; 再起動
   123                              <1> 		;---------------------------------------
   124 000000F9 CD19                <1> 		int		0x19							; BIOS(0x19);       // reboot();
   125                              <1> 
   126                              <1> 		;---------------------------------------
   127                              <1> 		; 文字列データ
   128                              <1> 		;---------------------------------------
   129 000000FB 0A0D50757368205350- <1> .s0		db	0x0A, 0x0D, "Push SPACE key to reboot...", 0
   129 00000104 414345206B65792074- <1>
   129 0000010D 6F207265626F6F742E- <1>
   129 00000116 2E2E00              <1>
   130 00000119 0A0D0A0D00          <1> .s1		db	0x0A, 0x0D, 0x0A, 0x0D, 0
   131                              <1> 
    90                                  %include	"../modules/real/read_chs.s"
    91                              <1> ;************************************************************************
    92                              <1> ;	セクタ読み込み（CHS指定）
    93                              <1> ;------------------------------------------------------------------------
    94                              <1> ;	BIOSコール（INT13 AH=0x02）を使ったセクタ読み出し
    95                              <1> ;========================================================================
    96                              <1> ;■書式		: WORD read_chs(drive, sect, dst);
    97                              <1> ;
    98                              <1> ;■引数
    99                              <1> ;	drive	: drive構造体のアドレス
   100                              <1> ;	sect	: 読み出しセクタ数
   101                              <1> ;	dst		: 読み出し先アドレス
   102                              <1> ;
   103                              <1> ;■戻り値	: 読み込んだセクタ数
   104                              <1> ;************************************************************************
   105                              <1> read_chs:
   106                              <1> 		;---------------------------------------
   107                              <1> 		; 【スタックフレームの構築】
   108                              <1> 		;---------------------------------------
   109                              <1> 												; ------|--------
   110                              <1> 												;    + 8| コピー先
   111                              <1> 												;    + 6| セクタ数
   112                              <1> 												;    + 4| パラメータバッファ
   113                              <1> 												; ------+----------------
   114                              <1> 												;    + 2| IP（戻り番地）
   115 0000011E 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   116 0000011F 89E5                <1> 		mov		bp, sp							; ------+--------
   117 00000121 6A03                <1> 		push	3								;    - 2| retry = 3; // リトライ回数
   118 00000123 6A00                <1> 		push	0								;    - 4| sect  = 0; // 読み込みセクタ数
   119                              <1> 
   120                              <1> 		;---------------------------------------
   121                              <1> 		; 【レジスタの保存】
   122                              <1> 		;---------------------------------------
   123 00000125 53                  <1> 		push	bx
   124 00000126 51                  <1> 		push	cx
   125 00000127 52                  <1> 		push	dx
   126 00000128 06                  <1> 		push	es
   127 00000129 56                  <1> 		push	si
   128                              <1> 
   129                              <1> 		;---------------------------------------
   130                              <1> 		; 【処理の開始】
   131                              <1> 		;---------------------------------------
   132 0000012A 8B7604              <1> 		mov		si, [bp + 4]					; SI = SRCバッファ;
   133                              <1> 
   134                              <1> 		;---------------------------------------
   135                              <1> 		; CXレジスタの設定
   136                              <1> 		;（BIOSコールの呼び出しに適した形に変換）
   137                              <1> 		;---------------------------------------
   138 0000012D 8A6C02              <1> 		mov		ch, [si + drive.cyln + 0]		; CH   = シリンダ番号（下位バイト）
   139 00000130 8A4C03              <1> 		mov		cl, [si + drive.cyln + 1]		; CL   = シリンダ番号（上位バイト）
   140 00000133 C0E106              <1> 		shl		cl, 6							; CL <<= 6; // 最上位2ビットにシフト
   141 00000136 0A4C06              <1> 		or		cl, [si + drive.sect]			; CL  |= セクタ番号;
   142                              <1> 
   143                              <1> 		;---------------------------------------
   144                              <1> 		; セクタ読み込み
   145                              <1> 		;---------------------------------------
   146 00000139 8A7404              <1> 		mov		dh, [si + drive.head]			; DH = ヘッド番号;
   147 0000013C 8A14                <1> 		mov		dl, [si + 0]					; DL = ドライブ番号;
   148 0000013E B80000              <1> 		mov		ax, 0x0000						; AX = 0x0000;
   149 00000141 8EC0                <1> 		mov		es, ax							; ES = セグメント
   150 00000143 8B5E08              <1> 		mov		bx, [bp + 8]					; BX = コピー先;
   151                              <1> .10L:											; do
   152                              <1> 												; {
   153 00000146 B402                <1> 		mov		ah, 0x02						;   AH = セクタ読み込み
   154 00000148 8A4606              <1> 		mov		al, [bp + 6]					;   AL = セクタ数
   155                              <1> 												;   
   156 0000014B CD13                <1> 		int		0x13							;   CF = BIOS(0x13, 0x02);
   157 0000014D 7304                <1> 		jnc		.11E							;   if (CF)
   158                              <1> 												;   {
   159 0000014F B000                <1> 		mov		al, 0							;     AL = 0;
   160 00000151 EB0C                <1> 		jmp		.10E							;     break;
   161                              <1> .11E:											;   }
   162                              <1> 												;   
   163 00000153 3C00                <1> 		cmp		al, 0							;   if (読み込んだセクタがあれば)
   164 00000155 7508                <1> 		jne		.10E							;     break;
   165                              <1> 												;   
   166 00000157 B80000              <1> 		mov		ax, 0							;   ret = 0; // 戻り値を設定
   167 0000015A FF4EFE              <1> 		dec		word [bp - 2]					; }
   168 0000015D 75E7                <1> 		jnz		.10L							; while (--retry);
   169                              <1> .10E:
   170 0000015F B400                <1> 		mov		ah, 0							; AH = 0; // ステータス情報は破棄
   171                              <1> 
   172                              <1> 		;---------------------------------------
   173                              <1> 		; 【レジスタの復帰】
   174                              <1> 		;---------------------------------------
   175 00000161 5E                  <1> 		pop		si
   176 00000162 07                  <1> 		pop		es
   177 00000163 5A                  <1> 		pop		dx
   178 00000164 59                  <1> 		pop		cx
   179 00000165 5B                  <1> 		pop		bx
   180                              <1> 
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 【スタックフレームの破棄】
   183                              <1> 		;---------------------------------------
   184 00000166 89EC                <1> 		mov		sp, bp
   185 00000168 5D                  <1> 		pop		bp
   186                              <1> 
   187 00000169 C3                  <1> 		ret
   188                              <1> 
    91                                  
    92                                  ;************************************************************************
    93                                  ;	ブートフラグ（先頭512バイトの終了）
    94                                  ;************************************************************************
    95 0000016A 00<rep 94h>             		times	510 - ($ - $$) db 0x00
    96 000001FE 55AA                    		db	0x55, 0xAA
    97                                  
    98                                  ;************************************************************************
    99                                  ;	モジュール（先頭512バイト以降に配置）
   100                                  ;************************************************************************
   101                                  %include	"../modules/real/itoa.s"
   102                              <1> ;************************************************************************
   103                              <1> ;	数値を文字に変換
   104                              <1> ;========================================================================
   105                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
   106                              <1> ;
   107                              <1> ;■引数
   108                              <1> ;	num		: 変換する数値
   109                              <1> ;	buff	: 保存先バッファアドレス
   110                              <1> ;	size	: 保存先バッファサイズ
   111                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
   112                              <1> ;	flags	: フラグ
   113                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
   114                              <1> ;			:      : 0=空白を' '（スペース）で埋める
   115                              <1> ;			:   B1 : 1=＋/-符号を表示する
   116                              <1> ;			:      : 0=＋/-符号を表示しない
   117                              <1> ;			:   B0 : 1=符号付き正数として扱う
   118                              <1> ;			:      : 0=符号無し正数として扱う
   119                              <1> ;
   120                              <1> ;■戻り値	: 無し
   121                              <1> ;************************************************************************
   122                              <1> itoa:
   123                              <1> 		;---------------------------------------
   124                              <1> 		; 【スタックフレームの構築】
   125                              <1> 		;---------------------------------------
   126                              <1> 												; ------|--------
   127                              <1> 												;    +12| フラグ
   128                              <1> 												;    +10| 基数
   129                              <1> 												;    + 8| バッファサイズ
   130                              <1> 												;    + 6| バッファアドレス
   131                              <1> 												;    + 4| 数値
   132                              <1> 												; ------|--------
   133                              <1> 												;    + 2| IP（戻り番地）
   134 00000200 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   135 00000201 89E5                <1> 		mov		bp, sp							; ------+--------
   136                              <1> 
   137                              <1> 		;---------------------------------------
   138                              <1> 		; 【レジスタの保存】
   139                              <1> 		;---------------------------------------
   140 00000203 50                  <1> 		push	ax
   141 00000204 53                  <1> 		push	bx
   142 00000205 51                  <1> 		push	cx
   143 00000206 52                  <1> 		push	dx
   144 00000207 56                  <1> 		push	si
   145 00000208 57                  <1> 		push	di
   146                              <1> 
   147                              <1> 		;---------------------------------------
   148                              <1> 		; 引数を取得
   149                              <1> 		;---------------------------------------
   150 00000209 8B4604              <1> 		mov		ax, [bp + 4]					; val  = 数値;
   151 0000020C 8B7606              <1> 		mov		si, [bp + 6]					; dst  = バッファアドレス;
   152 0000020F 8B4E08              <1> 		mov		cx, [bp + 8]					; size = 残りバッファサイズ;
   153                              <1> 
   154 00000212 89F7                <1> 		mov		di, si							; // バッファの最後尾
   155 00000214 01CF                <1> 		add		di, cx							; dst  = &dst[size - 1];
   156 00000216 4F                  <1> 		dec		di								; 
   157                              <1> 
   158 00000217 8B5E0C              <1> 		mov		bx, [bp +12]					; flags = オプション;
   159                              <1> 
   160                              <1> 		;---------------------------------------
   161                              <1> 		; 符号付き判定
   162                              <1> 		;---------------------------------------
   163 0000021A F7C30100            <1> 		test	bx, 0b0001						; if (flags & 0x01)// 符号付き
   164 0000021E 7408                <1> .10Q:	je		.10E							; {
   165 00000220 83F800              <1> 		cmp		ax, 0							;   if (val < 0)
   166 00000223 7D03                <1> .12Q:	jge		.12E							;   {
   167 00000225 83CB02              <1> 		or		bx, 0b0010						;     flags |=  2; // 符号表示
   168                              <1> .12E:											;   }
   169                              <1> .10E:											; }
   170                              <1> 
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 符号出力判定
   173                              <1> 		;---------------------------------------
   174 00000228 F7C30200            <1> 		test	bx, 0b0010						; if (flags & 0x02)// 符号出力判定
   175 0000022C 7410                <1> .20Q:	je		.20E							; {
   176 0000022E 83F800              <1> 		cmp		ax, 0							;   if (val < 0)
   177 00000231 7D07                <1> .22Q:	jge		.22F							;   {
   178 00000233 F7D8                <1> 		neg		ax								;     val *= -1;   // 符号反転
   179 00000235 C6042D              <1> 		mov		[si], byte '-'					;     *dst = '-';  // 符号表示
   180 00000238 EB03                <1> 		jmp		.22E							;   }
   181                              <1> .22F:											;   else
   182                              <1> 												;   {
   183 0000023A C6042B              <1> 		mov		[si], byte '+'					;     *dst = '+';  // 符号表示
   184                              <1> .22E:											;   }
   185 0000023D 49                  <1> 		dec		cx								;   size--;        // 残りバッファサイズの減算
   186                              <1> .20E:											; }
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; ASCII変換
   190                              <1> 		;---------------------------------------
   191 0000023E 8B5E0A              <1> 		mov		bx, [bp +10]					; BX = 基数;
   192                              <1> .30L:											; do
   193                              <1> 												; {
   194 00000241 BA0000              <1> 		mov		dx, 0							;   
   195 00000244 F7F3                <1> 		div		bx								;   DX = DX:AX % 基数;
   196                              <1> 												;   AX = DX:AX / 基数;
   197                              <1> 												;   
   198 00000246 89D6                <1> 		mov		si, dx							;   // テーブル参照
   199 00000248 8A94[7002]          <1> 		mov		dl, byte [.ascii + si]			;   DL = ASCII[DX];
   200                              <1> 												;   
   201 0000024C 8815                <1> 		mov		[di], dl						;   *dst = DL;
   202 0000024E 4F                  <1> 		dec		di								;   dst--;
   203                              <1> 												;   
   204 0000024F 83F800              <1> 		cmp		ax, 0							;   
   205 00000252 E0ED                <1> 		loopnz	.30L							; } while (AX);
   206                              <1> .30E:
   207                              <1> 
   208                              <1> 		;---------------------------------------
   209                              <1> 		; 空欄を埋める
   210                              <1> 		;---------------------------------------
   211 00000254 83F900              <1> 		cmp		cx, 0							; if (size)
   212 00000257 740D                <1> .40Q:	je		.40E							; {
   213 00000259 B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   214 0000025B 837E0C04            <1> 		cmp		[bp +12], word 0b0100			;   if (flags & 0x04)
   215 0000025F 7502                <1> .42Q:	jne		.42E							;   {
   216 00000261 B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   217                              <1> .42E:											;   }
   218 00000263 FD                  <1> 		std										;   // DF = 1（-方向）
   219 00000264 F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   220                              <1> .40E:											; }
   221                              <1> 
   222                              <1> 		;---------------------------------------
   223                              <1> 		; 【レジスタの復帰】
   224                              <1> 		;---------------------------------------
   225 00000266 5F                  <1> 		pop		di
   226 00000267 5E                  <1> 		pop		si
   227 00000268 5A                  <1> 		pop		dx
   228 00000269 59                  <1> 		pop		cx
   229 0000026A 5B                  <1> 		pop		bx
   230 0000026B 58                  <1> 		pop		ax
   231                              <1> 
   232                              <1> 		;---------------------------------------
   233                              <1> 		; 【スタックフレームの破棄】
   234                              <1> 		;---------------------------------------
   235 0000026C 89EC                <1> 		mov		sp, bp
   236 0000026E 5D                  <1> 		pop		bp
   237                              <1> 
   238 0000026F C3                  <1> 		ret
   239                              <1> 
   240 00000270 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   240 00000279 39414243444546      <1>
   241                              <1> 
   102                                  %include	"../modules/real/get_drive_param.s"
   103                              <1> ;************************************************************************
   104                              <1> ;	ドライブ情報の取得(LBA変換に必要な情報)
   105                              <1> ;------------------------------------------------------------------------
   106                              <1> ;	アクセス可能な最大セクタをdrive構造体に設定する
   107                              <1> ;	注）ドライブ番号（drive.no）を設定後に呼び出す事
   108                              <1> ;========================================================================
   109                              <1> ;■書式		: WORD get_drive_param(drive);
   110                              <1> ;
   111                              <1> ;■引数
   112                              <1> ;	drive	: drive構造体のアドレス
   113                              <1> ;
   114                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   115                              <1> ;************************************************************************
   116                              <1> get_drive_param:
   117                              <1> 		;---------------------------------------
   118                              <1> 		; 【スタックフレームの構築】
   119                              <1> 		;---------------------------------------
   120                              <1> 												; ------|--------
   121                              <1> 												;    + 4| パラメータバッファ
   122                              <1> 												;    + 2| IP（戻り番地）
   123 00000280 55                  <1> 		push	bp								;  BP+ 0| BP（元の値）
   124 00000281 89E5                <1> 		mov		bp, sp							; ------+--------
   125                              <1> 
   126                              <1> 		;---------------------------------------
   127                              <1> 		; 【レジスタの保存】
   128                              <1> 		;---------------------------------------
   129 00000283 53                  <1> 		push	bx
   130 00000284 51                  <1> 		push	cx
   131 00000285 06                  <1> 		push	es
   132 00000286 56                  <1> 		push	si
   133 00000287 57                  <1> 		push	di
   134                              <1> 
   135                              <1> 		;---------------------------------------
   136                              <1> 		; 【処理の開始】
   137                              <1> 		;---------------------------------------
   138 00000288 8B7604              <1> 		mov		si, [bp + 4]					; SI = バッファ
   139                              <1> 
   140 0000028B B80000              <1> 		mov		ax, 0							; Disk Base Table Pointerの初期化
   141 0000028E 8EC0                <1> 		mov		es, ax							; ES = 0;
   142 00000290 89C7                <1> 		mov		di, ax							; DI = 0;
   143                              <1> 
   144 00000292 B408                <1> 		mov		ah, 0x08						; // get drive parameters 
   145 00000294 8A14                <1> 		mov		dl, [si + drive.no]				; DL = ドライブ番号
   146 00000296 CD13                <1> 		int		0x13							; CF = BIOS(0x13, 0x08);
   147 00000298 721B                <1> .10Q:	jc		.10F							; if (0 == CF)
   148                              <1> .10T:											; {
   149 0000029A 88C8                <1> 		mov		al, cl							;   AX = セクタ数
   150 0000029C 83E03F              <1> 		and		ax, 0x3F						;   // 下位6ビットのみ有効
   151                              <1> 
   152 0000029F C0E906              <1> 		shr		cl, 6							;   CX = シリンダ数
   153 000002A2 C1C908              <1> 		ror		cx, 8							;   
   154 000002A5 41                  <1> 		inc		cx								;   
   155                              <1> 
   156 000002A6 0FB6DE              <1> 		movzx	bx, dh							;   BX = ヘッド数（1ベース）
   157 000002A9 43                  <1> 		inc		bx								;   
   158                              <1> 
   159 000002AA 894C02              <1> 		mov		[si + drive.cyln], cx			;   drive.syln = CX; // C:シリンダ数
   160 000002AD 895C04              <1> 		mov		[si + drive.head], bx			;   drive.head = BX; // H:ヘッド数
   161 000002B0 894406              <1> 		mov		[si + drive.sect], ax			;   drive.sect = AX; // S:セクタ数
   162                              <1> 
   163 000002B3 EB03                <1> 		jmp		.10E							; }
   164                              <1> .10F:											; else
   165                              <1> 												; {
   166 000002B5 B80000              <1> 		mov		ax, 0							;   AX = 0; // 失敗
   167                              <1> .10E:											; }
   168                              <1> 
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 【レジスタの復帰】
   171                              <1> 		;---------------------------------------
   172 000002B8 5F                  <1> 		pop		di
   173 000002B9 5E                  <1> 		pop		si
   174 000002BA 07                  <1> 		pop		es
   175 000002BB 59                  <1> 		pop		cx
   176 000002BC 5B                  <1> 		pop		bx
   177                              <1> 
   178                              <1> 		;---------------------------------------
   179                              <1> 		; 【スタックフレームの破棄】
   180                              <1> 		;---------------------------------------
   181 000002BD 89EC                <1> 		mov		sp, bp
   182 000002BF 5D                  <1> 		pop		bp
   183                              <1> 
   184 000002C0 C3                  <1> 		ret
   185                              <1> 
   103                                  
   104                                  ;************************************************************************
   105                                  ;	ブート処理の第2ステージ
   106                                  ;************************************************************************
   107                                  stage_2:
   108                                  		;---------------------------------------
   109                                  		; 文字列を表示
   110                                  		;---------------------------------------
   111 000002C1 68[3B03]E8F9FD83C4-     		cdecl	puts, .s0						; puts(.s0);
   111 000002C9 02                 
   112                                  
   113                                  		;---------------------------------------
   114                                  		; ドライブ情報を取得
   115                                  		;---------------------------------------
   116 000002CA 68[B800]E8B0FF83C4-     		cdecl	get_drive_param, BOOT			; get_drive_param(DX, BOOT.CYLN);
   116 000002D2 02                 
   117 000002D3 83F800                  		cmp		ax, 0							; if (0 == AX)
   118 000002D6 750C                    .10Q:	jne		.10E							; {
   119 000002D8 68[7203]E8E2FD83C4-     .10T:	cdecl	puts, .e0						;   puts(.e0);
   119 000002E0 02                 
   120 000002E1 E8FBFD                  		call	reboot							;   reboot(); // 再起動
   121                                  .10E:											; }
   122                                  
   123                                  		;---------------------------------------
   124                                  		; ドライブ情報を表示
   125                                  		;---------------------------------------
   126 000002E4 A1[B800]                		mov		ax, [BOOT + drive.no]			; AX = ブートドライブ;
   127 000002E7 6A046A106A0268-         		cdecl	itoa, ax, .p1, 2, 16, 0b0100	; 
   127 000002EE [5303]50E80CFF83C4-
   127 000002F6 0A                 
   128 000002F7 A1[BA00]                		mov		ax, [BOOT + drive.cyln]			; 
   129 000002FA 6A046A106A0468-         		cdecl	itoa, ax, .p2, 4, 16, 0b0100	; 
   129 00000301 [5B03]50E8F9FE83C4-
   129 00000309 0A                 
   130 0000030A A1[BC00]                		mov		ax, [BOOT + drive.head]			; AX = ヘッド数;
   131 0000030D 6A046A106A0268-         		cdecl	itoa, ax, .p3, 2, 16, 0b0100	; 
   131 00000314 [6503]50E8E6FE83C4-
   131 0000031C 0A                 
   132 0000031D A1[BE00]                		mov		ax, [BOOT + drive.sect]			; AX = トラックあたりのセクタ数;
   133 00000320 6A046A106A0268-         		cdecl	itoa, ax, .p4, 2, 16, 0b0100	; 
   133 00000327 [6D03]50E8D3FE83C4-
   133 0000032F 0A                 
   134 00000330 68[4A03]E88AFD83C4-     		cdecl	puts, .s1
   134 00000338 02                 
   135                                  
   136                                  		;---------------------------------------
   137                                  		; 処理の終了
   138                                  		;---------------------------------------
   139 00000339 EBFE                    		jmp		$								; while (1) ; // 無限ループ
   140                                  
   141                                  		;---------------------------------------
   142                                  		; データ
   143                                  		;---------------------------------------
   144 0000033B 326E64207374616765-     .s0		db	"2nd stage...", 0x0A, 0x0D, 0
   144 00000344 2E2E2E0A0D00       
   145                                  
   146 0000034A 2044726976653A3078      .s1		db	" Drive:0x"
   147 00000353 20202C20433A3078        .p1		db	"  , C:0x"
   148 0000035B 202020202C20483A30-     .p2		db	"    , H:0x"
   148 00000364 78                 
   149 00000365 20202C20533A3078        .p3		db	"  , S:0x"
   150 0000036D 20200A0D00              .p4		db	"  ", 0x0A, 0x0D, 0
   151                                  
   152 00000372 43616E277420676574-     .e0		db	"Can't get drive parameter.", 0
   152 0000037B 206472697665207061-
   152 00000384 72616D657465722E00 
   153                                  
   154                                  ;************************************************************************
   155                                  ;	パディング
   156                                  ;************************************************************************
   157 0000038D 00<rep 1C73h>           		times BOOT_SIZE - ($ - $$)		db	0	; パディング
   158                                  
