     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  ;************************************************************************
     8                                  ;	マクロ
     9                                  ;************************************************************************
    10                                  %include	"../include/define.s"
    11                              <1> ;************************************************************************
    12                              <1> ;	メモリイメージ
    13                              <1> ;************************************************************************
    14                              <1> 
    15                              <1> 		;---------------------------------------
    16                              <1> 		;           |            | 
    17                              <1> 		;           |____________| 
    18                              <1> 		; 0000_7A00 |            | ( 512) スタック
    19                              <1> 		;           |____________| 
    20                              <1> 		; 0000_7C00 |            | (  8K) ブート
    21                              <1> 		;           =            = 
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    24                              <1> 		;           =            = 
    25                              <1> 		;           |____________| 
    26                              <1> 		; 0000_BC00 |////////////| 
    27                              <1> 		;           =            = 
    28                              <1> 		;           |____________| 
    29                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    32                              <1> 		;           |____________| 
    33                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    34                              <1> 		;           |            | 
    35                              <1> 		;           =            = 
    36                              <1> 		;           |____________| 
    37                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    38                              <1> 		;           |            | （各タスク1K）
    39                              <1> 		;           =            = 
    40                              <1> 		;           |____________| 
    41                              <1> 		; 0010_5000 |            | Dir
    42                              <1> 		;      6000 |____________| Page
    43                              <1> 		; 0010_7000 |            | Dir
    44                              <1> 		;      8000 |____________| Page
    45                              <1> 		; 0010_9000 |////////////| 
    46                              <1> 		;           |            | 
    47                              <1> 
    48                              <1> 
    49                              <1>         BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    50                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    51                              <1> 
    52                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    53                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    54                              <1> 
    55                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    56                              <1> 
    57                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    58                              <1> 
    59                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    60                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    61                              <1> 
    62                              <1> 		E820_RECORD_SIZE	equ		20
    63                              <1> 
    64                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    11                                  %include	"../include/macro.s"
    12                              <1> ;************************************************************************
    13                              <1> ; 関数呼び出し用マクロ
    14                              <1> ;
    15                              <1> ; 使い方：
    16                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
    17                              <1> ;
    18                              <1> ;************************************************************************
    19                              <1> %macro  cdecl 1-*.nolist
    20                              <1> 
    21                              <1> 	%rep  %0 - 1
    22                              <1> 		push	%{-1:-1}
    23                              <1> 		%rotate -1
    24                              <1> 	%endrep 
    25                              <1> 	%rotate -1
    26                              <1> 
    27                              <1> 		call	%1
    28                              <1> 
    29                              <1> 	%if 1 < %0
    30                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    31                              <1> 	%endif
    32                              <1> 
    33                              <1> %endmacro
    34                              <1> 
    35                              <1> ;************************************************************************
    36                              <1> ; 割り込みベクタ設定用
    37                              <1> ;
    38                              <1> ; 使い方：
    39                              <1> ;	set_vect	ベクタ番号, 割り込み処理 [, フラグ]
    40                              <1> ;
    41                              <1> ;************************************************************************
    42                              <1> %macro  set_vect 1-*.nolist
    43                              <1> 		push	eax
    44                              <1> 		push	edi
    45                              <1> 
    46                              <1> 		mov		edi, VECT_BASE + (%1 * 8)		; ベクタアドレス;
    47                              <1> 		mov		eax, %2
    48                              <1> 
    49                              <1> 	%if 3 == %0
    50                              <1> 		mov		[edi + 4], %3					; フラグ
    51                              <1> 	%endif
    52                              <1> 
    53                              <1> 		mov		[edi + 0], ax					; 例外アドレス[15: 0]
    54                              <1> 		shr		eax, 16							; 
    55                              <1> 		mov		[edi + 6], ax					; 例外アドレス[31:16]
    56                              <1> 
    57                              <1> 		pop		edi
    58                              <1> 		pop		eax
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> ;************************************************************************
    62                              <1> ; ポート出力用
    63                              <1> ;
    64                              <1> ; 使い方：
    65                              <1> ;	outp	ポート番号, 出力値
    66                              <1> ;
    67                              <1> ;************************************************************************
    68                              <1> %macro  outp 2
    69                              <1> 		mov		al, %2
    70                              <1> 		out		%1, al
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> ;************************************************************************
    74                              <1> ; ディスクリプタの情報を設定
    75                              <1> ;
    76                              <1> ; 使い方：
    77                              <1> ;	set_desc	ディスクリプタ, ベース
    78                              <1> ;
    79                              <1> ;************************************************************************
    80                              <1> %macro  set_desc 2-* 
    81                              <1> 		push	eax
    82                              <1> 		push	edi
    83                              <1> 
    84                              <1> 		mov		edi, %1							; ディスクリプタアドレス
    85                              <1> 		mov		eax, %2							; ベースアドレス
    86                              <1> 
    87                              <1> 	%if 3 == %0
    88                              <1> 		mov		[edi + 0], %3					; リミット
    89                              <1> 	%endif
    90                              <1> 
    91                              <1> 		mov		[edi + 2], ax					; ベース（[15: 0]）
    92                              <1> 		shr		eax, 16							; 
    93                              <1> 		mov		[edi + 4], al					; ベース（[23:16]）
    94                              <1> 		mov		[edi + 7], ah					; ベース（[31:24]）
    95                              <1> 
    96                              <1> 		pop		edi
    97                              <1> 		pop		eax
    98                              <1> %endmacro
    99                              <1> 
   100                              <1> ;************************************************************************
   101                              <1> ; ゲートディスクリプタのオフセットを設定
   102                              <1> ;
   103                              <1> ; 使い方：
   104                              <1> ;	set_gate	ディスクリプタ, オフセット
   105                              <1> ;
   106                              <1> ;************************************************************************
   107                              <1> %macro  set_gate 2-* 
   108                              <1> 		push	eax
   109                              <1> 		push	edi
   110                              <1> 
   111                              <1> 		mov		edi, %1							; ディスクリプタアドレス
   112                              <1> 		mov		eax, %2							; ベースアドレス
   113                              <1> 
   114                              <1> 		mov		[edi + 0], ax					; ベース（[15: 0]）
   115                              <1> 		shr		eax, 16							; 
   116                              <1> 		mov		[edi + 6], ax					; ベース（[31:16]）
   117                              <1> 
   118                              <1> 		pop		edi
   119                              <1> 		pop		eax
   120                              <1> %endmacro
   121                              <1> 
   122                              <1> ;************************************************************************
   123                              <1> ;	構造体
   124                              <1> ;************************************************************************
   125                              <1> 
   126                              <1> ;-----------------------------------------------
   127                              <1> ;	ドライブパラメータ
   128                              <1> ;-----------------------------------------------
   129                              <1> struc drive
   130 00000000 ????                <1> 		.no				resw	1				; ドライブ番号
   131 00000002 ????                <1> 		.cyln			resw	1				; C:シリンダ
   132 00000004 ????                <1> 		.head			resw	1				; H:ヘッド
   133 00000006 ????                <1> 		.sect			resw	1				; S:セクタ
   134                              <1> endstruc
   135                              <1> 
   136                              <1> ;-----------------------------------------------
   137                              <1> ;	リングバッファ
   138                              <1> ;-----------------------------------------------
   139                              <1> %define		RING_ITEM_SIZE		(1 << 4)
   140                              <1> %define		RING_INDEX_MASK		(RING_ITEM_SIZE - 1)
   141                              <1> 
   142                              <1> struc ring_buff
   143 00000000 ????????            <1> 		.rp				resd	1				; RP:書き込み位置
   144 00000004 ????????            <1> 		.wp				resd	1				; WP:読み込み位置
   145 00000008 <res 10h>           <1> 		.item			resb	RING_ITEM_SIZE	; バッファ
   146                              <1> endstruc
   147                              <1> 
   148                              <1> ;-----------------------------------------------
   149                              <1> ;	バラ曲線描画パラメータ
   150                              <1> ;-----------------------------------------------
   151                              <1> struc rose
   152 00000000 ????????            <1> 		.x0				resd	1				; 左上座標：X0
   153 00000004 ????????            <1> 		.y0				resd	1				; 左上座標：Y0
   154 00000008 ????????            <1> 		.x1				resd	1				; 右下座標：X1
   155 0000000C ????????            <1> 		.y1				resd	1				; 右下座標：Y1
   156                              <1> 
   157 00000010 ????????            <1> 		.n				resd	1				; 変数：n
   158 00000014 ????????            <1> 		.d				resd	1				; 変数：d
   159                              <1> 
   160 00000018 ????????            <1> 		.color_x		resd	1				; 描画色：X軸
   161 0000001C ????????            <1> 		.color_y		resd	1				; 描画色：Y軸
   162 00000020 ????????            <1> 		.color_z		resd	1				; 描画色：枠
   163 00000024 ????????            <1> 		.color_s		resd	1				; 描画色：文字
   164 00000028 ????????            <1> 		.color_f		resd	1				; 描画色：グラフ描画色
   165 0000002C ????????            <1> 		.color_b		resd	1				; 描画色：グラフ消去色
   166                              <1> 
   167 00000030 <res 10h>           <1> 		.title			resb	16				; タイトル
   168                              <1> endstruc
   169                              <1> 
    12                                  
    13                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    14                                  
    15                                  [BITS 32]
    16                                  ;************************************************************************
    17                                  ;	エントリポイント
    18                                  ;************************************************************************
    19                                  kernel:
    20                                  		;---------------------------------------
    21                                  		; フォントアドレスを取得
    22                                  		;---------------------------------------
    23 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    24 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    25 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    26 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    27 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    28 00000011 A3[08010000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    29                                  
    30                                  		;---------------------------------------
    31                                  		; 初期化
    32                                  		;---------------------------------------
    33 00000016 E8B7060000              		cdecl	init_int						; // 割り込みベクタの初期化
    34 0000001B E838080000              		cdecl	init_pic						; // 割り込みコントローラの初期化
    35                                  
    36 00000020 5057BF00001000B8-       		set_vect	0x00, int_zero_div			; // 割り込み処理の登録：0除算
    36 00000028 [3A080000]668907C1-
    36 00000030 E810668947065F58   
    37 00000038 5057BF08011000B8-       		set_vect	0x21, int_keyboard			; // 割り込み処理の登録：KBC
    37 00000040 [C2080000]668907C1-
    37 00000048 E810668947065F58   
    38 00000050 5057BF40011000B8-       		set_vect	0x28, int_rtc				; // 割り込み処理の登録：RTC
    38 00000058 [97080000]668907C1-
    38 00000060 E810668947065F58   
    39                                  
    40                                  		;---------------------------------------
    41                                  		; デバイスの割り込み許可
    42                                  		;---------------------------------------
    43 00000068 6A10E8140800006683-     		cdecl	rtc_int_en, 0x10				; rtc_int_en(UIE); // 更新サイクル終了割り込み許可
    43 00000071 C404               
    44                                  
    45                                  		;---------------------------------------
    46                                  		; IMR(割り込みマスクレジスタ)の設定
    47                                  		;---------------------------------------
    48                                  		outp	0x21, 0b_1111_1001				; // 割り込み有効：スレーブPIC/KBC
    69 00000073 B0F9                <1>  mov al, %2
    70 00000075 E621                <1>  out %1, al
    49                                  		outp	0xA1, 0b_1111_1110				; // 割り込み有効：RTC
    69 00000077 B0FE                <1>  mov al, %2
    70 00000079 E6A1                <1>  out %1, al
    50                                  
    51                                  		;---------------------------------------
    52                                  		; CPUの割り込み許可
    53                                  		;---------------------------------------
    54 0000007B FB                      		sti										; // 割り込み許可
    55                                  
    56                                  		;---------------------------------------
    57                                  		; フォントの一覧表示
    58                                  		;---------------------------------------
    59 0000007C 6A0D6A3FE802020000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
    59 00000085 6683C408           
    60 00000089 6A046A3FE883020000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
    60 00000092 6683C408           
    61                                  
    62                                  		;---------------------------------------
    63                                  		; 文字列の表示
    64                                  		;---------------------------------------
    65 00000096 68[F1000000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
    65 0000009E 00006A0E6A19E82302-
    65 000000A7 00006683C410       
    66                                  
    67                                  .10L:											; while (;;)
    68                                  												; {
    69                                  		;---------------------------------------
    70                                  		; 時刻の表示
    71                                  		;---------------------------------------
    72 000000AD A1[0C010000]            		mov		eax, [RTC_TIME]					;   // 時刻の取得
    73 000000B2 5068000700006A006A-     		cdecl	draw_time, 72, 0, 0x0700, eax	;   // 時刻の表示
    73 000000BB 48E8730500006683C4-
    73 000000C4 10                 
    74                                  
    75                                  		;---------------------------------------
    76                                  		; キーコードの取得
    77                                  		;---------------------------------------
    78 000000C5 68[04010000]68-         		cdecl	ring_rd, _KEY_BUFF, .int_key	;   EAX = ring_rd(buff, &int_key);
    78 000000CB [E8080000]E82C0800-
    78 000000D3 006683C408         
    79 000000D8 83F800                  		cmp		eax, 0							;   if (EAX == 0)
    80 000000DB 7412                    		je		.10E							;   {
    81                                  												;   
    82                                  		;---------------------------------------
    83                                  		; キーコードの表示
    84                                  		;---------------------------------------
    85 000000DD 68[E8080000]6A1D6A-     		cdecl	draw_key, 2, 29, _KEY_BUFF		;     ring_show(key_buff); // 全要素を表示
    85 000000E5 02E8760800006683C4-
    85 000000EE 0C                 
    86                                  .10E:											;   }
    87 000000EF EBBC                    		jmp		.10L							; }
    88                                  
    89 000000F1 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
    89 000000FA 65726E656C212000   
    90                                  
    91 00000102 00<rep 2h>              ALIGN 4, db 0
    92 00000104 00000000                .int_key:	dd	0
    93                                  
    94                                  ALIGN 4, db 0
    95 00000108 00000000                FONT_ADR:	dd	0
    96 0000010C 00000000                RTC_TIME:	dd	0
    97                                  
    98                                  ;************************************************************************
    99                                  ;	モジュール
   100                                  ;************************************************************************
   101                                  %include	"../modules/protect/vga.s"
   102                              <1> ;************************************************************************
   103                              <1> ;	読み込みプレーンの選択
   104                              <1> ;========================================================================
   105                              <1> ;■書式		: void vga_set_read_plane(plane);
   106                              <1> ;
   107                              <1> ;■引数
   108                              <1> ;	plane	: 読み込みプレーン
   109                              <1> ;
   110                              <1> ;■戻り値	: 無し
   111                              <1> ;************************************************************************
   112                              <1> vga_set_read_plane:
   113                              <1> 		;---------------------------------------
   114                              <1> 		; 【スタックフレームの構築】
   115                              <1> 		;---------------------------------------
   116                              <1> 												; EBP+ 8| プレーン（インデックス）
   117                              <1> 												; ------+----------------
   118 00000110 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   119 00000111 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   120                              <1> 												; ------+----------------
   121                              <1> 
   122                              <1> 		;---------------------------------------
   123                              <1> 		; 【レジスタの保存】
   124                              <1> 		;---------------------------------------
   125 00000113 50                  <1> 		push	eax
   126 00000114 52                  <1> 		push	edx
   127                              <1> 
   128                              <1> 		;---------------------------------------
   129                              <1> 		; 読み込みプレーンの選択
   130                              <1> 		;---------------------------------------
   131 00000115 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
   132 00000118 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
   133 0000011B B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
   134 0000011D 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
   135 00000121 66EF                <1> 		out		dx, ax							; // ポート出力
   136                              <1> 
   137                              <1> 		;---------------------------------------
   138                              <1> 		; 【レジスタの復帰】
   139                              <1> 		;---------------------------------------
   140 00000123 5A                  <1> 		pop		edx
   141 00000124 58                  <1> 		pop		eax
   142                              <1> 
   143                              <1> 		;---------------------------------------
   144                              <1> 		; 【スタックフレームの破棄】
   145                              <1> 		;---------------------------------------
   146 00000125 89EC                <1> 		mov		esp, ebp
   147 00000127 5D                  <1> 		pop		ebp
   148                              <1> 
   149 00000128 C3                  <1> 		ret
   150                              <1> 
   151                              <1> 
   152                              <1> ;************************************************************************
   153                              <1> ;	書き込みプレーンを選択
   154                              <1> ;========================================================================
   155                              <1> ;■書式		: void vga_set_write_plane(plane);
   156                              <1> ;
   157                              <1> ;■引数
   158                              <1> ;	plane	: 書き込みプレーン
   159                              <1> ;
   160                              <1> ;■戻り値	: 無し
   161                              <1> ;************************************************************************
   162                              <1> vga_set_write_plane:
   163                              <1> 		;---------------------------------------
   164                              <1> 		; 【スタックフレームの構築】
   165                              <1> 		;---------------------------------------
   166                              <1> 												; EBP+ 8| プレーン（ビット指定）
   167                              <1> 												; ------+----------------
   168 00000129 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   169 0000012A 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   170                              <1> 												; ------+----------------
   171                              <1> 
   172                              <1> 		;---------------------------------------
   173                              <1> 		; 【レジスタの保存】
   174                              <1> 		;---------------------------------------
   175 0000012C 50                  <1> 		push	eax
   176 0000012D 52                  <1> 		push	edx
   177                              <1> 
   178                              <1> 		;---------------------------------------
   179                              <1> 		; 書き込みプレーンの選択
   180                              <1> 		;---------------------------------------
   181 0000012E 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
   182 00000131 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
   183 00000134 B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
   184 00000136 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
   185 0000013A 66EF                <1> 		out		dx, ax							; // ポート出力
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; 【レジスタの復帰】
   189                              <1> 		;---------------------------------------
   190 0000013C 5A                  <1> 		pop		edx
   191 0000013D 58                  <1> 		pop		eax
   192                              <1> 
   193                              <1> 		;---------------------------------------
   194                              <1> 		; 【スタックフレームの破棄】
   195                              <1> 		;---------------------------------------
   196 0000013E 89EC                <1> 		mov		esp, ebp
   197 00000140 5D                  <1> 		pop		ebp
   198                              <1> 
   199 00000141 C3                  <1> 		ret
   200                              <1> 
   201                              <1> 
   202                              <1> ;************************************************************************
   203                              <1> ;	フォントの書き込み
   204                              <1> ;========================================================================
   205                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   206                              <1> ;
   207                              <1> ;■引数
   208                              <1> ;	font	: FONTアドレス
   209                              <1> ;	vram	: VRAMアドレス
   210                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   211                              <1> ;	color	: 描画色
   212                              <1> ;
   213                              <1> ;■戻り値	: 無し
   214                              <1> ;************************************************************************
   215                              <1> vram_font_copy:
   216                              <1> 		;---------------------------------------
   217                              <1> 		; 【スタックフレームの構築】
   218                              <1> 		;---------------------------------------
   219                              <1> 												; EBP+20| 色（背景/前景色）
   220                              <1> 												; EBP+16| プレーン（ビット指定）
   221                              <1> 												; EBP+12| VRAMアドレス
   222                              <1> 												; EBP+ 8| FONTアドレス
   223                              <1> 												; ------+----------------
   224 00000142 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   225 00000143 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   226                              <1> 												; ------+----------------
   227                              <1> 
   228                              <1> 		;---------------------------------------
   229                              <1> 		; 【レジスタの保存】
   230                              <1> 		;---------------------------------------
   231 00000145 50                  <1> 		push	eax
   232 00000146 53                  <1> 		push	ebx
   233 00000147 51                  <1> 		push	ecx
   234 00000148 52                  <1> 		push	edx
   235 00000149 56                  <1> 		push	esi
   236 0000014A 57                  <1> 		push	edi
   237                              <1> 
   238                              <1> 		;---------------------------------------
   239                              <1> 		; 【処理の開始】
   240                              <1> 		;---------------------------------------
   241 0000014B 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   242 0000014E 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   243 00000151 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   244 00000155 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   245                              <1> 
   246 00000159 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   247 0000015B 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   248 0000015E FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   249                              <1> 
   250 00000160 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   251 00000162 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   252 00000165 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   253                              <1> 
   254                              <1> 		;---------------------------------------
   255                              <1> 		; 16ドットフォントのコピー
   256                              <1> 		;---------------------------------------
   257 00000167 FC                  <1> 		cld										; DF  = 0; // アドレス加算
   258                              <1> 
   259 00000168 B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   260                              <1> .10L:											; do
   261                              <1> 												; {
   262                              <1> 		;---------------------------------------
   263                              <1> 		; フォントマスクの作成
   264                              <1> 		;---------------------------------------
   265 0000016D AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   266 0000016E 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   267 00000170 F6D4                <1> 		not		ah								;   
   268                              <1> 
   269                              <1> 		;---------------------------------------
   270                              <1> 		; 前景色
   271                              <1> 		;---------------------------------------
   272 00000172 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   273                              <1> 
   274                              <1> 		;---------------------------------------
   275                              <1> 		; 背景色
   276                              <1> 		;---------------------------------------
   277 00000174 F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   278 0000017A 7404                <1> 		jz		.11F							;   {
   279 0000017C 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   280 0000017E EB02                <1> 		jmp		.11E							;   }
   281                              <1> .11F:											;   else
   282                              <1> 												;   {
   283 00000180 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   284                              <1> .11E:											;   }
   285                              <1> 
   286                              <1> 		;---------------------------------------
   287                              <1> 		; 前景色と背景色を合成
   288                              <1> 		;---------------------------------------
   289 00000182 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   290                              <1> 
   291                              <1> 		;---------------------------------------
   292                              <1> 		; 新しい値を出力
   293                              <1> 		;---------------------------------------
   294 00000184 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   295                              <1> 
   296 00000186 83C750              <1> 		add		edi, 80							;   EDI += 80;
   297 00000189 E2E2                <1> 		loop	.10L							; } while (--ECX);
   298                              <1> .10E:											; 
   299                              <1> 
   300                              <1> 		;---------------------------------------
   301                              <1> 		; 【レジスタの復帰】
   302                              <1> 		;---------------------------------------
   303 0000018B 5F                  <1> 		pop		edi
   304 0000018C 5E                  <1> 		pop		esi
   305 0000018D 5A                  <1> 		pop		edx
   306 0000018E 59                  <1> 		pop		ecx
   307 0000018F 5B                  <1> 		pop		ebx
   308 00000190 58                  <1> 		pop		eax
   309                              <1> 
   310                              <1> 		;---------------------------------------
   311                              <1> 		; 【スタックフレームの破棄】
   312                              <1> 		;---------------------------------------
   313 00000191 89EC                <1> 		mov		esp, ebp
   314 00000193 5D                  <1> 		pop		ebp
   315                              <1> 
   316 00000194 C3                  <1> 		ret
   317                              <1> 
   318                              <1> 
   319                              <1> ;************************************************************************
   320                              <1> ;	ビットパターンの書き込み
   321                              <1> ;========================================================================
   322                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   323                              <1> ;
   324                              <1> ;■引数
   325                              <1> ;	bit		: 出力ビットパターン
   326                              <1> ;	vram	: VRAMアドレス
   327                              <1> ;	flag	: 1:セット, 0:クリア
   328                              <1> ;
   329                              <1> ;■戻り値	: 無し
   330                              <1> ;************************************************************************
   331                              <1> vram_bit_copy:
   332                              <1> 		;---------------------------------------
   333                              <1> 		; 【スタックフレームの構築】
   334                              <1> 		;---------------------------------------
   335                              <1> 												; EBP+20| 色（背景/前景色）
   336                              <1> 												; EBP+16| プレーン（ビット指定）
   337                              <1> 												; EBP+12| VRAMアドレス
   338                              <1> 												; EBP+ 8| 出力ビットパターン
   339                              <1> 												; ------+----------------
   340 00000195 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   341 00000196 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   342                              <1> 												; ------+----------------
   343                              <1> 
   344                              <1> 		;---------------------------------------
   345                              <1> 		; 【レジスタの保存】
   346                              <1> 		;---------------------------------------
   347 00000198 50                  <1> 		push	eax
   348 00000199 53                  <1> 		push	ebx
   349 0000019A 57                  <1> 		push	edi
   350                              <1> 
   351                              <1> 		;---------------------------------------
   352                              <1> 		; 【処理の開始】
   353                              <1> 		;---------------------------------------
   354 0000019B 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   355 0000019E 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   356 000001A2 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   357                              <1> 
   358 000001A6 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   359 000001A8 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   360 000001AB FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   361                              <1> 
   362                              <1> 		;---------------------------------------
   363                              <1> 		; マスクデータの作成
   364                              <1> 		;---------------------------------------
   365 000001AD 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   366 000001B0 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   367 000001B2 F6D4                <1> 		not		ah								; 
   368                              <1> 
   369                              <1> 		;---------------------------------------
   370                              <1> 		; 現在値の出力を取得
   371                              <1> 		;---------------------------------------
   372 000001B4 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   373 000001B6 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   374 000001B8 08E0                <1> 		or		al, ah							; AL |= AH;
   375                              <1> 
   376                              <1> 		;---------------------------------------
   377                              <1> 		; 新しい値を出力
   378                              <1> 		;---------------------------------------
   379 000001BA 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   380                              <1> 
   381                              <1> 		;---------------------------------------
   382                              <1> 		; 【レジスタの復帰】
   383                              <1> 		;---------------------------------------
   384 000001BC 5F                  <1> 		pop		edi
   385 000001BD 5B                  <1> 		pop		ebx
   386 000001BE 58                  <1> 		pop		eax
   387                              <1> 
   388                              <1> 		;---------------------------------------
   389                              <1> 		; 【スタックフレームの破棄】
   390                              <1> 		;---------------------------------------
   391 000001BF 89EC                <1> 		mov		esp, ebp
   392 000001C1 5D                  <1> 		pop		ebp
   393                              <1> 
   394 000001C2 C3                  <1> 		ret
   102                                  %include	"../modules/protect/draw_char.s"
   103                              <1> ;************************************************************************
   104                              <1> ;	文字の表示
   105                              <1> ;------------------------------------------------------------------------
   106                              <1> ;	グラフィックスモードでテキストを表示
   107                              <1> ;========================================================================
   108                              <1> ;■書式		: void draw_char(col, row, color, ch);
   109                              <1> ;
   110                              <1> ;■引数
   111                              <1> ;	col		: 列（0～79）
   112                              <1> ;	row		: 行（0～29）
   113                              <1> ;	color	: 描画色
   114                              <1> ;	ch		: 文字
   115                              <1> ;
   116                              <1> ;■戻り値	: 無し
   117                              <1> ;************************************************************************
   118                              <1> draw_char:
   119                              <1> 		;---------------------------------------
   120                              <1> 		; 【スタックフレームの構築】
   121                              <1> 		;---------------------------------------
   122                              <1> 												; ------|--------
   123                              <1> 												; EBP+20| 文字
   124                              <1> 												; EBP+16| 色
   125                              <1> 												; EBP+12| Y（行）
   126                              <1> 												; EBP+ 8| X（列）
   127                              <1> 												; ------+----------------
   128 000001C3 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   129 000001C4 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   130                              <1> 												; ------+----------------
   131                              <1> 
   132                              <1> 		;---------------------------------------
   133                              <1> 		; 【レジスタの保存】
   134                              <1> 		;---------------------------------------
   135 000001C6 50                  <1> 		push	eax
   136 000001C7 53                  <1> 		push	ebx
   137 000001C8 51                  <1> 		push	ecx
   138 000001C9 52                  <1> 		push	edx
   139 000001CA 56                  <1> 		push	esi
   140 000001CB 57                  <1> 		push	edi
   141                              <1> 
   142                              <1> 		;---------------------------------------
   143                              <1> 		; テストアンドセット
   144                              <1> 		;---------------------------------------
   145                              <1> %ifdef	USE_TEST_AND_SET
   146                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   147                              <1> %endif
   148                              <1> 
   149                              <1> 		;---------------------------------------
   150                              <1> 		; コピー元フォントアドレスを設定
   151                              <1> 		;---------------------------------------
   152 000001CC 0FB67514            <1> 		movzx	esi, byte [ebp +20]				; CL  = 文字コード;
   153 000001D0 C1E604              <1> 		shl		esi, 4							; CL *= 16; // 1文字16バイト
   154 000001D3 0335[08010000]      <1> 		add		esi, [FONT_ADR]					; ESI = フォントアドレス;
   155                              <1> 
   156                              <1> 		;---------------------------------------
   157                              <1> 		; コピー先アドレスを取得
   158                              <1> 		; Adr = 0xA0000 + (640 / 8 * 16) * y + x
   159                              <1> 		;---------------------------------------
   160 000001D9 8B7D0C              <1> 		mov		edi, [ebp +12]					; Y（行）
   161 000001DC C1E708              <1> 		shl		edi, 8							; EDI = Y * 256;
   162 000001DF 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA0000]	; EDI = Y *   4 + Y;
   163 000001E6 037D08              <1> 		add		edi, [ebp + 8]					; X（列）
   164                              <1> 
   165                              <1> 		;---------------------------------------
   166                              <1> 		; 1文字分のフォントを出力
   167                              <1> 		;---------------------------------------
   168 000001E9 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
   169                              <1> 
   170 000001ED 6A03E81CFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
   170 000001F6 C404                <1>
   171 000001F8 6A08E82AFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
   171 00000201 C404                <1>
   172 00000203 536A085756E835FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
   172 0000020C FF6683C410          <1>
   173                              <1> 
   174 00000211 6A02E8F8FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
   174 0000021A C404                <1>
   175 0000021C 6A04E806FFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
   175 00000225 C404                <1>
   176 00000227 536A045756E811FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
   176 00000230 FF6683C410          <1>
   177                              <1> 
   178 00000235 6A01E8D4FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
   178 0000023E C404                <1>
   179 00000240 6A02E8E2FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
   179 00000249 C404                <1>
   180 0000024B 536A025756E8EDFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
   180 00000254 FF6683C410          <1>
   181                              <1> 
   182 00000259 6A00E8B0FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
   182 00000262 C404                <1>
   183 00000264 6A01E8BEFEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
   183 0000026D C404                <1>
   184 0000026F 536A015756E8C9FEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
   184 00000278 FF6683C410          <1>
   185                              <1> 
   186                              <1> %ifdef	USE_TEST_AND_SET
   187                              <1> 		;---------------------------------------
   188                              <1> 		; テストアンドセット
   189                              <1> 		;---------------------------------------
   190                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   191                              <1> %endif
   192                              <1> 
   193                              <1> 		;---------------------------------------
   194                              <1> 		; 【レジスタの復帰】
   195                              <1> 		;---------------------------------------
   196 0000027D 5F                  <1> 		pop		edi
   197 0000027E 5E                  <1> 		pop		esi
   198 0000027F 5A                  <1> 		pop		edx
   199 00000280 59                  <1> 		pop		ecx
   200 00000281 5B                  <1> 		pop		ebx
   201 00000282 58                  <1> 		pop		eax
   202                              <1> 
   203                              <1> 		;---------------------------------------
   204                              <1> 		; 【スタックフレームの破棄】
   205                              <1> 		;---------------------------------------
   206 00000283 89EC                <1> 		mov		esp, ebp
   207 00000285 5D                  <1> 		pop		ebp
   208                              <1> 
   209 00000286 C3                  <1> 		ret
   210                              <1> 
   211                              <1> %ifdef USE_TEST_AND_SET
   212                              <1> ALIGN 4, db 0
   213                              <1> IN_USE:	dd	0
   214                              <1> %endif
   215                              <1> 
   103                                  %include	"../modules/protect/draw_font.s"
   104                              <1> ;************************************************************************
   105                              <1> ;	フォント一覧を表示
   106                              <1> ;========================================================================
   107                              <1> ;■書式		: void draw_font(col, row);
   108                              <1> ;
   109                              <1> ;■引数
   110                              <1> ;	col		: 列
   111                              <1> ;	row		: 行
   112                              <1> ;
   113                              <1> ;■戻り値	: 無し
   114                              <1> ;************************************************************************
   115                              <1> draw_font:
   116                              <1> 		;---------------------------------------
   117                              <1> 		; 【スタックフレームの構築】
   118                              <1> 		;---------------------------------------
   119                              <1> 												; ------|--------
   120                              <1> 												; EBP+12| Y（行）
   121                              <1> 												; EBP+ 8| X（列）
   122                              <1> 												; ---------------
   123 00000287 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   124 00000288 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   125                              <1> 												; ---------------
   126                              <1> 
   127                              <1> 		;---------------------------------------
   128                              <1> 		; 【レジスタの保存】
   129                              <1> 		;---------------------------------------
   130 0000028A 50                  <1> 		push	eax
   131 0000028B 53                  <1> 		push	ebx
   132 0000028C 51                  <1> 		push	ecx
   133 0000028D 52                  <1> 		push	edx
   134 0000028E 56                  <1> 		push	esi
   135 0000028F 57                  <1> 		push	edi
   136                              <1> 
   137                              <1> 		;---------------------------------------
   138                              <1> 		; 表示位置
   139                              <1> 		;---------------------------------------
   140 00000290 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   141 00000293 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   142                              <1> 
   143                              <1> 		;---------------------------------------
   144                              <1> 		; フォント一覧を表示
   145                              <1> 		;---------------------------------------
   146 00000296 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   147 0000029B 81F900010000        <1> .10L:	cmp		ecx, 256						;      ECX < 256;
   148 000002A1 731F                <1> 		jae		.10E							; 
   149                              <1> 												;      ECX++)
   150                              <1> 												; {
   151                              <1> 												;   // 桁位置の計算
   152 000002A3 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   153 000002A5 83E00F              <1> 		and		eax, 0x0F						;   EAX &= 0x0F
   154 000002A8 01F0                <1> 		add		eax, esi						;   EAX += X;
   155                              <1> 												;   
   156                              <1> 												;   // 行位置の計算
   157 000002AA 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   158 000002AC C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
   159 000002AF 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   160                              <1> 
   161 000002B1 516A075350E808FFFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
   161 000002BA FF6683C410          <1>
   162                              <1> 
   163 000002BF 41                  <1> 		inc		ecx								;   // for (... ECX++)
   164 000002C0 EBD9                <1> 		jmp		.10L							; 
   165                              <1> .10E:											; }
   166                              <1> 
   167                              <1> 		;---------------------------------------
   168                              <1> 		; 【レジスタの復帰】
   169                              <1> 		;---------------------------------------
   170 000002C2 5F                  <1> 		pop		edi
   171 000002C3 5E                  <1> 		pop		esi
   172 000002C4 5A                  <1> 		pop		edx
   173 000002C5 59                  <1> 		pop		ecx
   174 000002C6 5B                  <1> 		pop		ebx
   175 000002C7 58                  <1> 		pop		eax
   176                              <1> 
   177                              <1> 		;---------------------------------------
   178                              <1> 		; 【スタックフレームの破棄】
   179                              <1> 		;---------------------------------------
   180 000002C8 89EC                <1> 		mov		esp, ebp
   181 000002CA 5D                  <1> 		pop		ebp
   182                              <1> 
   183 000002CB C3                  <1> 		ret
   184                              <1> 
   104                                  %include	"../modules/protect/draw_str.s"
   105                              <1> ;************************************************************************
   106                              <1> ;	文字列の表示
   107                              <1> ;========================================================================
   108                              <1> ;■書式		: void draw_str(col, row, color, p);
   109                              <1> ;
   110                              <1> ;■引数
   111                              <1> ;	col		: 列
   112                              <1> ;	row		: 行
   113                              <1> ;	color	: 描画色
   114                              <1> ;	p		: 文字列のアドレス
   115                              <1> ;
   116                              <1> ;■戻り値	: 無し
   117                              <1> ;************************************************************************
   118                              <1> draw_str:
   119                              <1> 		;---------------------------------------
   120                              <1> 		; 【スタックフレームの構築】
   121                              <1> 		;---------------------------------------
   122                              <1> 												; ------|--------
   123                              <1> 												; EBP+20| *p（文字列のアドレス）
   124                              <1> 												; EBP+16| color（色）
   125                              <1> 												; EBP+12| row（行）
   126                              <1> 												; EBP+ 8| col（列）
   127                              <1> 												; ---------------
   128 000002CC 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   129 000002CD 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   130                              <1> 												; ---------------
   131                              <1> 
   132                              <1> 		;---------------------------------------
   133                              <1> 		; 【レジスタの保存】
   134                              <1> 		;---------------------------------------
   135 000002CF 50                  <1> 		push	eax
   136 000002D0 53                  <1> 		push	ebx
   137 000002D1 51                  <1> 		push	ecx
   138 000002D2 52                  <1> 		push	edx
   139 000002D3 56                  <1> 		push	esi
   140                              <1> 
   141                              <1> 		;---------------------------------------
   142                              <1> 		; 文字列の表示
   143                              <1> 		;---------------------------------------
   144 000002D4 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
   145 000002D7 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
   146 000002DA 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
   147 000002DE 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
   148                              <1> 
   149 000002E1 FC                  <1> 		cld										; DF = 0; // アドレス加算
   150                              <1> .10L:											; do
   151                              <1> 												; {
   152 000002E2 AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
   153 000002E3 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
   154 000002E5 7425                <1> 		je		.10E							;     break;
   155                              <1> 
   156                              <1> 		;---------------------------------------
   157                              <1> 		; 1文字表示
   158                              <1> 		;---------------------------------------
   159                              <1> %ifdef	USE_SYSTEM_CALL
   160                              <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
   161                              <1> %else
   162 000002E7 50535251E8D3FEFFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
   162 000002F0 6683C410            <1>
   163                              <1> %endif
   164                              <1> 
   165                              <1> 		; 次の文字の位置を調整
   166 000002F4 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
   167 000002F5 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
   168 000002F8 7C10                <1> 		jl		.12E							;   {
   169 000002FA B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
   170 000002FF 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
   171 00000300 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
   172 00000303 7C05                <1> 		jl		.12E							;     {
   173 00000305 BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
   174                              <1> 												;     }
   175                              <1> .12E:											;   }
   176 0000030A EBD6                <1> 		jmp		.10L							;   
   177                              <1> .10E:											; } while (1);
   178                              <1> 
   179                              <1> 		;---------------------------------------
   180                              <1> 		; 【レジスタの復帰】
   181                              <1> 		;---------------------------------------
   182 0000030C 5E                  <1> 		pop		esi
   183 0000030D 5A                  <1> 		pop		edx
   184 0000030E 59                  <1> 		pop		ecx
   185 0000030F 5B                  <1> 		pop		ebx
   186 00000310 58                  <1> 		pop		eax
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 【スタックフレームの破棄】
   190                              <1> 		;---------------------------------------
   191 00000311 89EC                <1> 		mov		esp, ebp
   192 00000313 5D                  <1> 		pop		ebp
   193                              <1> 
   194 00000314 C3                  <1> 		ret
   195                              <1> 
   105                                  %include	"../modules/protect/draw_color_bar.s"
   106                              <1> ;************************************************************************
   107                              <1> ;	カラーバーの表示
   108                              <1> ;========================================================================
   109                              <1> ;■書式		: void draw_color_bar(col, row);
   110                              <1> ;
   111                              <1> ;■引数
   112                              <1> ;	col		: 列
   113                              <1> ;	row		: 行
   114                              <1> ;
   115                              <1> ;■戻り値	: 無し
   116                              <1> ;************************************************************************
   117                              <1> draw_color_bar:
   118                              <1> 		;---------------------------------------
   119                              <1> 		; 【スタックフレームの構築】
   120                              <1> 		;---------------------------------------
   121                              <1> 												; ------|--------
   122                              <1> 												; EBP+ 8| X（列）
   123                              <1> 												; EBP+12| Y（行）
   124                              <1> 												; ---------------
   125 00000315 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   126 00000316 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   127                              <1> 												; ---------------
   128                              <1> 		;---------------------------------------
   129                              <1> 		; 【レジスタの保存】
   130                              <1> 		;---------------------------------------
   131 00000318 50                  <1> 		push	eax
   132 00000319 53                  <1> 		push	ebx
   133 0000031A 51                  <1> 		push	ecx
   134 0000031B 52                  <1> 		push	edx
   135 0000031C 56                  <1> 		push	esi
   136 0000031D 57                  <1> 		push	edi
   137                              <1> 
   138                              <1> 		;---------------------------------------
   139                              <1> 		; 表示位置
   140                              <1> 		;---------------------------------------
   141 0000031E 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
   142 00000321 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
   143                              <1> 
   144                              <1> 		;---------------------------------------
   145                              <1> 		; カラーバーを表示
   146                              <1> 		;---------------------------------------
   147 00000324 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
   148 00000329 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
   149 0000032C 732E                <1> 		jae		.10E							; 
   150                              <1> 												;      ECX++)
   151                              <1> 												; {
   152                              <1> 												;   // 桁位置の計算
   153 0000032E 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
   154 00000330 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
   155 00000333 C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
   156 00000336 01F0                <1> 		add		eax, esi						;   EAX += X;
   157                              <1> 												;   
   158                              <1> 												;   // 行位置の計算
   159 00000338 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
   160 0000033A D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
   161 0000033C 01FB                <1> 		add		ebx, edi						;   EBX += Y;
   162                              <1> 												;   
   163                              <1> 												;   // 表示色の取得
   164 0000033E 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
   165 00000340 D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
   166 00000342 8B92[6F030000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
   167                              <1> 
   168 00000348 68[66030000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
   168 00000350 E877FFFFFF6683C410  <1>
   169                              <1> 
   170 00000359 41                  <1> 		inc		ecx								;   // for (... ECX++)
   171 0000035A EBCD                <1> 		jmp		.10L							; 
   172                              <1> .10E:											; }
   173                              <1> 
   174                              <1> 		;---------------------------------------
   175                              <1> 		; 【レジスタの復帰】
   176                              <1> 		;---------------------------------------
   177 0000035C 5F                  <1> 		pop		edi
   178 0000035D 5E                  <1> 		pop		esi
   179 0000035E 5A                  <1> 		pop		edx
   180 0000035F 59                  <1> 		pop		ecx
   181 00000360 5B                  <1> 		pop		ebx
   182 00000361 58                  <1> 		pop		eax
   183                              <1> 
   184                              <1> 		;---------------------------------------
   185                              <1> 		; 【スタックフレームの破棄】
   186                              <1> 		;---------------------------------------
   187 00000362 89EC                <1> 		mov		esp, ebp
   188 00000364 5D                  <1> 		pop		ebp
   189                              <1> 
   190 00000365 C3                  <1> 		ret
   191                              <1> 
   192 00000366 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
   193                              <1> 
   194 0000036F 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
   195 00000373 00010009            <1> 		dw	0x0100, 0x0900
   196 00000377 0002000A            <1> 		dw	0x0200, 0x0A00
   197 0000037B 0003000B            <1> 		dw	0x0300, 0x0B00
   198 0000037F 0004000C            <1> 		dw	0x0400, 0x0C00
   199 00000383 0005000D            <1> 		dw	0x0500, 0x0D00
   200 00000387 0006000E            <1> 		dw	0x0600, 0x0E00
   201 0000038B 0007000F            <1> 		dw	0x0700, 0x0F00
   202                              <1> 
   106                                  %include	"../modules/protect/draw_pixel.s"
   107                              <1> ;************************************************************************
   108                              <1> ;	ピクセルの描画
   109                              <1> ;========================================================================
   110                              <1> ;■書式		: void draw_pixel(X, Y, color);
   111                              <1> ;
   112                              <1> ;■引数
   113                              <1> ;	X		: X座標
   114                              <1> ;	Y		: Y座標
   115                              <1> ;	color	: 描画色
   116                              <1> ;
   117                              <1> ;■戻り値	: 無し
   118                              <1> ;************************************************************************
   119                              <1> draw_pixel:
   120                              <1> 		;---------------------------------------
   121                              <1> 		; 【スタックフレームの構築】
   122                              <1> 		;---------------------------------------
   123                              <1> 												; ------|--------
   124                              <1> 												; EBP+16| 色
   125                              <1> 												; EBP+12| Y
   126                              <1> 												; EBP+ 8| X
   127                              <1> 												; ------|--------
   128 0000038F 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   129 00000390 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   130                              <1> 												; ------+--------
   131                              <1> 		;---------------------------------------
   132                              <1> 		; 【レジスタの保存】
   133                              <1> 		;---------------------------------------
   134 00000392 50                  <1> 		push	eax
   135 00000393 53                  <1> 		push	ebx
   136 00000394 51                  <1> 		push	ecx
   137 00000395 57                  <1> 		push	edi
   138                              <1> 
   139                              <1> 		;---------------------------------------
   140                              <1> 		; Y座標を80倍する（640/8）
   141                              <1> 		;---------------------------------------
   142 00000396 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI  = Y座標
   143 00000399 C1E704              <1> 		shl		edi, 4							; EDI *= 16;
   144 0000039C 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA_0000]	; EDI  = 0xA00000[EDI * 4 + EDI];
   145                              <1> 
   146                              <1> 		;---------------------------------------
   147                              <1> 		; X座標を1/8して加算
   148                              <1> 		;---------------------------------------
   149 000003A3 8B5D08              <1> 		mov		ebx, [ebp + 8]					; EBX  = X座標;
   150 000003A6 89D9                <1> 		mov		ecx, ebx						; ECX  = X座標;（一時保存）
   151 000003A8 C1EB03              <1> 		shr		ebx, 3							; EBX /= 8;
   152 000003AB 01DF                <1> 		add		edi, ebx						; EDI += EBX;
   153                              <1> 
   154                              <1> 		;---------------------------------------
   155                              <1> 		; X座標を8で割った余りからビット位置を計算
   156                              <1> 		; (0=0x80, 1=0x40,... 7=0x01)
   157                              <1> 		;---------------------------------------
   158 000003AD 83E107              <1> 		and		ecx, 0x07						; ECX = X & 0x07;
   159 000003B0 BB80000000          <1> 		mov		ebx, 0x80						; EBX = 0x80;
   160 000003B5 D3EB                <1> 		shr		ebx, cl							; EBX >>= ECX;
   161                              <1> 
   162                              <1> 		;---------------------------------------
   163                              <1> 		; 色指定
   164                              <1> 		;---------------------------------------
   165 000003B7 8B4D10              <1> 		mov		ecx, [ebp +16]					; // 表示色
   166                              <1> 
   167                              <1> %ifdef	USE_TEST_AND_SET
   168                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
   169                              <1> %endif
   170                              <1> 
   171                              <1> 		;---------------------------------------
   172                              <1> 		; プレーン毎に出力
   173                              <1> 		;---------------------------------------
   174 000003BA 6A03E84FFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 輝度(I)プレーンを選択
   174 000003C3 C404                <1>
   175 000003C5 6A08E85DFDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 輝度(I)プレーンを選択
   175 000003CE C404                <1>
   176 000003D0 516A085753E8BBFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
   176 000003D9 FF6683C410          <1>
   177                              <1> 
   178 000003DE 6A02E82BFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 赤(R)プレーンを選択
   178 000003E7 C404                <1>
   179 000003E9 6A04E839FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 赤(R)プレーンを選択
   179 000003F2 C404                <1>
   180 000003F4 516A045753E897FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
   180 000003FD FF6683C410          <1>
   181                              <1> 
   182 00000402 6A01E807FDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 緑(G)プレーンを選択
   182 0000040B C404                <1>
   183 0000040D 6A02E815FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 緑(G)プレーンを選択
   183 00000416 C404                <1>
   184 00000418 516A025753E873FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
   184 00000421 FF6683C410          <1>
   185                              <1> 
   186 00000426 6A00E8E3FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 青(B)プレーンを選択
   186 0000042F C404                <1>
   187 00000431 6A01E8F1FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 青(B)プレーンを選択
   187 0000043A C404                <1>
   188 0000043C 516A015753E84FFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
   188 00000445 FF6683C410          <1>
   189                              <1> 
   190                              <1> 
   191                              <1> %ifdef	USE_TEST_AND_SET
   192                              <1> 		;---------------------------------------
   193                              <1> 		; テストアンドセット
   194                              <1> 		;---------------------------------------
   195                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
   196                              <1> %endif
   197                              <1> 
   198                              <1> 		;---------------------------------------
   199                              <1> 		; 【レジスタの復帰】
   200                              <1> 		;---------------------------------------
   201 0000044A 5F                  <1> 		pop		edi
   202 0000044B 59                  <1> 		pop		ecx
   203 0000044C 5B                  <1> 		pop		ebx
   204 0000044D 58                  <1> 		pop		eax
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; 【スタックフレームの破棄】
   208                              <1> 		;---------------------------------------
   209 0000044E 89EC                <1> 		mov		esp, ebp
   210 00000450 5D                  <1> 		pop		ebp
   211                              <1> 
   212 00000451 C3                  <1> 		ret
   213                              <1> 
   107                                  %include	"../modules/protect/draw_line.s"
   108                              <1> ;************************************************************************
   109                              <1> ;	直線の描画
   110                              <1> ;========================================================================
   111                              <1> ;■書式		: void draw_line(X0, Y0, X1, Y1, color);
   112                              <1> ;
   113                              <1> ;■引数
   114                              <1> ;	X0		: 始点のX座標
   115                              <1> ;	Y0		: 始点のY座標
   116                              <1> ;	X1		: 終点のX座標
   117                              <1> ;	Y1		: 終点のY座標
   118                              <1> ;	color	: 描画色
   119                              <1> ;
   120                              <1> ;■戻り値	: 無し
   121                              <1> ;************************************************************************
   122                              <1> draw_line:
   123                              <1> 		;---------------------------------------
   124                              <1> 		; 【スタックフレームの構築】
   125                              <1> 		;---------------------------------------
   126                              <1> 												; ---------------
   127                              <1> 												;    +24| 色
   128                              <1> 												;    +20| Y1
   129                              <1> 												;    +16| X1
   130                              <1> 												;    +12| Y0
   131                              <1> 												;    + 8| X0
   132                              <1> 												; ---------------
   133 00000452 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   134 00000453 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   135                              <1> 												; ---------------
   136 00000455 6A00                <1> 		push	dword 0							;    - 4| sum   = 0; // 相対軸の積算値
   137 00000457 6A00                <1> 		push	dword 0							;    - 8| x0    = 0; // X座標
   138 00000459 6A00                <1> 		push	dword 0							;    -12| dx    = 0; // X増分
   139 0000045B 6A00                <1> 		push	dword 0							;    -16| inc_x = 0; // X座標増分(1 or -1)
   140 0000045D 6A00                <1> 		push	dword 0							;    -20| y0    = 0; // Y座標
   141 0000045F 6A00                <1> 		push	dword 0							;    -24| dy    = 0; // Y増分
   142 00000461 6A00                <1> 		push	dword 0							;    -28| inc_y = 0; // Y座標増分(1 or -1)
   143                              <1> 												; ------|--------
   144                              <1> 
   145                              <1> 		;---------------------------------------
   146                              <1> 		; 【レジスタの保存】
   147                              <1> 		;---------------------------------------
   148 00000463 50                  <1> 		push	eax
   149 00000464 53                  <1> 		push	ebx
   150 00000465 51                  <1> 		push	ecx
   151 00000466 52                  <1> 		push	edx
   152 00000467 56                  <1> 		push	esi
   153 00000468 57                  <1> 		push	edi
   154                              <1> 
   155                              <1> 		;---------------------------------------
   156                              <1> 		; 幅を計算（X軸）
   157                              <1> 		;---------------------------------------
   158 00000469 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   159 0000046C 8B5D10              <1> 		mov		ebx, [ebp +16]					; EBX = X1;
   160 0000046F 29C3                <1> 		sub		ebx, eax						; EBX = X1 - X0; // 幅
   161 00000471 7D09                <1> 		jge		.10F							; if (幅 < 0)
   162                              <1> 												; {
   163 00000473 F7DB                <1> 		neg		ebx								;   幅   *= -1;
   164 00000475 BEFFFFFFFF          <1> 		mov		esi, -1							;   // X座標の増分
   165 0000047A EB05                <1> 		jmp		.10E							; }
   166                              <1> .10F:											; else
   167                              <1> 												; {
   168 0000047C BE01000000          <1> 		mov		esi, 1							;   // X座標の増分
   169                              <1> .10E:											; }
   170                              <1> 
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 高さを計算（Y軸）
   173                              <1> 		;---------------------------------------
   174 00000481 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX = Y0
   175 00000484 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1
   176 00000487 29CA                <1> 		sub		edx, ecx						; EDX = Y1 - Y0; // 高さ
   177 00000489 7D09                <1> 		jge		.20F							; if (高さ < 0)
   178                              <1> 												; {
   179 0000048B F7DA                <1> 		neg		edx								;   高さ *= -1;
   180 0000048D BFFFFFFFFF          <1> 		mov		edi, -1							;   // Y座標の増分
   181 00000492 EB05                <1> 		jmp		.20E							; }
   182                              <1> .20F:											; else
   183                              <1> 												; {
   184 00000494 BF01000000          <1> 		mov		edi, 1							;   // Y座標の増分
   185                              <1> .20E:											; }
   186                              <1> 
   187                              <1> 		;---------------------------------------
   188                              <1> 		; X軸
   189                              <1> 		;---------------------------------------
   190 00000499 8945F8              <1> 		mov		[ebp - 8], eax					;   // X軸:開始座標
   191 0000049C 895DF4              <1> 		mov		[ebp -12], ebx					;   // X軸:描画幅
   192 0000049F 8975F0              <1> 		mov		[ebp -16], esi					;   // X軸:増分(基準軸：1 or -1)
   193                              <1> 
   194                              <1> 		;---------------------------------------
   195                              <1> 		; Y軸
   196                              <1> 		;---------------------------------------
   197 000004A2 894DEC              <1> 		mov		[ebp -20], ecx					;   // Y軸:開始座標
   198 000004A5 8955E8              <1> 		mov		[ebp -24], edx					;   // Y軸:描画幅
   199 000004A8 897DE4              <1> 		mov		[ebp -28], edi					;   // Y軸:増分(基準軸：1 or -1)
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; 基準軸を決める
   203                              <1> 		;---------------------------------------
   204 000004AB 39D3                <1> 		cmp		ebx, edx						; if (幅 <= 高さ)
   205 000004AD 7F08                <1> 		jg		.22F							; {
   206                              <1> 												;   
   207 000004AF 8D75EC              <1> 		lea		esi, [ebp -20]					;   // Y軸が基準軸
   208 000004B2 8D7DF8              <1> 		lea		edi, [ebp - 8]					;   // X軸が相対軸
   209                              <1> 												;   
   210 000004B5 EB06                <1> 		jmp		.22E							; }
   211                              <1> .22F:											; else
   212                              <1> 												; {
   213 000004B7 8D75F8              <1> 		lea		esi, [ebp - 8]					;   // X軸が基準軸
   214 000004BA 8D7DEC              <1> 		lea		edi, [ebp -20]					;   // Y軸が相対軸
   215                              <1> .22E:											; }
   216                              <1> 
   217                              <1> 		;---------------------------------------
   218                              <1> 		; 繰り返し回数(基準軸のドット数)
   219                              <1> 		;---------------------------------------
   220 000004BD 8B4EFC              <1> 		mov		ecx, [esi - 4]					; ECX = 基準軸描画幅;
   221 000004C0 83F900              <1> 		cmp		ecx, 0							; if (0 == ECX)
   222 000004C3 7505                <1> 		jnz		.30E							; {
   223 000004C5 B901000000          <1> 		mov		ecx, 1							;   ECX = 1;
   224                              <1> .30E:											; }
   225                              <1> 
   226                              <1> 		;---------------------------------------
   227                              <1> 		; 線を描画
   228                              <1> 		;---------------------------------------
   229                              <1> .50L:											; do
   230                              <1> 												; {
   231                              <1> %ifdef	USE_SYSTEM_CALL
   232                              <1> 		mov		eax, ecx						;   // 繰り返し回数を保存
   233                              <1> 
   234                              <1> 		mov		ebx, [ebp +24]					;   EBX = 表示色;
   235                              <1> 		mov		ecx, [ebp - 8]					;   ECX = X座標;
   236                              <1> 		mov		edx, [ebp -20]					;   EDX = Y座標;
   237                              <1> 		int		0x82							;   sys_call(1, X, Y, 色, 文字); BX(C), CX(X), DX(Y)
   238                              <1> 
   239                              <1> 		mov		ecx, eax
   240                              <1> %else
   241 000004CA FF7518FF75ECFF75F8- <1> 		cdecl	draw_pixel, dword [ebp - 8], 							dword [ebp -20], 							dword [ebp +24]		;   // 点の描画
   241 000004D3 E8B7FEFFFF6683C40C  <1>
   244                              <1> %endif
   245                              <1> 												;   // 基準軸を更新(1ドット分)
   246 000004DC 8B46F8              <1> 		mov		eax, [esi - 8]					;   EAX = 基準軸増分(1 or -1);
   247 000004DF 0106                <1> 		add		[esi - 0], eax					;   
   248                              <1> 
   249                              <1> 												;   // 相対軸を更新
   250 000004E1 8B45FC              <1> 		mov		eax, [ebp - 4]					;   EAX  = sum; // 相対軸の積算値;
   251 000004E4 0347FC              <1> 		add		eax, [edi - 4]					;   EAX += dy;  // 増分(相対軸の描画幅)
   252 000004E7 8B5EFC              <1> 		mov		ebx, [esi - 4]					;   EBX  = dx;  // 増分(基準軸の描画幅)
   253                              <1> 
   254 000004EA 39D8                <1> 		cmp		eax, ebx						;   if (積算値 <= 相対軸の増分)
   255 000004EC 7C07                <1> 		jl		.52E							;   {
   256 000004EE 29D8                <1> 		sub		eax, ebx						;     EAX -= EBX; // 積算値から相対軸の増分を減算
   257                              <1> 												;     
   258                              <1> 												;     // 相対軸の座標を更新(1ドット分)
   259 000004F0 8B5FF8              <1> 		mov		ebx, [edi - 8]					;     EBX =  相対軸増分;
   260 000004F3 011F                <1> 		add		[edi - 0], ebx					;     
   261                              <1> .52E:											;   }
   262 000004F5 8945FC              <1> 		mov		[ebp - 4], eax					;   // 積算値を更新
   263                              <1> 												;   
   264 000004F8 E2D0                <1> 		loop	.50L							;   
   265                              <1> .50E:											; } while (ループ回数--);
   266                              <1> 
   267                              <1> 		;---------------------------------------
   268                              <1> 		; 【レジスタの復帰】
   269                              <1> 		;---------------------------------------
   270 000004FA 5F                  <1> 		pop		edi
   271 000004FB 5E                  <1> 		pop		esi
   272 000004FC 5A                  <1> 		pop		edx
   273 000004FD 59                  <1> 		pop		ecx
   274 000004FE 5B                  <1> 		pop		ebx
   275 000004FF 58                  <1> 		pop		eax
   276                              <1> 
   277                              <1> 		;---------------------------------------
   278                              <1> 		; 【スタックフレームの破棄】
   279                              <1> 		;---------------------------------------
   280 00000500 89EC                <1> 		mov		esp, ebp
   281 00000502 5D                  <1> 		pop		ebp
   282                              <1> 
   283 00000503 C3                  <1> 		ret
   284                              <1> 
   108                                  %include	"../modules/protect/draw_rect.s"
   109                              <1> ;************************************************************************
   110                              <1> ;	矩形の描画
   111                              <1> ;========================================================================
   112                              <1> ;■書式		: void draw_rect(X0, Y0, X1, Y1, color);
   113                              <1> ;
   114                              <1> ;■引数
   115                              <1> ;	X0		: 始点のX座標
   116                              <1> ;	Y0		: 始点のY座標
   117                              <1> ;	X1		: 終点のX座標
   118                              <1> ;	Y1		: 終点のY座標
   119                              <1> ;	color	: 描画色
   120                              <1> ;
   121                              <1> ;■戻り値	: 無し
   122                              <1> ;************************************************************************
   123                              <1> draw_rect:
   124                              <1> 		;---------------------------------------
   125                              <1> 		; 【スタックフレームの構築】
   126                              <1> 		;---------------------------------------
   127                              <1> 												; ------|--------
   128                              <1> 												; EBP+24| 色
   129                              <1> 												; EBP+20| Y1
   130                              <1> 												; EBP+16| X1
   131                              <1> 												; EBP+12| Y0
   132                              <1> 												; EBP+ 8| X0
   133                              <1> 												; ---------------
   134 00000504 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   135 00000505 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   136                              <1> 												; ------|--------
   137                              <1> 
   138                              <1> 		;---------------------------------------
   139                              <1> 		; 【レジスタの保存】
   140                              <1> 		;---------------------------------------
   141 00000507 50                  <1> 		push		eax
   142 00000508 53                  <1> 		push		ebx
   143 00000509 51                  <1> 		push		ecx
   144 0000050A 52                  <1> 		push		edx
   145 0000050B 56                  <1> 		push		esi
   146                              <1> 
   147                              <1> 		;---------------------------------------
   148                              <1> 		; 矩形を描画
   149                              <1> 		;---------------------------------------
   150 0000050C 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
   151 0000050F 8B5D0C              <1> 		mov		ebx, [ebp +12]					; EBX = Y0;
   152 00000512 8B4D10              <1> 		mov		ecx, [ebp +16]					; ECX = X1;
   153 00000515 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1;
   154 00000518 8B7518              <1> 		mov		esi, [ebp +24]					; ESI = 色;
   155                              <1> 
   156                              <1> 		;---------------------------------------
   157                              <1> 		; 座標軸の大小を確定
   158                              <1> 		;---------------------------------------
   159 0000051B 39C8                <1> 		cmp		eax, ecx						; if (X1 < X0)
   160 0000051D 7C01                <1> 		jl		.10E							; {
   161 0000051F 91                  <1> 		xchg	eax, ecx						;   X0とX1を入れ替える;
   162                              <1> .10E:											; }
   163                              <1> 
   164 00000520 39D3                <1> 		cmp		ebx, edx						; if (Y1 < Y0)
   165 00000522 7C02                <1> 		jl		.20E							; {
   166 00000524 87DA                <1> 		xchg	ebx, edx						;   Y0とY1を入れ替える;
   167                              <1> .20E:											; }
   168                              <1> 
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 矩形を描画
   171                              <1> 		;---------------------------------------
   172 00000526 5653515350E822FFFF- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, esi	; 上線
   172 0000052F FF6683C414          <1>
   173 00000534 5652505350E814FFFF- <1> 		cdecl	draw_line, eax, ebx, eax, edx, esi	; 左線
   173 0000053D FF6683C414          <1>
   174                              <1> 
   175 00000542 4A                  <1> 		dec		edx									; EDX--; // 下線は1ドット上げる
   176 00000543 5652515250E805FFFF- <1> 		cdecl	draw_line, eax, edx, ecx, edx, esi	; 下線
   176 0000054C FF6683C414          <1>
   177 00000551 42                  <1> 		inc		edx
   178                              <1> 
   179 00000552 49                  <1> 		dec		ecx									; ECX--; // 右線は1ドット左に移動
   180 00000553 5652515351E8F5FEFF- <1> 		cdecl	draw_line, ecx, ebx, ecx, edx, esi	; 右線
   180 0000055C FF6683C414          <1>
   181                              <1> 
   182                              <1> 		;---------------------------------------
   183                              <1> 		; 【レジスタの復帰】
   184                              <1> 		;---------------------------------------
   185 00000561 5E                  <1> 		pop		esi
   186 00000562 5A                  <1> 		pop		edx
   187 00000563 59                  <1> 		pop		ecx
   188 00000564 5B                  <1> 		pop		ebx
   189 00000565 58                  <1> 		pop		eax
   190                              <1> 
   191                              <1> 		;---------------------------------------
   192                              <1> 		; 【スタックフレームの破棄】
   193                              <1> 		;---------------------------------------
   194 00000566 89EC                <1> 		mov		esp, ebp
   195 00000568 5D                  <1> 		pop		ebp
   196                              <1> 
   197 00000569 C3                  <1> 		ret
   109                                  %include	"../modules/protect/itoa.s"
   110                              <1> ;************************************************************************
   111                              <1> ;	数値を文字に変換
   112                              <1> ;========================================================================
   113                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
   114                              <1> ;
   115                              <1> ;■引数
   116                              <1> ;	num		: 変換する数値
   117                              <1> ;	buff	: 保存先バッファアドレス
   118                              <1> ;	size	: 保存先バッファサイズ
   119                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
   120                              <1> ;	flags	: フラグ
   121                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
   122                              <1> ;			:      : 0=空白を' '（スペース）で埋める
   123                              <1> ;			:   B1 : 1=＋/-符号を表示する
   124                              <1> ;			:      : 0=＋/-符号を表示しない
   125                              <1> ;			:   B0 : 1=符号付き正数として扱う
   126                              <1> ;			:      : 0=符号無し正数として扱う
   127                              <1> ;
   128                              <1> ;■戻り値	: 無し
   129                              <1> ;************************************************************************
   130                              <1> itoa:
   131                              <1> 		;---------------------------------------
   132                              <1> 		; 【スタックフレームの構築】
   133                              <1> 		;---------------------------------------
   134                              <1> 												; ------|--------
   135                              <1> 												;    +24| フラグ
   136                              <1> 												;    +20| 基数
   137                              <1> 												;    +16| バッファサイズ
   138                              <1> 												;    +12| バッファアドレス
   139                              <1> 												;    + 8| 数値
   140                              <1> 												; ------|--------
   141                              <1> 												;    + 4| EIP（戻り番地）
   142 0000056A 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   143 0000056B 89E5                <1> 		mov		ebp, esp						; ------+--------
   144                              <1> 
   145                              <1> 		;---------------------------------------
   146                              <1> 		; 【レジスタの保存】
   147                              <1> 		;---------------------------------------
   148 0000056D 50                  <1> 		push	eax
   149 0000056E 53                  <1> 		push	ebx
   150 0000056F 51                  <1> 		push	ecx
   151 00000570 52                  <1> 		push	edx
   152 00000571 56                  <1> 		push	esi
   153 00000572 57                  <1> 		push	edi
   154                              <1> 
   155                              <1> 		;---------------------------------------
   156                              <1> 		; 引数を取得
   157                              <1> 		;---------------------------------------
   158 00000573 8B4508              <1> 		mov		eax, [ebp + 8]					; val  = 数値;
   159 00000576 8B750C              <1> 		mov		esi, [ebp +12]					; dst  = バッファアドレス;
   160 00000579 8B4D10              <1> 		mov		ecx, [ebp +16]					; size = 残りバッファサイズ;
   161                              <1> 
   162 0000057C 89F7                <1> 		mov		edi, esi						; // バッファの最後尾
   163 0000057E 01CF                <1> 		add		edi, ecx						; dst  = &dst[size - 1];
   164 00000580 4F                  <1> 		dec		edi								; 
   165                              <1> 
   166 00000581 8B5D18              <1> 		mov		ebx, [ebp +24]					; flags = オプション;
   167                              <1> 
   168                              <1> 		;---------------------------------------
   169                              <1> 		; 符号付き判定
   170                              <1> 		;---------------------------------------
   171 00000584 F7C301000000        <1> 		test	ebx, 0b0001						; if (flags & 0x01)// 符号付き
   172 0000058A 7408                <1> .10Q:	je		.10E							; {
   173 0000058C 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   174 0000058F 7D03                <1> .12Q:	jge		.12E							;   {
   175 00000591 83CB02              <1> 		or		ebx, 0b0010						;     flags |=  2; // 符号表示
   176                              <1> .12E:											;   }
   177                              <1> .10E:											; }
   178                              <1> 
   179                              <1> 		;---------------------------------------
   180                              <1> 		; 符号出力判定
   181                              <1> 		;---------------------------------------
   182 00000594 F7C302000000        <1> 		test	ebx, 0b0010						; if (flags & 0x02)// 符号出力判定
   183 0000059A 7410                <1> .20Q:	je		.20E							; {
   184 0000059C 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
   185 0000059F 7D07                <1> .22Q:	jge		.22F							;   {
   186 000005A1 F7D8                <1> 		neg		eax								;     val *= -1;   // 符号反転
   187 000005A3 C6062D              <1> 		mov		[esi], byte '-'					;     *dst = '-';  // 符号表示
   188 000005A6 EB03                <1> 		jmp		.22E							;   }
   189                              <1> .22F:											;   else
   190                              <1> 												;   {
   191 000005A8 C6062B              <1> 		mov		[esi], byte '+'					;     *dst = '+';  // 符号表示
   192                              <1> .22E:											;   }
   193 000005AB 49                  <1> 		dec		ecx								;   size--;        // 残りバッファサイズの減算
   194                              <1> .20E:											; }
   195                              <1> 
   196                              <1> 		;---------------------------------------
   197                              <1> 		; ASCII変換
   198                              <1> 		;---------------------------------------
   199 000005AC 8B5D14              <1> 		mov		ebx, [ebp +20]					; BX = 基数;
   200                              <1> .30L:											; do
   201                              <1> 												; {
   202 000005AF BA00000000          <1> 		mov		edx, 0							;   
   203 000005B4 F7F3                <1> 		div		ebx								;   DX = DX:AX % 基数;
   204                              <1> 												;   AX = DX:AX / 基数;
   205                              <1> 												;   
   206 000005B6 89D6                <1> 		mov		esi, edx						;   // テーブル参照
   207 000005B8 8A96[E3050000]      <1> 		mov		dl, byte [.ascii + esi]			;   DL = ASCII[DX];
   208                              <1> 												;   
   209 000005BE 8817                <1> 		mov		[edi], dl						;   *dst = DL;
   210 000005C0 4F                  <1> 		dec		edi								;   dst--;
   211                              <1> 												;   
   212 000005C1 83F800              <1> 		cmp		eax, 0							;   
   213 000005C4 E0E9                <1> 		loopnz	.30L							; } while (AX);
   214                              <1> .30E:
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; 空欄を埋める
   218                              <1> 		;---------------------------------------
   219 000005C6 83F900              <1> 		cmp		ecx, 0							; if (size)
   220 000005C9 740E                <1> .40Q:	je		.40E							; {
   221 000005CB B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   222 000005CD 66837D1804          <1> 		cmp		[ebp +24], word 0b0100			;   if (flags & 0x04)
   223 000005D2 7502                <1> .42Q:	jne		.42E							;   {
   224 000005D4 B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   225                              <1> .42E:											;   }
   226 000005D6 FD                  <1> 		std										;   // DF = 1（-方向）
   227 000005D7 F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   228                              <1> .40E:											; }
   229                              <1> 
   230                              <1> 		;---------------------------------------
   231                              <1> 		; 【レジスタの復帰】
   232                              <1> 		;---------------------------------------
   233 000005D9 5F                  <1> 		pop		edi
   234 000005DA 5E                  <1> 		pop		esi
   235 000005DB 5A                  <1> 		pop		edx
   236 000005DC 59                  <1> 		pop		ecx
   237 000005DD 5B                  <1> 		pop		ebx
   238 000005DE 58                  <1> 		pop		eax
   239                              <1> 
   240                              <1> 		;---------------------------------------
   241                              <1> 		; 【スタックフレームの破棄】
   242                              <1> 		;---------------------------------------
   243 000005DF 89EC                <1> 		mov		esp, ebp
   244 000005E1 5D                  <1> 		pop		ebp
   245                              <1> 
   246 000005E2 C3                  <1> 		ret
   247                              <1> 
   248 000005E3 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   248 000005EC 39414243444546      <1>
   249                              <1> 
   110                                  %include	"../modules/protect/rtc.s"
   111                              <1> ;************************************************************************
   112                              <1> ;	RTCから時刻データを取得する
   113                              <1> ;========================================================================
   114                              <1> ;■書式		: DWORD rtc_get_time(dst);
   115                              <1> ;
   116                              <1> ;■引数
   117                              <1> ;	dst		: 保存先アドレス
   118                              <1> ;
   119                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   120                              <1> ;************************************************************************
   121                              <1> rtc_get_time:
   122                              <1> 		;---------------------------------------
   123                              <1> 		; 【スタックフレームの構築】
   124                              <1> 		;---------------------------------------
   125                              <1> 												; ------|--------
   126                              <1> 												; EBP+ 8| 保存先アドレス
   127                              <1> 												; ---------------
   128 000005F3 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   129 000005F4 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   130                              <1> 												; ---------------
   131                              <1> 		;---------------------------------------
   132                              <1> 		; 【レジスタの保存】
   133                              <1> 		;---------------------------------------
   134 000005F6 53                  <1> 		push	ebx
   135                              <1> 
   136                              <1> 		;---------------------------------------
   137                              <1> 		; RTCから時刻を取得
   138                              <1> 		;---------------------------------------
   139 000005F7 B00A                <1> 		mov		al, 0x0A						; // レジスタA
   140 000005F9 E670                <1> 		out		0x70, al						; outp(0x70, AL);
   141 000005FB E471                <1> 		in		al, 0x71						; AL = レジスタA;
   142 000005FD A880                <1> 		test	al, 0x80						; if (DM & UIP) // 更新中
   143 000005FF 7407                <1> 		je		.10F							; {
   144 00000601 B801000000          <1> 		mov		eax, 1							;   ret = 1; // データ更新中
   145 00000606 EB27                <1> 		jmp		.10E							; }
   146                              <1> .10F:											; else
   147                              <1> 												; {
   148                              <1> 												;   // RAM[0x04]:時
   149 00000608 B004                <1> 		mov		al, 0x04						;   AL = 0x04;
   150 0000060A E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   151 0000060C E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 時データ
   152                              <1> 												;   
   153 0000060E C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   154                              <1> 												;   
   155                              <1> 												;   // RAM[0x02]:分
   156 00000611 B002                <1> 		mov		al, 0x02						;   AL = 0x02;
   157 00000613 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   158 00000615 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 分データ
   159                              <1> 												;   
   160 00000617 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
   161                              <1> 												;   
   162                              <1> 												;   // RAM[0x00]:秒
   163 0000061A B000                <1> 		mov		al, 0x00						;   AL = 0x00;
   164 0000061C E670                <1> 		out		0x70, al						;   outp(0x70, AL);
   165 0000061E E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 秒データ
   166                              <1> 												;   
   167 00000620 25FFFFFF00          <1> 		and		eax, 0x00_FF_FF_FF				;   // 下位3バイトのみ有効
   168                              <1> 												;   
   169 00000625 8B5D08              <1> 		mov		ebx, [ebp + 8]					;   dst = 保存先;
   170 00000628 8903                <1> 		mov		[ebx], eax						;   [dst] = 時刻;
   171                              <1> 												;   
   172 0000062A B800000000          <1> 		mov		eax, 0							;   ret = 0; // 正常終了
   173                              <1> .10E:											; }
   174                              <1> 
   175                              <1> 		;---------------------------------------
   176                              <1> 		; 【レジスタの復帰】
   177                              <1> 		;---------------------------------------
   178 0000062F 5B                  <1> 		pop		ebx
   179                              <1> 
   180                              <1> 		;---------------------------------------
   181                              <1> 		; 【スタックフレームの破棄】
   182                              <1> 		;---------------------------------------
   183 00000630 89EC                <1> 		mov		esp, ebp
   184 00000632 5D                  <1> 		pop		ebp
   185                              <1> 
   186 00000633 C3                  <1> 		ret
   187                              <1> 
   111                                  %include	"../modules/protect/draw_time.s"
   112                              <1> ;************************************************************************
   113                              <1> ;	時刻の表示
   114                              <1> ;========================================================================
   115                              <1> ;■書式		: void draw_time(col, row, color, time);
   116                              <1> ;
   117                              <1> ;■引数
   118                              <1> ;	col		: 列
   119                              <1> ;	row		: 行
   120                              <1> ;	color	: 描画色
   121                              <1> ;	time	: 時刻データ
   122                              <1> ;
   123                              <1> ;■戻り値	: 無し
   124                              <1> ;************************************************************************
   125                              <1> draw_time:
   126                              <1> 		;---------------------------------------
   127                              <1> 		; 【スタックフレームの構築】
   128                              <1> 		;---------------------------------------
   129                              <1> 												; ------|--------
   130                              <1> 												; EBP+20| 時刻データ
   131                              <1> 												; EBP+16| 色
   132                              <1> 												; EBP+12| Y（行）
   133                              <1> 												; EBP+ 8| X（列）
   134                              <1> 												; ---------------
   135 00000634 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   136 00000635 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
   137                              <1> 												; ---------------
   138                              <1> 		;---------------------------------------
   139                              <1> 		; 【レジスタの保存】
   140                              <1> 		;---------------------------------------
   141 00000637 50                  <1> 		push	eax
   142 00000638 53                  <1> 		push	ebx
   143                              <1> 
   144                              <1> 		;---------------------------------------
   145                              <1> 		; 
   146                              <1> 		;---------------------------------------
   147 00000639 8B4514              <1> 		mov		eax, [ebp +20]					; EAX = 時刻データ;
   148 0000063C 3B05[BA060000]      <1> 		cmp		eax, [.last]					; if (今回 != 前回)
   149 00000642 7467                <1> 		je		.10E							; {
   150                              <1> 												;   
   151 00000644 A3[BA060000]        <1> 		mov		[.last], eax					;   // 前回の時刻値を更新
   152                              <1> 												;   
   153 00000649 BB00000000          <1> 		mov		ebx, 0							;   EBX = 0;
   154 0000064E 88C3                <1> 		mov		bl, al							;   EBX = 秒;
   155 00000650 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .sec, 2, 16, 0b0100	;   // 時刻を文字列に変換
   155 00000657 [C8060000]53E809FF- <1>
   155 0000065F FFFF6683C414        <1>
   156                              <1> 
   157 00000665 88E3                <1> 		mov		bl, ah							;   EBX = 分;
   158 00000667 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .min, 2, 16, 0b0100	;   // 時刻を文字列に変換
   158 0000066E [C5060000]53E8F2FE- <1>
   158 00000676 FFFF6683C414        <1>
   159                              <1> 
   160 0000067C C1E810              <1> 		shr		eax, 16							;   EBX = 時;
   161 0000067F 6A046A106A0268-     <1> 		cdecl	itoa, eax, .hour, 2, 16, 0b0100	;   // 時刻を文字列に変換
   161 00000686 [C2060000]50E8DAFE- <1>
   161 0000068E FFFF6683C414        <1>
   162                              <1> 
   163                              <1> 												;   // 時刻を表示
   164 00000694 68[C2060000]FF7510- <1> 		cdecl	draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
   164 0000069C FF750CFF7508E825FC- <1>
   164 000006A5 FFFF6683C410        <1>
   165                              <1> 												;     
   166                              <1> 												;   }
   167                              <1> .10E:											; }
   168                              <1> 
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 【レジスタの復帰】
   171                              <1> 		;---------------------------------------
   172 000006AB 5B                  <1> 		pop		ebx
   173 000006AC 58                  <1> 		pop		eax
   174                              <1> 
   175                              <1> 		;---------------------------------------
   176                              <1> 		; 【スタックフレームの破棄】
   177                              <1> 		;---------------------------------------
   178 000006AD 89EC                <1> 		mov		esp, ebp
   179 000006AF 5D                  <1> 		pop		ebp
   180                              <1> 
   181 000006B0 C3                  <1> 		ret
   182                              <1> 
   183 000006B1 00                  <1> ALIGN 2, db 0
   184 000006B2 0000000000000000    <1> .temp:	dq	0
   185 000006BA 0000000000000000    <1> .last:	dq	0
   186 000006C2 5A5A3A              <1> .hour:	db	"ZZ:"
   187 000006C5 5A5A3A              <1> .min:	db	"ZZ:"
   188 000006C8 5A5A00              <1> .sec:	db	"ZZ", 0
   189                              <1> 
   112                                  %include	"../modules/protect/interrupt.s"
   113                              <1> ;************************************************************************
   114                              <1> ;	割り込みベクタの初期化
   115                              <1> ;************************************************************************
   116 000006CB 90                  <1> ALIGN 4
   117 000006CC FF07                <1> IDTR:	dw 		8 * 256 - 1					; idt_limit
   118 000006CE 00001000            <1> 		dd 		VECT_BASE					; idt location
   119                              <1> 
   120                              <1> ;************************************************************************
   121                              <1> ;	割り込みテーブルを初期化
   122                              <1> ;------------------------------------------------------------------------
   123                              <1> ;	
   124                              <1> ;	まず、全ての割り込みアドレスにデフォルト処理を設定すし、その後、
   125                              <1> ;	必要な割り込みだけ設定しなおす。
   126                              <1> ;	
   127                              <1> ;	割り込みアドレスは、VECT_BASEで指定され、256の割り込みがあるので
   128                              <1> ;	0x0800バイト占有することになる。
   129                              <1> ;	
   130                              <1> ;	           |____________| _V___
   131                              <1> ;	  VECT_BASE| IntDefault |  |   
   132                              <1> ;	           | IntDefault |  | 8 * 256
   133                              <1> ;	           |      :     |  |   
   134                              <1> ;	           |____________| _|___
   135                              <1> ;	      +0800|////////////|
   136                              <1> ;	           |            |
   137                              <1> ;	
   138                              <1> ;	一つの割り込み設定は8バイトで構成される。
   139                              <1> ;	
   140                              <1> ;	           |____________|____________| 
   141                              <1> ;	        [0]| Address Lo[15: 0]       | 
   142                              <1> ;	        [2]| Selector                | 
   143                              <1> ;	        [4]| Flags                   | 
   144                              <1> ;	        [6]|_Address Lo[32:16]_______| 
   145                              <1> ;	           |/////////////////////////| 
   146                              <1> ;	           |            |            | 
   147                              <1> ;	
   148                              <1> ;========================================================================
   149                              <1> ;■書式		: void init_int(void);
   150                              <1> ;
   151                              <1> ;■引数		: 無し
   152                              <1> ;
   153                              <1> ;■戻り値	: 無し
   154                              <1> ;************************************************************************
   155                              <1> init_int:
   156                              <1> 		;---------------------------------------
   157                              <1> 		; 【レジスタの保存】
   158                              <1> 		;---------------------------------------
   159 000006D2 50                  <1> 		push	eax
   160 000006D3 53                  <1> 		push	ebx
   161 000006D4 51                  <1> 		push	ecx
   162 000006D5 57                  <1> 		push	edi
   163                              <1> 
   164                              <1> 		;---------------------------------------
   165                              <1> 		; 全ての割り込みにデフォルト処理を設定
   166                              <1> 		;---------------------------------------
   167 000006D6 8D05[1C080000]      <1> 		lea		eax, [int_default]				; EAX   = 割り込み処理アドレス;
   168 000006DC BB008E0800          <1> 		mov		ebx, 0x0008_8E00				; EBX   = セグメントセレクタ;
   169 000006E1 6693                <1> 		xchg	ax, bx							; // 下位ワードを交換
   170                              <1> 
   171 000006E3 B900010000          <1> 		mov		ecx, 256						; ECX   = 割り込みベクタ数
   172 000006E8 BF00001000          <1> 		mov		edi, VECT_BASE					; EDI   = 割り込みベクタテーブル
   173                              <1> 
   174                              <1> .10L:											; do
   175                              <1> 												; {
   176 000006ED 891F                <1> 		mov		[edi + 0], ebx					;   [EDI + 0] = 割り込みディスクリプタ（下位）
   177 000006EF 894704              <1> 		mov		[edi + 4], eax					;   [EDI + 4] = 割り込みディスクリプタ（上位）
   178 000006F2 83C708              <1> 		add		edi, 8							;   EDI += 8;
   179 000006F5 E2F6                <1> 		loop	.10L							; } while (ECX--);
   180                              <1> 
   181                              <1> 		;---------------------------------------
   182                              <1> 		; 割り込みディスクリプタの設定
   183                              <1> 		;---------------------------------------
   184 000006F7 0F011D[CC060000]    <1> 		lidt	[IDTR]							; // 割り込みディスクリプタテーブルをロード
   185                              <1> 
   186                              <1> 		;---------------------------------------
   187                              <1> 		; 【レジスタの復帰】
   188                              <1> 		;---------------------------------------
   189 000006FE 5F                  <1> 		pop		edi
   190 000006FF 59                  <1> 		pop		ecx
   191 00000700 5B                  <1> 		pop		ebx
   192 00000701 58                  <1> 		pop		eax
   193                              <1> 
   194 00000702 C3                  <1> 		ret
   195                              <1> 
   196                              <1> ;************************************************************************
   197                              <1> ;	スタックの内容を表示して無限ループを実行
   198                              <1> ;************************************************************************
   199                              <1> int_stop:
   200 00000703 FB                  <1> 		sti										; // 割り込み許可
   201                              <1> 
   202                              <1> 		;---------------------------------------
   203                              <1> 		; EAXで示される文字列を表示
   204                              <1> 		;---------------------------------------
   205 00000704 50680F0600006A0F6A- <1> 		cdecl	draw_str, 25, 15, 0x060F, eax	; draw_str(EAX);
   205 0000070D 19E8B9FBFFFF6683C4- <1>
   205 00000716 10                  <1>
   206                              <1> 
   207                              <1> 		;---------------------------------------
   208                              <1> 		; スタックのデータを文字列に変換
   209                              <1> 		;---------------------------------------
   210 00000717 8B0424              <1> 		mov		eax, [esp + 0]					; EAX = ESP[ 0];
   211 0000071A 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p1, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   211 00000721 [DF070000]50E83FFE- <1>
   211 00000729 FFFF6683C414        <1>
   212                              <1> 
   213 0000072F 8B442404            <1> 		mov		eax, [esp + 4]					; EAX = ESP[ 4];
   214 00000733 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p2, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   214 0000073A [F0070000]50E826FE- <1>
   214 00000742 FFFF6683C414        <1>
   215                              <1> 
   216 00000748 8B442408            <1> 		mov		eax, [esp + 8]					; EAX = ESP[ 8];
   217 0000074C 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p3, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   217 00000753 [01080000]50E80DFE- <1>
   217 0000075B FFFF6683C414        <1>
   218                              <1> 
   219 00000761 8B44240C            <1> 		mov		eax, [esp +12]					; EAX = ESP[12];
   220 00000765 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p4, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   220 0000076C [12080000]50E8F4FD- <1>
   220 00000774 FFFF6683C414        <1>
   221                              <1> 
   222                              <1> 		;---------------------------------------
   223                              <1> 		; 文字列の表示
   224                              <1> 		;---------------------------------------
   225 0000077A 68[D8070000]68040F- <1> 		cdecl	draw_str, 25, 16, 0x0F04, .s1	; draw_str("ESP+ 0:-------- ");
   225 00000782 00006A106A19E83FFB- <1>
   225 0000078B FFFF6683C410        <1>
   226 00000791 68[E9070000]68040F- <1> 		cdecl	draw_str, 25, 17, 0x0F04, .s2	; draw_str("   + 4:-------- ");
   226 00000799 00006A116A19E828FB- <1>
   226 000007A2 FFFF6683C410        <1>
   227 000007A8 68[FA070000]68040F- <1> 		cdecl	draw_str, 25, 18, 0x0F04, .s3	; draw_str("   + 8:-------- ");
   227 000007B0 00006A126A19E811FB- <1>
   227 000007B9 FFFF6683C410        <1>
   228 000007BF 68[0B080000]68040F- <1> 		cdecl	draw_str, 25, 19, 0x0F04, .s4	; draw_str("   +12:-------- ");
   228 000007C7 00006A136A19E8FAFA- <1>
   228 000007D0 FFFF6683C410        <1>
   229                              <1> 
   230                              <1> 		;---------------------------------------
   231                              <1> 		; 無限ループ
   232                              <1> 		;---------------------------------------
   233 000007D6 EBFE                <1> 		jmp		$								; while (1) ; // 無限ループ
   234                              <1> 
   235 000007D8 4553502B20303A      <1> .s1		db	"ESP+ 0:"
   236 000007DF 5F5F5F5F5F5F5F5F20- <1> .p1		db	"________ ", 0
   236 000007E8 00                  <1>
   237 000007E9 2020202B20343A      <1> .s2		db	"   + 4:"
   238 000007F0 5F5F5F5F5F5F5F5F20- <1> .p2		db	"________ ", 0
   238 000007F9 00                  <1>
   239 000007FA 2020202B20383A      <1> .s3		db	"   + 8:"
   240 00000801 5F5F5F5F5F5F5F5F20- <1> .p3		db	"________ ", 0
   240 0000080A 00                  <1>
   241 0000080B 2020202B31323A      <1> .s4		db	"   +12:"
   242 00000812 5F5F5F5F5F5F5F5F20- <1> .p4		db	"________ ", 0
   242 0000081B 00                  <1>
   243                              <1> 
   244                              <1> ;************************************************************************
   245                              <1> ;	割り込み処理：デフォルトの処理
   246                              <1> ;************************************************************************
   247                              <1> int_default:
   248 0000081C 9C                  <1> 		pushf									; // EFLAGS(IF==0)
   249 0000081D 0E                  <1> 		push	cs								; // CS
   250 0000081E 68[03070000]        <1> 		push	int_stop						; // スタック表示処理
   251                              <1> 
   252 00000823 B8[29080000]        <1> 		mov		eax, .s0						; // 割り込み種別
   253 00000828 CF                  <1> 		iret
   254                              <1> 
   255 00000829 203C2020202053544F- <1> .s0		db	" <    STOP    > ", 0
   255 00000832 50202020203E2000    <1>
   256                              <1> 
   257                              <1> ;************************************************************************
   258                              <1> ;	割り込み処理：ゼロ除算
   259                              <1> ;************************************************************************
   260                              <1> int_zero_div:
   261 0000083A 9C                  <1> 		pushf									; // EFLAGS
   262 0000083B 0E                  <1> 		push	cs								; // CS
   263 0000083C 68[03070000]        <1> 		push	int_stop						; // スタック表示処理
   264                              <1> 
   265 00000841 B8[47080000]        <1> 		mov		eax, .s0						; // 割り込み種別
   266 00000846 CF                  <1> 		iret
   267                              <1> 
   268 00000847 203C20205A45524F20- <1> .s0		db	" <  ZERO DIV  > ", 0
   268 00000850 44495620203E2000    <1>
   269                              <1> 
   113                                  %include	"../modules/protect/pic.s"
   114                              <1> ;************************************************************************
   115                              <1> ;	割り込みコントローラの初期化
   116                              <1> ;========================================================================
   117                              <1> ;■書式		: void init_pic(void);
   118                              <1> ;
   119                              <1> ;■引数		: 無し
   120                              <1> ;
   121                              <1> ;■戻り値	: 無し
   122                              <1> ;************************************************************************
   123                              <1> init_pic:
   124                              <1> 		;---------------------------------------
   125                              <1> 		; 【レジスタの保存】
   126                              <1> 		;---------------------------------------
   127 00000858 50                  <1> 		push	eax
   128                              <1> 
   129                              <1> 		;---------------------------------------
   130                              <1> 		; マスタPICの設定
   131                              <1> 		;---------------------------------------
   132                              <1> 		outp	0x20, 0x11						; // MASTER.ICW1 = 0x11;
    69 00000859 B011                <2>  mov al, %2
    70 0000085B E620                <2>  out %1, al
   133                              <1> 		outp	0x21, 0x20						; // MASTER.ICW2 = 0x20;
    69 0000085D B020                <2>  mov al, %2
    70 0000085F E621                <2>  out %1, al
   134                              <1> 		outp	0x21, 0x04						; // MASTER.ICW3 = 0x04;
    69 00000861 B004                <2>  mov al, %2
    70 00000863 E621                <2>  out %1, al
   135                              <1> 		outp	0x21, 0x01						; // MASTER.ICW4 = 0x01;
    69 00000865 B001                <2>  mov al, %2
    70 00000867 E621                <2>  out %1, al
   136                              <1> 		outp	0x21, 0xFF						; // マスタ割り込みマスク
    69 00000869 B0FF                <2>  mov al, %2
    70 0000086B E621                <2>  out %1, al
   137                              <1> 
   138                              <1> 		;---------------------------------------
   139                              <1> 		; スレーブPICの設定
   140                              <1> 		;---------------------------------------
   141                              <1> 		outp	0xA0, 0x11						; // SLAVE.ICW1  = 0x11;
    69 0000086D B011                <2>  mov al, %2
    70 0000086F E6A0                <2>  out %1, al
   142                              <1> 		outp	0xA1, 0x28						; // SLAVE.ICW2  = 0x28;
    69 00000871 B028                <2>  mov al, %2
    70 00000873 E6A1                <2>  out %1, al
   143                              <1> 		outp	0xA1, 0x02						; // SLAVE.ICW3  = 0x02;
    69 00000875 B002                <2>  mov al, %2
    70 00000877 E6A1                <2>  out %1, al
   144                              <1> 		outp	0xA1, 0x01						; // SLAVE.ICW4  = 0x01;
    69 00000879 B001                <2>  mov al, %2
    70 0000087B E6A1                <2>  out %1, al
   145                              <1> 		outp	0xA1, 0xFF						; // スレーブ割り込みマスク
    69 0000087D B0FF                <2>  mov al, %2
    70 0000087F E6A1                <2>  out %1, al
   146                              <1> 
   147                              <1> 		;---------------------------------------
   148                              <1> 		; 【レジスタの復帰】
   149                              <1> 		;---------------------------------------
   150 00000881 58                  <1> 		pop		eax
   151                              <1> 
   152 00000882 C3                  <1> 		ret
   153                              <1> 
   114                                  %include	"../modules/protect/int_rtc.s"
   115                              <1> ;************************************************************************
   116                              <1> ;	RTCの割り込み許可設定
   117                              <1> ;========================================================================
   118                              <1> ;■書式		: void rtc_int_en(bit);
   119                              <1> ;
   120                              <1> ;■引数
   121                              <1> ;	bit		: 割り込みを許可するビット
   122                              <1> ;
   123                              <1> ;■戻り値	: 無し
   124                              <1> ;************************************************************************
   125                              <1> rtc_int_en:
   126                              <1> 		;---------------------------------------
   127                              <1> 		; 【スタックフレームの構築】
   128                              <1> 		;---------------------------------------
   129                              <1> 												; ------|--------
   130                              <1> 												;    + 8| ビット
   131                              <1> 												; ------|--------
   132                              <1> 												;    + 4| EIP（戻り番地）
   133 00000883 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   134 00000884 89E5                <1> 		mov		ebp, esp						; ------+--------
   135                              <1> 
   136                              <1> 		;---------------------------------------
   137                              <1> 		; 【レジスタの保存】
   138                              <1> 		;---------------------------------------
   139 00000886 50                  <1> 		push	eax
   140                              <1> 
   141                              <1> 		;---------------------------------------
   142                              <1> 		; 割り込み許可設定
   143                              <1> 		;---------------------------------------
   144                              <1> 		outp	0x70, 0x0B						; outp(0x70, AL);   // レジスタBを選択
    69 00000887 B00B                <2>  mov al, %2
    70 00000889 E670                <2>  out %1, al
   145                              <1> 
   146 0000088B E471                <1> 		in		al, 0x71						; AL  = port(0x71); // レジスタBの
   147 0000088D 0A4508              <1> 		or		al, [ebp + 8]					; AL |= ビット;     // 指定されたビットをセット
   148                              <1> 
   149 00000890 E671                <1> 		out		0x71, al						; outp(0x71, AL);   // レジスタBに書き込み
   150                              <1> 
   151                              <1> 		;---------------------------------------
   152                              <1> 		; 【レジスタの復帰】
   153                              <1> 		;---------------------------------------
   154 00000892 58                  <1> 		pop		eax
   155                              <1> 
   156                              <1> 		;---------------------------------------
   157                              <1> 		; 【スタックフレームの破棄】
   158                              <1> 		;---------------------------------------
   159 00000893 89EC                <1> 		mov		esp, ebp
   160 00000895 5D                  <1> 		pop		ebp
   161                              <1> 
   162 00000896 C3                  <1> 		ret
   163                              <1> 
   164                              <1> 
   165                              <1> ;************************************************************************
   166                              <1> ;	割り込み処理：RTC
   167                              <1> ;************************************************************************
   168                              <1> int_rtc:
   169                              <1> 		;---------------------------------------
   170                              <1> 		; 【レジスタの保存】
   171                              <1> 		;---------------------------------------
   172 00000897 60                  <1> 		pusha
   173 00000898 1E                  <1> 		push	ds
   174 00000899 06                  <1> 		push	es
   175                              <1> 
   176                              <1> 		;---------------------------------------
   177                              <1> 		; データ用セグメントセレクタの設定
   178                              <1> 		;---------------------------------------
   179 0000089A 66B81000            <1> 		mov		ax, 0x0010						; 
   180 0000089E 8ED8                <1> 		mov		ds, ax							; 
   181 000008A0 8EC0                <1> 		mov		es, ax							; 
   182                              <1> 
   183                              <1> 		;---------------------------------------
   184                              <1> 		; RTCから時刻を取得
   185                              <1> 		;---------------------------------------
   186 000008A2 68[0C010000]E847FD- <1> 		cdecl	rtc_get_time, RTC_TIME			; EAX = get_time(&RTC_TIME);
   186 000008AA FFFF6683C404        <1>
   187                              <1> 												; 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; RTCの割り込み要因を取得
   190                              <1> 		;---------------------------------------
   191                              <1> 		outp	0x70, 0x0C						; outp(0x70, 0x0C); // レジスタCを選択
    69 000008B0 B00C                <2>  mov al, %2
    70 000008B2 E670                <2>  out %1, al
   192 000008B4 E471                <1> 		in		al, 0x71						; AL = inp();
   193                              <1> 
   194                              <1> 		;---------------------------------------
   195                              <1> 		; 割り込みフラグをクリア(EOI)
   196                              <1> 		;---------------------------------------
   197                              <1> 		outp	0xA0, 0x20						; outp(0xA0, EOI); // スレーブPIC
    69 000008B6 B020                <2>  mov al, %2
    70 000008B8 E6A0                <2>  out %1, al
   198                              <1> 		outp	0x20, 0x20						; outp(0x20, EOI); // マスタPIC
    69 000008BA B020                <2>  mov al, %2
    70 000008BC E620                <2>  out %1, al
   199                              <1> 
   200                              <1> 		;---------------------------------------
   201                              <1> 		; 【レジスタの復帰】
   202                              <1> 		;---------------------------------------
   203 000008BE 07                  <1> 		pop		es								; 
   204 000008BF 1F                  <1> 		pop		ds								; 
   205 000008C0 61                  <1> 		popa									; 
   206                              <1> 
   207 000008C1 CF                  <1> 		iret									; 割り込み処理の終了
   208                              <1> 
   115                                  %include	"../modules/protect/int_keyboard.s"
   116                              <1> ;************************************************************************
   117                              <1> ;	割り込み処理：キーボード
   118                              <1> ;------------------------------------------------------------------------
   119                              <1> ;	KBC（キーボードコントローラ）からキーコードを取得して、
   120                              <1> ;	専用のリングバッファに保存する。
   121                              <1> ;************************************************************************
   122                              <1> int_keyboard:
   123                              <1> 		;---------------------------------------
   124                              <1> 		; 【レジスタの保存】
   125                              <1> 		;---------------------------------------
   126 000008C2 60                  <1> 		pusha
   127 000008C3 1E                  <1> 		push	ds
   128 000008C4 06                  <1> 		push	es
   129                              <1> 
   130                              <1> 		;---------------------------------------
   131                              <1> 		; データ用セグメントの設定
   132                              <1> 		;---------------------------------------
   133 000008C5 66B81000            <1> 		mov		ax, 0x0010						; 
   134 000008C9 8ED8                <1> 		mov		ds, ax							; 
   135 000008CB 8EC0                <1> 		mov		es, ax							; 
   136                              <1> 
   137                              <1> 		;---------------------------------------
   138                              <1> 		; KBCのバッファ読み取り
   139                              <1> 		;---------------------------------------
   140 000008CD E460                <1> 		in		al, 0x60						; AL = キーコードの取得
   141                              <1> 
   142                              <1> 		;---------------------------------------
   143                              <1> 		; キーコードの保存
   144                              <1> 		;---------------------------------------
   145 000008CF 5068[E8080000]E856- <1> 		cdecl	ring_wr, _KEY_BUFF, eax			; ring_wr(_KEY_BUFF, EAX); // キーコードの保存
   145 000008D7 0000006683C408      <1>
   146                              <1> 
   147                              <1> 		;---------------------------------------
   148                              <1> 		; 割り込み終了コマンド送信
   149                              <1> 		;---------------------------------------
   150                              <1> 		outp	0x20, 0x20						; outp(); // マスタPIC:EOIコマンド
    69 000008DE B020                <2>  mov al, %2
    70 000008E0 E620                <2>  out %1, al
   151                              <1> 
   152                              <1> 		;---------------------------------------
   153                              <1> 		; 【レジスタの復帰】
   154                              <1> 		;---------------------------------------
   155 000008E2 07                  <1> 		pop		es								; 
   156 000008E3 1F                  <1> 		pop		ds								; 
   157 000008E4 61                  <1> 		popa
   158                              <1> 
   159 000008E5 CF                  <1> 		iret									; 割り込みからの復帰
   160                              <1> 
   161 000008E6 00<rep 2h>          <1> ALIGN 4, db 0
   162 000008E8 00<rep 18h>         <1> _KEY_BUFF:	times ring_buff_size db 0
   163                              <1> 
   116                                  %include	"../modules/protect/ring_buff.s"
   117                              <1> ;************************************************************************
   118                              <1> ;	リングバッファからデータを取得
   119                              <1> ;========================================================================
   120                              <1> ;■書式		: DWORD ring_rd(buff, data);
   121                              <1> ;
   122                              <1> ;■引数
   123                              <1> ;	buff	: リングバッファ
   124                              <1> ;	data	: 読み込んだデータの保存先アドレス
   125                              <1> ;
   126                              <1> ;■戻り値	: データあり(0以外)、データ無し(0)
   127                              <1> ;************************************************************************
   128                              <1> ring_rd:
   129                              <1> 		;---------------------------------------
   130                              <1> 		; 【スタックフレームの構築】
   131                              <1> 		;---------------------------------------
   132                              <1> 												; ------|--------
   133                              <1> 												;    +12| リングデータ
   134                              <1> 												;    + 8| データアドレス
   135                              <1> 												; ------|--------
   136                              <1> 												;    + 4| EIP（戻り番地）
   137 00000900 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   138 00000901 89E5                <1> 		mov		ebp, esp						; ------+--------
   139                              <1> 
   140                              <1> 		;---------------------------------------
   141                              <1> 		; 【レジスタの保存】
   142                              <1> 		;---------------------------------------
   143 00000903 53                  <1> 		push	ebx
   144 00000904 56                  <1> 		push	esi
   145 00000905 57                  <1> 		push	edi
   146                              <1> 
   147                              <1> 		;---------------------------------------
   148                              <1> 		; 引数を取得
   149                              <1> 		;---------------------------------------
   150 00000906 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   151 00000909 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = データアドレス;
   152                              <1> 
   153                              <1> 		;---------------------------------------
   154                              <1> 		; 読み込み位置を確認
   155                              <1> 		;---------------------------------------
   156 0000090C B800000000          <1> 		mov		eax, 0							; EAX = 0;          // データ無し
   157 00000911 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;         // 読み込み位置
   158 00000913 3B5E04              <1> 		cmp		ebx, [esi + ring_buff.wp]		; if (EBX != wp)    // 書き込み位置と異なる
   159 00000916 7411                <1> 		je		.10E							; {
   160                              <1> 												;   
   161 00000918 8A441E08            <1> 		mov		al, [esi + ring_buff.item + ebx] ;   AL = BUFF[rp]; // キーコードを保存
   162                              <1> 												;   
   163 0000091C 8807                <1> 		mov		[edi], al						;   [EDI] = AL;     // データを保存
   164                              <1> 												;   
   165 0000091E 43                  <1> 		inc		ebx								;   EBX++;          // 次の読み込み位置
   166 0000091F 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= 0x0F     // サイズの制限
   167 00000922 891E                <1> 		mov		[esi + ring_buff.rp], ebx		;   rp = EBX;       // 読み込み位置を保存
   168                              <1> 												;   
   169 00000924 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // データあり
   170                              <1> .10E:											; }
   171                              <1> 
   172                              <1> 		;---------------------------------------
   173                              <1> 		; 【レジスタの復帰】
   174                              <1> 		;---------------------------------------
   175 00000929 5F                  <1> 		pop		edi
   176 0000092A 5E                  <1> 		pop		esi
   177 0000092B 5B                  <1> 		pop		ebx
   178                              <1> 
   179                              <1> 		;---------------------------------------
   180                              <1> 		; 【スタックフレームの破棄】
   181                              <1> 		;---------------------------------------
   182 0000092C 89EC                <1> 		mov		esp, ebp
   183 0000092E 5D                  <1> 		pop		ebp
   184                              <1> 
   185 0000092F C3                  <1> 		ret
   186                              <1> 
   187                              <1> ;************************************************************************
   188                              <1> ;	リングバッファにデータを格納
   189                              <1> ;========================================================================
   190                              <1> ;■書式		: DWORD ring_wr(buff, data);
   191                              <1> ;
   192                              <1> ;■引数
   193                              <1> ;	buff	: リングバッファ
   194                              <1> ;	data	: 書き込むデータ
   195                              <1> ;
   196                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
   197                              <1> ;************************************************************************
   198                              <1> ring_wr:
   199                              <1> 		;---------------------------------------
   200                              <1> 		; 【スタックフレームの構築】
   201                              <1> 		;---------------------------------------
   202                              <1> 												; ------|--------
   203                              <1> 												;    +12| リングデータ
   204                              <1> 												;    + 8| データ
   205                              <1> 												; ------|--------
   206                              <1> 												;    + 4| EIP（戻り番地）
   207 00000930 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
   208 00000931 89E5                <1> 		mov		ebp, esp						; ------+--------
   209                              <1> 
   210                              <1> 		;---------------------------------------
   211                              <1> 		; 【レジスタの保存】
   212                              <1> 		;---------------------------------------
   213 00000933 53                  <1> 		push	ebx
   214 00000934 51                  <1> 		push	ecx
   215 00000935 56                  <1> 		push	esi
   216                              <1> 
   217                              <1> 		;---------------------------------------
   218                              <1> 		; 引数を取得
   219                              <1> 		;---------------------------------------
   220 00000936 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   221                              <1> 
   222                              <1> 		;---------------------------------------
   223                              <1> 		; 書き込み位置を確認
   224                              <1> 		;---------------------------------------
   225 00000939 B800000000          <1> 		mov		eax, 0							; EAX  = 0;         // 失敗
   226 0000093E 8B5E04              <1> 		mov		ebx, [esi + ring_buff.wp]		; EBX  = wp;        // 書き込み位置
   227 00000941 89D9                <1> 		mov		ecx, ebx						; ECX  = EBX;
   228 00000943 41                  <1> 		inc		ecx								; ECX++;            // 次の書き込み位置
   229 00000944 83E10F              <1> 		and		ecx, RING_INDEX_MASK			; ECX &= 0x0F       // サイズの制限
   230                              <1> 												; 
   231 00000947 3B0E                <1> 		cmp		ecx, [esi + ring_buff.rp]		; if (ECX != rp)    // 読み込み位置と異なる
   232 00000949 740F                <1> 		je		.10E							; {
   233                              <1> 												; 
   234 0000094B 8A450C              <1> 		mov		al, [ebp +12]					;   AL = データ;
   235                              <1> 												; 
   236 0000094E 88441E08            <1> 		mov		[esi + ring_buff.item + ebx], al ;   BUFF[wp] = AL; // キーコードを保存
   237 00000952 894E04              <1> 		mov		[esi + ring_buff.wp], ecx		;   wp = ECX;       // 書き込み位置を保存
   238 00000955 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // 成功
   239                              <1> .10E:											; }
   240                              <1> 
   241                              <1> 		;---------------------------------------
   242                              <1> 		; 【レジスタの復帰】
   243                              <1> 		;---------------------------------------
   244 0000095A 5E                  <1> 		pop		esi
   245 0000095B 59                  <1> 		pop		ecx
   246 0000095C 5B                  <1> 		pop		ebx
   247                              <1> 
   248                              <1> 		;---------------------------------------
   249                              <1> 		; 【スタックフレームの破棄】
   250                              <1> 		;---------------------------------------
   251 0000095D 89EC                <1> 		mov		esp, ebp
   252 0000095F 5D                  <1> 		pop		ebp
   253                              <1> 
   254 00000960 C3                  <1> 		ret
   255                              <1> 
   256                              <1> ;************************************************************************
   257                              <1> ;	リングバッファ内要素の表示
   258                              <1> ;========================================================================
   259                              <1> ;■書式		: void ring_show(col, row, buff);
   260                              <1> ;
   261                              <1> ;■引数
   262                              <1> ;	col		: 列
   263                              <1> ;	row		: 行
   264                              <1> ;	buff	: リングバッファ
   265                              <1> ;
   266                              <1> ;■戻り値	: 無し
   267                              <1> ;************************************************************************
   268                              <1> draw_key:
   269                              <1> 		;---------------------------------------
   270                              <1> 		; 【スタックフレームの構築】
   271                              <1> 		;---------------------------------------
   272                              <1> 												; ------|--------
   273                              <1> 												; EBP+16| リングバッファ
   274                              <1> 												; EBP+12| Y（行）
   275                              <1> 												; EBP+ 8| X（列）
   276                              <1> 												; ------|--------
   277 00000961 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   278 00000962 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   279                              <1> 												; ------|--------
   280                              <1> 
   281                              <1> 		;---------------------------------------
   282                              <1> 		; 【レジスタの保存】
   283                              <1> 		;---------------------------------------
   284 00000964 60                  <1> 		pusha
   285                              <1> 
   286                              <1> 		;---------------------------------------
   287                              <1> 		; 引数を取得
   288                              <1> 		;---------------------------------------
   289 00000965 8B5508              <1> 		mov		edx, [ebp + 8]					; EDX = X（列）;
   290 00000968 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）;
   291 0000096B 8B7510              <1> 		mov		esi, [ebp +16]					; ESI = リングバッファ;
   292                              <1> 
   293                              <1> 		;---------------------------------------
   294                              <1> 		; リングバッファの情報を取得
   295                              <1> 		;---------------------------------------
   296 0000096E 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;             // 読み込み位置
   297 00000970 8D7608              <1> 		lea		esi, [esi + ring_buff.item]		; ESI = &KEY_BUFF[EBX];
   298 00000973 B910000000          <1> 		mov		ecx, RING_ITEM_SIZE				; ECX = RING_ITEM_SIZE; // 要素数
   299                              <1> 
   300                              <1> 		;---------------------------------------
   301                              <1> 		; 文字に変換しながら表示
   302                              <1> 		;---------------------------------------
   303                              <1> .10L:											; do
   304                              <1> 												; {
   305 00000978 4B                  <1> 		dec		ebx								;   EBX--; // 読み込み位置
   306 00000979 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= RING_INDEX_MASK;
   307 0000097C 8A041E              <1> 		mov		al, [esi + ebx]					;   EAX  = KEY_BUFF[EBX];
   308                              <1> 												;   
   309 0000097F 6A046A106A0268-     <1> 		cdecl	itoa, eax, .tmp, 2, 16, 0b0100	;   // キーコードを文字列に変換
   309 00000986 [B0090000]50E8DAFB- <1>
   309 0000098E FFFF6683C414        <1>
   310 00000994 68[B0090000]6A0257- <1> 		cdecl	draw_str, edx, edi, 0x02, .tmp	;   // 変換した文字列を表示
   310 0000099C 52E82AF9FFFF6683C4- <1>
   310 000009A5 10                  <1>
   311                              <1> 												;   
   312 000009A6 83C203              <1> 		add		edx, 3							;   // 表示位置を更新（3文字分）
   313                              <1> 												;   
   314 000009A9 E2CD                <1> 		loop	.10L							;   
   315                              <1> .10E:											; } while (ECX--);
   316                              <1> 
   317                              <1> 		;---------------------------------------
   318                              <1> 		; 【レジスタの復帰】
   319                              <1> 		;---------------------------------------
   320 000009AB 61                  <1> 		popa
   321                              <1> 
   322                              <1> 		;---------------------------------------
   323                              <1> 		; 【スタックフレームの破棄】
   324                              <1> 		;---------------------------------------
   325 000009AC 89EC                <1> 		mov		esp, ebp
   326 000009AE 5D                  <1> 		pop		ebp
   327                              <1> 
   328 000009AF C3                  <1> 		ret
   329                              <1> 
   330 000009B0 2D2D2000            <1> .tmp	db "-- ", 0
   117                                  
   118                                  ;************************************************************************
   119                                  ;	パディング
   120                                  ;************************************************************************
   121 000009B4 00<rep 164Ch>           		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
   122                                  
